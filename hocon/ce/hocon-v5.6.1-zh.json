{
  "doc" : "",
  "hash" : "T-root",
  "fields" : [
    {
      "refs" : [
        {
          "doc" : "MQTT listeners identified by their protocol type and assigned names",
          "hash" : "T-listeners-S-listeners",
          "fields" : [
            {
              "doc" : "TCP 监听器。",
              "refs" : [
                {
                  "doc" : "Settings for the MQTT over TCP listener.",
                  "hash" : "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener",
                  "fields" : [
                    {
                      "doc" : "启停监听器。",
                      "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-enable",
                      "aliases" : [
                        "enabled"
                      ],
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "监听套接字的 IP 地址和端口。",
                      "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-bind",
                      "text" : "bind",
                      "type" : "String",
                      "default" : "1883"
                    },
                    {
                      "doc" : "监听器接收池的大小。",
                      "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-acceptors",
                      "text" : "acceptors",
                      "type" : "Integer(1..+inf)",
                      "default" : "16"
                    },
                    {
                      "doc" : "监听器允许的最大并发连接数。",
                      "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-max_connections",
                      "text" : "max_connections",
                      "type" : "OneOf(String(\"infinity\"),Integer(1..+inf))",
                      "default" : "infinity"
                    },
                    {
                      "doc" : "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端 B（与客户端 A 连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
                      "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-mountpoint",
                      "text" : "mountpoint",
                      "type" : "String",
                      "default" : "\"\""
                    },
                    {
                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
                      "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-enable_authn",
                      "text" : "enable_authn",
                      "type" : "Enum(true,false,quick_deny_anonymous)",
                      "default" : "true"
                    },
                    {
                      "doc" : "最大连接速率。<br/>\n这用于限制该节点的连接速率。\n一旦达到限制，新的连接将被推迟或拒绝。<br/>\n例如：<br/>\n- <code>1000/s</code>：每秒只接受1000个连接<br/>\n- <code>1000/10s</code>：每10秒只接受1000个连接。",
                      "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-max_conn_rate",
                      "text" : "max_conn_rate",
                      "type" : "String"
                    },
                    {
                      "doc" : "消息发布速率。<br/>\n这用于限制该节点的入站消息数量。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n例如：<br/>\n- <code>500/s</code>：每秒只发送前500条消息，其他消息被缓冲。<br/>\n- <code>500/10s</code>：即使是10秒，也只发送前500条消息，其他消息被缓冲。",
                      "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-messages_rate",
                      "text" : "messages_rate",
                      "type" : "String"
                    },
                    {
                      "doc" : "数据发布速率。<br/>\n这用于限制该节点的入站字节速率。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n字节的单位可以是：KB MB GB。<br/>\n例如：<br/>\n- <code>500KB/s</code>：每秒只发送前500千字节，其他消息被缓冲。<br/>\n- <code>500MB/10s</code>：即使是10秒，也只发送前500兆字节，其他消息被缓冲。",
                      "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-bytes_rate",
                      "text" : "bytes_rate",
                      "type" : "String"
                    },
                    {
                      "doc" : "此监听器的访问控制规则。",
                      "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-access_rules",
                      "text" : "access_rules",
                      "type" : "Array(String)",
                      "default" : "[\"allow all\"]"
                    },
                    {
                      "doc" : "如果 EMQX 集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                      "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-proxy_protocol",
                      "text" : "proxy_protocol",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX 将关闭 TCP 连接。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-proxy_protocol_timeout",
                      "text" : "proxy_protocol_timeout",
                      "type" : "Duration",
                      "default" : "3s"
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "TCP listener options.",
                          "hash" : "T-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts",
                          "fields" : [
                            {
                              "doc" : "为此套接字指定{active，N}选项<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                              "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-active_n",
                              "text" : "active_n",
                              "type" : "Integer",
                              "default" : "100"
                            },
                            {
                              "doc" : "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
                              "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-backlog",
                              "text" : "backlog",
                              "type" : "Integer(1..+inf)",
                              "default" : "1024"
                            },
                            {
                              "doc" : "连接的 TCP 发送超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-send_timeout",
                              "text" : "send_timeout",
                              "type" : "Duration",
                              "default" : "15s"
                            },
                            {
                              "doc" : "如果发送超时，则关闭连接。",
                              "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-send_timeout_close",
                              "text" : "send_timeout_close",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "连接的 TCP 接收缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-recbuf",
                              "text" : "recbuf",
                              "type" : "Bytesize"
                            },
                            {
                              "doc" : "连接的 TCP 发送缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-sndbuf",
                              "text" : "sndbuf",
                              "type" : "Bytesize"
                            },
                            {
                              "doc" : "驱动程序使用的用户空间缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-buffer",
                              "text" : "buffer",
                              "type" : "Bytesize",
                              "default" : "4KB"
                            },
                            {
                              "doc" : "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-high_watermark",
                              "text" : "high_watermark",
                              "type" : "Bytesize",
                              "default" : "1MB"
                            },
                            {
                              "doc" : "连接的 TCP_NODELAY 标识",
                              "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-nodelay",
                              "text" : "nodelay",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "连接的 SO_REUSEADDR 标识。",
                              "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-reuseaddr",
                              "text" : "reuseaddr",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "为 MQTT 连接在 TCP 或 SSL 上启用 TCP 保活。\n值是以逗号分隔的三个数字，格式为 'Idle,Interval,Probes'\n - Idle: 在服务器开始发送保活探测之前，连接需要处于空闲状态的秒数（Linux 默认为 7200）。\n - Interval: TCP 保活探测间隔的秒数（Linux 默认值为 75）。\n - Probes: 在放弃并终止连接之前，从另一端未获得响应时要发送的 TCP 保活探测的最大数量（Linux 默认值为 9 次）。\n例如 \"240,30,5\" 表示：在连接空闲 240 秒后发送 TCP 保活探测，每隔 30 秒发送一次，直到收到响应，如果连续丢失 5 个响应，连接应该被关闭。\n默认值为 'none'",
                              "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options-S-tcp_opts-keepalive",
                              "text" : "keepalive",
                              "type" : "String",
                              "default" : "none"
                            }
                          ],
                          "text" : "tcp_opts"
                        }
                      ],
                      "hash" : "V-listeners-S-listeners-tcp-S-mqtt_tcp_listener-tcp_options",
                      "text" : "tcp_options",
                      "type" : "Struct(tcp_opts)"
                    }
                  ],
                  "text" : "mqtt_tcp_listener"
                }
              ],
              "hash" : "V-listeners-S-listeners-tcp",
              "text" : "tcp",
              "type" : "Map($name->OneOf(Struct(mqtt_tcp_listener),String(\"marked_for_deletion\")))"
            },
            {
              "doc" : "SSL 监听器。",
              "refs" : [
                {
                  "doc" : "Settings for the MQTT over SSL listener.",
                  "hash" : "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener",
                  "fields" : [
                    {
                      "doc" : "启停监听器。",
                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-enable",
                      "aliases" : [
                        "enabled"
                      ],
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "监听套接字的 IP 地址和端口。",
                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-bind",
                      "text" : "bind",
                      "type" : "String",
                      "default" : "8883"
                    },
                    {
                      "doc" : "监听器接收池的大小。",
                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-acceptors",
                      "text" : "acceptors",
                      "type" : "Integer(1..+inf)",
                      "default" : "16"
                    },
                    {
                      "doc" : "监听器允许的最大并发连接数。",
                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-max_connections",
                      "text" : "max_connections",
                      "type" : "OneOf(String(\"infinity\"),Integer(1..+inf))",
                      "default" : "infinity"
                    },
                    {
                      "doc" : "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端 B（与客户端 A 连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-mountpoint",
                      "text" : "mountpoint",
                      "type" : "String",
                      "default" : "\"\""
                    },
                    {
                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-enable_authn",
                      "text" : "enable_authn",
                      "type" : "Enum(true,false,quick_deny_anonymous)",
                      "default" : "true"
                    },
                    {
                      "doc" : "最大连接速率。<br/>\n这用于限制该节点的连接速率。\n一旦达到限制，新的连接将被推迟或拒绝。<br/>\n例如：<br/>\n- <code>1000/s</code>：每秒只接受1000个连接<br/>\n- <code>1000/10s</code>：每10秒只接受1000个连接。",
                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-max_conn_rate",
                      "text" : "max_conn_rate",
                      "type" : "String"
                    },
                    {
                      "doc" : "消息发布速率。<br/>\n这用于限制该节点的入站消息数量。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n例如：<br/>\n- <code>500/s</code>：每秒只发送前500条消息，其他消息被缓冲。<br/>\n- <code>500/10s</code>：即使是10秒，也只发送前500条消息，其他消息被缓冲。",
                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-messages_rate",
                      "text" : "messages_rate",
                      "type" : "String"
                    },
                    {
                      "doc" : "数据发布速率。<br/>\n这用于限制该节点的入站字节速率。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n字节的单位可以是：KB MB GB。<br/>\n例如：<br/>\n- <code>500KB/s</code>：每秒只发送前500千字节，其他消息被缓冲。<br/>\n- <code>500MB/10s</code>：即使是10秒，也只发送前500兆字节，其他消息被缓冲。",
                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-bytes_rate",
                      "text" : "bytes_rate",
                      "type" : "String"
                    },
                    {
                      "doc" : "此监听器的访问控制规则。",
                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-access_rules",
                      "text" : "access_rules",
                      "type" : "Array(String)",
                      "default" : "[\"allow all\"]"
                    },
                    {
                      "doc" : "如果 EMQX 集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-proxy_protocol",
                      "text" : "proxy_protocol",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX 将关闭 TCP 连接。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-proxy_protocol_timeout",
                      "text" : "proxy_protocol_timeout",
                      "type" : "Duration",
                      "default" : "3s"
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "TCP listener options.",
                          "hash" : "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts",
                          "fields" : [
                            {
                              "doc" : "为此套接字指定{active，N}选项<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-active_n",
                              "text" : "active_n",
                              "type" : "Integer",
                              "default" : "100"
                            },
                            {
                              "doc" : "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-backlog",
                              "text" : "backlog",
                              "type" : "Integer(1..+inf)",
                              "default" : "1024"
                            },
                            {
                              "doc" : "连接的 TCP 发送超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-send_timeout",
                              "text" : "send_timeout",
                              "type" : "Duration",
                              "default" : "15s"
                            },
                            {
                              "doc" : "如果发送超时，则关闭连接。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-send_timeout_close",
                              "text" : "send_timeout_close",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "连接的 TCP 接收缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-recbuf",
                              "text" : "recbuf",
                              "type" : "Bytesize"
                            },
                            {
                              "doc" : "连接的 TCP 发送缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-sndbuf",
                              "text" : "sndbuf",
                              "type" : "Bytesize"
                            },
                            {
                              "doc" : "驱动程序使用的用户空间缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-buffer",
                              "text" : "buffer",
                              "type" : "Bytesize",
                              "default" : "4KB"
                            },
                            {
                              "doc" : "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-high_watermark",
                              "text" : "high_watermark",
                              "type" : "Bytesize",
                              "default" : "1MB"
                            },
                            {
                              "doc" : "连接的 TCP_NODELAY 标识",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-nodelay",
                              "text" : "nodelay",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "连接的 SO_REUSEADDR 标识。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-reuseaddr",
                              "text" : "reuseaddr",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "为 MQTT 连接在 TCP 或 SSL 上启用 TCP 保活。\n值是以逗号分隔的三个数字，格式为 'Idle,Interval,Probes'\n - Idle: 在服务器开始发送保活探测之前，连接需要处于空闲状态的秒数（Linux 默认为 7200）。\n - Interval: TCP 保活探测间隔的秒数（Linux 默认值为 75）。\n - Probes: 在放弃并终止连接之前，从另一端未获得响应时要发送的 TCP 保活探测的最大数量（Linux 默认值为 9 次）。\n例如 \"240,30,5\" 表示：在连接空闲 240 秒后发送 TCP 保活探测，每隔 30 秒发送一次，直到收到响应，如果连续丢失 5 个响应，连接应该被关闭。\n默认值为 'none'",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options-S-tcp_opts-keepalive",
                              "text" : "keepalive",
                              "type" : "String",
                              "default" : "none"
                            }
                          ],
                          "text" : "tcp_opts"
                        }
                      ],
                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-tcp_options",
                      "text" : "tcp_options",
                      "type" : "Struct(tcp_opts)"
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "Socket options for SSL connections.",
                          "hash" : "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String",
                              "default" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-certfile",
                              "text" : "certfile",
                              "type" : "String",
                              "default" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String",
                              "default" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "如果协商使用 Diffie-Hellman 密钥交换的密码套件，则服务器将使用包含 PEM 编码的 Diffie-Hellman 参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3 不支持<code>dhfile</code>选项。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-dhfile",
                              "text" : "dhfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为 true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为 false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-fail_if_no_peer_cert",
                              "text" : "fail_if_no_peer_cert",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-honor_cipher_order",
                              "text" : "honor_cipher_order",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-client_renegotiation",
                              "text" : "client_renegotiation",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "握手完成所允许的最长时间<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-handshake_timeout",
                              "text" : "handshake_timeout",
                              "type" : "Duration",
                              "default" : "15s"
                            },
                            {
                              "doc" : "内存使用调优。如果启用，将在 TLS/SSL 握手完成后立即执行垃圾回收。TLS/SSL 握手建立后立即进行 GC。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-gc_after_handshake",
                              "text" : "gc_after_handshake",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "refs" : [
                                {
                                  "doc" : "Per listener OCSP Stapling configuration.",
                                  "hash" : "T-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp",
                                  "fields" : [
                                    {
                                      "doc" : "是否为监听器启用 OCSP Stapling 功能。 如果设置为 true，需要定义 OCSP Responder 的 URL 和证书签发者的 PEM 文件路径。",
                                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-enable_ocsp_stapling",
                                      "text" : "enable_ocsp_stapling",
                                      "type" : "Boolean",
                                      "default" : "false"
                                    },
                                    {
                                      "doc" : "用于检查服务器证书的 OCSP Responder 的 URL。",
                                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-responder_url",
                                      "text" : "responder_url",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "服务器证书的 OCSP 签发者的 PEM 编码证书。",
                                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-issuer_pem",
                                      "text" : "issuer_pem",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "为服务器刷新 OCSP 响应的周期。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-refresh_interval",
                                      "text" : "refresh_interval",
                                      "type" : "Duration",
                                      "default" : "5m"
                                    },
                                    {
                                      "doc" : "检查 OCSP 响应时，HTTP 请求的超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-refresh_http_timeout",
                                      "text" : "refresh_http_timeout",
                                      "type" : "Duration",
                                      "default" : "15s"
                                    }
                                  ],
                                  "text" : "ocsp"
                                }
                              ],
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-ocsp",
                              "text" : "ocsp",
                              "type" : "Struct(ocsp)"
                            },
                            {
                              "doc" : "是否为该监听器启用 CRL 检查。",
                              "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options-S-listener_ssl_opts-enable_crl_check",
                              "text" : "enable_crl_check",
                              "type" : "Boolean",
                              "default" : "false"
                            }
                          ],
                          "text" : "listener_ssl_opts"
                        }
                      ],
                      "hash" : "V-listeners-S-listeners-ssl-S-mqtt_ssl_listener-ssl_options",
                      "text" : "ssl_options",
                      "type" : "Struct(listener_ssl_opts)"
                    }
                  ],
                  "text" : "mqtt_ssl_listener"
                }
              ],
              "hash" : "V-listeners-S-listeners-ssl",
              "text" : "ssl",
              "type" : "Map($name->OneOf(Struct(mqtt_ssl_listener),String(\"marked_for_deletion\")))"
            },
            {
              "doc" : "HTTP websocket 监听器。",
              "refs" : [
                {
                  "doc" : "Settings for the MQTT over WebSocket listener.",
                  "hash" : "T-listeners-S-listeners-ws-S-mqtt_ws_listener",
                  "fields" : [
                    {
                      "doc" : "启停监听器。",
                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-enable",
                      "aliases" : [
                        "enabled"
                      ],
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "监听套接字的 IP 地址和端口。",
                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-bind",
                      "text" : "bind",
                      "type" : "String",
                      "default" : "8083"
                    },
                    {
                      "doc" : "监听器接收池的大小。",
                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-acceptors",
                      "text" : "acceptors",
                      "type" : "Integer(1..+inf)",
                      "default" : "16"
                    },
                    {
                      "doc" : "监听器允许的最大并发连接数。",
                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-max_connections",
                      "text" : "max_connections",
                      "type" : "OneOf(String(\"infinity\"),Integer(1..+inf))",
                      "default" : "infinity"
                    },
                    {
                      "doc" : "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端 B（与客户端 A 连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-mountpoint",
                      "text" : "mountpoint",
                      "type" : "String",
                      "default" : "\"\""
                    },
                    {
                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-enable_authn",
                      "text" : "enable_authn",
                      "type" : "Enum(true,false,quick_deny_anonymous)",
                      "default" : "true"
                    },
                    {
                      "doc" : "最大连接速率。<br/>\n这用于限制该节点的连接速率。\n一旦达到限制，新的连接将被推迟或拒绝。<br/>\n例如：<br/>\n- <code>1000/s</code>：每秒只接受1000个连接<br/>\n- <code>1000/10s</code>：每10秒只接受1000个连接。",
                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-max_conn_rate",
                      "text" : "max_conn_rate",
                      "type" : "String"
                    },
                    {
                      "doc" : "消息发布速率。<br/>\n这用于限制该节点的入站消息数量。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n例如：<br/>\n- <code>500/s</code>：每秒只发送前500条消息，其他消息被缓冲。<br/>\n- <code>500/10s</code>：即使是10秒，也只发送前500条消息，其他消息被缓冲。",
                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-messages_rate",
                      "text" : "messages_rate",
                      "type" : "String"
                    },
                    {
                      "doc" : "数据发布速率。<br/>\n这用于限制该节点的入站字节速率。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n字节的单位可以是：KB MB GB。<br/>\n例如：<br/>\n- <code>500KB/s</code>：每秒只发送前500千字节，其他消息被缓冲。<br/>\n- <code>500MB/10s</code>：即使是10秒，也只发送前500兆字节，其他消息被缓冲。",
                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-bytes_rate",
                      "text" : "bytes_rate",
                      "type" : "String"
                    },
                    {
                      "doc" : "此监听器的访问控制规则。",
                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-access_rules",
                      "text" : "access_rules",
                      "type" : "Array(String)",
                      "default" : "[\"allow all\"]"
                    },
                    {
                      "doc" : "如果 EMQX 集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-proxy_protocol",
                      "text" : "proxy_protocol",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX 将关闭 TCP 连接。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-proxy_protocol_timeout",
                      "text" : "proxy_protocol_timeout",
                      "type" : "Duration",
                      "default" : "3s"
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "TCP listener options.",
                          "hash" : "T-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts",
                          "fields" : [
                            {
                              "doc" : "为此套接字指定{active，N}选项<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-active_n",
                              "text" : "active_n",
                              "type" : "Integer",
                              "default" : "100"
                            },
                            {
                              "doc" : "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-backlog",
                              "text" : "backlog",
                              "type" : "Integer(1..+inf)",
                              "default" : "1024"
                            },
                            {
                              "doc" : "连接的 TCP 发送超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-send_timeout",
                              "text" : "send_timeout",
                              "type" : "Duration",
                              "default" : "15s"
                            },
                            {
                              "doc" : "如果发送超时，则关闭连接。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-send_timeout_close",
                              "text" : "send_timeout_close",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "连接的 TCP 接收缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-recbuf",
                              "text" : "recbuf",
                              "type" : "Bytesize"
                            },
                            {
                              "doc" : "连接的 TCP 发送缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-sndbuf",
                              "text" : "sndbuf",
                              "type" : "Bytesize"
                            },
                            {
                              "doc" : "驱动程序使用的用户空间缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-buffer",
                              "text" : "buffer",
                              "type" : "Bytesize",
                              "default" : "4KB"
                            },
                            {
                              "doc" : "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-high_watermark",
                              "text" : "high_watermark",
                              "type" : "Bytesize",
                              "default" : "1MB"
                            },
                            {
                              "doc" : "连接的 TCP_NODELAY 标识",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-nodelay",
                              "text" : "nodelay",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "连接的 SO_REUSEADDR 标识。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-reuseaddr",
                              "text" : "reuseaddr",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "为 MQTT 连接在 TCP 或 SSL 上启用 TCP 保活。\n值是以逗号分隔的三个数字，格式为 'Idle,Interval,Probes'\n - Idle: 在服务器开始发送保活探测之前，连接需要处于空闲状态的秒数（Linux 默认为 7200）。\n - Interval: TCP 保活探测间隔的秒数（Linux 默认值为 75）。\n - Probes: 在放弃并终止连接之前，从另一端未获得响应时要发送的 TCP 保活探测的最大数量（Linux 默认值为 9 次）。\n例如 \"240,30,5\" 表示：在连接空闲 240 秒后发送 TCP 保活探测，每隔 30 秒发送一次，直到收到响应，如果连续丢失 5 个响应，连接应该被关闭。\n默认值为 'none'",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options-S-tcp_opts-keepalive",
                              "text" : "keepalive",
                              "type" : "String",
                              "default" : "none"
                            }
                          ],
                          "text" : "tcp_opts"
                        }
                      ],
                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-tcp_options",
                      "text" : "tcp_options",
                      "type" : "Struct(tcp_opts)"
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "WebSocket listener options.",
                          "hash" : "T-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts",
                          "fields" : [
                            {
                              "doc" : "WebSocket 的 MQTT 协议路径。因此，EMQX Broker 的 WebSocket 地址为：\n<code>ws://{ip}:{port}/mqtt</code>",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-mqtt_path",
                              "text" : "mqtt_path",
                              "type" : "String",
                              "default" : "\"/mqtt\""
                            },
                            {
                              "doc" : "WebSocket 消息是否允许包含多个 MQTT 数据包。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-mqtt_piggyback",
                              "text" : "mqtt_piggyback",
                              "type" : "Enum(single,multiple)",
                              "default" : "multiple"
                            },
                            {
                              "doc" : "如果 <code>true</code>，则使用 <code>zlib</code> 压缩 WebSocket 消息<br/>\n<code>deflate_opts</code> 下的配置项属于压缩相关参数配置。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-compress",
                              "text" : "compress",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "关闭在此间隔内未发送 MQTT CONNECT 消息的客户端的传输层连接。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-idle_timeout",
                              "text" : "idle_timeout",
                              "type" : "Duration",
                              "default" : "7200s"
                            },
                            {
                              "doc" : "单个 MQTT 数据包的最大长度。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-max_frame_size",
                              "text" : "max_frame_size",
                              "type" : "OneOf(String(\"infinity\"),Integer)",
                              "default" : "infinity"
                            },
                            {
                              "doc" : "如果<code>true</code>，当客户端未携带<code>Sec WebSocket Protocol</code>字段时，服务器将返回一个错误。\n<br/>注意：微信小程序需要禁用此验证。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-fail_if_no_subprotocol",
                              "text" : "fail_if_no_subprotocol",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "逗号分隔的 subprotocols 支持列表。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-supported_subprotocols",
                              "text" : "supported_subprotocols",
                              "type" : "String",
                              "default" : "\"mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5\""
                            },
                            {
                              "doc" : "如果<code>true</code>，<code>origin</code>HTTP 头将根据<code>check_origins</code>参数中配置的允许来源列表进行验证。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-check_origin_enable",
                              "text" : "check_origin_enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "如果设置为 <code>false</code> 并且 <code>check_origin_enable</code> 为 <code>true</code>，服务器将拒绝没有 <code>origin</code> HTTP 头的请求。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-allow_origin_absence",
                              "text" : "allow_origin_absence",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "允许的 origins 列表",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-check_origins",
                              "text" : "check_origins",
                              "type" : "String",
                              "default" : "\"http://localhost:18083, http://127.0.0.1:18083\""
                            },
                            {
                              "doc" : "HTTP 头，用于传递有关客户端 IP 地址的信息。\n当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-proxy_address_header",
                              "text" : "proxy_address_header",
                              "type" : "String",
                              "default" : "x-forwarded-for"
                            },
                            {
                              "doc" : "HTTP 头，用于传递有关客户端端口的信息。当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-proxy_port_header",
                              "text" : "proxy_port_header",
                              "type" : "String",
                              "default" : "x-forwarded-port"
                            },
                            {
                              "refs" : [
                                {
                                  "doc" : "Compression options.",
                                  "hash" : "T-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts",
                                  "fields" : [
                                    {
                                      "doc" : "压缩级别",
                                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-level",
                                      "text" : "level",
                                      "type" : "Enum(none,default,best_compression,best_speed)"
                                    },
                                    {
                                      "doc" : "指定压缩状态的大小<br/>\n较低的值会减少每个连接的内存使用。",
                                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-mem_level",
                                      "text" : "mem_level",
                                      "type" : "Integer(1..9)",
                                      "default" : "8"
                                    },
                                    {
                                      "doc" : "指定压缩策略。",
                                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-strategy",
                                      "text" : "strategy",
                                      "type" : "Enum(default,filtered,huffman_only,rle)",
                                      "default" : "default"
                                    },
                                    {
                                      "doc" : "接管意味着在服务器消息之间保留压缩状态。",
                                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-server_context_takeover",
                                      "text" : "server_context_takeover",
                                      "type" : "Enum(takeover,no_takeover)",
                                      "default" : "takeover"
                                    },
                                    {
                                      "doc" : "接管意味着在客户端消息之间保留压缩状态。",
                                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-client_context_takeover",
                                      "text" : "client_context_takeover",
                                      "type" : "Enum(takeover,no_takeover)",
                                      "default" : "takeover"
                                    },
                                    {
                                      "doc" : "指定服务器压缩上下文的大小。",
                                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-server_max_window_bits",
                                      "text" : "server_max_window_bits",
                                      "type" : "Integer(8..15)",
                                      "default" : "15"
                                    },
                                    {
                                      "doc" : "指定客户端压缩上下文的大小。",
                                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-client_max_window_bits",
                                      "text" : "client_max_window_bits",
                                      "type" : "Integer(8..15)",
                                      "default" : "15"
                                    }
                                  ],
                                  "text" : "deflate_opts"
                                }
                              ],
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-deflate_opts",
                              "text" : "deflate_opts",
                              "type" : "Struct(deflate_opts)"
                            },
                            {
                              "doc" : "设置为 <code>false</code> 可以禁用 WebSocket 帧 UTF-8 验证以提高性能。",
                              "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket-S-ws_opts-validate_utf8",
                              "text" : "validate_utf8",
                              "type" : "Boolean",
                              "default" : "true"
                            }
                          ],
                          "text" : "ws_opts"
                        }
                      ],
                      "hash" : "V-listeners-S-listeners-ws-S-mqtt_ws_listener-websocket",
                      "text" : "websocket",
                      "type" : "Struct(ws_opts)"
                    }
                  ],
                  "text" : "mqtt_ws_listener"
                }
              ],
              "hash" : "V-listeners-S-listeners-ws",
              "text" : "ws",
              "type" : "Map($name->OneOf(Struct(mqtt_ws_listener),String(\"marked_for_deletion\")))"
            },
            {
              "doc" : "HTTPS websocket 监听器。",
              "refs" : [
                {
                  "doc" : "Settings for the MQTT over WebSocket/SSL listener.",
                  "hash" : "T-listeners-S-listeners-wss-S-mqtt_wss_listener",
                  "fields" : [
                    {
                      "doc" : "启停监听器。",
                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-enable",
                      "aliases" : [
                        "enabled"
                      ],
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "监听套接字的 IP 地址和端口。",
                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-bind",
                      "text" : "bind",
                      "type" : "String",
                      "default" : "8084"
                    },
                    {
                      "doc" : "监听器接收池的大小。",
                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-acceptors",
                      "text" : "acceptors",
                      "type" : "Integer(1..+inf)",
                      "default" : "16"
                    },
                    {
                      "doc" : "监听器允许的最大并发连接数。",
                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-max_connections",
                      "text" : "max_connections",
                      "type" : "OneOf(String(\"infinity\"),Integer(1..+inf))",
                      "default" : "infinity"
                    },
                    {
                      "doc" : "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端 B（与客户端 A 连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-mountpoint",
                      "text" : "mountpoint",
                      "type" : "String",
                      "default" : "\"\""
                    },
                    {
                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-enable_authn",
                      "text" : "enable_authn",
                      "type" : "Enum(true,false,quick_deny_anonymous)",
                      "default" : "true"
                    },
                    {
                      "doc" : "最大连接速率。<br/>\n这用于限制该节点的连接速率。\n一旦达到限制，新的连接将被推迟或拒绝。<br/>\n例如：<br/>\n- <code>1000/s</code>：每秒只接受1000个连接<br/>\n- <code>1000/10s</code>：每10秒只接受1000个连接。",
                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-max_conn_rate",
                      "text" : "max_conn_rate",
                      "type" : "String"
                    },
                    {
                      "doc" : "消息发布速率。<br/>\n这用于限制该节点的入站消息数量。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n例如：<br/>\n- <code>500/s</code>：每秒只发送前500条消息，其他消息被缓冲。<br/>\n- <code>500/10s</code>：即使是10秒，也只发送前500条消息，其他消息被缓冲。",
                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-messages_rate",
                      "text" : "messages_rate",
                      "type" : "String"
                    },
                    {
                      "doc" : "数据发布速率。<br/>\n这用于限制该节点的入站字节速率。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n字节的单位可以是：KB MB GB。<br/>\n例如：<br/>\n- <code>500KB/s</code>：每秒只发送前500千字节，其他消息被缓冲。<br/>\n- <code>500MB/10s</code>：即使是10秒，也只发送前500兆字节，其他消息被缓冲。",
                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-bytes_rate",
                      "text" : "bytes_rate",
                      "type" : "String"
                    },
                    {
                      "doc" : "此监听器的访问控制规则。",
                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-access_rules",
                      "text" : "access_rules",
                      "type" : "Array(String)",
                      "default" : "[\"allow all\"]"
                    },
                    {
                      "doc" : "如果 EMQX 集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-proxy_protocol",
                      "text" : "proxy_protocol",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX 将关闭 TCP 连接。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-proxy_protocol_timeout",
                      "text" : "proxy_protocol_timeout",
                      "type" : "Duration",
                      "default" : "3s"
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "TCP listener options.",
                          "hash" : "T-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts",
                          "fields" : [
                            {
                              "doc" : "为此套接字指定{active，N}选项<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-active_n",
                              "text" : "active_n",
                              "type" : "Integer",
                              "default" : "100"
                            },
                            {
                              "doc" : "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-backlog",
                              "text" : "backlog",
                              "type" : "Integer(1..+inf)",
                              "default" : "1024"
                            },
                            {
                              "doc" : "连接的 TCP 发送超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-send_timeout",
                              "text" : "send_timeout",
                              "type" : "Duration",
                              "default" : "15s"
                            },
                            {
                              "doc" : "如果发送超时，则关闭连接。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-send_timeout_close",
                              "text" : "send_timeout_close",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "连接的 TCP 接收缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-recbuf",
                              "text" : "recbuf",
                              "type" : "Bytesize"
                            },
                            {
                              "doc" : "连接的 TCP 发送缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-sndbuf",
                              "text" : "sndbuf",
                              "type" : "Bytesize"
                            },
                            {
                              "doc" : "驱动程序使用的用户空间缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-buffer",
                              "text" : "buffer",
                              "type" : "Bytesize",
                              "default" : "4KB"
                            },
                            {
                              "doc" : "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-high_watermark",
                              "text" : "high_watermark",
                              "type" : "Bytesize",
                              "default" : "1MB"
                            },
                            {
                              "doc" : "连接的 TCP_NODELAY 标识",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-nodelay",
                              "text" : "nodelay",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "连接的 SO_REUSEADDR 标识。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-reuseaddr",
                              "text" : "reuseaddr",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "为 MQTT 连接在 TCP 或 SSL 上启用 TCP 保活。\n值是以逗号分隔的三个数字，格式为 'Idle,Interval,Probes'\n - Idle: 在服务器开始发送保活探测之前，连接需要处于空闲状态的秒数（Linux 默认为 7200）。\n - Interval: TCP 保活探测间隔的秒数（Linux 默认值为 75）。\n - Probes: 在放弃并终止连接之前，从另一端未获得响应时要发送的 TCP 保活探测的最大数量（Linux 默认值为 9 次）。\n例如 \"240,30,5\" 表示：在连接空闲 240 秒后发送 TCP 保活探测，每隔 30 秒发送一次，直到收到响应，如果连续丢失 5 个响应，连接应该被关闭。\n默认值为 'none'",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options-S-tcp_opts-keepalive",
                              "text" : "keepalive",
                              "type" : "String",
                              "default" : "none"
                            }
                          ],
                          "text" : "tcp_opts"
                        }
                      ],
                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-tcp_options",
                      "text" : "tcp_options",
                      "type" : "Struct(tcp_opts)"
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "Socket options for WebSocket/SSL connections.",
                          "hash" : "T-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String",
                              "default" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-certfile",
                              "text" : "certfile",
                              "type" : "String",
                              "default" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String",
                              "default" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "如果协商使用 Diffie-Hellman 密钥交换的密码套件，则服务器将使用包含 PEM 编码的 Diffie-Hellman 参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3 不支持<code>dhfile</code>选项。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-dhfile",
                              "text" : "dhfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为 true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为 false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-fail_if_no_peer_cert",
                              "text" : "fail_if_no_peer_cert",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-honor_cipher_order",
                              "text" : "honor_cipher_order",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-client_renegotiation",
                              "text" : "client_renegotiation",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "握手完成所允许的最长时间<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options-S-listener_wss_opts-handshake_timeout",
                              "text" : "handshake_timeout",
                              "type" : "Duration",
                              "default" : "15s"
                            }
                          ],
                          "text" : "listener_wss_opts"
                        }
                      ],
                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-ssl_options",
                      "text" : "ssl_options",
                      "type" : "Struct(listener_wss_opts)"
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "WebSocket listener options.",
                          "hash" : "T-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts",
                          "fields" : [
                            {
                              "doc" : "WebSocket 的 MQTT 协议路径。因此，EMQX Broker 的 WebSocket 地址为：\n<code>ws://{ip}:{port}/mqtt</code>",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-mqtt_path",
                              "text" : "mqtt_path",
                              "type" : "String",
                              "default" : "\"/mqtt\""
                            },
                            {
                              "doc" : "WebSocket 消息是否允许包含多个 MQTT 数据包。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-mqtt_piggyback",
                              "text" : "mqtt_piggyback",
                              "type" : "Enum(single,multiple)",
                              "default" : "multiple"
                            },
                            {
                              "doc" : "如果 <code>true</code>，则使用 <code>zlib</code> 压缩 WebSocket 消息<br/>\n<code>deflate_opts</code> 下的配置项属于压缩相关参数配置。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-compress",
                              "text" : "compress",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "关闭在此间隔内未发送 MQTT CONNECT 消息的客户端的传输层连接。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-idle_timeout",
                              "text" : "idle_timeout",
                              "type" : "Duration",
                              "default" : "7200s"
                            },
                            {
                              "doc" : "单个 MQTT 数据包的最大长度。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-max_frame_size",
                              "text" : "max_frame_size",
                              "type" : "OneOf(String(\"infinity\"),Integer)",
                              "default" : "infinity"
                            },
                            {
                              "doc" : "如果<code>true</code>，当客户端未携带<code>Sec WebSocket Protocol</code>字段时，服务器将返回一个错误。\n<br/>注意：微信小程序需要禁用此验证。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-fail_if_no_subprotocol",
                              "text" : "fail_if_no_subprotocol",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "逗号分隔的 subprotocols 支持列表。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-supported_subprotocols",
                              "text" : "supported_subprotocols",
                              "type" : "String",
                              "default" : "\"mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5\""
                            },
                            {
                              "doc" : "如果<code>true</code>，<code>origin</code>HTTP 头将根据<code>check_origins</code>参数中配置的允许来源列表进行验证。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-check_origin_enable",
                              "text" : "check_origin_enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "如果设置为 <code>false</code> 并且 <code>check_origin_enable</code> 为 <code>true</code>，服务器将拒绝没有 <code>origin</code> HTTP 头的请求。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-allow_origin_absence",
                              "text" : "allow_origin_absence",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "允许的 origins 列表",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-check_origins",
                              "text" : "check_origins",
                              "type" : "String",
                              "default" : "\"http://localhost:18083, http://127.0.0.1:18083\""
                            },
                            {
                              "doc" : "HTTP 头，用于传递有关客户端 IP 地址的信息。\n当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-proxy_address_header",
                              "text" : "proxy_address_header",
                              "type" : "String",
                              "default" : "x-forwarded-for"
                            },
                            {
                              "doc" : "HTTP 头，用于传递有关客户端端口的信息。当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-proxy_port_header",
                              "text" : "proxy_port_header",
                              "type" : "String",
                              "default" : "x-forwarded-port"
                            },
                            {
                              "refs" : [
                                {
                                  "doc" : "Compression options.",
                                  "hash" : "T-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts",
                                  "fields" : [
                                    {
                                      "doc" : "压缩级别",
                                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-level",
                                      "text" : "level",
                                      "type" : "Enum(none,default,best_compression,best_speed)"
                                    },
                                    {
                                      "doc" : "指定压缩状态的大小<br/>\n较低的值会减少每个连接的内存使用。",
                                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-mem_level",
                                      "text" : "mem_level",
                                      "type" : "Integer(1..9)",
                                      "default" : "8"
                                    },
                                    {
                                      "doc" : "指定压缩策略。",
                                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-strategy",
                                      "text" : "strategy",
                                      "type" : "Enum(default,filtered,huffman_only,rle)",
                                      "default" : "default"
                                    },
                                    {
                                      "doc" : "接管意味着在服务器消息之间保留压缩状态。",
                                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-server_context_takeover",
                                      "text" : "server_context_takeover",
                                      "type" : "Enum(takeover,no_takeover)",
                                      "default" : "takeover"
                                    },
                                    {
                                      "doc" : "接管意味着在客户端消息之间保留压缩状态。",
                                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-client_context_takeover",
                                      "text" : "client_context_takeover",
                                      "type" : "Enum(takeover,no_takeover)",
                                      "default" : "takeover"
                                    },
                                    {
                                      "doc" : "指定服务器压缩上下文的大小。",
                                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-server_max_window_bits",
                                      "text" : "server_max_window_bits",
                                      "type" : "Integer(8..15)",
                                      "default" : "15"
                                    },
                                    {
                                      "doc" : "指定客户端压缩上下文的大小。",
                                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts-S-deflate_opts-client_max_window_bits",
                                      "text" : "client_max_window_bits",
                                      "type" : "Integer(8..15)",
                                      "default" : "15"
                                    }
                                  ],
                                  "text" : "deflate_opts"
                                }
                              ],
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-deflate_opts",
                              "text" : "deflate_opts",
                              "type" : "Struct(deflate_opts)"
                            },
                            {
                              "doc" : "设置为 <code>false</code> 可以禁用 WebSocket 帧 UTF-8 验证以提高性能。",
                              "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket-S-ws_opts-validate_utf8",
                              "text" : "validate_utf8",
                              "type" : "Boolean",
                              "default" : "true"
                            }
                          ],
                          "text" : "ws_opts"
                        }
                      ],
                      "hash" : "V-listeners-S-listeners-wss-S-mqtt_wss_listener-websocket",
                      "text" : "websocket",
                      "type" : "Struct(ws_opts)"
                    }
                  ],
                  "text" : "mqtt_wss_listener"
                }
              ],
              "hash" : "V-listeners-S-listeners-wss",
              "text" : "wss",
              "type" : "Map($name->OneOf(Struct(mqtt_wss_listener),String(\"marked_for_deletion\")))"
            },
            {
              "doc" : "QUIC 监听器。",
              "refs" : [
                {
                  "doc" : "Settings for the MQTT over QUIC listener.",
                  "hash" : "T-listeners-S-listeners-quic-S-mqtt_quic_listener",
                  "fields" : [
                    {
                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式。<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3。<br/>\n如果打算使用 PSK 密码套件，<code>tlsv1.3</code> 应在 <code>ssl.versions</code> 中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/>\n\n注：QUIC 监听器只支持 tlsv1.3 的 ciphers。",
                      "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ciphers",
                      "text" : "ciphers",
                      "type" : "Array(String)",
                      "default" : "[TLS_AES_256_GCM_SHA384, TLS_AES_128_GCM_SHA256, TLS_CHACHA20_POLY1305_SHA256]"
                    },
                    {
                      "doc" : "QUIC 传输层的 TLS 选项",
                      "refs" : [
                        {
                          "doc" : "TLS options for QUIC transport.",
                          "hash" : "T-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String",
                              "default" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-certfile",
                              "text" : "certfile",
                              "type" : "String",
                              "default" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String",
                              "default" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options-S-listener_quic_ssl_opts-password",
                              "text" : "password",
                              "type" : "String"
                            }
                          ],
                          "text" : "listener_quic_ssl_opts"
                        }
                      ],
                      "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-ssl_options",
                      "text" : "ssl_options",
                      "type" : "Struct(listener_quic_ssl_opts)"
                    },
                    {
                      "doc" : "启停监听器。",
                      "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-enable",
                      "aliases" : [
                        "enabled"
                      ],
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "监听套接字的 IP 地址和端口。",
                      "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-bind",
                      "text" : "bind",
                      "type" : "String",
                      "default" : "14567"
                    },
                    {
                      "doc" : "监听器接收池的大小。",
                      "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-acceptors",
                      "text" : "acceptors",
                      "type" : "Integer(1..+inf)",
                      "default" : "16"
                    },
                    {
                      "doc" : "监听器允许的最大并发连接数。",
                      "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-max_connections",
                      "text" : "max_connections",
                      "type" : "OneOf(String(\"infinity\"),Integer(1..+inf))",
                      "default" : "infinity"
                    },
                    {
                      "doc" : "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端 B（与客户端 A 连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为<code>\"\"</code> 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- <code>${clientid}</code>: clientid\n- <code>${username}</code>: username",
                      "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-mountpoint",
                      "text" : "mountpoint",
                      "type" : "String",
                      "default" : "\"\""
                    },
                    {
                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
                      "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-enable_authn",
                      "text" : "enable_authn",
                      "type" : "Enum(true,false,quick_deny_anonymous)",
                      "default" : "true"
                    },
                    {
                      "doc" : "最大连接速率。<br/>\n这用于限制该节点的连接速率。\n一旦达到限制，新的连接将被推迟或拒绝。<br/>\n例如：<br/>\n- <code>1000/s</code>：每秒只接受1000个连接<br/>\n- <code>1000/10s</code>：每10秒只接受1000个连接。",
                      "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-max_conn_rate",
                      "text" : "max_conn_rate",
                      "type" : "String"
                    },
                    {
                      "doc" : "消息发布速率。<br/>\n这用于限制该节点的入站消息数量。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n例如：<br/>\n- <code>500/s</code>：每秒只发送前500条消息，其他消息被缓冲。<br/>\n- <code>500/10s</code>：即使是10秒，也只发送前500条消息，其他消息被缓冲。",
                      "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-messages_rate",
                      "text" : "messages_rate",
                      "type" : "String"
                    },
                    {
                      "doc" : "数据发布速率。<br/>\n这用于限制该节点的入站字节速率。\n一旦达到限制，受限制的客户端将减速甚至暂时挂起。<br/>\n字节的单位可以是：KB MB GB。<br/>\n例如：<br/>\n- <code>500KB/s</code>：每秒只发送前500千字节，其他消息被缓冲。<br/>\n- <code>500MB/10s</code>：即使是10秒，也只发送前500兆字节，其他消息被缓冲。",
                      "hash" : "V-listeners-S-listeners-quic-S-mqtt_quic_listener-bytes_rate",
                      "text" : "bytes_rate",
                      "type" : "String"
                    }
                  ],
                  "text" : "mqtt_quic_listener"
                }
              ],
              "hash" : "V-listeners-S-listeners-quic",
              "text" : "quic",
              "type" : "Map($name->OneOf(Struct(mqtt_quic_listener),String(\"marked_for_deletion\")))"
            }
          ],
          "text" : "listeners"
        }
      ],
      "hash" : "V-listeners",
      "text" : "listeners",
      "type" : "Struct(listeners)"
    },
    {
      "doc" : "全局的 MQTT 配置项。\nmqtt 下所有的配置作为全局的默认值存在，它可以被 <code>zone</code> 中的配置覆盖",
      "refs" : [
        {
          "doc" : "Global MQTT configuration.",
          "hash" : "T-mqtt-S-mqtt",
          "fields" : [
            {
              "doc" : "设置连接被断开或进入休眠状态前的等待时间，空闲超时后，\n  - 如暂未收到客户端的 CONNECT 报文，连接将断开；\n  - 如已收到客户端的 CONNECT 报文，连接将进入休眠模式以节省系统资源。\n\n注意：请合理设置该参数值，如等待时间设置过长，可能造成系统资源的浪费。",
              "hash" : "V-mqtt-S-mqtt-idle_timeout",
              "text" : "idle_timeout",
              "type" : "OneOf(String(\"infinity\"),Duration)",
              "default" : "15s"
            },
            {
              "doc" : "允许的最大 MQTT 报文大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
              "hash" : "V-mqtt-S-mqtt-max_packet_size",
              "text" : "max_packet_size",
              "type" : "Bytesize",
              "default" : "1MB"
            },
            {
              "doc" : "允许的最大 MQTT Client ID 长度。",
              "hash" : "V-mqtt-S-mqtt-max_clientid_len",
              "text" : "max_clientid_len",
              "type" : "Integer(23..65535)",
              "default" : "65535"
            },
            {
              "doc" : "允许的最大主题层级。",
              "hash" : "V-mqtt-S-mqtt-max_topic_levels",
              "text" : "max_topic_levels",
              "type" : "Integer(1..65535)",
              "default" : "128"
            },
            {
              "doc" : "允许的最大主题别名数，0 表示不支持主题别名。",
              "hash" : "V-mqtt-S-mqtt-max_topic_alias",
              "text" : "max_topic_alias",
              "type" : "Integer(0..65535)",
              "default" : "65535"
            },
            {
              "doc" : "是否启用对 MQTT 保留消息的支持。",
              "hash" : "V-mqtt-S-mqtt-retain_available",
              "text" : "retain_available",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "是否启用对 MQTT 通配符订阅的支持。",
              "hash" : "V-mqtt-S-mqtt-wildcard_subscription",
              "text" : "wildcard_subscription",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "是否启用对 MQTT 共享订阅的支持。",
              "hash" : "V-mqtt-S-mqtt-shared_subscription",
              "text" : "shared_subscription",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "共享订阅的分发策略。\n - random：随机选择一个订阅者进行分发；\n - round_robin：从单个发布者处的消息依次分发给订阅者；\n - round_robin_per_group：所有消息依次分发给订阅者；\n - local：随机选择当前节点上的一个订阅者，如果当前节点没有订阅者，则在集群内随机选择；\n - sticky：持续将消息分发给最初选择的订阅者，直到他们的会话结束；\n - hash_clientid：哈希发布者的客户端 ID 以选择订阅者；\n - hash_topic：哈希发布主题以选择订阅者。",
              "hash" : "V-mqtt-S-mqtt-shared_subscription_strategy",
              "text" : "shared_subscription_strategy",
              "type" : "Enum(random,round_robin,round_robin_per_group,sticky,local,hash_topic,hash_clientid)",
              "default" : "round_robin"
            },
            {
              "doc" : "是否启用对 MQTT 排它订阅的支持。",
              "hash" : "V-mqtt-S-mqtt-exclusive_subscription",
              "text" : "exclusive_subscription",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "设置由 MQTT v3.1.1/v3.1.0 客户端发布的消息是否将转发给其本身；类似 MQTT 5.0 协议中的 <code>No Local</code> 选项。",
              "hash" : "V-mqtt-S-mqtt-ignore_loop_deliver",
              "text" : "ignore_loop_deliver",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "是否以严格模式解析 MQTT 消息。\n严格模式下，如客户端 ID、主题名称等中包含无效 utf8 字符串，连接将被断开。",
              "hash" : "V-mqtt-S-mqtt-strict_mode",
              "text" : "strict_mode",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "UTF-8 字符串，用于指定返回给客户端的响应主题，如 <code>reqrsp/</code>，此时请求和应答客户端都需要使用 <code>reqrsp/</code> 前缀的主题来完成通讯。\n如希望禁用此功能，请在下方的文字框中输入<code>\"\"</code>；仅适用于 MQTT 5.0 客户端。",
              "hash" : "V-mqtt-S-mqtt-response_information",
              "text" : "response_information",
              "type" : "String",
              "default" : "\"\""
            },
            {
              "doc" : "EMQX 要求的保活时间，如设为 disabled，则将使用客户端指定的保持连接时间；仅适用于 MQTT 5.0 客户端。",
              "hash" : "V-mqtt-S-mqtt-server_keepalive",
              "text" : "server_keepalive",
              "type" : "OneOf(Integer(1..+inf),String(\"disabled\"))",
              "default" : "disabled"
            },
            {
              "doc" : "EMQX 判定客户端 Keep Alive 超时使用的 Keep Alive 倍数。计算公式为：Keep Alive 超时 = Keep Alive 间隔 × Keep Alive 倍数。 默认值 1.5 遵循 MQTT 5.0 规范。此倍数可调整，为系统管理员提供根据特定需求进行定制的灵活性。例如，如果客户端的 10 秒保持连接间隔的 PINGREQ 因为额外的 10 秒延迟，将倍数更改为 2 可以让 EMQX 容忍此延迟。",
              "hash" : "V-mqtt-S-mqtt-keepalive_multiplier",
              "text" : "keepalive_multiplier",
              "type" : "Number",
              "default" : "1.5"
            },
            {
              "doc" : "QoS 1/2 消息的重新投递间隔。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-mqtt-S-mqtt-retry_interval",
              "text" : "retry_interval",
              "type" : "Duration",
              "default" : "30s"
            },
            {
              "doc" : "是否使用用户名作为客户端 ID。\n此设置的作用时间晚于 <code>对端证书作为用户名</code> 和 <code>对端证书作为客户端 ID</code>。",
              "hash" : "V-mqtt-S-mqtt-use_username_as_clientid",
              "text" : "use_username_as_clientid",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "使用对端证书中的 CN、DN 字段或整个证书内容来作为用户名；仅适用于 TLS 连接。\n目前支持：\n- <code>cn</code>: 取证书的 CN 字段\n- <code>dn</code>: 取证书的 DN 字段\n- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 的证书内容\n- <code>pem</code>: 将 <code>DER</code> 证书转换为 <code>PEM</code> 格式作为用户名\n- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书内容的 MD5 值",
              "hash" : "V-mqtt-S-mqtt-peer_cert_as_username",
              "text" : "peer_cert_as_username",
              "type" : "Enum(disabled,cn,dn,crt,pem,md5)",
              "default" : "disabled"
            },
            {
              "doc" : "使用对端证书中的 CN、DN 字段或整个证书内容来作为客户端 ID。仅适用于 TLS 连接；\n目前支持：\n- <code>cn</code>: 取证书的 CN 字段\n- <code>dn</code>: 取证书的 DN 字段\n- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容\n- <code>pem</code>: 将 <code>DER</code> 证书内容转换为 <code>PEM</code> 格式作为客户端 ID\n- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书内容的 MD5 值",
              "hash" : "V-mqtt-S-mqtt-peer_cert_as_clientid",
              "text" : "peer_cert_as_clientid",
              "type" : "Enum(disabled,cn,dn,crt,pem,md5)",
              "default" : "disabled"
            },
            {
              "doc" : "指定会话将在连接断开后多久过期，仅适用于非 MQTT 5.0 的连接。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-mqtt-S-mqtt-session_expiry_interval",
              "text" : "session_expiry_interval",
              "type" : "Duration",
              "default" : "2h"
            },
            {
              "doc" : "MQTT 消息的过期间隔。对于 MQTT 5.0 客户端，此配置仅在消息中未设置 Message-Expiry-Interval 属性时生效；否则，将使用 Message-Expiry-Interval 属性的值。对于 5.0 之前的 MQTT 版本，此配置将始终生效。请注意，将 message_expiry_interval 设置为大于 session_expiry_interval 是没有意义的，因为会话过期时所有消息将被清除。",
              "hash" : "V-mqtt-S-mqtt-message_expiry_interval",
              "text" : "message_expiry_interval",
              "type" : "OneOf(Duration,String(\"infinity\"))",
              "default" : "infinity"
            },
            {
              "doc" : "每个发布者的会话中，都存在一个队列来处理客户端发送的 QoS 2 消息。该队列会存储 QoS 2 消息的报文 ID 直到收到客户端的 PUBREL 或超时，达到队列长度的限制后，新的 QoS 2 消息发布会被拒绝，并返回 `147(0x93)` 错误。",
              "hash" : "V-mqtt-S-mqtt-max_awaiting_rel",
              "text" : "max_awaiting_rel",
              "type" : "OneOf(Integer(0..+inf),String(\"infinity\"))",
              "default" : "100"
            },
            {
              "doc" : "允许的最大 QoS 等级。",
              "hash" : "V-mqtt-S-mqtt-max_qos_allowed",
              "text" : "max_qos_allowed",
              "type" : "Integer(0..2)",
              "default" : "2"
            },
            {
              "doc" : "主题优先级。取值范围 [1-255]\n默认优先级表为空，即所有的主题优先级相同。\n\n注：优先主题名称中不支持使用逗号和等号。\n注：不在此列表中的主题，被视为最高/最低优先级，这取决于<code>mqtt.mqueue_default_priority</code> 的配置。\n\n示例：\n配置 <code>\"topic/1\" > \"topic/2\"</code>:\n<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>",
              "hash" : "V-mqtt-S-mqtt-mqueue_priorities",
              "text" : "mqueue_priorities",
              "type" : "OneOf(String(\"disabled\"),Map)",
              "default" : "disabled"
            },
            {
              "doc" : "默认的主题优先级，不在 <code>主题优先级</code>（<code>mqueue_priorities</code>） 中的主题将会使用该优先级。",
              "hash" : "V-mqtt-S-mqtt-mqueue_default_priority",
              "text" : "mqueue_default_priority",
              "type" : "Enum(highest,lowest)",
              "default" : "lowest"
            },
            {
              "doc" : "指定在连接断开但会话保持期间，是否需要在消息队列中存储 QoS 0 消息。",
              "hash" : "V-mqtt-S-mqtt-mqueue_store_qos0",
              "text" : "mqueue_store_qos0",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "消息队列最大长度。持久客户端断开连接或飞行窗口已满时排队的消息长度。",
              "hash" : "V-mqtt-S-mqtt-max_mqueue_len",
              "text" : "max_mqueue_len",
              "type" : "OneOf(Integer(0..+inf),String(\"infinity\"))",
              "default" : "1000"
            },
            {
              "doc" : "允许在完成应答前同时投递的 QoS 1 和 QoS 2 消息的最大数量。",
              "hash" : "V-mqtt-S-mqtt-max_inflight",
              "text" : "max_inflight",
              "type" : "Integer(1..65535)",
              "default" : "32"
            },
            {
              "doc" : "允许每个客户端建立的最大订阅数量。",
              "hash" : "V-mqtt-S-mqtt-max_subscriptions",
              "text" : "max_subscriptions",
              "type" : "OneOf(Integer(1..inf),String(\"infinity\"))",
              "default" : "infinity"
            },
            {
              "doc" : "投递消息时，是否根据订阅主题时的 QoS 等级来强制提升派发的消息的 QoS 等级。",
              "hash" : "V-mqtt-S-mqtt-upgrade_qos",
              "text" : "upgrade_qos",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "客户端发布 QoS 2 消息时，服务器等待 `PUBREL` 的最长时延。超过该时长后服务器会放弃等待，该 PACKET ID 会被释放，从而允许后续新的 PUBLISH 消息使用。如果超时后收到 PUBREL，服务器将会产生一条告警日志。注意，向订阅客户端转发消息的动作发生在进入等待之前。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-mqtt-S-mqtt-await_rel_timeout",
              "text" : "await_rel_timeout",
              "type" : "Duration",
              "default" : "300s"
            }
          ],
          "text" : "mqtt"
        }
      ],
      "hash" : "V-mqtt",
      "text" : "mqtt",
      "type" : "Struct(mqtt)"
    },
    {
      "doc" : "默认的 MQTT 监听器的全局认证配置。\n\n有关每个监听器的单独配置，请参阅监听器配置中的<code>authentication</code>。\n\n此选项可配置为：\n<ul>\n  <li><code>[]</code>: 默认值，允许 *所有* 登录</li>\n  <li>one: 例如 <code>{enable:true,backend:\"built_in_database\",mechanism=\"password_based\"}</code></li>\n  <li>chain: 结构体数组。</li>\n</ul>\n\n当配置了一个认证链时，登录凭据将按照配置的顺序检查后端，直到可以做出'允许'或'拒绝'的决定。\n\n如果在完全遍历认证链之后没有决定，登录将被拒绝。",
      "refs" : [
        {
          "doc" : "使用内置数据库作为认证数据源的认证器的配置项。",
          "hash" : "T-authentication-S-builtin_db",
          "fields" : [
            {
              "doc" : "Options for password hash creation and verification.",
              "refs" : [
                {
                  "doc" : "Settings for bcrypt password hashing algorithm (for DB backends with write capability).",
                  "hash" : "T-authentication-S-builtin_db-password_hash_algorithm-S-bcrypt_rw",
                  "fields" : [
                    {
                      "doc" : "BCRYPT password hashing.",
                      "hash" : "V-authentication-S-builtin_db-password_hash_algorithm-S-bcrypt_rw-name",
                      "text" : "name",
                      "type" : "String(\"bcrypt\")"
                    },
                    {
                      "doc" : "Work factor for BCRYPT password generation.",
                      "hash" : "V-authentication-S-builtin_db-password_hash_algorithm-S-bcrypt_rw-salt_rounds",
                      "text" : "salt_rounds",
                      "type" : "Integer(5..10)",
                      "default" : "10"
                    }
                  ],
                  "text" : "bcrypt_rw"
                },
                {
                  "doc" : "Settings for PBKDF2 password hashing algorithm.",
                  "hash" : "T-authentication-S-builtin_db-password_hash_algorithm-S-pbkdf2",
                  "fields" : [
                    {
                      "doc" : "PBKDF2 password hashing.",
                      "hash" : "V-authentication-S-builtin_db-password_hash_algorithm-S-pbkdf2-name",
                      "text" : "name",
                      "type" : "String(\"pbkdf2\")"
                    },
                    {
                      "doc" : "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-builtin_db-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text" : "mac_fun",
                      "type" : "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc" : "Iteration count for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-builtin_db-password_hash_algorithm-S-pbkdf2-iterations",
                      "text" : "iterations",
                      "type" : "Integer(1..+inf)"
                    },
                    {
                      "doc" : "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash" : "V-authentication-S-builtin_db-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text" : "dk_length",
                      "type" : "Integer"
                    }
                  ],
                  "text" : "pbkdf2"
                },
                {
                  "doc" : "Settings for simple algorithms.",
                  "hash" : "T-authentication-S-builtin_db-password_hash_algorithm-S-simple",
                  "fields" : [
                    {
                      "doc" : "Simple password hashing algorithm.",
                      "hash" : "V-authentication-S-builtin_db-password_hash_algorithm-S-simple-name",
                      "text" : "name",
                      "type" : "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "doc" : "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash" : "V-authentication-S-builtin_db-password_hash_algorithm-S-simple-salt_position",
                      "text" : "salt_position",
                      "type" : "Enum(disable,prefix,suffix)",
                      "default" : "prefix"
                    }
                  ],
                  "text" : "simple"
                }
              ],
              "hash" : "V-authentication-S-builtin_db-password_hash_algorithm",
              "text" : "password_hash_algorithm",
              "type" : "OneOf(Struct(bcrypt_rw),Struct(pbkdf2),Struct(simple))",
              "default" : "{name = sha256, salt_position = prefix}"
            },
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-builtin_db-mechanism",
              "text" : "mechanism",
              "type" : "String(\"password_based\")"
            },
            {
              "doc" : "后端类型。",
              "hash" : "V-authentication-S-builtin_db-backend",
              "text" : "backend",
              "type" : "String(\"built_in_database\")"
            },
            {
              "doc" : "指定用于客户端身份 ID 认证的字段。",
              "hash" : "V-authentication-S-builtin_db-user_id_type",
              "text" : "user_id_type",
              "type" : "Enum(clientid,username)",
              "default" : "username"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-builtin_db-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            }
          ],
          "text" : "builtin_db"
        },
        {
          "doc" : "使用 MySQL 作为认证数据源的认证器的配置项。",
          "hash" : "T-authentication-S-mysql",
          "fields" : [
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-mysql-mechanism",
              "text" : "mechanism",
              "type" : "String(\"password_based\")"
            },
            {
              "doc" : "后端类型。",
              "hash" : "V-authentication-S-mysql-backend",
              "text" : "backend",
              "type" : "String(\"mysql\")"
            },
            {
              "doc" : "Options for password hash verification.",
              "refs" : [
                {
                  "doc" : "Settings for bcrypt password hashing algorithm.",
                  "hash" : "T-authentication-S-mysql-password_hash_algorithm-S-bcrypt",
                  "fields" : [
                    {
                      "doc" : "BCRYPT password hashing.",
                      "hash" : "V-authentication-S-mysql-password_hash_algorithm-S-bcrypt-name",
                      "text" : "name",
                      "type" : "String(\"bcrypt\")"
                    }
                  ],
                  "text" : "bcrypt"
                },
                {
                  "doc" : "Settings for PBKDF2 password hashing algorithm.",
                  "hash" : "T-authentication-S-mysql-password_hash_algorithm-S-pbkdf2",
                  "fields" : [
                    {
                      "doc" : "PBKDF2 password hashing.",
                      "hash" : "V-authentication-S-mysql-password_hash_algorithm-S-pbkdf2-name",
                      "text" : "name",
                      "type" : "String(\"pbkdf2\")"
                    },
                    {
                      "doc" : "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-mysql-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text" : "mac_fun",
                      "type" : "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc" : "Iteration count for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-mysql-password_hash_algorithm-S-pbkdf2-iterations",
                      "text" : "iterations",
                      "type" : "Integer(1..+inf)"
                    },
                    {
                      "doc" : "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash" : "V-authentication-S-mysql-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text" : "dk_length",
                      "type" : "Integer"
                    }
                  ],
                  "text" : "pbkdf2"
                },
                {
                  "doc" : "Settings for simple algorithms.",
                  "hash" : "T-authentication-S-mysql-password_hash_algorithm-S-simple",
                  "fields" : [
                    {
                      "doc" : "Simple password hashing algorithm.",
                      "hash" : "V-authentication-S-mysql-password_hash_algorithm-S-simple-name",
                      "text" : "name",
                      "type" : "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "doc" : "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash" : "V-authentication-S-mysql-password_hash_algorithm-S-simple-salt_position",
                      "text" : "salt_position",
                      "type" : "Enum(disable,prefix,suffix)",
                      "default" : "prefix"
                    }
                  ],
                  "text" : "simple"
                }
              ],
              "hash" : "V-authentication-S-mysql-password_hash_algorithm",
              "text" : "password_hash_algorithm",
              "type" : "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))",
              "default" : "{name = sha256, salt_position = prefix}"
            },
            {
              "doc" : "用于查询密码散列等用于认证的数据的 SQL 语句。",
              "hash" : "V-authentication-S-mysql-query",
              "text" : "query",
              "type" : "String"
            },
            {
              "doc" : "SQL 查询的超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-authentication-S-mysql-query_timeout",
              "text" : "query_timeout",
              "type" : "Duration",
              "default" : "5s"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-mysql-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "用于连接的 IPv4 或 IPv6 地址或主机名。<br/>\n主机条目的格式如下：主机[:端口]。<br/>\n如果未指定[:端口]，将使用 MySQL 的默认端口3306。",
              "hash" : "V-authentication-S-mysql-server",
              "text" : "server",
              "type" : "String"
            },
            {
              "doc" : "数据库名字。",
              "hash" : "V-authentication-S-mysql-database",
              "text" : "database",
              "type" : "String"
            },
            {
              "doc" : "桥接远端服务时使用的连接池大小。",
              "hash" : "V-authentication-S-mysql-pool_size",
              "text" : "pool_size",
              "type" : "Integer(1..+inf)",
              "default" : "8"
            },
            {
              "doc" : "内部数据库的用户名。",
              "hash" : "V-authentication-S-mysql-username",
              "text" : "username",
              "type" : "String",
              "default" : "root"
            },
            {
              "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
              "hash" : "V-authentication-S-mysql-password",
              "text" : "password",
              "type" : "Secret"
            },
            {
              "doc" : "Deprecated since v5.0.15.",
              "hash" : "V-authentication-S-mysql-auto_reconnect",
              "text" : "auto_reconnect",
              "type" : "Boolean"
            },
            {
              "doc" : "启用 SSL 连接。",
              "refs" : [
                {
                  "doc" : "Socket options for SSL clients.",
                  "hash" : "T-authentication-S-mysql-ssl-S-ssl_client_opts",
                  "fields" : [
                    {
                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash" : "V-authentication-S-mysql-ssl-S-ssl_client_opts-cacertfile",
                      "text" : "cacertfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "Deprecated since 5.1.4.",
                      "hash" : "V-authentication-S-mysql-ssl-S-ssl_client_opts-cacerts",
                      "text" : "cacerts",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash" : "V-authentication-S-mysql-ssl-S-ssl_client_opts-certfile",
                      "text" : "certfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "PEM 格式的私钥文件。",
                      "hash" : "V-authentication-S-mysql-ssl-S-ssl_client_opts-keyfile",
                      "text" : "keyfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "启用或禁用对等验证。",
                      "hash" : "V-authentication-S-mysql-ssl-S-ssl_client_opts-verify",
                      "text" : "verify",
                      "type" : "Enum(verify_peer,verify_none)",
                      "default" : "verify_none"
                    },
                    {
                      "doc" : "启用 TLS 会话重用。",
                      "hash" : "V-authentication-S-mysql-ssl-S-ssl_client_opts-reuse_sessions",
                      "text" : "reuse_sessions",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash" : "V-authentication-S-mysql-ssl-S-ssl_client_opts-depth",
                      "text" : "depth",
                      "type" : "Integer(0..+inf)",
                      "default" : "10"
                    },
                    {
                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash" : "V-authentication-S-mysql-ssl-S-ssl_client_opts-password",
                      "text" : "password",
                      "type" : "String"
                    },
                    {
                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash" : "V-authentication-S-mysql-ssl-S-ssl_client_opts-versions",
                      "text" : "versions",
                      "type" : "Array(String)",
                      "default" : "[tlsv1.3, tlsv1.2]"
                    },
                    {
                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash" : "V-authentication-S-mysql-ssl-S-ssl_client_opts-ciphers",
                      "text" : "ciphers",
                      "type" : "Array(String)",
                      "default" : "[]"
                    },
                    {
                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash" : "V-authentication-S-mysql-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text" : "secure_renegotiate",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                      "hash" : "V-authentication-S-mysql-ssl-S-ssl_client_opts-log_level",
                      "text" : "log_level",
                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                      "default" : "notice"
                    },
                    {
                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mysql-ssl-S-ssl_client_opts-hibernate_after",
                      "text" : "hibernate_after",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "启用 TLS。",
                      "hash" : "V-authentication-S-mysql-ssl-S-ssl_client_opts-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash" : "V-authentication-S-mysql-ssl-S-ssl_client_opts-server_name_indication",
                      "text" : "server_name_indication",
                      "type" : "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "text" : "ssl_client_opts"
                }
              ],
              "hash" : "V-authentication-S-mysql-ssl",
              "text" : "ssl",
              "type" : "Struct(ssl_client_opts)",
              "default" : "{enable = false}"
            }
          ],
          "text" : "mysql"
        },
        {
          "doc" : "使用 PostgreSQL 作为认证数据源的认证器的配置项。",
          "hash" : "T-authentication-S-postgresql",
          "fields" : [
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-postgresql-mechanism",
              "text" : "mechanism",
              "type" : "String(\"password_based\")"
            },
            {
              "doc" : "后端类型。",
              "hash" : "V-authentication-S-postgresql-backend",
              "text" : "backend",
              "type" : "String(\"postgresql\")"
            },
            {
              "doc" : "Options for password hash verification.",
              "refs" : [
                {
                  "doc" : "Settings for bcrypt password hashing algorithm.",
                  "hash" : "T-authentication-S-postgresql-password_hash_algorithm-S-bcrypt",
                  "fields" : [
                    {
                      "doc" : "BCRYPT password hashing.",
                      "hash" : "V-authentication-S-postgresql-password_hash_algorithm-S-bcrypt-name",
                      "text" : "name",
                      "type" : "String(\"bcrypt\")"
                    }
                  ],
                  "text" : "bcrypt"
                },
                {
                  "doc" : "Settings for PBKDF2 password hashing algorithm.",
                  "hash" : "T-authentication-S-postgresql-password_hash_algorithm-S-pbkdf2",
                  "fields" : [
                    {
                      "doc" : "PBKDF2 password hashing.",
                      "hash" : "V-authentication-S-postgresql-password_hash_algorithm-S-pbkdf2-name",
                      "text" : "name",
                      "type" : "String(\"pbkdf2\")"
                    },
                    {
                      "doc" : "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-postgresql-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text" : "mac_fun",
                      "type" : "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc" : "Iteration count for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-postgresql-password_hash_algorithm-S-pbkdf2-iterations",
                      "text" : "iterations",
                      "type" : "Integer(1..+inf)"
                    },
                    {
                      "doc" : "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash" : "V-authentication-S-postgresql-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text" : "dk_length",
                      "type" : "Integer"
                    }
                  ],
                  "text" : "pbkdf2"
                },
                {
                  "doc" : "Settings for simple algorithms.",
                  "hash" : "T-authentication-S-postgresql-password_hash_algorithm-S-simple",
                  "fields" : [
                    {
                      "doc" : "Simple password hashing algorithm.",
                      "hash" : "V-authentication-S-postgresql-password_hash_algorithm-S-simple-name",
                      "text" : "name",
                      "type" : "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "doc" : "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash" : "V-authentication-S-postgresql-password_hash_algorithm-S-simple-salt_position",
                      "text" : "salt_position",
                      "type" : "Enum(disable,prefix,suffix)",
                      "default" : "prefix"
                    }
                  ],
                  "text" : "simple"
                }
              ],
              "hash" : "V-authentication-S-postgresql-password_hash_algorithm",
              "text" : "password_hash_algorithm",
              "type" : "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))",
              "default" : "{name = sha256, salt_position = prefix}"
            },
            {
              "doc" : "用于查询密码散列等用于认证的数据的 SQL 语句。",
              "hash" : "V-authentication-S-postgresql-query",
              "text" : "query",
              "type" : "String"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-postgresql-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "要连接的 IPv4 或 IPv6 地址或主机名。<br/>\n一个主机条目的格式为：Host[:Port]。<br/>\n如果没有指定 [:Port]，将使用 PostgreSQL 默认端口 5432。",
              "hash" : "V-authentication-S-postgresql-server",
              "text" : "server",
              "type" : "String"
            },
            {
              "doc" : "数据库名字。",
              "hash" : "V-authentication-S-postgresql-database",
              "text" : "database",
              "type" : "String"
            },
            {
              "doc" : "桥接远端服务时使用的连接池大小。",
              "hash" : "V-authentication-S-postgresql-pool_size",
              "text" : "pool_size",
              "type" : "Integer(1..+inf)",
              "default" : "8"
            },
            {
              "doc" : "内部数据库的用户名。",
              "hash" : "V-authentication-S-postgresql-username",
              "text" : "username",
              "type" : "String"
            },
            {
              "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
              "hash" : "V-authentication-S-postgresql-password",
              "text" : "password",
              "type" : "Secret"
            },
            {
              "doc" : "Deprecated since v5.0.15.",
              "hash" : "V-authentication-S-postgresql-auto_reconnect",
              "text" : "auto_reconnect",
              "type" : "Boolean"
            },
            {
              "doc" : "启用 SSL 连接。",
              "refs" : [
                {
                  "doc" : "Socket options for SSL clients.",
                  "hash" : "T-authentication-S-postgresql-ssl-S-ssl_client_opts",
                  "fields" : [
                    {
                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash" : "V-authentication-S-postgresql-ssl-S-ssl_client_opts-cacertfile",
                      "text" : "cacertfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "Deprecated since 5.1.4.",
                      "hash" : "V-authentication-S-postgresql-ssl-S-ssl_client_opts-cacerts",
                      "text" : "cacerts",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash" : "V-authentication-S-postgresql-ssl-S-ssl_client_opts-certfile",
                      "text" : "certfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "PEM 格式的私钥文件。",
                      "hash" : "V-authentication-S-postgresql-ssl-S-ssl_client_opts-keyfile",
                      "text" : "keyfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "启用或禁用对等验证。",
                      "hash" : "V-authentication-S-postgresql-ssl-S-ssl_client_opts-verify",
                      "text" : "verify",
                      "type" : "Enum(verify_peer,verify_none)",
                      "default" : "verify_none"
                    },
                    {
                      "doc" : "启用 TLS 会话重用。",
                      "hash" : "V-authentication-S-postgresql-ssl-S-ssl_client_opts-reuse_sessions",
                      "text" : "reuse_sessions",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash" : "V-authentication-S-postgresql-ssl-S-ssl_client_opts-depth",
                      "text" : "depth",
                      "type" : "Integer(0..+inf)",
                      "default" : "10"
                    },
                    {
                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash" : "V-authentication-S-postgresql-ssl-S-ssl_client_opts-password",
                      "text" : "password",
                      "type" : "String"
                    },
                    {
                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash" : "V-authentication-S-postgresql-ssl-S-ssl_client_opts-versions",
                      "text" : "versions",
                      "type" : "Array(String)",
                      "default" : "[tlsv1.3, tlsv1.2]"
                    },
                    {
                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash" : "V-authentication-S-postgresql-ssl-S-ssl_client_opts-ciphers",
                      "text" : "ciphers",
                      "type" : "Array(String)",
                      "default" : "[]"
                    },
                    {
                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash" : "V-authentication-S-postgresql-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text" : "secure_renegotiate",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                      "hash" : "V-authentication-S-postgresql-ssl-S-ssl_client_opts-log_level",
                      "text" : "log_level",
                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                      "default" : "notice"
                    },
                    {
                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-postgresql-ssl-S-ssl_client_opts-hibernate_after",
                      "text" : "hibernate_after",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "启用 TLS。",
                      "hash" : "V-authentication-S-postgresql-ssl-S-ssl_client_opts-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash" : "V-authentication-S-postgresql-ssl-S-ssl_client_opts-server_name_indication",
                      "text" : "server_name_indication",
                      "type" : "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "text" : "ssl_client_opts"
                }
              ],
              "hash" : "V-authentication-S-postgresql-ssl",
              "text" : "ssl",
              "type" : "Struct(ssl_client_opts)",
              "default" : "{enable = false}"
            }
          ],
          "text" : "postgresql"
        },
        {
          "doc" : "使用 MongoDB (Standalone) 作为认证数据源的认证器的配置项。",
          "hash" : "T-authentication-S-mongo_single",
          "fields" : [
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-mongo_single-mechanism",
              "text" : "mechanism",
              "type" : "String(\"password_based\")"
            },
            {
              "doc" : "后端类型。",
              "hash" : "V-authentication-S-mongo_single-backend",
              "text" : "backend",
              "type" : "String(\"mongodb\")"
            },
            {
              "doc" : "存储认证数据的集合。",
              "hash" : "V-authentication-S-mongo_single-collection",
              "text" : "collection",
              "type" : "String"
            },
            {
              "doc" : "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端 ID",
              "hash" : "V-authentication-S-mongo_single-filter",
              "text" : "filter",
              "type" : "Map",
              "default" : "{}"
            },
            {
              "doc" : "存储密码散列值字段。",
              "hash" : "V-authentication-S-mongo_single-password_hash_field",
              "text" : "password_hash_field",
              "type" : "String",
              "default" : "password_hash"
            },
            {
              "doc" : "用于存储盐值的字段。",
              "hash" : "V-authentication-S-mongo_single-salt_field",
              "text" : "salt_field",
              "type" : "String",
              "default" : "salt"
            },
            {
              "doc" : "定义用户是否具有超级用户权限的字段。",
              "hash" : "V-authentication-S-mongo_single-is_superuser_field",
              "text" : "is_superuser_field",
              "type" : "String",
              "default" : "is_superuser"
            },
            {
              "doc" : "Options for password hash verification.",
              "refs" : [
                {
                  "doc" : "Settings for bcrypt password hashing algorithm.",
                  "hash" : "T-authentication-S-mongo_single-password_hash_algorithm-S-bcrypt",
                  "fields" : [
                    {
                      "doc" : "BCRYPT password hashing.",
                      "hash" : "V-authentication-S-mongo_single-password_hash_algorithm-S-bcrypt-name",
                      "text" : "name",
                      "type" : "String(\"bcrypt\")"
                    }
                  ],
                  "text" : "bcrypt"
                },
                {
                  "doc" : "Settings for PBKDF2 password hashing algorithm.",
                  "hash" : "T-authentication-S-mongo_single-password_hash_algorithm-S-pbkdf2",
                  "fields" : [
                    {
                      "doc" : "PBKDF2 password hashing.",
                      "hash" : "V-authentication-S-mongo_single-password_hash_algorithm-S-pbkdf2-name",
                      "text" : "name",
                      "type" : "String(\"pbkdf2\")"
                    },
                    {
                      "doc" : "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-mongo_single-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text" : "mac_fun",
                      "type" : "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc" : "Iteration count for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-mongo_single-password_hash_algorithm-S-pbkdf2-iterations",
                      "text" : "iterations",
                      "type" : "Integer(1..+inf)"
                    },
                    {
                      "doc" : "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash" : "V-authentication-S-mongo_single-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text" : "dk_length",
                      "type" : "Integer"
                    }
                  ],
                  "text" : "pbkdf2"
                },
                {
                  "doc" : "Settings for simple algorithms.",
                  "hash" : "T-authentication-S-mongo_single-password_hash_algorithm-S-simple",
                  "fields" : [
                    {
                      "doc" : "Simple password hashing algorithm.",
                      "hash" : "V-authentication-S-mongo_single-password_hash_algorithm-S-simple-name",
                      "text" : "name",
                      "type" : "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "doc" : "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash" : "V-authentication-S-mongo_single-password_hash_algorithm-S-simple-salt_position",
                      "text" : "salt_position",
                      "type" : "Enum(disable,prefix,suffix)",
                      "default" : "prefix"
                    }
                  ],
                  "text" : "simple"
                }
              ],
              "hash" : "V-authentication-S-mongo_single-password_hash_algorithm",
              "text" : "password_hash_algorithm",
              "type" : "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))",
              "default" : "{name = sha256, salt_position = prefix}"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-mongo_single-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "独立实例。当MongoDB服务器以独立模式运行时，必须设置为`single`。",
              "hash" : "V-authentication-S-mongo_single-mongo_type",
              "text" : "mongo_type",
              "type" : "String(\"single\")",
              "default" : "single"
            },
            {
              "doc" : "要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机条目具有以下形式：主机[:端口]。<br/>如果未指定[:端口]，则使用MongoDB的默认端口27017。",
              "hash" : "V-authentication-S-mongo_single-server",
              "text" : "server",
              "type" : "String"
            },
            {
              "doc" : "写入模式",
              "hash" : "V-authentication-S-mongo_single-w_mode",
              "text" : "w_mode",
              "type" : "Enum(unsafe,safe)",
              "default" : "unsafe"
            },
            {
              "doc" : "使用 DNS SRV 记录。",
              "hash" : "V-authentication-S-mongo_single-srv_record",
              "text" : "srv_record",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "桥接远端服务时使用的连接池大小。",
              "hash" : "V-authentication-S-mongo_single-pool_size",
              "text" : "pool_size",
              "type" : "Integer(1..+inf)",
              "default" : "8"
            },
            {
              "doc" : "内部数据库的用户名。",
              "hash" : "V-authentication-S-mongo_single-username",
              "text" : "username",
              "type" : "String"
            },
            {
              "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
              "hash" : "V-authentication-S-mongo_single-password",
              "text" : "password",
              "type" : "Secret"
            },
            {
              "doc" : "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。",
              "hash" : "V-authentication-S-mongo_single-use_legacy_protocol",
              "text" : "use_legacy_protocol",
              "type" : "Enum(auto,true,false)",
              "default" : "auto"
            },
            {
              "doc" : "与用户认证信息关联的数据库名称。",
              "hash" : "V-authentication-S-mongo_single-auth_source",
              "text" : "auth_source",
              "type" : "String"
            },
            {
              "doc" : "数据库名字。",
              "hash" : "V-authentication-S-mongo_single-database",
              "text" : "database",
              "type" : "String"
            },
            {
              "refs" : [
                {
                  "doc" : "MongoDB 的拓扑结构。",
                  "hash" : "T-authentication-S-mongo_single-topology-S-topology",
                  "fields" : [
                    {
                      "doc" : "在池中的所有工作线程都繁忙时，可以创建的附加工作线程的最大数量。这有助于通过允许更多并发连接到 MongoDB 服务器来管理工作负载的暂时性波动。",
                      "hash" : "V-authentication-S-mongo_single-topology-S-topology-max_overflow",
                      "text" : "max_overflow",
                      "type" : "Integer(0..+inf)",
                      "default" : "0"
                    },
                    {
                      "doc" : "超出配置的池大小（\"溢出\"）的工作线程在终止之前的时间段。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_single-topology-S-topology-overflow_ttl",
                      "text" : "overflow_ttl",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "检查是否存在多余工作线程（\"溢出\"）的周期。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_single-topology-S-topology-overflow_check_period",
                      "text" : "overflow_check_period",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "用于在多个合适的 MongoDB 实例中进行选择的延迟窗口的大小。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_single-topology-S-topology-local_threshold_ms",
                      "text" : "local_threshold_ms",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "在超时之前尝试连接的持续时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_single-topology-S-topology-connect_timeout_ms",
                      "text" : "connect_timeout_ms",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "在套接字上尝试发送或接收超时之前的持续时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_single-topology-S-topology-socket_timeout_ms",
                      "text" : "socket_timeout_ms",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "指定在抛出异常之前进行服务器选择的阻塞时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_single-topology-S-topology-server_selection_timeout_ms",
                      "text" : "server_selection_timeout_ms",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "工作线程等待连接可用的最长时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_single-topology-S-topology-wait_queue_timeout_ms",
                      "text" : "wait_queue_timeout_ms",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "控制驱动程序何时检查 MongoDB 部署的状态。指定检查之间的时间间隔，从上次检查结束到下次检查开始计算。如果连接数增加（例如，如果增加了池大小），则可能需要增加此时间间隔，以避免在 MongoDB 日志文件中创建过多的日志条目。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_single-topology-S-topology-heartbeat_frequency_ms",
                      "text" : "heartbeat_frequency_ms",
                      "type" : "Duration",
                      "default" : "200s"
                    },
                    {
                      "doc" : "控制心跳之间等待的最短时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_single-topology-S-topology-min_heartbeat_frequency_ms",
                      "text" : "min_heartbeat_frequency_ms",
                      "type" : "Duration"
                    }
                  ],
                  "text" : "topology"
                }
              ],
              "hash" : "V-authentication-S-mongo_single-topology",
              "text" : "topology",
              "type" : "Struct(topology)"
            },
            {
              "doc" : "启用 SSL 连接。",
              "refs" : [
                {
                  "doc" : "Socket options for SSL clients.",
                  "hash" : "T-authentication-S-mongo_single-ssl-S-ssl_client_opts",
                  "fields" : [
                    {
                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash" : "V-authentication-S-mongo_single-ssl-S-ssl_client_opts-cacertfile",
                      "text" : "cacertfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "Deprecated since 5.1.4.",
                      "hash" : "V-authentication-S-mongo_single-ssl-S-ssl_client_opts-cacerts",
                      "text" : "cacerts",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash" : "V-authentication-S-mongo_single-ssl-S-ssl_client_opts-certfile",
                      "text" : "certfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "PEM 格式的私钥文件。",
                      "hash" : "V-authentication-S-mongo_single-ssl-S-ssl_client_opts-keyfile",
                      "text" : "keyfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "启用或禁用对等验证。",
                      "hash" : "V-authentication-S-mongo_single-ssl-S-ssl_client_opts-verify",
                      "text" : "verify",
                      "type" : "Enum(verify_peer,verify_none)",
                      "default" : "verify_none"
                    },
                    {
                      "doc" : "启用 TLS 会话重用。",
                      "hash" : "V-authentication-S-mongo_single-ssl-S-ssl_client_opts-reuse_sessions",
                      "text" : "reuse_sessions",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash" : "V-authentication-S-mongo_single-ssl-S-ssl_client_opts-depth",
                      "text" : "depth",
                      "type" : "Integer(0..+inf)",
                      "default" : "10"
                    },
                    {
                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash" : "V-authentication-S-mongo_single-ssl-S-ssl_client_opts-password",
                      "text" : "password",
                      "type" : "String"
                    },
                    {
                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash" : "V-authentication-S-mongo_single-ssl-S-ssl_client_opts-versions",
                      "text" : "versions",
                      "type" : "Array(String)",
                      "default" : "[tlsv1.3, tlsv1.2]"
                    },
                    {
                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash" : "V-authentication-S-mongo_single-ssl-S-ssl_client_opts-ciphers",
                      "text" : "ciphers",
                      "type" : "Array(String)",
                      "default" : "[]"
                    },
                    {
                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash" : "V-authentication-S-mongo_single-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text" : "secure_renegotiate",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                      "hash" : "V-authentication-S-mongo_single-ssl-S-ssl_client_opts-log_level",
                      "text" : "log_level",
                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                      "default" : "notice"
                    },
                    {
                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_single-ssl-S-ssl_client_opts-hibernate_after",
                      "text" : "hibernate_after",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "启用 TLS。",
                      "hash" : "V-authentication-S-mongo_single-ssl-S-ssl_client_opts-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash" : "V-authentication-S-mongo_single-ssl-S-ssl_client_opts-server_name_indication",
                      "text" : "server_name_indication",
                      "type" : "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "text" : "ssl_client_opts"
                }
              ],
              "hash" : "V-authentication-S-mongo_single-ssl",
              "text" : "ssl",
              "type" : "Struct(ssl_client_opts)",
              "default" : "{enable = false}"
            }
          ],
          "text" : "mongo_single"
        },
        {
          "doc" : "使用 MongoDB (Replica Set) 作为认证数据源的认证器的配置项。",
          "hash" : "T-authentication-S-mongo_rs",
          "fields" : [
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-mongo_rs-mechanism",
              "text" : "mechanism",
              "type" : "String(\"password_based\")"
            },
            {
              "doc" : "后端类型。",
              "hash" : "V-authentication-S-mongo_rs-backend",
              "text" : "backend",
              "type" : "String(\"mongodb\")"
            },
            {
              "doc" : "存储认证数据的集合。",
              "hash" : "V-authentication-S-mongo_rs-collection",
              "text" : "collection",
              "type" : "String"
            },
            {
              "doc" : "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端 ID",
              "hash" : "V-authentication-S-mongo_rs-filter",
              "text" : "filter",
              "type" : "Map",
              "default" : "{}"
            },
            {
              "doc" : "存储密码散列值字段。",
              "hash" : "V-authentication-S-mongo_rs-password_hash_field",
              "text" : "password_hash_field",
              "type" : "String",
              "default" : "password_hash"
            },
            {
              "doc" : "用于存储盐值的字段。",
              "hash" : "V-authentication-S-mongo_rs-salt_field",
              "text" : "salt_field",
              "type" : "String",
              "default" : "salt"
            },
            {
              "doc" : "定义用户是否具有超级用户权限的字段。",
              "hash" : "V-authentication-S-mongo_rs-is_superuser_field",
              "text" : "is_superuser_field",
              "type" : "String",
              "default" : "is_superuser"
            },
            {
              "doc" : "Options for password hash verification.",
              "refs" : [
                {
                  "doc" : "Settings for bcrypt password hashing algorithm.",
                  "hash" : "T-authentication-S-mongo_rs-password_hash_algorithm-S-bcrypt",
                  "fields" : [
                    {
                      "doc" : "BCRYPT password hashing.",
                      "hash" : "V-authentication-S-mongo_rs-password_hash_algorithm-S-bcrypt-name",
                      "text" : "name",
                      "type" : "String(\"bcrypt\")"
                    }
                  ],
                  "text" : "bcrypt"
                },
                {
                  "doc" : "Settings for PBKDF2 password hashing algorithm.",
                  "hash" : "T-authentication-S-mongo_rs-password_hash_algorithm-S-pbkdf2",
                  "fields" : [
                    {
                      "doc" : "PBKDF2 password hashing.",
                      "hash" : "V-authentication-S-mongo_rs-password_hash_algorithm-S-pbkdf2-name",
                      "text" : "name",
                      "type" : "String(\"pbkdf2\")"
                    },
                    {
                      "doc" : "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-mongo_rs-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text" : "mac_fun",
                      "type" : "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc" : "Iteration count for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-mongo_rs-password_hash_algorithm-S-pbkdf2-iterations",
                      "text" : "iterations",
                      "type" : "Integer(1..+inf)"
                    },
                    {
                      "doc" : "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash" : "V-authentication-S-mongo_rs-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text" : "dk_length",
                      "type" : "Integer"
                    }
                  ],
                  "text" : "pbkdf2"
                },
                {
                  "doc" : "Settings for simple algorithms.",
                  "hash" : "T-authentication-S-mongo_rs-password_hash_algorithm-S-simple",
                  "fields" : [
                    {
                      "doc" : "Simple password hashing algorithm.",
                      "hash" : "V-authentication-S-mongo_rs-password_hash_algorithm-S-simple-name",
                      "text" : "name",
                      "type" : "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "doc" : "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash" : "V-authentication-S-mongo_rs-password_hash_algorithm-S-simple-salt_position",
                      "text" : "salt_position",
                      "type" : "Enum(disable,prefix,suffix)",
                      "default" : "prefix"
                    }
                  ],
                  "text" : "simple"
                }
              ],
              "hash" : "V-authentication-S-mongo_rs-password_hash_algorithm",
              "text" : "password_hash_algorithm",
              "type" : "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))",
              "default" : "{name = sha256, salt_position = prefix}"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-mongo_rs-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "副本集。当MongoDB服务器以`副本集`模式运行时，必须设置为`rs`。",
              "hash" : "V-authentication-S-mongo_rs-mongo_type",
              "text" : "mongo_type",
              "type" : "String(\"rs\")",
              "default" : "rs"
            },
            {
              "doc" : "集群连接的节点列表。节点应使用逗号分隔，例如：节点[,节点]。\n对于每个节点，应该是要连接的 IPv4 或 IPv6 地址或主机名。\n主机条目具有以下形式：主机[:端口]。\n如果未指定[:端口]，则使用 MongoDB 的默认端口27017。",
              "hash" : "V-authentication-S-mongo_rs-servers",
              "text" : "servers",
              "type" : "String"
            },
            {
              "doc" : "写入模式",
              "hash" : "V-authentication-S-mongo_rs-w_mode",
              "text" : "w_mode",
              "type" : "Enum(unsafe,safe)",
              "default" : "unsafe"
            },
            {
              "doc" : "读取模式。",
              "hash" : "V-authentication-S-mongo_rs-r_mode",
              "text" : "r_mode",
              "type" : "Enum(master,slave_ok)",
              "default" : "master"
            },
            {
              "doc" : "副本集的名称。",
              "hash" : "V-authentication-S-mongo_rs-replica_set_name",
              "text" : "replica_set_name",
              "type" : "String"
            },
            {
              "doc" : "使用 DNS SRV 记录。",
              "hash" : "V-authentication-S-mongo_rs-srv_record",
              "text" : "srv_record",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "桥接远端服务时使用的连接池大小。",
              "hash" : "V-authentication-S-mongo_rs-pool_size",
              "text" : "pool_size",
              "type" : "Integer(1..+inf)",
              "default" : "8"
            },
            {
              "doc" : "内部数据库的用户名。",
              "hash" : "V-authentication-S-mongo_rs-username",
              "text" : "username",
              "type" : "String"
            },
            {
              "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
              "hash" : "V-authentication-S-mongo_rs-password",
              "text" : "password",
              "type" : "Secret"
            },
            {
              "doc" : "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。",
              "hash" : "V-authentication-S-mongo_rs-use_legacy_protocol",
              "text" : "use_legacy_protocol",
              "type" : "Enum(auto,true,false)",
              "default" : "auto"
            },
            {
              "doc" : "与用户认证信息关联的数据库名称。",
              "hash" : "V-authentication-S-mongo_rs-auth_source",
              "text" : "auth_source",
              "type" : "String"
            },
            {
              "doc" : "数据库名字。",
              "hash" : "V-authentication-S-mongo_rs-database",
              "text" : "database",
              "type" : "String"
            },
            {
              "refs" : [
                {
                  "doc" : "MongoDB 的拓扑结构。",
                  "hash" : "T-authentication-S-mongo_rs-topology-S-topology",
                  "fields" : [
                    {
                      "doc" : "在池中的所有工作线程都繁忙时，可以创建的附加工作线程的最大数量。这有助于通过允许更多并发连接到 MongoDB 服务器来管理工作负载的暂时性波动。",
                      "hash" : "V-authentication-S-mongo_rs-topology-S-topology-max_overflow",
                      "text" : "max_overflow",
                      "type" : "Integer(0..+inf)",
                      "default" : "0"
                    },
                    {
                      "doc" : "超出配置的池大小（\"溢出\"）的工作线程在终止之前的时间段。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_rs-topology-S-topology-overflow_ttl",
                      "text" : "overflow_ttl",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "检查是否存在多余工作线程（\"溢出\"）的周期。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_rs-topology-S-topology-overflow_check_period",
                      "text" : "overflow_check_period",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "用于在多个合适的 MongoDB 实例中进行选择的延迟窗口的大小。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_rs-topology-S-topology-local_threshold_ms",
                      "text" : "local_threshold_ms",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "在超时之前尝试连接的持续时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_rs-topology-S-topology-connect_timeout_ms",
                      "text" : "connect_timeout_ms",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "在套接字上尝试发送或接收超时之前的持续时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_rs-topology-S-topology-socket_timeout_ms",
                      "text" : "socket_timeout_ms",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "指定在抛出异常之前进行服务器选择的阻塞时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_rs-topology-S-topology-server_selection_timeout_ms",
                      "text" : "server_selection_timeout_ms",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "工作线程等待连接可用的最长时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_rs-topology-S-topology-wait_queue_timeout_ms",
                      "text" : "wait_queue_timeout_ms",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "控制驱动程序何时检查 MongoDB 部署的状态。指定检查之间的时间间隔，从上次检查结束到下次检查开始计算。如果连接数增加（例如，如果增加了池大小），则可能需要增加此时间间隔，以避免在 MongoDB 日志文件中创建过多的日志条目。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_rs-topology-S-topology-heartbeat_frequency_ms",
                      "text" : "heartbeat_frequency_ms",
                      "type" : "Duration",
                      "default" : "200s"
                    },
                    {
                      "doc" : "控制心跳之间等待的最短时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_rs-topology-S-topology-min_heartbeat_frequency_ms",
                      "text" : "min_heartbeat_frequency_ms",
                      "type" : "Duration"
                    }
                  ],
                  "text" : "topology"
                }
              ],
              "hash" : "V-authentication-S-mongo_rs-topology",
              "text" : "topology",
              "type" : "Struct(topology)"
            },
            {
              "doc" : "启用 SSL 连接。",
              "refs" : [
                {
                  "doc" : "Socket options for SSL clients.",
                  "hash" : "T-authentication-S-mongo_rs-ssl-S-ssl_client_opts",
                  "fields" : [
                    {
                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash" : "V-authentication-S-mongo_rs-ssl-S-ssl_client_opts-cacertfile",
                      "text" : "cacertfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "Deprecated since 5.1.4.",
                      "hash" : "V-authentication-S-mongo_rs-ssl-S-ssl_client_opts-cacerts",
                      "text" : "cacerts",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash" : "V-authentication-S-mongo_rs-ssl-S-ssl_client_opts-certfile",
                      "text" : "certfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "PEM 格式的私钥文件。",
                      "hash" : "V-authentication-S-mongo_rs-ssl-S-ssl_client_opts-keyfile",
                      "text" : "keyfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "启用或禁用对等验证。",
                      "hash" : "V-authentication-S-mongo_rs-ssl-S-ssl_client_opts-verify",
                      "text" : "verify",
                      "type" : "Enum(verify_peer,verify_none)",
                      "default" : "verify_none"
                    },
                    {
                      "doc" : "启用 TLS 会话重用。",
                      "hash" : "V-authentication-S-mongo_rs-ssl-S-ssl_client_opts-reuse_sessions",
                      "text" : "reuse_sessions",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash" : "V-authentication-S-mongo_rs-ssl-S-ssl_client_opts-depth",
                      "text" : "depth",
                      "type" : "Integer(0..+inf)",
                      "default" : "10"
                    },
                    {
                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash" : "V-authentication-S-mongo_rs-ssl-S-ssl_client_opts-password",
                      "text" : "password",
                      "type" : "String"
                    },
                    {
                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash" : "V-authentication-S-mongo_rs-ssl-S-ssl_client_opts-versions",
                      "text" : "versions",
                      "type" : "Array(String)",
                      "default" : "[tlsv1.3, tlsv1.2]"
                    },
                    {
                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash" : "V-authentication-S-mongo_rs-ssl-S-ssl_client_opts-ciphers",
                      "text" : "ciphers",
                      "type" : "Array(String)",
                      "default" : "[]"
                    },
                    {
                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash" : "V-authentication-S-mongo_rs-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text" : "secure_renegotiate",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                      "hash" : "V-authentication-S-mongo_rs-ssl-S-ssl_client_opts-log_level",
                      "text" : "log_level",
                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                      "default" : "notice"
                    },
                    {
                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_rs-ssl-S-ssl_client_opts-hibernate_after",
                      "text" : "hibernate_after",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "启用 TLS。",
                      "hash" : "V-authentication-S-mongo_rs-ssl-S-ssl_client_opts-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash" : "V-authentication-S-mongo_rs-ssl-S-ssl_client_opts-server_name_indication",
                      "text" : "server_name_indication",
                      "type" : "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "text" : "ssl_client_opts"
                }
              ],
              "hash" : "V-authentication-S-mongo_rs-ssl",
              "text" : "ssl",
              "type" : "Struct(ssl_client_opts)",
              "default" : "{enable = false}"
            }
          ],
          "text" : "mongo_rs"
        },
        {
          "doc" : "使用 MongoDB (Sharded Cluster) 作为认证数据源的认证器的配置项。",
          "hash" : "T-authentication-S-mongo_sharded",
          "fields" : [
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-mongo_sharded-mechanism",
              "text" : "mechanism",
              "type" : "String(\"password_based\")"
            },
            {
              "doc" : "后端类型。",
              "hash" : "V-authentication-S-mongo_sharded-backend",
              "text" : "backend",
              "type" : "String(\"mongodb\")"
            },
            {
              "doc" : "存储认证数据的集合。",
              "hash" : "V-authentication-S-mongo_sharded-collection",
              "text" : "collection",
              "type" : "String"
            },
            {
              "doc" : "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端 ID",
              "hash" : "V-authentication-S-mongo_sharded-filter",
              "text" : "filter",
              "type" : "Map",
              "default" : "{}"
            },
            {
              "doc" : "存储密码散列值字段。",
              "hash" : "V-authentication-S-mongo_sharded-password_hash_field",
              "text" : "password_hash_field",
              "type" : "String",
              "default" : "password_hash"
            },
            {
              "doc" : "用于存储盐值的字段。",
              "hash" : "V-authentication-S-mongo_sharded-salt_field",
              "text" : "salt_field",
              "type" : "String",
              "default" : "salt"
            },
            {
              "doc" : "定义用户是否具有超级用户权限的字段。",
              "hash" : "V-authentication-S-mongo_sharded-is_superuser_field",
              "text" : "is_superuser_field",
              "type" : "String",
              "default" : "is_superuser"
            },
            {
              "doc" : "Options for password hash verification.",
              "refs" : [
                {
                  "doc" : "Settings for bcrypt password hashing algorithm.",
                  "hash" : "T-authentication-S-mongo_sharded-password_hash_algorithm-S-bcrypt",
                  "fields" : [
                    {
                      "doc" : "BCRYPT password hashing.",
                      "hash" : "V-authentication-S-mongo_sharded-password_hash_algorithm-S-bcrypt-name",
                      "text" : "name",
                      "type" : "String(\"bcrypt\")"
                    }
                  ],
                  "text" : "bcrypt"
                },
                {
                  "doc" : "Settings for PBKDF2 password hashing algorithm.",
                  "hash" : "T-authentication-S-mongo_sharded-password_hash_algorithm-S-pbkdf2",
                  "fields" : [
                    {
                      "doc" : "PBKDF2 password hashing.",
                      "hash" : "V-authentication-S-mongo_sharded-password_hash_algorithm-S-pbkdf2-name",
                      "text" : "name",
                      "type" : "String(\"pbkdf2\")"
                    },
                    {
                      "doc" : "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-mongo_sharded-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text" : "mac_fun",
                      "type" : "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc" : "Iteration count for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-mongo_sharded-password_hash_algorithm-S-pbkdf2-iterations",
                      "text" : "iterations",
                      "type" : "Integer(1..+inf)"
                    },
                    {
                      "doc" : "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash" : "V-authentication-S-mongo_sharded-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text" : "dk_length",
                      "type" : "Integer"
                    }
                  ],
                  "text" : "pbkdf2"
                },
                {
                  "doc" : "Settings for simple algorithms.",
                  "hash" : "T-authentication-S-mongo_sharded-password_hash_algorithm-S-simple",
                  "fields" : [
                    {
                      "doc" : "Simple password hashing algorithm.",
                      "hash" : "V-authentication-S-mongo_sharded-password_hash_algorithm-S-simple-name",
                      "text" : "name",
                      "type" : "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "doc" : "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash" : "V-authentication-S-mongo_sharded-password_hash_algorithm-S-simple-salt_position",
                      "text" : "salt_position",
                      "type" : "Enum(disable,prefix,suffix)",
                      "default" : "prefix"
                    }
                  ],
                  "text" : "simple"
                }
              ],
              "hash" : "V-authentication-S-mongo_sharded-password_hash_algorithm",
              "text" : "password_hash_algorithm",
              "type" : "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))",
              "default" : "{name = sha256, salt_position = prefix}"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-mongo_sharded-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "分片集群。当 MongoDB 服务器以`分片`模式运行时，必须设置为`sharded`。",
              "hash" : "V-authentication-S-mongo_sharded-mongo_type",
              "text" : "mongo_type",
              "type" : "String(\"sharded\")",
              "default" : "sharded"
            },
            {
              "doc" : "集群连接的节点列表。节点应使用逗号分隔，例如：节点[,节点]。\n对于每个节点，应该是要连接的 IPv4 或 IPv6 地址或主机名。\n主机条目具有以下形式：主机[:端口]。\n如果未指定[:端口]，则使用 MongoDB 的默认端口27017。",
              "hash" : "V-authentication-S-mongo_sharded-servers",
              "text" : "servers",
              "type" : "String"
            },
            {
              "doc" : "写入模式",
              "hash" : "V-authentication-S-mongo_sharded-w_mode",
              "text" : "w_mode",
              "type" : "Enum(unsafe,safe)",
              "default" : "unsafe"
            },
            {
              "doc" : "使用 DNS SRV 记录。",
              "hash" : "V-authentication-S-mongo_sharded-srv_record",
              "text" : "srv_record",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "桥接远端服务时使用的连接池大小。",
              "hash" : "V-authentication-S-mongo_sharded-pool_size",
              "text" : "pool_size",
              "type" : "Integer(1..+inf)",
              "default" : "8"
            },
            {
              "doc" : "内部数据库的用户名。",
              "hash" : "V-authentication-S-mongo_sharded-username",
              "text" : "username",
              "type" : "String"
            },
            {
              "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
              "hash" : "V-authentication-S-mongo_sharded-password",
              "text" : "password",
              "type" : "Secret"
            },
            {
              "doc" : "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。",
              "hash" : "V-authentication-S-mongo_sharded-use_legacy_protocol",
              "text" : "use_legacy_protocol",
              "type" : "Enum(auto,true,false)",
              "default" : "auto"
            },
            {
              "doc" : "与用户认证信息关联的数据库名称。",
              "hash" : "V-authentication-S-mongo_sharded-auth_source",
              "text" : "auth_source",
              "type" : "String"
            },
            {
              "doc" : "数据库名字。",
              "hash" : "V-authentication-S-mongo_sharded-database",
              "text" : "database",
              "type" : "String"
            },
            {
              "refs" : [
                {
                  "doc" : "MongoDB 的拓扑结构。",
                  "hash" : "T-authentication-S-mongo_sharded-topology-S-topology",
                  "fields" : [
                    {
                      "doc" : "在池中的所有工作线程都繁忙时，可以创建的附加工作线程的最大数量。这有助于通过允许更多并发连接到 MongoDB 服务器来管理工作负载的暂时性波动。",
                      "hash" : "V-authentication-S-mongo_sharded-topology-S-topology-max_overflow",
                      "text" : "max_overflow",
                      "type" : "Integer(0..+inf)",
                      "default" : "0"
                    },
                    {
                      "doc" : "超出配置的池大小（\"溢出\"）的工作线程在终止之前的时间段。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_sharded-topology-S-topology-overflow_ttl",
                      "text" : "overflow_ttl",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "检查是否存在多余工作线程（\"溢出\"）的周期。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_sharded-topology-S-topology-overflow_check_period",
                      "text" : "overflow_check_period",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "用于在多个合适的 MongoDB 实例中进行选择的延迟窗口的大小。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_sharded-topology-S-topology-local_threshold_ms",
                      "text" : "local_threshold_ms",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "在超时之前尝试连接的持续时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_sharded-topology-S-topology-connect_timeout_ms",
                      "text" : "connect_timeout_ms",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "在套接字上尝试发送或接收超时之前的持续时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_sharded-topology-S-topology-socket_timeout_ms",
                      "text" : "socket_timeout_ms",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "指定在抛出异常之前进行服务器选择的阻塞时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_sharded-topology-S-topology-server_selection_timeout_ms",
                      "text" : "server_selection_timeout_ms",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "工作线程等待连接可用的最长时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_sharded-topology-S-topology-wait_queue_timeout_ms",
                      "text" : "wait_queue_timeout_ms",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "控制驱动程序何时检查 MongoDB 部署的状态。指定检查之间的时间间隔，从上次检查结束到下次检查开始计算。如果连接数增加（例如，如果增加了池大小），则可能需要增加此时间间隔，以避免在 MongoDB 日志文件中创建过多的日志条目。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_sharded-topology-S-topology-heartbeat_frequency_ms",
                      "text" : "heartbeat_frequency_ms",
                      "type" : "Duration",
                      "default" : "200s"
                    },
                    {
                      "doc" : "控制心跳之间等待的最短时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_sharded-topology-S-topology-min_heartbeat_frequency_ms",
                      "text" : "min_heartbeat_frequency_ms",
                      "type" : "Duration"
                    }
                  ],
                  "text" : "topology"
                }
              ],
              "hash" : "V-authentication-S-mongo_sharded-topology",
              "text" : "topology",
              "type" : "Struct(topology)"
            },
            {
              "doc" : "启用 SSL 连接。",
              "refs" : [
                {
                  "doc" : "Socket options for SSL clients.",
                  "hash" : "T-authentication-S-mongo_sharded-ssl-S-ssl_client_opts",
                  "fields" : [
                    {
                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash" : "V-authentication-S-mongo_sharded-ssl-S-ssl_client_opts-cacertfile",
                      "text" : "cacertfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "Deprecated since 5.1.4.",
                      "hash" : "V-authentication-S-mongo_sharded-ssl-S-ssl_client_opts-cacerts",
                      "text" : "cacerts",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash" : "V-authentication-S-mongo_sharded-ssl-S-ssl_client_opts-certfile",
                      "text" : "certfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "PEM 格式的私钥文件。",
                      "hash" : "V-authentication-S-mongo_sharded-ssl-S-ssl_client_opts-keyfile",
                      "text" : "keyfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "启用或禁用对等验证。",
                      "hash" : "V-authentication-S-mongo_sharded-ssl-S-ssl_client_opts-verify",
                      "text" : "verify",
                      "type" : "Enum(verify_peer,verify_none)",
                      "default" : "verify_none"
                    },
                    {
                      "doc" : "启用 TLS 会话重用。",
                      "hash" : "V-authentication-S-mongo_sharded-ssl-S-ssl_client_opts-reuse_sessions",
                      "text" : "reuse_sessions",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash" : "V-authentication-S-mongo_sharded-ssl-S-ssl_client_opts-depth",
                      "text" : "depth",
                      "type" : "Integer(0..+inf)",
                      "default" : "10"
                    },
                    {
                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash" : "V-authentication-S-mongo_sharded-ssl-S-ssl_client_opts-password",
                      "text" : "password",
                      "type" : "String"
                    },
                    {
                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash" : "V-authentication-S-mongo_sharded-ssl-S-ssl_client_opts-versions",
                      "text" : "versions",
                      "type" : "Array(String)",
                      "default" : "[tlsv1.3, tlsv1.2]"
                    },
                    {
                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash" : "V-authentication-S-mongo_sharded-ssl-S-ssl_client_opts-ciphers",
                      "text" : "ciphers",
                      "type" : "Array(String)",
                      "default" : "[]"
                    },
                    {
                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash" : "V-authentication-S-mongo_sharded-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text" : "secure_renegotiate",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                      "hash" : "V-authentication-S-mongo_sharded-ssl-S-ssl_client_opts-log_level",
                      "text" : "log_level",
                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                      "default" : "notice"
                    },
                    {
                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-mongo_sharded-ssl-S-ssl_client_opts-hibernate_after",
                      "text" : "hibernate_after",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "启用 TLS。",
                      "hash" : "V-authentication-S-mongo_sharded-ssl-S-ssl_client_opts-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash" : "V-authentication-S-mongo_sharded-ssl-S-ssl_client_opts-server_name_indication",
                      "text" : "server_name_indication",
                      "type" : "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "text" : "ssl_client_opts"
                }
              ],
              "hash" : "V-authentication-S-mongo_sharded-ssl",
              "text" : "ssl",
              "type" : "Struct(ssl_client_opts)",
              "default" : "{enable = false}"
            }
          ],
          "text" : "mongo_sharded"
        },
        {
          "doc" : "使用 Redis (Standalone) 作为认证数据源的认证器的配置项。",
          "hash" : "T-authentication-S-redis_single",
          "fields" : [
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-redis_single-mechanism",
              "text" : "mechanism",
              "type" : "String(\"password_based\")"
            },
            {
              "doc" : "后端类型。",
              "hash" : "V-authentication-S-redis_single-backend",
              "text" : "backend",
              "type" : "String(\"redis\")"
            },
            {
              "doc" : "用于查询密码散列等用于认证的数据的 Redis 命令，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
              "hash" : "V-authentication-S-redis_single-cmd",
              "text" : "cmd",
              "type" : "String"
            },
            {
              "doc" : "Options for password hash verification.",
              "refs" : [
                {
                  "doc" : "Settings for bcrypt password hashing algorithm.",
                  "hash" : "T-authentication-S-redis_single-password_hash_algorithm-S-bcrypt",
                  "fields" : [
                    {
                      "doc" : "BCRYPT password hashing.",
                      "hash" : "V-authentication-S-redis_single-password_hash_algorithm-S-bcrypt-name",
                      "text" : "name",
                      "type" : "String(\"bcrypt\")"
                    }
                  ],
                  "text" : "bcrypt"
                },
                {
                  "doc" : "Settings for PBKDF2 password hashing algorithm.",
                  "hash" : "T-authentication-S-redis_single-password_hash_algorithm-S-pbkdf2",
                  "fields" : [
                    {
                      "doc" : "PBKDF2 password hashing.",
                      "hash" : "V-authentication-S-redis_single-password_hash_algorithm-S-pbkdf2-name",
                      "text" : "name",
                      "type" : "String(\"pbkdf2\")"
                    },
                    {
                      "doc" : "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-redis_single-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text" : "mac_fun",
                      "type" : "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc" : "Iteration count for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-redis_single-password_hash_algorithm-S-pbkdf2-iterations",
                      "text" : "iterations",
                      "type" : "Integer(1..+inf)"
                    },
                    {
                      "doc" : "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash" : "V-authentication-S-redis_single-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text" : "dk_length",
                      "type" : "Integer"
                    }
                  ],
                  "text" : "pbkdf2"
                },
                {
                  "doc" : "Settings for simple algorithms.",
                  "hash" : "T-authentication-S-redis_single-password_hash_algorithm-S-simple",
                  "fields" : [
                    {
                      "doc" : "Simple password hashing algorithm.",
                      "hash" : "V-authentication-S-redis_single-password_hash_algorithm-S-simple-name",
                      "text" : "name",
                      "type" : "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "doc" : "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash" : "V-authentication-S-redis_single-password_hash_algorithm-S-simple-salt_position",
                      "text" : "salt_position",
                      "type" : "Enum(disable,prefix,suffix)",
                      "default" : "prefix"
                    }
                  ],
                  "text" : "simple"
                }
              ],
              "hash" : "V-authentication-S-redis_single-password_hash_algorithm",
              "text" : "password_hash_algorithm",
              "type" : "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))",
              "default" : "{name = sha256, salt_position = prefix}"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-redis_single-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "将要连接的 IPv4 或 IPv6 地址，或者主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。",
              "hash" : "V-authentication-S-redis_single-server",
              "text" : "server",
              "type" : "String"
            },
            {
              "doc" : "Single 模式。 当 Redis 服务器在 Single 模式下运行时必须设置为 'single' 。",
              "hash" : "V-authentication-S-redis_single-redis_type",
              "text" : "redis_type",
              "type" : "String(\"single\")",
              "default" : "single"
            },
            {
              "doc" : "桥接远端服务时使用的连接池大小。",
              "hash" : "V-authentication-S-redis_single-pool_size",
              "text" : "pool_size",
              "type" : "Integer(1..+inf)",
              "default" : "8"
            },
            {
              "doc" : "内部数据库的用户名。",
              "hash" : "V-authentication-S-redis_single-username",
              "text" : "username",
              "type" : "String"
            },
            {
              "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
              "hash" : "V-authentication-S-redis_single-password",
              "text" : "password",
              "type" : "Secret"
            },
            {
              "doc" : "Redis 数据库 ID。",
              "hash" : "V-authentication-S-redis_single-database",
              "text" : "database",
              "type" : "Integer(0..+inf)",
              "default" : "0"
            },
            {
              "doc" : "Deprecated since v5.0.15.",
              "hash" : "V-authentication-S-redis_single-auto_reconnect",
              "text" : "auto_reconnect",
              "type" : "Boolean"
            },
            {
              "doc" : "启用 SSL 连接。",
              "refs" : [
                {
                  "doc" : "Socket options for SSL clients.",
                  "hash" : "T-authentication-S-redis_single-ssl-S-ssl_client_opts",
                  "fields" : [
                    {
                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash" : "V-authentication-S-redis_single-ssl-S-ssl_client_opts-cacertfile",
                      "text" : "cacertfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "Deprecated since 5.1.4.",
                      "hash" : "V-authentication-S-redis_single-ssl-S-ssl_client_opts-cacerts",
                      "text" : "cacerts",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash" : "V-authentication-S-redis_single-ssl-S-ssl_client_opts-certfile",
                      "text" : "certfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "PEM 格式的私钥文件。",
                      "hash" : "V-authentication-S-redis_single-ssl-S-ssl_client_opts-keyfile",
                      "text" : "keyfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "启用或禁用对等验证。",
                      "hash" : "V-authentication-S-redis_single-ssl-S-ssl_client_opts-verify",
                      "text" : "verify",
                      "type" : "Enum(verify_peer,verify_none)",
                      "default" : "verify_none"
                    },
                    {
                      "doc" : "启用 TLS 会话重用。",
                      "hash" : "V-authentication-S-redis_single-ssl-S-ssl_client_opts-reuse_sessions",
                      "text" : "reuse_sessions",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash" : "V-authentication-S-redis_single-ssl-S-ssl_client_opts-depth",
                      "text" : "depth",
                      "type" : "Integer(0..+inf)",
                      "default" : "10"
                    },
                    {
                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash" : "V-authentication-S-redis_single-ssl-S-ssl_client_opts-password",
                      "text" : "password",
                      "type" : "String"
                    },
                    {
                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash" : "V-authentication-S-redis_single-ssl-S-ssl_client_opts-versions",
                      "text" : "versions",
                      "type" : "Array(String)",
                      "default" : "[tlsv1.3, tlsv1.2]"
                    },
                    {
                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash" : "V-authentication-S-redis_single-ssl-S-ssl_client_opts-ciphers",
                      "text" : "ciphers",
                      "type" : "Array(String)",
                      "default" : "[]"
                    },
                    {
                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash" : "V-authentication-S-redis_single-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text" : "secure_renegotiate",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                      "hash" : "V-authentication-S-redis_single-ssl-S-ssl_client_opts-log_level",
                      "text" : "log_level",
                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                      "default" : "notice"
                    },
                    {
                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-redis_single-ssl-S-ssl_client_opts-hibernate_after",
                      "text" : "hibernate_after",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "启用 TLS。",
                      "hash" : "V-authentication-S-redis_single-ssl-S-ssl_client_opts-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash" : "V-authentication-S-redis_single-ssl-S-ssl_client_opts-server_name_indication",
                      "text" : "server_name_indication",
                      "type" : "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "text" : "ssl_client_opts"
                }
              ],
              "hash" : "V-authentication-S-redis_single-ssl",
              "text" : "ssl",
              "type" : "Struct(ssl_client_opts)",
              "default" : "{enable = false}"
            }
          ],
          "text" : "redis_single"
        },
        {
          "doc" : "使用 Redis (Cluster) 作为认证数据源的认证器的配置项。",
          "hash" : "T-authentication-S-redis_cluster",
          "fields" : [
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-redis_cluster-mechanism",
              "text" : "mechanism",
              "type" : "String(\"password_based\")"
            },
            {
              "doc" : "后端类型。",
              "hash" : "V-authentication-S-redis_cluster-backend",
              "text" : "backend",
              "type" : "String(\"redis\")"
            },
            {
              "doc" : "用于查询密码散列等用于认证的数据的 Redis 命令，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
              "hash" : "V-authentication-S-redis_cluster-cmd",
              "text" : "cmd",
              "type" : "String"
            },
            {
              "doc" : "Options for password hash verification.",
              "refs" : [
                {
                  "doc" : "Settings for bcrypt password hashing algorithm.",
                  "hash" : "T-authentication-S-redis_cluster-password_hash_algorithm-S-bcrypt",
                  "fields" : [
                    {
                      "doc" : "BCRYPT password hashing.",
                      "hash" : "V-authentication-S-redis_cluster-password_hash_algorithm-S-bcrypt-name",
                      "text" : "name",
                      "type" : "String(\"bcrypt\")"
                    }
                  ],
                  "text" : "bcrypt"
                },
                {
                  "doc" : "Settings for PBKDF2 password hashing algorithm.",
                  "hash" : "T-authentication-S-redis_cluster-password_hash_algorithm-S-pbkdf2",
                  "fields" : [
                    {
                      "doc" : "PBKDF2 password hashing.",
                      "hash" : "V-authentication-S-redis_cluster-password_hash_algorithm-S-pbkdf2-name",
                      "text" : "name",
                      "type" : "String(\"pbkdf2\")"
                    },
                    {
                      "doc" : "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-redis_cluster-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text" : "mac_fun",
                      "type" : "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc" : "Iteration count for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-redis_cluster-password_hash_algorithm-S-pbkdf2-iterations",
                      "text" : "iterations",
                      "type" : "Integer(1..+inf)"
                    },
                    {
                      "doc" : "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash" : "V-authentication-S-redis_cluster-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text" : "dk_length",
                      "type" : "Integer"
                    }
                  ],
                  "text" : "pbkdf2"
                },
                {
                  "doc" : "Settings for simple algorithms.",
                  "hash" : "T-authentication-S-redis_cluster-password_hash_algorithm-S-simple",
                  "fields" : [
                    {
                      "doc" : "Simple password hashing algorithm.",
                      "hash" : "V-authentication-S-redis_cluster-password_hash_algorithm-S-simple-name",
                      "text" : "name",
                      "type" : "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "doc" : "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash" : "V-authentication-S-redis_cluster-password_hash_algorithm-S-simple-salt_position",
                      "text" : "salt_position",
                      "type" : "Enum(disable,prefix,suffix)",
                      "default" : "prefix"
                    }
                  ],
                  "text" : "simple"
                }
              ],
              "hash" : "V-authentication-S-redis_cluster-password_hash_algorithm",
              "text" : "password_hash_algorithm",
              "type" : "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))",
              "default" : "{name = sha256, salt_position = prefix}"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-redis_cluster-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：Node[,Node]。每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。",
              "hash" : "V-authentication-S-redis_cluster-servers",
              "text" : "servers",
              "type" : "String"
            },
            {
              "doc" : "Cluster 模式。当 Redis 服务器在集群模式下运行时必须设置为'cluster'。",
              "hash" : "V-authentication-S-redis_cluster-redis_type",
              "text" : "redis_type",
              "type" : "String(\"cluster\")",
              "default" : "cluster"
            },
            {
              "doc" : "桥接远端服务时使用的连接池大小。",
              "hash" : "V-authentication-S-redis_cluster-pool_size",
              "text" : "pool_size",
              "type" : "Integer(1..+inf)",
              "default" : "8"
            },
            {
              "doc" : "内部数据库的用户名。",
              "hash" : "V-authentication-S-redis_cluster-username",
              "text" : "username",
              "type" : "String"
            },
            {
              "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
              "hash" : "V-authentication-S-redis_cluster-password",
              "text" : "password",
              "type" : "Secret"
            },
            {
              "doc" : "Deprecated since v5.0.15.",
              "hash" : "V-authentication-S-redis_cluster-auto_reconnect",
              "text" : "auto_reconnect",
              "type" : "Boolean"
            },
            {
              "doc" : "启用 SSL 连接。",
              "refs" : [
                {
                  "doc" : "Socket options for SSL clients.",
                  "hash" : "T-authentication-S-redis_cluster-ssl-S-ssl_client_opts",
                  "fields" : [
                    {
                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash" : "V-authentication-S-redis_cluster-ssl-S-ssl_client_opts-cacertfile",
                      "text" : "cacertfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "Deprecated since 5.1.4.",
                      "hash" : "V-authentication-S-redis_cluster-ssl-S-ssl_client_opts-cacerts",
                      "text" : "cacerts",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash" : "V-authentication-S-redis_cluster-ssl-S-ssl_client_opts-certfile",
                      "text" : "certfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "PEM 格式的私钥文件。",
                      "hash" : "V-authentication-S-redis_cluster-ssl-S-ssl_client_opts-keyfile",
                      "text" : "keyfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "启用或禁用对等验证。",
                      "hash" : "V-authentication-S-redis_cluster-ssl-S-ssl_client_opts-verify",
                      "text" : "verify",
                      "type" : "Enum(verify_peer,verify_none)",
                      "default" : "verify_none"
                    },
                    {
                      "doc" : "启用 TLS 会话重用。",
                      "hash" : "V-authentication-S-redis_cluster-ssl-S-ssl_client_opts-reuse_sessions",
                      "text" : "reuse_sessions",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash" : "V-authentication-S-redis_cluster-ssl-S-ssl_client_opts-depth",
                      "text" : "depth",
                      "type" : "Integer(0..+inf)",
                      "default" : "10"
                    },
                    {
                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash" : "V-authentication-S-redis_cluster-ssl-S-ssl_client_opts-password",
                      "text" : "password",
                      "type" : "String"
                    },
                    {
                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash" : "V-authentication-S-redis_cluster-ssl-S-ssl_client_opts-versions",
                      "text" : "versions",
                      "type" : "Array(String)",
                      "default" : "[tlsv1.3, tlsv1.2]"
                    },
                    {
                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash" : "V-authentication-S-redis_cluster-ssl-S-ssl_client_opts-ciphers",
                      "text" : "ciphers",
                      "type" : "Array(String)",
                      "default" : "[]"
                    },
                    {
                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash" : "V-authentication-S-redis_cluster-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text" : "secure_renegotiate",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                      "hash" : "V-authentication-S-redis_cluster-ssl-S-ssl_client_opts-log_level",
                      "text" : "log_level",
                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                      "default" : "notice"
                    },
                    {
                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-redis_cluster-ssl-S-ssl_client_opts-hibernate_after",
                      "text" : "hibernate_after",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "启用 TLS。",
                      "hash" : "V-authentication-S-redis_cluster-ssl-S-ssl_client_opts-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash" : "V-authentication-S-redis_cluster-ssl-S-ssl_client_opts-server_name_indication",
                      "text" : "server_name_indication",
                      "type" : "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "text" : "ssl_client_opts"
                }
              ],
              "hash" : "V-authentication-S-redis_cluster-ssl",
              "text" : "ssl",
              "type" : "Struct(ssl_client_opts)",
              "default" : "{enable = false}"
            }
          ],
          "text" : "redis_cluster"
        },
        {
          "doc" : "使用 Redis (Sentinel) 作为认证数据源的认证器的配置项。",
          "hash" : "T-authentication-S-redis_sentinel",
          "fields" : [
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-redis_sentinel-mechanism",
              "text" : "mechanism",
              "type" : "String(\"password_based\")"
            },
            {
              "doc" : "后端类型。",
              "hash" : "V-authentication-S-redis_sentinel-backend",
              "text" : "backend",
              "type" : "String(\"redis\")"
            },
            {
              "doc" : "用于查询密码散列等用于认证的数据的 Redis 命令，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
              "hash" : "V-authentication-S-redis_sentinel-cmd",
              "text" : "cmd",
              "type" : "String"
            },
            {
              "doc" : "Options for password hash verification.",
              "refs" : [
                {
                  "doc" : "Settings for bcrypt password hashing algorithm.",
                  "hash" : "T-authentication-S-redis_sentinel-password_hash_algorithm-S-bcrypt",
                  "fields" : [
                    {
                      "doc" : "BCRYPT password hashing.",
                      "hash" : "V-authentication-S-redis_sentinel-password_hash_algorithm-S-bcrypt-name",
                      "text" : "name",
                      "type" : "String(\"bcrypt\")"
                    }
                  ],
                  "text" : "bcrypt"
                },
                {
                  "doc" : "Settings for PBKDF2 password hashing algorithm.",
                  "hash" : "T-authentication-S-redis_sentinel-password_hash_algorithm-S-pbkdf2",
                  "fields" : [
                    {
                      "doc" : "PBKDF2 password hashing.",
                      "hash" : "V-authentication-S-redis_sentinel-password_hash_algorithm-S-pbkdf2-name",
                      "text" : "name",
                      "type" : "String(\"pbkdf2\")"
                    },
                    {
                      "doc" : "Specifies mac_fun for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-redis_sentinel-password_hash_algorithm-S-pbkdf2-mac_fun",
                      "text" : "mac_fun",
                      "type" : "Enum(md4,md5,ripemd160,sha,sha224,sha256,sha384,sha512)"
                    },
                    {
                      "doc" : "Iteration count for PBKDF2 hashing algorithm.",
                      "hash" : "V-authentication-S-redis_sentinel-password_hash_algorithm-S-pbkdf2-iterations",
                      "text" : "iterations",
                      "type" : "Integer(1..+inf)"
                    },
                    {
                      "doc" : "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                      "hash" : "V-authentication-S-redis_sentinel-password_hash_algorithm-S-pbkdf2-dk_length",
                      "text" : "dk_length",
                      "type" : "Integer"
                    }
                  ],
                  "text" : "pbkdf2"
                },
                {
                  "doc" : "Settings for simple algorithms.",
                  "hash" : "T-authentication-S-redis_sentinel-password_hash_algorithm-S-simple",
                  "fields" : [
                    {
                      "doc" : "Simple password hashing algorithm.",
                      "hash" : "V-authentication-S-redis_sentinel-password_hash_algorithm-S-simple-name",
                      "text" : "name",
                      "type" : "Enum(plain,md5,sha,sha256,sha512)"
                    },
                    {
                      "doc" : "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                      "hash" : "V-authentication-S-redis_sentinel-password_hash_algorithm-S-simple-salt_position",
                      "text" : "salt_position",
                      "type" : "Enum(disable,prefix,suffix)",
                      "default" : "prefix"
                    }
                  ],
                  "text" : "simple"
                }
              ],
              "hash" : "V-authentication-S-redis_sentinel-password_hash_algorithm",
              "text" : "password_hash_algorithm",
              "type" : "OneOf(Struct(bcrypt),Struct(pbkdf2),Struct(simple))",
              "default" : "{name = sha256, salt_position = prefix}"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-redis_sentinel-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：Node[,Node]。每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。",
              "hash" : "V-authentication-S-redis_sentinel-servers",
              "text" : "servers",
              "type" : "String"
            },
            {
              "doc" : "Sentinel 模式。 当 Redis 服务器在 Senitel 模式下运行时必须设置为 'sentinel' 。",
              "hash" : "V-authentication-S-redis_sentinel-redis_type",
              "text" : "redis_type",
              "type" : "String(\"sentinel\")",
              "default" : "sentinel"
            },
            {
              "doc" : "Redis sentinel 模式下的集群名称。",
              "hash" : "V-authentication-S-redis_sentinel-sentinel",
              "text" : "sentinel",
              "type" : "String"
            },
            {
              "doc" : "桥接远端服务时使用的连接池大小。",
              "hash" : "V-authentication-S-redis_sentinel-pool_size",
              "text" : "pool_size",
              "type" : "Integer(1..+inf)",
              "default" : "8"
            },
            {
              "doc" : "内部数据库的用户名。",
              "hash" : "V-authentication-S-redis_sentinel-username",
              "text" : "username",
              "type" : "String"
            },
            {
              "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
              "hash" : "V-authentication-S-redis_sentinel-password",
              "text" : "password",
              "type" : "Secret"
            },
            {
              "doc" : "Redis 数据库 ID。",
              "hash" : "V-authentication-S-redis_sentinel-database",
              "text" : "database",
              "type" : "Integer(0..+inf)",
              "default" : "0"
            },
            {
              "doc" : "Deprecated since v5.0.15.",
              "hash" : "V-authentication-S-redis_sentinel-auto_reconnect",
              "text" : "auto_reconnect",
              "type" : "Boolean"
            },
            {
              "doc" : "启用 SSL 连接。",
              "refs" : [
                {
                  "doc" : "Socket options for SSL clients.",
                  "hash" : "T-authentication-S-redis_sentinel-ssl-S-ssl_client_opts",
                  "fields" : [
                    {
                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash" : "V-authentication-S-redis_sentinel-ssl-S-ssl_client_opts-cacertfile",
                      "text" : "cacertfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "Deprecated since 5.1.4.",
                      "hash" : "V-authentication-S-redis_sentinel-ssl-S-ssl_client_opts-cacerts",
                      "text" : "cacerts",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash" : "V-authentication-S-redis_sentinel-ssl-S-ssl_client_opts-certfile",
                      "text" : "certfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "PEM 格式的私钥文件。",
                      "hash" : "V-authentication-S-redis_sentinel-ssl-S-ssl_client_opts-keyfile",
                      "text" : "keyfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "启用或禁用对等验证。",
                      "hash" : "V-authentication-S-redis_sentinel-ssl-S-ssl_client_opts-verify",
                      "text" : "verify",
                      "type" : "Enum(verify_peer,verify_none)",
                      "default" : "verify_none"
                    },
                    {
                      "doc" : "启用 TLS 会话重用。",
                      "hash" : "V-authentication-S-redis_sentinel-ssl-S-ssl_client_opts-reuse_sessions",
                      "text" : "reuse_sessions",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash" : "V-authentication-S-redis_sentinel-ssl-S-ssl_client_opts-depth",
                      "text" : "depth",
                      "type" : "Integer(0..+inf)",
                      "default" : "10"
                    },
                    {
                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash" : "V-authentication-S-redis_sentinel-ssl-S-ssl_client_opts-password",
                      "text" : "password",
                      "type" : "String"
                    },
                    {
                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash" : "V-authentication-S-redis_sentinel-ssl-S-ssl_client_opts-versions",
                      "text" : "versions",
                      "type" : "Array(String)",
                      "default" : "[tlsv1.3, tlsv1.2]"
                    },
                    {
                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash" : "V-authentication-S-redis_sentinel-ssl-S-ssl_client_opts-ciphers",
                      "text" : "ciphers",
                      "type" : "Array(String)",
                      "default" : "[]"
                    },
                    {
                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash" : "V-authentication-S-redis_sentinel-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text" : "secure_renegotiate",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                      "hash" : "V-authentication-S-redis_sentinel-ssl-S-ssl_client_opts-log_level",
                      "text" : "log_level",
                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                      "default" : "notice"
                    },
                    {
                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-redis_sentinel-ssl-S-ssl_client_opts-hibernate_after",
                      "text" : "hibernate_after",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "启用 TLS。",
                      "hash" : "V-authentication-S-redis_sentinel-ssl-S-ssl_client_opts-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash" : "V-authentication-S-redis_sentinel-ssl-S-ssl_client_opts-server_name_indication",
                      "text" : "server_name_indication",
                      "type" : "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "text" : "ssl_client_opts"
                }
              ],
              "hash" : "V-authentication-S-redis_sentinel-ssl",
              "text" : "ssl",
              "type" : "Struct(ssl_client_opts)",
              "default" : "{enable = false}"
            }
          ],
          "text" : "redis_sentinel"
        },
        {
          "doc" : "使用 HTTP Server 作为认证服务的认证器的配置项 (使用 GET 请求)。",
          "hash" : "T-authentication-S-http_get",
          "fields" : [
            {
              "doc" : "HTTP 请求方法。",
              "hash" : "V-authentication-S-http_get-method",
              "text" : "method",
              "type" : "String(\"get\")"
            },
            {
              "doc" : "HTTP Headers 列表 (无 <code>content-type</code>) 。",
              "hash" : "V-authentication-S-http_get-headers",
              "text" : "headers",
              "type" : "Map",
              "default" : "{accept = \"application/json\", cache-control = no-cache, connection = keep-alive, keep-alive = \"timeout=30, max=1000\"}"
            },
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-http_get-mechanism",
              "text" : "mechanism",
              "type" : "String(\"password_based\")"
            },
            {
              "doc" : "后端类型。",
              "hash" : "V-authentication-S-http_get-backend",
              "text" : "backend",
              "type" : "String(\"http\")"
            },
            {
              "doc" : "认证 HTTP 服务器地址。",
              "hash" : "V-authentication-S-http_get-url",
              "text" : "url",
              "type" : "String"
            },
            {
              "doc" : "HTTP 请求体。",
              "hash" : "V-authentication-S-http_get-body",
              "text" : "body",
              "type" : "Map"
            },
            {
              "doc" : "HTTP 请求超时时长。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-authentication-S-http_get-request_timeout",
              "text" : "request_timeout",
              "type" : "Duration",
              "default" : "5s"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-http_get-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "配置 HTTP 请求参数。",
              "refs" : [
                {
                  "doc" : "",
                  "hash" : "T-authentication-S-http_get-request-S-request",
                  "fields" : [
                    {
                      "doc" : "HTTP 请求方法。",
                      "hash" : "V-authentication-S-http_get-request-S-request-method",
                      "text" : "method",
                      "type" : "String"
                    },
                    {
                      "doc" : "URL 路径。",
                      "hash" : "V-authentication-S-http_get-request-S-request-path",
                      "text" : "path",
                      "type" : "String"
                    },
                    {
                      "doc" : "HTTP 请求的主体。",
                      "hash" : "V-authentication-S-http_get-request-S-request-body",
                      "text" : "body",
                      "type" : "String"
                    },
                    {
                      "doc" : "HTTP 请求头列表。",
                      "hash" : "V-authentication-S-http_get-request-S-request-headers",
                      "text" : "headers",
                      "type" : "Map"
                    },
                    {
                      "doc" : "如果发送请求时出错，最大重试次数。",
                      "hash" : "V-authentication-S-http_get-request-S-request-max_retries",
                      "text" : "max_retries",
                      "type" : "Integer(0..+inf)"
                    },
                    {
                      "doc" : "HTTP 请求超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-http_get-request-S-request-request_timeout",
                      "text" : "request_timeout",
                      "type" : "Duration"
                    }
                  ],
                  "text" : "request"
                }
              ],
              "hash" : "V-authentication-S-http_get-request",
              "text" : "request",
              "type" : "Struct(request)"
            },
            {
              "doc" : "启用 SSL 连接。",
              "refs" : [
                {
                  "doc" : "Socket options for SSL clients.",
                  "hash" : "T-authentication-S-http_get-ssl-S-ssl_client_opts",
                  "fields" : [
                    {
                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash" : "V-authentication-S-http_get-ssl-S-ssl_client_opts-cacertfile",
                      "text" : "cacertfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "Deprecated since 5.1.4.",
                      "hash" : "V-authentication-S-http_get-ssl-S-ssl_client_opts-cacerts",
                      "text" : "cacerts",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash" : "V-authentication-S-http_get-ssl-S-ssl_client_opts-certfile",
                      "text" : "certfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "PEM 格式的私钥文件。",
                      "hash" : "V-authentication-S-http_get-ssl-S-ssl_client_opts-keyfile",
                      "text" : "keyfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "启用或禁用对等验证。",
                      "hash" : "V-authentication-S-http_get-ssl-S-ssl_client_opts-verify",
                      "text" : "verify",
                      "type" : "Enum(verify_peer,verify_none)",
                      "default" : "verify_none"
                    },
                    {
                      "doc" : "启用 TLS 会话重用。",
                      "hash" : "V-authentication-S-http_get-ssl-S-ssl_client_opts-reuse_sessions",
                      "text" : "reuse_sessions",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash" : "V-authentication-S-http_get-ssl-S-ssl_client_opts-depth",
                      "text" : "depth",
                      "type" : "Integer(0..+inf)",
                      "default" : "10"
                    },
                    {
                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash" : "V-authentication-S-http_get-ssl-S-ssl_client_opts-password",
                      "text" : "password",
                      "type" : "String"
                    },
                    {
                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash" : "V-authentication-S-http_get-ssl-S-ssl_client_opts-versions",
                      "text" : "versions",
                      "type" : "Array(String)",
                      "default" : "[tlsv1.3, tlsv1.2]"
                    },
                    {
                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash" : "V-authentication-S-http_get-ssl-S-ssl_client_opts-ciphers",
                      "text" : "ciphers",
                      "type" : "Array(String)",
                      "default" : "[]"
                    },
                    {
                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash" : "V-authentication-S-http_get-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text" : "secure_renegotiate",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                      "hash" : "V-authentication-S-http_get-ssl-S-ssl_client_opts-log_level",
                      "text" : "log_level",
                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                      "default" : "notice"
                    },
                    {
                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-http_get-ssl-S-ssl_client_opts-hibernate_after",
                      "text" : "hibernate_after",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "启用 TLS。",
                      "hash" : "V-authentication-S-http_get-ssl-S-ssl_client_opts-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash" : "V-authentication-S-http_get-ssl-S-ssl_client_opts-server_name_indication",
                      "text" : "server_name_indication",
                      "type" : "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "text" : "ssl_client_opts"
                }
              ],
              "hash" : "V-authentication-S-http_get-ssl",
              "text" : "ssl",
              "type" : "Struct(ssl_client_opts)",
              "default" : "{enable = false}"
            },
            {
              "doc" : "连接池大小。",
              "hash" : "V-authentication-S-http_get-pool_size",
              "text" : "pool_size",
              "type" : "Integer(1..+inf)",
              "default" : "8"
            },
            {
              "doc" : "Deprecated since 5.0.4.",
              "hash" : "V-authentication-S-http_get-max_retries",
              "text" : "max_retries",
              "type" : "Integer(0..+inf)"
            },
            {
              "doc" : "连接到 HTTP 服务器的超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-authentication-S-http_get-connect_timeout",
              "text" : "connect_timeout",
              "type" : "Duration",
              "default" : "15s"
            },
            {
              "doc" : "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
              "hash" : "V-authentication-S-http_get-enable_pipelining",
              "text" : "enable_pipelining",
              "type" : "Integer(1..+inf)",
              "default" : "100"
            },
            {
              "doc" : "Deprecated since 5.0.4.<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-authentication-S-http_get-retry_interval",
              "text" : "retry_interval",
              "type" : "Duration"
            }
          ],
          "text" : "http_get"
        },
        {
          "doc" : "使用 HTTP Server 作为认证服务的认证器的配置项 (使用 POST 请求)。",
          "hash" : "T-authentication-S-http_post",
          "fields" : [
            {
              "doc" : "HTTP 请求方法。",
              "hash" : "V-authentication-S-http_post-method",
              "text" : "method",
              "type" : "String(\"post\")"
            },
            {
              "doc" : "HTTP Headers 列表",
              "hash" : "V-authentication-S-http_post-headers",
              "text" : "headers",
              "type" : "Map",
              "default" : "{accept = \"application/json\", cache-control = no-cache, connection = keep-alive, content-type = \"application/json\", keep-alive = \"timeout=30, max=1000\"}"
            },
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-http_post-mechanism",
              "text" : "mechanism",
              "type" : "String(\"password_based\")"
            },
            {
              "doc" : "后端类型。",
              "hash" : "V-authentication-S-http_post-backend",
              "text" : "backend",
              "type" : "String(\"http\")"
            },
            {
              "doc" : "认证 HTTP 服务器地址。",
              "hash" : "V-authentication-S-http_post-url",
              "text" : "url",
              "type" : "String"
            },
            {
              "doc" : "HTTP 请求体。",
              "hash" : "V-authentication-S-http_post-body",
              "text" : "body",
              "type" : "Map"
            },
            {
              "doc" : "HTTP 请求超时时长。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-authentication-S-http_post-request_timeout",
              "text" : "request_timeout",
              "type" : "Duration",
              "default" : "5s"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-http_post-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "配置 HTTP 请求参数。",
              "refs" : [
                {
                  "doc" : "",
                  "hash" : "T-authentication-S-http_post-request-S-request",
                  "fields" : [
                    {
                      "doc" : "HTTP 请求方法。",
                      "hash" : "V-authentication-S-http_post-request-S-request-method",
                      "text" : "method",
                      "type" : "String"
                    },
                    {
                      "doc" : "URL 路径。",
                      "hash" : "V-authentication-S-http_post-request-S-request-path",
                      "text" : "path",
                      "type" : "String"
                    },
                    {
                      "doc" : "HTTP 请求的主体。",
                      "hash" : "V-authentication-S-http_post-request-S-request-body",
                      "text" : "body",
                      "type" : "String"
                    },
                    {
                      "doc" : "HTTP 请求头列表。",
                      "hash" : "V-authentication-S-http_post-request-S-request-headers",
                      "text" : "headers",
                      "type" : "Map"
                    },
                    {
                      "doc" : "如果发送请求时出错，最大重试次数。",
                      "hash" : "V-authentication-S-http_post-request-S-request-max_retries",
                      "text" : "max_retries",
                      "type" : "Integer(0..+inf)"
                    },
                    {
                      "doc" : "HTTP 请求超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-http_post-request-S-request-request_timeout",
                      "text" : "request_timeout",
                      "type" : "Duration"
                    }
                  ],
                  "text" : "request"
                }
              ],
              "hash" : "V-authentication-S-http_post-request",
              "text" : "request",
              "type" : "Struct(request)"
            },
            {
              "doc" : "启用 SSL 连接。",
              "refs" : [
                {
                  "doc" : "Socket options for SSL clients.",
                  "hash" : "T-authentication-S-http_post-ssl-S-ssl_client_opts",
                  "fields" : [
                    {
                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash" : "V-authentication-S-http_post-ssl-S-ssl_client_opts-cacertfile",
                      "text" : "cacertfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "Deprecated since 5.1.4.",
                      "hash" : "V-authentication-S-http_post-ssl-S-ssl_client_opts-cacerts",
                      "text" : "cacerts",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash" : "V-authentication-S-http_post-ssl-S-ssl_client_opts-certfile",
                      "text" : "certfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "PEM 格式的私钥文件。",
                      "hash" : "V-authentication-S-http_post-ssl-S-ssl_client_opts-keyfile",
                      "text" : "keyfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "启用或禁用对等验证。",
                      "hash" : "V-authentication-S-http_post-ssl-S-ssl_client_opts-verify",
                      "text" : "verify",
                      "type" : "Enum(verify_peer,verify_none)",
                      "default" : "verify_none"
                    },
                    {
                      "doc" : "启用 TLS 会话重用。",
                      "hash" : "V-authentication-S-http_post-ssl-S-ssl_client_opts-reuse_sessions",
                      "text" : "reuse_sessions",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash" : "V-authentication-S-http_post-ssl-S-ssl_client_opts-depth",
                      "text" : "depth",
                      "type" : "Integer(0..+inf)",
                      "default" : "10"
                    },
                    {
                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash" : "V-authentication-S-http_post-ssl-S-ssl_client_opts-password",
                      "text" : "password",
                      "type" : "String"
                    },
                    {
                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash" : "V-authentication-S-http_post-ssl-S-ssl_client_opts-versions",
                      "text" : "versions",
                      "type" : "Array(String)",
                      "default" : "[tlsv1.3, tlsv1.2]"
                    },
                    {
                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash" : "V-authentication-S-http_post-ssl-S-ssl_client_opts-ciphers",
                      "text" : "ciphers",
                      "type" : "Array(String)",
                      "default" : "[]"
                    },
                    {
                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash" : "V-authentication-S-http_post-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text" : "secure_renegotiate",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                      "hash" : "V-authentication-S-http_post-ssl-S-ssl_client_opts-log_level",
                      "text" : "log_level",
                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                      "default" : "notice"
                    },
                    {
                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-http_post-ssl-S-ssl_client_opts-hibernate_after",
                      "text" : "hibernate_after",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "启用 TLS。",
                      "hash" : "V-authentication-S-http_post-ssl-S-ssl_client_opts-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash" : "V-authentication-S-http_post-ssl-S-ssl_client_opts-server_name_indication",
                      "text" : "server_name_indication",
                      "type" : "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "text" : "ssl_client_opts"
                }
              ],
              "hash" : "V-authentication-S-http_post-ssl",
              "text" : "ssl",
              "type" : "Struct(ssl_client_opts)",
              "default" : "{enable = false}"
            },
            {
              "doc" : "连接池大小。",
              "hash" : "V-authentication-S-http_post-pool_size",
              "text" : "pool_size",
              "type" : "Integer(1..+inf)",
              "default" : "8"
            },
            {
              "doc" : "Deprecated since 5.0.4.",
              "hash" : "V-authentication-S-http_post-max_retries",
              "text" : "max_retries",
              "type" : "Integer(0..+inf)"
            },
            {
              "doc" : "连接到 HTTP 服务器的超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-authentication-S-http_post-connect_timeout",
              "text" : "connect_timeout",
              "type" : "Duration",
              "default" : "15s"
            },
            {
              "doc" : "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
              "hash" : "V-authentication-S-http_post-enable_pipelining",
              "text" : "enable_pipelining",
              "type" : "Integer(1..+inf)",
              "default" : "100"
            },
            {
              "doc" : "Deprecated since 5.0.4.<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-authentication-S-http_post-retry_interval",
              "text" : "retry_interval",
              "type" : "Duration"
            }
          ],
          "text" : "http_post"
        },
        {
          "doc" : "用于认证的 JWT 使用 HMAC 算法签发时的配置。",
          "hash" : "T-authentication-S-jwt_hmac",
          "fields" : [
            {
              "doc" : "JWT 签名算法，支持 HMAC (配置为 <code>hmac-based</code>）和 RSA、ECDSA (配置为 <code>public-key</code>)。",
              "hash" : "V-authentication-S-jwt_hmac-algorithm",
              "text" : "algorithm",
              "type" : "Enum(hmac-based)"
            },
            {
              "doc" : "使用 HMAC 算法时用于验证 JWT 的密钥",
              "hash" : "V-authentication-S-jwt_hmac-secret",
              "text" : "secret",
              "type" : "String"
            },
            {
              "doc" : "密钥是否为 base64 编码。",
              "hash" : "V-authentication-S-jwt_hmac-secret_base64_encoded",
              "text" : "secret_base64_encoded",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-jwt_hmac-mechanism",
              "text" : "mechanism",
              "type" : "String(\"jwt\")"
            },
            {
              "doc" : "用于获取 ACL 规则的 JWT 声明名称。",
              "hash" : "V-authentication-S-jwt_hmac-acl_claim_name",
              "text" : "acl_claim_name",
              "type" : "String",
              "default" : "acl"
            },
            {
              "doc" : "需要验证的自定义声明列表，是一个由名称/值对组成的列表。指定一个键(Key)来查找 JWT 中对应的声明(Claim)，并提供一个预期值(Expected Value)来与声明的实际值进行比较，以确保只有满足特定条件的 JWT 才能被接受和使用。\n例如要求 JWT 中的特定声明(如 clientid)的值必须与当前连接的客户端 ID 相匹配。\n预期值可以使用以下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端 ID\n身份认证将确认 JWT 中的声明值（从密码字段中获取）与 <code>verify_claims</code> 中要求的内容是否匹配。",
              "hash" : "V-authentication-S-jwt_hmac-verify_claims",
              "text" : "verify_claims",
              "type" : "Map",
              "default" : "[]"
            },
            {
              "doc" : "指定客户端连接请求中 JWT 的位置。",
              "hash" : "V-authentication-S-jwt_hmac-from",
              "text" : "from",
              "type" : "Enum(username,password)",
              "default" : "password"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-jwt_hmac-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            }
          ],
          "text" : "jwt_hmac"
        },
        {
          "doc" : "用于认证的 JWT 使用 RSA 或 ECDSA 算法签发时的配置。",
          "hash" : "T-authentication-S-jwt_public_key",
          "fields" : [
            {
              "doc" : "JWT 签名算法，支持 HMAC (配置为 <code>hmac-based</code>）和 RSA、ECDSA (配置为 <code>public-key</code>)。",
              "hash" : "V-authentication-S-jwt_public_key-algorithm",
              "text" : "algorithm",
              "type" : "Enum(public-key)"
            },
            {
              "doc" : "用于验证 JWT 的公钥。",
              "hash" : "V-authentication-S-jwt_public_key-public_key",
              "text" : "public_key",
              "type" : "String"
            },
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-jwt_public_key-mechanism",
              "text" : "mechanism",
              "type" : "String(\"jwt\")"
            },
            {
              "doc" : "用于获取 ACL 规则的 JWT 声明名称。",
              "hash" : "V-authentication-S-jwt_public_key-acl_claim_name",
              "text" : "acl_claim_name",
              "type" : "String",
              "default" : "acl"
            },
            {
              "doc" : "需要验证的自定义声明列表，是一个由名称/值对组成的列表。指定一个键(Key)来查找 JWT 中对应的声明(Claim)，并提供一个预期值(Expected Value)来与声明的实际值进行比较，以确保只有满足特定条件的 JWT 才能被接受和使用。\n例如要求 JWT 中的特定声明(如 clientid)的值必须与当前连接的客户端 ID 相匹配。\n预期值可以使用以下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端 ID\n身份认证将确认 JWT 中的声明值（从密码字段中获取）与 <code>verify_claims</code> 中要求的内容是否匹配。",
              "hash" : "V-authentication-S-jwt_public_key-verify_claims",
              "text" : "verify_claims",
              "type" : "Map",
              "default" : "[]"
            },
            {
              "doc" : "指定客户端连接请求中 JWT 的位置。",
              "hash" : "V-authentication-S-jwt_public_key-from",
              "text" : "from",
              "type" : "Enum(username,password)",
              "default" : "password"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-jwt_public_key-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            }
          ],
          "text" : "jwt_public_key"
        },
        {
          "doc" : "用于认证的 JWTs 需要从 JWKS 端点获取时的配置。",
          "hash" : "T-authentication-S-jwt_jwks",
          "fields" : [
            {
              "doc" : "是否使用 JWKS。",
              "hash" : "V-authentication-S-jwt_jwks-use_jwks",
              "text" : "use_jwks",
              "type" : "Enum(true)"
            },
            {
              "doc" : "JWKS 端点， 它是一个以 JWKS 格式返回服务端的公钥集的只读端点。",
              "hash" : "V-authentication-S-jwt_jwks-endpoint",
              "text" : "endpoint",
              "type" : "String"
            },
            {
              "doc" : "桥接远端服务时使用的连接池大小。",
              "hash" : "V-authentication-S-jwt_jwks-pool_size",
              "text" : "pool_size",
              "type" : "Integer(1..+inf)",
              "default" : "8"
            },
            {
              "doc" : "JWKS 刷新间隔。",
              "hash" : "V-authentication-S-jwt_jwks-refresh_interval",
              "text" : "refresh_interval",
              "type" : "Integer",
              "default" : "300"
            },
            {
              "doc" : "SSL 选项。",
              "refs" : [
                {
                  "doc" : "Socket options for SSL clients.",
                  "hash" : "T-authentication-S-jwt_jwks-ssl-S-ssl_client_opts",
                  "fields" : [
                    {
                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash" : "V-authentication-S-jwt_jwks-ssl-S-ssl_client_opts-cacertfile",
                      "text" : "cacertfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "Deprecated since 5.1.4.",
                      "hash" : "V-authentication-S-jwt_jwks-ssl-S-ssl_client_opts-cacerts",
                      "text" : "cacerts",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash" : "V-authentication-S-jwt_jwks-ssl-S-ssl_client_opts-certfile",
                      "text" : "certfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "PEM 格式的私钥文件。",
                      "hash" : "V-authentication-S-jwt_jwks-ssl-S-ssl_client_opts-keyfile",
                      "text" : "keyfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "启用或禁用对等验证。",
                      "hash" : "V-authentication-S-jwt_jwks-ssl-S-ssl_client_opts-verify",
                      "text" : "verify",
                      "type" : "Enum(verify_peer,verify_none)",
                      "default" : "verify_none"
                    },
                    {
                      "doc" : "启用 TLS 会话重用。",
                      "hash" : "V-authentication-S-jwt_jwks-ssl-S-ssl_client_opts-reuse_sessions",
                      "text" : "reuse_sessions",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash" : "V-authentication-S-jwt_jwks-ssl-S-ssl_client_opts-depth",
                      "text" : "depth",
                      "type" : "Integer(0..+inf)",
                      "default" : "10"
                    },
                    {
                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash" : "V-authentication-S-jwt_jwks-ssl-S-ssl_client_opts-password",
                      "text" : "password",
                      "type" : "String"
                    },
                    {
                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash" : "V-authentication-S-jwt_jwks-ssl-S-ssl_client_opts-versions",
                      "text" : "versions",
                      "type" : "Array(String)",
                      "default" : "[tlsv1.3, tlsv1.2]"
                    },
                    {
                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash" : "V-authentication-S-jwt_jwks-ssl-S-ssl_client_opts-ciphers",
                      "text" : "ciphers",
                      "type" : "Array(String)",
                      "default" : "[]"
                    },
                    {
                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash" : "V-authentication-S-jwt_jwks-ssl-S-ssl_client_opts-secure_renegotiate",
                      "text" : "secure_renegotiate",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                      "hash" : "V-authentication-S-jwt_jwks-ssl-S-ssl_client_opts-log_level",
                      "text" : "log_level",
                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                      "default" : "notice"
                    },
                    {
                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-jwt_jwks-ssl-S-ssl_client_opts-hibernate_after",
                      "text" : "hibernate_after",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "启用 TLS。",
                      "hash" : "V-authentication-S-jwt_jwks-ssl-S-ssl_client_opts-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash" : "V-authentication-S-jwt_jwks-ssl-S-ssl_client_opts-server_name_indication",
                      "text" : "server_name_indication",
                      "type" : "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "text" : "ssl_client_opts"
                }
              ],
              "hash" : "V-authentication-S-jwt_jwks-ssl",
              "text" : "ssl",
              "type" : "Struct(ssl_client_opts)",
              "default" : "{enable = false}"
            },
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-jwt_jwks-mechanism",
              "text" : "mechanism",
              "type" : "String(\"jwt\")"
            },
            {
              "doc" : "用于获取 ACL 规则的 JWT 声明名称。",
              "hash" : "V-authentication-S-jwt_jwks-acl_claim_name",
              "text" : "acl_claim_name",
              "type" : "String",
              "default" : "acl"
            },
            {
              "doc" : "需要验证的自定义声明列表，是一个由名称/值对组成的列表。指定一个键(Key)来查找 JWT 中对应的声明(Claim)，并提供一个预期值(Expected Value)来与声明的实际值进行比较，以确保只有满足特定条件的 JWT 才能被接受和使用。\n例如要求 JWT 中的特定声明(如 clientid)的值必须与当前连接的客户端 ID 相匹配。\n预期值可以使用以下占位符：\n- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名\n- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端 ID\n身份认证将确认 JWT 中的声明值（从密码字段中获取）与 <code>verify_claims</code> 中要求的内容是否匹配。",
              "hash" : "V-authentication-S-jwt_jwks-verify_claims",
              "text" : "verify_claims",
              "type" : "Map",
              "default" : "[]"
            },
            {
              "doc" : "指定客户端连接请求中 JWT 的位置。",
              "hash" : "V-authentication-S-jwt_jwks-from",
              "text" : "from",
              "type" : "Enum(username,password)",
              "default" : "password"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-jwt_jwks-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            }
          ],
          "text" : "jwt_jwks"
        },
        {
          "doc" : "Settings for Salted Challenge Response Authentication Mechanism\n(SCRAM) authentication.",
          "hash" : "T-authentication-S-scram",
          "fields" : [
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-scram-mechanism",
              "text" : "mechanism",
              "type" : "String(\"scram\")"
            },
            {
              "doc" : "后端类型。",
              "hash" : "V-authentication-S-scram-backend",
              "text" : "backend",
              "type" : "String(\"built_in_database\")"
            },
            {
              "doc" : "Hashing algorithm.",
              "hash" : "V-authentication-S-scram-algorithm",
              "text" : "algorithm",
              "type" : "Enum(sha256,sha512)",
              "default" : "sha256"
            },
            {
              "doc" : "Iteration count.",
              "hash" : "V-authentication-S-scram-iteration_count",
              "text" : "iteration_count",
              "type" : "Integer(0..+inf)",
              "default" : "4096"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-scram-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            }
          ],
          "text" : "scram"
        },
        {
          "doc" : "使用 LDAP 作为认证数据源的认证器的配置项。",
          "hash" : "T-authentication-S-ldap",
          "fields" : [
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-ldap-mechanism",
              "text" : "mechanism",
              "type" : "String(\"password_based\")"
            },
            {
              "doc" : "后端类型。",
              "hash" : "V-authentication-S-ldap-backend",
              "text" : "backend",
              "type" : "String(\"ldap\")"
            },
            {
              "doc" : "LDAP 查询的超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-authentication-S-ldap-query_timeout",
              "text" : "query_timeout",
              "type" : "Duration",
              "default" : "5s"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-ldap-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "要连接的 IPv4 或 IPv6 地址或主机名。<br/>\n主机名条目的格式为：`主机[:端口]`。<br/>\n如果 `[:端口]` 未指定， 将使用 LDAP 默认端口 389。",
              "hash" : "V-authentication-S-ldap-server",
              "text" : "server",
              "type" : "String"
            },
            {
              "doc" : "桥接远端服务时使用的连接池大小。",
              "hash" : "V-authentication-S-ldap-pool_size",
              "text" : "pool_size",
              "type" : "Integer(1..+inf)",
              "default" : "8"
            },
            {
              "doc" : "内部数据库的用户名。",
              "hash" : "V-authentication-S-ldap-username",
              "text" : "username",
              "type" : "String"
            },
            {
              "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
              "hash" : "V-authentication-S-ldap-password",
              "text" : "password",
              "type" : "Secret"
            },
            {
              "doc" : "与基本对象条目（或根）相关的名称。\n搜索用户的起点。",
              "hash" : "V-authentication-S-ldap-base_dn",
              "text" : "base_dn",
              "type" : "String"
            },
            {
              "doc" : "定义哪些条件必须被依次满足的过滤器\n用于搜索匹配一条给定的条目.<br>\n筛选器的语法遵循 RFC 4515，并且还支持占位符。",
              "hash" : "V-authentication-S-ldap-filter",
              "text" : "filter",
              "type" : "String",
              "default" : "\"(objectClass=mqttUser)\""
            },
            {
              "doc" : "设置每个单独请求所使用的最大时间（以毫秒为单位）。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-authentication-S-ldap-request_timeout",
              "text" : "request_timeout",
              "type" : "Duration",
              "default" : "10s"
            },
            {
              "doc" : "启用 SSL 连接。",
              "refs" : [
                {
                  "doc" : "启用 SSL 连接。",
                  "hash" : "T-authentication-S-ldap-ssl-S-ssl",
                  "fields" : [
                    {
                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash" : "V-authentication-S-ldap-ssl-S-ssl-cacertfile",
                      "text" : "cacertfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "Deprecated since 5.1.4.",
                      "hash" : "V-authentication-S-ldap-ssl-S-ssl-cacerts",
                      "text" : "cacerts",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash" : "V-authentication-S-ldap-ssl-S-ssl-certfile",
                      "text" : "certfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "PEM 格式的私钥文件。",
                      "hash" : "V-authentication-S-ldap-ssl-S-ssl-keyfile",
                      "text" : "keyfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "启用或禁用对等验证。",
                      "hash" : "V-authentication-S-ldap-ssl-S-ssl-verify",
                      "text" : "verify",
                      "type" : "Enum(verify_peer,verify_none)",
                      "default" : "verify_none"
                    },
                    {
                      "doc" : "启用 TLS 会话重用。",
                      "hash" : "V-authentication-S-ldap-ssl-S-ssl-reuse_sessions",
                      "text" : "reuse_sessions",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash" : "V-authentication-S-ldap-ssl-S-ssl-depth",
                      "text" : "depth",
                      "type" : "Integer(0..+inf)",
                      "default" : "10"
                    },
                    {
                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash" : "V-authentication-S-ldap-ssl-S-ssl-password",
                      "text" : "password",
                      "type" : "String"
                    },
                    {
                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash" : "V-authentication-S-ldap-ssl-S-ssl-versions",
                      "text" : "versions",
                      "type" : "Array(String)",
                      "default" : "[tlsv1.3, tlsv1.2]"
                    },
                    {
                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash" : "V-authentication-S-ldap-ssl-S-ssl-ciphers",
                      "text" : "ciphers",
                      "type" : "Array(String)",
                      "default" : "[]"
                    },
                    {
                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash" : "V-authentication-S-ldap-ssl-S-ssl-secure_renegotiate",
                      "text" : "secure_renegotiate",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                      "hash" : "V-authentication-S-ldap-ssl-S-ssl-log_level",
                      "text" : "log_level",
                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                      "default" : "notice"
                    },
                    {
                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-ldap-ssl-S-ssl-hibernate_after",
                      "text" : "hibernate_after",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "启用 TLS。",
                      "hash" : "V-authentication-S-ldap-ssl-S-ssl-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash" : "V-authentication-S-ldap-ssl-S-ssl-server_name_indication",
                      "text" : "server_name_indication",
                      "type" : "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "text" : "ssl"
                }
              ],
              "hash" : "V-authentication-S-ldap-ssl",
              "text" : "ssl",
              "type" : "Struct(ssl)",
              "default" : "{enable = false}"
            },
            {
              "doc" : "认证方式。",
              "refs" : [
                {
                  "doc" : "通过将本地密码与经过由`密码属性`指定的算法加密的密码进行比对来进行认证。",
                  "hash" : "T-authentication-S-ldap-method-S-hash_method",
                  "fields" : [
                    {
                      "doc" : "认证方式类型。",
                      "hash" : "V-authentication-S-ldap-method-S-hash_method-type",
                      "text" : "type",
                      "type" : "Enum(hash)",
                      "default" : "hash"
                    },
                    {
                      "doc" : "指示哪个属性用于表示用户密码。",
                      "hash" : "V-authentication-S-ldap-method-S-hash_method-password_attribute",
                      "text" : "password_attribute",
                      "type" : "String",
                      "default" : "userPassword"
                    },
                    {
                      "doc" : "指示哪个属性用于表示用户是否为超级用户。",
                      "hash" : "V-authentication-S-ldap-method-S-hash_method-is_superuser_attribute",
                      "text" : "is_superuser_attribute",
                      "type" : "String",
                      "default" : "isSuperuser"
                    }
                  ],
                  "text" : "hash_method"
                },
                {
                  "doc" : "通过 LDAP 绑定操作进行认证。",
                  "hash" : "T-authentication-S-ldap-method-S-bind_method",
                  "fields" : [
                    {
                      "doc" : "认证方式类型。",
                      "hash" : "V-authentication-S-ldap-method-S-bind_method-type",
                      "text" : "type",
                      "type" : "Enum(bind)",
                      "default" : "bind"
                    },
                    {
                      "doc" : "绑定密码的模版",
                      "hash" : "V-authentication-S-ldap-method-S-bind_method-bind_password",
                      "text" : "bind_password",
                      "type" : "String",
                      "default" : "\"${password}\""
                    }
                  ],
                  "text" : "bind_method"
                }
              ],
              "hash" : "V-authentication-S-ldap-method",
              "text" : "method",
              "type" : "OneOf(Struct(hash_method),Struct(bind_method))"
            }
          ],
          "text" : "ldap"
        },
        {
          "doc" : "这是一种已弃用的形式，应避免使用。",
          "hash" : "T-authentication-S-ldap_deprecated",
          "fields" : [
            {
              "doc" : "认证方式。",
              "hash" : "V-authentication-S-ldap_deprecated-mechanism",
              "text" : "mechanism",
              "type" : "String(\"password_based\")"
            },
            {
              "doc" : "后端类型。",
              "hash" : "V-authentication-S-ldap_deprecated-backend",
              "text" : "backend",
              "type" : "String(\"ldap\")"
            },
            {
              "doc" : "LDAP 查询的超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-authentication-S-ldap_deprecated-query_timeout",
              "text" : "query_timeout",
              "type" : "Duration",
              "default" : "5s"
            },
            {
              "doc" : "设为 <code>true</code> 或 <code>false</code> 以禁用此认证数据源。",
              "hash" : "V-authentication-S-ldap_deprecated-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "要连接的 IPv4 或 IPv6 地址或主机名。<br/>\n主机名条目的格式为：`主机[:端口]`。<br/>\n如果 `[:端口]` 未指定， 将使用 LDAP 默认端口 389。",
              "hash" : "V-authentication-S-ldap_deprecated-server",
              "text" : "server",
              "type" : "String"
            },
            {
              "doc" : "桥接远端服务时使用的连接池大小。",
              "hash" : "V-authentication-S-ldap_deprecated-pool_size",
              "text" : "pool_size",
              "type" : "Integer(1..+inf)",
              "default" : "8"
            },
            {
              "doc" : "内部数据库的用户名。",
              "hash" : "V-authentication-S-ldap_deprecated-username",
              "text" : "username",
              "type" : "String"
            },
            {
              "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
              "hash" : "V-authentication-S-ldap_deprecated-password",
              "text" : "password",
              "type" : "Secret"
            },
            {
              "doc" : "与基本对象条目（或根）相关的名称。\n搜索用户的起点。",
              "hash" : "V-authentication-S-ldap_deprecated-base_dn",
              "text" : "base_dn",
              "type" : "String"
            },
            {
              "doc" : "定义哪些条件必须被依次满足的过滤器\n用于搜索匹配一条给定的条目.<br>\n筛选器的语法遵循 RFC 4515，并且还支持占位符。",
              "hash" : "V-authentication-S-ldap_deprecated-filter",
              "text" : "filter",
              "type" : "String",
              "default" : "\"(objectClass=mqttUser)\""
            },
            {
              "doc" : "设置每个单独请求所使用的最大时间（以毫秒为单位）。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-authentication-S-ldap_deprecated-request_timeout",
              "text" : "request_timeout",
              "type" : "Duration",
              "default" : "10s"
            },
            {
              "doc" : "启用 SSL 连接。",
              "refs" : [
                {
                  "doc" : "启用 SSL 连接。",
                  "hash" : "T-authentication-S-ldap_deprecated-ssl-S-ssl",
                  "fields" : [
                    {
                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                      "hash" : "V-authentication-S-ldap_deprecated-ssl-S-ssl-cacertfile",
                      "text" : "cacertfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "Deprecated since 5.1.4.",
                      "hash" : "V-authentication-S-ldap_deprecated-ssl-S-ssl-cacerts",
                      "text" : "cacerts",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                      "hash" : "V-authentication-S-ldap_deprecated-ssl-S-ssl-certfile",
                      "text" : "certfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "PEM 格式的私钥文件。",
                      "hash" : "V-authentication-S-ldap_deprecated-ssl-S-ssl-keyfile",
                      "text" : "keyfile",
                      "type" : "String"
                    },
                    {
                      "doc" : "启用或禁用对等验证。",
                      "hash" : "V-authentication-S-ldap_deprecated-ssl-S-ssl-verify",
                      "text" : "verify",
                      "type" : "Enum(verify_peer,verify_none)",
                      "default" : "verify_none"
                    },
                    {
                      "doc" : "启用 TLS 会话重用。",
                      "hash" : "V-authentication-S-ldap_deprecated-ssl-S-ssl-reuse_sessions",
                      "text" : "reuse_sessions",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                      "hash" : "V-authentication-S-ldap_deprecated-ssl-S-ssl-depth",
                      "text" : "depth",
                      "type" : "Integer(0..+inf)",
                      "default" : "10"
                    },
                    {
                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                      "hash" : "V-authentication-S-ldap_deprecated-ssl-S-ssl-password",
                      "text" : "password",
                      "type" : "String"
                    },
                    {
                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                      "hash" : "V-authentication-S-ldap_deprecated-ssl-S-ssl-versions",
                      "text" : "versions",
                      "type" : "Array(String)",
                      "default" : "[tlsv1.3, tlsv1.2]"
                    },
                    {
                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                      "hash" : "V-authentication-S-ldap_deprecated-ssl-S-ssl-ciphers",
                      "text" : "ciphers",
                      "type" : "Array(String)",
                      "default" : "[]"
                    },
                    {
                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                      "hash" : "V-authentication-S-ldap_deprecated-ssl-S-ssl-secure_renegotiate",
                      "text" : "secure_renegotiate",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                      "hash" : "V-authentication-S-ldap_deprecated-ssl-S-ssl-log_level",
                      "text" : "log_level",
                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                      "default" : "notice"
                    },
                    {
                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authentication-S-ldap_deprecated-ssl-S-ssl-hibernate_after",
                      "text" : "hibernate_after",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "启用 TLS。",
                      "hash" : "V-authentication-S-ldap_deprecated-ssl-S-ssl-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                      "hash" : "V-authentication-S-ldap_deprecated-ssl-S-ssl-server_name_indication",
                      "text" : "server_name_indication",
                      "type" : "OneOf(String(\"disable\"),String)"
                    }
                  ],
                  "text" : "ssl"
                }
              ],
              "hash" : "V-authentication-S-ldap_deprecated-ssl",
              "text" : "ssl",
              "type" : "Struct(ssl)",
              "default" : "{enable = false}"
            },
            {
              "doc" : "指示哪个属性用于表示用户密码。",
              "hash" : "V-authentication-S-ldap_deprecated-password_attribute",
              "text" : "password_attribute",
              "type" : "String",
              "default" : "userPassword"
            },
            {
              "doc" : "指示哪个属性用于表示用户是否为超级用户。",
              "hash" : "V-authentication-S-ldap_deprecated-is_superuser_attribute",
              "text" : "is_superuser_attribute",
              "type" : "String",
              "default" : "isSuperuser"
            }
          ],
          "text" : "ldap_deprecated"
        }
      ],
      "hash" : "V-authentication",
      "text" : "authentication",
      "type" : "Array(OneOf(Struct(builtin_db),Struct(mysql),Struct(postgresql),Struct(mongo_single),Struct(mongo_rs),Struct(mongo_sharded),Struct(redis_single),Struct(redis_cluster),Struct(redis_sentinel),Struct(http_get),Struct(http_post),Struct(jwt_hmac),Struct(jwt_public_key),Struct(jwt_jwks),Struct(scram),Struct(ldap),Struct(ldap_deprecated)))",
      "default" : "[]"
    },
    {
      "doc" : "授权（ACL）。EMQX 支持完整的客户端访问控制（ACL）。",
      "refs" : [
        {
          "doc" : "授权相关",
          "hash" : "T-authorization-S-authorization",
          "fields" : [
            {
              "doc" : "如果用户或客户端不匹配 ACL 规则，或者从可配置授权源(比如内置数据库、HTTP API 或 PostgreSQL 等。)内未找\n到此类用户或客户端时，模式的认访问控制操作。\n在“授权”中查找更多详细信息。",
              "hash" : "V-authorization-S-authorization-no_match",
              "text" : "no_match",
              "type" : "Enum(allow,deny)",
              "default" : "allow"
            },
            {
              "doc" : "授权检查拒绝操作时的操作。",
              "hash" : "V-authorization-S-authorization-deny_action",
              "text" : "deny_action",
              "type" : "Enum(ignore,disconnect)",
              "default" : "ignore"
            },
            {
              "refs" : [
                {
                  "doc" : "Settings for the authorization cache.",
                  "hash" : "T-authorization-S-authorization-cache-S-authz_cache",
                  "fields" : [
                    {
                      "doc" : "启用或禁用授权缓存。",
                      "hash" : "V-authorization-S-authorization-cache-S-authz_cache-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "缓存项的最大数量。",
                      "hash" : "V-authorization-S-authorization-cache-S-authz_cache-max_size",
                      "text" : "max_size",
                      "type" : "Integer(1..1048576)",
                      "default" : "32"
                    },
                    {
                      "doc" : "缓存数据的生存时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authorization-S-authorization-cache-S-authz_cache-ttl",
                      "text" : "ttl",
                      "type" : "Duration",
                      "default" : "1m"
                    },
                    {
                      "doc" : "排除主题列表，列表内的主题将不会生成授权缓存。",
                      "hash" : "V-authorization-S-authorization-cache-S-authz_cache-excludes",
                      "text" : "excludes",
                      "type" : "Array(String)",
                      "default" : "[]"
                    }
                  ],
                  "text" : "authz_cache"
                }
              ],
              "hash" : "V-authorization-S-authorization-cache",
              "text" : "cache",
              "type" : "Struct(authz_cache)"
            },
            {
              "doc" : "<br/>\n授权（ACL）数据提供者的数组。\n它被设计为一个数组，而不是哈希映射，因此可以\n将源按顺序排列形成访问控制链。<br/>\n\n在授权 '发布' 或 '订阅' 操作时，配置的\n源会按顺序检查。在检查 ACL 源时，\n如果未找到客户端（通过用户名或客户端 ID 标识），\n则继续检查下一个源。一旦返回 '允许' 或 '拒绝' 决定，\n立即停止检查。<br/>\n\n如果在任何源中都未找到客户端，\n则应用 'authorization.no_match' 中配置的默认操作。<br/>\n\n注意：\n源元素由它们的 '类型' 标识。\n不允许配置两个或更多相同类型的源。",
              "refs" : [
                {
                  "doc" : "使用 ACL 文件授权。",
                  "hash" : "T-authorization-S-authorization-sources-S-file",
                  "fields" : [
                    {
                      "doc" : "数据后端类型",
                      "hash" : "V-authorization-S-authorization-sources-S-file-type",
                      "text" : "type",
                      "type" : "String(\"file\")"
                    },
                    {
                      "doc" : "设置为 <code>true</code> 或 <code>false</code> 来禁用此 ACL 提供者",
                      "hash" : "V-authorization-S-authorization-sources-S-file-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "包含 ACL 规则的文件路径。\n如果该文件在启动 EMQX 节点之前已经配置好，\n只要 EMQX 有读取权限，它可以放置在任何位置。\n即，EMQX 将把它视为只读。\n\n如果规则集是从 EMQX Dashboard 或 HTTP API 创建或更新的，\n将创建一个新文件并放置在 EMQX 的 data_dir 中的 authz 子目录下，\n旧文件将不再使用。",
                      "hash" : "V-authorization-S-authorization-sources-S-file-path",
                      "text" : "path",
                      "type" : "String"
                    }
                  ],
                  "text" : "file"
                },
                {
                  "doc" : "使用内置数据库 (mnesia) 进行授权。",
                  "hash" : "T-authorization-S-authorization-sources-S-builtin_db",
                  "fields" : [
                    {
                      "doc" : "数据后端类型",
                      "hash" : "V-authorization-S-authorization-sources-S-builtin_db-type",
                      "text" : "type",
                      "type" : "String(\"built_in_database\")"
                    },
                    {
                      "doc" : "设置为 <code>true</code> 或 <code>false</code> 来禁用此 ACL 提供者",
                      "hash" : "V-authorization-S-authorization-sources-S-builtin_db-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    }
                  ],
                  "text" : "builtin_db"
                },
                {
                  "doc" : "使用外部 HTTP 服务器授权(GET 请求)。",
                  "hash" : "T-authorization-S-authorization-sources-S-http_get",
                  "fields" : [
                    {
                      "doc" : "数据后端类型",
                      "hash" : "V-authorization-S-authorization-sources-S-http_get-type",
                      "text" : "type",
                      "type" : "String(\"http\")"
                    },
                    {
                      "doc" : "设置为 <code>true</code> 或 <code>false</code> 来禁用此 ACL 提供者",
                      "hash" : "V-authorization-S-authorization-sources-S-http_get-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "认证服务器地址",
                      "hash" : "V-authorization-S-authorization-sources-S-http_get-url",
                      "text" : "url",
                      "type" : "String"
                    },
                    {
                      "doc" : "HTTP 请求超时。",
                      "hash" : "V-authorization-S-authorization-sources-S-http_get-request_timeout",
                      "text" : "request_timeout",
                      "type" : "String",
                      "default" : "30s"
                    },
                    {
                      "doc" : "HTTP 请求体",
                      "hash" : "V-authorization-S-authorization-sources-S-http_get-body",
                      "text" : "body",
                      "type" : "Map($name->String)"
                    },
                    {
                      "doc" : "连接到 HTTP 服务器的超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authorization-S-authorization-sources-S-http_get-connect_timeout",
                      "text" : "connect_timeout",
                      "type" : "Duration",
                      "default" : "15s"
                    },
                    {
                      "doc" : "Deprecated since 5.0.4.",
                      "hash" : "V-authorization-S-authorization-sources-S-http_get-max_retries",
                      "text" : "max_retries",
                      "type" : "Integer(0..+inf)"
                    },
                    {
                      "doc" : "Deprecated since 5.0.4.<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authorization-S-authorization-sources-S-http_get-retry_interval",
                      "text" : "retry_interval",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "连接池大小。",
                      "hash" : "V-authorization-S-authorization-sources-S-http_get-pool_size",
                      "text" : "pool_size",
                      "type" : "Integer(1..+inf)",
                      "default" : "8"
                    },
                    {
                      "doc" : "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
                      "hash" : "V-authorization-S-authorization-sources-S-http_get-enable_pipelining",
                      "text" : "enable_pipelining",
                      "type" : "Integer(1..+inf)",
                      "default" : "100"
                    },
                    {
                      "doc" : "配置 HTTP 请求参数。",
                      "refs" : [
                        {
                          "doc" : "",
                          "hash" : "T-authorization-S-authorization-sources-S-http_get-request-S-request",
                          "fields" : [
                            {
                              "doc" : "HTTP 请求方法。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-request-S-request-method",
                              "text" : "method",
                              "type" : "String"
                            },
                            {
                              "doc" : "URL 路径。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-request-S-request-path",
                              "text" : "path",
                              "type" : "String"
                            },
                            {
                              "doc" : "HTTP 请求的主体。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-request-S-request-body",
                              "text" : "body",
                              "type" : "String"
                            },
                            {
                              "doc" : "HTTP 请求头列表。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-request-S-request-headers",
                              "text" : "headers",
                              "type" : "Map"
                            },
                            {
                              "doc" : "如果发送请求时出错，最大重试次数。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-request-S-request-max_retries",
                              "text" : "max_retries",
                              "type" : "Integer(0..+inf)"
                            },
                            {
                              "doc" : "HTTP 请求超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-request-S-request-request_timeout",
                              "text" : "request_timeout",
                              "type" : "Duration"
                            }
                          ],
                          "text" : "request"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-http_get-request",
                      "text" : "request",
                      "type" : "Struct(request)"
                    },
                    {
                      "doc" : "启用 SSL 连接。",
                      "refs" : [
                        {
                          "doc" : "Socket options for SSL clients.",
                          "hash" : "T-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl-S-ssl_client_opts-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl_client_opts"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-http_get-ssl",
                      "text" : "ssl",
                      "type" : "Struct(ssl_client_opts)",
                      "default" : "{enable = false}"
                    },
                    {
                      "doc" : "HTTP 请求方法",
                      "hash" : "V-authorization-S-authorization-sources-S-http_get-method",
                      "text" : "method",
                      "type" : "String(\"get\")"
                    },
                    {
                      "doc" : "HTTP Headers 列表 (无 <code>content-type</code>) 。",
                      "hash" : "V-authorization-S-authorization-sources-S-http_get-headers",
                      "text" : "headers",
                      "type" : "Map",
                      "default" : "{accept = \"application/json\", cache-control = no-cache, connection = keep-alive, keep-alive = \"timeout=30, max=1000\"}"
                    }
                  ],
                  "text" : "http_get"
                },
                {
                  "doc" : "使用外部 HTTP 服务器授权(POST 请求)。",
                  "hash" : "T-authorization-S-authorization-sources-S-http_post",
                  "fields" : [
                    {
                      "doc" : "数据后端类型",
                      "hash" : "V-authorization-S-authorization-sources-S-http_post-type",
                      "text" : "type",
                      "type" : "String(\"http\")"
                    },
                    {
                      "doc" : "设置为 <code>true</code> 或 <code>false</code> 来禁用此 ACL 提供者",
                      "hash" : "V-authorization-S-authorization-sources-S-http_post-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "认证服务器地址",
                      "hash" : "V-authorization-S-authorization-sources-S-http_post-url",
                      "text" : "url",
                      "type" : "String"
                    },
                    {
                      "doc" : "HTTP 请求超时。",
                      "hash" : "V-authorization-S-authorization-sources-S-http_post-request_timeout",
                      "text" : "request_timeout",
                      "type" : "String",
                      "default" : "30s"
                    },
                    {
                      "doc" : "HTTP 请求体",
                      "hash" : "V-authorization-S-authorization-sources-S-http_post-body",
                      "text" : "body",
                      "type" : "Map($name->String)"
                    },
                    {
                      "doc" : "连接到 HTTP 服务器的超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authorization-S-authorization-sources-S-http_post-connect_timeout",
                      "text" : "connect_timeout",
                      "type" : "Duration",
                      "default" : "15s"
                    },
                    {
                      "doc" : "Deprecated since 5.0.4.",
                      "hash" : "V-authorization-S-authorization-sources-S-http_post-max_retries",
                      "text" : "max_retries",
                      "type" : "Integer(0..+inf)"
                    },
                    {
                      "doc" : "Deprecated since 5.0.4.<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authorization-S-authorization-sources-S-http_post-retry_interval",
                      "text" : "retry_interval",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "连接池大小。",
                      "hash" : "V-authorization-S-authorization-sources-S-http_post-pool_size",
                      "text" : "pool_size",
                      "type" : "Integer(1..+inf)",
                      "default" : "8"
                    },
                    {
                      "doc" : "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
                      "hash" : "V-authorization-S-authorization-sources-S-http_post-enable_pipelining",
                      "text" : "enable_pipelining",
                      "type" : "Integer(1..+inf)",
                      "default" : "100"
                    },
                    {
                      "doc" : "配置 HTTP 请求参数。",
                      "refs" : [
                        {
                          "doc" : "",
                          "hash" : "T-authorization-S-authorization-sources-S-http_post-request-S-request",
                          "fields" : [
                            {
                              "doc" : "HTTP 请求方法。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-request-S-request-method",
                              "text" : "method",
                              "type" : "String"
                            },
                            {
                              "doc" : "URL 路径。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-request-S-request-path",
                              "text" : "path",
                              "type" : "String"
                            },
                            {
                              "doc" : "HTTP 请求的主体。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-request-S-request-body",
                              "text" : "body",
                              "type" : "String"
                            },
                            {
                              "doc" : "HTTP 请求头列表。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-request-S-request-headers",
                              "text" : "headers",
                              "type" : "Map"
                            },
                            {
                              "doc" : "如果发送请求时出错，最大重试次数。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-request-S-request-max_retries",
                              "text" : "max_retries",
                              "type" : "Integer(0..+inf)"
                            },
                            {
                              "doc" : "HTTP 请求超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-request-S-request-request_timeout",
                              "text" : "request_timeout",
                              "type" : "Duration"
                            }
                          ],
                          "text" : "request"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-http_post-request",
                      "text" : "request",
                      "type" : "Struct(request)"
                    },
                    {
                      "doc" : "启用 SSL 连接。",
                      "refs" : [
                        {
                          "doc" : "Socket options for SSL clients.",
                          "hash" : "T-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl-S-ssl_client_opts-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl_client_opts"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-http_post-ssl",
                      "text" : "ssl",
                      "type" : "Struct(ssl_client_opts)",
                      "default" : "{enable = false}"
                    },
                    {
                      "doc" : "HTTP 请求方法",
                      "hash" : "V-authorization-S-authorization-sources-S-http_post-method",
                      "text" : "method",
                      "type" : "String(\"post\")"
                    },
                    {
                      "doc" : "HTTP Headers 列表",
                      "hash" : "V-authorization-S-authorization-sources-S-http_post-headers",
                      "text" : "headers",
                      "type" : "Map",
                      "default" : "{accept = \"application/json\", cache-control = no-cache, connection = keep-alive, content-type = \"application/json\", keep-alive = \"timeout=30, max=1000\"}"
                    }
                  ],
                  "text" : "http_post"
                },
                {
                  "doc" : "使用单个 Redis 实例进行授权。",
                  "hash" : "T-authorization-S-authorization-sources-S-redis_single",
                  "fields" : [
                    {
                      "doc" : "数据后端类型",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_single-type",
                      "text" : "type",
                      "type" : "String(\"redis\")"
                    },
                    {
                      "doc" : "设置为 <code>true</code> 或 <code>false</code> 来禁用此 ACL 提供者",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_single-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "将要连接的 IPv4 或 IPv6 地址，或者主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_single-server",
                      "text" : "server",
                      "type" : "String"
                    },
                    {
                      "doc" : "Single 模式。 当 Redis 服务器在 Single 模式下运行时必须设置为 'single' 。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_single-redis_type",
                      "text" : "redis_type",
                      "type" : "String(\"single\")",
                      "default" : "single"
                    },
                    {
                      "doc" : "桥接远端服务时使用的连接池大小。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_single-pool_size",
                      "text" : "pool_size",
                      "type" : "Integer(1..+inf)",
                      "default" : "8"
                    },
                    {
                      "doc" : "内部数据库的用户名。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_single-username",
                      "text" : "username",
                      "type" : "String"
                    },
                    {
                      "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_single-password",
                      "text" : "password",
                      "type" : "Secret"
                    },
                    {
                      "doc" : "Redis 数据库 ID。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_single-database",
                      "text" : "database",
                      "type" : "Integer(0..+inf)",
                      "default" : "0"
                    },
                    {
                      "doc" : "Deprecated since v5.0.15.",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_single-auto_reconnect",
                      "text" : "auto_reconnect",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "启用 SSL 连接。",
                      "refs" : [
                        {
                          "doc" : "Socket options for SSL clients.",
                          "hash" : "T-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl-S-ssl_client_opts-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl_client_opts"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-redis_single-ssl",
                      "text" : "ssl",
                      "type" : "Struct(ssl_client_opts)",
                      "default" : "{enable = false}"
                    },
                    {
                      "doc" : "用于检索授权数据的数据库查询。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_single-cmd",
                      "text" : "cmd",
                      "type" : "String"
                    }
                  ],
                  "text" : "redis_single"
                },
                {
                  "doc" : "使用 Redis Sentinel 进行授权。",
                  "hash" : "T-authorization-S-authorization-sources-S-redis_sentinel",
                  "fields" : [
                    {
                      "doc" : "数据后端类型",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-type",
                      "text" : "type",
                      "type" : "String(\"redis\")"
                    },
                    {
                      "doc" : "设置为 <code>true</code> 或 <code>false</code> 来禁用此 ACL 提供者",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：Node[,Node]。每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-servers",
                      "text" : "servers",
                      "type" : "String"
                    },
                    {
                      "doc" : "Sentinel 模式。 当 Redis 服务器在 Senitel 模式下运行时必须设置为 'sentinel' 。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-redis_type",
                      "text" : "redis_type",
                      "type" : "String(\"sentinel\")",
                      "default" : "sentinel"
                    },
                    {
                      "doc" : "Redis sentinel 模式下的集群名称。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-sentinel",
                      "text" : "sentinel",
                      "type" : "String"
                    },
                    {
                      "doc" : "桥接远端服务时使用的连接池大小。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-pool_size",
                      "text" : "pool_size",
                      "type" : "Integer(1..+inf)",
                      "default" : "8"
                    },
                    {
                      "doc" : "内部数据库的用户名。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-username",
                      "text" : "username",
                      "type" : "String"
                    },
                    {
                      "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-password",
                      "text" : "password",
                      "type" : "Secret"
                    },
                    {
                      "doc" : "Redis 数据库 ID。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-database",
                      "text" : "database",
                      "type" : "Integer(0..+inf)",
                      "default" : "0"
                    },
                    {
                      "doc" : "Deprecated since v5.0.15.",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-auto_reconnect",
                      "text" : "auto_reconnect",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "启用 SSL 连接。",
                      "refs" : [
                        {
                          "doc" : "Socket options for SSL clients.",
                          "hash" : "T-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl-S-ssl_client_opts-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl_client_opts"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-ssl",
                      "text" : "ssl",
                      "type" : "Struct(ssl_client_opts)",
                      "default" : "{enable = false}"
                    },
                    {
                      "doc" : "用于检索授权数据的数据库查询。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_sentinel-cmd",
                      "text" : "cmd",
                      "type" : "String"
                    }
                  ],
                  "text" : "redis_sentinel"
                },
                {
                  "doc" : "使用 Redis 集群进行授权。",
                  "hash" : "T-authorization-S-authorization-sources-S-redis_cluster",
                  "fields" : [
                    {
                      "doc" : "数据后端类型",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-type",
                      "text" : "type",
                      "type" : "String(\"redis\")"
                    },
                    {
                      "doc" : "设置为 <code>true</code> 或 <code>false</code> 来禁用此 ACL 提供者",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：Node[,Node]。每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-servers",
                      "text" : "servers",
                      "type" : "String"
                    },
                    {
                      "doc" : "Cluster 模式。当 Redis 服务器在集群模式下运行时必须设置为'cluster'。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-redis_type",
                      "text" : "redis_type",
                      "type" : "String(\"cluster\")",
                      "default" : "cluster"
                    },
                    {
                      "doc" : "桥接远端服务时使用的连接池大小。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-pool_size",
                      "text" : "pool_size",
                      "type" : "Integer(1..+inf)",
                      "default" : "8"
                    },
                    {
                      "doc" : "内部数据库的用户名。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-username",
                      "text" : "username",
                      "type" : "String"
                    },
                    {
                      "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-password",
                      "text" : "password",
                      "type" : "Secret"
                    },
                    {
                      "doc" : "Deprecated since v5.0.15.",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-auto_reconnect",
                      "text" : "auto_reconnect",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "启用 SSL 连接。",
                      "refs" : [
                        {
                          "doc" : "Socket options for SSL clients.",
                          "hash" : "T-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl-S-ssl_client_opts-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl_client_opts"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-ssl",
                      "text" : "ssl",
                      "type" : "Struct(ssl_client_opts)",
                      "default" : "{enable = false}"
                    },
                    {
                      "doc" : "用于检索授权数据的数据库查询。",
                      "hash" : "V-authorization-S-authorization-sources-S-redis_cluster-cmd",
                      "text" : "cmd",
                      "type" : "String"
                    }
                  ],
                  "text" : "redis_cluster"
                },
                {
                  "doc" : "使用 MySQL 数据库进行授权。",
                  "hash" : "T-authorization-S-authorization-sources-S-mysql",
                  "fields" : [
                    {
                      "doc" : "数据后端类型",
                      "hash" : "V-authorization-S-authorization-sources-S-mysql-type",
                      "text" : "type",
                      "type" : "String(\"mysql\")"
                    },
                    {
                      "doc" : "设置为 <code>true</code> 或 <code>false</code> 来禁用此 ACL 提供者",
                      "hash" : "V-authorization-S-authorization-sources-S-mysql-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "用于连接的 IPv4 或 IPv6 地址或主机名。<br/>\n主机条目的格式如下：主机[:端口]。<br/>\n如果未指定[:端口]，将使用 MySQL 的默认端口3306。",
                      "hash" : "V-authorization-S-authorization-sources-S-mysql-server",
                      "text" : "server",
                      "type" : "String"
                    },
                    {
                      "doc" : "数据库名字。",
                      "hash" : "V-authorization-S-authorization-sources-S-mysql-database",
                      "text" : "database",
                      "type" : "String"
                    },
                    {
                      "doc" : "桥接远端服务时使用的连接池大小。",
                      "hash" : "V-authorization-S-authorization-sources-S-mysql-pool_size",
                      "text" : "pool_size",
                      "type" : "Integer(1..+inf)",
                      "default" : "8"
                    },
                    {
                      "doc" : "内部数据库的用户名。",
                      "hash" : "V-authorization-S-authorization-sources-S-mysql-username",
                      "text" : "username",
                      "type" : "String",
                      "default" : "root"
                    },
                    {
                      "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
                      "hash" : "V-authorization-S-authorization-sources-S-mysql-password",
                      "text" : "password",
                      "type" : "Secret"
                    },
                    {
                      "doc" : "Deprecated since v5.0.15.",
                      "hash" : "V-authorization-S-authorization-sources-S-mysql-auto_reconnect",
                      "text" : "auto_reconnect",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "启用 SSL 连接。",
                      "refs" : [
                        {
                          "doc" : "Socket options for SSL clients.",
                          "hash" : "T-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl-S-ssl_client_opts-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl_client_opts"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-mysql-ssl",
                      "text" : "ssl",
                      "type" : "Struct(ssl_client_opts)",
                      "default" : "{enable = false}"
                    },
                    {
                      "doc" : "SQL 预处理语句列表。",
                      "hash" : "V-authorization-S-authorization-sources-S-mysql-prepare_statement",
                      "text" : "prepare_statement",
                      "type" : "Map"
                    },
                    {
                      "doc" : "用于检索授权数据的数据库查询。",
                      "hash" : "V-authorization-S-authorization-sources-S-mysql-query",
                      "text" : "query",
                      "type" : "String"
                    }
                  ],
                  "text" : "mysql"
                },
                {
                  "doc" : "使用 PostgreSQL 数据库进行授权。",
                  "hash" : "T-authorization-S-authorization-sources-S-postgresql",
                  "fields" : [
                    {
                      "doc" : "数据后端类型",
                      "hash" : "V-authorization-S-authorization-sources-S-postgresql-type",
                      "text" : "type",
                      "type" : "String(\"postgresql\")"
                    },
                    {
                      "doc" : "设置为 <code>true</code> 或 <code>false</code> 来禁用此 ACL 提供者",
                      "hash" : "V-authorization-S-authorization-sources-S-postgresql-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "要连接的 IPv4 或 IPv6 地址或主机名。<br/>\n一个主机条目的格式为：Host[:Port]。<br/>\n如果没有指定 [:Port]，将使用 PostgreSQL 默认端口 5432。",
                      "hash" : "V-authorization-S-authorization-sources-S-postgresql-server",
                      "text" : "server",
                      "type" : "String"
                    },
                    {
                      "doc" : "数据库名字。",
                      "hash" : "V-authorization-S-authorization-sources-S-postgresql-database",
                      "text" : "database",
                      "type" : "String"
                    },
                    {
                      "doc" : "桥接远端服务时使用的连接池大小。",
                      "hash" : "V-authorization-S-authorization-sources-S-postgresql-pool_size",
                      "text" : "pool_size",
                      "type" : "Integer(1..+inf)",
                      "default" : "8"
                    },
                    {
                      "doc" : "内部数据库的用户名。",
                      "hash" : "V-authorization-S-authorization-sources-S-postgresql-username",
                      "text" : "username",
                      "type" : "String"
                    },
                    {
                      "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
                      "hash" : "V-authorization-S-authorization-sources-S-postgresql-password",
                      "text" : "password",
                      "type" : "Secret"
                    },
                    {
                      "doc" : "Deprecated since v5.0.15.",
                      "hash" : "V-authorization-S-authorization-sources-S-postgresql-auto_reconnect",
                      "text" : "auto_reconnect",
                      "type" : "Boolean"
                    },
                    {
                      "doc" : "启用 SSL 连接。",
                      "refs" : [
                        {
                          "doc" : "Socket options for SSL clients.",
                          "hash" : "T-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl-S-ssl_client_opts-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl_client_opts"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-postgresql-ssl",
                      "text" : "ssl",
                      "type" : "Struct(ssl_client_opts)",
                      "default" : "{enable = false}"
                    },
                    {
                      "doc" : "SQL 预处理语句列表。",
                      "hash" : "V-authorization-S-authorization-sources-S-postgresql-prepare_statement",
                      "text" : "prepare_statement",
                      "type" : "Map"
                    },
                    {
                      "doc" : "用于检索授权数据的数据库查询。",
                      "hash" : "V-authorization-S-authorization-sources-S-postgresql-query",
                      "text" : "query",
                      "type" : "String"
                    }
                  ],
                  "text" : "postgresql"
                },
                {
                  "doc" : "使用 MongoDB 授权（单实例）。",
                  "hash" : "T-authorization-S-authorization-sources-S-mongo_single",
                  "fields" : [
                    {
                      "doc" : "数据后端类型",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-type",
                      "text" : "type",
                      "type" : "String(\"mongodb\")"
                    },
                    {
                      "doc" : "设置为 <code>true</code> 或 <code>false</code> 来禁用此 ACL 提供者",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "包含授权数据的 `MongoDB` 集合。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-collection",
                      "text" : "collection",
                      "type" : "String"
                    },
                    {
                      "doc" : "定义查询中过滤条件的条件表达式。\n过滤器支持以下占位符<br/>\n - <code>${username}</code>：在连接时将用客户端使用的 <code>用户名</code> 替换<br/>\n - <code>${clientid}</code>：在连接时将用客户端使用的 <code>客户端 ID</code> 替换",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-filter",
                      "text" : "filter",
                      "type" : "Map",
                      "default" : "{}"
                    },
                    {
                      "doc" : "独立实例。当MongoDB服务器以独立模式运行时，必须设置为`single`。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-mongo_type",
                      "text" : "mongo_type",
                      "type" : "String(\"single\")",
                      "default" : "single"
                    },
                    {
                      "doc" : "要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机条目具有以下形式：主机[:端口]。<br/>如果未指定[:端口]，则使用MongoDB的默认端口27017。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-server",
                      "text" : "server",
                      "type" : "String"
                    },
                    {
                      "doc" : "写入模式",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-w_mode",
                      "text" : "w_mode",
                      "type" : "Enum(unsafe,safe)",
                      "default" : "unsafe"
                    },
                    {
                      "doc" : "使用 DNS SRV 记录。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-srv_record",
                      "text" : "srv_record",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "桥接远端服务时使用的连接池大小。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-pool_size",
                      "text" : "pool_size",
                      "type" : "Integer(1..+inf)",
                      "default" : "8"
                    },
                    {
                      "doc" : "内部数据库的用户名。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-username",
                      "text" : "username",
                      "type" : "String"
                    },
                    {
                      "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-password",
                      "text" : "password",
                      "type" : "Secret"
                    },
                    {
                      "doc" : "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-use_legacy_protocol",
                      "text" : "use_legacy_protocol",
                      "type" : "Enum(auto,true,false)",
                      "default" : "auto"
                    },
                    {
                      "doc" : "与用户认证信息关联的数据库名称。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-auth_source",
                      "text" : "auth_source",
                      "type" : "String"
                    },
                    {
                      "doc" : "数据库名字。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-database",
                      "text" : "database",
                      "type" : "String"
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "MongoDB 的拓扑结构。",
                          "hash" : "T-authorization-S-authorization-sources-S-mongo_single-topology-S-topology",
                          "fields" : [
                            {
                              "doc" : "在池中的所有工作线程都繁忙时，可以创建的附加工作线程的最大数量。这有助于通过允许更多并发连接到 MongoDB 服务器来管理工作负载的暂时性波动。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-max_overflow",
                              "text" : "max_overflow",
                              "type" : "Integer(0..+inf)",
                              "default" : "0"
                            },
                            {
                              "doc" : "超出配置的池大小（\"溢出\"）的工作线程在终止之前的时间段。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-overflow_ttl",
                              "text" : "overflow_ttl",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "检查是否存在多余工作线程（\"溢出\"）的周期。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-overflow_check_period",
                              "text" : "overflow_check_period",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "用于在多个合适的 MongoDB 实例中进行选择的延迟窗口的大小。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-local_threshold_ms",
                              "text" : "local_threshold_ms",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "在超时之前尝试连接的持续时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-connect_timeout_ms",
                              "text" : "connect_timeout_ms",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "在套接字上尝试发送或接收超时之前的持续时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-socket_timeout_ms",
                              "text" : "socket_timeout_ms",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "指定在抛出异常之前进行服务器选择的阻塞时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-server_selection_timeout_ms",
                              "text" : "server_selection_timeout_ms",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "工作线程等待连接可用的最长时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-wait_queue_timeout_ms",
                              "text" : "wait_queue_timeout_ms",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "控制驱动程序何时检查 MongoDB 部署的状态。指定检查之间的时间间隔，从上次检查结束到下次检查开始计算。如果连接数增加（例如，如果增加了池大小），则可能需要增加此时间间隔，以避免在 MongoDB 日志文件中创建过多的日志条目。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-heartbeat_frequency_ms",
                              "text" : "heartbeat_frequency_ms",
                              "type" : "Duration",
                              "default" : "200s"
                            },
                            {
                              "doc" : "控制心跳之间等待的最短时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-topology-S-topology-min_heartbeat_frequency_ms",
                              "text" : "min_heartbeat_frequency_ms",
                              "type" : "Duration"
                            }
                          ],
                          "text" : "topology"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-topology",
                      "text" : "topology",
                      "type" : "Struct(topology)"
                    },
                    {
                      "doc" : "启用 SSL 连接。",
                      "refs" : [
                        {
                          "doc" : "Socket options for SSL clients.",
                          "hash" : "T-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl-S-ssl_client_opts-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl_client_opts"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_single-ssl",
                      "text" : "ssl",
                      "type" : "Struct(ssl_client_opts)",
                      "default" : "{enable = false}"
                    }
                  ],
                  "text" : "mongo_single"
                },
                {
                  "doc" : "使用 MongoDB 授权（副本集模式）",
                  "hash" : "T-authorization-S-authorization-sources-S-mongo_rs",
                  "fields" : [
                    {
                      "doc" : "数据后端类型",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-type",
                      "text" : "type",
                      "type" : "String(\"mongodb\")"
                    },
                    {
                      "doc" : "设置为 <code>true</code> 或 <code>false</code> 来禁用此 ACL 提供者",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "包含授权数据的 `MongoDB` 集合。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-collection",
                      "text" : "collection",
                      "type" : "String"
                    },
                    {
                      "doc" : "定义查询中过滤条件的条件表达式。\n过滤器支持以下占位符<br/>\n - <code>${username}</code>：在连接时将用客户端使用的 <code>用户名</code> 替换<br/>\n - <code>${clientid}</code>：在连接时将用客户端使用的 <code>客户端 ID</code> 替换",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-filter",
                      "text" : "filter",
                      "type" : "Map",
                      "default" : "{}"
                    },
                    {
                      "doc" : "副本集。当MongoDB服务器以`副本集`模式运行时，必须设置为`rs`。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-mongo_type",
                      "text" : "mongo_type",
                      "type" : "String(\"rs\")",
                      "default" : "rs"
                    },
                    {
                      "doc" : "集群连接的节点列表。节点应使用逗号分隔，例如：节点[,节点]。\n对于每个节点，应该是要连接的 IPv4 或 IPv6 地址或主机名。\n主机条目具有以下形式：主机[:端口]。\n如果未指定[:端口]，则使用 MongoDB 的默认端口27017。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-servers",
                      "text" : "servers",
                      "type" : "String"
                    },
                    {
                      "doc" : "写入模式",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-w_mode",
                      "text" : "w_mode",
                      "type" : "Enum(unsafe,safe)",
                      "default" : "unsafe"
                    },
                    {
                      "doc" : "读取模式。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-r_mode",
                      "text" : "r_mode",
                      "type" : "Enum(master,slave_ok)",
                      "default" : "master"
                    },
                    {
                      "doc" : "副本集的名称。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-replica_set_name",
                      "text" : "replica_set_name",
                      "type" : "String"
                    },
                    {
                      "doc" : "使用 DNS SRV 记录。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-srv_record",
                      "text" : "srv_record",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "桥接远端服务时使用的连接池大小。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-pool_size",
                      "text" : "pool_size",
                      "type" : "Integer(1..+inf)",
                      "default" : "8"
                    },
                    {
                      "doc" : "内部数据库的用户名。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-username",
                      "text" : "username",
                      "type" : "String"
                    },
                    {
                      "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-password",
                      "text" : "password",
                      "type" : "Secret"
                    },
                    {
                      "doc" : "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-use_legacy_protocol",
                      "text" : "use_legacy_protocol",
                      "type" : "Enum(auto,true,false)",
                      "default" : "auto"
                    },
                    {
                      "doc" : "与用户认证信息关联的数据库名称。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-auth_source",
                      "text" : "auth_source",
                      "type" : "String"
                    },
                    {
                      "doc" : "数据库名字。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-database",
                      "text" : "database",
                      "type" : "String"
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "MongoDB 的拓扑结构。",
                          "hash" : "T-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology",
                          "fields" : [
                            {
                              "doc" : "在池中的所有工作线程都繁忙时，可以创建的附加工作线程的最大数量。这有助于通过允许更多并发连接到 MongoDB 服务器来管理工作负载的暂时性波动。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-max_overflow",
                              "text" : "max_overflow",
                              "type" : "Integer(0..+inf)",
                              "default" : "0"
                            },
                            {
                              "doc" : "超出配置的池大小（\"溢出\"）的工作线程在终止之前的时间段。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-overflow_ttl",
                              "text" : "overflow_ttl",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "检查是否存在多余工作线程（\"溢出\"）的周期。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-overflow_check_period",
                              "text" : "overflow_check_period",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "用于在多个合适的 MongoDB 实例中进行选择的延迟窗口的大小。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-local_threshold_ms",
                              "text" : "local_threshold_ms",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "在超时之前尝试连接的持续时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-connect_timeout_ms",
                              "text" : "connect_timeout_ms",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "在套接字上尝试发送或接收超时之前的持续时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-socket_timeout_ms",
                              "text" : "socket_timeout_ms",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "指定在抛出异常之前进行服务器选择的阻塞时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-server_selection_timeout_ms",
                              "text" : "server_selection_timeout_ms",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "工作线程等待连接可用的最长时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-wait_queue_timeout_ms",
                              "text" : "wait_queue_timeout_ms",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "控制驱动程序何时检查 MongoDB 部署的状态。指定检查之间的时间间隔，从上次检查结束到下次检查开始计算。如果连接数增加（例如，如果增加了池大小），则可能需要增加此时间间隔，以避免在 MongoDB 日志文件中创建过多的日志条目。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-heartbeat_frequency_ms",
                              "text" : "heartbeat_frequency_ms",
                              "type" : "Duration",
                              "default" : "200s"
                            },
                            {
                              "doc" : "控制心跳之间等待的最短时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-topology-S-topology-min_heartbeat_frequency_ms",
                              "text" : "min_heartbeat_frequency_ms",
                              "type" : "Duration"
                            }
                          ],
                          "text" : "topology"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-topology",
                      "text" : "topology",
                      "type" : "Struct(topology)"
                    },
                    {
                      "doc" : "启用 SSL 连接。",
                      "refs" : [
                        {
                          "doc" : "Socket options for SSL clients.",
                          "hash" : "T-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl-S-ssl_client_opts-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl_client_opts"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_rs-ssl",
                      "text" : "ssl",
                      "type" : "Struct(ssl_client_opts)",
                      "default" : "{enable = false}"
                    }
                  ],
                  "text" : "mongo_rs"
                },
                {
                  "doc" : "使用 MongoDB 授权（分片集群模式）。",
                  "hash" : "T-authorization-S-authorization-sources-S-mongo_sharded",
                  "fields" : [
                    {
                      "doc" : "数据后端类型",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-type",
                      "text" : "type",
                      "type" : "String(\"mongodb\")"
                    },
                    {
                      "doc" : "设置为 <code>true</code> 或 <code>false</code> 来禁用此 ACL 提供者",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "包含授权数据的 `MongoDB` 集合。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-collection",
                      "text" : "collection",
                      "type" : "String"
                    },
                    {
                      "doc" : "定义查询中过滤条件的条件表达式。\n过滤器支持以下占位符<br/>\n - <code>${username}</code>：在连接时将用客户端使用的 <code>用户名</code> 替换<br/>\n - <code>${clientid}</code>：在连接时将用客户端使用的 <code>客户端 ID</code> 替换",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-filter",
                      "text" : "filter",
                      "type" : "Map",
                      "default" : "{}"
                    },
                    {
                      "doc" : "分片集群。当 MongoDB 服务器以`分片`模式运行时，必须设置为`sharded`。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-mongo_type",
                      "text" : "mongo_type",
                      "type" : "String(\"sharded\")",
                      "default" : "sharded"
                    },
                    {
                      "doc" : "集群连接的节点列表。节点应使用逗号分隔，例如：节点[,节点]。\n对于每个节点，应该是要连接的 IPv4 或 IPv6 地址或主机名。\n主机条目具有以下形式：主机[:端口]。\n如果未指定[:端口]，则使用 MongoDB 的默认端口27017。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-servers",
                      "text" : "servers",
                      "type" : "String"
                    },
                    {
                      "doc" : "写入模式",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-w_mode",
                      "text" : "w_mode",
                      "type" : "Enum(unsafe,safe)",
                      "default" : "unsafe"
                    },
                    {
                      "doc" : "使用 DNS SRV 记录。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-srv_record",
                      "text" : "srv_record",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "桥接远端服务时使用的连接池大小。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-pool_size",
                      "text" : "pool_size",
                      "type" : "Integer(1..+inf)",
                      "default" : "8"
                    },
                    {
                      "doc" : "内部数据库的用户名。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-username",
                      "text" : "username",
                      "type" : "String"
                    },
                    {
                      "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-password",
                      "text" : "password",
                      "type" : "Secret"
                    },
                    {
                      "doc" : "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-use_legacy_protocol",
                      "text" : "use_legacy_protocol",
                      "type" : "Enum(auto,true,false)",
                      "default" : "auto"
                    },
                    {
                      "doc" : "与用户认证信息关联的数据库名称。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-auth_source",
                      "text" : "auth_source",
                      "type" : "String"
                    },
                    {
                      "doc" : "数据库名字。",
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-database",
                      "text" : "database",
                      "type" : "String"
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "MongoDB 的拓扑结构。",
                          "hash" : "T-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology",
                          "fields" : [
                            {
                              "doc" : "在池中的所有工作线程都繁忙时，可以创建的附加工作线程的最大数量。这有助于通过允许更多并发连接到 MongoDB 服务器来管理工作负载的暂时性波动。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-max_overflow",
                              "text" : "max_overflow",
                              "type" : "Integer(0..+inf)",
                              "default" : "0"
                            },
                            {
                              "doc" : "超出配置的池大小（\"溢出\"）的工作线程在终止之前的时间段。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-overflow_ttl",
                              "text" : "overflow_ttl",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "检查是否存在多余工作线程（\"溢出\"）的周期。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-overflow_check_period",
                              "text" : "overflow_check_period",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "用于在多个合适的 MongoDB 实例中进行选择的延迟窗口的大小。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-local_threshold_ms",
                              "text" : "local_threshold_ms",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "在超时之前尝试连接的持续时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-connect_timeout_ms",
                              "text" : "connect_timeout_ms",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "在套接字上尝试发送或接收超时之前的持续时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-socket_timeout_ms",
                              "text" : "socket_timeout_ms",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "指定在抛出异常之前进行服务器选择的阻塞时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-server_selection_timeout_ms",
                              "text" : "server_selection_timeout_ms",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "工作线程等待连接可用的最长时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-wait_queue_timeout_ms",
                              "text" : "wait_queue_timeout_ms",
                              "type" : "Duration"
                            },
                            {
                              "doc" : "控制驱动程序何时检查 MongoDB 部署的状态。指定检查之间的时间间隔，从上次检查结束到下次检查开始计算。如果连接数增加（例如，如果增加了池大小），则可能需要增加此时间间隔，以避免在 MongoDB 日志文件中创建过多的日志条目。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-heartbeat_frequency_ms",
                              "text" : "heartbeat_frequency_ms",
                              "type" : "Duration",
                              "default" : "200s"
                            },
                            {
                              "doc" : "控制心跳之间等待的最短时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-topology-S-topology-min_heartbeat_frequency_ms",
                              "text" : "min_heartbeat_frequency_ms",
                              "type" : "Duration"
                            }
                          ],
                          "text" : "topology"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-topology",
                      "text" : "topology",
                      "type" : "Struct(topology)"
                    },
                    {
                      "doc" : "启用 SSL 连接。",
                      "refs" : [
                        {
                          "doc" : "Socket options for SSL clients.",
                          "hash" : "T-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl-S-ssl_client_opts-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl_client_opts"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-mongo_sharded-ssl",
                      "text" : "ssl",
                      "type" : "Struct(ssl_client_opts)",
                      "default" : "{enable = false}"
                    }
                  ],
                  "text" : "mongo_sharded"
                },
                {
                  "doc" : "AuthZ with LDAP",
                  "hash" : "T-authorization-S-authorization-sources-S-ldap",
                  "fields" : [
                    {
                      "doc" : "数据后端类型",
                      "hash" : "V-authorization-S-authorization-sources-S-ldap-type",
                      "text" : "type",
                      "type" : "String(\"ldap\")"
                    },
                    {
                      "doc" : "设置为 <code>true</code> 或 <code>false</code> 来禁用此 ACL 提供者",
                      "hash" : "V-authorization-S-authorization-sources-S-ldap-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "表示使用哪个属性来表示允许`发布`的主题列表。",
                      "hash" : "V-authorization-S-authorization-sources-S-ldap-publish_attribute",
                      "text" : "publish_attribute",
                      "type" : "String",
                      "default" : "mqttPublishTopic"
                    },
                    {
                      "doc" : "表示使用哪个属性来表示允许`订阅`的主题列表。",
                      "hash" : "V-authorization-S-authorization-sources-S-ldap-subscribe_attribute",
                      "text" : "subscribe_attribute",
                      "type" : "String",
                      "default" : "mqttSubscriptionTopic"
                    },
                    {
                      "doc" : "表示使用哪个属性来表示允许`发布`和`订阅`的主题列表。",
                      "hash" : "V-authorization-S-authorization-sources-S-ldap-all_attribute",
                      "text" : "all_attribute",
                      "type" : "String",
                      "default" : "mqttPubSubTopic"
                    },
                    {
                      "doc" : "LDAP 查询超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authorization-S-authorization-sources-S-ldap-query_timeout",
                      "text" : "query_timeout",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "要连接的 IPv4 或 IPv6 地址或主机名。<br/>\n主机名条目的格式为：`主机[:端口]`。<br/>\n如果 `[:端口]` 未指定， 将使用 LDAP 默认端口 389。",
                      "hash" : "V-authorization-S-authorization-sources-S-ldap-server",
                      "text" : "server",
                      "type" : "String"
                    },
                    {
                      "doc" : "桥接远端服务时使用的连接池大小。",
                      "hash" : "V-authorization-S-authorization-sources-S-ldap-pool_size",
                      "text" : "pool_size",
                      "type" : "Integer(1..+inf)",
                      "default" : "8"
                    },
                    {
                      "doc" : "内部数据库的用户名。",
                      "hash" : "V-authorization-S-authorization-sources-S-ldap-username",
                      "text" : "username",
                      "type" : "String"
                    },
                    {
                      "doc" : "内部数据库密码。<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
                      "hash" : "V-authorization-S-authorization-sources-S-ldap-password",
                      "text" : "password",
                      "type" : "Secret"
                    },
                    {
                      "doc" : "与基本对象条目（或根）相关的名称。\n搜索用户的起点。",
                      "hash" : "V-authorization-S-authorization-sources-S-ldap-base_dn",
                      "text" : "base_dn",
                      "type" : "String"
                    },
                    {
                      "doc" : "定义哪些条件必须被依次满足的过滤器\n用于搜索匹配一条给定的条目.<br>\n筛选器的语法遵循 RFC 4515，并且还支持占位符。",
                      "hash" : "V-authorization-S-authorization-sources-S-ldap-filter",
                      "text" : "filter",
                      "type" : "String",
                      "default" : "\"(objectClass=mqttUser)\""
                    },
                    {
                      "doc" : "设置每个单独请求所使用的最大时间（以毫秒为单位）。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-authorization-S-authorization-sources-S-ldap-request_timeout",
                      "text" : "request_timeout",
                      "type" : "Duration",
                      "default" : "10s"
                    },
                    {
                      "doc" : "启用 SSL 连接。",
                      "refs" : [
                        {
                          "doc" : "启用 SSL 连接。",
                          "hash" : "T-authorization-S-authorization-sources-S-ldap-ssl-S-ssl",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl-S-ssl-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl-S-ssl-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl-S-ssl-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl-S-ssl-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl-S-ssl-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl-S-ssl-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl-S-ssl-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl-S-ssl-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl-S-ssl-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl-S-ssl-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl-S-ssl-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl-S-ssl-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl-S-ssl-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl-S-ssl-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl-S-ssl-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl"
                        }
                      ],
                      "hash" : "V-authorization-S-authorization-sources-S-ldap-ssl",
                      "text" : "ssl",
                      "type" : "Struct(ssl)",
                      "default" : "{enable = false}"
                    }
                  ],
                  "text" : "ldap"
                }
              ],
              "hash" : "V-authorization-S-authorization-sources",
              "text" : "sources",
              "type" : "Array(OneOf(Struct(file),Struct(builtin_db),Struct(http_get),Struct(http_post),Struct(redis_single),Struct(redis_sentinel),Struct(redis_cluster),Struct(mysql),Struct(postgresql),Struct(mongo_single),Struct(mongo_rs),Struct(mongo_sharded),Struct(ldap)))",
              "default" : "[{enable = true, path = \"${EMQX_ETC_DIR}/acl.conf\", type = file}]"
            }
          ],
          "text" : "authorization"
        }
      ],
      "hash" : "V-authorization",
      "text" : "authorization",
      "type" : "Struct(authorization)"
    },
    {
      "refs" : [
        {
          "doc" : "节点名称、Cookie、配置文件、数据目录和 Erlang 虚拟机（BEAM）启动参数。",
          "hash" : "T-node-S-node",
          "fields" : [
            {
              "doc" : "节点名。格式为 \\<name>@\\<host>。其中 <host> 可以是 IP 地址，也可以是 FQDN。\n详见 http://erlang.org/doc/reference_manual/distributed.html。",
              "hash" : "V-node-S-node-name",
              "text" : "name",
              "type" : "String",
              "default" : "\"emqx@127.0.0.1\""
            },
            {
              "doc" : "分布式 Erlang 集群使用的 cookie 值。集群间保持一致",
              "hash" : "V-node-S-node-cookie",
              "text" : "cookie",
              "type" : "String"
            },
            {
              "doc" : "Erlang 系统同时存在的最大端口数。\n实际选择的最大值可能比设置的数字大得多。\n参考: https://www.erlang.org/doc/man/erl.html",
              "hash" : "V-node-S-node-max_ports",
              "text" : "max_ports",
              "type" : "Integer(1024..134217727)",
              "default" : "1048576"
            },
            {
              "doc" : "Erlang 分布式缓冲区的繁忙阈值，单位是 KB。",
              "hash" : "V-node-S-node-dist_buffer_size",
              "text" : "dist_buffer_size",
              "type" : "Integer(1..2097151)",
              "default" : "8192"
            },
            {
              "doc" : "节点数据存放目录，可能会自动创建的子目录如下：<br/>\n- `mnesia/<node_name>`。EMQX 的内置数据库目录。例如，`mnesia/emqx@127.0.0.1`。<br/>\n如果节点要被重新命名（例如，`emqx@10.0.1.1`）。旧目录应该首先被删除。<br/>\n- `configs`。在启动时生成的配置，以及集群/本地覆盖的配置。<br/>\n- `patches`: 热补丁文件将被放在这里。<br/>\n- `trace`: 日志跟踪文件。<br/>\n\n**注意**: 一个数据 dir 不能被两个或更多的 EMQX 节点同时使用。",
              "hash" : "V-node-S-node-data_dir",
              "text" : "data_dir",
              "type" : "String"
            },
            {
              "doc" : "系统调优参数，设置节点运行多久强制进行一次全局垃圾回收。禁用设置为 <code>disabled</code>。",
              "hash" : "V-node-S-node-global_gc_interval",
              "text" : "global_gc_interval",
              "type" : "OneOf(String(\"disabled\"),Duration)",
              "default" : "15m"
            },
            {
              "doc" : "选择节点的角色。<br/>\n<code>core</code> 节点提供数据的持久性，并负责写入。建议将核心节点放置在不同的机架或不同的可用区。<br/>\n<code>repliant</code> 节点是临时工作节点。 从集群中删除它们，不影响数据库冗余<br/>\n建议复制节点多于核心节点。<br/>\n注意：该参数仅在设置<code>backend</code>时生效到 <code>rlog</code>。",
              "hash" : "V-node-S-node-role",
              "aliases" : [
                "db_role"
              ],
              "text" : "role",
              "type" : "Enum(core,replicant)",
              "default" : "core"
            }
          ],
          "text" : "node"
        }
      ],
      "hash" : "V-node",
      "text" : "node",
      "type" : "Struct(node)"
    },
    {
      "refs" : [
        {
          "doc" : "EMQX 节点可以组成一个集群，以提高总容量。<br/> 这里指定了节点之间如何连接。",
          "hash" : "T-cluster-S-cluster",
          "fields" : [
            {
              "doc" : "EMQX 集群名称。每个集群都有一个唯一的名称。服务发现时会用于做路径的一部分。",
              "hash" : "V-cluster-S-cluster-name",
              "text" : "name",
              "type" : "String",
              "default" : "emqxcl"
            },
            {
              "doc" : "集群节点发现方式。可选值为:\n- manual: 使用 <code>emqx ctl cluster</code> 命令管理集群。<br/>\n- static: 配置静态节点。配置几个固定的节点，新节点通过连接固定节点中的某一个来加入集群。<br/>\n- dns: 使用 DNS A 记录的方式发现节点。<br/>\n- etcd: 使用 etcd 发现节点。<br/>\n- k8s: 使用 Kubernetes API 发现节点。",
              "hash" : "V-cluster-S-cluster-discovery_strategy",
              "text" : "discovery_strategy",
              "type" : "Enum(manual,static,dns,etcd,k8s)",
              "default" : "manual"
            },
            {
              "doc" : "指定多久之后从集群中删除离线节点。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-cluster-S-cluster-autoclean",
              "text" : "autoclean",
              "type" : "Duration",
              "default" : "24h"
            },
            {
              "doc" : "集群脑裂自动恢复机制开关。",
              "hash" : "V-cluster-S-cluster-autoheal",
              "text" : "autoheal",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "分布式 Erlang 集群协议类型。可选值为:<br/>\n- inet_tcp: 使用 IPv4 <br/>\n- inet_tls: 使用 TLS，需要配合 <code>etc/ssl_dist.conf</code> 一起使用。<br/>\n- inet6_tcp: IPv6 TCP <br/>\n- inet6_tls: IPv6 TLS， 与 <code>etc/ssl_dist.conf</code> 配合使用。",
              "hash" : "V-cluster-S-cluster-proto_dist",
              "text" : "proto_dist",
              "type" : "Enum(inet_tcp,inet6_tcp,inet_tls,inet6_tls)",
              "default" : "inet_tcp"
            },
            {
              "refs" : [
                {
                  "doc" : "静态节点服务发现。新节点通过连接一个节点来加入集群。",
                  "hash" : "T-cluster-S-cluster-static-S-cluster_static",
                  "fields" : [
                    {
                      "doc" : "集群中的 EMQX 节点名称列表，\n指定固定的节点列表，多个节点间使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 static 时，此配置项才有效。\n适合于节点数量较少且固定的集群。",
                      "hash" : "V-cluster-S-cluster-static-S-cluster_static-seeds",
                      "text" : "seeds",
                      "type" : "OneOf(String,Array(String))",
                      "default" : "[]"
                    }
                  ],
                  "text" : "cluster_static"
                }
              ],
              "hash" : "V-cluster-S-cluster-static",
              "text" : "static",
              "type" : "Struct(cluster_static)"
            },
            {
              "refs" : [
                {
                  "doc" : "DNS SRV 记录服务发现。",
                  "hash" : "T-cluster-S-cluster-dns-S-cluster_dns",
                  "fields" : [
                    {
                      "doc" : "指定 DNS A 记录的名字。emqx 会通过访问这个 DNS A 记录来获取 IP 地址列表。\n当<code>cluster.discovery_strategy</code> 为 <code>dns</code> 时有效。",
                      "hash" : "V-cluster-S-cluster-dns-S-cluster_dns-name",
                      "text" : "name",
                      "type" : "String",
                      "default" : "localhost"
                    },
                    {
                      "doc" : "DNS 记录类型。",
                      "hash" : "V-cluster-S-cluster-dns-S-cluster_dns-record_type",
                      "text" : "record_type",
                      "type" : "Enum(a,aaaa,srv)",
                      "default" : "a"
                    }
                  ],
                  "text" : "cluster_dns"
                }
              ],
              "hash" : "V-cluster-S-cluster-dns",
              "text" : "dns",
              "type" : "Struct(cluster_dns)"
            },
            {
              "refs" : [
                {
                  "doc" : "使用 'etcd' 服务的服务发现。",
                  "hash" : "T-cluster-S-cluster-etcd-S-cluster_etcd",
                  "fields" : [
                    {
                      "doc" : "指定 etcd 服务的地址。如有多个服务使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
                      "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-server",
                      "text" : "server",
                      "type" : "String"
                    },
                    {
                      "doc" : "指定 etcd 路径的前缀。每个节点在 etcd 中都会创建一个路径:\nv2/keys/<prefix>/<cluster.name>/<node.name> <br/>\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
                      "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-prefix",
                      "text" : "prefix",
                      "type" : "String",
                      "default" : "emqxcl"
                    },
                    {
                      "doc" : "指定 etcd 中节点信息的过期时间。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-node_ttl",
                      "text" : "node_ttl",
                      "type" : "Duration",
                      "default" : "1m"
                    },
                    {
                      "doc" : "当使用 TLS 连接 etcd 时的配置选项。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
                      "refs" : [
                        {
                          "doc" : "Socket options for SSL clients.",
                          "hash" : "T-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options-S-ssl_client_opts-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl_client_opts"
                        }
                      ],
                      "hash" : "V-cluster-S-cluster-etcd-S-cluster_etcd-ssl_options",
                      "aliases" : [
                        "ssl"
                      ],
                      "text" : "ssl_options",
                      "type" : "Struct(ssl_client_opts)"
                    }
                  ],
                  "text" : "cluster_etcd"
                }
              ],
              "hash" : "V-cluster-S-cluster-etcd",
              "text" : "etcd",
              "type" : "Struct(cluster_etcd)"
            },
            {
              "refs" : [
                {
                  "doc" : "Kubernetes 服务发现。",
                  "hash" : "T-cluster-S-cluster-k8s-S-cluster_k8s",
                  "fields" : [
                    {
                      "doc" : "指定 Kubernetes API Server。如有多个 Server 使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。",
                      "hash" : "V-cluster-S-cluster-k8s-S-cluster_k8s-apiserver",
                      "text" : "apiserver",
                      "type" : "String",
                      "default" : "\"https://kubernetes.default.svc:443\""
                    },
                    {
                      "doc" : "指定 Kubernetes 中 EMQX 的服务名。\n当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。",
                      "hash" : "V-cluster-S-cluster-k8s-S-cluster_k8s-service_name",
                      "text" : "service_name",
                      "type" : "String",
                      "default" : "emqx"
                    },
                    {
                      "doc" : "当使用 k8s 方式集群时，address_type 用来从 Kubernetes 接口的应答里获取什么形式的 Host 列表。\n指定 <code>cluster.k8s.address_type</code> 为 <code>ip</code>，则将从 Kubernetes 接口中获取集群中其他节点\n的 IP 地址。",
                      "hash" : "V-cluster-S-cluster-k8s-S-cluster_k8s-address_type",
                      "text" : "address_type",
                      "type" : "Enum(ip,dns,hostname)",
                      "default" : "ip"
                    },
                    {
                      "doc" : "当使用 k8s 方式并且 cluster.k8s.address_type 指定为 dns 类型时，\n可设置 emqx 节点名的命名空间。与 cluster.k8s.suffix 一起使用用以拼接得到节点名列表。",
                      "hash" : "V-cluster-S-cluster-k8s-S-cluster_k8s-namespace",
                      "text" : "namespace",
                      "type" : "String",
                      "default" : "default"
                    },
                    {
                      "doc" : "当使用 k8s 方式并且 cluster.k8s.address_type 指定为 dns 类型时，可设置 emqx 节点名的后缀。\n与 cluster.k8s.namespace 一起使用用以拼接得到节点名列表。",
                      "hash" : "V-cluster-S-cluster-k8s-S-cluster_k8s-suffix",
                      "text" : "suffix",
                      "type" : "String",
                      "default" : "pod.local"
                    }
                  ],
                  "text" : "cluster_k8s"
                }
              ],
              "hash" : "V-cluster-S-cluster-k8s",
              "text" : "k8s",
              "type" : "Struct(cluster_k8s)"
            }
          ],
          "text" : "cluster"
        }
      ],
      "hash" : "V-cluster",
      "text" : "cluster",
      "type" : "Struct(cluster)"
    },
    {
      "doc" : "EMQX 支持两种主要的日志处理进程：file 和 console，另有一个专门设计用于始终将日志定向到文件的 audit 处理进程。\n系统的默认日志处理行为可以通过环境变量 `EMQX_DEFAULT_LOG_HANDLER` 配置，它接受以下设置：\n\n- file：将日志输出仅定向到文件。\n- console：将日志输出仅定向到控制台。\n\n值得注意的是，当通过 systemd 的 emqx.service 文件启动 EMQX 时，EMQX_DEFAULT_LOG_HANDLER 被设置为 file。\n在 systemd 启动之外的场景中，console 作为默认的日志处理进程。",
      "refs" : [
        {
          "doc" : "EMQX 支持同时多个日志输出，一个控制台输出，和多个文件输出。\n默认情况下，EMQX 运行在容器中，或者在 'console' 或 'foreground' 模式下运行时，会输出到 控制台，否则输出到文件。",
          "hash" : "T-log-S-log",
          "fields" : [
            {
              "refs" : [
                {
                  "doc" : "日志处理进程将日志事件打印到 EMQX 控制台。",
                  "hash" : "T-log-S-log-console-S-console_handler",
                  "fields" : [
                    {
                      "doc" : "当前日志处理进程的日志级别。\n默认为 warning 级别。",
                      "hash" : "V-log-S-log-console-S-console_handler-level",
                      "text" : "level",
                      "type" : "Enum(debug,info,notice,warning,error,critical,alert,emergency,all)",
                      "default" : "warning"
                    },
                    {
                      "doc" : "启用此日志处理进程。",
                      "hash" : "V-log-S-log-console-S-console_handler-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "选择日志格式类型。 <code>text</code> 用于纯文本，<code>json</code> 用于结构化日志记录。",
                      "hash" : "V-log-S-log-console-S-console_handler-formatter",
                      "aliases" : [
                        "format"
                      ],
                      "text" : "formatter",
                      "type" : "Enum(text,json)",
                      "default" : "text"
                    },
                    {
                      "doc" : "选择时间戳格式：\n- `auto`：自动选择最佳格式。`epoch` 给 JSON 日志 `rfc3339` 给自由文本格式。\n- `epoch`： 微秒精度的 Unix epoch 整形值。\n- `rfc3339`： 遵从 RFC3339 规范的字符串格式。",
                      "hash" : "V-log-S-log-console-S-console_handler-timestamp_format",
                      "text" : "timestamp_format",
                      "type" : "Enum(auto,epoch,rfc3339)",
                      "default" : "auto"
                    },
                    {
                      "doc" : "日志中的时间戳使用的时间偏移量。\n可选值为：\n  - <code>system</code>: 本地系统使用的时区偏移量\n  - <code>utc</code>: 0 时区的偏移量\n  - <code>+-[hh]:[mm]</code>: 自定义偏移量，比如 \"-02:00\" 或者 \"+00:00\"\n默认值为本地系统的时区偏移量：<code>system</code>。",
                      "hash" : "V-log-S-log-console-S-console_handler-time_offset",
                      "text" : "time_offset",
                      "type" : "String",
                      "default" : "system"
                    }
                  ],
                  "text" : "console_handler"
                }
              ],
              "hash" : "V-log-S-log-console",
              "aliases" : [
                "console_handler"
              ],
              "text" : "console",
              "type" : "Struct(console_handler)"
            },
            {
              "doc" : "输出到文件的日志处理进程列表",
              "refs" : [
                {
                  "doc" : "日志处理进程将日志事件打印到文件。",
                  "hash" : "T-log-S-log-file-S-log_file_handler",
                  "fields" : [
                    {
                      "doc" : "日志文件路径及名字。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-path",
                      "aliases" : [
                        "file",
                        "to"
                      ],
                      "text" : "path",
                      "type" : "String",
                      "default" : "\"${EMQX_LOG_DIR}/emqx.log\""
                    },
                    {
                      "doc" : "轮换的最大日志文件数。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-rotation_count",
                      "aliases" : [
                        "rotation"
                      ],
                      "text" : "rotation_count",
                      "type" : "Integer(1..128)",
                      "default" : "10"
                    },
                    {
                      "doc" : "此参数控制日志文件轮换。 `infinity` 意味着日志文件将无限增长，否则日志文件将在达到 `max_size`（以字节为单位）时进行轮换。\n与 rotation count 配合使用。如果 counter 为 10，则是 10 个文件轮换。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-rotation_size",
                      "aliases" : [
                        "max_size"
                      ],
                      "text" : "rotation_size",
                      "type" : "OneOf(String(\"infinity\"),Bytesize)",
                      "default" : "50MB"
                    },
                    {
                      "doc" : "当前日志处理进程的日志级别。\n默认为 warning 级别。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-level",
                      "text" : "level",
                      "type" : "Enum(debug,info,notice,warning,error,critical,alert,emergency,all)",
                      "default" : "warning"
                    },
                    {
                      "doc" : "启用此日志处理进程。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "选择日志格式类型。 <code>text</code> 用于纯文本，<code>json</code> 用于结构化日志记录。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-formatter",
                      "aliases" : [
                        "format"
                      ],
                      "text" : "formatter",
                      "type" : "Enum(text,json)",
                      "default" : "text"
                    },
                    {
                      "doc" : "选择时间戳格式：\n- `auto`：自动选择最佳格式。`epoch` 给 JSON 日志 `rfc3339` 给自由文本格式。\n- `epoch`： 微秒精度的 Unix epoch 整形值。\n- `rfc3339`： 遵从 RFC3339 规范的字符串格式。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-timestamp_format",
                      "text" : "timestamp_format",
                      "type" : "Enum(auto,epoch,rfc3339)",
                      "default" : "auto"
                    },
                    {
                      "doc" : "日志中的时间戳使用的时间偏移量。\n可选值为：\n  - <code>system</code>: 本地系统使用的时区偏移量\n  - <code>utc</code>: 0 时区的偏移量\n  - <code>+-[hh]:[mm]</code>: 自定义偏移量，比如 \"-02:00\" 或者 \"+00:00\"\n默认值为本地系统的时区偏移量：<code>system</code>。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-time_offset",
                      "text" : "time_offset",
                      "type" : "String",
                      "default" : "system"
                    }
                  ],
                  "text" : "log_file_handler"
                },
                {
                  "doc" : "日志处理进程将日志事件打印到文件。",
                  "hash" : "T-log-S-log-file-S-log_file_handler",
                  "fields" : [
                    {
                      "doc" : "日志文件路径及名字。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-path",
                      "aliases" : [
                        "file",
                        "to"
                      ],
                      "text" : "path",
                      "type" : "String",
                      "default" : "\"${EMQX_LOG_DIR}/emqx.log\""
                    },
                    {
                      "doc" : "轮换的最大日志文件数。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-rotation_count",
                      "aliases" : [
                        "rotation"
                      ],
                      "text" : "rotation_count",
                      "type" : "Integer(1..128)",
                      "default" : "10"
                    },
                    {
                      "doc" : "此参数控制日志文件轮换。 `infinity` 意味着日志文件将无限增长，否则日志文件将在达到 `max_size`（以字节为单位）时进行轮换。\n与 rotation count 配合使用。如果 counter 为 10，则是 10 个文件轮换。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-rotation_size",
                      "aliases" : [
                        "max_size"
                      ],
                      "text" : "rotation_size",
                      "type" : "OneOf(String(\"infinity\"),Bytesize)",
                      "default" : "50MB"
                    },
                    {
                      "doc" : "当前日志处理进程的日志级别。\n默认为 warning 级别。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-level",
                      "text" : "level",
                      "type" : "Enum(debug,info,notice,warning,error,critical,alert,emergency,all)",
                      "default" : "warning"
                    },
                    {
                      "doc" : "启用此日志处理进程。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "选择日志格式类型。 <code>text</code> 用于纯文本，<code>json</code> 用于结构化日志记录。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-formatter",
                      "aliases" : [
                        "format"
                      ],
                      "text" : "formatter",
                      "type" : "Enum(text,json)",
                      "default" : "text"
                    },
                    {
                      "doc" : "选择时间戳格式：\n- `auto`：自动选择最佳格式。`epoch` 给 JSON 日志 `rfc3339` 给自由文本格式。\n- `epoch`： 微秒精度的 Unix epoch 整形值。\n- `rfc3339`： 遵从 RFC3339 规范的字符串格式。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-timestamp_format",
                      "text" : "timestamp_format",
                      "type" : "Enum(auto,epoch,rfc3339)",
                      "default" : "auto"
                    },
                    {
                      "doc" : "日志中的时间戳使用的时间偏移量。\n可选值为：\n  - <code>system</code>: 本地系统使用的时区偏移量\n  - <code>utc</code>: 0 时区的偏移量\n  - <code>+-[hh]:[mm]</code>: 自定义偏移量，比如 \"-02:00\" 或者 \"+00:00\"\n默认值为本地系统的时区偏移量：<code>system</code>。",
                      "hash" : "V-log-S-log-file-S-log_file_handler-time_offset",
                      "text" : "time_offset",
                      "type" : "String",
                      "default" : "system"
                    }
                  ],
                  "text" : "log_file_handler"
                }
              ],
              "hash" : "V-log-S-log-file",
              "aliases" : [
                "file_handlers"
              ],
              "text" : "file",
              "type" : "OneOf(Struct(log_file_handler),Map($handler_name->Struct(log_file_handler)))",
              "default" : "{level = warning}"
            },
            {
              "refs" : [
                {
                  "doc" : "日志限流功能通过在配置的时间窗口内丢弃除第一个事件外的所有事件，来减少可能泛滥的日志事件数量。\n如果 `console` 或 `file` 日志级别设置为 debug，则自动禁用限流。",
                  "hash" : "T-log-S-log-throttling-S-log_throttling",
                  "fields" : [
                    {
                      "doc" : "此配置设置控制限流消息的日志记录行为，包括但不限于像 'authorization_permission_denied' 这样的消息。\n在每个定义的时间窗口内，只有一个限流消息的实例会被记录，以防止日志泛滥。\n在每个时间窗口结束时，将生成一个摘要日志，详细说明该期间内任何限流消息的发生。\n重要的是，此设置的最短有效时间窗口为 1 秒（1s）。\n如果指定的值低于 1s，则会自动调整为 1s。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-log-S-log-throttling-S-log_throttling-time_window",
                      "text" : "time_window",
                      "type" : "Duration(s)",
                      "default" : "1m"
                    }
                  ],
                  "text" : "log_throttling"
                }
              ],
              "hash" : "V-log-S-log-throttling",
              "text" : "throttling",
              "type" : "Struct(log_throttling)"
            }
          ],
          "text" : "log"
        }
      ],
      "hash" : "V-log",
      "text" : "log",
      "type" : "Struct(log)"
    },
    {
      "refs" : [
        {
          "doc" : "EMQX 使用 <code>gen_rpc</code> 库来实现跨节点通信。<br/>\n大多数情况下，默认的配置应该可以工作，但如果你需要做一些性能优化或者实验，可以尝试调整这些参数。",
          "hash" : "T-rpc-S-rpc",
          "fields" : [
            {
              "doc" : "在 <code>sync</code> 模式下，发送端等待接收端的 ack 信号。",
              "hash" : "V-rpc-S-rpc-mode",
              "text" : "mode",
              "type" : "Enum(sync,async)",
              "default" : "async"
            },
            {
              "doc" : "集群间通信使用的传输协议。",
              "hash" : "V-rpc-S-rpc-protocol",
              "aliases" : [
                "driver"
              ],
              "text" : "protocol",
              "type" : "Enum(tcp,ssl)",
              "default" : "tcp"
            },
            {
              "doc" : "异步模式下，发送的批量消息的最大数量。",
              "hash" : "V-rpc-S-rpc-async_batch_size",
              "text" : "async_batch_size",
              "type" : "Integer",
              "default" : "256"
            },
            {
              "doc" : "<code>manual</code>: 通过 <code>tcp_server_port</code> 来发现端口。\n<br/><code>stateless</code>: 使用无状态的方式来发现端口，使用如下算法。如果节点名称是 <code>\nemqxN@127.0.0.1</code>, N 是一个数字，那么监听端口就是 5370 + N。",
              "hash" : "V-rpc-S-rpc-port_discovery",
              "text" : "port_discovery",
              "type" : "Enum(manual,stateless)",
              "default" : "stateless"
            },
            {
              "doc" : "RPC 本地服务使用的 TCP 端口。<br/>\n只有当 rpc.port_discovery 设置为 manual 时，此配置才会生效。",
              "hash" : "V-rpc-S-rpc-tcp_server_port",
              "text" : "tcp_server_port",
              "type" : "Integer",
              "default" : "5369"
            },
            {
              "doc" : "RPC 本地服务使用的监听 SSL 端口。<br/>\n只有当 rpc.port_discovery 设置为 manual 且 <code> dirver </code> 设置为 <code>ssl</code>，\n此配置才会生效。",
              "hash" : "V-rpc-S-rpc-ssl_server_port",
              "text" : "ssl_server_port",
              "type" : "Integer",
              "default" : "5369"
            },
            {
              "doc" : "设置本节点与远程节点之间的 RPC 通信通道的最大数量。",
              "hash" : "V-rpc-S-rpc-tcp_client_num",
              "text" : "tcp_client_num",
              "type" : "Integer(1..256)",
              "default" : "10"
            },
            {
              "doc" : "建立 RPC 连接的超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-rpc-S-rpc-connect_timeout",
              "text" : "connect_timeout",
              "type" : "Duration",
              "default" : "5s"
            },
            {
              "doc" : "TLS 证书文件的路径，用于验证集群节点的身份。\n只有当 <code>rpc.driver</code> 设置为 <code>ssl</code> 时，此配置才会生效。",
              "hash" : "V-rpc-S-rpc-certfile",
              "text" : "certfile",
              "type" : "String"
            },
            {
              "doc" : "<code>rpc.certfile</code> 的私钥文件的路径。<br/>\n注意：此文件内容是私钥，所以需要设置权限为 600。",
              "hash" : "V-rpc-S-rpc-keyfile",
              "text" : "keyfile",
              "type" : "String"
            },
            {
              "doc" : "验证 <code>rpc.certfile</code> 的 CA 证书文件的路径。<br/>\n注意：集群中所有节点的证书必须使用同一个 CA 签发。",
              "hash" : "V-rpc-S-rpc-cacertfile",
              "text" : "cacertfile",
              "type" : "String"
            },
            {
              "doc" : "发送 RPC 请求的超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-rpc-S-rpc-send_timeout",
              "text" : "send_timeout",
              "type" : "Duration",
              "default" : "5s"
            },
            {
              "doc" : "远程节点认证的超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-rpc-S-rpc-authentication_timeout",
              "text" : "authentication_timeout",
              "type" : "Duration",
              "default" : "5s"
            },
            {
              "doc" : "同步 RPC 的回复超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-rpc-S-rpc-call_receive_timeout",
              "text" : "call_receive_timeout",
              "type" : "Duration",
              "default" : "15s"
            },
            {
              "doc" : "broker 之间的连接在最后一条消息发送后保持打开的时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-rpc-S-rpc-socket_keepalive_idle",
              "text" : "socket_keepalive_idle",
              "type" : "Duration(s)",
              "default" : "15m"
            },
            {
              "doc" : "keepalive 消息的间隔。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-rpc-S-rpc-socket_keepalive_interval",
              "text" : "socket_keepalive_interval",
              "type" : "Duration(s)",
              "default" : "75s"
            },
            {
              "doc" : "keepalive 探测消息发送失败的次数，直到 RPC 连接被认为已经断开。",
              "hash" : "V-rpc-S-rpc-socket_keepalive_count",
              "text" : "socket_keepalive_count",
              "type" : "Integer",
              "default" : "9"
            },
            {
              "doc" : "TCP 调节参数。TCP 发送缓冲区大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
              "hash" : "V-rpc-S-rpc-socket_sndbuf",
              "text" : "socket_sndbuf",
              "type" : "Bytesize",
              "default" : "1MB"
            },
            {
              "doc" : "TCP 调节参数。TCP 接收缓冲区大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
              "hash" : "V-rpc-S-rpc-socket_recbuf",
              "text" : "socket_recbuf",
              "type" : "Bytesize",
              "default" : "1MB"
            },
            {
              "doc" : "TCP 调节参数。用户模式套接字缓冲区大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
              "hash" : "V-rpc-S-rpc-socket_buffer",
              "text" : "socket_buffer",
              "type" : "Bytesize",
              "default" : "1MB"
            },
            {
              "doc" : "兼容旧的无鉴权模式",
              "hash" : "V-rpc-S-rpc-insecure_fallback",
              "text" : "insecure_fallback",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
              "hash" : "V-rpc-S-rpc-ciphers",
              "text" : "ciphers",
              "type" : "Array(String)",
              "default" : "[]"
            },
            {
              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
              "hash" : "V-rpc-S-rpc-tls_versions",
              "text" : "tls_versions",
              "type" : "Array(String)",
              "default" : "[tlsv1.3, tlsv1.2]"
            },
            {
              "doc" : "指示 RPC 服务器监听的 IP 地址。例如，使用 <code>\"0.0.0.0\"</code> 表示 IPv4 或 <code>\"::\"</code> 表示 IPv6。",
              "hash" : "V-rpc-S-rpc-listen_address",
              "text" : "listen_address",
              "type" : "String",
              "default" : "\"0.0.0.0\""
            },
            {
              "doc" : "此设置仅在 <code>rpc.listen_address</code> 被分配了一个 IPv6 地址时有效。\n如果设置为 <code>true</code>，RPC 客户端将仅使用 IPv6 进行连接。\n否则，即使服务器位于 IPv6 上，客户端也可能选择 IPv4。",
              "hash" : "V-rpc-S-rpc-ipv6_only",
              "text" : "ipv6_only",
              "type" : "Boolean",
              "default" : "false"
            }
          ],
          "text" : "rpc"
        }
      ],
      "hash" : "V-rpc",
      "text" : "rpc",
      "type" : "Struct(rpc)"
    },
    {
      "doc" : "系统主题配置。",
      "refs" : [
        {
          "doc" : "The EMQX Broker periodically publishes its own status, message statistics,\nclient online and offline events to the system topic starting with `$SYS/`.\n\nThe following options control the behavior of `$SYS` topics.",
          "hash" : "T-sys_topics-S-sys_topics",
          "fields" : [
            {
              "doc" : "发送 `$SYS` 主题的间隔时间。",
              "hash" : "V-sys_topics-S-sys_topics-sys_msg_interval",
              "text" : "sys_msg_interval",
              "type" : "OneOf(String(\"disabled\"),Duration)",
              "default" : "1m"
            },
            {
              "doc" : "发送心跳系统消息的间隔时间，它包括：\n  - `$SYS/brokers/<node>/uptime`\n  - `$SYS/brokers/<node>/datetime`",
              "hash" : "V-sys_topics-S-sys_topics-sys_heartbeat_interval",
              "text" : "sys_heartbeat_interval",
              "type" : "OneOf(String(\"disabled\"),Duration)",
              "default" : "30s"
            },
            {
              "doc" : "客户端事件消息。",
              "refs" : [
                {
                  "doc" : "Enable or disable client lifecycle event publishing.\n\nThe following options affect MQTT clients as well as\ngateway clients. The types of the clients\nare distinguished by the topic prefix:\n\n- For the MQTT clients, the format is:\n`$SYS/broker/<node>/clients/<clientid>/<event>`\n- For the Gateway clients, it is\n`$SYS/broker/<node>/gateway/<gateway-name>/clients/<clientid>/<event>`\n",
                  "hash" : "T-sys_topics-S-sys_topics-sys_event_messages-S-event_names",
                  "fields" : [
                    {
                      "doc" : "是否开启客户端已连接事件消息。",
                      "hash" : "V-sys_topics-S-sys_topics-sys_event_messages-S-event_names-client_connected",
                      "text" : "client_connected",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "是否开启客户端已断开连接事件消息。",
                      "hash" : "V-sys_topics-S-sys_topics-sys_event_messages-S-event_names-client_disconnected",
                      "text" : "client_disconnected",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "是否开启客户端已成功订阅主题事件消息。",
                      "hash" : "V-sys_topics-S-sys_topics-sys_event_messages-S-event_names-client_subscribed",
                      "text" : "client_subscribed",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "是否开启客户端已成功取消订阅主题事件消息。",
                      "hash" : "V-sys_topics-S-sys_topics-sys_event_messages-S-event_names-client_unsubscribed",
                      "text" : "client_unsubscribed",
                      "type" : "Boolean",
                      "default" : "false"
                    }
                  ],
                  "text" : "event_names"
                }
              ],
              "hash" : "V-sys_topics-S-sys_topics-sys_event_messages",
              "text" : "sys_event_messages",
              "type" : "Struct(event_names)"
            }
          ],
          "text" : "sys_topics"
        }
      ],
      "hash" : "V-sys_topics",
      "text" : "sys_topics",
      "type" : "Struct(sys_topics)"
    },
    {
      "refs" : [
        {
          "doc" : "When the process message queue length, or the memory bytes\nreaches a certain value, the process is forced to close.\n\nNote: \"message queue\" here refers to the \"message mailbox\"\nof the Erlang process, not the `mqueue` of QoS 1 and QoS 2.",
          "hash" : "T-force_shutdown-S-force_shutdown",
          "fields" : [
            {
              "doc" : "启用 `force_shutdown` 功能。",
              "hash" : "V-force_shutdown-S-force_shutdown-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "每个在线客户端在 EMQX 服务器中都是独立的一个进程。该配置可以设为单个进程的邮箱消息队列设置最大长度，当超过该上限时，客户端会被强制下线。",
              "hash" : "V-force_shutdown-S-force_shutdown-max_mailbox_size",
              "aliases" : [
                "max_message_queue_len"
              ],
              "text" : "max_mailbox_size",
              "type" : "Integer(0..inf)",
              "default" : "1000"
            },
            {
              "doc" : "Heap 的总大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
              "hash" : "V-force_shutdown-S-force_shutdown-max_heap_size",
              "text" : "max_heap_size",
              "type" : "Bytesize",
              "default" : "32MB"
            }
          ],
          "text" : "force_shutdown"
        }
      ],
      "hash" : "V-force_shutdown",
      "text" : "force_shutdown",
      "type" : "Struct(force_shutdown)"
    },
    {
      "doc" : "与 EMQX 持久存储相关的配置。\n\nEMQX 使用持久存储来卸载各种数据到磁盘，如 MQTT 消息。",
      "refs" : [
        {
          "doc" : "与 EMQX 持久存储相关的配置。\n\nEMQX 使用持久存储来卸载各种数据到磁盘，如 MQTT 消息。",
          "hash" : "T-durable_storage-S-durable_storage",
          "fields" : [
            {
              "doc" : "与 MQTT 消息的持久存储相关的配置。",
              "refs" : [
                {
                  "doc" : "使用嵌入式 RocksDB 键值存储的内置会话存储后端。",
                  "hash" : "T-durable_storage-S-durable_storage-messages-S-builtin",
                  "fields" : [
                    {
                      "doc" : "内置后端",
                      "hash" : "V-durable_storage-S-durable_storage-messages-S-builtin-backend",
                      "text" : "backend",
                      "type" : "String(\"builtin\")",
                      "default" : "builtin"
                    },
                    {
                      "doc" : "数据库所在的文件系统目录。\n\n默认情况下，它等于 node.data_dir。",
                      "hash" : "V-durable_storage-S-durable_storage-messages-S-builtin-data_dir",
                      "text" : "data_dir",
                      "type" : "String"
                    },
                    {
                      "doc" : "内置的持久存储将数据分成多个分片。\n此配置参数定义分片的数量。\n请注意，它仅在持久存储数据库初始化期间生效。\n在数据库已经创建后更改此配置参数将不会产生任何效果。",
                      "hash" : "V-durable_storage-S-durable_storage-messages-S-builtin-n_shards",
                      "text" : "n_shards",
                      "type" : "Integer(1..+inf)",
                      "default" : "16"
                    },
                    {
                      "doc" : "存储布局是一种在磁盘上排列来自各种主题和客户端消息的方法。\n\n根据工作负载类型和主题结构的不同，可以采用不同的数据存储策略，以最大化地提高从持久存储中读取消息的效率。",
                      "refs" : [
                        {
                          "doc" : "通配符优化 布局旨在最大化覆盖大量主题的通配符订阅的吞吐量。\n\n例如，它可以处理大量客户端将数据发布到包含其客户端 ID 的主题的场景，如：sensor/%device-version%/%clientid%/temperature、sensor/%device-version%/%clientid%/pressure 等。\n此布局将自动将此类主题分组到单个流中，因此订阅包含通配符的主题过滤器（如 sensor/+/+/temperature）的客户端将能够以单个批次消费所有设备发布的消息。\n\n此布局对非通配符订阅也是有效的。",
                          "hash" : "T-durable_storage-S-durable_storage-messages-S-builtin-layout-S-layout_builtin_wildcard_optimized",
                          "fields" : [
                            {
                              "doc" : "通配符优化布局类型。",
                              "hash" : "V-durable_storage-S-durable_storage-messages-S-builtin-layout-S-layout_builtin_wildcard_optimized-type",
                              "text" : "type",
                              "type" : "String(\"wildcard_optimized\")",
                              "default" : "wildcard_optimized"
                            }
                          ],
                          "text" : "layout_builtin_wildcard_optimized"
                        }
                      ],
                      "hash" : "V-durable_storage-S-durable_storage-messages-S-builtin-layout",
                      "text" : "layout",
                      "type" : "OneOf(Struct(layout_builtin_wildcard_optimized))",
                      "default" : "{type = wildcard_optimized}"
                    }
                  ],
                  "text" : "builtin"
                }
              ],
              "hash" : "V-durable_storage-S-durable_storage-messages",
              "text" : "messages",
              "type" : "OneOf(Struct(builtin))",
              "default" : "{backend = builtin}"
            }
          ],
          "text" : "durable_storage"
        }
      ],
      "hash" : "V-durable_storage",
      "text" : "durable_storage",
      "type" : "Struct(durable_storage)"
    },
    {
      "refs" : [
        {
          "doc" : "Force garbage collection in MQTT connection process after\n they process certain number of messages or bytes of data.",
          "hash" : "T-force_gc-S-force_gc",
          "fields" : [
            {
              "doc" : "启用强制垃圾回收。",
              "hash" : "V-force_gc-S-force_gc-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "在进程收到多少消息之后，对此进程执行垃圾回收。",
              "hash" : "V-force_gc-S-force_gc-count",
              "text" : "count",
              "type" : "Integer(0..inf)",
              "default" : "16000"
            },
            {
              "doc" : "在进程处理过多少个字节之后，对此进程执行垃圾回收。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
              "hash" : "V-force_gc-S-force_gc-bytes",
              "text" : "bytes",
              "type" : "Bytesize",
              "default" : "16MB"
            }
          ],
          "text" : "force_gc"
        }
      ],
      "hash" : "V-force_gc",
      "text" : "force_gc",
      "type" : "Struct(force_gc)"
    },
    {
      "refs" : [
        {
          "doc" : "Features related to system monitoring and introspection.",
          "hash" : "T-sysmon-S-sysmon",
          "fields" : [
            {
              "refs" : [
                {
                  "doc" : "This part of the configuration is responsible for collecting\n BEAM VM events, such as long garbage collection, traffic congestion in the inter-broker\n communication, etc.",
                  "hash" : "T-sysmon-S-sysmon-vm-S-sysmon_vm",
                  "fields" : [
                    {
                      "doc" : "定期进程限制检查的时间间隔。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-sysmon-S-sysmon-vm-S-sysmon_vm-process_check_interval",
                      "text" : "process_check_interval",
                      "type" : "Duration",
                      "default" : "30s"
                    },
                    {
                      "doc" : "在发出相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
                      "hash" : "V-sysmon-S-sysmon-vm-S-sysmon_vm-process_high_watermark",
                      "text" : "process_high_watermark",
                      "type" : "String",
                      "default" : "80%"
                    },
                    {
                      "doc" : "在清除相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
                      "hash" : "V-sysmon-S-sysmon-vm-S-sysmon_vm-process_low_watermark",
                      "text" : "process_low_watermark",
                      "type" : "String",
                      "default" : "60%"
                    },
                    {
                      "doc" : "当系统检测到某个 Erlang 进程垃圾回收占用过长时间，会触发一条带有 <code>long_gc</code> 关键字的日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/long_gc</code> 的 MQTT 系统消息。",
                      "hash" : "V-sysmon-S-sysmon-vm-S-sysmon_vm-long_gc",
                      "text" : "long_gc",
                      "type" : "OneOf(String(\"disabled\"),Duration)",
                      "default" : "disabled"
                    },
                    {
                      "doc" : "启用后，如果 Erlang VM 调度器出现某个任务占用时间过长时，会触发一条带有 'long_schedule' 关键字的日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/long_schedule</code> 的 MQTT 系统消息。",
                      "hash" : "V-sysmon-S-sysmon-vm-S-sysmon_vm-long_schedule",
                      "text" : "long_schedule",
                      "type" : "OneOf(String(\"disabled\"),Duration)",
                      "default" : "240ms"
                    },
                    {
                      "doc" : "启用后，当一个 Erlang 进程申请了大量内存，系统会触发一条带有 <code>large_heap</code> 关键字的\nwarning 级别日志。同时还会发布一条主题为 <code>$SYS/sysmon/busy_dist_port</code> 的 MQTT 系统消息。",
                      "hash" : "V-sysmon-S-sysmon-vm-S-sysmon_vm-large_heap",
                      "text" : "large_heap",
                      "type" : "OneOf(String(\"disabled\"),Bytesize)",
                      "default" : "32MB"
                    },
                    {
                      "doc" : "启用后，当用于集群接点之间 RPC 的连接过忙时，会触发一条带有 <code>busy_dist_port</code> 关键字的 warning 级别日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/busy_dist_port</code> 的 MQTT 系统消息。",
                      "hash" : "V-sysmon-S-sysmon-vm-S-sysmon_vm-busy_dist_port",
                      "text" : "busy_dist_port",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "当一个系统接口（例如 TCP socket）过忙，会触发一条带有 <code>busy_port</code> 关键字的 warning 级别的日志。\n同时还会发布一条主题为 <code>$SYS/sysmon/busy_port</code> 的 MQTT 系统消息。",
                      "hash" : "V-sysmon-S-sysmon-vm-S-sysmon_vm-busy_port",
                      "text" : "busy_port",
                      "type" : "Boolean",
                      "default" : "true"
                    }
                  ],
                  "text" : "sysmon_vm"
                }
              ],
              "hash" : "V-sysmon-S-sysmon-vm",
              "text" : "vm",
              "type" : "Struct(sysmon_vm)"
            },
            {
              "refs" : [
                {
                  "doc" : "This part of the configuration is responsible for monitoring\n the host OS health, such as free memory, disk space, CPU load, etc.",
                  "hash" : "T-sysmon-S-sysmon-os-S-sysmon_os",
                  "fields" : [
                    {
                      "doc" : "定期 CPU 检查的时间间隔。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-sysmon-S-sysmon-os-S-sysmon_os-cpu_check_interval",
                      "text" : "cpu_check_interval",
                      "type" : "Duration",
                      "default" : "60s"
                    },
                    {
                      "doc" : "在发出相应警报之前可以使用多少系统 CPU 的阈值，以系统 CPU 负载的百分比表示。",
                      "hash" : "V-sysmon-S-sysmon-os-S-sysmon_os-cpu_high_watermark",
                      "text" : "cpu_high_watermark",
                      "type" : "String",
                      "default" : "80%"
                    },
                    {
                      "doc" : "在解除相应警报之前可以使用多少系统 CPU 的阈值，以系统 CPU 负载的百分比表示。",
                      "hash" : "V-sysmon-S-sysmon-os-S-sysmon_os-cpu_low_watermark",
                      "text" : "cpu_low_watermark",
                      "type" : "String",
                      "default" : "60%"
                    },
                    {
                      "doc" : "定期内存检查的时间间隔。",
                      "hash" : "V-sysmon-S-sysmon-os-S-sysmon_os-mem_check_interval",
                      "text" : "mem_check_interval",
                      "type" : "OneOf(String(\"disabled\"),Duration)",
                      "default" : "60s"
                    },
                    {
                      "doc" : "在发出相应报警之前可以分配多少系统内存的阈值，以系统内存的百分比表示。",
                      "hash" : "V-sysmon-S-sysmon-os-S-sysmon_os-sysmem_high_watermark",
                      "text" : "sysmem_high_watermark",
                      "type" : "String",
                      "default" : "70%"
                    },
                    {
                      "doc" : "在发出相应警报之前，一个 Erlang 进程可以分配多少系统内存的阈值，以系统内存的百分比表示。",
                      "hash" : "V-sysmon-S-sysmon-os-S-sysmon_os-procmem_high_watermark",
                      "text" : "procmem_high_watermark",
                      "type" : "String",
                      "default" : "5%"
                    }
                  ],
                  "text" : "sysmon_os"
                }
              ],
              "hash" : "V-sysmon-S-sysmon-os",
              "text" : "os",
              "type" : "Struct(sysmon_os)"
            }
          ],
          "text" : "sysmon"
        }
      ],
      "hash" : "V-sysmon",
      "text" : "sysmon",
      "type" : "Struct(sysmon)"
    },
    {
      "refs" : [
        {
          "doc" : "Settings for the alarms.",
          "hash" : "T-alarm-S-alarm",
          "fields" : [
            {
              "doc" : "警报激活时触发的动作。<br/>目前，支持以下操作：<code>log</code> 和 <code>publish</code>.\n<code>log</code> 将告警写入日志 (控制台或者文件).\n<code>publish</code> 将告警作为 MQTT 消息发布到系统主题:\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate</code> and\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate</code>",
              "hash" : "V-alarm-S-alarm-actions",
              "text" : "actions",
              "type" : "Array(String)",
              "default" : "[log, publish]"
            },
            {
              "doc" : "要保留为历史记录的已停用报警的最大总数。当超过此限制时，将删除最旧的停用报警，以限制总数。",
              "hash" : "V-alarm-S-alarm-size_limit",
              "text" : "size_limit",
              "type" : "Integer(1..3000)",
              "default" : "1000"
            },
            {
              "doc" : "停用报警的保留时间。报警在停用时不会立即删除，而是在保留时间之后删除。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-alarm-S-alarm-validity_period",
              "text" : "validity_period",
              "type" : "Duration",
              "default" : "24h"
            }
          ],
          "text" : "alarm"
        }
      ],
      "hash" : "V-alarm",
      "text" : "alarm",
      "type" : "Struct(alarm)"
    },
    {
      "refs" : [
        {
          "doc" : "This config controls the allowed maximum number of `CONNECT` packets received\nfrom the same clientid in a time frame defined by `window_time`.\nAfter the limit is reached, successive `CONNECT` requests are forbidden\n(banned) until the end of the time period defined by `ban_time`.",
          "hash" : "T-flapping_detect-S-flapping_detect",
          "fields" : [
            {
              "doc" : "启用抖动检测功能。",
              "hash" : "V-flapping_detect-S-flapping_detect-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "抖动检测的时间窗口。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-flapping_detect-S-flapping_detect-window_time",
              "text" : "window_time",
              "type" : "Duration",
              "default" : "1m"
            },
            {
              "doc" : "MQTT 客户端在“窗口”时间内允许的最大断开次数",
              "hash" : "V-flapping_detect-S-flapping_detect-max_count",
              "text" : "max_count",
              "type" : "Integer(0..+inf)",
              "default" : "15"
            },
            {
              "doc" : "抖动的客户端将会被禁止登录多长时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-flapping_detect-S-flapping_detect-ban_time",
              "text" : "ban_time",
              "type" : "Duration",
              "default" : "5m"
            }
          ],
          "text" : "flapping_detect"
        }
      ],
      "hash" : "V-flapping_detect",
      "text" : "flapping_detect",
      "type" : "Struct(flapping_detect)"
    },
    {
      "refs" : [
        {
          "doc" : "用于连接到外部系统的连接器。",
          "hash" : "T-connectors-S-connectors",
          "fields" : [
            {
              "doc" : "HTTP Connector Config",
              "refs" : [
                {
                  "doc" : "HTTP 动作的配置",
                  "hash" : "T-connectors-S-connectors-http-S-config_connector",
                  "fields" : [
                    {
                      "doc" : "启用 (是) 或 停用 (否) 该连接器。",
                      "hash" : "V-connectors-S-connectors-http-S-config_connector-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "连接器的标签",
                      "hash" : "V-connectors-S-connectors-http-S-config_connector-tags",
                      "text" : "tags",
                      "type" : "Array(String)"
                    },
                    {
                      "doc" : "描述性文本。",
                      "hash" : "V-connectors-S-connectors-http-S-config_connector-description",
                      "text" : "description",
                      "type" : "String",
                      "default" : "\"\""
                    },
                    {
                      "doc" : "HTTP 动作的 URL。<br/>\n此路径允许使用带有变量的模板，但变量不能用于方案、主机或端口部分。<br/>\n例如，<code> http://localhost:9901/${topic} </code> 是允许的，但\n<code> http://${host}:9901/message </code> 或 <code> http://localhost:${port}/message </code>\n是不允许的。",
                      "hash" : "V-connectors-S-connectors-http-S-config_connector-url",
                      "text" : "url",
                      "type" : "String"
                    },
                    {
                      "doc" : "HTTP 请求头。<br/>\n允许使用带有变量的模板。",
                      "hash" : "V-connectors-S-connectors-http-S-config_connector-headers",
                      "text" : "headers",
                      "type" : "Map",
                      "default" : "{accept = \"application/json\", cache-control = no-cache, connection = keep-alive, content-type = \"application/json\", keep-alive = \"timeout=5\"}"
                    },
                    {
                      "doc" : "连接到 HTTP 服务器的超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-connectors-S-connectors-http-S-config_connector-connect_timeout",
                      "text" : "connect_timeout",
                      "type" : "Duration",
                      "default" : "15s"
                    },
                    {
                      "doc" : "Deprecated since 5.0.4.<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-connectors-S-connectors-http-S-config_connector-retry_interval",
                      "text" : "retry_interval",
                      "type" : "Duration"
                    },
                    {
                      "doc" : "连接池类型。可以是random、hash之一。",
                      "hash" : "V-connectors-S-connectors-http-S-config_connector-pool_type",
                      "text" : "pool_type",
                      "type" : "Enum(random,hash)",
                      "default" : "random"
                    },
                    {
                      "doc" : "连接池大小。",
                      "hash" : "V-connectors-S-connectors-http-S-config_connector-pool_size",
                      "text" : "pool_size",
                      "type" : "Integer(1..+inf)",
                      "default" : "8"
                    },
                    {
                      "doc" : "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
                      "hash" : "V-connectors-S-connectors-http-S-config_connector-enable_pipelining",
                      "text" : "enable_pipelining",
                      "type" : "Integer(1..+inf)",
                      "default" : "100"
                    },
                    {
                      "doc" : "Deprecated since 5.3.2.",
                      "hash" : "V-connectors-S-connectors-http-S-config_connector-request",
                      "text" : "request",
                      "type" : "Map"
                    },
                    {
                      "doc" : "启用 SSL 连接。",
                      "refs" : [
                        {
                          "doc" : "Socket options for SSL clients.",
                          "hash" : "T-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl-S-ssl_client_opts-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl_client_opts"
                        }
                      ],
                      "hash" : "V-connectors-S-connectors-http-S-config_connector-ssl",
                      "text" : "ssl",
                      "type" : "Struct(ssl_client_opts)",
                      "default" : "{enable = false}"
                    },
                    {
                      "doc" : "资源相关的选项。",
                      "refs" : [
                        {
                          "doc" : "资源相关的选项。",
                          "hash" : "T-connectors-S-connectors-http-S-config_connector-resource_opts-S-connector_resource_opts",
                          "fields" : [
                            {
                              "doc" : "健康检查间隔。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-resource_opts-S-connector_resource_opts-health_check_interval",
                              "text" : "health_check_interval",
                              "type" : "Duration",
                              "default" : "15s"
                            },
                            {
                              "doc" : "是否在创建资源后立即启动资源。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-resource_opts-S-connector_resource_opts-start_after_created",
                              "text" : "start_after_created",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在回复资源创建请求前等待资源进入健康状态的时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-connectors-S-connectors-http-S-config_connector-resource_opts-S-connector_resource_opts-start_timeout",
                              "text" : "start_timeout",
                              "type" : "Duration",
                              "default" : "5s"
                            }
                          ],
                          "text" : "connector_resource_opts"
                        }
                      ],
                      "hash" : "V-connectors-S-connectors-http-S-config_connector-resource_opts",
                      "text" : "resource_opts",
                      "type" : "Struct(connector_resource_opts)",
                      "default" : "{}"
                    }
                  ],
                  "text" : "config_connector"
                }
              ],
              "hash" : "V-connectors-S-connectors-http",
              "text" : "http",
              "type" : "Map($name->Struct(config_connector))"
            },
            {
              "doc" : "MQTT Publisher Connector Config",
              "refs" : [
                {
                  "doc" : "MQTT connector 的配置。",
                  "hash" : "T-connectors-S-connectors-mqtt-S-config_connector",
                  "fields" : [
                    {
                      "doc" : "启用 (是) 或 停用 (否) 该连接器。",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "连接器的标签",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-tags",
                      "text" : "tags",
                      "type" : "Array(String)"
                    },
                    {
                      "doc" : "描述性文本。",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-description",
                      "text" : "description",
                      "type" : "String",
                      "default" : "\"\""
                    },
                    {
                      "doc" : "将发布消息到远程代理的 MQTT 客户端池的大小。<br/>\n每个 MQTT 客户端都将分配'clientid'，格式为'${clientid_prefix}:${bridge_name}:egress:${node}:${n}'\n其中'n'是池中客户端的编号。",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-pool_size",
                      "text" : "pool_size",
                      "type" : "Integer(1..+inf)",
                      "default" : "8"
                    },
                    {
                      "doc" : "资源相关的选项。",
                      "refs" : [
                        {
                          "doc" : "资源相关的选项。",
                          "hash" : "T-connectors-S-connectors-mqtt-S-config_connector-resource_opts-S-resource_opts",
                          "fields" : [
                            {
                              "doc" : "健康检查间隔。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-resource_opts-S-resource_opts-health_check_interval",
                              "text" : "health_check_interval",
                              "type" : "Duration",
                              "default" : "15s"
                            },
                            {
                              "doc" : "是否在创建资源后立即启动资源。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-resource_opts-S-resource_opts-start_after_created",
                              "text" : "start_after_created",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在回复资源创建请求前等待资源进入健康状态的时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-resource_opts-S-resource_opts-start_timeout",
                              "text" : "start_timeout",
                              "type" : "Duration",
                              "default" : "5s"
                            }
                          ],
                          "text" : "resource_opts"
                        }
                      ],
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-resource_opts",
                      "text" : "resource_opts",
                      "type" : "Struct(resource_opts)",
                      "default" : "{}"
                    },
                    {
                      "doc" : "Deprecated since v5.1.0 & e5.1.0.",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-mode",
                      "text" : "mode",
                      "type" : "Enum(cluster_shareload)"
                    },
                    {
                      "doc" : "远程 MQTT 代理的主机和端口",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-server",
                      "text" : "server",
                      "type" : "String"
                    },
                    {
                      "doc" : "附加到 egress 动作使用的 clientid 前缀（可选）。",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-clientid_prefix",
                      "text" : "clientid_prefix",
                      "type" : "String"
                    },
                    {
                      "doc" : "Deprecated since v5.0.16.",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-reconnect_interval",
                      "text" : "reconnect_interval",
                      "type" : "String"
                    },
                    {
                      "doc" : "MQTT协议版本",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-proto_ver",
                      "text" : "proto_ver",
                      "type" : "Enum(v3,v4,v5)",
                      "default" : "v4"
                    },
                    {
                      "doc" : "如果启用桥接模式。\n注意：此设置仅适用于 MQTT 协议版本早于5.0的情况，远程 MQTT\n代理必须支持此功能。\n如果将 bridge_mode 设置为true，则桥接将指示远程代理它是一个桥接而不是普通客户端。\n这意味着循环检测将更加有效，并且保留的消息将被正确传递。",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-bridge_mode",
                      "text" : "bridge_mode",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "MQTT 协议的用户名",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-username",
                      "text" : "username",
                      "type" : "String"
                    },
                    {
                      "doc" : "MQTT 协议的密码<br/>包含一些敏感信息的字符串，例如密码。当密钥以 <code>file://</code> 开头时，字符串的其余部分将被解释为包含密钥本身的文件路径：文件的整个内容（除了任何尾随的空白字符）都被视为密钥值。注意：在集群中，所有 EMQX 节点在使用 <code>file://</code> 密钥之前应该具有相同的文件。",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-password",
                      "text" : "password",
                      "type" : "Secret"
                    },
                    {
                      "doc" : "在重新连接到入口动作时是否启动新会话",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-clean_start",
                      "text" : "clean_start",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,\n- `s` for seconds,\n- `m` for minutes,\n- `h` for hours;\n<br/>or combination of whereof: `1h5m0s`",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-keepalive",
                      "text" : "keepalive",
                      "type" : "String",
                      "default" : "300s"
                    },
                    {
                      "doc" : "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,\n- `s` for seconds,\n- `m` for minutes,\n- `h` for hours;\n<br/>or combination of whereof: `1h5m0s`",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-retry_interval",
                      "text" : "retry_interval",
                      "type" : "String",
                      "default" : "15s"
                    },
                    {
                      "doc" : "MQTT 协议的最大 inflight（已发送但未确认）消息数",
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-max_inflight",
                      "text" : "max_inflight",
                      "type" : "Integer(0..+inf)",
                      "default" : "32"
                    },
                    {
                      "doc" : "启用 SSL 连接。",
                      "refs" : [
                        {
                          "doc" : "Socket options for SSL clients.",
                          "hash" : "T-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl-S-ssl_client_opts-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl_client_opts"
                        }
                      ],
                      "hash" : "V-connectors-S-connectors-mqtt-S-config_connector-ssl",
                      "text" : "ssl",
                      "type" : "Struct(ssl_client_opts)",
                      "default" : "{enable = false}"
                    }
                  ],
                  "text" : "config_connector"
                }
              ],
              "hash" : "V-connectors-S-connectors-mqtt",
              "text" : "mqtt",
              "type" : "Map($name->Struct(config_connector))"
            }
          ],
          "text" : "connectors"
        }
      ],
      "hash" : "V-connectors",
      "text" : "connectors",
      "type" : "Struct(connectors)"
    },
    {
      "refs" : [
        {
          "doc" : "数据桥接的配置信息",
          "hash" : "T-actions-S-actions",
          "fields" : [
            {
              "doc" : "HTTP Action Config",
              "refs" : [
                {
                  "doc" : "HTTP 动作的配置",
                  "hash" : "T-actions-S-actions-http-S-http_action",
                  "fields" : [
                    {
                      "doc" : "启用或停用动作",
                      "hash" : "V-actions-S-actions-http-S-http_action-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "由动作指定的连接器名称，用于选择外部资源。",
                      "hash" : "V-actions-S-actions-http-S-http_action-connector",
                      "text" : "connector",
                      "type" : "String"
                    },
                    {
                      "doc" : "连接器的标签",
                      "hash" : "V-actions-S-actions-http-S-http_action-tags",
                      "text" : "tags",
                      "type" : "Array(String)"
                    },
                    {
                      "doc" : "描述性文本。",
                      "hash" : "V-actions-S-actions-http-S-http_action-description",
                      "text" : "description",
                      "type" : "String",
                      "default" : "\"\""
                    },
                    {
                      "doc" : "HTTP 动作的参数",
                      "refs" : [
                        {
                          "doc" : "HTTP 动作的参数",
                          "hash" : "T-actions-S-actions-http-S-http_action-parameters-S-parameters_opts",
                          "fields" : [
                            {
                              "doc" : "此动作的 URL 路径。<br/>\n此路径将附加到连接器的 <code>url</code> 配置，以形成完整的 URL 地址。\n此选项允许使用带有变量的模板。例如，<code>/room/{$room_no}</code>。",
                              "hash" : "V-actions-S-actions-http-S-http_action-parameters-S-parameters_opts-path",
                              "text" : "path",
                              "type" : "String"
                            },
                            {
                              "doc" : "HTTP 请求的方法。所有可用的方法包括：post、put、get、delete。<br/>\n允许使用带有变量的模板。",
                              "hash" : "V-actions-S-actions-http-S-http_action-parameters-S-parameters_opts-method",
                              "text" : "method",
                              "type" : "Enum(post,put,get,delete)",
                              "default" : "post"
                            },
                            {
                              "doc" : "HTTP 请求头。<br/>\n允许使用带有变量的模板。",
                              "hash" : "V-actions-S-actions-http-S-http_action-parameters-S-parameters_opts-headers",
                              "text" : "headers",
                              "type" : "Map",
                              "default" : "{accept = \"application/json\", cache-control = no-cache, connection = keep-alive, content-type = \"application/json\", keep-alive = \"timeout=5\"}"
                            },
                            {
                              "doc" : "HTTP 请求的主体。<br/>\n如果未提供，主体将是所有可用字段的 JSON 对象。<br/>\n这里的“所有可用字段”是指在触发此 Webhook 时的 MQTT 消息的上下文（当 local_topic 已设置并接收到 MQTT 消息时触发），<br/>或者当此 Webhook 用作规则的动作时，在触发此 Webhook 时的事件上下文。<br/>允许使用带有变量的模板。",
                              "hash" : "V-actions-S-actions-http-S-http_action-parameters-S-parameters_opts-body",
                              "text" : "body",
                              "type" : "String"
                            },
                            {
                              "doc" : "如果发送请求时出错，最大的重试次数。",
                              "hash" : "V-actions-S-actions-http-S-http_action-parameters-S-parameters_opts-max_retries",
                              "text" : "max_retries",
                              "type" : "Integer(0..+inf)",
                              "default" : "2"
                            },
                            {
                              "doc" : "Deprecated since v5.0.26.<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-actions-S-actions-http-S-http_action-parameters-S-parameters_opts-request_timeout",
                              "text" : "request_timeout",
                              "type" : "Duration"
                            }
                          ],
                          "text" : "parameters_opts"
                        }
                      ],
                      "hash" : "V-actions-S-actions-http-S-http_action-parameters",
                      "text" : "parameters",
                      "type" : "Struct(parameters_opts)"
                    },
                    {
                      "doc" : "资源相关的选项。",
                      "refs" : [
                        {
                          "doc" : "资源相关的选项。",
                          "hash" : "T-actions-S-actions-http-S-http_action-resource_opts-S-action_resource_opts",
                          "fields" : [
                            {
                              "doc" : "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash" : "V-actions-S-actions-http-S-http_action-resource_opts-S-action_resource_opts-worker_pool_size",
                              "text" : "worker_pool_size",
                              "type" : "Integer(1..1024)",
                              "default" : "16"
                            },
                            {
                              "doc" : "健康检查间隔。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-actions-S-actions-http-S-http_action-resource_opts-S-action_resource_opts-health_check_interval",
                              "text" : "health_check_interval",
                              "type" : "Duration",
                              "default" : "15s"
                            },
                            {
                              "doc" : "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash" : "V-actions-S-actions-http-S-http_action-resource_opts-S-action_resource_opts-query_mode",
                              "text" : "query_mode",
                              "type" : "Enum(sync,async)",
                              "default" : "async"
                            },
                            {
                              "doc" : "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
                              "hash" : "V-actions-S-actions-http-S-http_action-resource_opts-S-action_resource_opts-request_ttl",
                              "aliases" : [
                                "request_timeout"
                              ],
                              "text" : "request_ttl",
                              "type" : "OneOf(Duration,String(\"infinity\"))",
                              "default" : "45s"
                            },
                            {
                              "doc" : "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash" : "V-actions-S-actions-http-S-http_action-resource_opts-S-action_resource_opts-inflight_window",
                              "aliases" : [
                                "async_inflight_window"
                              ],
                              "text" : "inflight_window",
                              "type" : "Integer(1..+inf)",
                              "default" : "100"
                            },
                            {
                              "doc" : "每个缓存 worker 允许使用的最大字节数。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-actions-S-actions-http-S-http_action-resource_opts-S-action_resource_opts-max_buffer_bytes",
                              "aliases" : [
                                "max_queue_bytes"
                              ],
                              "text" : "max_buffer_bytes",
                              "type" : "Bytesize",
                              "default" : "256MB"
                            }
                          ],
                          "text" : "action_resource_opts"
                        }
                      ],
                      "hash" : "V-actions-S-actions-http-S-http_action-resource_opts",
                      "text" : "resource_opts",
                      "type" : "Struct(action_resource_opts)",
                      "default" : "{}"
                    }
                  ],
                  "text" : "http_action"
                }
              ],
              "hash" : "V-actions-S-actions-http",
              "aliases" : [
                "webhook"
              ],
              "text" : "http",
              "type" : "Map($name->Struct(http_action))"
            },
            {
              "doc" : "MQTT Publisher Action Config",
              "refs" : [
                {
                  "doc" : "发布动作的配置。",
                  "hash" : "T-actions-S-actions-mqtt-S-mqtt_publisher_action",
                  "fields" : [
                    {
                      "doc" : "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。",
                      "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-local_topic",
                      "text" : "local_topic",
                      "type" : "String"
                    },
                    {
                      "doc" : "启用（是）或停用（否）此动作。",
                      "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "由动作指定的连接器名称，用于选择外部资源。",
                      "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-connector",
                      "text" : "connector",
                      "type" : "String"
                    },
                    {
                      "doc" : "连接器的标签",
                      "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-tags",
                      "text" : "tags",
                      "type" : "Array(String)"
                    },
                    {
                      "doc" : "描述性文本。",
                      "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-description",
                      "text" : "description",
                      "type" : "String",
                      "default" : "\"\""
                    },
                    {
                      "doc" : "动作的具体配置。",
                      "refs" : [
                        {
                          "doc" : "动作的具体配置。",
                          "hash" : "T-actions-S-actions-mqtt-S-mqtt_publisher_action-parameters-S-action_parameters",
                          "fields" : [
                            {
                              "doc" : "要转发到远程代理的主题。<br/>\n允许使用带有变量的模板。",
                              "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-parameters-S-action_parameters-topic",
                              "text" : "topic",
                              "type" : "String"
                            },
                            {
                              "doc" : "要发送的 MQTT 消息的 QoS 级别。<br/>\n允许使用带有变量的模板。",
                              "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-parameters-S-action_parameters-qos",
                              "text" : "qos",
                              "type" : "OneOf(Integer(0..2),String)",
                              "default" : "1"
                            },
                            {
                              "doc" : "要发送的 MQTT 消息的'retain'标志。<br/>\n允许使用带有变量的模板。",
                              "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-parameters-S-action_parameters-retain",
                              "text" : "retain",
                              "type" : "OneOf(Boolean,String)",
                              "default" : "false"
                            },
                            {
                              "doc" : "要发送的 MQTT 消息的有效载荷。<br/>\n允许使用带有变量的模板。",
                              "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-parameters-S-action_parameters-payload",
                              "text" : "payload",
                              "type" : "String"
                            }
                          ],
                          "text" : "action_parameters"
                        }
                      ],
                      "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-parameters",
                      "text" : "parameters",
                      "type" : "Struct(action_parameters)"
                    },
                    {
                      "doc" : "资源相关的选项。",
                      "refs" : [
                        {
                          "doc" : "资源启动相关的选项。",
                          "hash" : "T-actions-S-actions-mqtt-S-mqtt_publisher_action-resource_opts-S-action_resource_opts",
                          "fields" : [
                            {
                              "doc" : "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
                              "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-resource_opts-S-action_resource_opts-worker_pool_size",
                              "text" : "worker_pool_size",
                              "type" : "Integer(1..1024)",
                              "default" : "16"
                            },
                            {
                              "doc" : "健康检查间隔。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-resource_opts-S-action_resource_opts-health_check_interval",
                              "text" : "health_check_interval",
                              "type" : "Duration",
                              "default" : "15s"
                            },
                            {
                              "doc" : "请求模式。可选 '同步/异步'，默认为'异步'模式。",
                              "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-resource_opts-S-action_resource_opts-query_mode",
                              "text" : "query_mode",
                              "type" : "Enum(sync,async)",
                              "default" : "async"
                            },
                            {
                              "doc" : "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
                              "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-resource_opts-S-action_resource_opts-request_ttl",
                              "aliases" : [
                                "request_timeout"
                              ],
                              "text" : "request_ttl",
                              "type" : "OneOf(Duration,String(\"infinity\"))",
                              "default" : "45s"
                            },
                            {
                              "doc" : "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
                              "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-resource_opts-S-action_resource_opts-inflight_window",
                              "aliases" : [
                                "async_inflight_window"
                              ],
                              "text" : "inflight_window",
                              "type" : "Integer(1..+inf)",
                              "default" : "100"
                            },
                            {
                              "doc" : "每个缓存 worker 允许使用的最大字节数。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-resource_opts-S-action_resource_opts-max_buffer_bytes",
                              "aliases" : [
                                "max_queue_bytes"
                              ],
                              "text" : "max_buffer_bytes",
                              "type" : "Bytesize",
                              "default" : "256MB"
                            }
                          ],
                          "text" : "action_resource_opts"
                        }
                      ],
                      "hash" : "V-actions-S-actions-mqtt-S-mqtt_publisher_action-resource_opts",
                      "text" : "resource_opts",
                      "type" : "Struct(action_resource_opts)",
                      "default" : "{}"
                    }
                  ],
                  "text" : "mqtt_publisher_action"
                }
              ],
              "hash" : "V-actions-S-actions-mqtt",
              "text" : "mqtt",
              "type" : "Map($name->Struct(mqtt_publisher_action))"
            }
          ],
          "text" : "actions"
        }
      ],
      "hash" : "V-actions",
      "text" : "actions",
      "type" : "Struct(actions)"
    },
    {
      "refs" : [
        {
          "doc" : "Source 的配置。",
          "hash" : "T-sources-S-sources",
          "fields" : [
            {
              "doc" : "MQTT Subscriber Source Config",
              "refs" : [
                {
                  "doc" : "订阅 Source 的配置。",
                  "hash" : "T-sources-S-sources-mqtt-S-mqtt_subscriber_source",
                  "fields" : [
                    {
                      "doc" : "启用（是）或停用（否）此动作。",
                      "hash" : "V-sources-S-sources-mqtt-S-mqtt_subscriber_source-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "由动作指定的连接器名称，用于选择外部资源。",
                      "hash" : "V-sources-S-sources-mqtt-S-mqtt_subscriber_source-connector",
                      "text" : "connector",
                      "type" : "String"
                    },
                    {
                      "doc" : "连接器的标签",
                      "hash" : "V-sources-S-sources-mqtt-S-mqtt_subscriber_source-tags",
                      "text" : "tags",
                      "type" : "Array(String)"
                    },
                    {
                      "doc" : "描述性文本。",
                      "hash" : "V-sources-S-sources-mqtt-S-mqtt_subscriber_source-description",
                      "text" : "description",
                      "type" : "String",
                      "default" : "\"\""
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "Source 的具体配置",
                          "hash" : "T-sources-S-sources-mqtt-S-mqtt_subscriber_source-parameters-S-ingress_parameters",
                          "fields" : [
                            {
                              "doc" : "从远程代理接收消息的主题",
                              "hash" : "V-sources-S-sources-mqtt-S-mqtt_subscriber_source-parameters-S-ingress_parameters-topic",
                              "text" : "topic",
                              "type" : "String"
                            },
                            {
                              "doc" : "订阅远程代理时要使用的 QoS 级别.",
                              "hash" : "V-sources-S-sources-mqtt-S-mqtt_subscriber_source-parameters-S-ingress_parameters-qos",
                              "text" : "qos",
                              "type" : "Integer(0..2)",
                              "default" : "1"
                            }
                          ],
                          "text" : "ingress_parameters"
                        }
                      ],
                      "hash" : "V-sources-S-sources-mqtt-S-mqtt_subscriber_source-parameters",
                      "text" : "parameters",
                      "type" : "Struct(ingress_parameters)"
                    },
                    {
                      "doc" : "资源相关的选项。",
                      "refs" : [
                        {
                          "doc" : "资源启动相关的选项。",
                          "hash" : "T-sources-S-sources-mqtt-S-mqtt_subscriber_source-resource_opts-S-source_resource_opts",
                          "fields" : [
                            {
                              "doc" : "健康检查间隔。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-sources-S-sources-mqtt-S-mqtt_subscriber_source-resource_opts-S-source_resource_opts-health_check_interval",
                              "text" : "health_check_interval",
                              "type" : "Duration",
                              "default" : "15s"
                            }
                          ],
                          "text" : "source_resource_opts"
                        }
                      ],
                      "hash" : "V-sources-S-sources-mqtt-S-mqtt_subscriber_source-resource_opts",
                      "text" : "resource_opts",
                      "type" : "Struct(source_resource_opts)",
                      "default" : "{}"
                    }
                  ],
                  "text" : "mqtt_subscriber_source"
                }
              ],
              "hash" : "V-sources-S-sources-mqtt",
              "text" : "mqtt",
              "type" : "Map($name->Struct(mqtt_subscriber_source))"
            }
          ],
          "text" : "sources"
        }
      ],
      "hash" : "V-sources",
      "text" : "sources",
      "type" : "Struct(sources)"
    },
    {
      "refs" : [
        {
          "doc" : "Configuration related to handling `PUBLISH` packets with a `retain` flag set to 1.",
          "hash" : "T-retainer-S-retainer",
          "fields" : [
            {
              "doc" : "是否开启消息保留功能",
              "hash" : "V-retainer-S-retainer-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "消息保留时间。0 代表永久保留<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-retainer-S-retainer-msg_expiry_interval",
              "text" : "msg_expiry_interval",
              "type" : "Duration",
              "default" : "0s"
            },
            {
              "doc" : "消息清理间隔。0 代表不进行清理<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-retainer-S-retainer-msg_clear_interval",
              "text" : "msg_clear_interval",
              "type" : "Duration",
              "default" : "0s"
            },
            {
              "doc" : "消息大小最大值<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
              "hash" : "V-retainer-S-retainer-max_payload_size",
              "text" : "max_payload_size",
              "type" : "Bytesize",
              "default" : "1MB"
            },
            {
              "doc" : "当 PUBLISH 消息的保留标志被设置且有效载荷为空时，是否继续发布消息。\n参见：\nhttp://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718038",
              "hash" : "V-retainer-S-retainer-stop_publish_clear_msg",
              "text" : "stop_publish_clear_msg",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "发送保留消息的最大速率",
              "hash" : "V-retainer-S-retainer-delivery_rate",
              "aliases" : [
                "deliver_rate"
              ],
              "text" : "delivery_rate",
              "type" : "String",
              "default" : "\"1000/s\""
            },
            {
              "doc" : "保留消息的存储后端",
              "refs" : [
                {
                  "doc" : "Configuration of the internal database storing retained messages.",
                  "hash" : "T-retainer-S-retainer-backend-S-mnesia_config",
                  "fields" : [
                    {
                      "doc" : "后端类型",
                      "hash" : "V-retainer-S-retainer-backend-S-mnesia_config-type",
                      "text" : "type",
                      "type" : "String(\"built_in_database\")",
                      "default" : "built_in_database"
                    },
                    {
                      "doc" : "选择消息是存放在磁盘还是内存中",
                      "hash" : "V-retainer-S-retainer-backend-S-mnesia_config-storage_type",
                      "text" : "storage_type",
                      "type" : "Enum(ram,disc)",
                      "default" : "ram"
                    },
                    {
                      "doc" : "消息保留的数量上限。0 表示无限",
                      "hash" : "V-retainer-S-retainer-backend-S-mnesia_config-max_retained_messages",
                      "text" : "max_retained_messages",
                      "type" : "Integer(0..+inf)",
                      "default" : "0"
                    },
                    {
                      "doc" : "Retainer index specifications: list of arrays of positive ascending integers. Each array specifies an index. Numbers in an index specification are 1-based word positions in topics. Words from specified positions will be used for indexing.<br/>For example, it is good to have <code>[2, 4]</code> index to optimize <code>+/X/+/Y/...</code> topic wildcard subscriptions.",
                      "hash" : "V-retainer-S-retainer-backend-S-mnesia_config-index_specs",
                      "text" : "index_specs",
                      "type" : "Array(Integer)",
                      "default" : "[[1, 2, 3], [1, 3], [2, 3], [3]]"
                    },
                    {
                      "doc" : "启用内置的 Mnesia 后端。",
                      "hash" : "V-retainer-S-retainer-backend-S-mnesia_config-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    }
                  ],
                  "text" : "mnesia_config"
                }
              ],
              "hash" : "V-retainer-S-retainer-backend",
              "text" : "backend",
              "type" : "Struct(mnesia_config)"
            }
          ],
          "text" : "retainer"
        }
      ],
      "hash" : "V-retainer",
      "text" : "retainer",
      "type" : "Struct(retainer)"
    },
    {
      "refs" : [
        {
          "doc" : "配置 EMQX 节点向 EMQ 的遥测服务器发送遥测数据。\n详情请参考 https://www.emqx.io/docs/zh/v5.1/telemetry/telemetry.html。",
          "hash" : "T-telemetry-S-telemetry",
          "fields" : [
            {
              "doc" : "设置为 `false` 可以关闭数据发送。",
              "hash" : "V-telemetry-S-telemetry-enable",
              "text" : "enable",
              "type" : "Boolean"
            }
          ],
          "text" : "telemetry"
        }
      ],
      "hash" : "V-telemetry",
      "text" : "telemetry",
      "type" : "Struct(telemetry)"
    },
    {
      "refs" : [
        {
          "doc" : "Settings for the delayed module.",
          "hash" : "T-delayed-S-delayed",
          "fields" : [
            {
              "doc" : "是否启用",
              "hash" : "V-delayed-S-delayed-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "true"
            },
            {
              "doc" : "延迟消息的数量上限(0 代表不限数量)",
              "hash" : "V-delayed-S-delayed-max_delayed_messages",
              "text" : "max_delayed_messages",
              "type" : "Integer",
              "default" : "0"
            }
          ],
          "text" : "delayed"
        }
      ],
      "hash" : "V-delayed",
      "text" : "delayed",
      "type" : "Struct(delayed)"
    },
    {
      "refs" : [
        {
          "doc" : "管理 EMQX 插件。<br/>\n插件可以是 EMQX 安装包中的一部分，也可以是一个独立的安装包。<br/>\n独立安装的插件称为“外部插件”。",
          "hash" : "T-plugins-S-plugins",
          "fields" : [
            {
              "doc" : "一组插件的状态。插件将按照定义的顺序启动",
              "refs" : [
                {
                  "doc" : "描述插件的状态",
                  "hash" : "T-plugins-S-plugins-states-S-state",
                  "fields" : [
                    {
                      "doc" : "插件的名称{name}-{version}。<br/>\n它应该与插件的发布包名称一致，如 my_plugin-0.1.0。",
                      "hash" : "V-plugins-S-plugins-states-S-state-name_vsn",
                      "text" : "name_vsn",
                      "type" : "String"
                    },
                    {
                      "doc" : "设置为“true”以启用此插件。",
                      "hash" : "V-plugins-S-plugins-states-S-state-enable",
                      "text" : "enable",
                      "type" : "Boolean"
                    }
                  ],
                  "text" : "state"
                }
              ],
              "hash" : "V-plugins-S-plugins-states",
              "text" : "states",
              "type" : "Array(Struct(state))",
              "default" : "[]"
            },
            {
              "doc" : "插件安装包的目录，出于安全考虑，该目录应该值允许 <code>emqx</code>，或用于运行 EMQX 服务的用户拥有写入权限。",
              "hash" : "V-plugins-S-plugins-install_dir",
              "text" : "install_dir",
              "type" : "String",
              "default" : "plugins"
            },
            {
              "doc" : "Deprecated since 5.0.24.<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-plugins-S-plugins-check_interval",
              "text" : "check_interval",
              "type" : "Duration"
            }
          ],
          "text" : "plugins"
        }
      ],
      "hash" : "V-plugins",
      "text" : "plugins",
      "type" : "Struct(plugins)"
    },
    {
      "refs" : [
        {
          "doc" : "EMQX Dashboard 配置。",
          "hash" : "T-dashboard-S-dashboard",
          "fields" : [
            {
              "doc" : "Dashboard 监听器设置。监听器必须有唯一的端口号和 IP 地址的组合。\n例如，可以通过指定 IP 地址 0.0.0.0 来监听机器上给定端口上的所有配置的 IP 地址。\n或者，可以为每个监听器指定唯一的 IP 地址，但使用相同的端口。",
              "refs" : [
                {
                  "doc" : "Dashboard 监听器配置。",
                  "hash" : "T-dashboard-S-dashboard-listeners-S-listeners",
                  "fields" : [
                    {
                      "doc" : "TCP listeners",
                      "refs" : [
                        {
                          "doc" : "Dashboard 监听器(HTTP)配置。",
                          "hash" : "T-dashboard-S-dashboard-listeners-S-listeners-http-S-http",
                          "fields" : [
                            {
                              "doc" : "监听地址和端口，热更新此配置时，会重启 Dashboard 服务。",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-bind",
                              "text" : "bind",
                              "type" : "String",
                              "default" : "0"
                            },
                            {
                              "doc" : "TCP 协议的 Socket acceptor 池大小, 通常配置为 CPU 核数",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-num_acceptors",
                              "text" : "num_acceptors",
                              "type" : "Integer",
                              "default" : "8"
                            },
                            {
                              "doc" : "同时处理的最大连接数。",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-max_connections",
                              "text" : "max_connections",
                              "type" : "Integer",
                              "default" : "512"
                            },
                            {
                              "doc" : "排队等待连接的队列的最大长度。",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-backlog",
                              "text" : "backlog",
                              "type" : "Integer",
                              "default" : "1024"
                            },
                            {
                              "doc" : "发送响应内容的超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-send_timeout",
                              "text" : "send_timeout",
                              "type" : "Duration",
                              "default" : "10s"
                            },
                            {
                              "doc" : "启用 IPv6， 如果机器不支持 IPv6，请关闭此选项，否则会导致 Dashboard 无法使用。",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-inet6",
                              "text" : "inet6",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "当开启 inet6 功能的同时禁用 IPv4-to-IPv6 映射。该配置仅在 inet6 功能开启时有效。",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-ipv6_v6only",
                              "text" : "ipv6_v6only",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "启用 Proxy Protocol 以提取客户端连接的原始信息，要求使用了代理服务器并且代理服务器也启用 Proxy Protocol。注意：一旦开启了这个功能，就无法再处理普通的 HTTP 请求。",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-http-S-http-proxy_header",
                              "text" : "proxy_header",
                              "type" : "Boolean",
                              "default" : "false"
                            }
                          ],
                          "text" : "http"
                        }
                      ],
                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-http",
                      "text" : "http",
                      "type" : "Struct(http)"
                    },
                    {
                      "doc" : "SSL listeners",
                      "refs" : [
                        {
                          "doc" : "Dashboard 监听器(HTTPS)配置。",
                          "hash" : "T-dashboard-S-dashboard-listeners-S-listeners-https-S-https",
                          "fields" : [
                            {
                              "doc" : "监听地址和端口，热更新此配置时，会重启 Dashboard 服务。",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-bind",
                              "text" : "bind",
                              "type" : "String",
                              "default" : "0"
                            },
                            {
                              "doc" : "Dashboard 监听器的 SSL/TLS 选项。",
                              "refs" : [
                                {
                                  "doc" : "Dashboard 监听器的 SSL/TLS 选项。",
                                  "hash" : "T-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options",
                                  "fields" : [
                                    {
                                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-cacertfile",
                                      "text" : "cacertfile",
                                      "type" : "String",
                                      "default" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
                                    },
                                    {
                                      "doc" : "Deprecated since 5.1.4.",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-cacerts",
                                      "text" : "cacerts",
                                      "type" : "Boolean"
                                    },
                                    {
                                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-certfile",
                                      "text" : "certfile",
                                      "type" : "String",
                                      "default" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
                                    },
                                    {
                                      "doc" : "PEM 格式的私钥文件。",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-keyfile",
                                      "text" : "keyfile",
                                      "type" : "String",
                                      "default" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
                                    },
                                    {
                                      "doc" : "启用或禁用对等验证。",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-verify",
                                      "text" : "verify",
                                      "type" : "Enum(verify_peer,verify_none)",
                                      "default" : "verify_none"
                                    },
                                    {
                                      "doc" : "启用 TLS 会话重用。",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-reuse_sessions",
                                      "text" : "reuse_sessions",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-depth",
                                      "text" : "depth",
                                      "type" : "Integer(0..+inf)",
                                      "default" : "10"
                                    },
                                    {
                                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-password",
                                      "text" : "password",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-versions",
                                      "text" : "versions",
                                      "type" : "Array(String)",
                                      "default" : "[tlsv1.3, tlsv1.2]"
                                    },
                                    {
                                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-ciphers",
                                      "text" : "ciphers",
                                      "type" : "Array(String)",
                                      "default" : "[]"
                                    },
                                    {
                                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-secure_renegotiate",
                                      "text" : "secure_renegotiate",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-log_level",
                                      "text" : "log_level",
                                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                                      "default" : "notice"
                                    },
                                    {
                                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-hibernate_after",
                                      "text" : "hibernate_after",
                                      "type" : "Duration",
                                      "default" : "5s"
                                    },
                                    {
                                      "doc" : "如果协商使用 Diffie-Hellman 密钥交换的密码套件，则服务器将使用包含 PEM 编码的 Diffie-Hellman 参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3 不支持<code>dhfile</code>选项。",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-dhfile",
                                      "text" : "dhfile",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-honor_cipher_order",
                                      "text" : "honor_cipher_order",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-client_renegotiation",
                                      "text" : "client_renegotiation",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "握手完成所允许的最长时间<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options-S-ssl_options-handshake_timeout",
                                      "text" : "handshake_timeout",
                                      "type" : "Duration",
                                      "default" : "15s"
                                    }
                                  ],
                                  "text" : "ssl_options"
                                }
                              ],
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ssl_options",
                              "text" : "ssl_options",
                              "type" : "Struct(ssl_options)"
                            },
                            {
                              "doc" : "TCP 协议的 Socket acceptor 池大小, 通常配置为 CPU 核数",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-num_acceptors",
                              "text" : "num_acceptors",
                              "type" : "Integer",
                              "default" : "8"
                            },
                            {
                              "doc" : "同时处理的最大连接数。",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-max_connections",
                              "text" : "max_connections",
                              "type" : "Integer",
                              "default" : "512"
                            },
                            {
                              "doc" : "排队等待连接的队列的最大长度。",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-backlog",
                              "text" : "backlog",
                              "type" : "Integer",
                              "default" : "1024"
                            },
                            {
                              "doc" : "发送响应内容的超时时间。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-send_timeout",
                              "text" : "send_timeout",
                              "type" : "Duration",
                              "default" : "10s"
                            },
                            {
                              "doc" : "启用 IPv6， 如果机器不支持 IPv6，请关闭此选项，否则会导致 Dashboard 无法使用。",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-inet6",
                              "text" : "inet6",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "当开启 inet6 功能的同时禁用 IPv4-to-IPv6 映射。该配置仅在 inet6 功能开启时有效。",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-ipv6_v6only",
                              "text" : "ipv6_v6only",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "启用 Proxy Protocol 以提取客户端连接的原始信息，要求使用了代理服务器并且代理服务器也启用 Proxy Protocol。注意：一旦开启了这个功能，就无法再处理普通的 HTTP 请求。",
                              "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https-S-https-proxy_header",
                              "text" : "proxy_header",
                              "type" : "Boolean",
                              "default" : "false"
                            }
                          ],
                          "text" : "https"
                        }
                      ],
                      "hash" : "V-dashboard-S-dashboard-listeners-S-listeners-https",
                      "text" : "https",
                      "type" : "Struct(https)"
                    }
                  ],
                  "text" : "listeners"
                }
              ],
              "hash" : "V-dashboard-S-dashboard-listeners",
              "text" : "listeners",
              "type" : "Struct(listeners)"
            },
            {
              "doc" : "登录成功返回的 JWT token 过期时间，默认为 60 分钟。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-dashboard-S-dashboard-token_expired_time",
              "text" : "token_expired_time",
              "type" : "Duration",
              "default" : "60m"
            },
            {
              "doc" : "CORS（Cross-Origin Resource Sharing，跨域资源共享）允许服务器响应来自任何来源（域名、协议或端口）的请求，启用后允许另一个域名下的服务直接通过 JavaScript 调用 EMQX REST API。",
              "hash" : "V-dashboard-S-dashboard-cors",
              "text" : "cors",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "启用或禁用对 Swagger API 文档的支持。",
              "hash" : "V-dashboard-S-dashboard-swagger_support",
              "text" : "swagger_support",
              "type" : "Boolean",
              "default" : "true"
            }
          ],
          "text" : "dashboard"
        }
      ],
      "hash" : "V-dashboard",
      "text" : "dashboard",
      "type" : "Struct(dashboard)"
    },
    {
      "refs" : [
        {
          "doc" : "EMQX Gateway configuration root.",
          "hash" : "T-gateway-S-gateway",
          "fields" : [
            {
              "refs" : [
                {
                  "doc" : "The CoAP protocol gateway provides EMQX with the access capability of the CoAP protocol.\nIt allows publishing, subscribing, and receiving messages to EMQX in accordance\nwith a certain defined CoAP message format.",
                  "hash" : "T-gateway-S-gateway-coap-S-coap",
                  "fields" : [
                    {
                      "doc" : "CoAP 网关要求客户端的最小心跳间隔时间。\n当 <code>connection_required</code> 开启后，该参数用于检查客户端连接是否存活<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-gateway-S-gateway-coap-S-coap-heartbeat",
                      "text" : "heartbeat",
                      "type" : "Duration",
                      "default" : "30s"
                    },
                    {
                      "doc" : "是否开启连接模式。\n连接模式是非标准协议的功能。它维护 CoAP 客户端上线、认证、和连接状态的保持",
                      "hash" : "V-gateway-S-gateway-coap-S-coap-connection_required",
                      "text" : "connection_required",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "投递给 CoAP 客户端的通知消息类型。当客户端 Observe 一个资源（或订阅某个主题）时，网关会向客户端推送新产生的消息。其消息类型可设置为：<br/>\n\n  - non: 不需要客户端返回确认消息;<br/>\n  - con: 需要客户端返回一个确认消息;<br/>\n  - qos: 取决于消息的 QoS 等级; QoS 0 会以 `non` 类型下发，QoS 1/2 会以 `con` 类型下发",
                      "hash" : "V-gateway-S-gateway-coap-S-coap-notify_type",
                      "text" : "notify_type",
                      "type" : "Enum(non,con,qos)",
                      "default" : "qos"
                    },
                    {
                      "doc" : "客户端订阅请求的默认 QoS 等级。\n当 CoAP 客户端发起订阅请求时，如果未携带 `qos` 参数则会使用该默认值。默认值可设置为：<br/>\n  - qos0、 qos1、qos2: 设置为固定的 QoS 等级<br/>\n  - coap: 依据订阅操作的 CoAP 报文类型来动态决定<br/>\n    * 当订阅请求为 `non-confirmable` 类型时，取值为 qos0<br/>\n    * 当订阅请求为 `confirmable` 类型时，取值为 qos1",
                      "hash" : "V-gateway-S-gateway-coap-S-coap-subscribe_qos",
                      "text" : "subscribe_qos",
                      "type" : "Enum(qos0,qos1,qos2,coap)",
                      "default" : "coap"
                    },
                    {
                      "doc" : "客户端发布请求的默认 QoS 等级。\n当 CoAP 客户端发起发布请求时，如果未携带 `qos` 参数则会使用该默认值。默认值可设置为：<br/>\n\n  - qos0、qos1、qos2: 设置为固定的 QoS 等级<br/>\n  - coap: 依据发布操作的 CoAP 报文类型来动态决定<br/>\n    * 当发布请求为 `non-confirmable` 类型时，取值为 qos0<br/>\n    * 当发布请求为 `confirmable` 类型时，取值为 qos1",
                      "hash" : "V-gateway-S-gateway-coap-S-coap-publish_qos",
                      "text" : "publish_qos",
                      "type" : "Enum(qos0,qos1,qos2,coap)",
                      "default" : "coap"
                    },
                    {
                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                      "hash" : "V-gateway-S-gateway-coap-S-coap-mountpoint",
                      "text" : "mountpoint",
                      "type" : "String",
                      "default" : "\"\""
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "Settings for the UDP listeners.",
                          "hash" : "T-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners",
                          "fields" : [
                            {
                              "doc" : "从监听器名称到配置参数的映射。",
                              "refs" : [
                                {
                                  "doc" : "Settings for UDP listener.",
                                  "hash" : "T-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp-S-udp_listener",
                                  "fields" : [
                                    {
                                      "refs" : [
                                        {
                                          "doc" : "Settings for UDP sockets.",
                                          "hash" : "T-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts",
                                          "fields" : [
                                            {
                                              "doc" : "为 Socket 指定 {active, N} 选项。\n参见：https://erlang.org/doc/man/inet.html#setopts-2",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-active_n",
                                              "text" : "active_n",
                                              "type" : "Integer",
                                              "default" : "100"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间接收缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-recbuf",
                                              "text" : "recbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间发送缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-sndbuf",
                                              "text" : "sndbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在用户空间的缓冲区大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-buffer",
                                              "text" : "buffer",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "允许重用本地处于 TIME_WAIT 的端口号。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-reuseaddr",
                                              "text" : "reuseaddr",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            }
                                          ],
                                          "text" : "udp_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp-S-udp_listener-udp_options",
                                      "text" : "udp_options",
                                      "type" : "Struct(udp_opts)"
                                    },
                                    {
                                      "doc" : "是否启用该监听器。",
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp-S-udp_listener-enable",
                                      "text" : "enable",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "监听器绑定的 IP 地址或端口。",
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp-S-udp_listener-bind",
                                      "text" : "bind",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接数。",
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp-S-udp_listener-max_connections",
                                      "text" : "max_connections",
                                      "type" : "OneOf(Integer(1..+inf),String(\"infinity\"))",
                                      "default" : "1024"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接速率。",
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp-S-udp_listener-max_conn_rate",
                                      "text" : "max_conn_rate",
                                      "type" : "Integer",
                                      "default" : "1000"
                                    },
                                    {
                                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp-S-udp_listener-enable_authn",
                                      "text" : "enable_authn",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp-S-udp_listener-mountpoint",
                                      "text" : "mountpoint",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp-S-udp_listener-access_rules",
                                      "text" : "access_rules",
                                      "type" : "Array(String)",
                                      "default" : "[]"
                                    }
                                  ],
                                  "text" : "udp_listener"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-udp",
                              "text" : "udp",
                              "type" : "Map($name->Struct(udp_listener))"
                            },
                            {
                              "doc" : "从监听器名称到配置参数的映射。",
                              "refs" : [
                                {
                                  "doc" : "Settings for DTLS listener.",
                                  "hash" : "T-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener",
                                  "fields" : [
                                    {
                                      "doc" : "Acceptor 进程池大小。",
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-acceptors",
                                      "text" : "acceptors",
                                      "type" : "Integer",
                                      "default" : "16"
                                    },
                                    {
                                      "refs" : [
                                        {
                                          "doc" : "Settings for UDP sockets.",
                                          "hash" : "T-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts",
                                          "fields" : [
                                            {
                                              "doc" : "为 Socket 指定 {active, N} 选项。\n参见：https://erlang.org/doc/man/inet.html#setopts-2",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-active_n",
                                              "text" : "active_n",
                                              "type" : "Integer",
                                              "default" : "100"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间接收缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-recbuf",
                                              "text" : "recbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间发送缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-sndbuf",
                                              "text" : "sndbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在用户空间的缓冲区大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-buffer",
                                              "text" : "buffer",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "允许重用本地处于 TIME_WAIT 的端口号。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-reuseaddr",
                                              "text" : "reuseaddr",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            }
                                          ],
                                          "text" : "udp_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options",
                                      "text" : "udp_options",
                                      "type" : "Struct(udp_opts)"
                                    },
                                    {
                                      "doc" : "是否启用该监听器。",
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-enable",
                                      "text" : "enable",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "监听器绑定的 IP 地址或端口。",
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-bind",
                                      "text" : "bind",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接数。",
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-max_connections",
                                      "text" : "max_connections",
                                      "type" : "OneOf(Integer(1..+inf),String(\"infinity\"))",
                                      "default" : "1024"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接速率。",
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-max_conn_rate",
                                      "text" : "max_conn_rate",
                                      "type" : "Integer",
                                      "default" : "1000"
                                    },
                                    {
                                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-enable_authn",
                                      "text" : "enable_authn",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-mountpoint",
                                      "text" : "mountpoint",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-access_rules",
                                      "text" : "access_rules",
                                      "type" : "Array(String)",
                                      "default" : "[]"
                                    },
                                    {
                                      "doc" : "DTLS Socket 配置",
                                      "refs" : [
                                        {
                                          "doc" : "Settings for DTLS protocol.",
                                          "hash" : "T-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts",
                                          "fields" : [
                                            {
                                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-cacertfile",
                                              "text" : "cacertfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
                                            },
                                            {
                                              "doc" : "Deprecated since 5.1.4.",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-cacerts",
                                              "text" : "cacerts",
                                              "type" : "Boolean"
                                            },
                                            {
                                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-certfile",
                                              "text" : "certfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
                                            },
                                            {
                                              "doc" : "PEM 格式的私钥文件。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-keyfile",
                                              "text" : "keyfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
                                            },
                                            {
                                              "doc" : "启用或禁用对等验证。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-verify",
                                              "text" : "verify",
                                              "type" : "Enum(verify_peer,verify_none)",
                                              "default" : "verify_none"
                                            },
                                            {
                                              "doc" : "启用 TLS 会话重用。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-reuse_sessions",
                                              "text" : "reuse_sessions",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-depth",
                                              "text" : "depth",
                                              "type" : "Integer(0..+inf)",
                                              "default" : "10"
                                            },
                                            {
                                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-password",
                                              "text" : "password",
                                              "type" : "String"
                                            },
                                            {
                                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-versions",
                                              "text" : "versions",
                                              "type" : "Array(String)",
                                              "default" : "[dtlsv1.2]"
                                            },
                                            {
                                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ciphers",
                                              "text" : "ciphers",
                                              "type" : "Array(String)",
                                              "default" : "[]"
                                            },
                                            {
                                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-secure_renegotiate",
                                              "text" : "secure_renegotiate",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-log_level",
                                              "text" : "log_level",
                                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                                              "default" : "notice"
                                            },
                                            {
                                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-hibernate_after",
                                              "text" : "hibernate_after",
                                              "type" : "Duration",
                                              "default" : "5s"
                                            },
                                            {
                                              "doc" : "如果协商使用 Diffie-Hellman 密钥交换的密码套件，则服务器将使用包含 PEM 编码的 Diffie-Hellman 参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3 不支持<code>dhfile</code>选项。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-dhfile",
                                              "text" : "dhfile",
                                              "type" : "String"
                                            },
                                            {
                                              "doc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为 true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为 false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-fail_if_no_peer_cert",
                                              "text" : "fail_if_no_peer_cert",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            },
                                            {
                                              "doc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-honor_cipher_order",
                                              "text" : "honor_cipher_order",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-client_renegotiation",
                                              "text" : "client_renegotiation",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "握手完成所允许的最长时间<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-handshake_timeout",
                                              "text" : "handshake_timeout",
                                              "type" : "Duration",
                                              "default" : "15s"
                                            },
                                            {
                                              "doc" : "内存使用调优。如果启用，将在 TLS/SSL 握手完成后立即执行垃圾回收。TLS/SSL 握手建立后立即进行 GC。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-gc_after_handshake",
                                              "text" : "gc_after_handshake",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            },
                                            {
                                              "refs" : [
                                                {
                                                  "doc" : "Per listener OCSP Stapling configuration.",
                                                  "hash" : "T-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp",
                                                  "fields" : [
                                                    {
                                                      "doc" : "是否为监听器启用 OCSP Stapling 功能。 如果设置为 true，需要定义 OCSP Responder 的 URL 和证书签发者的 PEM 文件路径。",
                                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-enable_ocsp_stapling",
                                                      "text" : "enable_ocsp_stapling",
                                                      "type" : "Boolean",
                                                      "default" : "false"
                                                    },
                                                    {
                                                      "doc" : "用于检查服务器证书的 OCSP Responder 的 URL。",
                                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-responder_url",
                                                      "text" : "responder_url",
                                                      "type" : "String"
                                                    },
                                                    {
                                                      "doc" : "服务器证书的 OCSP 签发者的 PEM 编码证书。",
                                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-issuer_pem",
                                                      "text" : "issuer_pem",
                                                      "type" : "String"
                                                    },
                                                    {
                                                      "doc" : "为服务器刷新 OCSP 响应的周期。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-refresh_interval",
                                                      "text" : "refresh_interval",
                                                      "type" : "Duration",
                                                      "default" : "5m"
                                                    },
                                                    {
                                                      "doc" : "检查 OCSP 响应时，HTTP 请求的超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-refresh_http_timeout",
                                                      "text" : "refresh_http_timeout",
                                                      "type" : "Duration",
                                                      "default" : "15s"
                                                    }
                                                  ],
                                                  "text" : "ocsp"
                                                }
                                              ],
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp",
                                              "text" : "ocsp",
                                              "type" : "Struct(ocsp)"
                                            },
                                            {
                                              "doc" : "是否为该监听器启用 CRL 检查。",
                                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-enable_crl_check",
                                              "text" : "enable_crl_check",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            }
                                          ],
                                          "text" : "dtls_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options",
                                      "text" : "dtls_options",
                                      "type" : "Struct(dtls_opts)"
                                    }
                                  ],
                                  "text" : "dtls_listener"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-coap-S-coap-listeners-S-udp_listeners-dtls",
                              "text" : "dtls",
                              "type" : "Map($name->Struct(dtls_listener))"
                            }
                          ],
                          "text" : "udp_listeners"
                        }
                      ],
                      "hash" : "V-gateway-S-gateway-coap-S-coap-listeners",
                      "text" : "listeners",
                      "type" : "Struct(udp_listeners)"
                    },
                    {
                      "doc" : "是否启用该网关",
                      "hash" : "V-gateway-S-gateway-coap-S-coap-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "是否开启客户端统计",
                      "hash" : "V-gateway-S-gateway-coap-S-coap-enable_stats",
                      "text" : "enable_stats",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "客户端连接过程的空闲时间。该配置用于：\n  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。\n  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-gateway-S-gateway-coap-S-coap-idle_timeout",
                      "text" : "idle_timeout",
                      "type" : "Duration",
                      "default" : "30s"
                    },
                    {
                      "doc" : "ClientInfo 重写。",
                      "refs" : [
                        {
                          "doc" : "ClientInfo override.",
                          "hash" : "T-gateway-S-gateway-coap-S-coap-clientinfo_override-S-clientinfo_override",
                          "fields" : [
                            {
                              "doc" : "username 重写模板",
                              "hash" : "V-gateway-S-gateway-coap-S-coap-clientinfo_override-S-clientinfo_override-username",
                              "text" : "username",
                              "type" : "String"
                            },
                            {
                              "doc" : "password 重写模板",
                              "hash" : "V-gateway-S-gateway-coap-S-coap-clientinfo_override-S-clientinfo_override-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "clientid 重写模板",
                              "hash" : "V-gateway-S-gateway-coap-S-coap-clientinfo_override-S-clientinfo_override-clientid",
                              "text" : "clientid",
                              "type" : "String"
                            }
                          ],
                          "text" : "clientinfo_override"
                        }
                      ],
                      "hash" : "V-gateway-S-gateway-coap-S-coap-clientinfo_override",
                      "text" : "clientinfo_override",
                      "type" : "Struct(clientinfo_override)"
                    }
                  ],
                  "text" : "coap"
                }
              ],
              "hash" : "V-gateway-S-gateway-coap",
              "text" : "coap",
              "type" : "Struct(coap)"
            },
            {
              "refs" : [
                {
                  "doc" : "Settings for EMQX extension protocol (exproto).",
                  "hash" : "T-gateway-S-gateway-exproto-S-exproto",
                  "fields" : [
                    {
                      "doc" : "配置 ExProto 网关需要启动的 <code>ConnectionAdapter</code> 服务。\n该服务用于提供客户端的认证、发布、订阅和数据下行等功能。",
                      "refs" : [
                        {
                          "doc" : "Settings for the exproto gRPC server.",
                          "hash" : "T-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server",
                          "fields" : [
                            {
                              "doc" : "服务监听地址和端口。",
                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-bind",
                              "text" : "bind",
                              "type" : "String"
                            },
                            {
                              "doc" : "服务 SSL 配置。",
                              "refs" : [
                                {
                                  "doc" : "SSL configuration for the server.",
                                  "hash" : "T-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts",
                                  "fields" : [
                                    {
                                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-cacertfile",
                                      "text" : "cacertfile",
                                      "type" : "String",
                                      "default" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
                                    },
                                    {
                                      "doc" : "Deprecated since 5.1.4.",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-cacerts",
                                      "text" : "cacerts",
                                      "type" : "Boolean"
                                    },
                                    {
                                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-certfile",
                                      "text" : "certfile",
                                      "type" : "String",
                                      "default" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
                                    },
                                    {
                                      "doc" : "PEM 格式的私钥文件。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-keyfile",
                                      "text" : "keyfile",
                                      "type" : "String",
                                      "default" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
                                    },
                                    {
                                      "doc" : "启用或禁用对等验证。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-verify",
                                      "text" : "verify",
                                      "type" : "Enum(verify_peer,verify_none)",
                                      "default" : "verify_none"
                                    },
                                    {
                                      "doc" : "启用 TLS 会话重用。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-reuse_sessions",
                                      "text" : "reuse_sessions",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-depth",
                                      "text" : "depth",
                                      "type" : "Integer(0..+inf)",
                                      "default" : "10"
                                    },
                                    {
                                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-password",
                                      "text" : "password",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-versions",
                                      "text" : "versions",
                                      "type" : "Array(String)",
                                      "default" : "[tlsv1.3, tlsv1.2]"
                                    },
                                    {
                                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-ciphers",
                                      "text" : "ciphers",
                                      "type" : "Array(String)",
                                      "default" : "[]"
                                    },
                                    {
                                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-secure_renegotiate",
                                      "text" : "secure_renegotiate",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-log_level",
                                      "text" : "log_level",
                                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                                      "default" : "notice"
                                    },
                                    {
                                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-hibernate_after",
                                      "text" : "hibernate_after",
                                      "type" : "Duration",
                                      "default" : "5s"
                                    },
                                    {
                                      "doc" : "如果协商使用 Diffie-Hellman 密钥交换的密码套件，则服务器将使用包含 PEM 编码的 Diffie-Hellman 参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3 不支持<code>dhfile</code>选项。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-dhfile",
                                      "text" : "dhfile",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为 true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为 false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-fail_if_no_peer_cert",
                                      "text" : "fail_if_no_peer_cert",
                                      "type" : "Boolean",
                                      "default" : "false"
                                    },
                                    {
                                      "doc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-honor_cipher_order",
                                      "text" : "honor_cipher_order",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-client_renegotiation",
                                      "text" : "client_renegotiation",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "握手完成所允许的最长时间<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options-S-ssl_server_opts-handshake_timeout",
                                      "text" : "handshake_timeout",
                                      "type" : "Duration",
                                      "default" : "15s"
                                    }
                                  ],
                                  "text" : "ssl_server_opts"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-server-S-exproto_grpc_server-ssl_options",
                              "text" : "ssl_options",
                              "type" : "Struct(ssl_server_opts)"
                            }
                          ],
                          "text" : "exproto_grpc_server"
                        }
                      ],
                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-server",
                      "text" : "server",
                      "type" : "Struct(exproto_grpc_server)"
                    },
                    {
                      "doc" : "配置 ExProto 网关需要请求的 <code>ConnectionHandler</code> 服务地址。\n该服务用于给 ExProto 提供客户端的 Socket 事件处理、字节解码、订阅消息接收等功能。",
                      "refs" : [
                        {
                          "doc" : "Settings for the exproto gRPC connection handler.",
                          "hash" : "T-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler",
                          "fields" : [
                            {
                              "doc" : "对端 gRPC 服务器地址。",
                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-address",
                              "text" : "address",
                              "type" : "String"
                            },
                            {
                              "doc" : "用于处理连接事件的服务名称\n在初始版本中，我们期望使用流来提高 ConnectionHandler 中请求的效率。\n但不幸的是，不同流之间的事件顺序混乱。\n这导致 OnSocketCreated 事件可能会\n在 OnReceivedBytes 之后到达。\n因此，自 v5.0.25 起，我们添加了 `ConnectionUnaryHandler` 服务，并强制在其中使用了 Unary，以避免顺序问题。",
                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-service_name",
                              "text" : "service_name",
                              "type" : "OneOf(String(\"ConnectionHandler\"),String(\"ConnectionUnaryHandler\"))",
                              "default" : "ConnectionUnaryHandler"
                            },
                            {
                              "doc" : "gRPC 客户端的 SSL 配置。",
                              "refs" : [
                                {
                                  "doc" : "Socket options for SSL clients.",
                                  "hash" : "T-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts",
                                  "fields" : [
                                    {
                                      "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts-cacertfile",
                                      "text" : "cacertfile",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "Deprecated since 5.1.4.",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts-cacerts",
                                      "text" : "cacerts",
                                      "type" : "Boolean"
                                    },
                                    {
                                      "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts-certfile",
                                      "text" : "certfile",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "PEM 格式的私钥文件。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts-keyfile",
                                      "text" : "keyfile",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "启用或禁用对等验证。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts-verify",
                                      "text" : "verify",
                                      "type" : "Enum(verify_peer,verify_none)",
                                      "default" : "verify_none"
                                    },
                                    {
                                      "doc" : "启用 TLS 会话重用。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts-reuse_sessions",
                                      "text" : "reuse_sessions",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts-depth",
                                      "text" : "depth",
                                      "type" : "Integer(0..+inf)",
                                      "default" : "10"
                                    },
                                    {
                                      "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts-password",
                                      "text" : "password",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts-versions",
                                      "text" : "versions",
                                      "type" : "Array(String)",
                                      "default" : "[tlsv1.3, tlsv1.2]"
                                    },
                                    {
                                      "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts-ciphers",
                                      "text" : "ciphers",
                                      "type" : "Array(String)",
                                      "default" : "[]"
                                    },
                                    {
                                      "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts-secure_renegotiate",
                                      "text" : "secure_renegotiate",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts-log_level",
                                      "text" : "log_level",
                                      "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                                      "default" : "notice"
                                    },
                                    {
                                      "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts-hibernate_after",
                                      "text" : "hibernate_after",
                                      "type" : "Duration",
                                      "default" : "5s"
                                    },
                                    {
                                      "doc" : "启用 TLS。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts-enable",
                                      "text" : "enable",
                                      "type" : "Boolean",
                                      "default" : "false"
                                    },
                                    {
                                      "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options-S-ssl_client_opts-server_name_indication",
                                      "text" : "server_name_indication",
                                      "type" : "OneOf(String(\"disable\"),String)"
                                    }
                                  ],
                                  "text" : "ssl_client_opts"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler-S-exproto_grpc_handler-ssl_options",
                              "text" : "ssl_options",
                              "type" : "Struct(ssl_client_opts)"
                            }
                          ],
                          "text" : "exproto_grpc_handler"
                        }
                      ],
                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-handler",
                      "text" : "handler",
                      "type" : "Struct(exproto_grpc_handler)"
                    },
                    {
                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-mountpoint",
                      "text" : "mountpoint",
                      "type" : "String",
                      "default" : "\"\""
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "Settings for TCP and UDP listeners.",
                          "hash" : "T-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners",
                          "fields" : [
                            {
                              "doc" : "从监听器名称到配置参数的映射。",
                              "refs" : [
                                {
                                  "doc" : "Settings for TCP listener.",
                                  "hash" : "T-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener",
                                  "fields" : [
                                    {
                                      "doc" : "Acceptor 进程池大小。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-acceptors",
                                      "text" : "acceptors",
                                      "type" : "Integer",
                                      "default" : "16"
                                    },
                                    {
                                      "doc" : "TCP Socket 配置。",
                                      "refs" : [
                                        {
                                          "doc" : "TCP listener options.",
                                          "hash" : "T-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts",
                                          "fields" : [
                                            {
                                              "doc" : "为此套接字指定{active，N}选项<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-active_n",
                                              "text" : "active_n",
                                              "type" : "Integer",
                                              "default" : "100"
                                            },
                                            {
                                              "doc" : "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-backlog",
                                              "text" : "backlog",
                                              "type" : "Integer(1..+inf)",
                                              "default" : "1024"
                                            },
                                            {
                                              "doc" : "连接的 TCP 发送超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-send_timeout",
                                              "text" : "send_timeout",
                                              "type" : "Duration",
                                              "default" : "15s"
                                            },
                                            {
                                              "doc" : "如果发送超时，则关闭连接。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-send_timeout_close",
                                              "text" : "send_timeout_close",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "连接的 TCP 接收缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-recbuf",
                                              "text" : "recbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "连接的 TCP 发送缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-sndbuf",
                                              "text" : "sndbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "驱动程序使用的用户空间缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-buffer",
                                              "text" : "buffer",
                                              "type" : "Bytesize",
                                              "default" : "4KB"
                                            },
                                            {
                                              "doc" : "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-high_watermark",
                                              "text" : "high_watermark",
                                              "type" : "Bytesize",
                                              "default" : "1MB"
                                            },
                                            {
                                              "doc" : "连接的 TCP_NODELAY 标识",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-nodelay",
                                              "text" : "nodelay",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "连接的 SO_REUSEADDR 标识。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-reuseaddr",
                                              "text" : "reuseaddr",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "为 MQTT 连接在 TCP 或 SSL 上启用 TCP 保活。\n值是以逗号分隔的三个数字，格式为 'Idle,Interval,Probes'\n - Idle: 在服务器开始发送保活探测之前，连接需要处于空闲状态的秒数（Linux 默认为 7200）。\n - Interval: TCP 保活探测间隔的秒数（Linux 默认值为 75）。\n - Probes: 在放弃并终止连接之前，从另一端未获得响应时要发送的 TCP 保活探测的最大数量（Linux 默认值为 9 次）。\n例如 \"240,30,5\" 表示：在连接空闲 240 秒后发送 TCP 保活探测，每隔 30 秒发送一次，直到收到响应，如果连续丢失 5 个响应，连接应该被关闭。\n默认值为 'none'",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-keepalive",
                                              "text" : "keepalive",
                                              "type" : "String",
                                              "default" : "none"
                                            }
                                          ],
                                          "text" : "tcp_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-tcp_options",
                                      "text" : "tcp_options",
                                      "type" : "Struct(tcp_opts)"
                                    },
                                    {
                                      "doc" : "是否开启 Proxy Protocol V1/2。当 EMQX 集群部署在 HAProxy 或 Nginx 后需要获取客户端真实 IP 时常用到该选项。参考：https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-proxy_protocol",
                                      "text" : "proxy_protocol",
                                      "type" : "Boolean",
                                      "default" : "false"
                                    },
                                    {
                                      "doc" : "接收 Proxy Protocol 报文头的超时时间。如果在超时内没有收到 Proxy Protocol 包，EMQX 将关闭 TCP 连接。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-proxy_protocol_timeout",
                                      "text" : "proxy_protocol_timeout",
                                      "type" : "Duration",
                                      "default" : "3s"
                                    },
                                    {
                                      "doc" : "是否启用该监听器。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-enable",
                                      "text" : "enable",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "监听器绑定的 IP 地址或端口。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-bind",
                                      "text" : "bind",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接数。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-max_connections",
                                      "text" : "max_connections",
                                      "type" : "OneOf(Integer(1..+inf),String(\"infinity\"))",
                                      "default" : "1024"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接速率。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-max_conn_rate",
                                      "text" : "max_conn_rate",
                                      "type" : "Integer",
                                      "default" : "1000"
                                    },
                                    {
                                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-enable_authn",
                                      "text" : "enable_authn",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-mountpoint",
                                      "text" : "mountpoint",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp-S-tcp_listener-access_rules",
                                      "text" : "access_rules",
                                      "type" : "Array(String)",
                                      "default" : "[]"
                                    }
                                  ],
                                  "text" : "tcp_listener"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-tcp",
                              "text" : "tcp",
                              "type" : "Map($name->Struct(tcp_listener))"
                            },
                            {
                              "doc" : "从监听器名称到配置参数的映射。",
                              "refs" : [
                                {
                                  "doc" : "Settings for SSL listener.",
                                  "hash" : "T-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener",
                                  "fields" : [
                                    {
                                      "doc" : "Acceptor 进程池大小。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-acceptors",
                                      "text" : "acceptors",
                                      "type" : "Integer",
                                      "default" : "16"
                                    },
                                    {
                                      "doc" : "TCP Socket 配置。",
                                      "refs" : [
                                        {
                                          "doc" : "TCP listener options.",
                                          "hash" : "T-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts",
                                          "fields" : [
                                            {
                                              "doc" : "为此套接字指定{active，N}选项<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-active_n",
                                              "text" : "active_n",
                                              "type" : "Integer",
                                              "default" : "100"
                                            },
                                            {
                                              "doc" : "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-backlog",
                                              "text" : "backlog",
                                              "type" : "Integer(1..+inf)",
                                              "default" : "1024"
                                            },
                                            {
                                              "doc" : "连接的 TCP 发送超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-send_timeout",
                                              "text" : "send_timeout",
                                              "type" : "Duration",
                                              "default" : "15s"
                                            },
                                            {
                                              "doc" : "如果发送超时，则关闭连接。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-send_timeout_close",
                                              "text" : "send_timeout_close",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "连接的 TCP 接收缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-recbuf",
                                              "text" : "recbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "连接的 TCP 发送缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-sndbuf",
                                              "text" : "sndbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "驱动程序使用的用户空间缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-buffer",
                                              "text" : "buffer",
                                              "type" : "Bytesize",
                                              "default" : "4KB"
                                            },
                                            {
                                              "doc" : "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-high_watermark",
                                              "text" : "high_watermark",
                                              "type" : "Bytesize",
                                              "default" : "1MB"
                                            },
                                            {
                                              "doc" : "连接的 TCP_NODELAY 标识",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-nodelay",
                                              "text" : "nodelay",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "连接的 SO_REUSEADDR 标识。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-reuseaddr",
                                              "text" : "reuseaddr",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "为 MQTT 连接在 TCP 或 SSL 上启用 TCP 保活。\n值是以逗号分隔的三个数字，格式为 'Idle,Interval,Probes'\n - Idle: 在服务器开始发送保活探测之前，连接需要处于空闲状态的秒数（Linux 默认为 7200）。\n - Interval: TCP 保活探测间隔的秒数（Linux 默认值为 75）。\n - Probes: 在放弃并终止连接之前，从另一端未获得响应时要发送的 TCP 保活探测的最大数量（Linux 默认值为 9 次）。\n例如 \"240,30,5\" 表示：在连接空闲 240 秒后发送 TCP 保活探测，每隔 30 秒发送一次，直到收到响应，如果连续丢失 5 个响应，连接应该被关闭。\n默认值为 'none'",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-keepalive",
                                              "text" : "keepalive",
                                              "type" : "String",
                                              "default" : "none"
                                            }
                                          ],
                                          "text" : "tcp_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-tcp_options",
                                      "text" : "tcp_options",
                                      "type" : "Struct(tcp_opts)"
                                    },
                                    {
                                      "doc" : "是否开启 Proxy Protocol V1/2。当 EMQX 集群部署在 HAProxy 或 Nginx 后需要获取客户端真实 IP 时常用到该选项。参考：https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-proxy_protocol",
                                      "text" : "proxy_protocol",
                                      "type" : "Boolean",
                                      "default" : "false"
                                    },
                                    {
                                      "doc" : "接收 Proxy Protocol 报文头的超时时间。如果在超时内没有收到 Proxy Protocol 包，EMQX 将关闭 TCP 连接。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-proxy_protocol_timeout",
                                      "text" : "proxy_protocol_timeout",
                                      "type" : "Duration",
                                      "default" : "3s"
                                    },
                                    {
                                      "doc" : "是否启用该监听器。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-enable",
                                      "text" : "enable",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "监听器绑定的 IP 地址或端口。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-bind",
                                      "text" : "bind",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接数。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-max_connections",
                                      "text" : "max_connections",
                                      "type" : "OneOf(Integer(1..+inf),String(\"infinity\"))",
                                      "default" : "1024"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接速率。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-max_conn_rate",
                                      "text" : "max_conn_rate",
                                      "type" : "Integer",
                                      "default" : "1000"
                                    },
                                    {
                                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-enable_authn",
                                      "text" : "enable_authn",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-mountpoint",
                                      "text" : "mountpoint",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-access_rules",
                                      "text" : "access_rules",
                                      "type" : "Array(String)",
                                      "default" : "[]"
                                    },
                                    {
                                      "doc" : "SSL Socket 配置。",
                                      "refs" : [
                                        {
                                          "doc" : "Socket options for SSL connections.",
                                          "hash" : "T-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts",
                                          "fields" : [
                                            {
                                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-cacertfile",
                                              "text" : "cacertfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
                                            },
                                            {
                                              "doc" : "Deprecated since 5.1.4.",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-cacerts",
                                              "text" : "cacerts",
                                              "type" : "Boolean"
                                            },
                                            {
                                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-certfile",
                                              "text" : "certfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
                                            },
                                            {
                                              "doc" : "PEM 格式的私钥文件。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-keyfile",
                                              "text" : "keyfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
                                            },
                                            {
                                              "doc" : "启用或禁用对等验证。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-verify",
                                              "text" : "verify",
                                              "type" : "Enum(verify_peer,verify_none)",
                                              "default" : "verify_none"
                                            },
                                            {
                                              "doc" : "启用 TLS 会话重用。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-reuse_sessions",
                                              "text" : "reuse_sessions",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-depth",
                                              "text" : "depth",
                                              "type" : "Integer(0..+inf)",
                                              "default" : "10"
                                            },
                                            {
                                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-password",
                                              "text" : "password",
                                              "type" : "String"
                                            },
                                            {
                                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-versions",
                                              "text" : "versions",
                                              "type" : "Array(String)",
                                              "default" : "[tlsv1.3, tlsv1.2]"
                                            },
                                            {
                                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ciphers",
                                              "text" : "ciphers",
                                              "type" : "Array(String)",
                                              "default" : "[]"
                                            },
                                            {
                                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-secure_renegotiate",
                                              "text" : "secure_renegotiate",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-log_level",
                                              "text" : "log_level",
                                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                                              "default" : "notice"
                                            },
                                            {
                                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-hibernate_after",
                                              "text" : "hibernate_after",
                                              "type" : "Duration",
                                              "default" : "5s"
                                            },
                                            {
                                              "doc" : "如果协商使用 Diffie-Hellman 密钥交换的密码套件，则服务器将使用包含 PEM 编码的 Diffie-Hellman 参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3 不支持<code>dhfile</code>选项。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-dhfile",
                                              "text" : "dhfile",
                                              "type" : "String"
                                            },
                                            {
                                              "doc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为 true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为 false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-fail_if_no_peer_cert",
                                              "text" : "fail_if_no_peer_cert",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            },
                                            {
                                              "doc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-honor_cipher_order",
                                              "text" : "honor_cipher_order",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-client_renegotiation",
                                              "text" : "client_renegotiation",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "握手完成所允许的最长时间<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-handshake_timeout",
                                              "text" : "handshake_timeout",
                                              "type" : "Duration",
                                              "default" : "15s"
                                            },
                                            {
                                              "doc" : "内存使用调优。如果启用，将在 TLS/SSL 握手完成后立即执行垃圾回收。TLS/SSL 握手建立后立即进行 GC。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-gc_after_handshake",
                                              "text" : "gc_after_handshake",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            },
                                            {
                                              "refs" : [
                                                {
                                                  "doc" : "Per listener OCSP Stapling configuration.",
                                                  "hash" : "T-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp",
                                                  "fields" : [
                                                    {
                                                      "doc" : "是否为监听器启用 OCSP Stapling 功能。 如果设置为 true，需要定义 OCSP Responder 的 URL 和证书签发者的 PEM 文件路径。",
                                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-enable_ocsp_stapling",
                                                      "text" : "enable_ocsp_stapling",
                                                      "type" : "Boolean",
                                                      "default" : "false"
                                                    },
                                                    {
                                                      "doc" : "用于检查服务器证书的 OCSP Responder 的 URL。",
                                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-responder_url",
                                                      "text" : "responder_url",
                                                      "type" : "String"
                                                    },
                                                    {
                                                      "doc" : "服务器证书的 OCSP 签发者的 PEM 编码证书。",
                                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-issuer_pem",
                                                      "text" : "issuer_pem",
                                                      "type" : "String"
                                                    },
                                                    {
                                                      "doc" : "为服务器刷新 OCSP 响应的周期。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-refresh_interval",
                                                      "text" : "refresh_interval",
                                                      "type" : "Duration",
                                                      "default" : "5m"
                                                    },
                                                    {
                                                      "doc" : "检查 OCSP 响应时，HTTP 请求的超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-refresh_http_timeout",
                                                      "text" : "refresh_http_timeout",
                                                      "type" : "Duration",
                                                      "default" : "15s"
                                                    }
                                                  ],
                                                  "text" : "ocsp"
                                                }
                                              ],
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ocsp",
                                              "text" : "ocsp",
                                              "type" : "Struct(ocsp)"
                                            },
                                            {
                                              "doc" : "是否为该监听器启用 CRL 检查。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-enable_crl_check",
                                              "text" : "enable_crl_check",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            }
                                          ],
                                          "text" : "listener_ssl_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl-S-ssl_listener-ssl_options",
                                      "text" : "ssl_options",
                                      "type" : "Struct(listener_ssl_opts)"
                                    }
                                  ],
                                  "text" : "ssl_listener"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-ssl",
                              "text" : "ssl",
                              "type" : "Map($name->Struct(ssl_listener))"
                            },
                            {
                              "doc" : "从监听器名称到配置参数的映射。",
                              "refs" : [
                                {
                                  "doc" : "Settings for UDP listener.",
                                  "hash" : "T-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp-S-udp_listener",
                                  "fields" : [
                                    {
                                      "refs" : [
                                        {
                                          "doc" : "Settings for UDP sockets.",
                                          "hash" : "T-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts",
                                          "fields" : [
                                            {
                                              "doc" : "为 Socket 指定 {active, N} 选项。\n参见：https://erlang.org/doc/man/inet.html#setopts-2",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-active_n",
                                              "text" : "active_n",
                                              "type" : "Integer",
                                              "default" : "100"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间接收缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-recbuf",
                                              "text" : "recbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间发送缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-sndbuf",
                                              "text" : "sndbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在用户空间的缓冲区大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-buffer",
                                              "text" : "buffer",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "允许重用本地处于 TIME_WAIT 的端口号。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-reuseaddr",
                                              "text" : "reuseaddr",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            }
                                          ],
                                          "text" : "udp_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp-S-udp_listener-udp_options",
                                      "text" : "udp_options",
                                      "type" : "Struct(udp_opts)"
                                    },
                                    {
                                      "doc" : "是否启用该监听器。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp-S-udp_listener-enable",
                                      "text" : "enable",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "监听器绑定的 IP 地址或端口。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp-S-udp_listener-bind",
                                      "text" : "bind",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接数。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp-S-udp_listener-max_connections",
                                      "text" : "max_connections",
                                      "type" : "OneOf(Integer(1..+inf),String(\"infinity\"))",
                                      "default" : "1024"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接速率。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp-S-udp_listener-max_conn_rate",
                                      "text" : "max_conn_rate",
                                      "type" : "Integer",
                                      "default" : "1000"
                                    },
                                    {
                                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp-S-udp_listener-enable_authn",
                                      "text" : "enable_authn",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp-S-udp_listener-mountpoint",
                                      "text" : "mountpoint",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp-S-udp_listener-access_rules",
                                      "text" : "access_rules",
                                      "type" : "Array(String)",
                                      "default" : "[]"
                                    }
                                  ],
                                  "text" : "udp_listener"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-udp",
                              "text" : "udp",
                              "type" : "Map($name->Struct(udp_listener))"
                            },
                            {
                              "doc" : "从监听器名称到配置参数的映射。",
                              "refs" : [
                                {
                                  "doc" : "Settings for DTLS listener.",
                                  "hash" : "T-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener",
                                  "fields" : [
                                    {
                                      "doc" : "Acceptor 进程池大小。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-acceptors",
                                      "text" : "acceptors",
                                      "type" : "Integer",
                                      "default" : "16"
                                    },
                                    {
                                      "refs" : [
                                        {
                                          "doc" : "Settings for UDP sockets.",
                                          "hash" : "T-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts",
                                          "fields" : [
                                            {
                                              "doc" : "为 Socket 指定 {active, N} 选项。\n参见：https://erlang.org/doc/man/inet.html#setopts-2",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-active_n",
                                              "text" : "active_n",
                                              "type" : "Integer",
                                              "default" : "100"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间接收缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-recbuf",
                                              "text" : "recbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间发送缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-sndbuf",
                                              "text" : "sndbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在用户空间的缓冲区大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-buffer",
                                              "text" : "buffer",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "允许重用本地处于 TIME_WAIT 的端口号。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-reuseaddr",
                                              "text" : "reuseaddr",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            }
                                          ],
                                          "text" : "udp_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-udp_options",
                                      "text" : "udp_options",
                                      "type" : "Struct(udp_opts)"
                                    },
                                    {
                                      "doc" : "是否启用该监听器。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-enable",
                                      "text" : "enable",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "监听器绑定的 IP 地址或端口。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-bind",
                                      "text" : "bind",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接数。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-max_connections",
                                      "text" : "max_connections",
                                      "type" : "OneOf(Integer(1..+inf),String(\"infinity\"))",
                                      "default" : "1024"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接速率。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-max_conn_rate",
                                      "text" : "max_conn_rate",
                                      "type" : "Integer",
                                      "default" : "1000"
                                    },
                                    {
                                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-enable_authn",
                                      "text" : "enable_authn",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-mountpoint",
                                      "text" : "mountpoint",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-access_rules",
                                      "text" : "access_rules",
                                      "type" : "Array(String)",
                                      "default" : "[]"
                                    },
                                    {
                                      "doc" : "DTLS Socket 配置",
                                      "refs" : [
                                        {
                                          "doc" : "Settings for DTLS protocol.",
                                          "hash" : "T-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts",
                                          "fields" : [
                                            {
                                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-cacertfile",
                                              "text" : "cacertfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
                                            },
                                            {
                                              "doc" : "Deprecated since 5.1.4.",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-cacerts",
                                              "text" : "cacerts",
                                              "type" : "Boolean"
                                            },
                                            {
                                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-certfile",
                                              "text" : "certfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
                                            },
                                            {
                                              "doc" : "PEM 格式的私钥文件。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-keyfile",
                                              "text" : "keyfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
                                            },
                                            {
                                              "doc" : "启用或禁用对等验证。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-verify",
                                              "text" : "verify",
                                              "type" : "Enum(verify_peer,verify_none)",
                                              "default" : "verify_none"
                                            },
                                            {
                                              "doc" : "启用 TLS 会话重用。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-reuse_sessions",
                                              "text" : "reuse_sessions",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-depth",
                                              "text" : "depth",
                                              "type" : "Integer(0..+inf)",
                                              "default" : "10"
                                            },
                                            {
                                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-password",
                                              "text" : "password",
                                              "type" : "String"
                                            },
                                            {
                                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-versions",
                                              "text" : "versions",
                                              "type" : "Array(String)",
                                              "default" : "[dtlsv1.2]"
                                            },
                                            {
                                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ciphers",
                                              "text" : "ciphers",
                                              "type" : "Array(String)",
                                              "default" : "[]"
                                            },
                                            {
                                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-secure_renegotiate",
                                              "text" : "secure_renegotiate",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-log_level",
                                              "text" : "log_level",
                                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                                              "default" : "notice"
                                            },
                                            {
                                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-hibernate_after",
                                              "text" : "hibernate_after",
                                              "type" : "Duration",
                                              "default" : "5s"
                                            },
                                            {
                                              "doc" : "如果协商使用 Diffie-Hellman 密钥交换的密码套件，则服务器将使用包含 PEM 编码的 Diffie-Hellman 参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3 不支持<code>dhfile</code>选项。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-dhfile",
                                              "text" : "dhfile",
                                              "type" : "String"
                                            },
                                            {
                                              "doc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为 true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为 false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-fail_if_no_peer_cert",
                                              "text" : "fail_if_no_peer_cert",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            },
                                            {
                                              "doc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-honor_cipher_order",
                                              "text" : "honor_cipher_order",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-client_renegotiation",
                                              "text" : "client_renegotiation",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "握手完成所允许的最长时间<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-handshake_timeout",
                                              "text" : "handshake_timeout",
                                              "type" : "Duration",
                                              "default" : "15s"
                                            },
                                            {
                                              "doc" : "内存使用调优。如果启用，将在 TLS/SSL 握手完成后立即执行垃圾回收。TLS/SSL 握手建立后立即进行 GC。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-gc_after_handshake",
                                              "text" : "gc_after_handshake",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            },
                                            {
                                              "refs" : [
                                                {
                                                  "doc" : "Per listener OCSP Stapling configuration.",
                                                  "hash" : "T-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp",
                                                  "fields" : [
                                                    {
                                                      "doc" : "是否为监听器启用 OCSP Stapling 功能。 如果设置为 true，需要定义 OCSP Responder 的 URL 和证书签发者的 PEM 文件路径。",
                                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-enable_ocsp_stapling",
                                                      "text" : "enable_ocsp_stapling",
                                                      "type" : "Boolean",
                                                      "default" : "false"
                                                    },
                                                    {
                                                      "doc" : "用于检查服务器证书的 OCSP Responder 的 URL。",
                                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-responder_url",
                                                      "text" : "responder_url",
                                                      "type" : "String"
                                                    },
                                                    {
                                                      "doc" : "服务器证书的 OCSP 签发者的 PEM 编码证书。",
                                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-issuer_pem",
                                                      "text" : "issuer_pem",
                                                      "type" : "String"
                                                    },
                                                    {
                                                      "doc" : "为服务器刷新 OCSP 响应的周期。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-refresh_interval",
                                                      "text" : "refresh_interval",
                                                      "type" : "Duration",
                                                      "default" : "5m"
                                                    },
                                                    {
                                                      "doc" : "检查 OCSP 响应时，HTTP 请求的超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-refresh_http_timeout",
                                                      "text" : "refresh_http_timeout",
                                                      "type" : "Duration",
                                                      "default" : "15s"
                                                    }
                                                  ],
                                                  "text" : "ocsp"
                                                }
                                              ],
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp",
                                              "text" : "ocsp",
                                              "type" : "Struct(ocsp)"
                                            },
                                            {
                                              "doc" : "是否为该监听器启用 CRL 检查。",
                                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-enable_crl_check",
                                              "text" : "enable_crl_check",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            }
                                          ],
                                          "text" : "dtls_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls-S-dtls_listener-dtls_options",
                                      "text" : "dtls_options",
                                      "type" : "Struct(dtls_opts)"
                                    }
                                  ],
                                  "text" : "dtls_listener"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners-S-tcp_udp_listeners-dtls",
                              "text" : "dtls",
                              "type" : "Map($name->Struct(dtls_listener))"
                            }
                          ],
                          "text" : "tcp_udp_listeners"
                        }
                      ],
                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-listeners",
                      "text" : "listeners",
                      "type" : "Struct(tcp_udp_listeners)"
                    },
                    {
                      "doc" : "是否启用该网关",
                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "是否开启客户端统计",
                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-enable_stats",
                      "text" : "enable_stats",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "客户端连接过程的空闲时间。该配置用于：\n  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。\n  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-idle_timeout",
                      "text" : "idle_timeout",
                      "type" : "Duration",
                      "default" : "30s"
                    },
                    {
                      "doc" : "ClientInfo 重写。",
                      "refs" : [
                        {
                          "doc" : "ClientInfo override.",
                          "hash" : "T-gateway-S-gateway-exproto-S-exproto-clientinfo_override-S-clientinfo_override",
                          "fields" : [
                            {
                              "doc" : "username 重写模板",
                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-clientinfo_override-S-clientinfo_override-username",
                              "text" : "username",
                              "type" : "String"
                            },
                            {
                              "doc" : "password 重写模板",
                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-clientinfo_override-S-clientinfo_override-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "clientid 重写模板",
                              "hash" : "V-gateway-S-gateway-exproto-S-exproto-clientinfo_override-S-clientinfo_override-clientid",
                              "text" : "clientid",
                              "type" : "String"
                            }
                          ],
                          "text" : "clientinfo_override"
                        }
                      ],
                      "hash" : "V-gateway-S-gateway-exproto-S-exproto-clientinfo_override",
                      "text" : "clientinfo_override",
                      "type" : "Struct(clientinfo_override)"
                    }
                  ],
                  "text" : "exproto"
                }
              ],
              "hash" : "V-gateway-S-gateway-exproto",
              "text" : "exproto",
              "type" : "Struct(exproto)"
            },
            {
              "refs" : [
                {
                  "doc" : "The LwM2M protocol gateway.",
                  "hash" : "T-gateway-S-gateway-lwm2m-S-lwm2m",
                  "fields" : [
                    {
                      "doc" : "LwM2M Resource 定义的 XML 文件目录路径。",
                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-xml_dir",
                      "text" : "xml_dir",
                      "type" : "String"
                    },
                    {
                      "doc" : "允许 LwM2M 客户端允许设置的心跳最小值。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-lifetime_min",
                      "text" : "lifetime_min",
                      "type" : "Duration",
                      "default" : "15s"
                    },
                    {
                      "doc" : "允许 LwM2M 客户端允许设置的心跳最大值。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-lifetime_max",
                      "text" : "lifetime_max",
                      "type" : "Duration",
                      "default" : "86400s"
                    },
                    {
                      "doc" : "在 QMode 模式下，LwM2M 网关认为网络链接有效的时间窗口的值。\n例如，在收到客户端的更新信息后，在这个时间窗口内的任何信息都会直接发送到 LwM2M 客户端，而超过这个时间窗口的所有信息都会暂时储存在内存中。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-qmode_time_window",
                      "text" : "qmode_time_window",
                      "type" : "Duration(s)",
                      "default" : "22s"
                    },
                    {
                      "doc" : "自动 Observe REGISTER 数据包的 Object 列表。",
                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-auto_observe",
                      "text" : "auto_observe",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "发布 UPDATE 事件消息的策略。<br/>\n  - always: 只要收到 UPDATE 请求，就发送更新事件。<br/>\n  - contains_object_list: 仅当 UPDATE 请求携带 Object 列表时才发送更新事件。",
                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-update_msg_publish_condition",
                      "text" : "update_msg_publish_condition",
                      "type" : "Enum(always,contains_object_list)",
                      "default" : "contains_object_list"
                    },
                    {
                      "doc" : "LwM2M 网关订阅/发布消息的主题映射配置。",
                      "refs" : [
                        {
                          "doc" : "MQTT topics that correspond to LwM2M events.",
                          "hash" : "T-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators",
                          "fields" : [
                            {
                              "doc" : "下行命令主题。\n对于每个成功上线的新 LwM2M 客户端，网关会创建一个订阅关系来接收下行消息并将其发送给客户端",
                              "refs" : [
                                {
                                  "doc" : "MQTT topic that corresponds to a particular type of event.",
                                  "hash" : "T-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-command-S-translator",
                                  "fields" : [
                                    {
                                      "doc" : "主题名称",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-command-S-translator-topic",
                                      "text" : "topic",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "QoS 等级",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-command-S-translator-qos",
                                      "text" : "qos",
                                      "type" : "Integer(0..2)",
                                      "default" : "0"
                                    }
                                  ],
                                  "text" : "translator"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-command",
                              "text" : "command",
                              "type" : "Struct(translator)"
                            },
                            {
                              "doc" : "用于网关发布来自 LwM2M 客户端的确认事件的主题。",
                              "refs" : [
                                {
                                  "doc" : "MQTT topic that corresponds to a particular type of event.",
                                  "hash" : "T-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-response-S-translator",
                                  "fields" : [
                                    {
                                      "doc" : "主题名称",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-response-S-translator-topic",
                                      "text" : "topic",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "QoS 等级",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-response-S-translator-qos",
                                      "text" : "qos",
                                      "type" : "Integer(0..2)",
                                      "default" : "0"
                                    }
                                  ],
                                  "text" : "translator"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-response",
                              "text" : "response",
                              "type" : "Struct(translator)"
                            },
                            {
                              "doc" : "用于发布来自 LwM2M 客户端的通知事件的主题。\n在成功 Observe 到 LwM2M 客户端的资源后，如果客户端报告任何资源状态的变化，网关将通过该主题发送通知事件",
                              "refs" : [
                                {
                                  "doc" : "MQTT topic that corresponds to a particular type of event.",
                                  "hash" : "T-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-notify-S-translator",
                                  "fields" : [
                                    {
                                      "doc" : "主题名称",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-notify-S-translator-topic",
                                      "text" : "topic",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "QoS 等级",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-notify-S-translator-qos",
                                      "text" : "qos",
                                      "type" : "Integer(0..2)",
                                      "default" : "0"
                                    }
                                  ],
                                  "text" : "translator"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-notify",
                              "text" : "notify",
                              "type" : "Struct(translator)"
                            },
                            {
                              "doc" : "用于发布来自 LwM2M 客户端的注册事件的主题。",
                              "refs" : [
                                {
                                  "doc" : "MQTT topic that corresponds to a particular type of event.",
                                  "hash" : "T-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-register-S-translator",
                                  "fields" : [
                                    {
                                      "doc" : "主题名称",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-register-S-translator-topic",
                                      "text" : "topic",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "QoS 等级",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-register-S-translator-qos",
                                      "text" : "qos",
                                      "type" : "Integer(0..2)",
                                      "default" : "0"
                                    }
                                  ],
                                  "text" : "translator"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-register",
                              "text" : "register",
                              "type" : "Struct(translator)"
                            },
                            {
                              "doc" : "用于发布来自 LwM2M 客户端的更新事件的主题。",
                              "refs" : [
                                {
                                  "doc" : "MQTT topic that corresponds to a particular type of event.",
                                  "hash" : "T-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-update-S-translator",
                                  "fields" : [
                                    {
                                      "doc" : "主题名称",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-update-S-translator-topic",
                                      "text" : "topic",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "QoS 等级",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-update-S-translator-qos",
                                      "text" : "qos",
                                      "type" : "Integer(0..2)",
                                      "default" : "0"
                                    }
                                  ],
                                  "text" : "translator"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators-S-lwm2m_translators-update",
                              "text" : "update",
                              "type" : "Struct(translator)"
                            }
                          ],
                          "text" : "lwm2m_translators"
                        }
                      ],
                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-translators",
                      "text" : "translators",
                      "type" : "Struct(lwm2m_translators)"
                    },
                    {
                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-mountpoint",
                      "text" : "mountpoint",
                      "type" : "String",
                      "default" : "\"lwm2m/${endpoint_name}/\""
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "Settings for the UDP listeners.",
                          "hash" : "T-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners",
                          "fields" : [
                            {
                              "doc" : "从监听器名称到配置参数的映射。",
                              "refs" : [
                                {
                                  "doc" : "Settings for UDP listener.",
                                  "hash" : "T-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp-S-udp_listener",
                                  "fields" : [
                                    {
                                      "refs" : [
                                        {
                                          "doc" : "Settings for UDP sockets.",
                                          "hash" : "T-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts",
                                          "fields" : [
                                            {
                                              "doc" : "为 Socket 指定 {active, N} 选项。\n参见：https://erlang.org/doc/man/inet.html#setopts-2",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-active_n",
                                              "text" : "active_n",
                                              "type" : "Integer",
                                              "default" : "100"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间接收缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-recbuf",
                                              "text" : "recbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间发送缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-sndbuf",
                                              "text" : "sndbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在用户空间的缓冲区大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-buffer",
                                              "text" : "buffer",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "允许重用本地处于 TIME_WAIT 的端口号。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-reuseaddr",
                                              "text" : "reuseaddr",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            }
                                          ],
                                          "text" : "udp_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp-S-udp_listener-udp_options",
                                      "text" : "udp_options",
                                      "type" : "Struct(udp_opts)"
                                    },
                                    {
                                      "doc" : "是否启用该监听器。",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp-S-udp_listener-enable",
                                      "text" : "enable",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "监听器绑定的 IP 地址或端口。",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp-S-udp_listener-bind",
                                      "text" : "bind",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接数。",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp-S-udp_listener-max_connections",
                                      "text" : "max_connections",
                                      "type" : "OneOf(Integer(1..+inf),String(\"infinity\"))",
                                      "default" : "1024"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接速率。",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp-S-udp_listener-max_conn_rate",
                                      "text" : "max_conn_rate",
                                      "type" : "Integer",
                                      "default" : "1000"
                                    },
                                    {
                                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp-S-udp_listener-enable_authn",
                                      "text" : "enable_authn",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp-S-udp_listener-mountpoint",
                                      "text" : "mountpoint",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp-S-udp_listener-access_rules",
                                      "text" : "access_rules",
                                      "type" : "Array(String)",
                                      "default" : "[]"
                                    }
                                  ],
                                  "text" : "udp_listener"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-udp",
                              "text" : "udp",
                              "type" : "Map($name->Struct(udp_listener))"
                            },
                            {
                              "doc" : "从监听器名称到配置参数的映射。",
                              "refs" : [
                                {
                                  "doc" : "Settings for DTLS listener.",
                                  "hash" : "T-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener",
                                  "fields" : [
                                    {
                                      "doc" : "Acceptor 进程池大小。",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-acceptors",
                                      "text" : "acceptors",
                                      "type" : "Integer",
                                      "default" : "16"
                                    },
                                    {
                                      "refs" : [
                                        {
                                          "doc" : "Settings for UDP sockets.",
                                          "hash" : "T-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts",
                                          "fields" : [
                                            {
                                              "doc" : "为 Socket 指定 {active, N} 选项。\n参见：https://erlang.org/doc/man/inet.html#setopts-2",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-active_n",
                                              "text" : "active_n",
                                              "type" : "Integer",
                                              "default" : "100"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间接收缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-recbuf",
                                              "text" : "recbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间发送缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-sndbuf",
                                              "text" : "sndbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在用户空间的缓冲区大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-buffer",
                                              "text" : "buffer",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "允许重用本地处于 TIME_WAIT 的端口号。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-reuseaddr",
                                              "text" : "reuseaddr",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            }
                                          ],
                                          "text" : "udp_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options",
                                      "text" : "udp_options",
                                      "type" : "Struct(udp_opts)"
                                    },
                                    {
                                      "doc" : "是否启用该监听器。",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-enable",
                                      "text" : "enable",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "监听器绑定的 IP 地址或端口。",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-bind",
                                      "text" : "bind",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接数。",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-max_connections",
                                      "text" : "max_connections",
                                      "type" : "OneOf(Integer(1..+inf),String(\"infinity\"))",
                                      "default" : "1024"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接速率。",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-max_conn_rate",
                                      "text" : "max_conn_rate",
                                      "type" : "Integer",
                                      "default" : "1000"
                                    },
                                    {
                                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-enable_authn",
                                      "text" : "enable_authn",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-mountpoint",
                                      "text" : "mountpoint",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-access_rules",
                                      "text" : "access_rules",
                                      "type" : "Array(String)",
                                      "default" : "[]"
                                    },
                                    {
                                      "doc" : "DTLS Socket 配置",
                                      "refs" : [
                                        {
                                          "doc" : "Settings for DTLS protocol.",
                                          "hash" : "T-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts",
                                          "fields" : [
                                            {
                                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-cacertfile",
                                              "text" : "cacertfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
                                            },
                                            {
                                              "doc" : "Deprecated since 5.1.4.",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-cacerts",
                                              "text" : "cacerts",
                                              "type" : "Boolean"
                                            },
                                            {
                                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-certfile",
                                              "text" : "certfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
                                            },
                                            {
                                              "doc" : "PEM 格式的私钥文件。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-keyfile",
                                              "text" : "keyfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
                                            },
                                            {
                                              "doc" : "启用或禁用对等验证。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-verify",
                                              "text" : "verify",
                                              "type" : "Enum(verify_peer,verify_none)",
                                              "default" : "verify_none"
                                            },
                                            {
                                              "doc" : "启用 TLS 会话重用。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-reuse_sessions",
                                              "text" : "reuse_sessions",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-depth",
                                              "text" : "depth",
                                              "type" : "Integer(0..+inf)",
                                              "default" : "10"
                                            },
                                            {
                                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-password",
                                              "text" : "password",
                                              "type" : "String"
                                            },
                                            {
                                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-versions",
                                              "text" : "versions",
                                              "type" : "Array(String)",
                                              "default" : "[dtlsv1.2]"
                                            },
                                            {
                                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ciphers",
                                              "text" : "ciphers",
                                              "type" : "Array(String)",
                                              "default" : "[]"
                                            },
                                            {
                                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-secure_renegotiate",
                                              "text" : "secure_renegotiate",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-log_level",
                                              "text" : "log_level",
                                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                                              "default" : "notice"
                                            },
                                            {
                                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-hibernate_after",
                                              "text" : "hibernate_after",
                                              "type" : "Duration",
                                              "default" : "5s"
                                            },
                                            {
                                              "doc" : "如果协商使用 Diffie-Hellman 密钥交换的密码套件，则服务器将使用包含 PEM 编码的 Diffie-Hellman 参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3 不支持<code>dhfile</code>选项。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-dhfile",
                                              "text" : "dhfile",
                                              "type" : "String"
                                            },
                                            {
                                              "doc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为 true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为 false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-fail_if_no_peer_cert",
                                              "text" : "fail_if_no_peer_cert",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            },
                                            {
                                              "doc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-honor_cipher_order",
                                              "text" : "honor_cipher_order",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-client_renegotiation",
                                              "text" : "client_renegotiation",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "握手完成所允许的最长时间<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-handshake_timeout",
                                              "text" : "handshake_timeout",
                                              "type" : "Duration",
                                              "default" : "15s"
                                            },
                                            {
                                              "doc" : "内存使用调优。如果启用，将在 TLS/SSL 握手完成后立即执行垃圾回收。TLS/SSL 握手建立后立即进行 GC。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-gc_after_handshake",
                                              "text" : "gc_after_handshake",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            },
                                            {
                                              "refs" : [
                                                {
                                                  "doc" : "Per listener OCSP Stapling configuration.",
                                                  "hash" : "T-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp",
                                                  "fields" : [
                                                    {
                                                      "doc" : "是否为监听器启用 OCSP Stapling 功能。 如果设置为 true，需要定义 OCSP Responder 的 URL 和证书签发者的 PEM 文件路径。",
                                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-enable_ocsp_stapling",
                                                      "text" : "enable_ocsp_stapling",
                                                      "type" : "Boolean",
                                                      "default" : "false"
                                                    },
                                                    {
                                                      "doc" : "用于检查服务器证书的 OCSP Responder 的 URL。",
                                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-responder_url",
                                                      "text" : "responder_url",
                                                      "type" : "String"
                                                    },
                                                    {
                                                      "doc" : "服务器证书的 OCSP 签发者的 PEM 编码证书。",
                                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-issuer_pem",
                                                      "text" : "issuer_pem",
                                                      "type" : "String"
                                                    },
                                                    {
                                                      "doc" : "为服务器刷新 OCSP 响应的周期。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-refresh_interval",
                                                      "text" : "refresh_interval",
                                                      "type" : "Duration",
                                                      "default" : "5m"
                                                    },
                                                    {
                                                      "doc" : "检查 OCSP 响应时，HTTP 请求的超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-refresh_http_timeout",
                                                      "text" : "refresh_http_timeout",
                                                      "type" : "Duration",
                                                      "default" : "15s"
                                                    }
                                                  ],
                                                  "text" : "ocsp"
                                                }
                                              ],
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp",
                                              "text" : "ocsp",
                                              "type" : "Struct(ocsp)"
                                            },
                                            {
                                              "doc" : "是否为该监听器启用 CRL 检查。",
                                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-enable_crl_check",
                                              "text" : "enable_crl_check",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            }
                                          ],
                                          "text" : "dtls_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options",
                                      "text" : "dtls_options",
                                      "type" : "Struct(dtls_opts)"
                                    }
                                  ],
                                  "text" : "dtls_listener"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners-S-udp_listeners-dtls",
                              "text" : "dtls",
                              "type" : "Map($name->Struct(dtls_listener))"
                            }
                          ],
                          "text" : "udp_listeners"
                        }
                      ],
                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-listeners",
                      "text" : "listeners",
                      "type" : "Struct(udp_listeners)"
                    },
                    {
                      "doc" : "是否启用该网关",
                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "是否开启客户端统计",
                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-enable_stats",
                      "text" : "enable_stats",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "客户端连接过程的空闲时间。该配置用于：\n  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。\n  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-idle_timeout",
                      "text" : "idle_timeout",
                      "type" : "Duration",
                      "default" : "30s"
                    },
                    {
                      "doc" : "ClientInfo 重写。",
                      "refs" : [
                        {
                          "doc" : "ClientInfo override.",
                          "hash" : "T-gateway-S-gateway-lwm2m-S-lwm2m-clientinfo_override-S-clientinfo_override",
                          "fields" : [
                            {
                              "doc" : "username 重写模板",
                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-clientinfo_override-S-clientinfo_override-username",
                              "text" : "username",
                              "type" : "String"
                            },
                            {
                              "doc" : "password 重写模板",
                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-clientinfo_override-S-clientinfo_override-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "clientid 重写模板",
                              "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-clientinfo_override-S-clientinfo_override-clientid",
                              "text" : "clientid",
                              "type" : "String"
                            }
                          ],
                          "text" : "clientinfo_override"
                        }
                      ],
                      "hash" : "V-gateway-S-gateway-lwm2m-S-lwm2m-clientinfo_override",
                      "text" : "clientinfo_override",
                      "type" : "Struct(clientinfo_override)"
                    }
                  ],
                  "text" : "lwm2m"
                }
              ],
              "hash" : "V-gateway-S-gateway-lwm2m",
              "text" : "lwm2m",
              "type" : "Struct(lwm2m)"
            },
            {
              "refs" : [
                {
                  "doc" : "The MQTT-SN (MQTT for Sensor Networks) protocol gateway.",
                  "hash" : "T-gateway-S-gateway-mqttsn-S-mqttsn",
                  "fields" : [
                    {
                      "doc" : "MQTT-SN 网关 ID。\n当 <code>broadcast</code> 打开时，MQTT-SN 网关会使用该 ID 来广播 ADVERTISE 消息",
                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-gateway_id",
                      "text" : "gateway_id",
                      "type" : "Integer",
                      "default" : "1"
                    },
                    {
                      "doc" : "是否周期性广播 ADVERTISE 消息",
                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-broadcast",
                      "text" : "broadcast",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "是否允许无连接的客户端发送 QoS 等于 -1 的消息。\n该功能主要用于支持轻量的 MQTT-SN 客户端实现，它不会向网关建立连接，注册主题，也不会发起订阅；它只使用 QoS 为 -1 来发布消息",
                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-enable_qos3",
                      "text" : "enable_qos3",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "在会话被重用后，网关是否主动向客户端注册对已订阅主题名称",
                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-subs_resume",
                      "text" : "subs_resume",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "预定义主题列表。\n预定义的主题列表，是一组 主题 ID 和 主题名称 的映射关系。使用预先定义的主题列表，可以减少 MQTT-SN 客户端和网关对于固定主题的注册请求",
                      "refs" : [
                        {
                          "doc" : "The pre-defined topic name corresponding to the pre-defined topic\nID of N.\n\nNote: the pre-defined topic ID of 0 is reserved.",
                          "hash" : "T-gateway-S-gateway-mqttsn-S-mqttsn-predefined-S-mqttsn_predefined",
                          "fields" : [
                            {
                              "doc" : "主题 ID。范围：1-65535",
                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-predefined-S-mqttsn_predefined-id",
                              "text" : "id",
                              "type" : "Integer(1..1024)"
                            },
                            {
                              "doc" : "主题名称。注：不支持通配符",
                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-predefined-S-mqttsn_predefined-topic",
                              "text" : "topic",
                              "type" : "String"
                            }
                          ],
                          "text" : "mqttsn_predefined"
                        }
                      ],
                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-predefined",
                      "text" : "predefined",
                      "type" : "Array(Struct(mqttsn_predefined))",
                      "default" : "[]"
                    },
                    {
                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-mountpoint",
                      "text" : "mountpoint",
                      "type" : "String",
                      "default" : "\"\""
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "Settings for the UDP listeners.",
                          "hash" : "T-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners",
                          "fields" : [
                            {
                              "doc" : "从监听器名称到配置参数的映射。",
                              "refs" : [
                                {
                                  "doc" : "Settings for UDP listener.",
                                  "hash" : "T-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp-S-udp_listener",
                                  "fields" : [
                                    {
                                      "refs" : [
                                        {
                                          "doc" : "Settings for UDP sockets.",
                                          "hash" : "T-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts",
                                          "fields" : [
                                            {
                                              "doc" : "为 Socket 指定 {active, N} 选项。\n参见：https://erlang.org/doc/man/inet.html#setopts-2",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-active_n",
                                              "text" : "active_n",
                                              "type" : "Integer",
                                              "default" : "100"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间接收缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-recbuf",
                                              "text" : "recbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间发送缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-sndbuf",
                                              "text" : "sndbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在用户空间的缓冲区大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-buffer",
                                              "text" : "buffer",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "允许重用本地处于 TIME_WAIT 的端口号。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp-S-udp_listener-udp_options-S-udp_opts-reuseaddr",
                                              "text" : "reuseaddr",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            }
                                          ],
                                          "text" : "udp_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp-S-udp_listener-udp_options",
                                      "text" : "udp_options",
                                      "type" : "Struct(udp_opts)"
                                    },
                                    {
                                      "doc" : "是否启用该监听器。",
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp-S-udp_listener-enable",
                                      "text" : "enable",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "监听器绑定的 IP 地址或端口。",
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp-S-udp_listener-bind",
                                      "text" : "bind",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接数。",
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp-S-udp_listener-max_connections",
                                      "text" : "max_connections",
                                      "type" : "OneOf(Integer(1..+inf),String(\"infinity\"))",
                                      "default" : "1024"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接速率。",
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp-S-udp_listener-max_conn_rate",
                                      "text" : "max_conn_rate",
                                      "type" : "Integer",
                                      "default" : "1000"
                                    },
                                    {
                                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp-S-udp_listener-enable_authn",
                                      "text" : "enable_authn",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp-S-udp_listener-mountpoint",
                                      "text" : "mountpoint",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp-S-udp_listener-access_rules",
                                      "text" : "access_rules",
                                      "type" : "Array(String)",
                                      "default" : "[]"
                                    }
                                  ],
                                  "text" : "udp_listener"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-udp",
                              "text" : "udp",
                              "type" : "Map($name->Struct(udp_listener))"
                            },
                            {
                              "doc" : "从监听器名称到配置参数的映射。",
                              "refs" : [
                                {
                                  "doc" : "Settings for DTLS listener.",
                                  "hash" : "T-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener",
                                  "fields" : [
                                    {
                                      "doc" : "Acceptor 进程池大小。",
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-acceptors",
                                      "text" : "acceptors",
                                      "type" : "Integer",
                                      "default" : "16"
                                    },
                                    {
                                      "refs" : [
                                        {
                                          "doc" : "Settings for UDP sockets.",
                                          "hash" : "T-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts",
                                          "fields" : [
                                            {
                                              "doc" : "为 Socket 指定 {active, N} 选项。\n参见：https://erlang.org/doc/man/inet.html#setopts-2",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-active_n",
                                              "text" : "active_n",
                                              "type" : "Integer",
                                              "default" : "100"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间接收缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-recbuf",
                                              "text" : "recbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在内核空间发送缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-sndbuf",
                                              "text" : "sndbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "Socket 在用户空间的缓冲区大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-buffer",
                                              "text" : "buffer",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "允许重用本地处于 TIME_WAIT 的端口号。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options-S-udp_opts-reuseaddr",
                                              "text" : "reuseaddr",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            }
                                          ],
                                          "text" : "udp_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-udp_options",
                                      "text" : "udp_options",
                                      "type" : "Struct(udp_opts)"
                                    },
                                    {
                                      "doc" : "是否启用该监听器。",
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-enable",
                                      "text" : "enable",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "监听器绑定的 IP 地址或端口。",
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-bind",
                                      "text" : "bind",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接数。",
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-max_connections",
                                      "text" : "max_connections",
                                      "type" : "OneOf(Integer(1..+inf),String(\"infinity\"))",
                                      "default" : "1024"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接速率。",
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-max_conn_rate",
                                      "text" : "max_conn_rate",
                                      "type" : "Integer",
                                      "default" : "1000"
                                    },
                                    {
                                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-enable_authn",
                                      "text" : "enable_authn",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-mountpoint",
                                      "text" : "mountpoint",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-access_rules",
                                      "text" : "access_rules",
                                      "type" : "Array(String)",
                                      "default" : "[]"
                                    },
                                    {
                                      "doc" : "DTLS Socket 配置",
                                      "refs" : [
                                        {
                                          "doc" : "Settings for DTLS protocol.",
                                          "hash" : "T-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts",
                                          "fields" : [
                                            {
                                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-cacertfile",
                                              "text" : "cacertfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
                                            },
                                            {
                                              "doc" : "Deprecated since 5.1.4.",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-cacerts",
                                              "text" : "cacerts",
                                              "type" : "Boolean"
                                            },
                                            {
                                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-certfile",
                                              "text" : "certfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
                                            },
                                            {
                                              "doc" : "PEM 格式的私钥文件。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-keyfile",
                                              "text" : "keyfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
                                            },
                                            {
                                              "doc" : "启用或禁用对等验证。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-verify",
                                              "text" : "verify",
                                              "type" : "Enum(verify_peer,verify_none)",
                                              "default" : "verify_none"
                                            },
                                            {
                                              "doc" : "启用 TLS 会话重用。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-reuse_sessions",
                                              "text" : "reuse_sessions",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-depth",
                                              "text" : "depth",
                                              "type" : "Integer(0..+inf)",
                                              "default" : "10"
                                            },
                                            {
                                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-password",
                                              "text" : "password",
                                              "type" : "String"
                                            },
                                            {
                                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-versions",
                                              "text" : "versions",
                                              "type" : "Array(String)",
                                              "default" : "[dtlsv1.2]"
                                            },
                                            {
                                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ciphers",
                                              "text" : "ciphers",
                                              "type" : "Array(String)",
                                              "default" : "[]"
                                            },
                                            {
                                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-secure_renegotiate",
                                              "text" : "secure_renegotiate",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-log_level",
                                              "text" : "log_level",
                                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                                              "default" : "notice"
                                            },
                                            {
                                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-hibernate_after",
                                              "text" : "hibernate_after",
                                              "type" : "Duration",
                                              "default" : "5s"
                                            },
                                            {
                                              "doc" : "如果协商使用 Diffie-Hellman 密钥交换的密码套件，则服务器将使用包含 PEM 编码的 Diffie-Hellman 参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3 不支持<code>dhfile</code>选项。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-dhfile",
                                              "text" : "dhfile",
                                              "type" : "String"
                                            },
                                            {
                                              "doc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为 true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为 false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-fail_if_no_peer_cert",
                                              "text" : "fail_if_no_peer_cert",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            },
                                            {
                                              "doc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-honor_cipher_order",
                                              "text" : "honor_cipher_order",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-client_renegotiation",
                                              "text" : "client_renegotiation",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "握手完成所允许的最长时间<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-handshake_timeout",
                                              "text" : "handshake_timeout",
                                              "type" : "Duration",
                                              "default" : "15s"
                                            },
                                            {
                                              "doc" : "内存使用调优。如果启用，将在 TLS/SSL 握手完成后立即执行垃圾回收。TLS/SSL 握手建立后立即进行 GC。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-gc_after_handshake",
                                              "text" : "gc_after_handshake",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            },
                                            {
                                              "refs" : [
                                                {
                                                  "doc" : "Per listener OCSP Stapling configuration.",
                                                  "hash" : "T-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp",
                                                  "fields" : [
                                                    {
                                                      "doc" : "是否为监听器启用 OCSP Stapling 功能。 如果设置为 true，需要定义 OCSP Responder 的 URL 和证书签发者的 PEM 文件路径。",
                                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-enable_ocsp_stapling",
                                                      "text" : "enable_ocsp_stapling",
                                                      "type" : "Boolean",
                                                      "default" : "false"
                                                    },
                                                    {
                                                      "doc" : "用于检查服务器证书的 OCSP Responder 的 URL。",
                                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-responder_url",
                                                      "text" : "responder_url",
                                                      "type" : "String"
                                                    },
                                                    {
                                                      "doc" : "服务器证书的 OCSP 签发者的 PEM 编码证书。",
                                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-issuer_pem",
                                                      "text" : "issuer_pem",
                                                      "type" : "String"
                                                    },
                                                    {
                                                      "doc" : "为服务器刷新 OCSP 响应的周期。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-refresh_interval",
                                                      "text" : "refresh_interval",
                                                      "type" : "Duration",
                                                      "default" : "5m"
                                                    },
                                                    {
                                                      "doc" : "检查 OCSP 响应时，HTTP 请求的超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp-S-ocsp-refresh_http_timeout",
                                                      "text" : "refresh_http_timeout",
                                                      "type" : "Duration",
                                                      "default" : "15s"
                                                    }
                                                  ],
                                                  "text" : "ocsp"
                                                }
                                              ],
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-ocsp",
                                              "text" : "ocsp",
                                              "type" : "Struct(ocsp)"
                                            },
                                            {
                                              "doc" : "是否为该监听器启用 CRL 检查。",
                                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options-S-dtls_opts-enable_crl_check",
                                              "text" : "enable_crl_check",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            }
                                          ],
                                          "text" : "dtls_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls-S-dtls_listener-dtls_options",
                                      "text" : "dtls_options",
                                      "type" : "Struct(dtls_opts)"
                                    }
                                  ],
                                  "text" : "dtls_listener"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners-S-udp_listeners-dtls",
                              "text" : "dtls",
                              "type" : "Map($name->Struct(dtls_listener))"
                            }
                          ],
                          "text" : "udp_listeners"
                        }
                      ],
                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-listeners",
                      "text" : "listeners",
                      "type" : "Struct(udp_listeners)"
                    },
                    {
                      "doc" : "是否启用该网关",
                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "是否开启客户端统计",
                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-enable_stats",
                      "text" : "enable_stats",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "客户端连接过程的空闲时间。该配置用于：\n  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。\n  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-idle_timeout",
                      "text" : "idle_timeout",
                      "type" : "Duration",
                      "default" : "30s"
                    },
                    {
                      "doc" : "ClientInfo 重写。",
                      "refs" : [
                        {
                          "doc" : "ClientInfo override.",
                          "hash" : "T-gateway-S-gateway-mqttsn-S-mqttsn-clientinfo_override-S-clientinfo_override",
                          "fields" : [
                            {
                              "doc" : "username 重写模板",
                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-clientinfo_override-S-clientinfo_override-username",
                              "text" : "username",
                              "type" : "String"
                            },
                            {
                              "doc" : "password 重写模板",
                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-clientinfo_override-S-clientinfo_override-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "clientid 重写模板",
                              "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-clientinfo_override-S-clientinfo_override-clientid",
                              "text" : "clientid",
                              "type" : "String"
                            }
                          ],
                          "text" : "clientinfo_override"
                        }
                      ],
                      "hash" : "V-gateway-S-gateway-mqttsn-S-mqttsn-clientinfo_override",
                      "text" : "clientinfo_override",
                      "type" : "Struct(clientinfo_override)"
                    }
                  ],
                  "text" : "mqttsn"
                }
              ],
              "hash" : "V-gateway-S-gateway-mqttsn",
              "text" : "mqttsn",
              "type" : "Struct(mqttsn)"
            },
            {
              "refs" : [
                {
                  "doc" : "The STOMP protocol gateway provides EMQX with the ability to access STOMP\n(Simple (or Streaming) Text Orientated Messaging Protocol) protocol.",
                  "hash" : "T-gateway-S-gateway-stomp-S-stomp",
                  "fields" : [
                    {
                      "refs" : [
                        {
                          "doc" : "Size limits for the STOMP frames.",
                          "hash" : "T-gateway-S-gateway-stomp-S-stomp-frame-S-stomp_frame",
                          "fields" : [
                            {
                              "doc" : "头部的最大数量",
                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-frame-S-stomp_frame-max_headers",
                              "text" : "max_headers",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "允许的 Header 字符串的最大长度",
                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-frame-S-stomp_frame-max_headers_length",
                              "text" : "max_headers_length",
                              "type" : "Integer(0..+inf)",
                              "default" : "1024"
                            },
                            {
                              "doc" : "每个 Stomp 数据包允许的 Body 的最大字节数",
                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-frame-S-stomp_frame-max_body_length",
                              "text" : "max_body_length",
                              "type" : "Integer",
                              "default" : "65536"
                            }
                          ],
                          "text" : "stomp_frame"
                        }
                      ],
                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-frame",
                      "text" : "frame",
                      "type" : "Struct(stomp_frame)"
                    },
                    {
                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-mountpoint",
                      "text" : "mountpoint",
                      "type" : "String",
                      "default" : "\"\""
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "Settings for the TCP listeners.",
                          "hash" : "T-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners",
                          "fields" : [
                            {
                              "doc" : "从监听器名称到配置参数的映射。",
                              "refs" : [
                                {
                                  "doc" : "Settings for TCP listener.",
                                  "hash" : "T-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener",
                                  "fields" : [
                                    {
                                      "doc" : "Acceptor 进程池大小。",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-acceptors",
                                      "text" : "acceptors",
                                      "type" : "Integer",
                                      "default" : "16"
                                    },
                                    {
                                      "doc" : "TCP Socket 配置。",
                                      "refs" : [
                                        {
                                          "doc" : "TCP listener options.",
                                          "hash" : "T-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts",
                                          "fields" : [
                                            {
                                              "doc" : "为此套接字指定{active，N}选项<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-active_n",
                                              "text" : "active_n",
                                              "type" : "Integer",
                                              "default" : "100"
                                            },
                                            {
                                              "doc" : "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-backlog",
                                              "text" : "backlog",
                                              "type" : "Integer(1..+inf)",
                                              "default" : "1024"
                                            },
                                            {
                                              "doc" : "连接的 TCP 发送超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-send_timeout",
                                              "text" : "send_timeout",
                                              "type" : "Duration",
                                              "default" : "15s"
                                            },
                                            {
                                              "doc" : "如果发送超时，则关闭连接。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-send_timeout_close",
                                              "text" : "send_timeout_close",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "连接的 TCP 接收缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-recbuf",
                                              "text" : "recbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "连接的 TCP 发送缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-sndbuf",
                                              "text" : "sndbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "驱动程序使用的用户空间缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-buffer",
                                              "text" : "buffer",
                                              "type" : "Bytesize",
                                              "default" : "4KB"
                                            },
                                            {
                                              "doc" : "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-high_watermark",
                                              "text" : "high_watermark",
                                              "type" : "Bytesize",
                                              "default" : "1MB"
                                            },
                                            {
                                              "doc" : "连接的 TCP_NODELAY 标识",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-nodelay",
                                              "text" : "nodelay",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "连接的 SO_REUSEADDR 标识。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-reuseaddr",
                                              "text" : "reuseaddr",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "为 MQTT 连接在 TCP 或 SSL 上启用 TCP 保活。\n值是以逗号分隔的三个数字，格式为 'Idle,Interval,Probes'\n - Idle: 在服务器开始发送保活探测之前，连接需要处于空闲状态的秒数（Linux 默认为 7200）。\n - Interval: TCP 保活探测间隔的秒数（Linux 默认值为 75）。\n - Probes: 在放弃并终止连接之前，从另一端未获得响应时要发送的 TCP 保活探测的最大数量（Linux 默认值为 9 次）。\n例如 \"240,30,5\" 表示：在连接空闲 240 秒后发送 TCP 保活探测，每隔 30 秒发送一次，直到收到响应，如果连续丢失 5 个响应，连接应该被关闭。\n默认值为 'none'",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-tcp_options-S-tcp_opts-keepalive",
                                              "text" : "keepalive",
                                              "type" : "String",
                                              "default" : "none"
                                            }
                                          ],
                                          "text" : "tcp_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-tcp_options",
                                      "text" : "tcp_options",
                                      "type" : "Struct(tcp_opts)"
                                    },
                                    {
                                      "doc" : "是否开启 Proxy Protocol V1/2。当 EMQX 集群部署在 HAProxy 或 Nginx 后需要获取客户端真实 IP 时常用到该选项。参考：https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-proxy_protocol",
                                      "text" : "proxy_protocol",
                                      "type" : "Boolean",
                                      "default" : "false"
                                    },
                                    {
                                      "doc" : "接收 Proxy Protocol 报文头的超时时间。如果在超时内没有收到 Proxy Protocol 包，EMQX 将关闭 TCP 连接。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-proxy_protocol_timeout",
                                      "text" : "proxy_protocol_timeout",
                                      "type" : "Duration",
                                      "default" : "3s"
                                    },
                                    {
                                      "doc" : "是否启用该监听器。",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-enable",
                                      "text" : "enable",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "监听器绑定的 IP 地址或端口。",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-bind",
                                      "text" : "bind",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接数。",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-max_connections",
                                      "text" : "max_connections",
                                      "type" : "OneOf(Integer(1..+inf),String(\"infinity\"))",
                                      "default" : "1024"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接速率。",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-max_conn_rate",
                                      "text" : "max_conn_rate",
                                      "type" : "Integer",
                                      "default" : "1000"
                                    },
                                    {
                                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-enable_authn",
                                      "text" : "enable_authn",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-mountpoint",
                                      "text" : "mountpoint",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp-S-tcp_listener-access_rules",
                                      "text" : "access_rules",
                                      "type" : "Array(String)",
                                      "default" : "[]"
                                    }
                                  ],
                                  "text" : "tcp_listener"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-tcp",
                              "text" : "tcp",
                              "type" : "Map($name->Struct(tcp_listener))"
                            },
                            {
                              "doc" : "从监听器名称到配置参数的映射。",
                              "refs" : [
                                {
                                  "doc" : "Settings for SSL listener.",
                                  "hash" : "T-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener",
                                  "fields" : [
                                    {
                                      "doc" : "Acceptor 进程池大小。",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-acceptors",
                                      "text" : "acceptors",
                                      "type" : "Integer",
                                      "default" : "16"
                                    },
                                    {
                                      "doc" : "TCP Socket 配置。",
                                      "refs" : [
                                        {
                                          "doc" : "TCP listener options.",
                                          "hash" : "T-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts",
                                          "fields" : [
                                            {
                                              "doc" : "为此套接字指定{active，N}选项<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-active_n",
                                              "text" : "active_n",
                                              "type" : "Integer",
                                              "default" : "100"
                                            },
                                            {
                                              "doc" : "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-backlog",
                                              "text" : "backlog",
                                              "type" : "Integer(1..+inf)",
                                              "default" : "1024"
                                            },
                                            {
                                              "doc" : "连接的 TCP 发送超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-send_timeout",
                                              "text" : "send_timeout",
                                              "type" : "Duration",
                                              "default" : "15s"
                                            },
                                            {
                                              "doc" : "如果发送超时，则关闭连接。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-send_timeout_close",
                                              "text" : "send_timeout_close",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "连接的 TCP 接收缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-recbuf",
                                              "text" : "recbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "连接的 TCP 发送缓冲区（OS 内核）。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-sndbuf",
                                              "text" : "sndbuf",
                                              "type" : "Bytesize"
                                            },
                                            {
                                              "doc" : "驱动程序使用的用户空间缓冲区的大小。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-buffer",
                                              "text" : "buffer",
                                              "type" : "Bytesize",
                                              "default" : "4KB"
                                            },
                                            {
                                              "doc" : "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-high_watermark",
                                              "text" : "high_watermark",
                                              "type" : "Bytesize",
                                              "default" : "1MB"
                                            },
                                            {
                                              "doc" : "连接的 TCP_NODELAY 标识",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-nodelay",
                                              "text" : "nodelay",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "连接的 SO_REUSEADDR 标识。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-reuseaddr",
                                              "text" : "reuseaddr",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "为 MQTT 连接在 TCP 或 SSL 上启用 TCP 保活。\n值是以逗号分隔的三个数字，格式为 'Idle,Interval,Probes'\n - Idle: 在服务器开始发送保活探测之前，连接需要处于空闲状态的秒数（Linux 默认为 7200）。\n - Interval: TCP 保活探测间隔的秒数（Linux 默认值为 75）。\n - Probes: 在放弃并终止连接之前，从另一端未获得响应时要发送的 TCP 保活探测的最大数量（Linux 默认值为 9 次）。\n例如 \"240,30,5\" 表示：在连接空闲 240 秒后发送 TCP 保活探测，每隔 30 秒发送一次，直到收到响应，如果连续丢失 5 个响应，连接应该被关闭。\n默认值为 'none'",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-tcp_options-S-tcp_opts-keepalive",
                                              "text" : "keepalive",
                                              "type" : "String",
                                              "default" : "none"
                                            }
                                          ],
                                          "text" : "tcp_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-tcp_options",
                                      "text" : "tcp_options",
                                      "type" : "Struct(tcp_opts)"
                                    },
                                    {
                                      "doc" : "是否开启 Proxy Protocol V1/2。当 EMQX 集群部署在 HAProxy 或 Nginx 后需要获取客户端真实 IP 时常用到该选项。参考：https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-proxy_protocol",
                                      "text" : "proxy_protocol",
                                      "type" : "Boolean",
                                      "default" : "false"
                                    },
                                    {
                                      "doc" : "接收 Proxy Protocol 报文头的超时时间。如果在超时内没有收到 Proxy Protocol 包，EMQX 将关闭 TCP 连接。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-proxy_protocol_timeout",
                                      "text" : "proxy_protocol_timeout",
                                      "type" : "Duration",
                                      "default" : "3s"
                                    },
                                    {
                                      "doc" : "是否启用该监听器。",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-enable",
                                      "text" : "enable",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "监听器绑定的 IP 地址或端口。",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-bind",
                                      "text" : "bind",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接数。",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-max_connections",
                                      "text" : "max_connections",
                                      "type" : "OneOf(Integer(1..+inf),String(\"infinity\"))",
                                      "default" : "1024"
                                    },
                                    {
                                      "doc" : "监听器支持的最大连接速率。",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-max_conn_rate",
                                      "text" : "max_conn_rate",
                                      "type" : "Integer",
                                      "default" : "1000"
                                    },
                                    {
                                      "doc" : "配置 <code>true</code> （默认值）启用客户端进行身份认证。\n配置 <code>false</code> 时，将不对客户端做任何认证。",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-enable_authn",
                                      "text" : "enable_authn",
                                      "type" : "Boolean",
                                      "default" : "true"
                                    },
                                    {
                                      "doc" : "发布或订阅时，在所有主题前增加前缀字符串。\n当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。\n例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，\n则客户端实际上订阅了 `some_tenant/t` 主题。\n类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，\n则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。\n挂载点字符串中可用的变量：<br/>\n   - <code>${clientid}</code>：clientid<br/>\n   - <code>${username}</code>：用户名",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-mountpoint",
                                      "text" : "mountpoint",
                                      "type" : "String"
                                    },
                                    {
                                      "doc" : "配置监听器的访问控制规则。\n见：https://github.com/emqtt/esockd#allowdeny",
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-access_rules",
                                      "text" : "access_rules",
                                      "type" : "Array(String)",
                                      "default" : "[]"
                                    },
                                    {
                                      "doc" : "SSL Socket 配置。",
                                      "refs" : [
                                        {
                                          "doc" : "Socket options for SSL connections.",
                                          "hash" : "T-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts",
                                          "fields" : [
                                            {
                                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-cacertfile",
                                              "text" : "cacertfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/cacert.pem\""
                                            },
                                            {
                                              "doc" : "Deprecated since 5.1.4.",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-cacerts",
                                              "text" : "cacerts",
                                              "type" : "Boolean"
                                            },
                                            {
                                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-certfile",
                                              "text" : "certfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/cert.pem\""
                                            },
                                            {
                                              "doc" : "PEM 格式的私钥文件。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-keyfile",
                                              "text" : "keyfile",
                                              "type" : "String",
                                              "default" : "\"${EMQX_ETC_DIR}/certs/key.pem\""
                                            },
                                            {
                                              "doc" : "启用或禁用对等验证。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-verify",
                                              "text" : "verify",
                                              "type" : "Enum(verify_peer,verify_none)",
                                              "default" : "verify_none"
                                            },
                                            {
                                              "doc" : "启用 TLS 会话重用。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-reuse_sessions",
                                              "text" : "reuse_sessions",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-depth",
                                              "text" : "depth",
                                              "type" : "Integer(0..+inf)",
                                              "default" : "10"
                                            },
                                            {
                                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-password",
                                              "text" : "password",
                                              "type" : "String"
                                            },
                                            {
                                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-versions",
                                              "text" : "versions",
                                              "type" : "Array(String)",
                                              "default" : "[tlsv1.3, tlsv1.2]"
                                            },
                                            {
                                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ciphers",
                                              "text" : "ciphers",
                                              "type" : "Array(String)",
                                              "default" : "[]"
                                            },
                                            {
                                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-secure_renegotiate",
                                              "text" : "secure_renegotiate",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-log_level",
                                              "text" : "log_level",
                                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                                              "default" : "notice"
                                            },
                                            {
                                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-hibernate_after",
                                              "text" : "hibernate_after",
                                              "type" : "Duration",
                                              "default" : "5s"
                                            },
                                            {
                                              "doc" : "如果协商使用 Diffie-Hellman 密钥交换的密码套件，则服务器将使用包含 PEM 编码的 Diffie-Hellman 参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3 不支持<code>dhfile</code>选项。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-dhfile",
                                              "text" : "dhfile",
                                              "type" : "String"
                                            },
                                            {
                                              "doc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为 true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为 false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-fail_if_no_peer_cert",
                                              "text" : "fail_if_no_peer_cert",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            },
                                            {
                                              "doc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-honor_cipher_order",
                                              "text" : "honor_cipher_order",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-client_renegotiation",
                                              "text" : "client_renegotiation",
                                              "type" : "Boolean",
                                              "default" : "true"
                                            },
                                            {
                                              "doc" : "握手完成所允许的最长时间<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-handshake_timeout",
                                              "text" : "handshake_timeout",
                                              "type" : "Duration",
                                              "default" : "15s"
                                            },
                                            {
                                              "doc" : "内存使用调优。如果启用，将在 TLS/SSL 握手完成后立即执行垃圾回收。TLS/SSL 握手建立后立即进行 GC。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-gc_after_handshake",
                                              "text" : "gc_after_handshake",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            },
                                            {
                                              "refs" : [
                                                {
                                                  "doc" : "Per listener OCSP Stapling configuration.",
                                                  "hash" : "T-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp",
                                                  "fields" : [
                                                    {
                                                      "doc" : "是否为监听器启用 OCSP Stapling 功能。 如果设置为 true，需要定义 OCSP Responder 的 URL 和证书签发者的 PEM 文件路径。",
                                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-enable_ocsp_stapling",
                                                      "text" : "enable_ocsp_stapling",
                                                      "type" : "Boolean",
                                                      "default" : "false"
                                                    },
                                                    {
                                                      "doc" : "用于检查服务器证书的 OCSP Responder 的 URL。",
                                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-responder_url",
                                                      "text" : "responder_url",
                                                      "type" : "String"
                                                    },
                                                    {
                                                      "doc" : "服务器证书的 OCSP 签发者的 PEM 编码证书。",
                                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-issuer_pem",
                                                      "text" : "issuer_pem",
                                                      "type" : "String"
                                                    },
                                                    {
                                                      "doc" : "为服务器刷新 OCSP 响应的周期。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-refresh_interval",
                                                      "text" : "refresh_interval",
                                                      "type" : "Duration",
                                                      "default" : "5m"
                                                    },
                                                    {
                                                      "doc" : "检查 OCSP 响应时，HTTP 请求的超时。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ocsp-S-ocsp-refresh_http_timeout",
                                                      "text" : "refresh_http_timeout",
                                                      "type" : "Duration",
                                                      "default" : "15s"
                                                    }
                                                  ],
                                                  "text" : "ocsp"
                                                }
                                              ],
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-ocsp",
                                              "text" : "ocsp",
                                              "type" : "Struct(ocsp)"
                                            },
                                            {
                                              "doc" : "是否为该监听器启用 CRL 检查。",
                                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options-S-listener_ssl_opts-enable_crl_check",
                                              "text" : "enable_crl_check",
                                              "type" : "Boolean",
                                              "default" : "false"
                                            }
                                          ],
                                          "text" : "listener_ssl_opts"
                                        }
                                      ],
                                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl-S-ssl_listener-ssl_options",
                                      "text" : "ssl_options",
                                      "type" : "Struct(listener_ssl_opts)"
                                    }
                                  ],
                                  "text" : "ssl_listener"
                                }
                              ],
                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners-S-tcp_listeners-ssl",
                              "text" : "ssl",
                              "type" : "Map($name->Struct(ssl_listener))"
                            }
                          ],
                          "text" : "tcp_listeners"
                        }
                      ],
                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-listeners",
                      "text" : "listeners",
                      "type" : "Struct(tcp_listeners)"
                    },
                    {
                      "doc" : "是否启用该网关",
                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "是否开启客户端统计",
                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-enable_stats",
                      "text" : "enable_stats",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "客户端连接过程的空闲时间。该配置用于：\n  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。\n  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-idle_timeout",
                      "text" : "idle_timeout",
                      "type" : "Duration",
                      "default" : "30s"
                    },
                    {
                      "doc" : "ClientInfo 重写。",
                      "refs" : [
                        {
                          "doc" : "ClientInfo override.",
                          "hash" : "T-gateway-S-gateway-stomp-S-stomp-clientinfo_override-S-clientinfo_override",
                          "fields" : [
                            {
                              "doc" : "username 重写模板",
                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-clientinfo_override-S-clientinfo_override-username",
                              "text" : "username",
                              "type" : "String"
                            },
                            {
                              "doc" : "password 重写模板",
                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-clientinfo_override-S-clientinfo_override-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "clientid 重写模板",
                              "hash" : "V-gateway-S-gateway-stomp-S-stomp-clientinfo_override-S-clientinfo_override-clientid",
                              "text" : "clientid",
                              "type" : "String"
                            }
                          ],
                          "text" : "clientinfo_override"
                        }
                      ],
                      "hash" : "V-gateway-S-gateway-stomp-S-stomp-clientinfo_override",
                      "text" : "clientinfo_override",
                      "type" : "Struct(clientinfo_override)"
                    }
                  ],
                  "text" : "stomp"
                }
              ],
              "hash" : "V-gateway-S-gateway-stomp",
              "text" : "stomp",
              "type" : "Struct(stomp)"
            }
          ],
          "text" : "gateway"
        }
      ],
      "hash" : "V-gateway",
      "text" : "gateway",
      "type" : "Struct(gateway)"
    },
    {
      "refs" : [
        {
          "doc" : "推荐的设置",
          "hash" : "T-prometheus-S-recommend_setting",
          "fields" : [
            {
              "doc" : "启用或禁用 Prometheus 抓取 API 的基本认证，不适用于 Push Gateway。",
              "hash" : "V-prometheus-S-recommend_setting-enable_basic_auth",
              "text" : "enable_basic_auth",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "Push Gateway 是可选的，如果 Prometheus 要抓取 EMQX，则不应配置。",
              "refs" : [
                {
                  "doc" : "Push Gateway 是可选的，如果 Prometheus 要抓取 EMQX，则不应配置。",
                  "hash" : "T-prometheus-S-recommend_setting-push_gateway-S-push_gateway",
                  "fields" : [
                    {
                      "doc" : "启用或禁用 Pushgateway。",
                      "hash" : "V-prometheus-S-recommend_setting-push_gateway-S-push_gateway-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "Pushgateway 服务器的 URL。Push Gateway 是可选的，如果 Prometheus 要抓取 EMQX，则不应配置。",
                      "hash" : "V-prometheus-S-recommend_setting-push_gateway-S-push_gateway-url",
                      "text" : "url",
                      "type" : "String",
                      "default" : "\"http://127.0.0.1:9091\""
                    },
                    {
                      "doc" : "数据推送间隔<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-prometheus-S-recommend_setting-push_gateway-S-push_gateway-interval",
                      "text" : "interval",
                      "type" : "Duration",
                      "default" : "15s"
                    },
                    {
                      "doc" : "推送到 Push Gateway 的 HTTP Headers 列表。<br/>\n例如，<code> { Authorization = \"some-authz-tokens\"}</code>",
                      "hash" : "V-prometheus-S-recommend_setting-push_gateway-S-push_gateway-headers",
                      "text" : "headers",
                      "type" : "Map",
                      "default" : "{}"
                    },
                    {
                      "doc" : "推送到 Push Gateway 的 Job 名称。可用变量为：<br/>\n- ${name}: EMQX 节点的名称。\n- ${host}: EMQX 节点主机名。\n例如，当 EMQX 节点名为 <code>emqx@127.0.0.1</code> 则 name 变量的值为 <code>emqx</code>，host 变量的值为 <code>127.0.0.1</code>。<br/>\n默认值为: <code>${name}/instance/${name}~${host}</code>",
                      "hash" : "V-prometheus-S-recommend_setting-push_gateway-S-push_gateway-job_name",
                      "text" : "job_name",
                      "type" : "String",
                      "default" : "\"${name}/instance/${name}~${host}\""
                    }
                  ],
                  "text" : "push_gateway"
                }
              ],
              "hash" : "V-prometheus-S-recommend_setting-push_gateway",
              "text" : "push_gateway",
              "type" : "Struct(push_gateway)"
            },
            {
              "doc" : "虚拟机的内部高级指标最初是禁用的\n通常只在性能测试期间启用。\n启用它们将增加 CPU 负载。",
              "refs" : [
                {
                  "doc" : "虚拟机的内部高级指标最初是禁用的\n通常只在性能测试期间启用。\n启用它们将增加 CPU 负载。",
                  "hash" : "T-prometheus-S-recommend_setting-collectors-S-collectors",
                  "fields" : [
                    {
                      "doc" : "开启或关闭 VM 分布采集器，收集 Erlang 分布机制中涉及的套接字和进程的信息。",
                      "hash" : "V-prometheus-S-recommend_setting-collectors-S-collectors-vm_dist",
                      "text" : "vm_dist",
                      "type" : "Enum(disabled,enabled)",
                      "default" : "disabled"
                    },
                    {
                      "doc" : "开启或关闭 Mnesia 采集器, 使用 mnesia:system_info/1 收集 Mnesia 相关指标",
                      "hash" : "V-prometheus-S-recommend_setting-collectors-S-collectors-mnesia",
                      "text" : "mnesia",
                      "type" : "Enum(enabled,disabled)",
                      "default" : "disabled"
                    },
                    {
                      "doc" : "开启或关闭 VM 统计采集器, 使用 erlang:statistics/1 收集 Erlang VM 相关指标",
                      "hash" : "V-prometheus-S-recommend_setting-collectors-S-collectors-vm_statistics",
                      "text" : "vm_statistics",
                      "type" : "Enum(enabled,disabled)",
                      "default" : "disabled"
                    },
                    {
                      "doc" : "开启或关闭 VM 系统信息采集器, 使用 erlang:system_info/1 收集 Erlang VM 相关指标",
                      "hash" : "V-prometheus-S-recommend_setting-collectors-S-collectors-vm_system_info",
                      "text" : "vm_system_info",
                      "type" : "Enum(enabled,disabled)",
                      "default" : "disabled"
                    },
                    {
                      "doc" : "开启或关闭 VM 内存采集器, 使用 erlang:memory/0 收集 Erlang 虚拟机动态分配的内存信息，同时提供基本的 (D)ETS 统计信息",
                      "hash" : "V-prometheus-S-recommend_setting-collectors-S-collectors-vm_memory",
                      "text" : "vm_memory",
                      "type" : "Enum(enabled,disabled)",
                      "default" : "disabled"
                    },
                    {
                      "doc" : "开启或关闭 VM msacc 采集器, 使用 erlang:statistics(microstate_accounting) 收集微状态计数指标",
                      "hash" : "V-prometheus-S-recommend_setting-collectors-S-collectors-vm_msacc",
                      "text" : "vm_msacc",
                      "type" : "Enum(enabled,disabled)",
                      "default" : "disabled"
                    }
                  ],
                  "text" : "collectors"
                }
              ],
              "hash" : "V-prometheus-S-recommend_setting-collectors",
              "text" : "collectors",
              "type" : "Struct(collectors)"
            }
          ],
          "text" : "recommend_setting"
        },
        {
          "doc" : "自5.4.0版本起弃用。",
          "hash" : "T-prometheus-S-legacy_deprecated_setting",
          "fields" : [
            {
              "doc" : "自5.4.0版本起弃用，改用 `prometheus.push_gateway.url`。",
              "hash" : "V-prometheus-S-legacy_deprecated_setting-push_gateway_server",
              "text" : "push_gateway_server",
              "type" : "String",
              "default" : "\"http://127.0.0.1:9091\""
            },
            {
              "doc" : "自5.4.0版本起弃用，改用 `prometheus.push_gateway.interval`。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-prometheus-S-legacy_deprecated_setting-interval",
              "text" : "interval",
              "type" : "Duration",
              "default" : "15s"
            },
            {
              "doc" : "自5.4.0版本起弃用，改用 `prometheus.push_gateway.headers`。",
              "hash" : "V-prometheus-S-legacy_deprecated_setting-headers",
              "text" : "headers",
              "type" : "Map",
              "default" : "{}"
            },
            {
              "doc" : "自5.4.0版本起弃用，改用 `prometheus.push_gateway.job_name`。",
              "hash" : "V-prometheus-S-legacy_deprecated_setting-job_name",
              "text" : "job_name",
              "type" : "String",
              "default" : "\"${name}/instance/${name}~${host}\""
            },
            {
              "doc" : "自5.4.0版本起弃用，改用 `prometheus.push_gateway.url`。",
              "hash" : "V-prometheus-S-legacy_deprecated_setting-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "自5.4.0版本起弃用，改用 `prometheus.collectors.vm_dist`。",
              "hash" : "V-prometheus-S-legacy_deprecated_setting-vm_dist_collector",
              "text" : "vm_dist_collector",
              "type" : "Enum(disabled,enabled)",
              "default" : "disabled"
            },
            {
              "doc" : "自5.4.0版本起弃用，改用 `prometheus.collectors.mnesia`。",
              "hash" : "V-prometheus-S-legacy_deprecated_setting-mnesia_collector",
              "text" : "mnesia_collector",
              "type" : "Enum(enabled,disabled)",
              "default" : "disabled"
            },
            {
              "doc" : "自5.4.0版本起弃用，改用 `prometheus.collectors.vm_statistics`。",
              "hash" : "V-prometheus-S-legacy_deprecated_setting-vm_statistics_collector",
              "text" : "vm_statistics_collector",
              "type" : "Enum(enabled,disabled)",
              "default" : "disabled"
            },
            {
              "doc" : "自5.4.0版本起弃用，改用 `prometheus.collectors.vm_system_info`。",
              "hash" : "V-prometheus-S-legacy_deprecated_setting-vm_system_info_collector",
              "text" : "vm_system_info_collector",
              "type" : "Enum(enabled,disabled)",
              "default" : "disabled"
            },
            {
              "doc" : "自5.4.0版本起弃用，改用 `prometheus.collectors.vm_memory`。",
              "hash" : "V-prometheus-S-legacy_deprecated_setting-vm_memory_collector",
              "text" : "vm_memory_collector",
              "type" : "Enum(enabled,disabled)",
              "default" : "disabled"
            },
            {
              "doc" : "自5.4.0版本起弃用，改用 `prometheus.collectors.vm_msacc`。",
              "hash" : "V-prometheus-S-legacy_deprecated_setting-vm_msacc_collector",
              "text" : "vm_msacc_collector",
              "type" : "Enum(enabled,disabled)",
              "default" : "disabled"
            }
          ],
          "text" : "legacy_deprecated_setting"
        }
      ],
      "hash" : "V-prometheus",
      "text" : "prometheus",
      "type" : "OneOf(Struct(recommend_setting),Struct(legacy_deprecated_setting))",
      "default" : "{}"
    },
    {
      "refs" : [
        {
          "doc" : "External hook (exhook) configuration.",
          "hash" : "T-exhook-S-exhook",
          "fields" : [
            {
              "doc" : "ExHook 服务器列表",
              "refs" : [
                {
                  "doc" : "gRPC server configuration.",
                  "hash" : "T-exhook-S-exhook-servers-S-server",
                  "fields" : [
                    {
                      "doc" : "ExHook 服务器名称",
                      "hash" : "V-exhook-S-exhook-servers-S-server-name",
                      "text" : "name",
                      "type" : "String"
                    },
                    {
                      "doc" : "开启这个 Exhook 服务器",
                      "hash" : "V-exhook-S-exhook-servers-S-server-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "true"
                    },
                    {
                      "doc" : "gRPC 服务器地址",
                      "hash" : "V-exhook-S-exhook-servers-S-server-url",
                      "text" : "url",
                      "type" : "String"
                    },
                    {
                      "doc" : "gRPC 服务器请求超时<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-exhook-S-exhook-servers-S-server-request_timeout",
                      "text" : "request_timeout",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "当 gRPC 请求失败后的操作",
                      "hash" : "V-exhook-S-exhook-servers-S-server-failed_action",
                      "text" : "failed_action",
                      "type" : "Enum(deny,ignore)",
                      "default" : "deny"
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "SSL client configuration.",
                          "hash" : "T-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-ssl-S-ssl_conf-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl_conf"
                        }
                      ],
                      "hash" : "V-exhook-S-exhook-servers-S-server-ssl",
                      "text" : "ssl",
                      "type" : "Struct(ssl_conf)"
                    },
                    {
                      "refs" : [
                        {
                          "doc" : "连接套接字设置",
                          "hash" : "T-exhook-S-exhook-servers-S-server-socket_options-S-socket_options",
                          "fields" : [
                            {
                              "doc" : "当没有其他数据交换时，是否向连接的对端套接字定期的发送探测包。如果另一端没有响应，则认为连接断开，并向控制进程发送错误消息。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-socket_options-S-socket_options-keepalive",
                              "text" : "keepalive",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "如果为 true，则为套接字设置 TCP_NODELAY 选项，这意味着会立即发送数据包",
                              "hash" : "V-exhook-S-exhook-servers-S-server-socket_options-S-socket_options-nodelay",
                              "text" : "nodelay",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "套接字的最小接收缓冲区大小<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-socket_options-S-socket_options-recbuf",
                              "text" : "recbuf",
                              "type" : "Bytesize"
                            },
                            {
                              "doc" : "套接字的最小发送缓冲区大小<br/>表示字节数量的字符串，例如：<code>10B</code>、<code>640kb</code>、<code>4MB</code>、<code>1GB</code>。单位以 1024 的幂次来解释，并且单位部分不区分大小写。",
                              "hash" : "V-exhook-S-exhook-servers-S-server-socket_options-S-socket_options-sndbuf",
                              "text" : "sndbuf",
                              "type" : "Bytesize"
                            }
                          ],
                          "text" : "socket_options"
                        }
                      ],
                      "hash" : "V-exhook-S-exhook-servers-S-server-socket_options",
                      "text" : "socket_options",
                      "type" : "Struct(socket_options)",
                      "default" : "{keepalive = true, nodelay = true}"
                    },
                    {
                      "doc" : "自动重连到 gRPC 服务器的设置。\n当 gRPC 服务器不可用时，Exhook 将会按照这里设置的间隔时间进行重连，并重新初始化注册的钩子",
                      "hash" : "V-exhook-S-exhook-servers-S-server-auto_reconnect",
                      "text" : "auto_reconnect",
                      "type" : "OneOf(String(\"false\"),Duration)",
                      "default" : "60s"
                    },
                    {
                      "doc" : "gRPC 客户端进程池大小",
                      "hash" : "V-exhook-S-exhook-servers-S-server-pool_size",
                      "text" : "pool_size",
                      "type" : "Integer(1..+inf)",
                      "default" : "8"
                    }
                  ],
                  "text" : "server"
                }
              ],
              "hash" : "V-exhook-S-exhook-servers",
              "text" : "servers",
              "type" : "Array(Struct(server))",
              "default" : "[]"
            }
          ],
          "text" : "exhook"
        }
      ],
      "hash" : "V-exhook",
      "text" : "exhook",
      "type" : "Struct(exhook)"
    },
    {
      "refs" : [
        {
          "doc" : "此配置用于启用 TLS-PSK 身份验证。\n\nPSK 是 “Pre-Shared-Keys” 的缩写。\n\n注意: 确保 SSL 监听器仅启用了 'tlsv1.2'，并且配置了 PSK 密码套件，例如 'RSA-PSK-AES256-GCM-SHA384'。\n\n可以通过查看监听器中的 SSL 选项，了解更多详细信息。\n\n可以通过配置 'init_file' 来设置初始化的 ID 和 密钥",
          "hash" : "T-psk_authentication-S-psk_authentication",
          "fields" : [
            {
              "doc" : "是否开启 TLS PSK 支持",
              "hash" : "V-psk_authentication-S-psk_authentication-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "如果设置了初始化文件，EMQX 将在启动时从初始化文件中导入 PSK 信息到内建数据库中。\n这个文件需要按行进行组织，每一行必须遵守如下格式: <code>PSKIdentity:SharedSecret</code>\n例如: <code>mydevice1:c2VjcmV0</code>",
              "hash" : "V-psk_authentication-S-psk_authentication-init_file",
              "text" : "init_file",
              "type" : "String"
            },
            {
              "doc" : "PSK 文件中 <code>PSKIdentity</code> 和 <code>SharedSecret</code> 之间的分隔符",
              "hash" : "V-psk_authentication-S-psk_authentication-separator",
              "text" : "separator",
              "type" : "String",
              "default" : "\":\""
            },
            {
              "doc" : "将 PSK 文件导入到内建数据时每个块的大小",
              "hash" : "V-psk_authentication-S-psk_authentication-chunk_size",
              "text" : "chunk_size",
              "type" : "Integer",
              "default" : "50"
            }
          ],
          "text" : "psk_authentication"
        }
      ],
      "hash" : "V-psk_authentication",
      "text" : "psk_authentication",
      "type" : "Struct(psk_authentication)"
    },
    {
      "refs" : [
        {
          "doc" : "Configuration for `slow_subs` feature.",
          "hash" : "T-slow_subs-S-slow_subs",
          "fields" : [
            {
              "doc" : "开启慢订阅",
              "hash" : "V-slow_subs-S-slow_subs-enable",
              "text" : "enable",
              "type" : "Boolean",
              "default" : "false"
            },
            {
              "doc" : "慢订阅统计的阈值<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-slow_subs-S-slow_subs-threshold",
              "text" : "threshold",
              "type" : "Duration",
              "default" : "500ms"
            },
            {
              "doc" : "慢订阅记录的有效时间<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
              "hash" : "V-slow_subs-S-slow_subs-expire_interval",
              "text" : "expire_interval",
              "type" : "Duration",
              "default" : "300s"
            },
            {
              "doc" : "慢订阅统计表的记录数量上限",
              "hash" : "V-slow_subs-S-slow_subs-top_k_num",
              "text" : "top_k_num",
              "type" : "Integer(1..+inf)",
              "default" : "10"
            },
            {
              "doc" : "慢订阅的统计类型",
              "hash" : "V-slow_subs-S-slow_subs-stats_type",
              "text" : "stats_type",
              "type" : "Enum(whole,internal,response)",
              "default" : "whole"
            }
          ],
          "text" : "slow_subs"
        }
      ],
      "hash" : "V-slow_subs",
      "text" : "slow_subs",
      "type" : "Struct(slow_subs)"
    },
    {
      "refs" : [
        {
          "doc" : "Open Telemetry 工具包配置",
          "hash" : "T-opentelemetry-S-opentelemetry",
          "fields" : [
            {
              "doc" : "Open Telemetry 指标配置。",
              "refs" : [
                {
                  "doc" : "Open Telemetry 指标配置。",
                  "hash" : "T-opentelemetry-S-opentelemetry-metrics-S-otel_metrics",
                  "fields" : [
                    {
                      "doc" : "启用或禁用 open telemetry 指标",
                      "hash" : "V-opentelemetry-S-opentelemetry-metrics-S-otel_metrics-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "两次连续导出 Open Telemetry 信号之间的延迟间隔。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-opentelemetry-S-opentelemetry-metrics-S-otel_metrics-interval",
                      "aliases" : [
                        "scheduled_delay"
                      ],
                      "text" : "interval",
                      "type" : "Duration",
                      "default" : "10s"
                    }
                  ],
                  "text" : "otel_metrics"
                }
              ],
              "hash" : "V-opentelemetry-S-opentelemetry-metrics",
              "text" : "metrics",
              "type" : "Struct(otel_metrics)"
            },
            {
              "doc" : "Open Telemetry 日志配置。如果启用，EMQX 将安装一个日志处理器，根据 Open Telemetry 日志数据模型格式化事件，并将它们导出到配置的 Open Telemetry 收集器或后端。",
              "refs" : [
                {
                  "doc" : "Open Telemetry 日志配置。如果启用，EMQX 将安装一个日志处理器，根据 Open Telemetry 日志数据模型格式化事件，并将它们导出到配置的 Open Telemetry 收集器或后端。",
                  "hash" : "T-opentelemetry-S-opentelemetry-logs-S-otel_logs",
                  "fields" : [
                    {
                      "doc" : "Open Telemetry 日志处理器的日志级别。",
                      "hash" : "V-opentelemetry-S-opentelemetry-logs-S-otel_logs-level",
                      "text" : "level",
                      "type" : "Enum(debug,info,notice,warning,error,critical,alert,emergency,all)",
                      "default" : "warning"
                    },
                    {
                      "doc" : "启用或禁用 open telemetry 指标",
                      "hash" : "V-opentelemetry-S-opentelemetry-logs-S-otel_logs-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "两次连续导出 Open Telemetry 信号之间的延迟间隔。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-opentelemetry-S-opentelemetry-logs-S-otel_logs-scheduled_delay",
                      "text" : "scheduled_delay",
                      "type" : "Duration",
                      "default" : "1s"
                    }
                  ],
                  "text" : "otel_logs"
                }
              ],
              "hash" : "V-opentelemetry-S-opentelemetry-logs",
              "text" : "logs",
              "type" : "Struct(otel_logs)"
            },
            {
              "doc" : "Open Telemetry 追踪配置。",
              "refs" : [
                {
                  "doc" : "Open Telemetry 追踪配置。",
                  "hash" : "T-opentelemetry-S-opentelemetry-traces-S-otel_traces",
                  "fields" : [
                    {
                      "doc" : "启用或禁用 open telemetry 指标",
                      "hash" : "V-opentelemetry-S-opentelemetry-traces-S-otel_traces-enable",
                      "text" : "enable",
                      "type" : "Boolean",
                      "default" : "false"
                    },
                    {
                      "doc" : "两次连续导出 Open Telemetry 信号之间的延迟间隔。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                      "hash" : "V-opentelemetry-S-opentelemetry-traces-S-otel_traces-scheduled_delay",
                      "text" : "scheduled_delay",
                      "type" : "Duration",
                      "default" : "5s"
                    },
                    {
                      "doc" : "Open Telemetry 追踪过滤器配置",
                      "refs" : [
                        {
                          "doc" : "Open Telemetry 追踪过滤器配置",
                          "hash" : "T-opentelemetry-S-opentelemetry-traces-S-otel_traces-filter-S-trace_filter",
                          "fields" : [
                            {
                              "doc" : "如果启用，将追踪所有发布的消息，如果无法从消息中提取追踪 ID，则生成新的追踪 ID。\n否则，只追踪带有追踪上下文的消息。默认禁用。",
                              "hash" : "V-opentelemetry-S-opentelemetry-traces-S-otel_traces-filter-S-trace_filter-trace_all",
                              "text" : "trace_all",
                              "type" : "Boolean",
                              "default" : "false"
                            }
                          ],
                          "text" : "trace_filter"
                        }
                      ],
                      "hash" : "V-opentelemetry-S-opentelemetry-traces-S-otel_traces-filter",
                      "text" : "filter",
                      "type" : "Struct(trace_filter)"
                    }
                  ],
                  "text" : "otel_traces"
                }
              ],
              "hash" : "V-opentelemetry-S-opentelemetry-traces",
              "text" : "traces",
              "type" : "Struct(otel_traces)"
            },
            {
              "doc" : "Open Telemetry 导出器",
              "refs" : [
                {
                  "doc" : "Open Telemetry 导出器",
                  "hash" : "T-opentelemetry-S-opentelemetry-exporter-S-otel_exporter",
                  "fields" : [
                    {
                      "doc" : "导出器将要发送 Open Telemetry 信号数据的目标 URL。",
                      "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-endpoint",
                      "text" : "endpoint",
                      "type" : "String",
                      "default" : "\"http://localhost:4317\""
                    },
                    {
                      "doc" : "Open Telemetry 导出器的 SSL 配置",
                      "refs" : [
                        {
                          "doc" : "Socket options for SSL clients.",
                          "hash" : "T-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts",
                          "fields" : [
                            {
                              "doc" : "受信任的 PEM 格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证 TLS 对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
                              "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts-cacertfile",
                              "text" : "cacertfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "Deprecated since 5.1.4.",
                              "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts-cacerts",
                              "text" : "cacerts",
                              "type" : "Boolean"
                            },
                            {
                              "doc" : "PEM 格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
                              "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts-certfile",
                              "text" : "certfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "PEM 格式的私钥文件。",
                              "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts-keyfile",
                              "text" : "keyfile",
                              "type" : "String"
                            },
                            {
                              "doc" : "启用或禁用对等验证。",
                              "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts-verify",
                              "text" : "verify",
                              "type" : "Enum(verify_peer,verify_none)",
                              "default" : "verify_none"
                            },
                            {
                              "doc" : "启用 TLS 会话重用。",
                              "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts-reuse_sessions",
                              "text" : "reuse_sessions",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
                              "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts-depth",
                              "text" : "depth",
                              "type" : "Integer(0..+inf)",
                              "default" : "10"
                            },
                            {
                              "doc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
                              "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts-password",
                              "text" : "password",
                              "type" : "String"
                            },
                            {
                              "doc" : "支持所有 TLS/DTLS 版本<br/>\n注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
                              "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts-versions",
                              "text" : "versions",
                              "type" : "Array(String)",
                              "default" : "[tlsv1.3, tlsv1.2]"
                            },
                            {
                              "doc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。\n\n<br/>\nPSK 密码套件：\n<code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
                              "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts-ciphers",
                              "text" : "ciphers",
                              "type" : "Array(String)",
                              "default" : "[]"
                            },
                            {
                              "doc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
                              "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts-secure_renegotiate",
                              "text" : "secure_renegotiate",
                              "type" : "Boolean",
                              "default" : "true"
                            },
                            {
                              "doc" : "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
                              "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts-log_level",
                              "text" : "log_level",
                              "type" : "Enum(emergency,alert,critical,error,warning,notice,info,debug,none,all)",
                              "default" : "notice"
                            },
                            {
                              "doc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。<br/>表示时间持续的字符串，例如：<code>10s</code>、<code>2.5m</code>、<code>1h30m</code>、<code>1W2D</code> 或 <code>2345ms</code>，其中 <code>ms</code> 是最小单位。当指定精度时，可能会忽略更精细的时间部分：例如将 <code>1200ms</code> 用于 <code>Duration(s)</code> 相当于写 <code>1s</code>。单位部分不区分大小写。",
                              "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts-hibernate_after",
                              "text" : "hibernate_after",
                              "type" : "Duration",
                              "default" : "5s"
                            },
                            {
                              "doc" : "启用 TLS。",
                              "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts-enable",
                              "text" : "enable",
                              "type" : "Boolean",
                              "default" : "false"
                            },
                            {
                              "doc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
                              "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options-S-ssl_client_opts-server_name_indication",
                              "text" : "server_name_indication",
                              "type" : "OneOf(String(\"disable\"),String)"
                            }
                          ],
                          "text" : "ssl_client_opts"
                        }
                      ],
                      "hash" : "V-opentelemetry-S-opentelemetry-exporter-S-otel_exporter-ssl_options",
                      "text" : "ssl_options",
                      "type" : "Struct(ssl_client_opts)",
                      "default" : "{enable = false}"
                    }
                  ],
                  "text" : "otel_exporter"
                }
              ],
              "hash" : "V-opentelemetry-S-opentelemetry-exporter",
              "text" : "exporter",
              "type" : "Struct(otel_exporter)"
            }
          ],
          "text" : "opentelemetry"
        }
      ],
      "hash" : "V-opentelemetry",
      "text" : "opentelemetry",
      "type" : "Struct(opentelemetry)"
    },
    {
      "refs" : [
        {
          "doc" : "API 密钥， 可用于请求除管理 API 密钥及 Dashboard 用户管理 API 的其它接口",
          "hash" : "T-api_key-S-api_key",
          "fields" : [
            {
              "doc" : "用于在启动 EMQX 时，添加 API 密钥，其格式为 {appid}:{secret}，多个密钥用换行分隔。：\n      ```\n      7e729ae70d23144b:2QILI9AcQ9BYlVqLDHQNWN2saIjBV4egr1CZneTNKr9CpK\n      ec3907f865805db0:Ee3taYltUKtoBVD9C3XjQl9C6NXheip8Z9B69BpUv5JxVHL\n      ```",
              "hash" : "V-api_key-S-api_key-bootstrap_file",
              "text" : "bootstrap_file",
              "type" : "String",
              "default" : "\"\""
            }
          ],
          "text" : "api_key"
        }
      ],
      "hash" : "V-api_key",
      "text" : "api_key",
      "type" : "Struct(api_key)"
    }
  ],
  "text" : "root"
}