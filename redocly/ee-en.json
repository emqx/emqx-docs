{
  "info": {
    "version": "5.8.1-beta.2",
    "title": "EMQX Enterprise API"
  },
  "components": {
    "parameters": {
      "api_key.name": {
        "in": "path",
        "name": "name",
        "description": "^[A-Za-z]+[A-Za-z0-9-_]*$",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "EMQX-API-KEY-1"
      },
      "cluster.node": {
        "in": "path",
        "name": "node",
        "description": "node name",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "emqx2@127.0.0.1"
      },
      "emqx_authz_api_mnesia.clientid": {
        "in": "path",
        "name": "clientid",
        "description": "ClientID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "client1"
      },
      "emqx_authz_api_mnesia.username": {
        "in": "path",
        "name": "username",
        "description": "Username",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "user1"
      },
      "emqx_mgmt_api_clients.requested_client_fields": {
        "in": "query",
        "name": "fields",
        "description": "Comma separated list of client fields to return in the response",
        "required": false,
        "schema": {
          "default": "all",
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "client_attrs",
                  "awaiting_rel_cnt",
                  "awaiting_rel_max",
                  "clean_start",
                  "clientid",
                  "connected",
                  "connected_at",
                  "created_at",
                  "disconnected_at",
                  "expiry_interval",
                  "heap_size",
                  "inflight_cnt",
                  "inflight_max",
                  "ip_address",
                  "is_bridge",
                  "is_expired",
                  "keepalive",
                  "mailbox_len",
                  "mqueue_dropped",
                  "mqueue_len",
                  "mqueue_max",
                  "node",
                  "port",
                  "proto_name",
                  "proto_ver",
                  "recv_cnt",
                  "recv_msg",
                  "recv_msg.dropped",
                  "recv_msg.dropped.await_pubrel_timeout",
                  "recv_msg.qos0",
                  "recv_msg.qos1",
                  "recv_msg.qos2",
                  "recv_oct",
                  "recv_pkt",
                  "reductions",
                  "send_cnt",
                  "send_msg",
                  "send_msg.dropped",
                  "send_msg.dropped.expired",
                  "send_msg.dropped.queue_full",
                  "send_msg.dropped.too_large",
                  "send_msg.qos0",
                  "send_msg.qos1",
                  "send_msg.qos2",
                  "send_oct",
                  "send_pkt",
                  "subscriptions_cnt",
                  "subscriptions_max",
                  "username",
                  "mountpoint",
                  "durable",
                  "n_streams",
                  "seqno_q1_comm",
                  "seqno_q1_dup",
                  "seqno_q1_next",
                  "seqno_q2_comm",
                  "seqno_q2_dup",
                  "seqno_q2_rec",
                  "seqno_q2_next"
                ]
              }
            },
            {
              "type": "string",
              "enum": [
                "all"
              ]
            }
          ]
        }
      },
      "emqx_mgmt_api_nodes.node_name": {
        "in": "path",
        "name": "node",
        "description": "Node name",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "emqx@127.0.0.1"
      },
      "emqx_mgmt_api_stats.aggregate": {
        "in": "query",
        "name": "aggregate",
        "description": "Calculation aggregate for all nodes",
        "required": false,
        "schema": {
          "type": "boolean"
        },
        "example": false
      },
      "emqx_prometheus_api.mode": {
        "in": "query",
        "name": "mode",
        "description": "<br/>Metrics format mode.<br/><br/>`node`:<br/>Return metrics from local node. And it is the default behaviour if `mode` not specified.<br/><br/>`all_nodes_aggregated`:<br/>Return metrics for all nodes.<br/>And if possible, calculate the arithmetic sum or logical sum of the indicators of all nodes.<br/><br/>`all_nodes_unaggregated`:<br/>Return metrics from all nodes, and the metrics are not aggregated.<br/>The node name will be included in the returned results to<br/>indicate that certain metrics were returned on a certain node.<br/>",
        "required": false,
        "schema": {
          "default": "node",
          "type": "string",
          "enum": [
            "node",
            "all_nodes_aggregated",
            "all_nodes_unaggregated"
          ]
        },
        "example": "node"
      },
      "file_transfer.client_id": {
        "in": "path",
        "name": "clientid",
        "description": "MQTT Client ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "file_transfer.file_id": {
        "in": "path",
        "name": "fileid",
        "description": "File ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "file_transfer.file_node": {
        "in": "query",
        "name": "node",
        "description": "Node under which the file is located",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "emqx@127.0.0.1"
      },
      "file_transfer.file_ref": {
        "in": "query",
        "name": "fileref",
        "description": "File reference",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "file1"
      },
      "file_transfer.following": {
        "in": "query",
        "name": "following",
        "description": "Cursor to start listing files from",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "listeners.listener_id": {
        "in": "path",
        "name": "id",
        "description": "Listener id",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "tcp:demo"
      },
      "plugins.name": {
        "in": "path",
        "name": "name",
        "description": "^[A-Za-z]+[A-Za-z0-9-_.]*$",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "emqx_plugin_template-5.0-rc.1"
      },
      "public.cursor": {
        "in": "query",
        "name": "cursor",
        "description": "Opaque value representing the current iteration state.",
        "schema": {
          "default": "none",
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "none"
              ]
            }
          ]
        }
      },
      "public.limit": {
        "in": "query",
        "name": "limit",
        "description": "Results per page(max 10000)",
        "schema": {
          "default": 100,
          "maximum": 10000,
          "type": "integer",
          "minimum": 1
        },
        "example": 50
      },
      "public.page": {
        "in": "query",
        "name": "page",
        "description": "Page number of the results to fetch.",
        "schema": {
          "default": 1,
          "type": "integer",
          "minimum": 1
        },
        "example": 1
      },
      "public.position": {
        "in": "query",
        "name": "position",
        "description": "An opaque token that can then be in subsequent requests to get  the next chunk of results: \"?position={prev_response.meta.position}\"<br/>It is used instead of \"page\" parameter to traverse highly volatile data.<br/>Can be omitted or set to \"none\" to get the first chunk of data.",
        "required": false,
        "schema": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "end_of_data"
              ]
            },
            {
              "type": "string",
              "enum": [
                "none"
              ]
            }
          ]
        },
        "example": "none"
      },
      "relup.node_name": {
        "in": "path",
        "name": "node",
        "description": "The node to be upgraded",
        "required": true,
        "schema": {
          "default": "all",
          "type": "string"
        },
        "example": "emqx@127.0.0.1"
      },
      "trace.bytes": {
        "in": "query",
        "name": "bytes",
        "description": "Maximum number of bytes to send in response",
        "required": false,
        "schema": {
          "default": 1000,
          "maximum": 2147483647,
          "type": "integer",
          "minimum": 0
        }
      },
      "trace.name": {
        "in": "path",
        "name": "name",
        "description": "[a-zA-Z0-9-_]",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "EMQX-TRACE-1"
      },
      "trace.node": {
        "in": "query",
        "name": "node",
        "description": "Node name",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "emqx@127.0.0.1"
      },
      "trace.position": {
        "in": "query",
        "name": "position",
        "description": "Offset from the current trace position.",
        "required": false,
        "schema": {
          "default": 0,
          "type": "integer"
        }
      }
    },
    "schemas": {
      "redis.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "The parameters of the action.",
            "$ref": "#/components/schemas/bridge_redis.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/redis.action_resource_opts"
          }
        },
        "type": "object"
      },
      "pulsar.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pulsar"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configs.",
            "$ref": "#/components/schemas/pulsar.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/pulsar.action_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.gateway_listener_overview": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Listener ID"
          },
          "running": {
            "type": "boolean",
            "description": "Listener Running status"
          },
          "type": {
            "type": "string",
            "enum": [
              "tcp",
              "ssl",
              "udp",
              "dtls"
            ],
            "description": "Listener Type"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.post_connector": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "endpoint",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kinesis"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "Access Key ID for connecting to Amazon Kinesis."
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "AWS Secret Access Key for connecting to Amazon Kinesis.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "endpoint": {
            "type": "string",
            "description": "The url of Amazon Kinesis endpoint.",
            "example": "https://kinesis.us-east-1.amazonaws.com"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kinesis.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx.console_handler": {
        "properties": {
          "level": {
            "default": "warning",
            "type": "string",
            "enum": [
              "debug",
              "info",
              "notice",
              "warning",
              "error",
              "critical",
              "alert",
              "emergency",
              "all"
            ],
            "description": "The log level for the current log handler.<br/>Defaults to warning."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable this log handler."
          },
          "formatter": {
            "default": "text",
            "type": "string",
            "enum": [
              "text",
              "json"
            ],
            "description": "Choose log formatter. <code>text</code> for free text, and <code>json</code> for structured logging."
          },
          "timestamp_format": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              "epoch",
              "rfc3339"
            ],
            "description": "Pick a timestamp format:<br/>- `auto`: automatically choose the best format based on log formatter. `epoch` for JSON and `rfc3339` for text.<br/>- `epoch`: Unix epoch time in microseconds.<br/>- `rfc3339`: RFC3339 format."
          },
          "time_offset": {
            "default": "system",
            "type": "string",
            "description": "The time offset to be used when formatting the timestamp.<br/>Can be one of:<br/>  - <code>system</code>: the time offset used by the local system<br/>  - <code>utc</code>: the UTC time offset<br/>  - <code>+-[hh]:[mm]</code>: user specified time offset, such as \"-02:00\" or \"+00:00\"<br/>Defaults to: <code>system</code>.<br/>This config has no effect for when formatter is <code>json</code> as the timestamp in JSON is milliseconds since epoch."
          },
          "payload_encode": {
            "default": "text",
            "type": "string",
            "enum": [
              "hex",
              "text",
              "hidden"
            ],
            "description": "Determine the format of the payload format in the trace file.<br/><br/>`text`: Text-based protocol or plain text protocol.<br/> It is recommended when payload is JSON encoded.<br/><br/>`hex`: Binary hexadecimal encode. It is recommended when payload is a custom binary protocol.<br/><br/>`hidden`: payload is obfuscated as `******`"
          }
        },
        "type": "object"
      },
      "bridge_http.get_connector": {
        "required": [
          "name",
          "type",
          "url"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "http"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "url": {
            "type": "string",
            "description": "The URL of the HTTP action.<br/><br/>Template with variables is allowed in the path, but variables cannot be used in the scheme, host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic} </code> is allowed, but<br/><code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code><br/>is not allowed."
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "type": "object",
            "description": "The headers of the HTTP request.<br/><br/>Template with variables is allowed.",
            "example": {},
            "is_template": true
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "request": {
            "type": "object",
            "deprecated": true,
            "description": "This field is never used, so we deprecated it since 5.3.2.",
            "example": {}
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_http.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "action_couchbase.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "couchbase"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Set of parameters for the action.",
            "$ref": "#/components/schemas/action_couchbase.parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/action_couchbase.action_resource_opts"
          }
        },
        "type": "object"
      },
      "modules.rewrite": {
        "required": [
          "action",
          "dest_topic",
          "re",
          "source_topic"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "subscribe",
              "publish",
              "all"
            ],
            "description": "Topic rewriting takes effect on the type of operation:<br/>  - `subscribe`: Rewrite topic when client do subscribe.<br/>  - `publish`: Rewrite topic when client do publish.<br/>  - `all`: Both",
            "example": "publish"
          },
          "source_topic": {
            "type": "string",
            "description": "Source topic, specified by the client.",
            "example": "x/#"
          },
          "dest_topic": {
            "type": "string",
            "description": "Destination topic.",
            "example": "z/y/$1"
          },
          "re": {
            "type": "string",
            "description": "Regular expressions",
            "example": "^x/y/(.+)$"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.auth_basic": {
        "required": [
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "The username as configured at the IoTDB REST interface"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password as configured at the IoTDB REST interface",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "greptimedb"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_greptimedb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "schema_validation_http_api.metrics": {
        "properties": {
          "matched": {
            "type": "integer",
            "minimum": 0
          },
          "succeeded": {
            "type": "integer",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "bridge_cassa.get": {
        "required": [
          "keyspace",
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "cassandra"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "cql": {
            "default": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "CQL Template"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Cassandra. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "servers": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port][,Host2:Port]`.<br/><br/>The Cassandra default port 9042 is used if `[:Port]` is not specified."
          },
          "keyspace": {
            "type": "string",
            "description": "Keyspace name to connect to."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_redis.post_sentinel": {
        "required": [
          "command_template",
          "name",
          "sentinel",
          "servers",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "command_template": {
            "type": "array",
            "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_sentinel"
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "sentinel",
            "type": "string",
            "enum": [
              "sentinel"
            ],
            "description": "Sentinel mode. Must be set to 'sentinel' when Redis server is running in sentinel mode."
          },
          "sentinel": {
            "type": "string",
            "description": "The cluster name in Redis sentinel mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis database ID.",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "redis_sentinel"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          }
        },
        "type": "object"
      },
      "bridge_kafka.producer_buffer": {
        "properties": {
          "mode": {
            "default": "memory",
            "type": "string",
            "enum": [
              "memory",
              "disk",
              "hybrid"
            ],
            "description": "Message buffer mode.<br/><br/><code>memory</code>: Buffer all messages in memory. The messages will be lost in case of EMQX node restart<br/><code>disk</code>: Buffer all messages on disk. The messages on disk are able to survive EMQX node restart.<br/><code>hybrid</code>: Buffer message in memory first, when up to certain limit (see <code>segment_bytes</code> config for more information), then start offloading messages to disk, Like <code>memory</code> mode, the messages will be lost in case of EMQX node restart."
          },
          "per_partition_limit": {
            "default": "2GB",
            "type": "string",
            "description": "Number of bytes allowed to buffer for each partition. When this limit is exceeded, older messages will be discarded to make room for new messages to be buffered.",
            "example": "32MB"
          },
          "segment_bytes": {
            "default": "10MB",
            "type": "string",
            "description": "Applicable when buffer mode is set to <code>disk</code> or <code>hybrid</code>.<br/>This setting specifies the size of each buffer file stored on disk.",
            "example": "32MB"
          },
          "memory_overload_protection": {
            "default": false,
            "type": "boolean",
            "description": "Applicable when buffer mode is set to <code>memory</code><br/>EMQX will drop old buffered messages under high memory pressure. The high memory threshold is defined in config <code>sysmon.os.sysmem_high_watermark</code>. NOTE: This config only works on Linux."
          }
        },
        "type": "object"
      },
      "emqx.mqtt": {
        "properties": {
          "idle_timeout": {
            "default": "15s",
            "description": "Configure the duration of time that a connection can remain idle (i.e., without any data transfer) before being:<br/>  - Automatically disconnected  if no CONNECT package is received from the client yet.<br/>  - Put into hibernation mode to save resources if some CONNECT packages are already received.<br/>Note: Please set the parameter with caution as long idle time will lead to resource waste.",
            "oneOf": [
              {
                "type": "string",
                "example": "12m"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "max_packet_size": {
            "default": "1MB",
            "type": "string",
            "description": "Maximum MQTT packet size allowed. Default: 1 MB, Maximum: 256 MB",
            "example": "32MB"
          },
          "max_clientid_len": {
            "default": 65535,
            "maximum": 65535,
            "type": "integer",
            "description": "Maximum allowed length of MQTT Client ID.",
            "minimum": 23
          },
          "max_topic_levels": {
            "default": 128,
            "maximum": 65535,
            "type": "integer",
            "description": "Maximum topic levels allowed.",
            "minimum": 1
          },
          "max_topic_alias": {
            "default": 65535,
            "maximum": 65535,
            "type": "integer",
            "description": "Maximum topic alias, 0 means no topic alias supported.",
            "minimum": 0
          },
          "retain_available": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable support for MQTT retained message."
          },
          "wildcard_subscription": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable support for MQTT wildcard subscription."
          },
          "shared_subscription": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable support for MQTT shared subscription."
          },
          "shared_subscription_strategy": {
            "default": "round_robin",
            "type": "string",
            "enum": [
              "random",
              "round_robin",
              "round_robin_per_group",
              "sticky",
              "local",
              "hash_topic",
              "hash_clientid"
            ],
            "description": "Dispatch strategy for shared subscription.<br/> - `random`: Randomly select a subscriber for dispatch;<br/> - `round_robin`: Clients in a shared subscription group will consume messages in turn, and the progress of the loop is recorded independently in each publisher, so two adjacent messages from **different publishers** may be consumed by the same client in the subscription group;<br/> - `round_robin_per_group`: Clients in a shared subscription group will consume messages in turn, and the progress of the loop is recorded independently in each node, so two adjacent messages from **different nodes** may be consumed by the same client in the subscription group;<br/> - `local`: Randomly select a subscriber on the current node, if there are no subscribers on the current node, then randomly select within the cluster;<br/> - `sticky`: Continuously dispatch messages to the initially selected subscriber until their session ends. The initial selection is made based on `mqtt_shared_subscription_initial_sticky_pick`;<br/> - `hash_clientid`: Hash the publisher's client ID to select a subscriber;<br/> - `hash_topic`: Hash the publishing topic to select a subscriber."
          },
          "shared_subscription_initial_sticky_pick": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "local",
              "hash_topic",
              "hash_clientid"
            ],
            "description": "The strategy to use for the initial subscriber pick when shared_subscription_strategy is `sticky`.<br/> - `random`: Randomly select the subscriber;<br/> - `local`: Randomly select a subscriber on the current node, if there are no subscribers on the current node, then randomly select within the cluster;<br/> - `hash_clientid`: Hash the publisher's client ID to select a subscriber;<br/> - `hash_topic`: Hash the publishing topic to select a subscriber."
          },
          "exclusive_subscription": {
            "default": false,
            "type": "boolean",
            "description": "Whether to enable support for MQTT exclusive subscription."
          },
          "ignore_loop_deliver": {
            "default": false,
            "type": "boolean",
            "description": "Whether the messages sent by the MQTT v3.1.1/v3.1.0 client will be looped back to the publisher itself, similar to <code>No Local</code> in MQTT 5.0."
          },
          "strict_mode": {
            "default": false,
            "type": "boolean",
            "description": "Whether to parse MQTT messages in strict mode.<br/>In strict mode, invalid utf8 strings in for example client ID, topic name, etc. will cause the client to be disconnected."
          },
          "response_information": {
            "default": "",
            "type": "string",
            "description": "UTF-8 string, for creating the response topic, for example, if set to <code>reqrsp/</code>, the publisher/subscriber will communicate using the topic prefix <code>reqrsp/</code>.<br/>To disable this feature, input <code>\"\"</code> in the text box below. Only applicable to MQTT 5.0 clients."
          },
          "server_keepalive": {
            "default": "disabled",
            "description": "The keep alive duration required by EMQX. To use the setting from the client side, choose disabled from the drop-down list. Only applicable to MQTT 5.0 clients.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "disabled"
                ]
              },
              {
                "type": "integer",
                "minimum": 1
              }
            ]
          },
          "keepalive_multiplier": {
            "default": 1.5,
            "type": "number",
            "description": "Keep-Alive Timeout = Keep-Alive interval × Keep-Alive Multiplier.<br/>The default value 1.5 is following the MQTT 5.0 specification. This multiplier is adjustable, providing system administrators flexibility for tailoring to their specific needs. For instance, if a client's 10-second Keep-Alive interval PINGREQ gets delayed by an extra 10 seconds, changing the multiplier to 2 lets EMQX tolerate this delay."
          },
          "keepalive_check_interval": {
            "default": "30s",
            "type": "string",
            "description": "The frequency of checking for incoming MQTT packets determines how often the server will check for new MQTT packets.<br/>If a certain amount of time passes without any packets being sent from the client, this time will be added up.<br/>Once the accumulated time exceeds `keepalive-interval * keepalive-multiplier`, the connection will be terminated.<br/>The default is set to 30 seconds, with a minimum value of 1 second and a maximum value of `keepalive-interval / 2`.",
            "example": "12m"
          },
          "retry_interval": {
            "default": "infinity",
            "description": "Retry interval for QoS 1/2 message delivering.",
            "oneOf": [
              {
                "type": "string",
                "example": "12m"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "use_username_as_clientid": {
            "default": false,
            "type": "boolean",
            "description": "Whether to use Username as Client ID.<br/>This setting takes effect later than `peer_cert_as_username` and `peer_cert_as_clientid`."
          },
          "peer_cert_as_username": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "disabled",
              "cn",
              "dn",
              "crt",
              "pem",
              "md5"
            ],
            "description": "Use the CN, DN field in the peer certificate or the entire certificate content as Username. Only works for the TLS connection.<br/>Supported configurations are the following:<br/>- <code>cn</code>: CN field of the certificate<br/>- <code>dn</code>: DN field of the certificate<br/>- <code>crt</code>: Content of the <code>DER</code> or <code>PEM</code> certificate<br/>- <code>pem</code>: Convert <code>DER</code> certificate content to <code>PEM</code> format and use as Username<br/>- <code>md5</code>: MD5 value of the <code>DER</code> or <code>PEM</code> certificate"
          },
          "peer_cert_as_clientid": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "disabled",
              "cn",
              "dn",
              "crt",
              "pem",
              "md5"
            ],
            "description": "Use the CN, DN field in the peer certificate or the entire certificate content as Client ID. Only works for the TLS connection.<br/>Supported configurations are the following:<br/>- <code>cn</code>: CN field of the certificate<br/>- <code>dn</code>: DN field of the certificate<br/>- <code>crt</code>: <code>DER</code> or <code>PEM</code> certificate<br/>- <code>pem</code>: Convert <code>DER</code> certificate content to <code>PEM</code> format and use as Client ID<br/>- <code>md5</code>: MD5 value of the <code>DER</code> or <code>PEM</code> certificate"
          },
          "client_attrs_init": {
            "default": [],
            "type": "array",
            "description": "Specify how to initialize client attributes.<br/>Each client attribute can be initialized as `client_attrs.{NAME}`,<br/>where `{NAME}` is the name of the attribute specified in the config field `set_as_attr`.<br/>The initialized client attribute will be stored in the `client_attrs` property with the specified name,<br/>and can be used as a placeholder in a template for authentication and authorization.<br/>For example, use `${client_attrs.alias}` to render an HTTP POST body when `set_as_attr = alias`,<br/>or render listener config `moutpoint = devices/${client_attrs.alias}/` to initialize a per-client topic namespace.",
            "items": {
              "$ref": "#/components/schemas/emqx.client_attrs_init"
            }
          },
          "session_expiry_interval": {
            "default": "2h",
            "type": "string",
            "description": "Specifies how long the session will expire after the connection is disconnected, only for non-MQTT 5.0 connections.",
            "example": "12m"
          },
          "message_expiry_interval": {
            "default": "infinity",
            "description": "The expiry interval of MQTT messages. For MQTT 5.0 clients, this configuration will only take effect when the `Message-Expiry-Interval` property is not set in the message; otherwise, the value of the `Message-Expiry-Interval` property will be used. For MQTT versions older than 5.0, this configuration will always take effect. Please note that setting `message_expiry_interval` greater than `session_expiry_interval` is meaningless, as all messages will be cleared when the session expires.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "12m"
              }
            ]
          },
          "max_awaiting_rel": {
            "default": 100,
            "description": "For each publisher session, the maximum number of outstanding QoS 2 messages pending on the client to send PUBREL. After reaching this limit, new QoS 2 PUBLISH requests will be rejected with `147(0x93)` until either PUBREL is received or timed out.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "integer",
                "minimum": 0
              }
            ]
          },
          "max_qos_allowed": {
            "default": 2,
            "maximum": 2,
            "type": "integer",
            "description": "Maximum QoS allowed.",
            "minimum": 0,
            "example": 0
          },
          "mqueue_priorities": {
            "default": "disabled",
            "description": "Topic priority list. Prioritize messages in the message queue by topic. The priority range is `[1, 255]`.<br/><br/>The larger the value, the higher the priority. Messages with higher priority will be sent first.<br/><br/>Topics not in this list will use the default priority (specified by `mqueue_default_priority`).<br/><br/>By default, this list is empty, which means all topics have the same priority.<br/><br/>Note: commas and equal signs are not supported in topic names.<br/><br/>For example, if you want `topic/1` to have a higher priority than `topic/2`, you can configure it like this:<br/><br/>`mqueue_priorities: {\\\"topic/1\\\": 10, \\\"topic/2\\\": 8}`",
            "oneOf": [
              {
                "type": "object",
                "example": {}
              },
              {
                "type": "string",
                "enum": [
                  "disabled"
                ]
              }
            ]
          },
          "mqueue_default_priority": {
            "default": "lowest",
            "type": "string",
            "enum": [
              "highest",
              "lowest"
            ],
            "description": "Default topic priority, which will be used by topics not in <code>Topic Priorities</code> (<code>mqueue_priorities</code>)."
          },
          "mqueue_store_qos0": {
            "default": true,
            "type": "boolean",
            "description": "Specifies whether to store QoS 0 messages in the message queue while the connection is down but the session remains."
          },
          "max_mqueue_len": {
            "default": 1000,
            "description": "Maximum queue length. Enqueued messages when persistent client disconnected, or inflight window is full.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "integer",
                "minimum": 0
              }
            ]
          },
          "max_inflight": {
            "default": 32,
            "maximum": 65535,
            "type": "integer",
            "description": "Maximum number of QoS 1 and QoS 2 messages that are allowed to be delivered simultaneously before completing the acknowledgment.",
            "minimum": 1
          },
          "max_subscriptions": {
            "default": "infinity",
            "description": "Maximum number of subscriptions allowed per client.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "integer",
                "minimum": 1
              }
            ]
          },
          "upgrade_qos": {
            "default": false,
            "type": "boolean",
            "description": "Force upgrade of QoS level according to subscription."
          },
          "await_rel_timeout": {
            "default": "300s",
            "type": "string",
            "description": "For client to broker QoS 2 message, the time limit for the broker to wait before the `PUBREL` message is received. The wait is aborted after timed out, meaning the packet ID is freed for new `PUBLISH` requests. Receiving a stale `PUBREL` causes a warning level log. Note, the message is delivered to subscribers before entering the wait for PUBREL.",
            "example": "12m"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_publish.publish_ok": {
        "properties": {
          "id": {
            "type": "string",
            "description": "A globally unique message ID for correlation/tracing."
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_pub": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "message_publish"
            ],
            "description": "Event Type"
          },
          "id": {
            "type": "string",
            "description": "Message ID"
          },
          "clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "payload": {
            "type": "string",
            "description": "The Message Payload"
          },
          "peerhost": {
            "type": "string",
            "description": "The IP Address of the Peer Client"
          },
          "topic": {
            "type": "string",
            "description": "Message Topic"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "The Time that this Message is Received"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "The Message QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "rule_engine.builtin_action_republish": {
        "properties": {
          "function": {
            "type": "string",
            "enum": [
              "republish"
            ],
            "description": "Republish the message as a new MQTT message"
          },
          "args": {
            "default": {},
            "$ref": "#/components/schemas/rule_engine.republish_args"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.action_parameters": {
        "required": [
          "partition_key",
          "stream_name"
        ],
        "properties": {
          "payload_template": {
            "default": "${.}",
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, will send all the available context in JSON format."
          },
          "stream_name": {
            "type": "string",
            "description": "The Amazon Kinesis Stream to publish messages to."
          },
          "partition_key": {
            "type": "string",
            "description": "The Amazon Kinesis Partition Key associated to published message. Placeholders in format of ${var} are supported."
          }
        },
        "type": "object"
      },
      "dashboard.http": {
        "properties": {
          "bind": {
            "default": 0,
            "type": "string",
            "description": "Bind the listener to a specified address and port number, for example `127.0.0.1:18083`.<br/>If configured with just the port number (e.g. `18083`) it's equivalent to binding to all addresses `0.0.0.0`.<br/>The listener is disabled if `bind` is `0`.",
            "example": "0.0.0.0:18083"
          },
          "num_acceptors": {
            "default": 4,
            "type": "integer",
            "description": "Socket acceptor pool size for TCP protocols. Default is the number of schedulers online"
          },
          "max_connections": {
            "default": 512,
            "type": "integer",
            "description": "The maximum number of concurrent connections allowed by the listener."
          },
          "backlog": {
            "default": 1024,
            "type": "integer",
            "description": "Defines the maximum length that the queue of pending connections can grow to."
          },
          "send_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Send timeout for the socket.",
            "example": "12m"
          },
          "inet6": {
            "default": false,
            "type": "boolean",
            "description": "Enable IPv6 support, default is false, which means IPv4 only."
          },
          "ipv6_v6only": {
            "default": false,
            "type": "boolean",
            "description": "Disable IPv4-to-IPv6 mapping for the listener.<br/>The configuration is only valid when the inet6 is true."
          },
          "proxy_header": {
            "default": false,
            "type": "boolean",
            "description": "Enable support for `HAProxy` header. Be aware once enabled regular HTTP requests can't be handled anymore."
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.update_exproto": {
        "required": [
          "handler",
          "server"
        ],
        "properties": {
          "server": {
            "description": "Configurations for starting the <code>ConnectionAdapter</code> service",
            "$ref": "#/components/schemas/gateway.exproto_grpc_server"
          },
          "handler": {
            "description": "Configurations for request to <code>ConnectionHandler</code> service",
            "$ref": "#/components/schemas/gateway.exproto_grpc_handler"
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          }
        },
        "type": "object"
      },
      "emqx_authn_api.request_user_create": {
        "required": [
          "password",
          "user_id"
        ],
        "properties": {
          "user_id": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "is_superuser": {
            "default": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_stats.per_node_data": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name",
            "example": "emqx@127.0.0.1"
          },
          "durable_subscriptions.count": {
            "type": "integer",
            "description": "Number of current subscriptions from durable sessions in the cluster",
            "minimum": 0,
            "example": 0
          },
          "channels.count": {
            "type": "integer",
            "description": "sessions.count",
            "minimum": 0,
            "example": 0
          },
          "channels.max": {
            "type": "integer",
            "description": "session.max",
            "minimum": 0,
            "example": 0
          },
          "connections.count": {
            "type": "integer",
            "description": "Number of current connections",
            "minimum": 0,
            "example": 0
          },
          "connections.max": {
            "type": "integer",
            "description": "Historical maximum number of connections",
            "minimum": 0,
            "example": 0
          },
          "delayed.count": {
            "type": "integer",
            "description": "Number of delayed messages",
            "minimum": 0,
            "example": 0
          },
          "delayed.max": {
            "type": "integer",
            "description": "Historical maximum number of delayed messages",
            "minimum": 0,
            "example": 0
          },
          "live_connections.count": {
            "type": "integer",
            "description": "Number of current live connections",
            "minimum": 0,
            "example": 0
          },
          "live_connections.max": {
            "type": "integer",
            "description": "Historical maximum number of live connections",
            "minimum": 0,
            "example": 0
          },
          "cluster_sessions.count": {
            "type": "integer",
            "description": "Number of sessions in the cluster",
            "minimum": 0,
            "example": 0
          },
          "cluster_sessions.max": {
            "type": "integer",
            "description": "Historical maximum number of sessions in the cluster",
            "minimum": 0,
            "example": 0
          },
          "retained.count": {
            "type": "integer",
            "description": "Number of currently retained messages",
            "minimum": 0,
            "example": 0
          },
          "retained.max": {
            "type": "integer",
            "description": "Historical maximum number of retained messages",
            "minimum": 0,
            "example": 0
          },
          "sessions.count": {
            "type": "integer",
            "description": "Number of current sessions",
            "minimum": 0,
            "example": 0
          },
          "sessions.max": {
            "type": "integer",
            "description": "Historical maximum number of sessions",
            "minimum": 0,
            "example": 0
          },
          "suboptions.count": {
            "type": "integer",
            "description": "subscriptions.count",
            "minimum": 0,
            "example": 0
          },
          "suboptions.max": {
            "type": "integer",
            "description": "subscriptions.max",
            "minimum": 0,
            "example": 0
          },
          "subscribers.count": {
            "type": "integer",
            "description": "Number of current subscribers",
            "minimum": 0,
            "example": 0
          },
          "subscribers.max": {
            "type": "integer",
            "description": "Historical maximum number of subscribers",
            "minimum": 0,
            "example": 0
          },
          "subscriptions.count": {
            "type": "integer",
            "description": "Number of current subscriptions, including shared subscriptions, but not subscriptions from durable sessions",
            "minimum": 0,
            "example": 0
          },
          "subscriptions.max": {
            "type": "integer",
            "description": "Historical maximum number of subscriptions",
            "minimum": 0,
            "example": 0
          },
          "subscriptions.shared.count": {
            "type": "integer",
            "description": "Number of current shared subscriptions",
            "minimum": 0,
            "example": 0
          },
          "subscriptions.shared.max": {
            "type": "integer",
            "description": "Historical maximum number of shared subscriptions",
            "minimum": 0,
            "example": 0
          },
          "topics.count": {
            "type": "integer",
            "description": "Number of current topics",
            "minimum": 0,
            "example": 0
          },
          "topics.max": {
            "type": "integer",
            "description": "Historical maximum number of topics",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "bridge_tdengine.post": {
        "required": [
          "database",
          "name",
          "password",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "tdengine"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to TDengine. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The TDengine default port 6041 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "tdengine_connector.post": {
        "required": [
          "name",
          "password",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "tdengine"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The TDengine default port 6041 is used if `[:Port]` is not specified."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/tdengine_connector.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.post_api_v1": {
        "required": [
          "database",
          "name",
          "type",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to the InfluxDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>Please note that a placeholder for an integer value must be annotated with a suffix `i`. For example `${payload.int_value}i`."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The InfluxDB default port 8086 is used if `[:Port]` is not specified."
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "InfluxDB time precision."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "database": {
            "type": "string",
            "description": "InfluxDB database."
          },
          "username": {
            "type": "string",
            "description": "InfluxDB username."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB password.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "type": {
            "type": "string",
            "enum": [
              "influxdb_api_v1"
            ],
            "description": "The Bridge Type."
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          }
        },
        "type": "object"
      },
      "bridge_mongodb.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.action_parameters": {
        "properties": {
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          }
        },
        "type": "object"
      },
      "emqx.sys_topics": {
        "properties": {
          "sys_msg_interval": {
            "default": "1m",
            "description": "Time interval for publishing following system messages:<br/>  - `$SYS/brokers`<br/>  - `$SYS/brokers/<node>/version`<br/>  - `$SYS/brokers/<node>/sysdescr`<br/>  - `$SYS/brokers/<node>/stats/<name>`<br/>  - `$SYS/brokers/<node>/metrics/<name>`",
            "oneOf": [
              {
                "type": "string",
                "example": "12m"
              },
              {
                "type": "string",
                "enum": [
                  "disabled"
                ]
              }
            ]
          },
          "sys_heartbeat_interval": {
            "default": "30s",
            "description": "Time interval for publishing following heartbeat messages:<br/>  - `$SYS/brokers/<node>/uptime`<br/>  - `$SYS/brokers/<node>/datetime`",
            "oneOf": [
              {
                "type": "string",
                "example": "12m"
              },
              {
                "type": "string",
                "enum": [
                  "disabled"
                ]
              }
            ]
          },
          "sys_event_messages": {
            "description": "Client events messages.",
            "$ref": "#/components/schemas/emqx.event_names"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_event_hub_producer"
            ],
            "description": "The type of the bridge."
          },
          "name": {
            "type": "string",
            "description": "Bridge name, used as a human-readable description of the bridge."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in Azure Event Hubs."
          },
          "parameters": {
            "description": "Azure Event Hubs producer configs.",
            "$ref": "#/components/schemas/bridge_azure_event_hub.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "message_transformation_http_api.metrics": {
        "properties": {
          "matched": {
            "type": "integer",
            "minimum": 0
          },
          "succeeded": {
            "type": "integer",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "bridge_tdengine.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "tdengine"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "TDengine action parameters",
            "$ref": "#/components/schemas/bridge_tdengine.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_mqtt.put_connector": {
        "required": [
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the pool of MQTT clients that will publish messages to the remote broker.<br/><br/>Each MQTT client will be assigned 'clientid' of the form '${clientid_prefix}:${bridge_name}:egress:${node}:${n}'<br/>where 'n' is the number of a client inside the pool.",
            "minimum": 1
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_mqtt.resource_opts"
          },
          "mode": {
            "default": "cluster_shareload",
            "type": "string",
            "enum": [
              "cluster_shareload"
            ],
            "deprecated": true,
            "description": "The mode of the MQTT Bridge.<br/><br/>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/><br/>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid' is suffixed by the node name, this is to avoid<br/>clientid conflicts between different nodes. And we can only use shared subscription<br/>topic filters for <code>remote.topic</code> of ingress connections."
          },
          "server": {
            "type": "string",
            "description": "The host and port of the remote MQTT broker"
          },
          "clientid_prefix": {
            "type": "string",
            "description": "Optional prefix to prepend to the clientid used by egress bridges."
          },
          "reconnect_interval": {
            "type": "string",
            "deprecated": true
          },
          "proto_ver": {
            "default": "v4",
            "type": "string",
            "enum": [
              "v3",
              "v4",
              "v5"
            ],
            "description": "The MQTT protocol version"
          },
          "bridge_mode": {
            "default": false,
            "type": "boolean",
            "description": "If enable bridge mode.<br/>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT<br/>broker MUST support this feature.<br/>If bridge_mode is set to true, the bridge will indicate to the remote broker that it is a bridge not an ordinary client.<br/>This means that loop detection will be more effective and that retained messages will be propagated correctly."
          },
          "username": {
            "type": "string",
            "description": "The username of the MQTT protocol"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password of the MQTT protocol",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "Whether to start a clean session when reconnecting a remote broker for ingress bridge"
          },
          "keepalive": {
            "default": "160s",
            "type": "string",
            "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
            "minimum": 0
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only."
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.update_mqttsn": {
        "required": [
          "gateway_id"
        ],
        "properties": {
          "gateway_id": {
            "default": 1,
            "type": "integer",
            "description": "MQTT-SN Gateway ID.<br/>When the <code>broadcast</code> option is enabled, the gateway will broadcast ADVERTISE message with this value"
          },
          "broadcast": {
            "default": false,
            "type": "boolean",
            "description": "Whether to periodically broadcast ADVERTISE messages"
          },
          "enable_qos3": {
            "default": true,
            "type": "boolean",
            "description": "Allows connectionless clients to publish messages with a Qos of -1.<br/>This feature is defined for very simple client implementations which do not support any other features except this one. There is no connection setup nor tear down, no registration nor subscription. The client just sends its 'PUBLISH' messages to a GW"
          },
          "subs_resume": {
            "default": false,
            "type": "boolean",
            "description": "Whether to initiate all subscribed topic name registration messages to the client after the Session has been taken over by a new channel"
          },
          "predefined": {
            "default": [],
            "type": "array",
            "description": "The pre-defined topic IDs and topic names.<br/>A 'pre-defined' topic ID is a topic ID whose mapping to a topic name is known in advance by both the client's application and the gateway",
            "items": {
              "$ref": "#/components/schemas/gateway.mqttsn_predefined"
            }
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          }
        },
        "type": "object"
      },
      "bridge_opents.action_parameters_data": {
        "required": [
          "metric",
          "tags",
          "value"
        ],
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Timestamp. Placeholders in the format of ${var} are supported"
          },
          "metric": {
            "type": "string",
            "description": "Metric. Placeholders in the format of ${var} are supported"
          },
          "tags": {
            "description": "Tags. Only supports with placeholder to extract tags from a variable or a tags map",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "example": {}
              }
            ]
          },
          "value": {
            "description": "Value. Placeholders in the format of ${var} are supported",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "type": "object"
      },
      "relup.running_status": {
        "properties": {
          "node": {
            "type": "string",
            "example": "emqx@127.0.0.1"
          },
          "status": {
            "type": "string",
            "enum": [
              "in-progress",
              "idle"
            ],
            "description": "The upgrade status of a node:<br/>1. in-progress: hot upgrade is in progress.<br/>2. idle: hot upgrade is not started.<br/>"
          },
          "role": {
            "type": "string",
            "enum": [
              "core",
              "replicant"
            ],
            "description": "The role of the node",
            "example": "core"
          },
          "live_connections": {
            "type": "integer",
            "description": "The number of live connections",
            "example": 100
          },
          "current_vsn": {
            "type": "string",
            "description": "The current version of the node",
            "example": "5.8.0"
          },
          "upgrade_history": {
            "type": "array",
            "description": "The upgrade history of the node",
            "items": {
              "$ref": "#/components/schemas/relup.upgrade_history"
            },
            "example": [
              {
                "status": "finished",
                "started_at": "2024-07-15T13:48:02.648559+08:00",
                "result": "success",
                "upgrade_opts": {
                  "deploy_inplace": false
                },
                "target_vsn": "5.8.1",
                "from_vsn": "5.8.0",
                "finished_at": "2024-07-16T11:00:01.875627+08:00"
              }
            ]
          }
        },
        "type": "object"
      },
      "opents_connector.post": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "opents"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The URL of OpenTSDB endpoint."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "summary": {
            "default": true,
            "type": "boolean",
            "description": "Whether to return summary information."
          },
          "details": {
            "default": false,
            "type": "boolean",
            "description": "Whether to return detailed information."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/opents_connector.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_mqtt.ingress_local": {
        "properties": {
          "topic": {
            "type": "string",
            "description": "Send messages to which topic of the local broker.<br/><br/>Template with variables is allowed."
          },
          "qos": {
            "default": "${qos}",
            "description": "The QoS of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "maximum": 2,
                "type": "integer",
                "minimum": 0,
                "example": 0
              }
            ]
          },
          "retain": {
            "default": "${retain}",
            "description": "The 'retain' flag of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "payload": {
            "type": "string",
            "description": "The payload of the MQTT message to be sent.<br/><br/>Template with variables is allowed."
          }
        },
        "type": "object"
      },
      "bridge_oracle.get": {
        "required": [
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "oracle"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
            "type": "string",
            "format": "sql",
            "description": "SQL Template. The template string can contain placeholders for message metadata and payload field. The placeholders are inserted without any checking and special formatting, so it is important to ensure that the inserted values are formatted and escaped correctly."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Oracle Database. All MQTT 'PUBLISH' messages with the topic matching the local_topic will be forwarded.<br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is configured, then both the data got from the rule and the MQTT messages that match local_topic will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Oracle Database default port 1521 is used if `[:Port]` is not specified."
          },
          "sid": {
            "type": "string",
            "description": "Sid for Oracle Database."
          },
          "service_name": {
            "type": "string",
            "description": "Service Name for Oracle Database."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "file_transfer.file_transfer": {
        "properties": {
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Enable the File Transfer feature.<br/><br/>Enabling File Transfer implies reserving special MQTT topics in order to serve the protocol.<br/><br/>This toggle also affects the availability of the File Transfer REST API and<br/>storage-dependent background activities (e.g. garbage collection)."
          },
          "init_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Timeout for EMQX to initialize the file transfer.<br/><br/>After reaching the timeout (e.g. due to system is overloaded), the PUBACK message for `init` will contain error code (0x80).",
            "example": "32s"
          },
          "store_segment_timeout": {
            "default": "5m",
            "type": "string",
            "description": "Timeout for storing a file segment.<br/><br/>After reaching the timeout (e.g. due to system overloaded), the PUBACK message will contain error code (0x80).",
            "example": "32s"
          },
          "assemble_timeout": {
            "default": "5m",
            "type": "string",
            "description": "Timeout for assembling and exporting file segments into a final file.<br/><br/>After reaching the timeout (e.g. due to system is overloaded), the PUBACK message for `fin` will contain error code (0x80)",
            "example": "32s"
          },
          "storage": {
            "default": {
              "local": {}
            },
            "description": "Storage settings for file transfer.",
            "$ref": "#/components/schemas/file_transfer.storage_backend"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.stomp": {
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "stomp"
            ],
            "description": "Gateway Name"
          },
          "frame": {
            "$ref": "#/components/schemas/gateway.stomp_frame"
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          },
          "listeners": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                }
              ]
            }
          }
        },
        "type": "object"
      },
      "emqx_authz_api_mnesia.rules_for_username": {
        "required": [
          "username"
        ],
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/emqx_authz_api_mnesia.rule_item"
            }
          },
          "username": {
            "type": "string",
            "description": "Username",
            "example": "user1"
          }
        },
        "type": "object"
      },
      "authn.cinfo": {
        "required": [
          "checks",
          "mechanism"
        ],
        "properties": {
          "mechanism": {
            "type": "string",
            "enum": [
              "cinfo"
            ],
            "description": "Authentication mechanism."
          },
          "checks": {
            "type": "array",
            "description": "A list of checks to perform on the client information.<br/>If all checks are skipped, the default result `ignore` is returned.<br/>The `ignore` result means to defer the authentication to the next authenticator in the chain.",
            "items": {
              "$ref": "#/components/schemas/authn.cinfo_check"
            }
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_clients.exproto_client": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Name of the node to which the client is connected"
          },
          "clientid": {
            "type": "string",
            "description": "Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username of client when connecting"
          },
          "mountpoint": {
            "type": "string",
            "description": "Topic mountpoint"
          },
          "proto_name": {
            "type": "string",
            "description": "Client protocol name"
          },
          "proto_ver": {
            "type": "string",
            "description": "Protocol version used by the client"
          },
          "ip_address": {
            "type": "string",
            "description": "Client's IP address"
          },
          "port": {
            "type": "integer",
            "description": "Client's port"
          },
          "is_bridge": {
            "type": "boolean",
            "description": "Indicates whether the client is connected via bridge"
          },
          "connected_at": {
            "description": "Client connection time",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "disconnected_at": {
            "description": "Client offline time, This field is only valid and returned when connected is false",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "connected": {
            "type": "boolean",
            "description": "Whether the client is connected"
          },
          "keepalive": {
            "type": "integer",
            "description": "Keepalive time, with the unit of second"
          },
          "clean_start": {
            "type": "boolean",
            "description": "Indicate whether the client is using a brand new session"
          },
          "expiry_interval": {
            "type": "integer",
            "description": "Session expiration interval, with the unit of second"
          },
          "created_at": {
            "description": "Session creation time",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "subscriptions_cnt": {
            "type": "integer",
            "description": "Number of subscriptions established by this client"
          },
          "subscriptions_max": {
            "type": "integer",
            "description": "Maximum number of subscriptions allowed by this client"
          },
          "inflight_cnt": {
            "type": "integer",
            "description": "Current length of inflight"
          },
          "inflight_max": {
            "type": "integer",
            "description": "Maximum length of inflight"
          },
          "mqueue_len": {
            "type": "integer",
            "description": "Current length of message queue"
          },
          "mqueue_max": {
            "type": "integer",
            "description": "Maximum length of message queue"
          },
          "mqueue_dropped": {
            "type": "integer",
            "description": "Number of messages dropped by the message queue due to exceeding the length"
          },
          "awaiting_rel_cnt": {
            "type": "integer",
            "description": "Number of awaiting acknowledge packet"
          },
          "awaiting_rel_max": {
            "type": "integer",
            "description": "Maximum allowed number of awaiting PUBREC packet"
          },
          "recv_oct": {
            "type": "integer",
            "description": "Number of bytes received"
          },
          "recv_cnt": {
            "type": "integer",
            "description": "Number of socket packets received"
          },
          "recv_pkt": {
            "type": "integer",
            "description": "Number of protocol packets received"
          },
          "recv_msg": {
            "type": "integer",
            "description": "Number of message packets received"
          },
          "send_oct": {
            "type": "integer",
            "description": "Number of bytes sent"
          },
          "send_cnt": {
            "type": "integer",
            "description": "Number of socket packets sent"
          },
          "send_pkt": {
            "type": "integer",
            "description": "Number of protocol packets sent"
          },
          "send_msg": {
            "type": "integer",
            "description": "Number of message packets sent"
          },
          "mailbox_len": {
            "type": "integer",
            "description": "Process mailbox size"
          },
          "heap_size": {
            "type": "integer",
            "description": "Process heap size with the unit of byte"
          },
          "reductions": {
            "type": "integer",
            "description": "Erlang reduction"
          }
        },
        "type": "object"
      },
      "bridge_mysql.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mysql"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_mysql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pulsar.producer_buffer": {
        "properties": {
          "mode": {
            "default": "memory",
            "type": "string",
            "enum": [
              "memory",
              "disk",
              "hybrid"
            ],
            "description": "Message buffer mode.<br/><code>memory</code>: Buffer all messages in memory. The messages will be lost<br/> in case of EMQX node restart\\n<code>disk</code>: Buffer all messages on disk.<br/> The messages on disk are able to survive EMQX node restart.<br/><code>hybrid</code>: Buffer message in memory first, when up to certain limit<br/> (see <code>segment_bytes</code> config for more information), then start offloading<br/> messages to disk, Like <code>memory</code> mode, the messages will be lost in<br/> case of EMQX node restart."
          },
          "per_partition_limit": {
            "default": "2GB",
            "type": "string",
            "description": "Number of bytes allowed to buffer for each Pulsar partition.<br/> When this limit is exceeded, old messages will be dropped in a trade for credits<br/> for new messages to be buffered.",
            "example": "32MB"
          },
          "segment_bytes": {
            "default": "100MB",
            "type": "string",
            "description": "Applicable when buffer mode is set to <code>disk</code> or <code>hybrid</code>.<br/>This value is to specify the size of each on-disk buffer file.",
            "example": "32MB"
          },
          "memory_overload_protection": {
            "default": false,
            "type": "boolean",
            "description": "Applicable when buffer mode is set to <code>memory</code><br/>EMQX will drop old buffered messages under high memory pressure.<br/>The high memory threshold is defined in config <code>sysmon.os.sysmem_high_watermark</code>.<br/> NOTE: This config only works on Linux."
          }
        },
        "type": "object"
      },
      "bridge_http.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "http"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "parameters": {
            "description": "The parameters for HTTP action.",
            "$ref": "#/components/schemas/bridge_http.parameters_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_http.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.post_connector": {
        "required": [
          "database",
          "name",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "clickhouse"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "url": {
            "type": "string",
            "description": "The HTTP URL to the Clickhouse server that you want to connect to (for example http://myhostname:8123)",
            "example": "http://127.0.0.1"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the Clickhouse server.",
            "example": "32s"
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_clickhouse.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_http.post": {
        "required": [
          "name",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "webhook",
              "http"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this action."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "request": {
            "type": "object",
            "deprecated": true,
            "description": "This field is never used, so we deprecated it since 5.3.2.",
            "example": {}
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "url": {
            "type": "string",
            "description": "The URL of the HTTP action.<br/><br/>Template with variables is allowed in the path, but variables cannot be used in the scheme, host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic} </code> is allowed, but<br/><code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code><br/>is not allowed."
          },
          "direction": {
            "type": "string",
            "enum": [
              "egress"
            ],
            "deprecated": true
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to the HTTP server. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "method": {
            "default": "post",
            "type": "string",
            "enum": [
              "post",
              "put",
              "get",
              "delete"
            ],
            "description": "The method of the HTTP request. All the available methods are: post, put, get, delete.<br/><br/>Template with variables is allowed."
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "type": "object",
            "description": "The headers of the HTTP request.<br/><br/>Template with variables is allowed.",
            "example": {},
            "is_template": true
          },
          "body": {
            "type": "string",
            "description": "The body of the HTTP request.<br/><br/>If not provided, the body will be a JSON object of all the available fields.<br/><br/>There, 'all the available fields' means the context of a MQTT message when<br/>this webhook is triggered by receiving a MQTT message (the `local_topic` is set),<br/>or the context of the event when this webhook is triggered by a rule (i.e. this<br/>webhook is used as an action of a rule).<br/><br/>Template with variables is allowed."
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "HTTP request max retry times if failed.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "description": "HTTP request timeout.",
            "example": "32s"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_http.v1_resource_opts"
          }
        },
        "type": "object"
      },
      "message_transformation_http_api.dryrun_transformation": {
        "required": [
          "message",
          "transformation"
        ],
        "properties": {
          "transformation": {
            "$ref": "#/components/schemas/message_transformation.transformation"
          },
          "message": {
            "$ref": "#/components/schemas/message_transformation_http_api.dryrun_input_message"
          }
        },
        "type": "object"
      },
      "schema_validation_http_api.reorder": {
        "required": [
          "order"
        ],
        "properties": {
          "order": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "bridge_influxdb.get_api_v2": {
        "required": [
          "bucket",
          "name",
          "org",
          "token",
          "type",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to the InfluxDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>Please note that a placeholder for an integer value must be annotated with a suffix `i`. For example `${payload.int_value}i`."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The InfluxDB default port 8086 is used if `[:Port]` is not specified."
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "InfluxDB time precision."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "bucket": {
            "type": "string",
            "description": "InfluxDB bucket name."
          },
          "org": {
            "type": "string",
            "description": "Organization name of InfluxDB."
          },
          "token": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB token.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "type": {
            "type": "string",
            "enum": [
              "influxdb_api_v2"
            ],
            "description": "The Bridge Type."
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          }
        },
        "type": "object"
      },
      "bridge_influxdb.put_api_v2": {
        "required": [
          "bucket",
          "org",
          "token",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to the InfluxDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>Please note that a placeholder for an integer value must be annotated with a suffix `i`. For example `${payload.int_value}i`."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The InfluxDB default port 8086 is used if `[:Port]` is not specified."
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "InfluxDB time precision."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "bucket": {
            "type": "string",
            "description": "InfluxDB bucket name."
          },
          "org": {
            "type": "string",
            "description": "Organization name of InfluxDB."
          },
          "token": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB token.",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "authz.builtin_db": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "built_in_database"
            ],
            "description": "Backend type."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this ACL provider"
          },
          "max_rules": {
            "default": 100,
            "type": "integer",
            "description": "Maximum number of rules per client/user. Note that performance may decrease as number of rules increases.",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "bridge_redis.creation_opts_redis_single": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only."
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.consumer_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "30s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          }
        },
        "type": "object"
      },
      "authn.builtin_db": {
        "required": [
          "backend",
          "mechanism",
          "user_id_type"
        ],
        "properties": {
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash creation and verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn_hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn_hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn_hash.bcrypt_rw"
              }
            ]
          },
          "mechanism": {
            "type": "string",
            "enum": [
              "password_based"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "built_in_database"
            ],
            "description": "Backend type."
          },
          "user_id_type": {
            "default": "username",
            "type": "string",
            "enum": [
              "clientid",
              "username"
            ],
            "description": "Specify whether to use `clientid` or `username` for authentication."
          },
          "bootstrap_file": {
            "default": "${EMQX_ETC_DIR}/auth-built-in-db-bootstrap.csv",
            "type": "string",
            "description": "The bootstrap file imports users into the built-in database.<br/>It will not import a user ID that already exists in the database.<br/>The file content format is determined by `bootstrap_type`."
          },
          "bootstrap_type": {
            "default": "plain",
            "type": "string",
            "enum": [
              "hash",
              "plain"
            ],
            "description": "Specify which type of content the bootstrap file has.<br/><br/>- **`plain`**:<br/>  - Expected data fields: `user_id`, `password`, `is_superuser`<br/>  - `user_id`: Can be Client ID or username, depending on built-in database authentication's `user_id_type` config.<br/>  - `password`: User's plaintext password.<br/>  - `is_superuser`: Boolean, user's administrative status.<br/><br/>- **`hash`**:<br/>  - Expected data fields: `user_id`,`password_hash`,`salt`,`is_superuser`<br/>  - Definitions similar to `plain` type, with `password_hash` and `salt` added for security.<br/><br/>The content can be either in CSV, or JSON format.<br/><br/>Here is a CSV example: `user_id,password_hash,salt,is_superuser\\nmy_user,b6c743545a7817ae8c8f624371d5f5f0373234bb0ff36b8ffbf19bce0e06ab75,de1024f462fb83910fd13151bd4bd235,true`<br/><br/>And JSON content should be decoded into an array of objects, for example: `[{\"user_id\": \"my_user\",\"password\": \"s3cr3tp@ssw0rd\",\"is_superuser\": true}]`.<br/><br/>The hash string for `password_hash` depends on how `password_hash_algorithm` is configured for the built-in database authentication mechanism. For example, if it's configured as `password_hash_algorithm {name = sha256, salt_position = suffix}`, then the salt is appended to the password before hashed. Here is the equivalent Python expression: `hashlib.sha256(password + salt).hexdigest()`."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          }
        },
        "type": "object"
      },
      "bridge_mongodb.post_rs": {
        "required": [
          "database",
          "mongo_type",
          "name",
          "replica_set_name",
          "resource_opts",
          "servers",
          "type"
        ],
        "properties": {
          "mongo_type": {
            "default": "rs",
            "type": "string",
            "enum": [
              "rs"
            ],
            "description": "Replica set. Must be set to 'rs' when MongoDB server is running in 'replica set' mode."
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "r_mode": {
            "default": "master",
            "type": "string",
            "enum": [
              "master",
              "slave_ok"
            ],
            "description": "Read mode."
          },
          "replica_set_name": {
            "type": "string",
            "description": "Name of the replica set."
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this MongoDB Action"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "The collection where data will be stored into"
          },
          "payload_template": {
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc."
          },
          "resource_opts": {
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "mongodb_rs"
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_http.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "parameters": {
            "description": "The parameters for HTTP action.",
            "$ref": "#/components/schemas/bridge_http.parameters_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_http.action_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx.ssl_client_opts": {
        "properties": {
          "cacertfile": {
            "type": "string",
            "description": "Trusted PEM format CA certificates bundle file.<br/><br/>The certificates in this file are used to verify the TLS peer's certificates.<br/>Append new certificates to the file if new CAs are to be trusted.<br/>There is no need to restart EMQX to have the updated file loaded, because<br/>the system regularly checks if file has been updated (and reload).<br/><br/>NOTE: invalidating (deleting) a certificate from the file will not affect<br/>already established connections."
          },
          "cacerts": {
            "default": false,
            "type": "boolean",
            "deprecated": true
          },
          "certfile": {
            "type": "string",
            "description": "PEM format certificates chain file.<br/><br/>The certificates in this file should be in reversed order of the certificate<br/>issue chain. That is, the host's certificate should be placed in the beginning<br/>of the file, followed by the immediate issuer certificate and so on.<br/>Although the root CA certificate is optional, it should be placed at the end of<br/>the file if it is to be added."
          },
          "keyfile": {
            "type": "string",
            "description": "PEM format private key file."
          },
          "verify": {
            "default": "verify_none",
            "type": "string",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "description": "Enable or disable peer verification."
          },
          "reuse_sessions": {
            "default": true,
            "type": "boolean",
            "description": "Enable TLS session reuse.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "depth": {
            "default": 10,
            "type": "integer",
            "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.<br/>So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
            "minimum": 0
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "String containing the user's password. Only used if the private key file is password-protected.",
            "example": ""
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "type": "array",
            "description": "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2', 'tlsv1.1']</code> here.",
            "items": {
              "type": "string"
            }
          },
          "ciphers": {
            "default": [],
            "type": "array",
            "description": "This config holds TLS cipher suite names separated by comma,<br/>or as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in which the<br/>client and server encrypts information over the network connection.<br/>Selecting a good cipher suite is critical for the<br/>application's data security, confidentiality and performance.<br/><br/>The names should be in OpenSSL string format (not RFC format).<br/>All default values and examples provided by EMQX config<br/>documentation are all in OpenSSL format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            }
          },
          "secure_renegotiate": {
            "default": true,
            "type": "boolean",
            "description": "Whether to reject TLS renegotiation attempts that are not compliant with [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt).<br/><br/>By default, `secure_renegotiate` is set to `true`, which forces secure renegotiation.<br/>If set to `false`, secure renegotiation will still be used, but will fall back to insecure renegotiation if the peer does not support [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt), which increases the risk of a MitM attack.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3."
          },
          "log_level": {
            "default": "notice",
            "type": "string",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "description": "The minimum level of logging allowed for SSL output.<br/><br/>The default is `notice`, set to a lower `debug` level for more detailed logging that can be used to investigate SSL handshake issues."
          },
          "hibernate_after": {
            "default": "5s",
            "type": "string",
            "description": "Specifies the amount of time that an SSL process will hibernate after being idle, thus reducing its memory footprint.<br/><br/>The hibernating process will be woken up when a new message arrives.<br/>Hibernating and waking up too often can cause CPU utilization to increase, as they both perform garbage collection on the process.",
            "example": "12m"
          },
          "partial_chain": {
            "type": "string",
            "enum": [
              true,
              false,
              "two_cacerts_from_cacertfile",
              "cacert_from_cacertfile"
            ],
            "description": "Enable or disable peer verification with partial_chain.<br/>When local verifies a peer certificate during the x509 path validation<br/>process, it constructs a certificate chain that starts with the peer<br/>certificate and ends with a trust anchor.<br/>By default, if it is set to `false`, the trust anchor is the<br/>Root CA, and the certificate chain must be complete.<br/>However, if the setting is set to `true` or `cacert_from_cacertfile`,<br/>the last certificate in `cacertfile` will be used as the trust anchor<br/>certificate (intermediate CA). This creates a partial chain<br/>in the path validation.<br/>Alternatively, if it is configured with `two_cacerts_from_cacertfile`,<br/>one of the last two certificates in `cacertfile` will be used as the<br/>trust anchor certificate, forming a partial chain. This option is<br/>particularly useful for intermediate CA certificate rotation.<br/>However, please note that it incurs some additional overhead, so it<br/>should only be used for certificate rotation purposes."
          },
          "verify_peer_ext_key_usage": {
            "type": "string",
            "description": "Verify extended key usage in peer's certificate<br/>For additional peer certificate validation, the value defined here must present in the<br/>'Extended Key Usage' of peer certificate defined in<br/>[rfc5280](https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.12).<br/><br/>Allowed values are<br/>- `clientAuth`<br/>- `serverAuth`<br/>- `codeSigning`<br/>- `emailProtection`<br/>- `timeStamping`<br/>- `ocspSigning`<br/>- raw OID, for example: \"OID:1.3.6.1.5.5.7.3.2\" means `id-pk 2` which is equivalent to `clientAuth`<br/><br/>Comma-separated string is also supported for validating more than one key usages.<br/><br/>For example, `\"serverAuth,OID:1.3.6.1.5.5.7.3.2\"`"
          },
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Enable TLS."
          },
          "server_name_indication": {
            "description": "Specify the host name to be used in TLS Server Name Indication extension.<br/><br/>For instance, when connecting to \"server.example.net\", the genuine server<br/>which accepts the connection and performs TLS handshake may differ from the<br/>host the TLS client initially connects to, e.g. when connecting to an IP address<br/>or when the host has multiple resolvable DNS records <br/><br/>If not specified, it will default to the host name string which is used<br/>to establish the connection, unless it is IP address used.<br/><br/>The host name is then also used in the host name verification of the peer<br/>certificate.<br/> The special value 'disable' prevents the Server Name<br/>Indication extension from being sent and disables the hostname<br/>verification check.",
            "example": "disable",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "disable"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge_mysql.get_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mysql"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MySQL default port 3306 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mysql.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only."
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.put": {
        "required": [
          "database",
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "The template string can contain ${field} placeholders for message metadata and payload field. Make sure that the inserted values are formatted and escaped correctly. [Prepared Statement](https://docs.emqx.com/en/enterprise/v5.0/data-integration/data-bridges.html#Prepared-Statement) is not supported."
          },
          "batch_value_separator": {
            "default": ", ",
            "type": "string",
            "description": "The default value ',' works for the VALUES format. You can also use other separator if other format is specified. See [INSERT INTO Statement](https://clickhouse.com/docs/en/sql-reference/statements/insert-into)."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Clickhouse. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_clickhouse.creation_opts"
          },
          "url": {
            "type": "string",
            "description": "The HTTP URL to the Clickhouse server that you want to connect to (for example http://myhostname:8123)",
            "example": "http://127.0.0.1"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the Clickhouse server.",
            "example": "32s"
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "rule_engine.rule_engine": {
        "properties": {
          "ignore_sys_message": {
            "default": true,
            "type": "boolean",
            "description": "When set to 'true' (default), rule-engine will ignore messages published to $SYS topics."
          },
          "jq_function_default_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Default timeout for the `jq` rule engine function",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_mysql.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mysql"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_mysql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "listeners.wss_required_bind": {
        "required": [
          "bind",
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "wss"
            ],
            "description": "Listener type"
          },
          "running": {
            "type": "boolean",
            "description": "Listener status"
          },
          "id": {
            "type": "string",
            "description": "Listener id"
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable listener."
          },
          "bind": {
            "default": 8084,
            "type": "string",
            "description": "IP address and port for the listening socket.",
            "example": "127.0.0.1:80"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The size of the listener's receiving pool.",
            "minimum": 1
          },
          "max_connections": {
            "default": "infinity",
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message<br/>is delivered to the subscriber. The mountpoint is a way that users can use<br/>to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`, then the client actually subscribes to the topic<br/>`some_tenant/t`. Similarly, if another client B (connected to the same listener<br/>as the client A) sends a message to topic `t`, the message is routed<br/>to all the clients subscribed `some_tenant/t`, so client A will receive the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>: clientid<br/>  - <code>${username}</code>: username"
          },
          "zone": {
            "default": "default",
            "type": "string",
            "description": "The configuration zone to which the listener belongs.<br/>Clients connected to this listener will inherit zone-settings created under this zone name.<br/><br/>A zone can override the configs under below root names:<br/>- `mqtt`<br/>- `force_shutdown`<br/>- `force_gc`<br/>- `flapping_detect`<br/>- `durable_sessions`"
          },
          "enable_authn": {
            "default": true,
            "type": "string",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "description": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication<br/>process goes through the configured authentication chain.<br/>When set to <code>false</code>, any client (with or without username/password) is allowed to connect.<br/>When set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be<br/>denied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off<br/>anonymous clients early."
          },
          "max_conn_rate": {
            "default": "infinity",
            "type": "string",
            "description": "Used to limit the rate at which the current listener accepts connections.<br/><br/>Once the limit is reached, EMQX will pause fetching connections from the Accept queue, thereby delaying or rejecting new connections.<br/><br/>For example:<br/><br/>- `1000/s`: Only accepts 1000 connections per second.<br/>- `1000/10s`: Only accepts 1000 connections every 10 seconds.",
            "example": "1000/s"
          },
          "messages_rate": {
            "type": "string",
            "description": "Used to limit the number of messages a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>For example:<br/><br/>- `500/s`: Only 500 messages will be received per second, and the remaining messages will be delayed.<br/>- `500/10s`: Only 500 messages will be received every 10 seconds and the remaining messages will be delayed.",
            "example": "1000/s"
          },
          "bytes_rate": {
            "type": "string",
            "description": "Used to limit the number of bytes a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>The unit of the bytes could be: B, KB, MB, GB.<br/><br/>For example:<br/><br/>- `500KB/s`: Only 500 kilobytes per second will be received, and the remaining bytes will be delayed.<br/>- `500MB/10s`: Only 500 megabytes will be received every 10 seconds, and the remaining bytes will be delayed.",
            "example": "100MB/s"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses. The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP, this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/><br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "example": "12m"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/emqx.tcp_opts"
          },
          "ssl_options": {
            "$ref": "#/components/schemas/emqx.listener_wss_opts"
          },
          "websocket": {
            "$ref": "#/components/schemas/emqx.ws_opts"
          }
        },
        "type": "object"
      },
      "emqx.alarm": {
        "properties": {
          "actions": {
            "default": [
              "log",
              "publish"
            ],
            "type": "array",
            "description": "The actions triggered when the alarm is activated.<br/>Currently, the following actions are supported: <code>log</code> and <code>publish</code>.<br/><code>log</code> is to write the alarm to log (console or file).<br/><code>publish</code> is to publish the alarm as an MQTT message to the system topics:<br/><code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate</code> and<br/><code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate</code>",
            "items": {
              "type": "string",
              "enum": [
                "log",
                "publish"
              ]
            },
            "example": [
              "log",
              "publish"
            ]
          },
          "size_limit": {
            "default": 1000,
            "maximum": 3000,
            "type": "integer",
            "description": "The maximum number of historical alarms that can be stored.<br/><br/>When the maximum number is reached, the oldest historical alarms will be deleted to store new historical alarms.",
            "minimum": 1,
            "example": 1000
          },
          "validity_period": {
            "default": "24h",
            "type": "string",
            "description": "The validity period of historical alarms. Calculated from the time of activation of the historical alarm instead of the time of cancelation.<br/><br/>If it exists longer than the validity period, the alarm will be deleted.",
            "example": "24h"
          }
        },
        "type": "object"
      },
      "bridge_s3.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "s3"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action that takes incoming events and uploads them to the S3 API compatible service.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_s3.s3_direct_upload_parameters"
              },
              {
                "$ref": "#/components/schemas/bridge_s3.s3_aggregated_upload_parameters"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_s3.s3_upload_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rabbitmq"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "The action config defines how this bridge send messages to the remote RabbitMQ broker",
            "$ref": "#/components/schemas/bridge_rabbitmq.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_rabbitmq.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_tdengine.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "tdengine"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "TDengine action parameters",
            "$ref": "#/components/schemas/bridge_tdengine.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "load_rebalance.local_status_enabled": {
        "required": [
          "process",
          "state",
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "enabled"
            ],
            "description": "Whether the node is being evacuated"
          },
          "process": {
            "type": "string",
            "enum": [
              "rebalance",
              "evacuation"
            ],
            "description": "The type of the task that is being performed on the node: 'evacuation' or 'rebalance'"
          },
          "state": {
            "type": "string",
            "description": "The state of the process that is being performed on the node"
          },
          "coordinator_node": {
            "type": "string",
            "description": "The node that is coordinating rebalance process"
          },
          "connection_eviction_rate": {
            "type": "integer",
            "description": "The rate of evicting connections, in connections per second",
            "minimum": 1
          },
          "session_eviction_rate": {
            "type": "integer",
            "description": "The rate of evicting sessions, in sessions per second",
            "minimum": 1
          },
          "connection_goal": {
            "type": "integer",
            "description": "The number of connections that the node should have after the rebalance/evacuation process",
            "minimum": 0
          },
          "session_goal": {
            "type": "integer",
            "description": "The number of sessions that the node should have after the evacuation process",
            "minimum": 0
          },
          "disconnected_session_goal": {
            "type": "integer",
            "description": "The number of disconnected sessions that the node should have after the rebalance process",
            "minimum": 0
          },
          "session_recipients": {
            "type": "array",
            "description": "List of nodes to which sessions are being evacuated",
            "items": {
              "type": "string"
            }
          },
          "recipients": {
            "type": "array",
            "description": "List of nodes to which connections/sessions are being evacuated during rebalance",
            "items": {
              "type": "string"
            }
          },
          "stats": {
            "description": "Statistics of the evacuation/rebalance process",
            "$ref": "#/components/schemas/load_rebalance.status_stats"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.put_connector": {
        "required": [
          "database",
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "url": {
            "type": "string",
            "description": "The HTTP URL to the Clickhouse server that you want to connect to (for example http://myhostname:8123)",
            "example": "http://127.0.0.1"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the Clickhouse server.",
            "example": "32s"
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_clickhouse.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "message_transformation_http_api.reorder": {
        "required": [
          "order"
        ],
        "properties": {
          "order": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.get_connector": {
        "required": [
          "name",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "hstreamdb"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "url": {
            "default": "http://127.0.0.1:6570",
            "type": "string",
            "description": "HStreamDB Server URL. This URL will be used as the gRPC HTTP server address."
          },
          "grpc_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The timeout for HStreamDB gRPC requests.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_hstreamdb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "cluster.timeout": {
        "properties": {
          "timeout": {
            "type": "integer",
            "description": "Timeout in milliseconds",
            "minimum": 0,
            "example": "15000"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.put_rs": {
        "required": [
          "database",
          "mongo_type",
          "replica_set_name",
          "resource_opts",
          "servers"
        ],
        "properties": {
          "mongo_type": {
            "default": "rs",
            "type": "string",
            "enum": [
              "rs"
            ],
            "description": "Replica set. Must be set to 'rs' when MongoDB server is running in 'replica set' mode."
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "r_mode": {
            "default": "master",
            "type": "string",
            "enum": [
              "master",
              "slave_ok"
            ],
            "description": "Read mode."
          },
          "replica_set_name": {
            "type": "string",
            "description": "Name of the replica set."
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this MongoDB Action"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "The collection where data will be stored into"
          },
          "payload_template": {
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc."
          },
          "resource_opts": {
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in Kafka."
          },
          "parameters": {
            "description": "Kafka producer configs.",
            "$ref": "#/components/schemas/bridge_kafka.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "authn.metrics_status_fields": {
        "properties": {
          "resource_metrics": {
            "description": "The metrics of the resource.",
            "$ref": "#/components/schemas/authn.resource_metrics"
          },
          "node_resource_metrics": {
            "description": "The metrics of the resource for each node.",
            "$ref": "#/components/schemas/authn.node_resource_metrics"
          },
          "metrics": {
            "description": "The metrics of the resource.",
            "$ref": "#/components/schemas/authn.metrics"
          },
          "node_metrics": {
            "description": "The metrics of the resource for each node.",
            "$ref": "#/components/schemas/authn.node_metrics"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the resource."
          },
          "node_status": {
            "description": "The status of the resource for each node.",
            "$ref": "#/components/schemas/authn.node_status"
          },
          "node_error": {
            "description": "The error of node.",
            "$ref": "#/components/schemas/authn.node_error"
          }
        },
        "type": "object"
      },
      "bridge_oracle.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "oracle"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/bridge_oracle.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.get_connector": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "name",
          "region",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "dynamo"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "url": {
            "type": "string",
            "description": "The url of DynamoDB endpoint."
          },
          "region": {
            "type": "string",
            "description": "Region of AWS Dynamo"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "Access Key ID for connecting to DynamoDB."
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "AWS Secret Access Key for connecting to DynamoDB.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_dynamo.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.put_source": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "parameters": {
            "description": "The source config defines how this bridge receive messages from the remote RabbitMQ broker",
            "$ref": "#/components/schemas/bridge_rabbitmq.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.source_resource_opts"
          }
        },
        "type": "object"
      },
      "cluster.core_replicants": {
        "properties": {
          "core_node": {
            "type": "string",
            "description": "Core node name",
            "example": "emqx-core@127.0.0.1"
          },
          "replicant_nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cluster.replicant_info"
            }
          }
        },
        "type": "object"
      },
      "prometheus.recommend_setting": {
        "required": [
          "enable_basic_auth"
        ],
        "properties": {
          "enable_basic_auth": {
            "default": false,
            "type": "boolean",
            "description": "Enable or disable basic authentication for prometheus scrape api, not for Push Gateway"
          },
          "push_gateway": {
            "description": "Push Gateway is optional, should not be configured if prometheus is to scrape EMQX.",
            "$ref": "#/components/schemas/prometheus.push_gateway"
          },
          "collectors": {
            "description": "The internal advanced metrics of the virtual machine are initially disabled<br/>and are usually only enabled during performance testing.<br/>Enabling them will increase the CPU load.",
            "$ref": "#/components/schemas/prometheus.collectors"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.consumer": {
        "required": [
          "topic_mapping"
        ],
        "properties": {
          "pull_max_messages": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of messages to retrieve from GCP PubSub in a single pull request. The actual number may be less than the specified value.",
            "minimum": 1
          },
          "topic_mapping": {
            "type": "array",
            "description": "Defines the mapping between GCP PubSub topics and MQTT topics. Must contain at least one item.",
            "items": {
              "$ref": "#/components/schemas/bridge_gcp_pubsub.consumer_topic_mapping"
            }
          }
        },
        "type": "object"
      },
      "bridge_kinesis.put_producer": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "endpoint",
          "partition_key",
          "stream_name"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_kinesis.creation_opts"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "Access Key ID for connecting to Amazon Kinesis."
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "AWS Secret Access Key for connecting to Amazon Kinesis.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "endpoint": {
            "type": "string",
            "description": "The url of Amazon Kinesis endpoint.",
            "example": "https://kinesis.us-east-1.amazonaws.com"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "payload_template": {
            "default": "${.}",
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, will send all the available context in JSON format."
          },
          "stream_name": {
            "type": "string",
            "description": "The Amazon Kinesis Stream to publish messages to."
          },
          "partition_key": {
            "type": "string",
            "description": "The Amazon Kinesis Partition Key associated to published message. Placeholders in format of ${var} are supported."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Amazon Kinesis. All MQTT `PUBLISH` messages with the topic<br/>matching the `local_topic` will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also `local_topic` is<br/>configured, then both the data got from the rule and the MQTT messages that match `local_topic`<br/>will be forwarded."
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "hstreamdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/bridge_hstreamdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_http.put_connector": {
        "required": [
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "url": {
            "type": "string",
            "description": "The URL of the HTTP action.<br/><br/>Template with variables is allowed in the path, but variables cannot be used in the scheme, host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic} </code> is allowed, but<br/><code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code><br/>is not allowed."
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "type": "object",
            "description": "The headers of the HTTP request.<br/><br/>Template with variables is allowed.",
            "example": {},
            "is_template": true
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "request": {
            "type": "object",
            "deprecated": true,
            "description": "This field is never used, so we deprecated it since 5.3.2.",
            "example": {}
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_http.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.action_parameters": {
        "required": [
          "hash_key",
          "table"
        ],
        "properties": {
          "template": {
            "default": "",
            "type": "string",
            "description": "Template, the default value is empty. When this value is empty the whole message will be stored in the database.<br><br/>The template can be any valid JSON with placeholders and make sure all keys for table are here, example:<br><br/>  <code>{\"id\" : \"${id}\", \"clientid\" : \"${clientid}\", \"data\" : \"${payload.data}\"}</code>"
          },
          "hash_key": {
            "type": "string",
            "description": "DynamoDB Hash Key"
          },
          "range_key": {
            "type": "string",
            "description": "DynamoDB Range Key"
          },
          "table": {
            "type": "string",
            "description": "DynamoDB Table."
          }
        },
        "type": "object"
      },
      "rocketmq.get": {
        "required": [
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "rocketmq"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "template": {
            "default": "",
            "type": "string",
            "description": "Template, the default value is empty. When this value is empty the whole message will be stored in the RocketMQ.<br><br/>            The template can be any valid string with placeholders, example:<br><br/>            - ${id}, ${username}, ${clientid}, ${timestamp}<br><br/>            - {\"id\" : ${id}, \"username\" : ${username}}"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to RocketMQ. All MQTT `PUBLISH` messages with the topic<br/>matching the `local_topic` will be forwarded.<br/><br/>NOTE: if the bridge is used as a rule action, `local_topic` should be left empty otherwise the messages will be duplicated."
          },
          "strategy": {
            "default": "roundrobin",
            "description": "Producer key dispatch strategy, the default is `roundrobin`, also supports placeholders, such as: `clientid`, `messageid`, `username`.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "roundrobin"
                ]
              }
            ]
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "servers": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The RocketMQ default port 9876 is used if `[:Port]` is not specified."
          },
          "namespace": {
            "type": "string",
            "description": "The namespace field MUST be set if you are using the RocketMQ service in<br/>aliyun cloud and also the namespace is enabled,<br/>or if you have configured a namespace in your RocketMQ server.<br/>For RocketMQ in aliyun cloud, the namespace is the instance ID."
          },
          "topic": {
            "default": "TopicTest",
            "type": "string",
            "description": "RocketMQ Topic"
          },
          "access_key": {
            "default": "",
            "type": "string",
            "description": "RocketMQ server `accessKey`."
          },
          "secret_key": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ server `secretKey`.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "security_token": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ Server Security Token",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "Timeout of RocketMQ driver synchronous call.",
            "example": "12m"
          },
          "refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "RocketMQ Topic Route Refresh Interval.",
            "example": "12m"
          },
          "send_buffer": {
            "default": "1024KB",
            "type": "string",
            "description": "The socket send buffer size of the RocketMQ driver client.",
            "example": "32MB"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_elasticsearch.action_update": {
        "required": [
          "action",
          "id",
          "index"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "update"
            ],
            "description": "update"
          },
          "index": {
            "type": "string",
            "description": "Name of index, or index alias to perform the action on.<br/>This parameter is required.",
            "example": "${payload.index}"
          },
          "id": {
            "type": "string",
            "description": "The document ID. If no ID is specified, a document ID is automatically generated.",
            "example": "${payload.id}"
          },
          "doc": {
            "type": "string",
            "description": "JSON document. If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc.",
            "example": "${payload.doc}"
          },
          "doc_as_upsert": {
            "default": false,
            "type": "boolean",
            "description": "Instead of sending a partial doc plus an upsert doc,<br/>you can set doc_as_upsert to true to use the contents of doc as the upsert value."
          },
          "routing": {
            "type": "string",
            "description": "Custom value used to route operations to a specific shard.",
            "example": "${payload.routing}"
          },
          "require_alias": {
            "type": "boolean",
            "description": "If true, the request’s actions must target an index alias. Defaults to false"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "HTTP request max retry times if failed.",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "rule_engine.republish_args": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "The target topic of message to be re-published.<br/>Template with variables is allowed, see description of the 'republish_args'.",
            "example": "a/1"
          },
          "qos": {
            "default": "${qos}",
            "description": "The qos of the message to be re-published.<br/>Template with variables is allowed, see description of the 'republish_args'.<br/>Defaults to ${qos}. If variable ${qos} is not found from the selected result of the rule,<br/>0 is used.",
            "example": "${qos}",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "maximum": 2,
                "type": "integer",
                "minimum": 0,
                "example": 0
              }
            ]
          },
          "retain": {
            "default": "${retain}",
            "description": "The 'retain' flag of the message to be re-published.<br/>Template with variables is allowed, see description of the 'republish_args'.<br/>Defaults to ${retain}. If variable ${retain} is not found from the selected result<br/>of the rule, false is used.",
            "example": "${retain}",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "payload": {
            "default": "${payload}",
            "type": "string",
            "description": "The payload of the message to be re-published.<br/>Template with variables is allowed, see description of the 'republish_args'.<br/>Defaults to ${payload}. If variable ${payload} is not found from the selected result<br/>of the rule, then the string \"undefined\" is used.",
            "example": "${payload}"
          },
          "mqtt_properties": {
            "default": {},
            "description": "From which variable should the MQTT Publish Properties of the message be taken.<br/>Placeholders like <code>${.payload.content_type}</code> may be used.",
            "$ref": "#/components/schemas/rule_engine.republish_mqtt_properties"
          },
          "user_properties": {
            "default": "${user_properties}",
            "type": "string",
            "description": "From which variable should the MQTT message's User-Property pairs be taken from.<br/>The value must be a map.<br/>You may configure it to <code>${pub_props.'User-Property'}</code> or<br/>use <code>SELECT *,pub_props.'User-Property' as user_properties</code><br/>to forward the original user properties to the republished message.<br/>You may also call <code>map_put</code> function like<br/><code>map_put('my-prop-name', 'my-prop-value', user_properties) as user_properties</code><br/>to inject user properties.<br/>NOTE: MQTT spec allows duplicated user property names, but EMQX Rule-Engine does not.",
            "example": "${pub_props.'User-Property'}"
          },
          "direct_dispatch": {
            "default": false,
            "description": "Enable direct dispatch to subscribers without initiating a new message publish event.<br/>When set to `true`, this prevents the recursive processing of a message by the same action<br/>and is used when the output message does not require further processing.<br/><br/>However, enabling this feature has several limitations:<br/><br/>- The output message from this action is not retained.<br/>- It does not trigger other rules that operate based on the output topic of this action.<br/>- It does not activate rules that select from the `$events/message_publish`.<br/>- It does not trigger plugins that use the `'message.publish'` hook.<br/>- Topic metrics are not collected for the output message of this action.<br/>- Message schema validation is not applied (feature of EMQX Enterprise).<br/>- Message transformation processes are not applied (feature of EMQX Enterprise).",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "type": "object"
      },
      "pulsar.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pulsar"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configs.",
            "$ref": "#/components/schemas/pulsar.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/pulsar.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mysql.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_mysql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "gateway.jt808_proto": {
        "required": [
          "dn_topic",
          "up_topic"
        ],
        "properties": {
          "auth": {
            "description": "Authentication settings of the JT/T 808 Gateway.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/gateway.anonymous_false"
              },
              {
                "$ref": "#/components/schemas/gateway.anonymous_true"
              }
            ]
          },
          "up_topic": {
            "default": "jt808/${clientid}/${phone}/up",
            "type": "string",
            "description": "The topic of the JT/T 808 protocol upstream message."
          },
          "dn_topic": {
            "default": "jt808/${clientid}/${phone}/dn",
            "type": "string",
            "description": "The topic of the JT/T 808 protocol downstream message."
          }
        },
        "type": "object"
      },
      "redis.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "redis"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "The parameters of the action.",
            "$ref": "#/components/schemas/bridge_redis.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/redis.action_resource_opts"
          }
        },
        "type": "object"
      },
      "authn.mysql": {
        "required": [
          "backend",
          "database",
          "mechanism",
          "query",
          "server"
        ],
        "properties": {
          "mechanism": {
            "type": "string",
            "enum": [
              "password_based"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "mysql"
            ],
            "description": "Backend type."
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn_hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn_hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn_hash.bcrypt"
              }
            ]
          },
          "query": {
            "type": "string",
            "description": "SQL used to query data for authentication, such as password hash."
          },
          "query_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Timeout for the SQL query.",
            "example": "32s"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MySQL default port 3306 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_opents.action_parameters": {
        "properties": {
          "data": {
            "default": [],
            "type": "array",
            "description": "OpenTSDB action parameter data",
            "items": {
              "$ref": "#/components/schemas/bridge_opents.action_parameters_data"
            }
          }
        },
        "type": "object"
      },
      "authn.resource_metrics": {
        "properties": {
          "matched": {
            "type": "integer",
            "description": "Count of this resource is queried."
          },
          "success": {
            "type": "integer",
            "description": "Count of query success."
          },
          "failed": {
            "type": "integer",
            "description": "Count of query failed."
          },
          "rate": {
            "type": "number",
            "description": "The rate of matched, times/second."
          },
          "rate_max": {
            "type": "number",
            "description": "The max rate of matched, times/second."
          },
          "rate_last5m": {
            "type": "number",
            "description": "The average rate of matched in the last 5 minutes, times/second."
          }
        },
        "type": "object"
      },
      "syskeeper.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "syskeeper_forwarder"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Action name."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Syskeeper action parameters",
            "$ref": "#/components/schemas/syskeeper.parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/syskeeper.creation_opts"
          }
        },
        "type": "object"
      },
      "bridge.metrics": {
        "properties": {
          "dropped": {
            "type": "integer",
            "description": "Count of messages dropped."
          },
          "dropped.other": {
            "type": "integer",
            "description": "Count of messages dropped due to other reasons."
          },
          "dropped.queue_full": {
            "type": "integer",
            "description": "Count of messages dropped due to the queue is full."
          },
          "dropped.resource_not_found": {
            "type": "integer",
            "description": "Count of messages dropped due to the resource is not found."
          },
          "dropped.resource_stopped": {
            "type": "integer",
            "description": "Count of messages dropped due to the resource is stopped."
          },
          "matched": {
            "type": "integer",
            "description": "Count of this bridge is matched and queried."
          },
          "queuing": {
            "type": "integer",
            "description": "Count of messages that are currently queuing."
          },
          "retried": {
            "type": "integer",
            "description": "Times of retried."
          },
          "failed": {
            "type": "integer",
            "description": "Count of messages that sent failed."
          },
          "inflight": {
            "type": "integer",
            "description": "Count of messages that were sent asynchronously but ACKs are not yet received."
          },
          "success": {
            "type": "integer",
            "description": "Count of messages that sent successfully."
          },
          "rate": {
            "type": "number",
            "description": "The rate of matched, times/second"
          },
          "rate_max": {
            "type": "number",
            "description": "The max rate of matched, times/second"
          },
          "rate_last5m": {
            "type": "number",
            "description": "The average rate of matched in the last 5 minutes, times/second"
          },
          "received": {
            "type": "number",
            "description": "Count of messages that is received from the remote system."
          }
        },
        "type": "object"
      },
      "cluster.invitation_status": {
        "properties": {
          "succeed": {
            "type": "array",
            "description": "A list of information about nodes which are successfully invited",
            "items": {
              "$ref": "#/components/schemas/cluster.node_invitation_succeed"
            }
          },
          "in_progress": {
            "type": "array",
            "description": "A list of information about nodes that are processing invitations",
            "items": {
              "$ref": "#/components/schemas/cluster.node_invitation_in_progress"
            }
          },
          "failed": {
            "type": "array",
            "description": "A list of information about nodes that failed to be invited",
            "items": {
              "$ref": "#/components/schemas/cluster.node_invitation_failed"
            }
          }
        },
        "type": "object"
      },
      "emqx.ocsp": {
        "properties": {
          "enable_ocsp_stapling": {
            "default": false,
            "type": "boolean",
            "description": "Whether to enable Online Certificate Status Protocol (OCSP) stapling for the listener.  If set to true, requires defining the OCSP responder URL and issuer PEM path."
          },
          "responder_url": {
            "type": "string",
            "description": "URL for the OCSP responder to check the server certificate against.",
            "example": "http://127.0.0.1"
          },
          "issuer_pem": {
            "type": "string",
            "description": "PEM-encoded certificate of the OCSP issuer for the server certificate."
          },
          "refresh_interval": {
            "default": "5m",
            "type": "string",
            "description": "The period to refresh the OCSP response for the server.",
            "example": "12m"
          },
          "refresh_http_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout for the HTTP request when checking OCSP responses.",
            "example": "12m"
          }
        },
        "type": "object"
      },
      "dashboard.error_code": {
        "properties": {
          "code": {
            "type": "string",
            "description": "Code Name"
          },
          "description": {
            "type": "string",
            "description": "Description"
          }
        },
        "type": "object"
      },
      "listeners.wss_not_required_bind": {
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "wss"
            ],
            "description": "Listener type"
          },
          "running": {
            "type": "boolean",
            "description": "Listener status"
          },
          "id": {
            "type": "string",
            "description": "Listener id"
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          },
          "bind": {
            "default": 8084,
            "type": "string",
            "description": "IP address and port for the listening socket.",
            "example": "127.0.0.1:80"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable listener."
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The size of the listener's receiving pool.",
            "minimum": 1
          },
          "max_connections": {
            "default": "infinity",
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message<br/>is delivered to the subscriber. The mountpoint is a way that users can use<br/>to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`, then the client actually subscribes to the topic<br/>`some_tenant/t`. Similarly, if another client B (connected to the same listener<br/>as the client A) sends a message to topic `t`, the message is routed<br/>to all the clients subscribed `some_tenant/t`, so client A will receive the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>: clientid<br/>  - <code>${username}</code>: username"
          },
          "zone": {
            "default": "default",
            "type": "string",
            "description": "The configuration zone to which the listener belongs.<br/>Clients connected to this listener will inherit zone-settings created under this zone name.<br/><br/>A zone can override the configs under below root names:<br/>- `mqtt`<br/>- `force_shutdown`<br/>- `force_gc`<br/>- `flapping_detect`<br/>- `durable_sessions`"
          },
          "enable_authn": {
            "default": true,
            "type": "string",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "description": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication<br/>process goes through the configured authentication chain.<br/>When set to <code>false</code>, any client (with or without username/password) is allowed to connect.<br/>When set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be<br/>denied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off<br/>anonymous clients early."
          },
          "max_conn_rate": {
            "default": "infinity",
            "type": "string",
            "description": "Used to limit the rate at which the current listener accepts connections.<br/><br/>Once the limit is reached, EMQX will pause fetching connections from the Accept queue, thereby delaying or rejecting new connections.<br/><br/>For example:<br/><br/>- `1000/s`: Only accepts 1000 connections per second.<br/>- `1000/10s`: Only accepts 1000 connections every 10 seconds.",
            "example": "1000/s"
          },
          "messages_rate": {
            "type": "string",
            "description": "Used to limit the number of messages a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>For example:<br/><br/>- `500/s`: Only 500 messages will be received per second, and the remaining messages will be delayed.<br/>- `500/10s`: Only 500 messages will be received every 10 seconds and the remaining messages will be delayed.",
            "example": "1000/s"
          },
          "bytes_rate": {
            "type": "string",
            "description": "Used to limit the number of bytes a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>The unit of the bytes could be: B, KB, MB, GB.<br/><br/>For example:<br/><br/>- `500KB/s`: Only 500 kilobytes per second will be received, and the remaining bytes will be delayed.<br/>- `500MB/10s`: Only 500 megabytes will be received every 10 seconds, and the remaining bytes will be delayed.",
            "example": "100MB/s"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses. The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP, this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/><br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "example": "12m"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/emqx.tcp_opts"
          },
          "ssl_options": {
            "$ref": "#/components/schemas/emqx.listener_wss_opts"
          },
          "websocket": {
            "$ref": "#/components/schemas/emqx.ws_opts"
          }
        },
        "type": "object"
      },
      "audit.audit_list": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/audit.audit"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/public.meta"
          }
        },
        "type": "object"
      },
      "bridge_kafka.get_connector": {
        "required": [
          "bootstrap_hosts",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka_producer"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Kafka <code>host:port</code> endpoints to bootstrap the client."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching topic metadata.",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "schema_registry.json": {
        "required": [
          "source",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "json"
            ],
            "description": "Must be `json` for JSON schema."
          },
          "source": {
            "type": "string",
            "description": "Source text for the schema.",
            "example": "{\"a\": [1,true]}"
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "A description for this schema."
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_metrics.aggregated_metrics": {
        "properties": {
          "bytes.received": {
            "type": "integer",
            "description": "Number of bytes received ",
            "minimum": 0
          },
          "bytes.sent": {
            "type": "integer",
            "description": "Number of bytes sent on this connection",
            "minimum": 0
          },
          "packets.received": {
            "type": "integer",
            "description": "Number of received packet",
            "minimum": 0
          },
          "packets.sent": {
            "type": "integer",
            "description": "Number of sent packet",
            "minimum": 0
          },
          "packets.connect.received": {
            "type": "integer",
            "description": "Number of received CONNECT packet",
            "minimum": 0
          },
          "packets.connack.sent": {
            "type": "integer",
            "description": "Number of sent CONNACK packet",
            "minimum": 0
          },
          "packets.connack.error": {
            "type": "integer",
            "description": "Number of received CONNECT packet with unsuccessful connections",
            "minimum": 0
          },
          "packets.connack.auth_error": {
            "type": "integer",
            "description": "Number of received CONNECT packet with failed Authentication",
            "minimum": 0
          },
          "packets.publish.received": {
            "type": "integer",
            "description": "Number of received PUBLISH packet",
            "minimum": 0
          },
          "packets.publish.sent": {
            "type": "integer",
            "description": "Number of sent PUBLISH packet",
            "minimum": 0
          },
          "packets.publish.inuse": {
            "type": "integer",
            "description": "Number of received PUBLISH packet with occupied identifiers",
            "minimum": 0
          },
          "packets.publish.error": {
            "type": "integer",
            "description": "Number of received PUBLISH packet that cannot be published",
            "minimum": 0
          },
          "packets.publish.auth_error": {
            "type": "integer",
            "description": "Number of received PUBLISH packets with failed the Authorization check",
            "minimum": 0
          },
          "packets.publish.dropped": {
            "type": "integer",
            "description": "Number of messages discarded due to the receiving limit",
            "minimum": 0
          },
          "packets.puback.received": {
            "type": "integer",
            "description": "Number of received PUBACK packet",
            "minimum": 0
          },
          "packets.puback.sent": {
            "type": "integer",
            "description": "Number of sent PUBACK packet",
            "minimum": 0
          },
          "packets.puback.inuse": {
            "type": "integer",
            "description": "Number of received PUBACK packet with occupied identifiers",
            "minimum": 0
          },
          "packets.puback.missed": {
            "type": "integer",
            "description": "Number of received packet with identifiers.",
            "minimum": 0
          },
          "packets.pubrec.received": {
            "type": "integer",
            "description": "Number of received PUBREC packet",
            "minimum": 0
          },
          "packets.pubrec.sent": {
            "type": "integer",
            "description": "Number of sent PUBREC packet",
            "minimum": 0
          },
          "packets.pubrec.inuse": {
            "type": "integer",
            "description": "Number of received PUBREC packet with occupied identifiers",
            "minimum": 0
          },
          "packets.pubrec.missed": {
            "type": "integer",
            "description": "Number of received PUBREC packet with unknown identifiers",
            "minimum": 0
          },
          "packets.pubrel.received": {
            "type": "integer",
            "description": "Number of received PUBREL packet",
            "minimum": 0
          },
          "packets.pubrel.sent": {
            "type": "integer",
            "description": "Number of sent PUBREL packet",
            "minimum": 0
          },
          "packets.pubrel.missed": {
            "type": "integer",
            "description": "Number of received PUBREC packet with unknown identifiers",
            "minimum": 0
          },
          "packets.pubcomp.received": {
            "type": "integer",
            "description": "Number of received PUBCOMP packet",
            "minimum": 0
          },
          "packets.pubcomp.sent": {
            "type": "integer",
            "description": "Number of sent PUBCOMP packet",
            "minimum": 0
          },
          "packets.pubcomp.inuse": {
            "type": "integer",
            "description": "Number of received PUBCOMP packet with occupied identifiers",
            "minimum": 0
          },
          "packets.pubcomp.missed": {
            "type": "integer",
            "description": "Number of missed PUBCOMP packet",
            "minimum": 0
          },
          "packets.subscribe.received": {
            "type": "integer",
            "description": "Number of received SUBSCRIBE packet",
            "minimum": 0
          },
          "packets.subscribe.error": {
            "type": "integer",
            "description": "Number of received SUBSCRIBE packet with failed subscriptions",
            "minimum": 0
          },
          "packets.subscribe.auth_error": {
            "type": "integer",
            "description": "Number of received SUBACK packet with failed Authorization check",
            "minimum": 0
          },
          "packets.suback.sent": {
            "type": "integer",
            "description": "Number of sent SUBACK packet",
            "minimum": 0
          },
          "packets.unsubscribe.received": {
            "type": "integer",
            "description": "Number of received UNSUBSCRIBE packet",
            "minimum": 0
          },
          "packets.unsubscribe.error": {
            "type": "integer",
            "description": "Number of received UNSUBSCRIBE packet with failed unsubscriptions",
            "minimum": 0
          },
          "packets.unsuback.sent": {
            "type": "integer",
            "description": "Number of sent UNSUBACK packet",
            "minimum": 0
          },
          "packets.pingreq.received": {
            "type": "integer",
            "description": "Number of received PINGREQ packet",
            "minimum": 0
          },
          "packets.pingresp.sent": {
            "type": "integer",
            "description": "Number of sent PUBRESP packet",
            "minimum": 0
          },
          "packets.disconnect.received": {
            "type": "integer",
            "description": "Number of received DISCONNECT packet",
            "minimum": 0
          },
          "packets.disconnect.sent": {
            "type": "integer",
            "description": "Number of sent DISCONNECT packet",
            "minimum": 0
          },
          "packets.auth.received": {
            "type": "integer",
            "description": "Number of received AUTH packet",
            "minimum": 0
          },
          "packets.auth.sent": {
            "type": "integer",
            "description": "Number of sent AUTH packet",
            "minimum": 0
          },
          "messages.received": {
            "type": "integer",
            "description": "Number of messages received from the client, equal to the sum of messages.qos0.received, messages.qos1.received and messages.qos2.received",
            "minimum": 0
          },
          "messages.sent": {
            "type": "integer",
            "description": "Number of messages sent to the client, equal to the sum of messages.qos0.sent, messages.qos1.sent and messages.qos2.sent",
            "minimum": 0
          },
          "messages.qos0.received": {
            "type": "integer",
            "description": "Number of QoS 0 messages received from clients",
            "minimum": 0
          },
          "messages.qos0.sent": {
            "type": "integer",
            "description": "Number of QoS 0 messages sent to clients",
            "minimum": 0
          },
          "messages.qos1.received": {
            "type": "integer",
            "description": "Number of QoS 1 messages received from clients",
            "minimum": 0
          },
          "messages.qos1.sent": {
            "type": "integer",
            "description": "Number of QoS 1 messages sent to clients",
            "minimum": 0
          },
          "messages.qos2.received": {
            "type": "integer",
            "description": "Number of QoS 2 messages received from clients",
            "minimum": 0
          },
          "messages.qos2.sent": {
            "type": "integer",
            "description": "Number of QoS 2 messages sent to clients",
            "minimum": 0
          },
          "messages.publish": {
            "type": "integer",
            "description": "Number of messages published in addition to system messages",
            "minimum": 0
          },
          "messages.dropped": {
            "type": "integer",
            "description": "Number of messages dropped before forwarding to the subscription process",
            "minimum": 0
          },
          "messages.validation_failed": {
            "type": "integer",
            "description": "Number of message validation failed",
            "minimum": 0
          },
          "messages.validation_succeeded": {
            "type": "integer",
            "description": "Number of message validation successful",
            "minimum": 0
          },
          "messages.transformation_failed": {
            "type": "integer",
            "description": "Number fo message transformation failed",
            "minimum": 0
          },
          "messages.transformation_succeeded": {
            "type": "integer",
            "description": "Number fo message transformation succeeded",
            "minimum": 0
          },
          "messages.dropped.await_pubrel_timeout": {
            "type": "integer",
            "description": "Number of messages dropped due to waiting PUBREL timeout",
            "minimum": 0
          },
          "messages.dropped.no_subscribers": {
            "type": "integer",
            "description": "Number of messages dropped due to no subscribers",
            "minimum": 0
          },
          "messages.forward": {
            "type": "integer",
            "description": "Number of messages forwarded to other nodes",
            "minimum": 0
          },
          "messages.delayed": {
            "type": "integer",
            "description": "Number of delay-published messages",
            "minimum": 0
          },
          "messages.delivered": {
            "type": "integer",
            "description": "Number of messages forwarded to the subscription process internally",
            "minimum": 0
          },
          "messages.acked": {
            "type": "integer",
            "description": "Number of received PUBACK and PUBREC packet",
            "minimum": 0
          },
          "messages.persisted": {
            "type": "integer",
            "description": "Number of message persisted",
            "minimum": 0
          },
          "delivery.dropped": {
            "type": "integer",
            "description": "Total number of discarded messages when sending",
            "minimum": 0
          },
          "delivery.dropped.no_local": {
            "type": "integer",
            "description": "Number of messages that were dropped due to the No Local subscription option when sending",
            "minimum": 0
          },
          "delivery.dropped.too_large": {
            "type": "integer",
            "description": "The number of messages that were dropped because the length exceeded the limit when sending",
            "minimum": 0
          },
          "delivery.dropped.qos0_msg": {
            "type": "integer",
            "description": "Number of messages with QoS 0 that were dropped because the message queue was full when sending",
            "minimum": 0
          },
          "delivery.dropped.queue_full": {
            "type": "integer",
            "description": "Number of messages with a non-zero QoS that were dropped because the message queue was full when sending",
            "minimum": 0
          },
          "delivery.dropped.expired": {
            "type": "integer",
            "description": "Number of messages dropped due to message expiration on sending",
            "minimum": 0
          },
          "client.connect": {
            "type": "integer",
            "description": "Number of client connections",
            "minimum": 0
          },
          "client.connack": {
            "type": "integer",
            "description": "Number of CONNACK packet sent",
            "minimum": 0
          },
          "client.connected": {
            "type": "integer",
            "description": "Number of successful client connected",
            "minimum": 0
          },
          "client.authenticate": {
            "type": "integer",
            "description": "Number of client Authentication",
            "minimum": 0
          },
          "client.auth.anonymous": {
            "type": "integer",
            "description": "Number of clients who log in anonymously",
            "minimum": 0
          },
          "client.authorize": {
            "type": "integer",
            "description": "Number of Authorization rule checks",
            "minimum": 0
          },
          "client.subscribe": {
            "type": "integer",
            "description": "Number of client subscriptions",
            "minimum": 0
          },
          "client.unsubscribe": {
            "type": "integer",
            "description": "Number of client unsubscriptions",
            "minimum": 0
          },
          "client.disconnected": {
            "type": "integer",
            "description": "Number of client disconnects",
            "minimum": 0
          },
          "session.created": {
            "type": "integer",
            "description": "Number of sessions created",
            "minimum": 0
          },
          "session.resumed": {
            "type": "integer",
            "description": "Number of sessions resumed because Clean Session or Clean Start is false",
            "minimum": 0
          },
          "session.takenover": {
            "type": "integer",
            "description": "Number of sessions takenover because Clean Session or Clean Start is false",
            "minimum": 0
          },
          "session.discarded": {
            "type": "integer",
            "description": "Number of sessions dropped because Clean Session or Clean Start is true",
            "minimum": 0
          },
          "session.terminated": {
            "type": "integer",
            "description": "Number of terminated sessions",
            "minimum": 0
          },
          "authorization.allow": {
            "type": "integer",
            "description": "Number of Authorization allow",
            "minimum": 0
          },
          "authorization.deny": {
            "type": "integer",
            "description": "Number of Authorization deny",
            "minimum": 0
          },
          "authorization.cache_hit": {
            "type": "integer",
            "description": "Number of Authorization hits the cache",
            "minimum": 0
          },
          "authorization.cache_miss": {
            "type": "integer",
            "description": "Number of Authorization cache missing",
            "minimum": 0
          },
          "authentication.success": {
            "type": "integer",
            "description": "Number of successful client Authentication",
            "minimum": 0
          },
          "authentication.success.anonymous": {
            "type": "integer",
            "description": "Number of successful client Authentication due to anonymous",
            "minimum": 0
          },
          "authentication.failure": {
            "type": "integer",
            "description": "Number of failed client Authentication",
            "minimum": 0
          },
          "overload_protection.delay.ok": {
            "type": "integer",
            "description": "Number of overload protection delayed",
            "minimum": 0
          },
          "overload_protection.delay.timeout": {
            "type": "integer",
            "description": "Number of overload protection delay timeout",
            "minimum": 0
          },
          "overload_protection.hibernation": {
            "type": "integer",
            "description": "Number of overload protection hibernation",
            "minimum": 0
          },
          "overload_protection.gc": {
            "type": "integer",
            "description": "Number of overload protection garbage collection",
            "minimum": 0
          },
          "overload_protection.new_conn": {
            "type": "integer",
            "description": "Number of overload protection close new incoming connection",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_clients.mqueue_message": {
        "properties": {
          "msgid": {
            "type": "string",
            "description": "Message ID."
          },
          "topic": {
            "type": "string",
            "description": "Message topic."
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "Message QoS.",
            "minimum": 0,
            "example": 0
          },
          "publish_at": {
            "type": "integer",
            "description": "Message publish time, a millisecond precision Unix epoch timestamp."
          },
          "from_clientid": {
            "type": "string",
            "description": "Message publisher's Client ID"
          },
          "from_username": {
            "type": "string",
            "description": "Message publisher's username."
          },
          "payload": {
            "type": "string"
          },
          "inserted_at": {
            "type": "string",
            "description": "A nanosecond precision Unix epoch timestamp at which a message was inserted to In-flight / Mqueue."
          },
          "mqueue_priority": {
            "description": "Message Mqueue Priority.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "type": "object"
      },
      "load_rebalance.global_coordinator_status": {
        "required": [
          "node",
          "state"
        ],
        "properties": {
          "state": {
            "type": "string",
            "description": "The state of the process that is being performed on the node"
          },
          "coordinator_node": {
            "type": "string",
            "description": "The node that is coordinating rebalance process"
          },
          "connection_eviction_rate": {
            "type": "integer",
            "description": "The rate of evicting connections, in connections per second",
            "minimum": 1
          },
          "session_eviction_rate": {
            "type": "integer",
            "description": "The rate of evicting sessions, in sessions per second",
            "minimum": 1
          },
          "connection_goal": {
            "type": "integer",
            "description": "The number of connections that the node should have after the rebalance/evacuation process",
            "minimum": 0
          },
          "disconnected_session_goal": {
            "type": "integer",
            "description": "The number of disconnected sessions that the node should have after the rebalance process",
            "minimum": 0
          },
          "recipients": {
            "type": "array",
            "description": "List of nodes to which connections/sessions are being evacuated during rebalance",
            "items": {
              "type": "string"
            }
          },
          "donors": {
            "type": "array",
            "description": "List of nodes from which connections/sessions are being evacuated",
            "items": {
              "type": "string"
            }
          },
          "donor_conn_avg": {
            "type": "integer",
            "description": "Average number of connections per donor node",
            "minimum": 0
          },
          "donor_sess_avg": {
            "type": "integer",
            "description": "Average number of sessions per donor node",
            "minimum": 0
          },
          "node": {
            "type": "string",
            "description": "The node that is coordinating the evacuation/rebalance process"
          }
        },
        "type": "object"
      },
      "authn.ldap": {
        "required": [
          "backend",
          "base_dn",
          "mechanism",
          "server",
          "username"
        ],
        "properties": {
          "mechanism": {
            "type": "string",
            "enum": [
              "password_based"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "ldap"
            ],
            "description": "Backend type."
          },
          "query_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Timeout for the LDAP query.",
            "example": "32s"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The LDAP default port 389 is used if `[:Port]` is not specified."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "base_dn": {
            "type": "string",
            "description": "The name of the base object entry (or possibly the root) relative to<br/>which the Search is to be performed.",
            "example": "uid=${username},ou=testdevice,dc=emqx,dc=io"
          },
          "filter": {
            "default": "(objectClass=mqttUser)",
            "type": "string",
            "description": "The filter that defines the conditions that must be fulfilled in order<br/>for the Search to match a given entry.<br><br/>The syntax of the filter follows RFC 4515 and also supports placeholders.",
            "example": "(& (objectClass=mqttUser) (uid=${username}))"
          },
          "request_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Sets the maximum time in milliseconds that is used for each individual request.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/ldap.ssl"
          },
          "method": {
            "description": "Authentication method.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn.bind_method"
              },
              {
                "$ref": "#/components/schemas/authn.hash_method"
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge_influxdb.get_api_v1": {
        "required": [
          "database",
          "name",
          "type",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to the InfluxDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>Please note that a placeholder for an integer value must be annotated with a suffix `i`. For example `${payload.int_value}i`."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The InfluxDB default port 8086 is used if `[:Port]` is not specified."
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "InfluxDB time precision."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "database": {
            "type": "string",
            "description": "InfluxDB database."
          },
          "username": {
            "type": "string",
            "description": "InfluxDB username."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB password.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "type": {
            "type": "string",
            "enum": [
              "influxdb_api_v1"
            ],
            "description": "The Bridge Type."
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_bridge_mqtt": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "$bridges/mqtt:*"
            ],
            "description": "Event Type"
          },
          "id": {
            "type": "string",
            "description": "Message ID"
          },
          "payload": {
            "type": "string",
            "description": "The Message Payload"
          },
          "topic": {
            "type": "string",
            "description": "Message Topic"
          },
          "server": {
            "type": "string",
            "description": "The IP address (or hostname) and port of the MQTT broker, in IP:Port format"
          },
          "dup": {
            "type": "string",
            "description": "The DUP flag of the MQTT message"
          },
          "retain": {
            "type": "string",
            "description": "If is a retain message"
          },
          "message_received_at": {
            "type": "integer",
            "description": "The Time that this Message is Received"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "The Message QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.ws_listener": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Listener ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "ws"
            ],
            "description": "Listener Type"
          },
          "name": {
            "type": "string",
            "description": "Listener Name"
          },
          "running": {
            "type": "boolean",
            "description": "Listener Running status"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "Size of the acceptor pool."
          },
          "tcp_options": {
            "description": "Setting the TCP socket options.",
            "$ref": "#/components/schemas/emqx.tcp_opts"
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP,<br/>this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "Timeout for proxy protocol.<br/>EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
            "example": "12m"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable the listener."
          },
          "bind": {
            "type": "string",
            "description": "The IP address and port that the listener will bind.",
            "example": "127.0.0.1:80"
          },
          "max_connections": {
            "default": 1024,
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "integer",
                "minimum": 1
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "type": "integer",
            "description": "Maximum connections per second."
          },
          "enable_authn": {
            "default": true,
            "type": "boolean",
            "description": "Set <code>true</code> (default) to enable client authentication on this listener.<br/>When set to <code>false</code> clients will be allowed to connect without authentication."
          },
          "mountpoint": {
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "access_rules": {
            "default": [],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses.<br/>The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "websocket": {
            "$ref": "#/components/schemas/gateway.websocket"
          }
        },
        "type": "object"
      },
      "bridge_cassa.action_parameters": {
        "properties": {
          "cql": {
            "default": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "CQL Template"
          }
        },
        "type": "object"
      },
      "connector_aggregator.container_csv": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "csv"
            ],
            "description": "Records (events) will be aggregated and uploaded as a CSV file."
          },
          "column_order": {
            "default": [],
            "type": "array",
            "description": "Event fields that will be ordered first as columns in the resulting CSV file.<br/><br/>Regardless of this setting, resulting CSV will contain all the fields of aggregated events, but all the columns not explicitly mentioned here will be ordered after the ones listed here in the lexicographical order.",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "bridge_mysql.put": {
        "required": [
          "database",
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this action"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to MySQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MySQL default port 3306 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "emqx_gcp_device_api.import_result": {
        "required": [
          "errors",
          "imported"
        ],
        "properties": {
          "errors": {
            "type": "integer",
            "description": "Number of GCP devices not imported due to some error",
            "minimum": 0,
            "example": 0
          },
          "imported": {
            "type": "integer",
            "description": "Number of successfully imported GCP devices",
            "minimum": 0,
            "example": 14
          }
        },
        "type": "object"
      },
      "opents_connector.put": {
        "required": [
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The URL of OpenTSDB endpoint."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "summary": {
            "default": true,
            "type": "boolean",
            "description": "Whether to return summary information."
          },
          "details": {
            "default": false,
            "type": "boolean",
            "description": "Whether to return detailed information."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/opents_connector.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.post_sharded": {
        "required": [
          "database",
          "mongo_type",
          "name",
          "resource_opts",
          "servers",
          "type"
        ],
        "properties": {
          "mongo_type": {
            "default": "sharded",
            "type": "string",
            "enum": [
              "sharded"
            ],
            "description": "Sharded cluster. Must be set to 'sharded' when MongoDB server is running in 'sharded' mode."
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this MongoDB Action"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "The collection where data will be stored into"
          },
          "payload_template": {
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc."
          },
          "resource_opts": {
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "mongodb_sharded"
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "load_rebalance.rebalance_evacuation_start": {
        "properties": {
          "wait_health_check": {
            "type": "string",
            "description": "Time to wait before starting the rebalance/evacuation process, in seconds",
            "example": "1h"
          },
          "conn_evict_rate": {
            "type": "integer",
            "description": "The rate of evicting connections, in connections per second",
            "minimum": 1
          },
          "sess_evict_rate": {
            "type": "integer",
            "description": "The rate of evicting sessions, in sessions per second",
            "minimum": 1
          },
          "redirect_to": {
            "type": "string",
            "description": "Server reference to redirect clients to (MQTTv5 Server redirection)"
          },
          "wait_takeover": {
            "type": "string",
            "description": "Time to wait before starting session evacuation process, in seconds",
            "example": "1h"
          },
          "migrate_to": {
            "type": "array",
            "description": "Nodes to migrate sessions to",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "connector_mqtt.post_connector": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mqtt"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the pool of MQTT clients that will publish messages to the remote broker.<br/><br/>Each MQTT client will be assigned 'clientid' of the form '${clientid_prefix}:${bridge_name}:egress:${node}:${n}'<br/>where 'n' is the number of a client inside the pool.",
            "minimum": 1
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_mqtt.resource_opts"
          },
          "mode": {
            "default": "cluster_shareload",
            "type": "string",
            "enum": [
              "cluster_shareload"
            ],
            "deprecated": true,
            "description": "The mode of the MQTT Bridge.<br/><br/>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/><br/>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid' is suffixed by the node name, this is to avoid<br/>clientid conflicts between different nodes. And we can only use shared subscription<br/>topic filters for <code>remote.topic</code> of ingress connections."
          },
          "server": {
            "type": "string",
            "description": "The host and port of the remote MQTT broker"
          },
          "clientid_prefix": {
            "type": "string",
            "description": "Optional prefix to prepend to the clientid used by egress bridges."
          },
          "reconnect_interval": {
            "type": "string",
            "deprecated": true
          },
          "proto_ver": {
            "default": "v4",
            "type": "string",
            "enum": [
              "v3",
              "v4",
              "v5"
            ],
            "description": "The MQTT protocol version"
          },
          "bridge_mode": {
            "default": false,
            "type": "boolean",
            "description": "If enable bridge mode.<br/>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT<br/>broker MUST support this feature.<br/>If bridge_mode is set to true, the bridge will indicate to the remote broker that it is a bridge not an ordinary client.<br/>This means that loop detection will be more effective and that retained messages will be propagated correctly."
          },
          "username": {
            "type": "string",
            "description": "The username of the MQTT protocol"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password of the MQTT protocol",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "Whether to start a clean session when reconnecting a remote broker for ingress bridge"
          },
          "keepalive": {
            "default": "160s",
            "type": "string",
            "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
            "minimum": 0
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_banned.ban": {
        "required": [
          "as",
          "who"
        ],
        "properties": {
          "as": {
            "type": "string",
            "enum": [
              "clientid",
              "username",
              "peerhost",
              "clientid_re",
              "username_re",
              "peerhost_net"
            ],
            "description": "Ban method, which can be exact client ID, client ID regular expression, exact username, username regular expression,<br/>IP address or an IP address range.",
            "example": "username"
          },
          "who": {
            "type": "string",
            "description": "Ban object, specific client ID, username or IP address.",
            "example": "Banned name"
          },
          "by": {
            "type": "string",
            "description": "Initiator of the ban.",
            "example": "mgmt_api"
          },
          "reason": {
            "type": "string",
            "description": "Ban reason, record the reason why the current object was banned.",
            "example": "Too many requests"
          },
          "at": {
            "description": "The start time of the ban, the format is rfc3339, the default is the time when the operation was initiated.",
            "example": "2021-10-25T21:48:47+08:00",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-second",
                "example": 1640995200
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "until": {
            "default": "infinity",
            "description": "The end time of the ban, the format is rfc3339, the default is the time when the operation was initiated + 1 year.",
            "example": "2021-10-25T21:53:47+08:00",
            "oneOf": [
              {
                "oneOf": [
                  {
                    "type": "integer",
                    "description": "epoch-second",
                    "example": 1640995200
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-01-01T00:00:00.000Z"
                  }
                ]
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "clickhouse"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configs.",
            "$ref": "#/components/schemas/bridge_clickhouse.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge.node_status": {
        "properties": {
          "node": {
            "type": "string",
            "description": "The node name.",
            "example": "emqx@127.0.0.1"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ]
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.post": {
        "required": [
          "base_url",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "iotdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "authentication": {
            "default": "auth_basic",
            "description": "Authentication configuration",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_iotdb.auth_basic"
              }
            ]
          },
          "is_aligned": {
            "default": false,
            "type": "boolean",
            "description": "Whether to align the timeseries"
          },
          "device_id": {
            "type": "string",
            "description": "The IoTDB device ID this data should be inserted for.<br/>If left empty, the MQTT message payload must contain a `device_id` field,<br/>or EMQX's rule-engine SQL must produce a `device_id` field."
          },
          "iotdb_version": {
            "default": "v1.3.x",
            "type": "string",
            "enum": [
              "v1.3.x",
              "v1.1.x",
              "v1.0.x",
              "v0.13.x"
            ],
            "description": "The version of the IoTDB system to connect to."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_iotdb.creation_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "base_url": {
            "type": "string",
            "description": "The base URL of the external IoTDB service's REST interface.",
            "example": "http://127.0.0.1"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "HTTP request max retry times if failed.",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "bridge_mysql.action_parameters": {
        "properties": {
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.put_connector": {
        "required": [
          "dbname"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "default": "127.0.0.1:4001",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The GreptimeDB default port 8086 is used if `[:Port]` is not specified."
          },
          "dbname": {
            "type": "string",
            "description": "GreptimeDB database."
          },
          "username": {
            "type": "string",
            "description": "GreptimeDB username."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "GreptimeDB password.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_greptimedb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "authz.ldap": {
        "required": [
          "base_dn",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ldap"
            ],
            "description": "Backend type."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this ACL provider"
          },
          "publish_attribute": {
            "default": "mqttPublishTopic",
            "type": "string",
            "description": "Indicates which attribute is used to represent the allowed topics list of the `publish`."
          },
          "subscribe_attribute": {
            "default": "mqttSubscriptionTopic",
            "type": "string",
            "description": "Indicates which attribute is used to represent the allowed topics list of the `subscribe`."
          },
          "all_attribute": {
            "default": "mqttPubSubTopic",
            "type": "string",
            "description": "Indicates which attribute is used to represent the both allowed topics list of  `publish` and `subscribe`."
          },
          "query_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Timeout for the LDAP query.",
            "example": "32s"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The LDAP default port 389 is used if `[:Port]` is not specified."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "base_dn": {
            "type": "string",
            "description": "The name of the base object entry (or possibly the root) relative to<br/>which the Search is to be performed.",
            "example": "uid=${username},ou=testdevice,dc=emqx,dc=io"
          },
          "filter": {
            "default": "(objectClass=mqttUser)",
            "type": "string",
            "description": "The filter that defines the conditions that must be fulfilled in order<br/>for the Search to match a given entry.<br><br/>The syntax of the filter follows RFC 4515 and also supports placeholders.",
            "example": "(& (objectClass=mqttUser) (uid=${username}))"
          },
          "request_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Sets the maximum time in milliseconds that is used for each individual request.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/ldap.ssl"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.update_ocpp": {
        "required": [
          "default_heartbeat_interval"
        ],
        "properties": {
          "mountpoint": {
            "default": "ocpp/",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "default_heartbeat_interval": {
            "default": "60s",
            "type": "string",
            "description": "The default Heartbeat time interval",
            "example": "1h"
          },
          "heartbeat_checking_times_backoff": {
            "default": 1,
            "type": "integer",
            "description": "The backoff for heartbeat checking times"
          },
          "upstream": {
            "$ref": "#/components/schemas/gateway_ocpp.upstream"
          },
          "dnstream": {
            "$ref": "#/components/schemas/gateway_ocpp.dnstream"
          },
          "message_format_checking": {
            "default": "disable",
            "description": "Whether to enable message format legality checking.<br/>EMQX checks the message format of the upload stream and download stream against the<br/>format defined in json-schema.<br/>When the check fails, emqx will reply with a corresponding answer message.<br/><br/>The checking strategy can be one of the following values:<br/>- <code>all</code>: check all messages<br/>- <code>upstream_only</code>: check upload stream messages only<br/>- <code>dnstream_only</code>: check download stream messages only<br/>- <code>disable</code>: don't check any messages",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "disable"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "dnstream_only"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "upstream_only"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "all"
                ]
              }
            ]
          },
          "json_schema_dir": {
            "default": "${application_priv}/schemas",
            "type": "string",
            "description": "JSON Schema directory for OCPP message definitions.<br/>Default: ${application}/priv/schemas"
          },
          "json_schema_id_prefix": {
            "default": "urn:OCPP:1.6:2019:12:",
            "type": "string",
            "description": "The ID prefix for the OCPP message schemas."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.action_parameters": {
        "required": [
          "stream"
        ],
        "properties": {
          "stream": {
            "type": "string",
            "description": "HStreamDB Stream Name."
          },
          "partition_key": {
            "type": "string",
            "description": "HStreamDB Partition Key. Placeholders supported."
          },
          "grpc_flush_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Time interval for flushing gRPC calls to the HStreamDB server.",
            "example": "32s"
          },
          "record_template": {
            "default": "${payload}",
            "type": "string",
            "description": "The HStream Record template to be forwarded to the HStreamDB. Placeholders supported.<br><br/>NOTE: When you use `raw record` template (which means the data is not a valid JSON), you should use `read` or `subscription` in HStream to get the data."
          },
          "aggregation_pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The size of the record aggregation pool. A larger aggregation pool size can lead to enhanced parallelization but may also result in reduced efficiency due to smaller batch sizes.",
            "minimum": 1
          },
          "max_batches": {
            "default": 500,
            "type": "integer",
            "description": "Maximum number of unconfirmed batches in the flush queue.",
            "minimum": 1
          },
          "writer_pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The size of the writer pool. A larger pool may increase parallelization and concurrent write operations, potentially boosting throughput. Trade-offs include greater memory consumption and possible resource contention.",
            "minimum": 1
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "Maximum number of insert data clauses that can be sent in a single request.",
            "minimum": 1
          },
          "batch_interval": {
            "default": "500ms",
            "type": "string",
            "description": "Maximum interval that is allowed between two successive (batch) request.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_timescale.post_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "timescale"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "Disables the usage of prepared statements in the connections.<br/>Some endpoints, like PGBouncer or Supabase in Transaction mode, do not<br/>support session features such as prepared statements.  For such connections,<br/>this option should be enabled."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_gcp_device_api.key": {
        "required": [
          "expires_at",
          "key",
          "key_type"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Public key",
            "example": "<DEVICE-PUBLIC-KEY>"
          },
          "key_type": {
            "type": "string",
            "description": "Public key type",
            "example": "ES256_PEM"
          },
          "expires_at": {
            "type": "integer",
            "description": "Public key expiration time",
            "minimum": 0,
            "example": 1706738400
          }
        },
        "type": "object"
      },
      "api_key.app": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique and format by [a-zA-Z0-9-_]",
            "example": "EMQX-API-KEY-1"
          },
          "api_key": {
            "type": "string",
            "description": "TODO:uses HMAC-SHA256 for signing.",
            "example": "a4697a5c75a769f6"
          },
          "api_secret": {
            "type": "string",
            "description": "An API secret is a simple encrypted string that identifiesan application without any principal.They are useful for accessing public data anonymously,and are used to associate API requests.",
            "example": "MzAyMjk3ODMwMDk0NjIzOTUxNjcwNzQ0NzQ3MTE2NDYyMDI"
          },
          "expired_at": {
            "default": "infinity",
            "description": "No longer valid datetime",
            "example": "2021-12-05T02:01:34.186Z",
            "oneOf": [
              {
                "oneOf": [
                  {
                    "type": "integer",
                    "description": "epoch-second",
                    "example": 1640995200
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "example": "2022-01-01T00:00:00.000Z"
                  }
                ]
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "created_at": {
            "description": "ApiKey create datetime",
            "example": "2021-12-01T00:00:00.000Z",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-second",
                "example": 1640995200
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "desc": {
            "type": "string",
            "example": "Note"
          },
          "enable": {
            "type": "boolean",
            "description": "Enable/Disable"
          },
          "expired": {
            "type": "boolean",
            "description": "Expired"
          },
          "role": {
            "default": "administrator",
            "type": "string",
            "description": "Role for this API",
            "example": "administrator"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_publish.publish_error": {
        "properties": {
          "reason_code": {
            "type": "integer",
            "description": "The MQTT reason code, as the same ones used in PUBACK packet.<br/><br/>Currently supported codes are:<br/><br/><br/>16(0x10): No matching subscribers;<br/><br/>131(0x81): Error happened when dispatching the message. e.g. during EMQX restart;<br/><br/>144(0x90): Topic name invalid;<br/><br/>151(0x97): Publish rate limited, or message size exceeded limit. The global size limit can be configured with <code>mqtt.max_packet_size</code><br/><br/>NOTE: The message size is estimated with the received topic and payload size, meaning the actual size of serialized bytes (when sent to MQTT subscriber)<br/>might be slightly over the limit.",
            "example": 16
          },
          "message": {
            "type": "string",
            "description": "Describes the failure reason in detail.",
            "example": "no_matching_subscribers"
          }
        },
        "type": "object"
      },
      "authz.http_get": {
        "required": [
          "method",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "http"
            ],
            "description": "Backend type."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this ACL provider"
          },
          "url": {
            "type": "string",
            "description": "URL of the auth server."
          },
          "request_timeout": {
            "default": "30s",
            "type": "string",
            "description": "HTTP request timeout."
          },
          "body": {
            "description": "HTTP request body.",
            "properties": {
              "$name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "max_retries": {
            "type": "integer",
            "deprecated": true,
            "minimum": 0
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "request": {
            "description": "Configure HTTP request parameters.",
            "$ref": "#/components/schemas/connector_http.request"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "method": {
            "type": "string",
            "enum": [
              "get"
            ],
            "description": "HTTP method."
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "keep-alive": "timeout=30, max=1000"
            },
            "type": "object",
            "description": "List of HTTP headers (without <code>content-type</code>).",
            "example": {}
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.get_connector": {
        "required": [
          "dbname",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "greptimedb"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "default": "127.0.0.1:4001",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The GreptimeDB default port 8086 is used if `[:Port]` is not specified."
          },
          "dbname": {
            "type": "string",
            "description": "GreptimeDB database."
          },
          "username": {
            "type": "string",
            "description": "GreptimeDB username."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "GreptimeDB password.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_greptimedb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "authn.jwt_hmac": {
        "required": [
          "algorithm",
          "mechanism",
          "secret"
        ],
        "properties": {
          "algorithm": {
            "type": "string",
            "enum": [
              "hmac-based"
            ],
            "description": "JWT signing algorithm, Supports HMAC (configured as <code>hmac-based</code>) and RSA, ECDSA (configured as <code>public-key</code>)."
          },
          "secret": {
            "type": "string",
            "description": "The key to verify the JWT using HMAC algorithm."
          },
          "secret_base64_encoded": {
            "default": false,
            "type": "boolean",
            "description": "Whether secret is base64 encoded."
          },
          "mechanism": {
            "type": "string",
            "enum": [
              "jwt"
            ],
            "description": "Authentication mechanism."
          },
          "acl_claim_name": {
            "default": "acl",
            "type": "string",
            "description": "The JWT claim designated for accessing ACL (Access Control List) rules can be specified,<br/>such as using the `acl` claim. A typical decoded JWT with this claim might appear as:<br/>`{\"username\": \"user1\", \"acl\": ...}`.<br/><br/>Supported ACL Rule Formats:<br/><br/>- Object Format:<br/>  Utilizes action types pub (publish), sub (subscribe), or all (both publish and subscribe).<br/>  The value is a list of topic filters.<br/>  Example: `{\"pub\": [\"topic1\"], \"sub\": [], \"all\": [\"${username}/#\"]}`.<br/>  This example signifies that the token owner can publish to topic1 and perform both publish and subscribe<br/>  actions on topics starting with their username.<br/>  Note: In this format, if no topic matches, the action is denied, and the authorization process terminates.<br/><br/>- Array Format (resembles File-Based ACL Rules):<br/>  Example: `[{\"permission\": \"allow\", \"action\": \"all\", \"topic\": \"${username}/#\"}]`.<br/>  Additionally, the `pub` or `publish` action rules can be extended with `qos` and `retain` field,<br/>  and `sub` or `subscribe` action rules can be extended with a `qos` field.<br/>  Note: Here, if no rule matches, the action is not immediately denied.<br/>  The process continues to other configured authorization sources,<br/>  and ultimately falls back to the default permission in config `authorization.no_match`.<br/><br/>The ACL claim utilizes MQTT topic wildcard matching rules for publishing or subscribing.<br/>A special syntax for the 'subscribe' action allows the use of `eq` for an exact match.<br/>For instance, `eq t/#` permits or denies subscription to `t/#`, but not to `t/1`."
          },
          "verify_claims": {
            "default": {},
            "type": "object",
            "description": "A list of custom claims to validate. The allowed formats are the following:<br/>A map where claim names are map keys and expected values are map values:<br/> <code>{ claim_name = \"${username}\", ...}</code>.<br/><br/>A list of maps with <code>name</code> (claim name) and <code>value</code> (expected claim value) keys:<br/> <code>[{name = \"claim_name\", value = \"${username}\"}, ...]</code>.<br/><br/>Values can use the following placeholders:<br/>- <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting<br/>- <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting<br/><br/>Authentication will verify that the value of claims in the JWT (taken from the Password field) matches what is required in <code>verify_claims</code>.",
            "example": {}
          },
          "disconnect_after_expire": {
            "default": true,
            "type": "boolean",
            "description": "Disconnect the client after the token expires."
          },
          "from": {
            "default": "password",
            "type": "string",
            "enum": [
              "username",
              "password"
            ],
            "description": "Field to take JWT from."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          }
        },
        "type": "object"
      },
      "authz.mongo_single": {
        "required": [
          "collection",
          "database",
          "mongo_type",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mongodb"
            ],
            "description": "Backend type."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this ACL provider"
          },
          "collection": {
            "type": "string",
            "description": "`MongoDB` collection containing the authorization data."
          },
          "filter": {
            "default": {},
            "type": "object",
            "description": "Conditional expression that defines the filter condition in the query.<br/>Filter supports the following placeholders<br/><br/> - <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting<br/><br/> - <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting",
            "example": {}
          },
          "mongo_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "Standalone instance. Must be set to 'single' when MongoDB server is running in standalone mode."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_opents.post": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "opents"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The URL of OpenTSDB endpoint."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "summary": {
            "default": true,
            "type": "boolean",
            "description": "Whether to return summary information."
          },
          "details": {
            "default": false,
            "type": "boolean",
            "description": "Whether to return detailed information."
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "emqx.client_attrs_init": {
        "properties": {
          "expression": {
            "type": "string",
            "description": "A one line expression to evaluate a set of predefined string functions (like in the rule engine SQL statements).<br/>The expression can be a function call with nested calls as its arguments, or direct variable reference.<br/>So far, it does not provide user-defined variable binding (like `var a=1`) or user-defined functions.<br/>As an example, to extract the prefix of client ID delimited by a dot: `nth(1, tokens(clientid, '.'))`.<br/><br/>The variables pre-bound variables are:<br/>- `cn`: Client's TLS certificate common name.<br/>- `dn`: Client's TLS certificate distinguished name (the subject).<br/>- `clientid`: MQTT Client ID.<br/>- `username`: MQTT Client's username.<br/>- `user_property.{NAME}`: User properties in the CONNECT packet.<br/><br/>You can read more about variform expressions in EMQX docs."
          },
          "set_as_attr": {
            "type": "string",
            "description": "The name of the client attribute extracted from the client data.<br/>The extracted attribute will be stored in the `client_attrs` property with this name."
          }
        },
        "type": "object"
      },
      "authn.mongo_rs": {
        "required": [
          "backend",
          "collection",
          "database",
          "mechanism",
          "mongo_type",
          "replica_set_name",
          "servers"
        ],
        "properties": {
          "mechanism": {
            "type": "string",
            "enum": [
              "password_based"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "mongodb"
            ],
            "description": "Backend type."
          },
          "collection": {
            "type": "string",
            "description": "Collection used to store authentication data."
          },
          "filter": {
            "default": {},
            "type": "object",
            "description": "Conditional expression that defines the filter condition in the query.<br/>Filter supports the following placeholders:<br/>- <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting<br/>- <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting",
            "example": {}
          },
          "password_hash_field": {
            "default": "password_hash",
            "type": "string",
            "description": "Document field that contains password hash."
          },
          "salt_field": {
            "default": "salt",
            "type": "string",
            "description": "Document field that contains the password salt."
          },
          "is_superuser_field": {
            "default": "is_superuser",
            "type": "string",
            "description": "Document field that defines if the user has superuser privileges."
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn_hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn_hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn_hash.bcrypt"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          },
          "mongo_type": {
            "default": "rs",
            "type": "string",
            "enum": [
              "rs"
            ],
            "description": "Replica set. Must be set to 'rs' when MongoDB server is running in 'replica set' mode."
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "r_mode": {
            "default": "master",
            "type": "string",
            "enum": [
              "master",
              "slave_ok"
            ],
            "description": "Read mode."
          },
          "replica_set_name": {
            "type": "string",
            "description": "Name of the replica set."
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.post_producer": {
        "required": [
          "authentication",
          "bootstrap_hosts",
          "kafka",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_event_hub_producer"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Bridge name, used as a human-readable description of the bridge."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Azure Event Hubs Kafka <code>host[:port]</code> namespace endpoints to bootstrap the client.  Default port number is 9093."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Azure Event Hubs Kafka broker and topic metadata. Setting too small value may add extra load on Azure Event Hubs.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching metadata from Azure Event Hubs.",
            "example": "32s"
          },
          "authentication": {
            "default": {},
            "description": "Authentication configs.",
            "$ref": "#/components/schemas/bridge_azure_event_hub.auth_username_password"
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "default": {
              "enable": true
            },
            "$ref": "#/components/schemas/bridge_azure_event_hub.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in Azure Event Hubs."
          },
          "kafka": {
            "description": "Azure Event Hubs producer configs.",
            "$ref": "#/components/schemas/bridge_azure_event_hub.producer_kafka_opts"
          }
        },
        "type": "object"
      },
      "action_couchbase.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "couchbase"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Set of parameters for the action.",
            "$ref": "#/components/schemas/action_couchbase.parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/action_couchbase.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mysql.put_connector": {
        "required": [
          "database",
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MySQL default port 3306 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mysql.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_producer.put_connector": {
        "required": [
          "service_account_json"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "JSON containing the GCP Service Account credentials to be used with PubSub.<br/>When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/gcp_pubsub_producer.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.action_parameters": {
        "properties": {
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "The collection where data will be stored into"
          },
          "payload_template": {
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc."
          }
        },
        "type": "object"
      },
      "emqx.listener_ssl_opts": {
        "properties": {
          "cacertfile": {
            "default": "${EMQX_ETC_DIR}/certs/cacert.pem",
            "type": "string",
            "description": "Trusted PEM format CA certificates bundle file.<br/><br/>The certificates in this file are used to verify the TLS peer's certificates.<br/>Append new certificates to the file if new CAs are to be trusted.<br/>There is no need to restart EMQX to have the updated file loaded, because<br/>the system regularly checks if file has been updated (and reload).<br/><br/>NOTE: invalidating (deleting) a certificate from the file will not affect<br/>already established connections."
          },
          "cacerts": {
            "default": false,
            "type": "boolean",
            "deprecated": true
          },
          "certfile": {
            "default": "${EMQX_ETC_DIR}/certs/cert.pem",
            "type": "string",
            "description": "PEM format certificates chain file.<br/><br/>The certificates in this file should be in reversed order of the certificate<br/>issue chain. That is, the host's certificate should be placed in the beginning<br/>of the file, followed by the immediate issuer certificate and so on.<br/>Although the root CA certificate is optional, it should be placed at the end of<br/>the file if it is to be added."
          },
          "keyfile": {
            "default": "${EMQX_ETC_DIR}/certs/key.pem",
            "type": "string",
            "description": "PEM format private key file."
          },
          "verify": {
            "default": "verify_none",
            "type": "string",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "description": "Enable or disable peer verification."
          },
          "reuse_sessions": {
            "default": true,
            "type": "boolean",
            "description": "Enable TLS session reuse.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "depth": {
            "default": 10,
            "type": "integer",
            "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.<br/>So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
            "minimum": 0
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "String containing the user's password. Only used if the private key file is password-protected.",
            "example": ""
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "type": "array",
            "description": "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2', 'tlsv1.1']</code> here.",
            "items": {
              "type": "string"
            }
          },
          "ciphers": {
            "default": [],
            "type": "array",
            "description": "This config holds TLS cipher suite names separated by comma,<br/>or as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in which the<br/>client and server encrypts information over the network connection.<br/>Selecting a good cipher suite is critical for the<br/>application's data security, confidentiality and performance.<br/><br/>The names should be in OpenSSL string format (not RFC format).<br/>All default values and examples provided by EMQX config<br/>documentation are all in OpenSSL format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            }
          },
          "secure_renegotiate": {
            "default": true,
            "type": "boolean",
            "description": "Whether to reject TLS renegotiation attempts that are not compliant with [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt).<br/><br/>By default, `secure_renegotiate` is set to `true`, which forces secure renegotiation.<br/>If set to `false`, secure renegotiation will still be used, but will fall back to insecure renegotiation if the peer does not support [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt), which increases the risk of a MitM attack.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3."
          },
          "log_level": {
            "default": "notice",
            "type": "string",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "description": "The minimum level of logging allowed for SSL output.<br/><br/>The default is `notice`, set to a lower `debug` level for more detailed logging that can be used to investigate SSL handshake issues."
          },
          "hibernate_after": {
            "default": "5s",
            "type": "string",
            "description": "Specifies the amount of time that an SSL process will hibernate after being idle, thus reducing its memory footprint.<br/><br/>The hibernating process will be woken up when a new message arrives.<br/>Hibernating and waking up too often can cause CPU utilization to increase, as they both perform garbage collection on the process.",
            "example": "12m"
          },
          "partial_chain": {
            "type": "string",
            "enum": [
              true,
              false,
              "two_cacerts_from_cacertfile",
              "cacert_from_cacertfile"
            ],
            "description": "Enable or disable peer verification with partial_chain.<br/>When local verifies a peer certificate during the x509 path validation<br/>process, it constructs a certificate chain that starts with the peer<br/>certificate and ends with a trust anchor.<br/>By default, if it is set to `false`, the trust anchor is the<br/>Root CA, and the certificate chain must be complete.<br/>However, if the setting is set to `true` or `cacert_from_cacertfile`,<br/>the last certificate in `cacertfile` will be used as the trust anchor<br/>certificate (intermediate CA). This creates a partial chain<br/>in the path validation.<br/>Alternatively, if it is configured with `two_cacerts_from_cacertfile`,<br/>one of the last two certificates in `cacertfile` will be used as the<br/>trust anchor certificate, forming a partial chain. This option is<br/>particularly useful for intermediate CA certificate rotation.<br/>However, please note that it incurs some additional overhead, so it<br/>should only be used for certificate rotation purposes."
          },
          "verify_peer_ext_key_usage": {
            "type": "string",
            "description": "Verify extended key usage in peer's certificate<br/>For additional peer certificate validation, the value defined here must present in the<br/>'Extended Key Usage' of peer certificate defined in<br/>[rfc5280](https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.12).<br/><br/>Allowed values are<br/>- `clientAuth`<br/>- `serverAuth`<br/>- `codeSigning`<br/>- `emailProtection`<br/>- `timeStamping`<br/>- `ocspSigning`<br/>- raw OID, for example: \"OID:1.3.6.1.5.5.7.3.2\" means `id-pk 2` which is equivalent to `clientAuth`<br/><br/>Comma-separated string is also supported for validating more than one key usages.<br/><br/>For example, `\"serverAuth,OID:1.3.6.1.5.5.7.3.2\"`"
          },
          "dhfile": {
            "type": "string",
            "description": "Path to a file containing PEM-encoded Diffie-Hellman parameters<br/>to be used by the server if a cipher suite using Diffie-Hellman<br/>key exchange is negotiated. If not specified, default parameters<br/>are used.<br/><br/>NOTE: The <code>dhfile</code> option is not supported by TLS 1.3."
          },
          "fail_if_no_peer_cert": {
            "default": false,
            "type": "boolean",
            "description": "This option is only effective if `verify` is set to `verify_peer`.<br/><br/>If set to `true`, EMQX will reject the connection if the client fails to provide a certificate.<br/><br/>If set to `false`, EMQX will accept clients which don't present a certificate."
          },
          "honor_cipher_order": {
            "default": true,
            "type": "boolean",
            "description": "An important security setting. If this setting is enabled, the server will prioritize the cipher suites it prefers most from the list of cipher suites supported by the client, thus ignoring the client's preferences.<br/><br/>The server's cipher suites are specified by `ciphers`, with preference decreasing from left to right.<br/><br/>It is often better to use the server's preferences, as it is more likely that the server will be configured correctly."
          },
          "client_renegotiation": {
            "default": true,
            "type": "boolean",
            "description": "In protocols that support client-initiated renegotiation,<br/>the cost of resources of such an operation is higher for the server than the client.<br/>This can act as a vector for denial of service attacks.<br/>The SSL application already takes measures to counter-act such attempts,<br/>but client-initiated renegotiation can be strictly disabled by setting this option to false.<br/>The default value is true. Note that disabling renegotiation can result in<br/>long-lived connections becoming unusable due to limits on<br/>the number of messages the underlying cipher suite can encipher.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "handshake_timeout": {
            "default": "15s",
            "type": "string",
            "description": "Maximum time duration allowed for the handshake to complete",
            "example": "12m"
          },
          "gc_after_handshake": {
            "default": false,
            "type": "boolean",
            "description": "Memory usage tuning. If enabled, will immediately perform a garbage collection after the TLS/SSL handshake."
          },
          "ocsp": {
            "$ref": "#/components/schemas/emqx.ocsp"
          },
          "enable_crl_check": {
            "default": false,
            "type": "boolean",
            "description": "Whether to enable CRL verification for this listener."
          }
        },
        "type": "object"
      },
      "redis.post_connector": {
        "required": [
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "redis"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "parameters": {
            "description": "Set of parameters specific for the given type of this Redis connector, `redis_type` can be one of `single`, `cluster` or `sentinel`.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/redis.redis_cluster_connector"
              },
              {
                "$ref": "#/components/schemas/redis.redis_sentinel_connector"
              },
              {
                "$ref": "#/components/schemas/redis.redis_single_connector"
              }
            ]
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/redis.connector_resource_opts"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.post_connector": {
        "required": [
          "bootstrap_hosts",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka_producer"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Kafka <code>host:port</code> endpoints to bootstrap the client."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching topic metadata.",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sqlserver"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/bridge_sqlserver.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "influxdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_influxdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "action_couchbase.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "file_transfer.storage_backend": {
        "properties": {
          "local": {
            "description": "Local file system backend to store uploaded fragments and temporary data.",
            "$ref": "#/components/schemas/file_transfer.local_storage"
          }
        },
        "type": "object"
      },
      "emqx_topic_metrics_api.reset": {
        "required": [
          "action"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Topic Name. If this parameter is not present,all created topic metrics will be reset.",
            "example": "testtopic/1"
          },
          "action": {
            "type": "string",
            "description": "Action. Only support reset",
            "example": "reset"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.get_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mqtt"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "parameters": {
            "$ref": "#/components/schemas/bridge_mqtt_publisher.ingress_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.source_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_s3.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action that takes incoming events and uploads them to the S3 API compatible service.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_s3.s3_direct_upload_parameters"
              },
              {
                "$ref": "#/components/schemas/bridge_s3.s3_aggregated_upload_parameters"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_s3.s3_upload_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.get_connector": {
        "required": [
          "database",
          "name",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "clickhouse"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "url": {
            "type": "string",
            "description": "The HTTP URL to the Clickhouse server that you want to connect to (for example http://myhostname:8123)",
            "example": "http://127.0.0.1"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the Clickhouse server.",
            "example": "32s"
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_clickhouse.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_cassa.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cassandra"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configs.",
            "$ref": "#/components/schemas/bridge_cassa.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "schema_registry.protobuf": {
        "required": [
          "source",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "protobuf"
            ],
            "description": "Must be `protobuf` for protobuf schema."
          },
          "source": {
            "type": "string",
            "description": "Source text for the schema."
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "A description for this schema."
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.post": {
        "required": [
          "name",
          "stream",
          "type",
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "direction": {
            "default": "egress",
            "type": "string",
            "enum": [
              "egress"
            ],
            "description": "The direction of this bridge, MUST be 'egress'"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to the HStreamDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "record_template": {
            "default": "${payload}",
            "type": "string",
            "description": "The HStream Record template to be forwarded to the HStreamDB. Placeholders supported.<br><br/>NOTE: When you use `raw record` template (which means the data is not a valid JSON), you should use `read` or `subscription` in HStream to get the data."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "url": {
            "default": "http://127.0.0.1:6570",
            "type": "string",
            "description": "HStreamDB Server URL. This URL will be used as the gRPC HTTP server address."
          },
          "stream": {
            "type": "string",
            "description": "HStreamDB Stream Name."
          },
          "partition_key": {
            "type": "string",
            "description": "HStreamDB Partition Key. Placeholders supported."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "grpc_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The timeout for HStreamDB gRPC requests.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "hstreamdb"
            ],
            "description": "The type of the action."
          },
          "name": {
            "type": "string",
            "description": "Action name, a human-readable identifier."
          }
        },
        "type": "object"
      },
      "authn_hash.bcrypt": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "bcrypt"
            ],
            "description": "BCRYPT password hashing."
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_connack": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "client_connack"
            ],
            "description": "Event Type"
          },
          "reason_code": {
            "type": "string",
            "description": "The reason code"
          },
          "clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "Clean Start"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "peername": {
            "type": "string",
            "description": "The IP Address and Port of the Peer Client"
          },
          "sockname": {
            "type": "string",
            "description": "The IP Address and Port of the Local Listener"
          },
          "proto_name": {
            "type": "string",
            "description": "Protocol Name"
          },
          "proto_ver": {
            "type": "string",
            "description": "Protocol Version"
          },
          "keepalive": {
            "type": "integer",
            "description": "KeepAlive"
          },
          "expiry_interval": {
            "type": "integer",
            "description": "Expiry Interval"
          },
          "connected_at": {
            "type": "integer",
            "description": "The Time that this Client is Connected"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_producer.post_connector": {
        "required": [
          "name",
          "service_account_json",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_producer"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "JSON containing the GCP Service Account credentials to be used with PubSub.<br/>When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/gcp_pubsub_producer.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.update_stomp": {
        "properties": {
          "frame": {
            "$ref": "#/components/schemas/gateway.stomp_frame"
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          }
        },
        "type": "object"
      },
      "emqx.listener_quic_ssl_opts": {
        "properties": {
          "cacertfile": {
            "default": "${EMQX_ETC_DIR}/certs/cacert.pem",
            "type": "string",
            "description": "Trusted PEM format CA certificates bundle file.<br/><br/>The certificates in this file are used to verify the TLS peer's certificates.<br/>Append new certificates to the file if new CAs are to be trusted.<br/>There is no need to restart EMQX to have the updated file loaded, because<br/>the system regularly checks if file has been updated (and reload).<br/><br/>NOTE: invalidating (deleting) a certificate from the file will not affect<br/>already established connections."
          },
          "certfile": {
            "default": "${EMQX_ETC_DIR}/certs/cert.pem",
            "type": "string",
            "description": "PEM format certificates chain file.<br/><br/>The certificates in this file should be in reversed order of the certificate<br/>issue chain. That is, the host's certificate should be placed in the beginning<br/>of the file, followed by the immediate issuer certificate and so on.<br/>Although the root CA certificate is optional, it should be placed at the end of<br/>the file if it is to be added."
          },
          "keyfile": {
            "default": "${EMQX_ETC_DIR}/certs/key.pem",
            "type": "string",
            "description": "PEM format private key file."
          },
          "verify": {
            "default": "verify_none",
            "type": "string",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "description": "Enable or disable peer verification."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "String containing the user's password. Only used if the private key file is password-protected.",
            "example": ""
          }
        },
        "type": "object"
      },
      "rabbitmq.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.post_connector": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "name",
          "region",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "dynamo"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "url": {
            "type": "string",
            "description": "The url of DynamoDB endpoint."
          },
          "region": {
            "type": "string",
            "description": "Region of AWS Dynamo"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "Access Key ID for connecting to DynamoDB."
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "AWS Secret Access Key for connecting to DynamoDB.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_dynamo.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_delivered": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "message_delivered"
            ],
            "description": "Event Type"
          },
          "id": {
            "type": "string",
            "description": "Message ID"
          },
          "from_clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "from_username": {
            "type": "string",
            "description": "The User Name"
          },
          "clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "payload": {
            "type": "string",
            "description": "The Message Payload"
          },
          "peerhost": {
            "type": "string",
            "description": "The IP Address of the Peer Client"
          },
          "topic": {
            "type": "string",
            "description": "Message Topic"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "The Time that this Message is Received"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "The Message QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "bridge_redis.get_sentinel": {
        "required": [
          "command_template",
          "name",
          "sentinel",
          "servers",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "command_template": {
            "type": "array",
            "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_sentinel"
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "sentinel",
            "type": "string",
            "enum": [
              "sentinel"
            ],
            "description": "Sentinel mode. Must be set to 'sentinel' when Redis server is running in sentinel mode."
          },
          "sentinel": {
            "type": "string",
            "description": "The cluster name in Redis sentinel mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis database ID.",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "redis_sentinel"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          }
        },
        "type": "object"
      },
      "plugins.position": {
        "properties": {
          "position": {
            "description": "<br/>             Enable auto-boot at position in the boot list, where Position could be<br/>             'front', 'rear', or 'before:other-vsn', 'after:other-vsn'<br/>             to specify a relative position.<br/>            ",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "rear"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "front"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge.node_metrics": {
        "properties": {
          "node": {
            "type": "string",
            "description": "The node name.",
            "example": "emqx@127.0.0.1"
          },
          "metrics": {
            "$ref": "#/components/schemas/bridge.metrics"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "IoTDB action parameters",
            "$ref": "#/components/schemas/bridge_iotdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_iotdb.action_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_http.request": {
        "properties": {
          "method": {
            "type": "string",
            "description": "HTTP method."
          },
          "path": {
            "type": "string",
            "description": "URL path."
          },
          "body": {
            "type": "string",
            "description": "HTTP request body."
          },
          "headers": {
            "type": "object",
            "description": "List of HTTP headers.",
            "example": {},
            "is_template": true
          },
          "max_retries": {
            "type": "integer",
            "description": "Max retry times if error on sending request.",
            "minimum": 0
          },
          "request_timeout": {
            "type": "string",
            "description": "HTTP request timeout.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.get": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "sqlserver"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Microsoft SQL Server. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_sqlserver.creation_opts"
          },
          "driver": {
            "default": "ms-sql",
            "type": "string",
            "description": "SQL Server Driver Name"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The SQL Server default port 1433 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "sa",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "bridge_s3.s3_direct_upload_parameters": {
        "required": [
          "bucket",
          "key"
        ],
        "properties": {
          "bucket": {
            "type": "string",
            "description": "The name of the S3 bucket."
          },
          "key": {
            "type": "string",
            "description": "Key of the S3 object."
          },
          "acl": {
            "type": "string",
            "enum": [
              "private",
              "public_read",
              "public_read_write",
              "authenticated_read",
              "bucket_owner_read",
              "bucket_owner_full_control"
            ],
            "description": "The ACL to use for the uploaded objects."
          },
          "headers": {
            "type": "object",
            "description": "HTTP headers to include in the S3 object upload request.<br/><br/>Useful to specify content type, content encoding, etc. of the S3 object.",
            "example": {}
          },
          "mode": {
            "default": "direct",
            "type": "string",
            "enum": [
              "direct"
            ],
            "description": "Enables uploading of events to the S3 service as separate objects."
          },
          "content": {
            "default": "${.}",
            "type": "string",
            "description": "Content of the S3 object being uploaded. Supports templates."
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_dropped": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "message_dropped"
            ],
            "description": "Event Type"
          },
          "id": {
            "type": "string",
            "description": "Message ID"
          },
          "reason": {
            "type": "string",
            "description": "The Reason for Dropping"
          },
          "clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "payload": {
            "type": "string",
            "description": "The Message Payload"
          },
          "peerhost": {
            "type": "string",
            "description": "The IP Address of the Peer Client"
          },
          "topic": {
            "type": "string",
            "description": "Message Topic"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "The Time that this Message is Received"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "The Message QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "bridge_elasticsearch.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "parameters": {
            "description": "ElasticSearch action parameters",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_update"
              },
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_delete"
              },
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_create"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_elasticsearch.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mqtt"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configs.",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.action_resource_opts"
          }
        },
        "type": "object"
      },
      "plugins.running_status": {
        "properties": {
          "node": {
            "type": "string",
            "example": "emqx@127.0.0.1"
          },
          "status": {
            "type": "string",
            "enum": [
              "running",
              "stopped"
            ],
            "description": "Install plugin status at runtime<br/>1. running: plugin is running.<br/>2. stopped: plugin is stopped.<br/>"
          }
        },
        "type": "object"
      },
      "bridge_mqtt.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only."
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.update_coap": {
        "properties": {
          "heartbeat": {
            "default": "30s",
            "type": "string",
            "description": "The gateway server required minimum heartbeat interval.<br/>When connection mode is enabled, this parameter is used to set the minimum heartbeat interval for the connection to be alive",
            "example": "1h"
          },
          "connection_required": {
            "default": false,
            "type": "boolean",
            "description": "Enable or disable connection mode.<br/>Connection mode is a feature of non-standard protocols. When connection mode is enabled, it is necessary to maintain the creation, authentication and alive of connection resources"
          },
          "notify_type": {
            "default": "qos",
            "type": "string",
            "enum": [
              "non",
              "con",
              "qos"
            ],
            "description": "The Notification Message will be delivered to the CoAP client if a new message received on an observed topic.<br/>The type of delivered coap message can be set to:<br/><br/>  - non: Non-confirmable;<br/><br/>  - con: Confirmable;<br/><br/>  - qos: Mapping from QoS type of received message, QoS0 -> non, QoS1,2 -> con"
          },
          "subscribe_qos": {
            "default": "coap",
            "type": "string",
            "enum": [
              "qos0",
              "qos1",
              "qos2",
              "coap"
            ],
            "description": "The Default QoS Level indicator for subscribe request.<br/>This option specifies the QoS level for the CoAP Client when establishing a subscription membership, if the subscribe request is not carried `qos` option. The indicator can be set to:<br/><br/>  - qos0, qos1, qos2: Fixed default QoS level<br/><br/>  - coap: Dynamic QoS level by the message type of subscribe request<br/><br/>    * qos0: If the subscribe request is non-confirmable<br/><br/>    * qos1: If the subscribe request is confirmable"
          },
          "publish_qos": {
            "default": "coap",
            "type": "string",
            "enum": [
              "qos0",
              "qos1",
              "qos2",
              "coap"
            ],
            "description": "The Default QoS Level indicator for publish request.<br/>This option specifies the QoS level for the CoAP Client when publishing a message to EMQX PUB/SUB system, if the publish request is not carried `qos` option. The indicator can be set to:<br/><br/>  - qos0, qos1, qos2: Fixed default QoS level<br/><br/>  - coap: Dynamic QoS level by the message type of publish request<br/><br/>    * qos0: If the publish request is non-confirmable<br/><br/>    * qos1: If the publish request is confirmable"
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          }
        },
        "type": "object"
      },
      "emqx_authz_schema.node_status": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name.",
            "example": "emqx@127.0.0.1"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting"
            ],
            "description": "The status of the resource for each node."
          }
        },
        "type": "object"
      },
      "bridge_matrix.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Configuration Parameters Specific to the PostgreSQL Action",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.auth_username_password": {
        "required": [
          "mechanism",
          "password",
          "username"
        ],
        "properties": {
          "mechanism": {
            "type": "string",
            "enum": [
              "plain",
              "scram_sha_256",
              "scram_sha_512"
            ],
            "description": "SASL authentication mechanism."
          },
          "username": {
            "type": "string",
            "description": "SASL authentication username."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "SASL authentication password.",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "node_eviction.status_disabled": {
        "properties": {
          "status": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "disabled"
            ]
          }
        },
        "type": "object"
      },
      "bridge_dynamo.get": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "hash_key",
          "name",
          "region",
          "table",
          "type",
          "url"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "dynamo"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "template": {
            "default": "",
            "type": "string",
            "description": "Template, the default value is empty. When this value is empty the whole message will be stored in the database.<br><br/>The template can be any valid JSON with placeholders and make sure all keys for table are here, example:<br><br/>  <code>{\"id\" : \"${id}\", \"clientid\" : \"${clientid}\", \"data\" : \"${payload.data}\"}</code>"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to DynamoDB. All MQTT `PUBLISH` messages with the topic<br/>matching the `local_topic` will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also `local_topic` is<br/>configured, then both the data got from the rule and the MQTT messages that match `local_topic`<br/>will be forwarded."
          },
          "hash_key": {
            "type": "string",
            "description": "DynamoDB Hash Key"
          },
          "range_key": {
            "type": "string",
            "description": "DynamoDB Range Key"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_dynamo.creation_opts"
          },
          "url": {
            "type": "string",
            "description": "The url of DynamoDB endpoint."
          },
          "region": {
            "type": "string",
            "description": "Region of AWS Dynamo"
          },
          "table": {
            "type": "string",
            "description": "DynamoDB Table."
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "Access Key ID for connecting to DynamoDB."
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "AWS Secret Access Key for connecting to DynamoDB.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "load_rebalance.global_status": {
        "properties": {
          "evacuations": {
            "type": "array",
            "description": "List of nodes that are being evacuated",
            "items": {
              "$ref": "#/components/schemas/load_rebalance.global_evacuation_status"
            }
          },
          "purges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/load_rebalance.global_purge_status"
            }
          },
          "rebalances": {
            "type": "array",
            "description": "List of nodes that coordinate a rebalance",
            "items": {
              "$ref": "#/components/schemas/load_rebalance.global_coordinator_status"
            }
          }
        },
        "type": "object"
      },
      "gcp_pubsub_consumer.get_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_consumer"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "parameters": {
            "description": "Source configs.",
            "$ref": "#/components/schemas/gcp_pubsub_consumer.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/gcp_pubsub_consumer.source_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx.listener_wss_opts": {
        "properties": {
          "cacertfile": {
            "default": "${EMQX_ETC_DIR}/certs/cacert.pem",
            "type": "string",
            "description": "Trusted PEM format CA certificates bundle file.<br/><br/>The certificates in this file are used to verify the TLS peer's certificates.<br/>Append new certificates to the file if new CAs are to be trusted.<br/>There is no need to restart EMQX to have the updated file loaded, because<br/>the system regularly checks if file has been updated (and reload).<br/><br/>NOTE: invalidating (deleting) a certificate from the file will not affect<br/>already established connections."
          },
          "cacerts": {
            "default": false,
            "type": "boolean",
            "deprecated": true
          },
          "certfile": {
            "default": "${EMQX_ETC_DIR}/certs/cert.pem",
            "type": "string",
            "description": "PEM format certificates chain file.<br/><br/>The certificates in this file should be in reversed order of the certificate<br/>issue chain. That is, the host's certificate should be placed in the beginning<br/>of the file, followed by the immediate issuer certificate and so on.<br/>Although the root CA certificate is optional, it should be placed at the end of<br/>the file if it is to be added."
          },
          "keyfile": {
            "default": "${EMQX_ETC_DIR}/certs/key.pem",
            "type": "string",
            "description": "PEM format private key file."
          },
          "verify": {
            "default": "verify_none",
            "type": "string",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "description": "Enable or disable peer verification."
          },
          "reuse_sessions": {
            "default": true,
            "type": "boolean",
            "description": "Enable TLS session reuse.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "depth": {
            "default": 10,
            "type": "integer",
            "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.<br/>So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
            "minimum": 0
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "String containing the user's password. Only used if the private key file is password-protected.",
            "example": ""
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "type": "array",
            "description": "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2', 'tlsv1.1']</code> here.",
            "items": {
              "type": "string"
            }
          },
          "ciphers": {
            "default": [],
            "type": "array",
            "description": "This config holds TLS cipher suite names separated by comma,<br/>or as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in which the<br/>client and server encrypts information over the network connection.<br/>Selecting a good cipher suite is critical for the<br/>application's data security, confidentiality and performance.<br/><br/>The names should be in OpenSSL string format (not RFC format).<br/>All default values and examples provided by EMQX config<br/>documentation are all in OpenSSL format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            }
          },
          "secure_renegotiate": {
            "default": true,
            "type": "boolean",
            "description": "Whether to reject TLS renegotiation attempts that are not compliant with [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt).<br/><br/>By default, `secure_renegotiate` is set to `true`, which forces secure renegotiation.<br/>If set to `false`, secure renegotiation will still be used, but will fall back to insecure renegotiation if the peer does not support [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt), which increases the risk of a MitM attack.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3."
          },
          "log_level": {
            "default": "notice",
            "type": "string",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "description": "The minimum level of logging allowed for SSL output.<br/><br/>The default is `notice`, set to a lower `debug` level for more detailed logging that can be used to investigate SSL handshake issues."
          },
          "hibernate_after": {
            "default": "5s",
            "type": "string",
            "description": "Specifies the amount of time that an SSL process will hibernate after being idle, thus reducing its memory footprint.<br/><br/>The hibernating process will be woken up when a new message arrives.<br/>Hibernating and waking up too often can cause CPU utilization to increase, as they both perform garbage collection on the process.",
            "example": "12m"
          },
          "partial_chain": {
            "type": "string",
            "enum": [
              true,
              false,
              "two_cacerts_from_cacertfile",
              "cacert_from_cacertfile"
            ],
            "description": "Enable or disable peer verification with partial_chain.<br/>When local verifies a peer certificate during the x509 path validation<br/>process, it constructs a certificate chain that starts with the peer<br/>certificate and ends with a trust anchor.<br/>By default, if it is set to `false`, the trust anchor is the<br/>Root CA, and the certificate chain must be complete.<br/>However, if the setting is set to `true` or `cacert_from_cacertfile`,<br/>the last certificate in `cacertfile` will be used as the trust anchor<br/>certificate (intermediate CA). This creates a partial chain<br/>in the path validation.<br/>Alternatively, if it is configured with `two_cacerts_from_cacertfile`,<br/>one of the last two certificates in `cacertfile` will be used as the<br/>trust anchor certificate, forming a partial chain. This option is<br/>particularly useful for intermediate CA certificate rotation.<br/>However, please note that it incurs some additional overhead, so it<br/>should only be used for certificate rotation purposes."
          },
          "verify_peer_ext_key_usage": {
            "type": "string",
            "description": "Verify extended key usage in peer's certificate<br/>For additional peer certificate validation, the value defined here must present in the<br/>'Extended Key Usage' of peer certificate defined in<br/>[rfc5280](https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.12).<br/><br/>Allowed values are<br/>- `clientAuth`<br/>- `serverAuth`<br/>- `codeSigning`<br/>- `emailProtection`<br/>- `timeStamping`<br/>- `ocspSigning`<br/>- raw OID, for example: \"OID:1.3.6.1.5.5.7.3.2\" means `id-pk 2` which is equivalent to `clientAuth`<br/><br/>Comma-separated string is also supported for validating more than one key usages.<br/><br/>For example, `\"serverAuth,OID:1.3.6.1.5.5.7.3.2\"`"
          },
          "dhfile": {
            "type": "string",
            "description": "Path to a file containing PEM-encoded Diffie-Hellman parameters<br/>to be used by the server if a cipher suite using Diffie-Hellman<br/>key exchange is negotiated. If not specified, default parameters<br/>are used.<br/><br/>NOTE: The <code>dhfile</code> option is not supported by TLS 1.3."
          },
          "fail_if_no_peer_cert": {
            "default": false,
            "type": "boolean",
            "description": "This option is only effective if `verify` is set to `verify_peer`.<br/><br/>If set to `true`, EMQX will reject the connection if the client fails to provide a certificate.<br/><br/>If set to `false`, EMQX will accept clients which don't present a certificate."
          },
          "honor_cipher_order": {
            "default": true,
            "type": "boolean",
            "description": "An important security setting. If this setting is enabled, the server will prioritize the cipher suites it prefers most from the list of cipher suites supported by the client, thus ignoring the client's preferences.<br/><br/>The server's cipher suites are specified by `ciphers`, with preference decreasing from left to right.<br/><br/>It is often better to use the server's preferences, as it is more likely that the server will be configured correctly."
          },
          "client_renegotiation": {
            "default": true,
            "type": "boolean",
            "description": "In protocols that support client-initiated renegotiation,<br/>the cost of resources of such an operation is higher for the server than the client.<br/>This can act as a vector for denial of service attacks.<br/>The SSL application already takes measures to counter-act such attempts,<br/>but client-initiated renegotiation can be strictly disabled by setting this option to false.<br/>The default value is true. Note that disabling renegotiation can result in<br/>long-lived connections becoming unusable due to limits on<br/>the number of messages the underlying cipher suite can encipher.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "handshake_timeout": {
            "default": "15s",
            "type": "string",
            "description": "Maximum time duration allowed for the handshake to complete",
            "example": "12m"
          }
        },
        "type": "object"
      },
      "bridge_kafka.v1_producer_kafka_opts": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Kafka topic name.  Supports templates (e.g.: `t-${payload.t}`)."
          },
          "message": {
            "description": "Template for rendering a message.",
            "$ref": "#/components/schemas/bridge_kafka.kafka_message"
          },
          "max_batch_bytes": {
            "default": "896KB",
            "type": "string",
            "description": "Maximum bytes to collect in a Kafka message batch. Most of the Kafka brokers default to a limit of 1 MB batch size. EMQX's default value is less than 1 MB in order to compensate Kafka message encoding overheads (especially when each individual message is very small). When a single message is over the limit, it is still sent (as a single element batch).",
            "example": "32MB"
          },
          "compression": {
            "default": "no_compression",
            "type": "string",
            "enum": [
              "no_compression",
              "snappy",
              "gzip"
            ],
            "description": "Specify the method of compression."
          },
          "partition_strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "key_dispatch"
            ],
            "description": "Partition strategy is to tell the producer how to dispatch messages to partitions.<br/><br/><code>random</code>: Randomly pick a partition for each message.<br/><code>key_dispatch</code>: Assigns messages to partitions based on a hash of the message key,<br/>ensuring consistent partition for messages with the same key."
          },
          "required_acks": {
            "default": "all_isr",
            "type": "string",
            "enum": [
              "all_isr",
              "leader_only",
              "none"
            ],
            "description": "The acknowledgement criteria for the partition leader. It determines the level of confirmation required from partition replicas before sending an acknowledgement back to the producer.<br/><br/><code>all_isr</code>: Require all in-sync replicas to acknowledge.<br/><code>leader_only</code>: Require only the partition-leader's acknowledgement.<br/><code>none</code>: No need for Kafka to acknowledge at all."
          },
          "kafka_headers": {
            "type": "string",
            "description": "Provide a placeholder for message headers<br/><br/>e.g. <code>${pub_props}</code><br/><br/>Note that the value of the placeholder must be either an object:<br/><code>{\"foo\": \"bar\"}</code><br/>or an array of key-value pairs:<br/><code>[{\"key\": \"foo\", \"value\": \"bar\"}]</code>"
          },
          "kafka_ext_headers": {
            "type": "array",
            "description": "Provide more key-value pairs for message headers<br/><br/>The key-value pairs here will be combined with the<br/>value of <code>kafka_headers</code> field before sending producing.",
            "items": {
              "$ref": "#/components/schemas/bridge_kafka.producer_kafka_ext_headers"
            }
          },
          "kafka_header_value_encode_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "json"
            ],
            "description": "The encoding mode for headers.<br/><br/> - `none`: Add only strings are added as header values<br/> - `json`: Encode header values as JSON string"
          },
          "partition_count_refresh_interval": {
            "default": "60s",
            "type": "string",
            "description": "The time interval for Kafka producer to discover increased number of partitions.<br/>After the number of partitions is increased in Kafka, EMQX will start taking the<br/>discovered partitions into account when dispatching messages per <code>partition_strategy</code>.",
            "example": "1h"
          },
          "partitions_limit": {
            "default": "all_partitions",
            "description": "Limit the number of partitions to produce data for the given topic.<br/>The special value `all_partitions` is to utilize all partitions for the topic.<br/>Setting this to a value which is greater than the total number of partitions in has no effect.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "all_partitions"
                ]
              }
            ]
          },
          "max_inflight": {
            "default": 10,
            "type": "integer",
            "description": "The maximum number of message batches that the producer can send to each partition before it must wait for an acknowledgement.<br/>Setting a higher number can enhance throughput. However, value above 1 may lead to potential message reordering risks.",
            "minimum": 1
          },
          "buffer": {
            "description": "Configure producer message buffer.<br/><br/>Tell Kafka producer how to buffer messages when EMQX has more messages to send than Kafka can keep up, or when Kafka is down.",
            "$ref": "#/components/schemas/bridge_kafka.producer_buffer"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "async",
              "sync"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "sync_query_timeout": {
            "default": "5s",
            "type": "string",
            "description": "This parameter defines the timeout limit for synchronous queries. It applies only when the query mode is configured to 'sync'.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "rabbitmq.get": {
        "required": [
          "password",
          "username"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "default": "localhost",
            "type": "string",
            "description": "The RabbitMQ server address that you want to connect to (for example, localhost)."
          },
          "port": {
            "default": 5672,
            "maximum": 65535,
            "type": "integer",
            "description": "The RabbitMQ server address that you want to connect to (for example, localhost).",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username used to authenticate with the RabbitMQ server."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The size of the connection pool.",
            "minimum": 1
          },
          "timeout": {
            "default": "5s",
            "type": "string",
            "description": "The timeout for waiting on the connection to be established.",
            "example": "32s"
          },
          "virtual_host": {
            "default": "/",
            "type": "string",
            "description": "The virtual host to use when connecting to the RabbitMQ server."
          },
          "heartbeat": {
            "default": "30s",
            "type": "string",
            "description": "The interval for sending heartbeat messages to the RabbitMQ server.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/rabbitmq.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.ingress_parameters": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Receive messages from which topic of the remote broker"
          },
          "qos": {
            "default": 1,
            "maximum": 2,
            "type": "integer",
            "description": "The QoS level to be used when subscribing to the remote broker",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_publish.publish_message": {
        "required": [
          "payload",
          "topic"
        ],
        "properties": {
          "payload_encoding": {
            "default": "plain",
            "type": "string",
            "enum": [
              "plain",
              "base64"
            ],
            "description": "MQTT Payload Encoding, <code>base64</code> or <code>plain</code>. When set to <code>base64</code>, the message is decoded before it is published."
          },
          "topic": {
            "type": "string",
            "description": "Topic Name",
            "example": "api/example/topic"
          },
          "qos": {
            "default": 0,
            "maximum": 2,
            "type": "integer",
            "description": "MQTT message QoS",
            "minimum": 0,
            "example": 0
          },
          "clientid": {
            "type": "string",
            "deprecated": true
          },
          "payload": {
            "type": "string",
            "description": "The MQTT message payload.",
            "example": "hello emqx api"
          },
          "properties": {
            "description": "The Properties of the PUBLISH message.",
            "$ref": "#/components/schemas/emqx_mgmt_api_publish.message_properties"
          },
          "retain": {
            "default": false,
            "type": "boolean",
            "description": "A boolean field to indicate if this message should be retained."
          }
        },
        "type": "object"
      },
      "emqx.flapping_detect": {
        "properties": {
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Enable flapping connection detection feature."
          },
          "window_time": {
            "default": "1m",
            "type": "string",
            "description": "The time window for flapping detection.",
            "example": "12m"
          },
          "max_count": {
            "default": 15,
            "type": "integer",
            "description": "The maximum number of disconnects allowed for a MQTT Client in `window_time`",
            "minimum": 0
          },
          "ban_time": {
            "default": "5m",
            "type": "string",
            "description": "How long the flapping clientid will be banned.",
            "example": "12m"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_clients.subscribe": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Topic",
            "example": "testtopic/#"
          },
          "qos": {
            "default": 0,
            "maximum": 2,
            "type": "integer",
            "description": "QoS",
            "minimum": 0,
            "example": 0
          },
          "nl": {
            "default": 0,
            "type": "integer",
            "description": "No Local"
          },
          "rap": {
            "default": 0,
            "type": "integer",
            "description": "Retain as Published"
          },
          "rh": {
            "default": 0,
            "type": "integer",
            "description": "Retain Handling"
          }
        },
        "type": "object"
      },
      "kafka_consumer.put_source": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "parameters": {
            "description": "Source configs.",
            "$ref": "#/components/schemas/kafka_consumer.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.source_resource_opts"
          }
        },
        "type": "object"
      },
      "authn_hash.bcrypt_rw_api": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "bcrypt"
            ],
            "description": "BCRYPT password hashing."
          },
          "salt_rounds": {
            "default": 10,
            "maximum": 10,
            "type": "integer",
            "description": "Work factor for BCRYPT password generation.",
            "minimum": 5,
            "example": 10
          }
        },
        "type": "object"
      },
      "connector_syskeeper_proxy.get": {
        "required": [
          "listen",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "syskeeper_proxy"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "listen": {
            "type": "string",
            "description": "The listening address for this Syskeeper proxy server"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The number of the acceptors",
            "minimum": 0
          },
          "handshake_timeout": {
            "default": "10s",
            "type": "string",
            "description": "The maximum to wait for the handshake when a connection is created",
            "example": "32s"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_syskeeper_proxy.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.source_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_elasticsearch.action_create": {
        "required": [
          "action",
          "index"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "create"
            ],
            "description": "create"
          },
          "index": {
            "type": "string",
            "description": "Name of index, or index alias to perform the action on.<br/>This parameter is required.",
            "example": "${payload.index}"
          },
          "id": {
            "type": "string",
            "description": "The document ID. If no ID is specified, a document ID is automatically generated.",
            "example": "${payload.id}"
          },
          "doc": {
            "type": "string",
            "description": "JSON document. If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc.",
            "example": "${payload.doc}"
          },
          "routing": {
            "type": "string",
            "description": "Custom value used to route operations to a specific shard.",
            "example": "${payload.routing}"
          },
          "require_alias": {
            "type": "boolean",
            "description": "If true, the request’s actions must target an index alias. Defaults to false"
          },
          "overwrite": {
            "default": true,
            "type": "boolean",
            "description": "Set to false If a document with the specified _id already exists(conflict), the operation will fail."
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "HTTP request max retry times if failed.",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "file_transfer.local_storage_segments_gc": {
        "properties": {
          "interval": {
            "default": "1h",
            "type": "string",
            "description": "Interval of periodic garbage collection.",
            "example": "32s"
          },
          "maximum_segments_ttl": {
            "default": "24h",
            "type": "string",
            "description": "Maximum TTL of a segment kept in the local file system.<br/><br/>This is a hard limit: no segment will outlive this TTL, even if some file transfer specifies a<br/>TTL more than that.",
            "example": "1h"
          },
          "minimum_segments_ttl": {
            "default": "5m",
            "type": "string",
            "description": "Minimum TTL of a segment kept in the local file system.<br/><br/>This is a hard limit: no segment will be garbage collected before reaching this TTL,<br/>even if some file transfer specifies a TTL less than that.",
            "example": "1h"
          }
        },
        "type": "object"
      },
      "schema_registry.external_registry_api_create_confluent_schema_registry": {
        "required": [
          "name",
          "url"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "default": "confluent",
            "type": "string",
            "enum": [
              "confluent"
            ],
            "description": "External Schema Registry Type"
          },
          "url": {
            "type": "string",
            "description": "URL endpoint for external registry."
          },
          "auth": {
            "default": "none",
            "description": "Authentication options for accessing external registry.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/schema_registry.confluent_schema_registry_auth_basic"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "emqx_authn_api.response_users": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/emqx_authn_api.response_user"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/public.meta"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.tcp_listener": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Listener ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "tcp"
            ],
            "description": "Listener Type"
          },
          "name": {
            "type": "string",
            "description": "Listener Name"
          },
          "running": {
            "type": "boolean",
            "description": "Listener Running status"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "Size of the acceptor pool."
          },
          "tcp_options": {
            "description": "Setting the TCP socket options.",
            "$ref": "#/components/schemas/emqx.tcp_opts"
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP,<br/>this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "Timeout for proxy protocol.<br/>EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
            "example": "12m"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable the listener."
          },
          "bind": {
            "type": "string",
            "description": "The IP address and port that the listener will bind.",
            "example": "127.0.0.1:80"
          },
          "max_connections": {
            "default": 1024,
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "integer",
                "minimum": 1
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "type": "integer",
            "description": "Maximum connections per second."
          },
          "enable_authn": {
            "default": true,
            "type": "boolean",
            "description": "Set <code>true</code> (default) to enable client authentication on this listener.<br/>When set to <code>false</code> clients will be allowed to connect without authentication."
          },
          "mountpoint": {
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "access_rules": {
            "default": [],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses.<br/>The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "authn.builtin_db_api": {
        "required": [
          "backend",
          "mechanism",
          "user_id_type"
        ],
        "properties": {
          "password_hash_algorithm": {
            "description": "Options for password hash creation and verification through API.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn_hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn_hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn_hash.bcrypt_rw_api"
              }
            ]
          },
          "mechanism": {
            "type": "string",
            "enum": [
              "password_based"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "built_in_database"
            ],
            "description": "Backend type."
          },
          "user_id_type": {
            "default": "username",
            "type": "string",
            "enum": [
              "clientid",
              "username"
            ],
            "description": "Specify whether to use `clientid` or `username` for authentication."
          },
          "bootstrap_file": {
            "default": "${EMQX_ETC_DIR}/auth-built-in-db-bootstrap.csv",
            "type": "string",
            "description": "The bootstrap file imports users into the built-in database.<br/>It will not import a user ID that already exists in the database.<br/>The file content format is determined by `bootstrap_type`."
          },
          "bootstrap_type": {
            "default": "plain",
            "type": "string",
            "enum": [
              "hash",
              "plain"
            ],
            "description": "Specify which type of content the bootstrap file has.<br/><br/>- **`plain`**:<br/>  - Expected data fields: `user_id`, `password`, `is_superuser`<br/>  - `user_id`: Can be Client ID or username, depending on built-in database authentication's `user_id_type` config.<br/>  - `password`: User's plaintext password.<br/>  - `is_superuser`: Boolean, user's administrative status.<br/><br/>- **`hash`**:<br/>  - Expected data fields: `user_id`,`password_hash`,`salt`,`is_superuser`<br/>  - Definitions similar to `plain` type, with `password_hash` and `salt` added for security.<br/><br/>The content can be either in CSV, or JSON format.<br/><br/>Here is a CSV example: `user_id,password_hash,salt,is_superuser\\nmy_user,b6c743545a7817ae8c8f624371d5f5f0373234bb0ff36b8ffbf19bce0e06ab75,de1024f462fb83910fd13151bd4bd235,true`<br/><br/>And JSON content should be decoded into an array of objects, for example: `[{\"user_id\": \"my_user\",\"password\": \"s3cr3tp@ssw0rd\",\"is_superuser\": true}]`.<br/><br/>The hash string for `password_hash` depends on how `password_hash_algorithm` is configured for the built-in database authentication mechanism. For example, if it's configured as `password_hash_algorithm {name = sha256, salt_position = suffix}`, then the salt is appended to the password before hashed. Here is the equivalent Python expression: `hashlib.sha256(password + salt).hexdigest()`."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          }
        },
        "type": "object"
      },
      "bridge_matrix.post": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "matrix"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.put_api_v1": {
        "required": [
          "database",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to the InfluxDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>Please note that a placeholder for an integer value must be annotated with a suffix `i`. For example `${payload.int_value}i`."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The InfluxDB default port 8086 is used if `[:Port]` is not specified."
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "InfluxDB time precision."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "database": {
            "type": "string",
            "description": "InfluxDB database."
          },
          "username": {
            "type": "string",
            "description": "InfluxDB username."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB password.",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.post": {
        "required": [
          "exchange",
          "name",
          "password",
          "routing_key",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rabbitmq"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to RabbitMQ. All MQTT 'PUBLISH' messages with the topic matching the local_topic will be forwarded.<br/>    NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is configured, then both the data got from the rule and the MQTT messages that match local_topic will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_rabbitmq.creation_opts"
          },
          "server": {
            "default": "localhost",
            "type": "string",
            "description": "The RabbitMQ server address that you want to connect to (for example, localhost)."
          },
          "port": {
            "default": 5672,
            "maximum": 65535,
            "type": "integer",
            "description": "The RabbitMQ server address that you want to connect to (for example, localhost).",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username used to authenticate with the RabbitMQ server."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The size of the connection pool.",
            "minimum": 1
          },
          "timeout": {
            "default": "5s",
            "type": "string",
            "description": "The timeout for waiting on the connection to be established.",
            "example": "32s"
          },
          "virtual_host": {
            "default": "/",
            "type": "string",
            "description": "The virtual host to use when connecting to the RabbitMQ server."
          },
          "heartbeat": {
            "default": "30s",
            "type": "string",
            "description": "The interval for sending heartbeat messages to the RabbitMQ server.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "wait_for_publish_confirmations": {
            "default": true,
            "type": "boolean",
            "description": "A boolean value that indicates whether to wait for RabbitMQ to confirm message publication when using publisher confirms."
          },
          "publish_confirmation_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The timeout for waiting on the connection to be established.",
            "example": "32s"
          },
          "exchange": {
            "type": "string",
            "description": "The name of the RabbitMQ exchange where the messages will be sent."
          },
          "routing_key": {
            "type": "string",
            "description": "The routing key used to route messages to the correct queue in the RabbitMQ exchange."
          },
          "delivery_mode": {
            "default": "non_persistent",
            "type": "string",
            "enum": [
              "non_persistent",
              "persistent"
            ],
            "description": "The delivery mode for messages published to RabbitMQ. Delivery mode non_persistent (1) is suitable for messages that don't require persistence across RabbitMQ restarts, whereas delivery mode persistent (2) is designed for messages that must survive RabbitMQ restarts."
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "The template for formatting the payload of the message before sending it to RabbitMQ. Template placeholders, such as ${field1.sub_field}, will be substituted with the respective field's value. When left empty, the entire input message will be used as the payload, formatted as a JSON text. This behavior is equivalent to specifying ${.} as the payload template."
          }
        },
        "type": "object"
      },
      "bridge_dynamo.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/bridge_dynamo.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pgsql.put": {
        "required": [
          "database",
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.post_connector": {
        "required": [
          "authentication",
          "bootstrap_hosts",
          "name",
          "ssl",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_event_hub_producer"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Azure Event Hubs Kafka <code>host[:port]</code> namespace endpoints to bootstrap the client.  Default port number is 9093."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Azure Event Hubs Kafka broker and topic metadata. Setting too small value may add extra load on Azure Event Hubs.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching metadata from Azure Event Hubs.",
            "example": "32s"
          },
          "authentication": {
            "default": {},
            "description": "Authentication configs.",
            "$ref": "#/components/schemas/bridge_azure_event_hub.auth_username_password"
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "default": {
              "enable": true
            },
            "$ref": "#/components/schemas/bridge_azure_event_hub.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_clients.unsubscribe": {
        "properties": {
          "topic": {
            "type": "string",
            "description": "Topic",
            "example": "testtopic/#"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_metrics.node_metrics": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name"
          },
          "bytes.received": {
            "type": "integer",
            "description": "Number of bytes received ",
            "minimum": 0
          },
          "bytes.sent": {
            "type": "integer",
            "description": "Number of bytes sent on this connection",
            "minimum": 0
          },
          "packets.received": {
            "type": "integer",
            "description": "Number of received packet",
            "minimum": 0
          },
          "packets.sent": {
            "type": "integer",
            "description": "Number of sent packet",
            "minimum": 0
          },
          "packets.connect.received": {
            "type": "integer",
            "description": "Number of received CONNECT packet",
            "minimum": 0
          },
          "packets.connack.sent": {
            "type": "integer",
            "description": "Number of sent CONNACK packet",
            "minimum": 0
          },
          "packets.connack.error": {
            "type": "integer",
            "description": "Number of received CONNECT packet with unsuccessful connections",
            "minimum": 0
          },
          "packets.connack.auth_error": {
            "type": "integer",
            "description": "Number of received CONNECT packet with failed Authentication",
            "minimum": 0
          },
          "packets.publish.received": {
            "type": "integer",
            "description": "Number of received PUBLISH packet",
            "minimum": 0
          },
          "packets.publish.sent": {
            "type": "integer",
            "description": "Number of sent PUBLISH packet",
            "minimum": 0
          },
          "packets.publish.inuse": {
            "type": "integer",
            "description": "Number of received PUBLISH packet with occupied identifiers",
            "minimum": 0
          },
          "packets.publish.error": {
            "type": "integer",
            "description": "Number of received PUBLISH packet that cannot be published",
            "minimum": 0
          },
          "packets.publish.auth_error": {
            "type": "integer",
            "description": "Number of received PUBLISH packets with failed the Authorization check",
            "minimum": 0
          },
          "packets.publish.dropped": {
            "type": "integer",
            "description": "Number of messages discarded due to the receiving limit",
            "minimum": 0
          },
          "packets.puback.received": {
            "type": "integer",
            "description": "Number of received PUBACK packet",
            "minimum": 0
          },
          "packets.puback.sent": {
            "type": "integer",
            "description": "Number of sent PUBACK packet",
            "minimum": 0
          },
          "packets.puback.inuse": {
            "type": "integer",
            "description": "Number of received PUBACK packet with occupied identifiers",
            "minimum": 0
          },
          "packets.puback.missed": {
            "type": "integer",
            "description": "Number of received packet with identifiers.",
            "minimum": 0
          },
          "packets.pubrec.received": {
            "type": "integer",
            "description": "Number of received PUBREC packet",
            "minimum": 0
          },
          "packets.pubrec.sent": {
            "type": "integer",
            "description": "Number of sent PUBREC packet",
            "minimum": 0
          },
          "packets.pubrec.inuse": {
            "type": "integer",
            "description": "Number of received PUBREC packet with occupied identifiers",
            "minimum": 0
          },
          "packets.pubrec.missed": {
            "type": "integer",
            "description": "Number of received PUBREC packet with unknown identifiers",
            "minimum": 0
          },
          "packets.pubrel.received": {
            "type": "integer",
            "description": "Number of received PUBREL packet",
            "minimum": 0
          },
          "packets.pubrel.sent": {
            "type": "integer",
            "description": "Number of sent PUBREL packet",
            "minimum": 0
          },
          "packets.pubrel.missed": {
            "type": "integer",
            "description": "Number of received PUBREC packet with unknown identifiers",
            "minimum": 0
          },
          "packets.pubcomp.received": {
            "type": "integer",
            "description": "Number of received PUBCOMP packet",
            "minimum": 0
          },
          "packets.pubcomp.sent": {
            "type": "integer",
            "description": "Number of sent PUBCOMP packet",
            "minimum": 0
          },
          "packets.pubcomp.inuse": {
            "type": "integer",
            "description": "Number of received PUBCOMP packet with occupied identifiers",
            "minimum": 0
          },
          "packets.pubcomp.missed": {
            "type": "integer",
            "description": "Number of missed PUBCOMP packet",
            "minimum": 0
          },
          "packets.subscribe.received": {
            "type": "integer",
            "description": "Number of received SUBSCRIBE packet",
            "minimum": 0
          },
          "packets.subscribe.error": {
            "type": "integer",
            "description": "Number of received SUBSCRIBE packet with failed subscriptions",
            "minimum": 0
          },
          "packets.subscribe.auth_error": {
            "type": "integer",
            "description": "Number of received SUBACK packet with failed Authorization check",
            "minimum": 0
          },
          "packets.suback.sent": {
            "type": "integer",
            "description": "Number of sent SUBACK packet",
            "minimum": 0
          },
          "packets.unsubscribe.received": {
            "type": "integer",
            "description": "Number of received UNSUBSCRIBE packet",
            "minimum": 0
          },
          "packets.unsubscribe.error": {
            "type": "integer",
            "description": "Number of received UNSUBSCRIBE packet with failed unsubscriptions",
            "minimum": 0
          },
          "packets.unsuback.sent": {
            "type": "integer",
            "description": "Number of sent UNSUBACK packet",
            "minimum": 0
          },
          "packets.pingreq.received": {
            "type": "integer",
            "description": "Number of received PINGREQ packet",
            "minimum": 0
          },
          "packets.pingresp.sent": {
            "type": "integer",
            "description": "Number of sent PUBRESP packet",
            "minimum": 0
          },
          "packets.disconnect.received": {
            "type": "integer",
            "description": "Number of received DISCONNECT packet",
            "minimum": 0
          },
          "packets.disconnect.sent": {
            "type": "integer",
            "description": "Number of sent DISCONNECT packet",
            "minimum": 0
          },
          "packets.auth.received": {
            "type": "integer",
            "description": "Number of received AUTH packet",
            "minimum": 0
          },
          "packets.auth.sent": {
            "type": "integer",
            "description": "Number of sent AUTH packet",
            "minimum": 0
          },
          "messages.received": {
            "type": "integer",
            "description": "Number of messages received from the client, equal to the sum of messages.qos0.received, messages.qos1.received and messages.qos2.received",
            "minimum": 0
          },
          "messages.sent": {
            "type": "integer",
            "description": "Number of messages sent to the client, equal to the sum of messages.qos0.sent, messages.qos1.sent and messages.qos2.sent",
            "minimum": 0
          },
          "messages.qos0.received": {
            "type": "integer",
            "description": "Number of QoS 0 messages received from clients",
            "minimum": 0
          },
          "messages.qos0.sent": {
            "type": "integer",
            "description": "Number of QoS 0 messages sent to clients",
            "minimum": 0
          },
          "messages.qos1.received": {
            "type": "integer",
            "description": "Number of QoS 1 messages received from clients",
            "minimum": 0
          },
          "messages.qos1.sent": {
            "type": "integer",
            "description": "Number of QoS 1 messages sent to clients",
            "minimum": 0
          },
          "messages.qos2.received": {
            "type": "integer",
            "description": "Number of QoS 2 messages received from clients",
            "minimum": 0
          },
          "messages.qos2.sent": {
            "type": "integer",
            "description": "Number of QoS 2 messages sent to clients",
            "minimum": 0
          },
          "messages.publish": {
            "type": "integer",
            "description": "Number of messages published in addition to system messages",
            "minimum": 0
          },
          "messages.dropped": {
            "type": "integer",
            "description": "Number of messages dropped before forwarding to the subscription process",
            "minimum": 0
          },
          "messages.validation_failed": {
            "type": "integer",
            "description": "Number of message validation failed",
            "minimum": 0
          },
          "messages.validation_succeeded": {
            "type": "integer",
            "description": "Number of message validation successful",
            "minimum": 0
          },
          "messages.transformation_failed": {
            "type": "integer",
            "description": "Number fo message transformation failed",
            "minimum": 0
          },
          "messages.transformation_succeeded": {
            "type": "integer",
            "description": "Number fo message transformation succeeded",
            "minimum": 0
          },
          "messages.dropped.await_pubrel_timeout": {
            "type": "integer",
            "description": "Number of messages dropped due to waiting PUBREL timeout",
            "minimum": 0
          },
          "messages.dropped.no_subscribers": {
            "type": "integer",
            "description": "Number of messages dropped due to no subscribers",
            "minimum": 0
          },
          "messages.forward": {
            "type": "integer",
            "description": "Number of messages forwarded to other nodes",
            "minimum": 0
          },
          "messages.delayed": {
            "type": "integer",
            "description": "Number of delay-published messages",
            "minimum": 0
          },
          "messages.delivered": {
            "type": "integer",
            "description": "Number of messages forwarded to the subscription process internally",
            "minimum": 0
          },
          "messages.acked": {
            "type": "integer",
            "description": "Number of received PUBACK and PUBREC packet",
            "minimum": 0
          },
          "messages.persisted": {
            "type": "integer",
            "description": "Number of message persisted",
            "minimum": 0
          },
          "delivery.dropped": {
            "type": "integer",
            "description": "Total number of discarded messages when sending",
            "minimum": 0
          },
          "delivery.dropped.no_local": {
            "type": "integer",
            "description": "Number of messages that were dropped due to the No Local subscription option when sending",
            "minimum": 0
          },
          "delivery.dropped.too_large": {
            "type": "integer",
            "description": "The number of messages that were dropped because the length exceeded the limit when sending",
            "minimum": 0
          },
          "delivery.dropped.qos0_msg": {
            "type": "integer",
            "description": "Number of messages with QoS 0 that were dropped because the message queue was full when sending",
            "minimum": 0
          },
          "delivery.dropped.queue_full": {
            "type": "integer",
            "description": "Number of messages with a non-zero QoS that were dropped because the message queue was full when sending",
            "minimum": 0
          },
          "delivery.dropped.expired": {
            "type": "integer",
            "description": "Number of messages dropped due to message expiration on sending",
            "minimum": 0
          },
          "client.connect": {
            "type": "integer",
            "description": "Number of client connections",
            "minimum": 0
          },
          "client.connack": {
            "type": "integer",
            "description": "Number of CONNACK packet sent",
            "minimum": 0
          },
          "client.connected": {
            "type": "integer",
            "description": "Number of successful client connected",
            "minimum": 0
          },
          "client.authenticate": {
            "type": "integer",
            "description": "Number of client Authentication",
            "minimum": 0
          },
          "client.auth.anonymous": {
            "type": "integer",
            "description": "Number of clients who log in anonymously",
            "minimum": 0
          },
          "client.authorize": {
            "type": "integer",
            "description": "Number of Authorization rule checks",
            "minimum": 0
          },
          "client.subscribe": {
            "type": "integer",
            "description": "Number of client subscriptions",
            "minimum": 0
          },
          "client.unsubscribe": {
            "type": "integer",
            "description": "Number of client unsubscriptions",
            "minimum": 0
          },
          "client.disconnected": {
            "type": "integer",
            "description": "Number of client disconnects",
            "minimum": 0
          },
          "session.created": {
            "type": "integer",
            "description": "Number of sessions created",
            "minimum": 0
          },
          "session.resumed": {
            "type": "integer",
            "description": "Number of sessions resumed because Clean Session or Clean Start is false",
            "minimum": 0
          },
          "session.takenover": {
            "type": "integer",
            "description": "Number of sessions takenover because Clean Session or Clean Start is false",
            "minimum": 0
          },
          "session.discarded": {
            "type": "integer",
            "description": "Number of sessions dropped because Clean Session or Clean Start is true",
            "minimum": 0
          },
          "session.terminated": {
            "type": "integer",
            "description": "Number of terminated sessions",
            "minimum": 0
          },
          "authorization.allow": {
            "type": "integer",
            "description": "Number of Authorization allow",
            "minimum": 0
          },
          "authorization.deny": {
            "type": "integer",
            "description": "Number of Authorization deny",
            "minimum": 0
          },
          "authorization.cache_hit": {
            "type": "integer",
            "description": "Number of Authorization hits the cache",
            "minimum": 0
          },
          "authorization.cache_miss": {
            "type": "integer",
            "description": "Number of Authorization cache missing",
            "minimum": 0
          },
          "authentication.success": {
            "type": "integer",
            "description": "Number of successful client Authentication",
            "minimum": 0
          },
          "authentication.success.anonymous": {
            "type": "integer",
            "description": "Number of successful client Authentication due to anonymous",
            "minimum": 0
          },
          "authentication.failure": {
            "type": "integer",
            "description": "Number of failed client Authentication",
            "minimum": 0
          },
          "overload_protection.delay.ok": {
            "type": "integer",
            "description": "Number of overload protection delayed",
            "minimum": 0
          },
          "overload_protection.delay.timeout": {
            "type": "integer",
            "description": "Number of overload protection delay timeout",
            "minimum": 0
          },
          "overload_protection.hibernation": {
            "type": "integer",
            "description": "Number of overload protection hibernation",
            "minimum": 0
          },
          "overload_protection.gc": {
            "type": "integer",
            "description": "Number of overload protection garbage collection",
            "minimum": 0
          },
          "overload_protection.new_conn": {
            "type": "integer",
            "description": "Number of overload protection close new incoming connection",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "confluent.auth_username_password": {
        "required": [
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Confluent Key."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.get_connector": {
        "required": [
          "authentication",
          "bootstrap_hosts",
          "name",
          "ssl",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_event_hub_producer"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Azure Event Hubs Kafka <code>host[:port]</code> namespace endpoints to bootstrap the client.  Default port number is 9093."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Azure Event Hubs Kafka broker and topic metadata. Setting too small value may add extra load on Azure Event Hubs.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching metadata from Azure Event Hubs.",
            "example": "32s"
          },
          "authentication": {
            "default": {},
            "description": "Authentication configs.",
            "$ref": "#/components/schemas/bridge_azure_event_hub.auth_username_password"
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "default": {
              "enable": true
            },
            "$ref": "#/components/schemas/bridge_azure_event_hub.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.post_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sqlserver"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "driver": {
            "default": "ms-sql",
            "type": "string",
            "description": "SQL Server Driver Name"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The SQL Server default port 1433 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "sa",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_sqlserver.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pgsql.post": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pgsql"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.ssl_client_opts": {
        "properties": {
          "cacertfile": {
            "type": "string",
            "description": "Trusted PEM format CA certificates bundle file.<br/><br/>The certificates in this file are used to verify the TLS peer's certificates.<br/>Append new certificates to the file if new CAs are to be trusted.<br/>There is no need to restart EMQX to have the updated file loaded, because<br/>the system regularly checks if file has been updated (and reload).<br/><br/>NOTE: invalidating (deleting) a certificate from the file will not affect<br/>already established connections."
          },
          "cacerts": {
            "default": false,
            "type": "boolean",
            "deprecated": true
          },
          "certfile": {
            "type": "string",
            "description": "PEM format certificates chain file.<br/><br/>The certificates in this file should be in reversed order of the certificate<br/>issue chain. That is, the host's certificate should be placed in the beginning<br/>of the file, followed by the immediate issuer certificate and so on.<br/>Although the root CA certificate is optional, it should be placed at the end of<br/>the file if it is to be added."
          },
          "keyfile": {
            "type": "string",
            "description": "PEM format private key file."
          },
          "verify": {
            "default": "verify_none",
            "type": "string",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "description": "Enable or disable peer verification."
          },
          "reuse_sessions": {
            "default": true,
            "type": "boolean",
            "description": "Enable TLS session reuse.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "depth": {
            "default": 10,
            "type": "integer",
            "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.<br/>So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
            "minimum": 0
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "String containing the user's password. Only used if the private key file is password-protected.",
            "example": ""
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "type": "array",
            "description": "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2', 'tlsv1.1']</code> here.",
            "items": {
              "type": "string"
            }
          },
          "ciphers": {
            "default": [],
            "type": "array",
            "description": "This config holds TLS cipher suite names separated by comma,<br/>or as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in which the<br/>client and server encrypts information over the network connection.<br/>Selecting a good cipher suite is critical for the<br/>application's data security, confidentiality and performance.<br/><br/>The names should be in OpenSSL string format (not RFC format).<br/>All default values and examples provided by EMQX config<br/>documentation are all in OpenSSL format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            }
          },
          "secure_renegotiate": {
            "default": true,
            "type": "boolean",
            "description": "Whether to reject TLS renegotiation attempts that are not compliant with [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt).<br/><br/>By default, `secure_renegotiate` is set to `true`, which forces secure renegotiation.<br/>If set to `false`, secure renegotiation will still be used, but will fall back to insecure renegotiation if the peer does not support [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt), which increases the risk of a MitM attack.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3."
          },
          "log_level": {
            "default": "notice",
            "type": "string",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "description": "The minimum level of logging allowed for SSL output.<br/><br/>The default is `notice`, set to a lower `debug` level for more detailed logging that can be used to investigate SSL handshake issues."
          },
          "hibernate_after": {
            "default": "5s",
            "type": "string",
            "description": "Specifies the amount of time that an SSL process will hibernate after being idle, thus reducing its memory footprint.<br/><br/>The hibernating process will be woken up when a new message arrives.<br/>Hibernating and waking up too often can cause CPU utilization to increase, as they both perform garbage collection on the process.",
            "example": "12m"
          },
          "partial_chain": {
            "type": "string",
            "enum": [
              true,
              false,
              "two_cacerts_from_cacertfile",
              "cacert_from_cacertfile"
            ],
            "description": "Enable or disable peer verification with partial_chain.<br/>When local verifies a peer certificate during the x509 path validation<br/>process, it constructs a certificate chain that starts with the peer<br/>certificate and ends with a trust anchor.<br/>By default, if it is set to `false`, the trust anchor is the<br/>Root CA, and the certificate chain must be complete.<br/>However, if the setting is set to `true` or `cacert_from_cacertfile`,<br/>the last certificate in `cacertfile` will be used as the trust anchor<br/>certificate (intermediate CA). This creates a partial chain<br/>in the path validation.<br/>Alternatively, if it is configured with `two_cacerts_from_cacertfile`,<br/>one of the last two certificates in `cacertfile` will be used as the<br/>trust anchor certificate, forming a partial chain. This option is<br/>particularly useful for intermediate CA certificate rotation.<br/>However, please note that it incurs some additional overhead, so it<br/>should only be used for certificate rotation purposes."
          },
          "verify_peer_ext_key_usage": {
            "type": "string",
            "description": "Verify extended key usage in peer's certificate<br/>For additional peer certificate validation, the value defined here must present in the<br/>'Extended Key Usage' of peer certificate defined in<br/>[rfc5280](https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.12).<br/><br/>Allowed values are<br/>- `clientAuth`<br/>- `serverAuth`<br/>- `codeSigning`<br/>- `emailProtection`<br/>- `timeStamping`<br/>- `ocspSigning`<br/>- raw OID, for example: \"OID:1.3.6.1.5.5.7.3.2\" means `id-pk 2` which is equivalent to `clientAuth`<br/><br/>Comma-separated string is also supported for validating more than one key usages.<br/><br/>For example, `\"serverAuth,OID:1.3.6.1.5.5.7.3.2\"`"
          },
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Enable TLS."
          },
          "server_name_indication": {
            "default": "auto",
            "description": "Server Name Indication (SNI) setting for TLS handshake.<br/><br/>- <code>auto</code>: Allow the client to automatically determine the appropriate SNI.<br/><br/>- <code>disable</code>: If you wish to prevent the client from sending the SNI.<br/><br/>- Other string values will be sent as-is.",
            "example": "auto",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "disable"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "pulsar.action_parameters": {
        "required": [
          "pulsar_topic"
        ],
        "properties": {
          "message": {
            "description": "Template to render a Pulsar message.",
            "$ref": "#/components/schemas/pulsar.producer_pulsar_message"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "Maximum wait time for receiving a receipt from Pulsar when publishing synchronously.",
            "example": "32s"
          },
          "pulsar_topic": {
            "type": "string",
            "description": "Pulsar topic name"
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "Maximum number of individual requests to batch in a Pulsar message.",
            "minimum": 1
          },
          "compression": {
            "default": "no_compression",
            "type": "string",
            "enum": [
              "no_compression",
              "snappy",
              "zlib"
            ],
            "description": "Compression method."
          },
          "send_buffer": {
            "default": "1MB",
            "type": "string",
            "description": "Fine tune the socket send buffer. The default value is tuned for high throughput.",
            "example": "32MB"
          },
          "retention_period": {
            "default": "infinity",
            "description": "The amount of time messages will be buffered while there is no connection to<br/> the Pulsar broker.  Longer times mean that more memory/disk will be used",
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "max_batch_bytes": {
            "default": "900KB",
            "type": "string",
            "description": "Maximum bytes to collect in a Pulsar message batch. Most of the Pulsar brokers<br/> default to a limit of 5 MB batch size. EMQX's default value is less than 5 MB in<br/> order to compensate Pulsar message encoding overheads (especially when each individual<br/> message is very small). When a single message is over the limit, it is still<br/> sent (as a single element batch).",
            "example": "32MB"
          },
          "strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "roundrobin",
              "key_dispatch"
            ],
            "description": "Partition strategy is to tell the producer how to dispatch messages to Pulsar partitions.<br/><br/><code>random</code>: Randomly pick a partition for each message.<br/><code>roundrobin</code>: Pick each available producer in turn for each message.<br/><code>key_dispatch</code>: Hash Pulsar message key of the first message in a batch<br/> to a partition number."
          },
          "buffer": {
            "description": "Configure producer message buffer.\"<br/>Tell Pulsar producer how to buffer messages when EMQX has more messages to\"<br/> send than Pulsar can keep up, or when Pulsar is down.",
            "$ref": "#/components/schemas/bridge_pulsar.producer_buffer"
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "hstreamdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/bridge_hstreamdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_timescale.get_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Configuration Parameters Specific to the PostgreSQL Action",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.put": {
        "required": [
          "stream",
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "direction": {
            "default": "egress",
            "type": "string",
            "enum": [
              "egress"
            ],
            "description": "The direction of this bridge, MUST be 'egress'"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to the HStreamDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "record_template": {
            "default": "${payload}",
            "type": "string",
            "description": "The HStream Record template to be forwarded to the HStreamDB. Placeholders supported.<br><br/>NOTE: When you use `raw record` template (which means the data is not a valid JSON), you should use `read` or `subscription` in HStream to get the data."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "url": {
            "default": "http://127.0.0.1:6570",
            "type": "string",
            "description": "HStreamDB Server URL. This URL will be used as the gRPC HTTP server address."
          },
          "stream": {
            "type": "string",
            "description": "HStreamDB Stream Name."
          },
          "partition_key": {
            "type": "string",
            "description": "HStreamDB Partition Key. Placeholders supported."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "grpc_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The timeout for HStreamDB gRPC requests.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "listeners.quic_not_required_bind": {
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "quic"
            ],
            "description": "Listener type"
          },
          "running": {
            "type": "boolean",
            "description": "Listener status"
          },
          "id": {
            "type": "string",
            "description": "Listener id"
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          },
          "bind": {
            "default": 14567,
            "type": "string",
            "description": "IP address and port for the listening socket.",
            "example": "127.0.0.1:80"
          },
          "ciphers": {
            "default": [
              "TLS_AES_256_GCM_SHA384",
              "TLS_AES_128_GCM_SHA256",
              "TLS_CHACHA20_POLY1305_SHA256"
            ],
            "type": "array",
            "description": "This config holds TLS cipher suite names separated by comma,<br/>or as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in which the<br/>client and server encrypts information over the network connection.<br/>Selecting a good cipher suite is critical for the<br/>application's data security, confidentiality and performance.<br/><br/>The names should be in OpenSSL string format (not RFC format).<br/>All default values and examples provided by EMQX config<br/>documentation are all in OpenSSL format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/><br/><br/>NOTE: QUIC listener supports only 'tlsv1.3' ciphers",
            "items": {
              "type": "string"
            }
          },
          "ssl_options": {
            "description": "TLS options for QUIC transport",
            "$ref": "#/components/schemas/emqx.listener_quic_ssl_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable listener."
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The size of the listener's receiving pool.",
            "minimum": 1
          },
          "max_connections": {
            "default": "infinity",
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message<br/>is delivered to the subscriber. The mountpoint is a way that users can use<br/>to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`, then the client actually subscribes to the topic<br/>`some_tenant/t`. Similarly, if another client B (connected to the same listener<br/>as the client A) sends a message to topic `t`, the message is routed<br/>to all the clients subscribed `some_tenant/t`, so client A will receive the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>: clientid<br/>  - <code>${username}</code>: username"
          },
          "zone": {
            "default": "default",
            "type": "string",
            "description": "The configuration zone to which the listener belongs.<br/>Clients connected to this listener will inherit zone-settings created under this zone name.<br/><br/>A zone can override the configs under below root names:<br/>- `mqtt`<br/>- `force_shutdown`<br/>- `force_gc`<br/>- `flapping_detect`<br/>- `durable_sessions`"
          },
          "enable_authn": {
            "default": true,
            "type": "string",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "description": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication<br/>process goes through the configured authentication chain.<br/>When set to <code>false</code>, any client (with or without username/password) is allowed to connect.<br/>When set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be<br/>denied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off<br/>anonymous clients early."
          },
          "max_conn_rate": {
            "default": "infinity",
            "type": "string",
            "description": "Used to limit the rate at which the current listener accepts connections.<br/><br/>Once the limit is reached, EMQX will pause fetching connections from the Accept queue, thereby delaying or rejecting new connections.<br/><br/>For example:<br/><br/>- `1000/s`: Only accepts 1000 connections per second.<br/>- `1000/10s`: Only accepts 1000 connections every 10 seconds.",
            "example": "1000/s"
          },
          "messages_rate": {
            "type": "string",
            "description": "Used to limit the number of messages a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>For example:<br/><br/>- `500/s`: Only 500 messages will be received per second, and the remaining messages will be delayed.<br/>- `500/10s`: Only 500 messages will be received every 10 seconds and the remaining messages will be delayed.",
            "example": "1000/s"
          },
          "bytes_rate": {
            "type": "string",
            "description": "Used to limit the number of bytes a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>The unit of the bytes could be: B, KB, MB, GB.<br/><br/>For example:<br/><br/>- `500KB/s`: Only 500 kilobytes per second will be received, and the remaining bytes will be delayed.<br/>- `500MB/10s`: Only 500 megabytes will be received every 10 seconds, and the remaining bytes will be delayed.",
            "example": "100MB/s"
          }
        },
        "type": "object"
      },
      "retainer.message": {
        "properties": {
          "payload": {
            "type": "string",
            "description": "Payload."
          },
          "msgid": {
            "type": "string",
            "description": "Message ID."
          },
          "topic": {
            "type": "string",
            "description": "Topic."
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "QoS.",
            "minimum": 0,
            "example": 0
          },
          "publish_at": {
            "type": "string",
            "description": "Message publish time, RFC 3339 format."
          },
          "from_clientid": {
            "type": "string",
            "description": "The clientid of publisher."
          },
          "from_username": {
            "type": "string",
            "description": "The username of publisher."
          }
        },
        "type": "object"
      },
      "emqx_gcp_device_api.gcp_device_info": {
        "required": [
          "config",
          "deviceid"
        ],
        "properties": {
          "deviceid": {
            "type": "string",
            "description": "Device identifier",
            "example": "c2-ec-x509"
          },
          "registry": {
            "default": "",
            "type": "string",
            "description": "Device registry identifier",
            "example": "my-registry"
          },
          "project": {
            "default": "",
            "type": "string",
            "description": "Cloud project identifier",
            "example": "iot-export"
          },
          "location": {
            "default": "",
            "type": "string",
            "description": "Cloud region",
            "example": "europe-west1"
          },
          "keys": {
            "default": [],
            "type": "array",
            "description": "Public keys associated to GCP device",
            "items": {
              "$ref": "#/components/schemas/emqx_gcp_device_api.key"
            }
          },
          "config": {
            "type": "string",
            "description": "Configuration",
            "example": "bXktY29uZmln"
          }
        },
        "type": "object"
      },
      "listeners.with_name_ws_required_bind": {
        "required": [
          "bind",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ws"
            ],
            "description": "Listener type"
          },
          "running": {
            "type": "boolean",
            "description": "Listener status"
          },
          "name": {
            "type": "string",
            "description": "Listener name"
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable listener."
          },
          "bind": {
            "default": 8083,
            "type": "string",
            "description": "IP address and port for the listening socket.",
            "example": "127.0.0.1:80"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The size of the listener's receiving pool.",
            "minimum": 1
          },
          "max_connections": {
            "default": "infinity",
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message<br/>is delivered to the subscriber. The mountpoint is a way that users can use<br/>to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`, then the client actually subscribes to the topic<br/>`some_tenant/t`. Similarly, if another client B (connected to the same listener<br/>as the client A) sends a message to topic `t`, the message is routed<br/>to all the clients subscribed `some_tenant/t`, so client A will receive the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>: clientid<br/>  - <code>${username}</code>: username"
          },
          "zone": {
            "default": "default",
            "type": "string",
            "description": "The configuration zone to which the listener belongs.<br/>Clients connected to this listener will inherit zone-settings created under this zone name.<br/><br/>A zone can override the configs under below root names:<br/>- `mqtt`<br/>- `force_shutdown`<br/>- `force_gc`<br/>- `flapping_detect`<br/>- `durable_sessions`"
          },
          "enable_authn": {
            "default": true,
            "type": "string",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "description": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication<br/>process goes through the configured authentication chain.<br/>When set to <code>false</code>, any client (with or without username/password) is allowed to connect.<br/>When set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be<br/>denied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off<br/>anonymous clients early."
          },
          "max_conn_rate": {
            "default": "infinity",
            "type": "string",
            "description": "Used to limit the rate at which the current listener accepts connections.<br/><br/>Once the limit is reached, EMQX will pause fetching connections from the Accept queue, thereby delaying or rejecting new connections.<br/><br/>For example:<br/><br/>- `1000/s`: Only accepts 1000 connections per second.<br/>- `1000/10s`: Only accepts 1000 connections every 10 seconds.",
            "example": "1000/s"
          },
          "messages_rate": {
            "type": "string",
            "description": "Used to limit the number of messages a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>For example:<br/><br/>- `500/s`: Only 500 messages will be received per second, and the remaining messages will be delayed.<br/>- `500/10s`: Only 500 messages will be received every 10 seconds and the remaining messages will be delayed.",
            "example": "1000/s"
          },
          "bytes_rate": {
            "type": "string",
            "description": "Used to limit the number of bytes a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>The unit of the bytes could be: B, KB, MB, GB.<br/><br/>For example:<br/><br/>- `500KB/s`: Only 500 kilobytes per second will be received, and the remaining bytes will be delayed.<br/>- `500MB/10s`: Only 500 megabytes will be received every 10 seconds, and the remaining bytes will be delayed.",
            "example": "100MB/s"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses. The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP, this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/><br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "example": "12m"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/emqx.tcp_opts"
          },
          "websocket": {
            "$ref": "#/components/schemas/emqx.ws_opts"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "maximum": 500,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "redis.redis_single_connector": {
        "required": [
          "server"
        ],
        "properties": {
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "Single mode. Must be set to 'single' when Redis server is running in single mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis database ID.",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.key_value_pair": {
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Key"
          },
          "value": {
            "type": "string",
            "description": "Value"
          }
        },
        "type": "object"
      },
      "authz.redis_sentinel": {
        "required": [
          "cmd",
          "sentinel",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "redis"
            ],
            "description": "Backend type."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this ACL provider"
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "sentinel",
            "type": "string",
            "enum": [
              "sentinel"
            ],
            "description": "Sentinel mode. Must be set to 'sentinel' when Redis server is running in sentinel mode."
          },
          "sentinel": {
            "type": "string",
            "description": "The cluster name in Redis sentinel mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis database ID.",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "cmd": {
            "type": "string",
            "description": "Database query used to retrieve authorization data.",
            "example": "HGETALL mqtt_authz"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.get_producer": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "endpoint",
          "name",
          "partition_key",
          "stream_name",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "kinesis_producer"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Action name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_kinesis.creation_opts"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "Access Key ID for connecting to Amazon Kinesis."
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "AWS Secret Access Key for connecting to Amazon Kinesis.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "endpoint": {
            "type": "string",
            "description": "The url of Amazon Kinesis endpoint.",
            "example": "https://kinesis.us-east-1.amazonaws.com"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "payload_template": {
            "default": "${.}",
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, will send all the available context in JSON format."
          },
          "stream_name": {
            "type": "string",
            "description": "The Amazon Kinesis Stream to publish messages to."
          },
          "partition_key": {
            "type": "string",
            "description": "The Amazon Kinesis Partition Key associated to published message. Placeholders in format of ${var} are supported."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Amazon Kinesis. All MQTT `PUBLISH` messages with the topic<br/>matching the `local_topic` will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also `local_topic` is<br/>configured, then both the data got from the rule and the MQTT messages that match `local_topic`<br/>will be forwarded."
          }
        },
        "type": "object"
      },
      "bridge_http.v1_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only."
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_s3.s3_aggregated_container_csv": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "csv"
            ],
            "description": "Records (events) will be aggregated and uploaded as a CSV file."
          },
          "column_order": {
            "default": [],
            "type": "array",
            "description": "Event fields that will be ordered first as columns in the resulting CSV file.<br/><br/>Regardless of this setting, resulting CSV will contain all the fields of aggregated events, but all the columns not explicitly mentioned here will be ordered after the ones listed here in the lexicographical order.",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "bridge_influxdb.action_parameters": {
        "required": [
          "write_syntax"
        ],
        "properties": {
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>Please note that a placeholder for an integer value must be annotated with a suffix `i`. For example `${payload.int_value}i`."
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "InfluxDB time precision."
          }
        },
        "type": "object"
      },
      "exhook.server_config": {
        "required": [
          "name",
          "url"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the exhook server",
            "example": "default"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable this Exhook server"
          },
          "url": {
            "type": "string",
            "description": "URL of the gRPC server",
            "example": "http://127.0.0.1:9000"
          },
          "request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "The timeout of request gRPC server",
            "example": "12m"
          },
          "failed_action": {
            "default": "deny",
            "type": "string",
            "enum": [
              "deny",
              "ignore"
            ],
            "description": "The value that is returned when the request to the gRPC server fails for any reason"
          },
          "ssl": {
            "$ref": "#/components/schemas/exhook.ssl_conf"
          },
          "socket_options": {
            "default": {
              "keepalive": true,
              "nodelay": true
            },
            "$ref": "#/components/schemas/exhook.socket_options"
          },
          "auto_reconnect": {
            "default": "60s",
            "description": "Whether to automatically reconnect (initialize) the gRPC server.<br/>When gRPC is not available, Exhook tries to request the gRPC service at that interval and reinitialize the list of mounted hooks.",
            "oneOf": [
              {
                "type": "string",
                "example": "12m"
              },
              {
                "type": "string",
                "enum": [
                  false
                ]
              }
            ]
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The process pool size for gRPC client",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "bridge_dynamo.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.get_sharded": {
        "required": [
          "database",
          "mongo_type",
          "name",
          "resource_opts",
          "servers",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "mongo_type": {
            "default": "sharded",
            "type": "string",
            "enum": [
              "sharded"
            ],
            "description": "Sharded cluster. Must be set to 'sharded' when MongoDB server is running in 'sharded' mode."
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this MongoDB Action"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "The collection where data will be stored into"
          },
          "payload_template": {
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc."
          },
          "resource_opts": {
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "mongodb_sharded"
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.post_single": {
        "required": [
          "database",
          "mongo_type",
          "name",
          "resource_opts",
          "server",
          "type"
        ],
        "properties": {
          "mongo_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "Standalone instance. Must be set to 'single' when MongoDB server is running in standalone mode."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this MongoDB Action"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "The collection where data will be stored into"
          },
          "payload_template": {
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc."
          },
          "resource_opts": {
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "mongodb_single"
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "listeners.with_name_ssl_required_bind": {
        "required": [
          "bind",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ssl"
            ],
            "description": "Listener type"
          },
          "running": {
            "type": "boolean",
            "description": "Listener status"
          },
          "name": {
            "type": "string",
            "description": "Listener name"
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable listener."
          },
          "bind": {
            "default": 8883,
            "type": "string",
            "description": "IP address and port for the listening socket.",
            "example": "127.0.0.1:80"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The size of the listener's receiving pool.",
            "minimum": 1
          },
          "max_connections": {
            "default": "infinity",
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message<br/>is delivered to the subscriber. The mountpoint is a way that users can use<br/>to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`, then the client actually subscribes to the topic<br/>`some_tenant/t`. Similarly, if another client B (connected to the same listener<br/>as the client A) sends a message to topic `t`, the message is routed<br/>to all the clients subscribed `some_tenant/t`, so client A will receive the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>: clientid<br/>  - <code>${username}</code>: username"
          },
          "zone": {
            "default": "default",
            "type": "string",
            "description": "The configuration zone to which the listener belongs.<br/>Clients connected to this listener will inherit zone-settings created under this zone name.<br/><br/>A zone can override the configs under below root names:<br/>- `mqtt`<br/>- `force_shutdown`<br/>- `force_gc`<br/>- `flapping_detect`<br/>- `durable_sessions`"
          },
          "enable_authn": {
            "default": true,
            "type": "string",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "description": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication<br/>process goes through the configured authentication chain.<br/>When set to <code>false</code>, any client (with or without username/password) is allowed to connect.<br/>When set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be<br/>denied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off<br/>anonymous clients early."
          },
          "max_conn_rate": {
            "default": "infinity",
            "type": "string",
            "description": "Used to limit the rate at which the current listener accepts connections.<br/><br/>Once the limit is reached, EMQX will pause fetching connections from the Accept queue, thereby delaying or rejecting new connections.<br/><br/>For example:<br/><br/>- `1000/s`: Only accepts 1000 connections per second.<br/>- `1000/10s`: Only accepts 1000 connections every 10 seconds.",
            "example": "1000/s"
          },
          "messages_rate": {
            "type": "string",
            "description": "Used to limit the number of messages a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>For example:<br/><br/>- `500/s`: Only 500 messages will be received per second, and the remaining messages will be delayed.<br/>- `500/10s`: Only 500 messages will be received every 10 seconds and the remaining messages will be delayed.",
            "example": "1000/s"
          },
          "bytes_rate": {
            "type": "string",
            "description": "Used to limit the number of bytes a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>The unit of the bytes could be: B, KB, MB, GB.<br/><br/>For example:<br/><br/>- `500KB/s`: Only 500 kilobytes per second will be received, and the remaining bytes will be delayed.<br/>- `500MB/10s`: Only 500 megabytes will be received every 10 seconds, and the remaining bytes will be delayed.",
            "example": "100MB/s"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses. The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP, this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/><br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "example": "12m"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/emqx.tcp_opts"
          },
          "ssl_options": {
            "$ref": "#/components/schemas/emqx.listener_ssl_opts"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.post_producer": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "endpoint",
          "name",
          "partition_key",
          "stream_name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kinesis_producer"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Action name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_kinesis.creation_opts"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "Access Key ID for connecting to Amazon Kinesis."
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "AWS Secret Access Key for connecting to Amazon Kinesis.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "endpoint": {
            "type": "string",
            "description": "The url of Amazon Kinesis endpoint.",
            "example": "https://kinesis.us-east-1.amazonaws.com"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "payload_template": {
            "default": "${.}",
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, will send all the available context in JSON format."
          },
          "stream_name": {
            "type": "string",
            "description": "The Amazon Kinesis Stream to publish messages to."
          },
          "partition_key": {
            "type": "string",
            "description": "The Amazon Kinesis Partition Key associated to published message. Placeholders in format of ${var} are supported."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Amazon Kinesis. All MQTT `PUBLISH` messages with the topic<br/>matching the `local_topic` will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also `local_topic` is<br/>configured, then both the data got from the rule and the MQTT messages that match `local_topic`<br/>will be forwarded."
          }
        },
        "type": "object"
      },
      "tdengine_connector.get": {
        "required": [
          "name",
          "password",
          "server",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "tdengine"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The TDengine default port 6041 is used if `[:Port]` is not specified."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/tdengine_connector.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "gateway.clientinfo_override": {
        "properties": {
          "username": {
            "type": "string",
            "description": "Template for overriding username."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Template for overriding password."
          },
          "clientid": {
            "type": "string",
            "description": "Template for overriding clientid."
          }
        },
        "type": "object"
      },
      "file_transfer.local_storage_segments": {
        "properties": {
          "root": {
            "type": "string",
            "description": "File system path to keep uploaded fragments and temporary data."
          },
          "gc": {
            "description": "Garbage collection settings for the intermediate and temporary files in the local file system.",
            "$ref": "#/components/schemas/file_transfer.local_storage_segments_gc"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.put": {
        "required": [
          "exchange",
          "password",
          "routing_key",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to RabbitMQ. All MQTT 'PUBLISH' messages with the topic matching the local_topic will be forwarded.<br/>    NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is configured, then both the data got from the rule and the MQTT messages that match local_topic will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_rabbitmq.creation_opts"
          },
          "server": {
            "default": "localhost",
            "type": "string",
            "description": "The RabbitMQ server address that you want to connect to (for example, localhost)."
          },
          "port": {
            "default": 5672,
            "maximum": 65535,
            "type": "integer",
            "description": "The RabbitMQ server address that you want to connect to (for example, localhost).",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username used to authenticate with the RabbitMQ server."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The size of the connection pool.",
            "minimum": 1
          },
          "timeout": {
            "default": "5s",
            "type": "string",
            "description": "The timeout for waiting on the connection to be established.",
            "example": "32s"
          },
          "virtual_host": {
            "default": "/",
            "type": "string",
            "description": "The virtual host to use when connecting to the RabbitMQ server."
          },
          "heartbeat": {
            "default": "30s",
            "type": "string",
            "description": "The interval for sending heartbeat messages to the RabbitMQ server.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "wait_for_publish_confirmations": {
            "default": true,
            "type": "boolean",
            "description": "A boolean value that indicates whether to wait for RabbitMQ to confirm message publication when using publisher confirms."
          },
          "publish_confirmation_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The timeout for waiting on the connection to be established.",
            "example": "32s"
          },
          "exchange": {
            "type": "string",
            "description": "The name of the RabbitMQ exchange where the messages will be sent."
          },
          "routing_key": {
            "type": "string",
            "description": "The routing key used to route messages to the correct queue in the RabbitMQ exchange."
          },
          "delivery_mode": {
            "default": "non_persistent",
            "type": "string",
            "enum": [
              "non_persistent",
              "persistent"
            ],
            "description": "The delivery mode for messages published to RabbitMQ. Delivery mode non_persistent (1) is suitable for messages that don't require persistence across RabbitMQ restarts, whereas delivery mode persistent (2) is designed for messages that must survive RabbitMQ restarts."
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "The template for formatting the payload of the message before sending it to RabbitMQ. Template placeholders, such as ${field1.sub_field}, will be substituted with the respective field's value. When left empty, the entire input message will be used as the payload, formatted as a JSON text. This behavior is equivalent to specifying ${.} as the payload template."
          }
        },
        "type": "object"
      },
      "bridge_cassa.get_connector": {
        "required": [
          "keyspace",
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cassandra"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "servers": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port][,Host2:Port]`.<br/><br/>The Cassandra default port 9042 is used if `[:Port]` is not specified."
          },
          "keyspace": {
            "type": "string",
            "description": "Keyspace name to connect to."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_cassa.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "authn.scram": {
        "required": [
          "backend",
          "mechanism"
        ],
        "properties": {
          "mechanism": {
            "type": "string",
            "enum": [
              "scram"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "built_in_database"
            ],
            "description": "Backend type."
          },
          "algorithm": {
            "default": "sha256",
            "type": "string",
            "enum": [
              "sha256",
              "sha512"
            ],
            "description": "Hashing algorithm."
          },
          "iteration_count": {
            "default": 4096,
            "type": "integer",
            "description": "Iteration count.",
            "minimum": 0
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_ds.db_shard": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Shard ID",
            "example": "1"
          },
          "replicas": {
            "type": "array",
            "description": "List of sites containing replicas of the storage",
            "items": {
              "$ref": "#/components/schemas/emqx_mgmt_api_ds.db_site"
            }
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_message_transformation_failed": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "message_transformation_failed"
            ],
            "description": "Event Type"
          },
          "transformation": {
            "type": "string",
            "description": "Transformation"
          },
          "clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "payload": {
            "type": "string",
            "description": "The Message Payload"
          },
          "peerhost": {
            "type": "string",
            "description": "The IP Address of the Peer Client"
          },
          "topic": {
            "type": "string",
            "description": "Message Topic"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "The Time that this Message is Received"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "The Message QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "exhook.socket_options": {
        "properties": {
          "keepalive": {
            "default": true,
            "type": "boolean",
            "description": "Enables/disables periodic transmission on a connected socket when no other data is exchanged.<br/>If the other end does not respond, the connection is considered broken and an error message is sent to the controlling process."
          },
          "nodelay": {
            "default": true,
            "type": "boolean",
            "description": "If true, option TCP_NODELAY is turned on for the socket,<br/>which means that also small amounts of data are sent immediately"
          },
          "recbuf": {
            "type": "string",
            "description": "The minimum size of receive buffer to use for the socket",
            "example": "64KB"
          },
          "sndbuf": {
            "type": "string",
            "description": "The minimum size of send buffer to use for the socket",
            "example": "16KB"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_clients.keepalive": {
        "properties": {
          "interval": {
            "maximum": 65535,
            "type": "integer",
            "description": "Keepalive time, with the unit of second",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "listeners.status": {
        "required": [
          "running"
        ],
        "properties": {
          "running": {
            "description": "Listener running status",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "string",
                "enum": [
                  "inconsistent"
                ]
              }
            ]
          },
          "max_connections": {
            "description": "Max connections",
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "bridge_cassa.put": {
        "required": [
          "keyspace",
          "servers"
        ],
        "properties": {
          "cql": {
            "default": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "CQL Template"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Cassandra. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "servers": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port][,Host2:Port]`.<br/><br/>The Cassandra default port 9042 is used if `[:Port]` is not specified."
          },
          "keyspace": {
            "type": "string",
            "description": "Keyspace name to connect to."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_matrix.post_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "matrix"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "Disables the usage of prepared statements in the connections.<br/>Some endpoints, like PGBouncer or Supabase in Transaction mode, do not<br/>support session features such as prepared statements.  For such connections,<br/>this option should be enabled."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.post_connector": {
        "required": [
          "dbname",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "greptimedb"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "default": "127.0.0.1:4001",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The GreptimeDB default port 8086 is used if `[:Port]` is not specified."
          },
          "dbname": {
            "type": "string",
            "description": "GreptimeDB database."
          },
          "username": {
            "type": "string",
            "description": "GreptimeDB username."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "GreptimeDB password.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_greptimedb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "listeners.ws_not_required_bind": {
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ws"
            ],
            "description": "Listener type"
          },
          "running": {
            "type": "boolean",
            "description": "Listener status"
          },
          "id": {
            "type": "string",
            "description": "Listener id"
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          },
          "bind": {
            "default": 8083,
            "type": "string",
            "description": "IP address and port for the listening socket.",
            "example": "127.0.0.1:80"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable listener."
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The size of the listener's receiving pool.",
            "minimum": 1
          },
          "max_connections": {
            "default": "infinity",
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message<br/>is delivered to the subscriber. The mountpoint is a way that users can use<br/>to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`, then the client actually subscribes to the topic<br/>`some_tenant/t`. Similarly, if another client B (connected to the same listener<br/>as the client A) sends a message to topic `t`, the message is routed<br/>to all the clients subscribed `some_tenant/t`, so client A will receive the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>: clientid<br/>  - <code>${username}</code>: username"
          },
          "zone": {
            "default": "default",
            "type": "string",
            "description": "The configuration zone to which the listener belongs.<br/>Clients connected to this listener will inherit zone-settings created under this zone name.<br/><br/>A zone can override the configs under below root names:<br/>- `mqtt`<br/>- `force_shutdown`<br/>- `force_gc`<br/>- `flapping_detect`<br/>- `durable_sessions`"
          },
          "enable_authn": {
            "default": true,
            "type": "string",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "description": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication<br/>process goes through the configured authentication chain.<br/>When set to <code>false</code>, any client (with or without username/password) is allowed to connect.<br/>When set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be<br/>denied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off<br/>anonymous clients early."
          },
          "max_conn_rate": {
            "default": "infinity",
            "type": "string",
            "description": "Used to limit the rate at which the current listener accepts connections.<br/><br/>Once the limit is reached, EMQX will pause fetching connections from the Accept queue, thereby delaying or rejecting new connections.<br/><br/>For example:<br/><br/>- `1000/s`: Only accepts 1000 connections per second.<br/>- `1000/10s`: Only accepts 1000 connections every 10 seconds.",
            "example": "1000/s"
          },
          "messages_rate": {
            "type": "string",
            "description": "Used to limit the number of messages a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>For example:<br/><br/>- `500/s`: Only 500 messages will be received per second, and the remaining messages will be delayed.<br/>- `500/10s`: Only 500 messages will be received every 10 seconds and the remaining messages will be delayed.",
            "example": "1000/s"
          },
          "bytes_rate": {
            "type": "string",
            "description": "Used to limit the number of bytes a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>The unit of the bytes could be: B, KB, MB, GB.<br/><br/>For example:<br/><br/>- `500KB/s`: Only 500 kilobytes per second will be received, and the remaining bytes will be delayed.<br/>- `500MB/10s`: Only 500 megabytes will be received every 10 seconds, and the remaining bytes will be delayed.",
            "example": "100MB/s"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses. The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP, this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/><br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "example": "12m"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/emqx.tcp_opts"
          },
          "websocket": {
            "$ref": "#/components/schemas/emqx.ws_opts"
          }
        },
        "type": "object"
      },
      "authn.node_resource_metrics": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name.",
            "example": "emqx@127.0.0.1"
          },
          "metrics": {
            "description": "The metrics of the resource.",
            "$ref": "#/components/schemas/authn.resource_metrics"
          }
        },
        "type": "object"
      },
      "dashboard.saml": {
        "required": [
          "backend"
        ],
        "properties": {
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Whether to enable this backend."
          },
          "backend": {
            "type": "string",
            "enum": [
              "saml"
            ],
            "description": "Backend type."
          },
          "dashboard_addr": {
            "default": "https://127.0.0.1:18083",
            "type": "string",
            "description": "The address of the EMQX Dashboard."
          },
          "idp_metadata_url": {
            "default": "https://idp.example.com",
            "type": "string",
            "description": "The URL of the IdP metadata."
          },
          "sp_sign_request": {
            "default": false,
            "type": "boolean",
            "description": "Whether to sign the SAML request."
          },
          "sp_public_key": {
            "default": "Pub Key",
            "type": "string",
            "description": "The public key of the SP."
          },
          "sp_private_key": {
            "type": "string",
            "format": "password",
            "description": "The private key of the SP."
          }
        },
        "type": "object"
      },
      "confluent.producer_kafka_opts": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Kafka topic name.  Supports templates (e.g.: `t-${payload.t}`)."
          },
          "message": {
            "description": "Template for rendering a message.",
            "$ref": "#/components/schemas/confluent.kafka_message"
          },
          "max_linger_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum duration for a per-partition producer to wait for messages in order to collect a batch to buffer.<br/>The default value `0` means no wait. For non-memory buffer mode, it's advised to configure at least `5ms` for less IOPS.",
            "example": "32s"
          },
          "max_linger_bytes": {
            "default": "10MB",
            "type": "string",
            "description": "Maximum number of bytes for a per-partition producer to wait for messages in order to collect a batch to buffer.",
            "example": "32MB"
          },
          "max_batch_bytes": {
            "default": "896KB",
            "type": "string",
            "description": "Maximum bytes to collect in a Confluent message batch. Most of the Kafka brokers default to a limit of 1 MB batch size. EMQX's default value is less than 1 MB in order to compensate Kafka message encoding overheads (especially when each individual message is very small). When a single message is over the limit, it is still sent (as a single element batch).",
            "example": "32MB"
          },
          "compression": {
            "default": "no_compression",
            "type": "string",
            "enum": [
              "no_compression",
              "snappy",
              "gzip"
            ],
            "description": "Specify the method of compression."
          },
          "partition_strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "key_dispatch"
            ],
            "description": "Partition strategy is to tell the producer how to dispatch messages to partitions.<br/><br/><code>random</code>: Randomly pick a partition for each message.<br/><code>key_dispatch</code>: Assigns messages to partitions based on a hash of the message key,<br/>ensuring consistent partition for messages with the same key."
          },
          "required_acks": {
            "default": "all_isr",
            "type": "string",
            "enum": [
              "all_isr",
              "leader_only",
              "none"
            ],
            "description": "The acknowledgement criteria for the partition leader. It determines the level of confirmation required from partition replicas before sending an acknowledgement back to the producer.<br/><br/><code>all_isr</code>: Require all in-sync replicas to acknowledge.<br/><code>leader_only</code>: Require only the partition-leader's acknowledgement.<br/><code>none</code>: No need for Kafka to acknowledge at all."
          },
          "kafka_headers": {
            "type": "string",
            "description": "Provide a placeholder for message headers<br/><br/>e.g. <code>${pub_props}</code><br/><br/>Note that the value of the placeholder must be either an object:<br/><code>{\"foo\": \"bar\"}</code><br/>or an array of key-value pairs:<br/><code>[{\"key\": \"foo\", \"value\": \"bar\"}]</code>"
          },
          "kafka_ext_headers": {
            "type": "array",
            "description": "Please provide more key-value pairs for Confluent headers<br/><br/>The key-value pairs here will be combined with the<br/>value of <code>kafka_headers</code> field before sending to Confluent.",
            "items": {
              "$ref": "#/components/schemas/bridge_kafka.producer_kafka_ext_headers"
            }
          },
          "kafka_header_value_encode_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "json"
            ],
            "description": "The encoding mode for headers.<br/><br/> - `none`: Add only strings are added as header values<br/> - `json`: Encode header values as JSON string"
          },
          "partition_count_refresh_interval": {
            "default": "60s",
            "type": "string",
            "description": "The time interval for Confluent producer to discover increased number of partitions.<br/>After the number of partitions is increased in Confluent, EMQX will start taking the<br/>discovered partitions into account when dispatching messages per <code>partition_strategy</code>.",
            "example": "1h"
          },
          "partitions_limit": {
            "default": "all_partitions",
            "description": "Limit the number of partitions to produce data for the given topic.<br/>The special value `all_partitions` is to utilize all partitions for the topic.<br/>Setting this to a value which is greater than the total number of partitions in has no effect.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "all_partitions"
                ]
              }
            ]
          },
          "max_inflight": {
            "default": 10,
            "type": "integer",
            "description": "The maximum number of message batches that the producer can send to each partition before it must wait for an acknowledgement.<br/>Setting a higher number can enhance throughput. However, value above 1 may lead to potential message reordering risks.",
            "minimum": 1
          },
          "buffer": {
            "description": "Configure producer message buffer.<br/><br/>Tell Confluent producer how to buffer messages when EMQX has more messages to send than Confluent can keep up, or when Confluent is down.",
            "$ref": "#/components/schemas/bridge_kafka.producer_buffer"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "async",
              "sync"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "sync_query_timeout": {
            "default": "5s",
            "type": "string",
            "description": "This parameter defines the timeout limit for synchronous queries. It applies only when the action query mode is configured to 'sync'.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_oracle.post": {
        "required": [
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "oracle"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
            "type": "string",
            "format": "sql",
            "description": "SQL Template. The template string can contain placeholders for message metadata and payload field. The placeholders are inserted without any checking and special formatting, so it is important to ensure that the inserted values are formatted and escaped correctly."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Oracle Database. All MQTT 'PUBLISH' messages with the topic matching the local_topic will be forwarded.<br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is configured, then both the data got from the rule and the MQTT messages that match local_topic will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Oracle Database default port 1521 is used if `[:Port]` is not specified."
          },
          "sid": {
            "type": "string",
            "description": "Sid for Oracle Database."
          },
          "service_name": {
            "type": "string",
            "description": "Service Name for Oracle Database."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "emqx_authn_api.request_user_update": {
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "type": "string"
          },
          "is_superuser": {
            "default": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "The action config defines how this bridge send messages to the remote RabbitMQ broker",
            "$ref": "#/components/schemas/bridge_rabbitmq.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_rabbitmq.action_resource_opts"
          }
        },
        "type": "object"
      },
      "confluent.get_connector": {
        "required": [
          "authentication",
          "bootstrap_hosts",
          "name",
          "ssl",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "confluent_producer"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Confluent Kafka <code>host[:port]</code> namespace endpoints to bootstrap the client.  Default port number is 9092."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Confluent Kafka broker and topic metadata. Setting too small value may add extra load on Confluent.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching metadata from Confluent.",
            "example": "32s"
          },
          "authentication": {
            "default": {},
            "description": "Authentication configs.",
            "$ref": "#/components/schemas/confluent.auth_username_password"
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "default": {
              "enable": true
            },
            "$ref": "#/components/schemas/confluent.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "iotdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "IoTDB action parameters",
            "$ref": "#/components/schemas/bridge_iotdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_iotdb.action_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_clients.subscription": {
        "properties": {
          "topic": {
            "type": "string",
            "description": "Topic Filter/Name"
          },
          "qos": {
            "type": "integer",
            "description": "QoS level, enum: 0, 1, 2"
          },
          "nl": {
            "type": "integer",
            "description": "No Local option, enum: 0, 1"
          },
          "rap": {
            "type": "integer",
            "description": "Retain as Published option, enum: 0, 1"
          },
          "rh": {
            "type": "integer",
            "description": "Retain Handling option, enum: 0, 1, 2"
          },
          "sub_props": {
            "description": "Subscription properties",
            "$ref": "#/components/schemas/emqx_gateway_api_clients.extra_sub_props"
          }
        },
        "type": "object"
      },
      "authn.jwt_jwks": {
        "required": [
          "endpoint",
          "mechanism",
          "use_jwks"
        ],
        "properties": {
          "use_jwks": {
            "type": "string",
            "enum": [
              true
            ],
            "description": "Whether to use JWKS."
          },
          "endpoint": {
            "type": "string",
            "description": "JWKS endpoint, it's a read-only endpoint that returns the server's public key set in the JWKS format."
          },
          "headers": {
            "default": {
              "Accept": "application/json"
            },
            "type": "object",
            "description": "List of HTTP headers to send with the JWKS request.",
            "example": {}
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "refresh_interval": {
            "default": 300,
            "type": "integer",
            "description": "JWKS refresh interval."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL options.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "mechanism": {
            "type": "string",
            "enum": [
              "jwt"
            ],
            "description": "Authentication mechanism."
          },
          "acl_claim_name": {
            "default": "acl",
            "type": "string",
            "description": "The JWT claim designated for accessing ACL (Access Control List) rules can be specified,<br/>such as using the `acl` claim. A typical decoded JWT with this claim might appear as:<br/>`{\"username\": \"user1\", \"acl\": ...}`.<br/><br/>Supported ACL Rule Formats:<br/><br/>- Object Format:<br/>  Utilizes action types pub (publish), sub (subscribe), or all (both publish and subscribe).<br/>  The value is a list of topic filters.<br/>  Example: `{\"pub\": [\"topic1\"], \"sub\": [], \"all\": [\"${username}/#\"]}`.<br/>  This example signifies that the token owner can publish to topic1 and perform both publish and subscribe<br/>  actions on topics starting with their username.<br/>  Note: In this format, if no topic matches, the action is denied, and the authorization process terminates.<br/><br/>- Array Format (resembles File-Based ACL Rules):<br/>  Example: `[{\"permission\": \"allow\", \"action\": \"all\", \"topic\": \"${username}/#\"}]`.<br/>  Additionally, the `pub` or `publish` action rules can be extended with `qos` and `retain` field,<br/>  and `sub` or `subscribe` action rules can be extended with a `qos` field.<br/>  Note: Here, if no rule matches, the action is not immediately denied.<br/>  The process continues to other configured authorization sources,<br/>  and ultimately falls back to the default permission in config `authorization.no_match`.<br/><br/>The ACL claim utilizes MQTT topic wildcard matching rules for publishing or subscribing.<br/>A special syntax for the 'subscribe' action allows the use of `eq` for an exact match.<br/>For instance, `eq t/#` permits or denies subscription to `t/#`, but not to `t/1`."
          },
          "verify_claims": {
            "default": {},
            "type": "object",
            "description": "A list of custom claims to validate. The allowed formats are the following:<br/>A map where claim names are map keys and expected values are map values:<br/> <code>{ claim_name = \"${username}\", ...}</code>.<br/><br/>A list of maps with <code>name</code> (claim name) and <code>value</code> (expected claim value) keys:<br/> <code>[{name = \"claim_name\", value = \"${username}\"}, ...]</code>.<br/><br/>Values can use the following placeholders:<br/>- <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting<br/>- <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting<br/><br/>Authentication will verify that the value of claims in the JWT (taken from the Password field) matches what is required in <code>verify_claims</code>.",
            "example": {}
          },
          "disconnect_after_expire": {
            "default": true,
            "type": "boolean",
            "description": "Disconnect the client after the token expires."
          },
          "from": {
            "default": "password",
            "type": "string",
            "enum": [
              "username",
              "password"
            ],
            "description": "Field to take JWT from."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          }
        },
        "type": "object"
      },
      "dashboard.login": {
        "required": [
          "backend"
        ],
        "properties": {
          "backend": {
            "type": "string",
            "enum": [
              "saml"
            ],
            "description": "Backend type."
          }
        },
        "type": "object"
      },
      "bridge_kafka.post_consumer": {
        "required": [
          "bootstrap_hosts",
          "name",
          "topic_mapping",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka",
              "kafka_producer",
              "kafka_consumer"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Kafka <code>host:port</code> endpoints to bootstrap the client."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching topic metadata.",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "kafka": {
            "description": "Kafka consumer configs.",
            "$ref": "#/components/schemas/bridge_kafka.consumer_kafka_opts"
          },
          "topic_mapping": {
            "type": "array",
            "description": "Defines the mapping between Kafka topics and MQTT topics. Must contain at least one item.",
            "items": {
              "$ref": "#/components/schemas/bridge_kafka.consumer_topic_mapping"
            }
          },
          "key_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "Defines how the key from the Kafka message is encoded before being forwarded via MQTT.<br/><code>none</code> Uses the key from the Kafka message unchanged.  Note: in this case, the key must be a valid UTF-8 string.<br/><code>base64</code> Uses base-64 encoding on the received key."
          },
          "value_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "Defines how the value from the Kafka message is encoded before being forwarded via MQTT.<br/><code>none</code> Uses the value from the Kafka message unchanged.  Note: in this case, the value must be a valid UTF-8 string.<br/><code>base64</code> Uses base-64 encoding on the received value."
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.ssl_listener": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Listener ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "ssl"
            ],
            "description": "Listener Type"
          },
          "name": {
            "type": "string",
            "description": "Listener Name"
          },
          "running": {
            "type": "boolean",
            "description": "Listener Running status"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "Size of the acceptor pool."
          },
          "tcp_options": {
            "description": "Setting the TCP socket options.",
            "$ref": "#/components/schemas/emqx.tcp_opts"
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP,<br/>this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "Timeout for proxy protocol.<br/>EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
            "example": "12m"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable the listener."
          },
          "bind": {
            "type": "string",
            "description": "The IP address and port that the listener will bind.",
            "example": "127.0.0.1:80"
          },
          "max_connections": {
            "default": 1024,
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "integer",
                "minimum": 1
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "type": "integer",
            "description": "Maximum connections per second."
          },
          "enable_authn": {
            "default": true,
            "type": "boolean",
            "description": "Set <code>true</code> (default) to enable client authentication on this listener.<br/>When set to <code>false</code> clients will be allowed to connect without authentication."
          },
          "mountpoint": {
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "access_rules": {
            "default": [],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses.<br/>The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "ssl_options": {
            "description": "SSL Socket options.",
            "$ref": "#/components/schemas/emqx.listener_ssl_opts"
          }
        },
        "type": "object"
      },
      "schema_registry.get_protobuf": {
        "required": [
          "name",
          "source",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for the schema that will serve as its identifier."
          },
          "type": {
            "type": "string",
            "enum": [
              "protobuf"
            ],
            "description": "Must be `protobuf` for protobuf schema."
          },
          "source": {
            "type": "string",
            "description": "Source text for the schema."
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "A description for this schema."
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.gbt32960": {
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "gbt32960"
            ],
            "description": "Gateway Name"
          },
          "mountpoint": {
            "default": "gbt32960/${clientid}/",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "retry_interval": {
            "default": "8s",
            "type": "string",
            "description": "Re-send time interval",
            "example": "32s"
          },
          "max_retry_times": {
            "default": 3,
            "type": "integer",
            "description": "Re-send max times",
            "minimum": 0
          },
          "message_queue_len": {
            "default": 10,
            "type": "integer",
            "description": "Max message queue length",
            "minimum": 0
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          },
          "listeners": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                }
              ]
            }
          }
        },
        "type": "object"
      },
      "bridge_dynamo.post": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "hash_key",
          "name",
          "region",
          "table",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "dynamo"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "template": {
            "default": "",
            "type": "string",
            "description": "Template, the default value is empty. When this value is empty the whole message will be stored in the database.<br><br/>The template can be any valid JSON with placeholders and make sure all keys for table are here, example:<br><br/>  <code>{\"id\" : \"${id}\", \"clientid\" : \"${clientid}\", \"data\" : \"${payload.data}\"}</code>"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to DynamoDB. All MQTT `PUBLISH` messages with the topic<br/>matching the `local_topic` will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also `local_topic` is<br/>configured, then both the data got from the rule and the MQTT messages that match `local_topic`<br/>will be forwarded."
          },
          "hash_key": {
            "type": "string",
            "description": "DynamoDB Hash Key"
          },
          "range_key": {
            "type": "string",
            "description": "DynamoDB Range Key"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_dynamo.creation_opts"
          },
          "url": {
            "type": "string",
            "description": "The url of DynamoDB endpoint."
          },
          "region": {
            "type": "string",
            "description": "Region of AWS Dynamo"
          },
          "table": {
            "type": "string",
            "description": "DynamoDB Table."
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "Access Key ID for connecting to DynamoDB."
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "AWS Secret Access Key for connecting to DynamoDB.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.get": {
        "required": [
          "database",
          "name",
          "type",
          "url"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "clickhouse"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "The template string can contain ${field} placeholders for message metadata and payload field. Make sure that the inserted values are formatted and escaped correctly. [Prepared Statement](https://docs.emqx.com/en/enterprise/v5.0/data-integration/data-bridges.html#Prepared-Statement) is not supported."
          },
          "batch_value_separator": {
            "default": ", ",
            "type": "string",
            "description": "The default value ',' works for the VALUES format. You can also use other separator if other format is specified. See [INSERT INTO Statement](https://clickhouse.com/docs/en/sql-reference/statements/insert-into)."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Clickhouse. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_clickhouse.creation_opts"
          },
          "url": {
            "type": "string",
            "description": "The HTTP URL to the Clickhouse server that you want to connect to (for example http://myhostname:8123)",
            "example": "http://127.0.0.1"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the Clickhouse server.",
            "example": "32s"
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.producer_kafka_opts": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Event Hubs name.  Supports templates (e.g.: `t-${payload.t}`)."
          },
          "message": {
            "description": "Template for rendering a message.",
            "$ref": "#/components/schemas/bridge_azure_event_hub.kafka_message"
          },
          "max_linger_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum duration for a per-partition producer to wait for messages in order to collect a batch to buffer.<br/>The default value `0` means no wait. For non-memory buffer mode, it's advised to configure at least `5ms` for less IOPS.",
            "example": "32s"
          },
          "max_linger_bytes": {
            "default": "10MB",
            "type": "string",
            "description": "Maximum number of bytes for a per-partition producer to wait for messages in order to collect a batch to buffer.",
            "example": "32MB"
          },
          "max_batch_bytes": {
            "default": "896KB",
            "type": "string",
            "description": "Maximum bytes to collect in an Azure Event Hubs message batch.",
            "example": "32MB"
          },
          "partition_strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "key_dispatch"
            ],
            "description": "Partition strategy is to tell the producer how to dispatch messages to partitions.<br/><br/><code>random</code>: Randomly pick a partition for each message.<br/><code>key_dispatch</code>: Assigns messages to partitions based on a hash of the message key,<br/>ensuring consistent partition for messages with the same key."
          },
          "required_acks": {
            "default": "all_isr",
            "type": "string",
            "enum": [
              "all_isr",
              "leader_only"
            ],
            "description": "The acknowledgement criteria for the partition leader. It determines the level of confirmation required from partition replicas before sending an acknowledgement back to the producer.<br/><br/><code>all_isr</code>: Require all in-sync replicas to acknowledge.<br/><code>leader_only</code>: Require only the partition-leader's acknowledgement.<br/><code>none</code>: No need for Kafka to acknowledge at all."
          },
          "kafka_headers": {
            "type": "string",
            "description": "Provide a placeholder for message headers<br/><br/>e.g. <code>${pub_props}</code><br/><br/>Note that the value of the placeholder must be either an object:<br/><code>{\"foo\": \"bar\"}</code><br/>or an array of key-value pairs:<br/><code>[{\"key\": \"foo\", \"value\": \"bar\"}]</code>"
          },
          "kafka_ext_headers": {
            "type": "array",
            "description": "Please provide more key-value pairs for Azure Event Hubs headers<br/><br/>The key-value pairs here will be combined with the<br/>value of <code>kafka_headers</code> field before sending to Azure Event Hubs.",
            "items": {
              "$ref": "#/components/schemas/bridge_kafka.producer_kafka_ext_headers"
            }
          },
          "kafka_header_value_encode_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "json"
            ],
            "description": "The encoding mode for headers.<br/><br/> - `none`: Add only strings are added as header values<br/> - `json`: Encode header values as JSON string"
          },
          "partition_count_refresh_interval": {
            "default": "60s",
            "type": "string",
            "description": "The time interval for Azure Event Hubs producer to discover increased number of partitions.<br/>After the number of partitions is increased in Azure Event Hubs, EMQX will start taking the<br/>discovered partitions into account when dispatching messages per <code>partition_strategy</code>.",
            "example": "1h"
          },
          "partitions_limit": {
            "default": "all_partitions",
            "description": "Limit the number of partitions to produce data for the given topic.<br/>The special value `all_partitions` is to utilize all partitions for the topic.<br/>Setting this to a value which is greater than the total number of partitions in has no effect.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "all_partitions"
                ]
              }
            ]
          },
          "max_inflight": {
            "default": 10,
            "type": "integer",
            "description": "The maximum number of message batches that the producer can send to each partition before it must wait for an acknowledgement.<br/>Setting a higher number can enhance throughput. However, value above 1 may lead to potential message reordering risks.",
            "minimum": 1
          },
          "buffer": {
            "description": "Configure producer message buffer.<br/><br/>Tell Azure Event Hubs producer how to buffer messages when EMQX has more messages to send than Azure Event Hubs can keep up, or when Azure Event Hubs is down.",
            "$ref": "#/components/schemas/bridge_kafka.producer_buffer"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "async",
              "sync"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "sync_query_timeout": {
            "default": "5s",
            "type": "string",
            "description": "This parameter defines the timeout limit for synchronous queries. It applies only when the bridge query mode is configured to 'sync'.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_matrix.put": {
        "required": [
          "database",
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "authn.mongo_sharded": {
        "required": [
          "backend",
          "collection",
          "database",
          "mechanism",
          "mongo_type",
          "servers"
        ],
        "properties": {
          "mechanism": {
            "type": "string",
            "enum": [
              "password_based"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "mongodb"
            ],
            "description": "Backend type."
          },
          "collection": {
            "type": "string",
            "description": "Collection used to store authentication data."
          },
          "filter": {
            "default": {},
            "type": "object",
            "description": "Conditional expression that defines the filter condition in the query.<br/>Filter supports the following placeholders:<br/>- <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting<br/>- <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting",
            "example": {}
          },
          "password_hash_field": {
            "default": "password_hash",
            "type": "string",
            "description": "Document field that contains password hash."
          },
          "salt_field": {
            "default": "salt",
            "type": "string",
            "description": "Document field that contains the password salt."
          },
          "is_superuser_field": {
            "default": "is_superuser",
            "type": "string",
            "description": "Document field that defines if the user has superuser privileges."
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn_hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn_hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn_hash.bcrypt"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          },
          "mongo_type": {
            "default": "sharded",
            "type": "string",
            "enum": [
              "sharded"
            ],
            "description": "Sharded cluster. Must be set to 'sharded' when MongoDB server is running in 'sharded' mode."
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "message_transformation_http_api.node_metrics": {
        "properties": {
          "node": {
            "type": "string"
          },
          "matched": {
            "type": "integer",
            "minimum": 0
          },
          "succeeded": {
            "type": "integer",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "authz.api_file": {
        "required": [
          "rules",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "file"
            ],
            "description": "Backend type."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this ACL provider"
          },
          "rules": {
            "type": "string",
            "example": "{allow,{username,{re,\"^dashboard$\"}},subscribe,[\"$SYS/#\"]}.\n{allow,{ipaddr,\"127.0.0.1\"},all,[\"$SYS/#\",\"#\"]}."
          }
        },
        "type": "object"
      },
      "relup.upgrade_error": {
        "properties": {
          "err_type": {
            "type": "string",
            "description": "The type of the error",
            "example": "no_write_permission"
          },
          "details": {
            "type": "object",
            "description": "The details of the error",
            "example": {
              "msg": "no write permission in dir 'emqx/relup'",
              "dir": "emqx/relup"
            }
          }
        },
        "type": "object"
      },
      "bridge_mongodb.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mongodb"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_mongodb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mongodb.action_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_mqtt.egress_remote": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Forward to which topic of the remote broker.<br/><br/>Template with variables is allowed."
          },
          "qos": {
            "default": 1,
            "description": "The QoS of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "maximum": 2,
                "type": "integer",
                "minimum": 0,
                "example": 0
              }
            ]
          },
          "retain": {
            "default": false,
            "description": "The 'retain' flag of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "payload": {
            "type": "string",
            "description": "The payload of the MQTT message to be sent.<br/><br/>Template with variables is allowed."
          }
        },
        "type": "object"
      },
      "syskeeper.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Syskeeper action parameters",
            "$ref": "#/components/schemas/syskeeper.parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/syskeeper.creation_opts"
          }
        },
        "type": "object"
      },
      "rocketmq.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_consumer.put_connector": {
        "required": [
          "service_account_json"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "JSON containing the GCP Service Account credentials to be used with PubSub.<br/>When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/gcp_pubsub_consumer.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "message_transformation_http_api.dryrun_input_message": {
        "required": [
          "payload",
          "topic"
        ],
        "properties": {
          "client_attrs": {
            "default": {},
            "type": "object",
            "example": {}
          },
          "clientid": {
            "default": "test-clientid",
            "type": "string"
          },
          "payload": {
            "type": "string"
          },
          "peername": {
            "default": "127.0.0.1:19872",
            "type": "string",
            "example": "127.0.0.1:80"
          },
          "pub_props": {
            "default": {},
            "type": "object",
            "example": {}
          },
          "qos": {
            "default": 0,
            "maximum": 2,
            "type": "integer",
            "minimum": 0
          },
          "retain": {
            "default": false,
            "type": "boolean"
          },
          "topic": {
            "type": "string"
          },
          "user_property": {
            "default": {},
            "type": "object",
            "example": {}
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_clients.inflight_messages": {
        "properties": {
          "data": {
            "type": "array",
            "description": "Client's in-flight messages list.<br/>Messages are sorted by time at which they were inserted to the In-flight storage (from older to newer messages).",
            "items": {
              "$ref": "#/components/schemas/emqx_mgmt_api_clients.message"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/public.continuation_meta"
          }
        },
        "type": "object"
      },
      "retainer.mnesia_config": {
        "properties": {
          "type": {
            "default": "built_in_database",
            "type": "string",
            "enum": [
              "built_in_database"
            ],
            "description": "Backend type."
          },
          "storage_type": {
            "default": "ram",
            "type": "string",
            "enum": [
              "ram",
              "disc"
            ],
            "description": "Specifies whether the messages are stored in RAM or persisted on disc."
          },
          "max_retained_messages": {
            "default": 0,
            "type": "integer",
            "description": "Maximum number of retained messages. 0 means no limit.",
            "minimum": 0
          },
          "index_specs": {
            "default": [
              [
                1,
                2,
                3
              ],
              [
                1,
                3
              ],
              [
                2,
                3
              ],
              [
                3
              ]
            ],
            "type": "array",
            "description": "Retainer index specifications: list of arrays of positive ascending integers. Each array specifies an index. Numbers in an index specification are 1-based word positions in topics. Words from specified positions will be used for indexing.<br/>For example, it is good to have <code>[2, 4]</code> index to optimize <code>+/X/+/Y/...</code> topic wildcard subscriptions.",
            "items": {
              "type": "integer"
            },
            "example": [
              [
                2,
                4
              ],
              [
                1,
                3
              ]
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable built-in Mnesia backend."
          }
        },
        "type": "object"
      },
      "bridge_opents.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "opents"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "OpenTSDB action parameters",
            "$ref": "#/components/schemas/bridge_opents.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx.ws_opts": {
        "properties": {
          "mqtt_path": {
            "default": "/mqtt",
            "type": "string",
            "description": "WebSocket's MQTT protocol path. By default, the full URL for the WebSocket client to connect is:<br/>`ws://{host}:{port}/mqtt`.<br/>Append `/[...]` to the end of the path to make EMQX accept any subpath.<br/>For example, specifying `mqtt/[...]` would allow clients to connect at paths like<br/>`mqtt/org1` or `mqtt/group2`, etc.<br/><br/>NOTE: An unmatched path will cause the client to be rejected immediately at the HTTP layer,<br/>meaning it will not be traceable at the MQTT layer."
          },
          "mqtt_piggyback": {
            "default": "multiple",
            "type": "string",
            "enum": [
              "single",
              "multiple"
            ],
            "description": "Whether a WebSocket message is allowed to contain multiple MQTT packets."
          },
          "compress": {
            "default": false,
            "type": "boolean",
            "description": "If <code>true</code>, compress WebSocket messages using <code>zlib</code>.<br/><br/>The configuration items under <code>deflate_opts</code> belong to the compression-related parameter configuration."
          },
          "idle_timeout": {
            "default": "7200s",
            "type": "string",
            "description": "The timeout for waiting for the WebSocket upgrade request. After the timeout, the connection will be closed.",
            "example": "12m"
          },
          "max_frame_size": {
            "default": "infinity",
            "description": "The maximum length of a single MQTT packet.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "fail_if_no_subprotocol": {
            "default": true,
            "type": "boolean",
            "description": "If <code>true</code>, the server will return an error when<br/> the client does not carry the <code>Sec-WebSocket-Protocol</code> field.<br/> <br/>Note: WeChat applet needs to disable this verification."
          },
          "supported_subprotocols": {
            "default": "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5",
            "type": "string",
            "description": "Comma-separated list of supported subprotocols.",
            "example": "item1,item2"
          },
          "check_origin_enable": {
            "default": false,
            "type": "boolean",
            "description": "If <code>true</code>, <code>origin</code> HTTP header will be<br/> validated against the list of allowed origins configured in <code>check_origins</code><br/> parameter."
          },
          "allow_origin_absence": {
            "default": true,
            "type": "boolean",
            "description": "If <code>false</code> and <code>check_origin_enable</code> is<br/> <code>true</code>, the server will reject requests that don't have <code>origin</code><br/> HTTP header."
          },
          "check_origins": {
            "default": "http://localhost:18083, http://127.0.0.1:18083",
            "type": "string",
            "description": "List of allowed origins.<br/>See <code>check_origin_enable</code>.",
            "example": "item1,item2"
          },
          "proxy_address_header": {
            "default": "x-forwarded-for",
            "type": "string",
            "description": "The HTTP request header that carries the original client's IP address, EMQX will take the leftmost IP in the header as the original client's IP.<br/><br/>This option is typically used when EMQX is deployed behind a WebSocket proxy."
          },
          "proxy_port_header": {
            "default": "x-forwarded-port",
            "type": "string",
            "description": "The HTTP request header that carries the original client's source port, EMQX will take the leftmost port in the header as the original client's source port.<br/><br/>This option is typically used when EMQX is deployed behind a WebSocket proxy."
          },
          "deflate_opts": {
            "$ref": "#/components/schemas/emqx.deflate_opts"
          },
          "validate_utf8": {
            "default": true,
            "type": "boolean",
            "description": "Whether to verify that the payload of `text` and `close` frames is valid UTF-8. Disabling it can save resources and improve performance."
          }
        },
        "type": "object"
      },
      "gateway_ocpp.dnstream": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "default": "cs/${cid}",
            "type": "string",
            "description": "Download stream topic to receive request/control messages from third-party system.<br/>This value is a wildcard topic name that subscribed by every connected Charge Point."
          },
          "max_mqueue_len": {
            "default": 100,
            "type": "integer",
            "description": "The maximum message queue length for download stream message delivery."
          }
        },
        "type": "object"
      },
      "connector_couchbase.put_connector": {
        "required": [
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>  A host entry has the following form: `Host[:Port]`.<br/><br/>  The Couchbase default query service port 8093 is used if `[:Port]` is not specified."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "Username for Couchbase service."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Password for Couchbase service.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector.resource_opts"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "listeners.with_name_tcp_required_bind": {
        "required": [
          "bind",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "tcp"
            ],
            "description": "Listener type"
          },
          "running": {
            "type": "boolean",
            "description": "Listener status"
          },
          "name": {
            "type": "string",
            "description": "Listener name"
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable listener."
          },
          "bind": {
            "default": 1883,
            "type": "string",
            "description": "IP address and port for the listening socket.",
            "example": "127.0.0.1:80"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The size of the listener's receiving pool.",
            "minimum": 1
          },
          "max_connections": {
            "default": "infinity",
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message<br/>is delivered to the subscriber. The mountpoint is a way that users can use<br/>to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`, then the client actually subscribes to the topic<br/>`some_tenant/t`. Similarly, if another client B (connected to the same listener<br/>as the client A) sends a message to topic `t`, the message is routed<br/>to all the clients subscribed `some_tenant/t`, so client A will receive the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>: clientid<br/>  - <code>${username}</code>: username"
          },
          "zone": {
            "default": "default",
            "type": "string",
            "description": "The configuration zone to which the listener belongs.<br/>Clients connected to this listener will inherit zone-settings created under this zone name.<br/><br/>A zone can override the configs under below root names:<br/>- `mqtt`<br/>- `force_shutdown`<br/>- `force_gc`<br/>- `flapping_detect`<br/>- `durable_sessions`"
          },
          "enable_authn": {
            "default": true,
            "type": "string",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "description": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication<br/>process goes through the configured authentication chain.<br/>When set to <code>false</code>, any client (with or without username/password) is allowed to connect.<br/>When set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be<br/>denied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off<br/>anonymous clients early."
          },
          "max_conn_rate": {
            "default": "infinity",
            "type": "string",
            "description": "Used to limit the rate at which the current listener accepts connections.<br/><br/>Once the limit is reached, EMQX will pause fetching connections from the Accept queue, thereby delaying or rejecting new connections.<br/><br/>For example:<br/><br/>- `1000/s`: Only accepts 1000 connections per second.<br/>- `1000/10s`: Only accepts 1000 connections every 10 seconds.",
            "example": "1000/s"
          },
          "messages_rate": {
            "type": "string",
            "description": "Used to limit the number of messages a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>For example:<br/><br/>- `500/s`: Only 500 messages will be received per second, and the remaining messages will be delayed.<br/>- `500/10s`: Only 500 messages will be received every 10 seconds and the remaining messages will be delayed.",
            "example": "1000/s"
          },
          "bytes_rate": {
            "type": "string",
            "description": "Used to limit the number of bytes a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>The unit of the bytes could be: B, KB, MB, GB.<br/><br/>For example:<br/><br/>- `500KB/s`: Only 500 kilobytes per second will be received, and the remaining bytes will be delayed.<br/>- `500MB/10s`: Only 500 megabytes will be received every 10 seconds, and the remaining bytes will be delayed.",
            "example": "100MB/s"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses. The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP, this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/><br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "example": "12m"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/emqx.tcp_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.get_rs": {
        "required": [
          "database",
          "mongo_type",
          "name",
          "replica_set_name",
          "resource_opts",
          "servers",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "mongo_type": {
            "default": "rs",
            "type": "string",
            "enum": [
              "rs"
            ],
            "description": "Replica set. Must be set to 'rs' when MongoDB server is running in 'replica set' mode."
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "r_mode": {
            "default": "master",
            "type": "string",
            "enum": [
              "master",
              "slave_ok"
            ],
            "description": "Read mode."
          },
          "replica_set_name": {
            "type": "string",
            "description": "Name of the replica set."
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this MongoDB Action"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "The collection where data will be stored into"
          },
          "payload_template": {
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc."
          },
          "resource_opts": {
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "mongodb_rs"
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "schema_validation.check_protobuf": {
        "required": [
          "message_type",
          "schema"
        ],
        "properties": {
          "type": {
            "default": "protobuf",
            "type": "string",
            "enum": [
              "protobuf"
            ],
            "description": "Protobuf schema check"
          },
          "schema": {
            "type": "string",
            "description": "Schema name to use during check."
          },
          "message_type": {
            "type": "string",
            "description": "Message name to use during check."
          }
        },
        "type": "object"
      },
      "rule_engine.node_metrics": {
        "properties": {
          "node": {
            "type": "string",
            "description": "The node name",
            "example": "emqx@127.0.0.1"
          },
          "matched": {
            "type": "integer",
            "description": "How many times the FROM clause of the SQL is matched.",
            "minimum": 0
          },
          "matched.rate": {
            "type": "number",
            "description": "The rate of matched, times/second"
          },
          "matched.rate.max": {
            "type": "number",
            "description": "The max rate of matched, times/second"
          },
          "matched.rate.last5m": {
            "type": "number",
            "description": "The average rate of matched in last 5 minutes, times/second"
          },
          "passed": {
            "type": "integer",
            "description": "How many times the SQL is passed",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "description": "How many times the SQL statement has failed",
            "minimum": 0
          },
          "failed.exception": {
            "type": "integer",
            "description": "How many times the SQL is failed due to exceptions. This may because of a crash when calling a SQL function, or trying to do arithmetic operation on undefined variables",
            "minimum": 0
          },
          "failed.unknown": {
            "type": "integer",
            "description": "How many times the SQL is failed due to an unknown error.",
            "minimum": 0
          },
          "actions.total": {
            "type": "integer",
            "description": "How many times the actions are called by the rule. This value may several times of 'matched', depending on the number of the actions of the rule.",
            "minimum": 0
          },
          "actions.success": {
            "type": "integer",
            "description": "How many times the rule successided to call the actions.",
            "minimum": 0
          },
          "actions.failed": {
            "type": "integer",
            "description": "How many times the rule failed to call the actions.",
            "minimum": 0
          },
          "actions.failed.out_of_service": {
            "type": "integer",
            "description": "How many times the rule has failed to call actions due to the action is out of service. For example, a bridge is disabled or stopped.",
            "minimum": 0
          },
          "actions.failed.unknown": {
            "type": "integer",
            "description": "The number of action failures that have occurred due to unanticipated reasons. For more information on these errors, please refer to the EMQX log file.",
            "minimum": 0
          },
          "actions.discarded": {
            "type": "integer",
            "description": "The number of discarded actions due to action being disabled or race condition while action is being deleted.",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "gateway_ocpp.upstream": {
        "required": [
          "error_topic",
          "reply_topic",
          "topic"
        ],
        "properties": {
          "topic": {
            "default": "cp/${cid}",
            "type": "string",
            "description": "The topic for Upload stream Call Request messages."
          },
          "topic_override_mapping": {
            "default": {},
            "description": "Upload stream topic override mapping by Message Name.",
            "properties": {
              "$name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "reply_topic": {
            "default": "cp/${cid}/Reply",
            "type": "string",
            "description": "The topic for Upload stream Reply messages."
          },
          "error_topic": {
            "default": "cp/${cid}/Reply",
            "type": "string",
            "description": "The topic for Upload stream error topic."
          }
        },
        "type": "object"
      },
      "bridge_kafka.put_consumer": {
        "required": [
          "bootstrap_hosts",
          "topic_mapping"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Kafka <code>host:port</code> endpoints to bootstrap the client."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching topic metadata.",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "kafka": {
            "description": "Kafka consumer configs.",
            "$ref": "#/components/schemas/bridge_kafka.consumer_kafka_opts"
          },
          "topic_mapping": {
            "type": "array",
            "description": "Defines the mapping between Kafka topics and MQTT topics. Must contain at least one item.",
            "items": {
              "$ref": "#/components/schemas/bridge_kafka.consumer_topic_mapping"
            }
          },
          "key_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "Defines how the key from the Kafka message is encoded before being forwarded via MQTT.<br/><code>none</code> Uses the key from the Kafka message unchanged.  Note: in this case, the key must be a valid UTF-8 string.<br/><code>base64</code> Uses base-64 encoding on the received key."
          },
          "value_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "Defines how the value from the Kafka message is encoded before being forwarded via MQTT.<br/><code>none</code> Uses the value from the Kafka message unchanged.  Note: in this case, the value must be a valid UTF-8 string.<br/><code>base64</code> Uses base-64 encoding on the received value."
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.put_connector": {
        "required": [
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "url": {
            "default": "http://127.0.0.1:6570",
            "type": "string",
            "description": "HStreamDB Server URL. This URL will be used as the gRPC HTTP server address."
          },
          "grpc_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The timeout for HStreamDB gRPC requests.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_hstreamdb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.action_parameters": {
        "required": [
          "write_syntax"
        ],
        "properties": {
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "Conf of GreptimeDB gRPC protocol to write data points. Write syntax is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported, which is the same as InfluxDB line protocol.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[GreptimeDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>Please note that a placeholder for an integer value must be annotated with a suffix `i`. For example `${payload.int_value}i`."
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "GreptimeDB time precision."
          }
        },
        "type": "object"
      },
      "pulsar.action_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge_pgsql.get_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Configuration Parameters Specific to the PostgreSQL Action",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.put_single": {
        "required": [
          "database",
          "mongo_type",
          "resource_opts",
          "server"
        ],
        "properties": {
          "mongo_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "Standalone instance. Must be set to 'single' when MongoDB server is running in standalone mode."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this MongoDB Action"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "The collection where data will be stored into"
          },
          "payload_template": {
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc."
          },
          "resource_opts": {
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          }
        },
        "type": "object"
      },
      "emqx.sysmon_vm": {
        "properties": {
          "process_check_interval": {
            "default": "30s",
            "type": "string",
            "description": "The time interval for the periodic process count limit check, used together with `process_high_watermark` and `process_low_watermark`.",
            "example": "12m"
          },
          "process_high_watermark": {
            "default": "80%",
            "type": "string",
            "description": "The threshold, as percentage of processes, for how many<br/> processes can simultaneously exist at the local node before the corresponding<br/> alarm is raised.",
            "example": "12%"
          },
          "process_low_watermark": {
            "default": "60%",
            "type": "string",
            "description": "The threshold, as percentage of processes, for how many<br/> processes can simultaneously exist at the local node before the corresponding<br/> alarm is cleared.",
            "example": "12%"
          },
          "long_gc": {
            "default": "disabled",
            "description": "When an Erlang process spends long time to perform garbage collection, a warning level <code>long_gc</code> log is emitted,<br/>and an MQTT message is published to the system topic <code>$SYS/sysmon/long_gc</code>.",
            "oneOf": [
              {
                "type": "string",
                "example": "12m"
              },
              {
                "type": "string",
                "enum": [
                  "disabled"
                ]
              }
            ]
          },
          "long_schedule": {
            "default": "240ms",
            "description": "When the Erlang VM detect a task scheduled for too long, a warning level 'long_schedule' log is emitted,<br/>and an MQTT message is published to the system topic <code>$SYS/sysmon/long_schedule</code>.",
            "oneOf": [
              {
                "type": "string",
                "example": "12m"
              },
              {
                "type": "string",
                "enum": [
                  "disabled"
                ]
              }
            ]
          },
          "large_heap": {
            "default": "32MB",
            "description": "When the heap memory occupied by a process exceeds the size specified by `large_heap`, the system will write a warning level `large_heap` log, and an MQTT message will be published to the system topic `$SYS/sysmon/large_heap`.",
            "oneOf": [
              {
                "type": "string",
                "example": "32MB"
              },
              {
                "type": "string",
                "enum": [
                  "disabled"
                ]
              }
            ]
          },
          "busy_dist_port": {
            "default": true,
            "type": "boolean",
            "description": "When the RPC connection used to communicate with other nodes in the cluster is overloaded,<br/>there will be a <code>busy_dist_port</code> warning log,<br/>and an MQTT message is published to system topic <code>$SYS/sysmon/busy_dist_port</code>."
          },
          "busy_port": {
            "default": true,
            "type": "boolean",
            "description": "When a port (e.g. TCP socket) is overloaded, there will be a <code>busy_port</code> warning log,<br/>and an MQTT message is published to the system topic <code>$SYS/sysmon/busy_port</code>."
          }
        },
        "type": "object"
      },
      "audit.http_request": {
        "properties": {
          "bindings": {
            "type": "object",
            "example": {}
          },
          "body": {
            "type": "object",
            "example": {}
          },
          "headers": {
            "type": "object",
            "example": {}
          },
          "method": {
            "type": "string",
            "enum": [
              "post",
              "put",
              "delete"
            ]
          }
        },
        "type": "object"
      },
      "prometheus.legacy_deprecated_setting": {
        "required": [
          "enable",
          "interval",
          "job_name",
          "mnesia_collector",
          "push_gateway_server",
          "vm_dist_collector",
          "vm_memory_collector",
          "vm_msacc_collector",
          "vm_statistics_collector",
          "vm_system_info_collector"
        ],
        "properties": {
          "push_gateway_server": {
            "default": "http://127.0.0.1:9091",
            "type": "string",
            "description": "Deprecated since 5.4.0, use `prometheus.push_gateway.url` instead"
          },
          "interval": {
            "default": "15s",
            "type": "string",
            "description": "Deprecated since 5.4.0, use `prometheus.push_gateway.interval` instead",
            "example": "32s"
          },
          "headers": {
            "default": {},
            "type": "object",
            "description": "Deprecated since 5.4.0, use `prometheus.push_gateway.headers` instead",
            "example": {}
          },
          "job_name": {
            "default": "${name}/instance/${name}~${host}",
            "type": "string",
            "description": "Deprecated since 5.4.0, use `prometheus.push_gateway.job_name` instead"
          },
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Deprecated since 5.4.0, use `prometheus.push_gateway.url` instead"
          },
          "vm_dist_collector": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "disabled",
              "enabled"
            ],
            "description": "Deprecated since 5.4.0, use `prometheus.collectors.vm_dist` instead"
          },
          "mnesia_collector": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "enabled",
              "disabled"
            ],
            "description": "Deprecated since 5.4.0, use `prometheus.collectors.mnesia` instead"
          },
          "vm_statistics_collector": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "enabled",
              "disabled"
            ],
            "description": "Deprecated since 5.4.0, use `prometheus.collectors.vm_statistics` instead"
          },
          "vm_system_info_collector": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "enabled",
              "disabled"
            ],
            "description": "Deprecated, use `prometheus.collectors.vm_system_info` instead"
          },
          "vm_memory_collector": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "enabled",
              "disabled"
            ],
            "description": "Deprecated since 5.4.0, use `prometheus.collectors.vm_memory` instead"
          },
          "vm_msacc_collector": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "enabled",
              "disabled"
            ],
            "description": "Deprecated since 5.4.0, use `prometheus.collectors.vm_msacc` instead"
          }
        },
        "type": "object"
      },
      "bridge_s3.get_connector": {
        "required": [
          "host",
          "name",
          "port",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "s3"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "access_key_id": {
            "type": "string",
            "description": "The access key ID of the S3 bucket."
          },
          "secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "The secret access key of the S3 bucket.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "host": {
            "type": "string",
            "description": "The host of the S3 endpoint."
          },
          "port": {
            "type": "integer",
            "description": "The port of the S3 endpoint.",
            "minimum": 1
          },
          "transport_options": {
            "description": "Options for the HTTP transport layer used by the S3 client.",
            "$ref": "#/components/schemas/s3.transport_options"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_s3.s3_connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.get_connector": {
        "required": [
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "datalayers"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "default": "127.0.0.1:8361",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The Datalayers default port 8361 is used if `[:Port]` is not specified."
          },
          "parameters": {
            "description": "Set of parameters specific for the given type of this Datalayers connector.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/connector_datalayers.datalayers_influxdb_v1_parameters"
              }
            ]
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_datalayers.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "listeners.tcp_not_required_bind": {
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "tcp"
            ],
            "description": "Listener type"
          },
          "running": {
            "type": "boolean",
            "description": "Listener status"
          },
          "id": {
            "type": "string",
            "description": "Listener id"
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          },
          "bind": {
            "default": 1883,
            "type": "string",
            "description": "IP address and port for the listening socket.",
            "example": "127.0.0.1:80"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable listener."
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The size of the listener's receiving pool.",
            "minimum": 1
          },
          "max_connections": {
            "default": "infinity",
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message<br/>is delivered to the subscriber. The mountpoint is a way that users can use<br/>to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`, then the client actually subscribes to the topic<br/>`some_tenant/t`. Similarly, if another client B (connected to the same listener<br/>as the client A) sends a message to topic `t`, the message is routed<br/>to all the clients subscribed `some_tenant/t`, so client A will receive the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>: clientid<br/>  - <code>${username}</code>: username"
          },
          "zone": {
            "default": "default",
            "type": "string",
            "description": "The configuration zone to which the listener belongs.<br/>Clients connected to this listener will inherit zone-settings created under this zone name.<br/><br/>A zone can override the configs under below root names:<br/>- `mqtt`<br/>- `force_shutdown`<br/>- `force_gc`<br/>- `flapping_detect`<br/>- `durable_sessions`"
          },
          "enable_authn": {
            "default": true,
            "type": "string",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "description": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication<br/>process goes through the configured authentication chain.<br/>When set to <code>false</code>, any client (with or without username/password) is allowed to connect.<br/>When set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be<br/>denied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off<br/>anonymous clients early."
          },
          "max_conn_rate": {
            "default": "infinity",
            "type": "string",
            "description": "Used to limit the rate at which the current listener accepts connections.<br/><br/>Once the limit is reached, EMQX will pause fetching connections from the Accept queue, thereby delaying or rejecting new connections.<br/><br/>For example:<br/><br/>- `1000/s`: Only accepts 1000 connections per second.<br/>- `1000/10s`: Only accepts 1000 connections every 10 seconds.",
            "example": "1000/s"
          },
          "messages_rate": {
            "type": "string",
            "description": "Used to limit the number of messages a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>For example:<br/><br/>- `500/s`: Only 500 messages will be received per second, and the remaining messages will be delayed.<br/>- `500/10s`: Only 500 messages will be received every 10 seconds and the remaining messages will be delayed.",
            "example": "1000/s"
          },
          "bytes_rate": {
            "type": "string",
            "description": "Used to limit the number of bytes a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>The unit of the bytes could be: B, KB, MB, GB.<br/><br/>For example:<br/><br/>- `500KB/s`: Only 500 kilobytes per second will be received, and the remaining bytes will be delayed.<br/>- `500MB/10s`: Only 500 megabytes will be received every 10 seconds, and the remaining bytes will be delayed.",
            "example": "100MB/s"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses. The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP, this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/><br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "example": "12m"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/emqx.tcp_opts"
          }
        },
        "type": "object"
      },
      "bridge_matrix.put_connector": {
        "required": [
          "database",
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "Disables the usage of prepared statements in the connections.<br/>Some endpoints, like PGBouncer or Supabase in Transaction mode, do not<br/>support session features such as prepared statements.  For such connections,<br/>this option should be enabled."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pgsql.action_parameters": {
        "properties": {
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          }
        },
        "type": "object"
      },
      "connector_snowflake.get_connector": {
        "required": [
          "account",
          "dsn",
          "name",
          "password",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "snowflake"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "type": "string",
            "description": "The address of Snowflake computing server to connect to."
          },
          "account": {
            "type": "string",
            "description": "Account ID for Snowflake."
          },
          "dsn": {
            "type": "string",
            "description": "Data Source Name (DSN) associated with the installed Snowflake ODBC driver."
          },
          "proxy": {
            "default": "none",
            "description": "Proxy configuration.  Only plain HTTP proxies are currently supported (no HTTPS).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/connector_snowflake.proxy_config"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector.resource_opts"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "emqx_authz_schema.node_metrics": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name.",
            "example": "emqx@127.0.0.1"
          },
          "metrics": {
            "description": "The metrics of the resource.",
            "$ref": "#/components/schemas/emqx_authz_schema.metrics"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.put_grpc_v1": {
        "required": [
          "dbname",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to the GreptimeDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this Sink is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "Conf of GreptimeDB gRPC protocol to write data points. Write syntax is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported, which is the same as InfluxDB line protocol.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[GreptimeDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>Please note that a placeholder for an integer value must be annotated with a suffix `i`. For example `${payload.int_value}i`."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:4001",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The GreptimeDB default port 8086 is used if `[:Port]` is not specified."
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "GreptimeDB time precision."
          },
          "dbname": {
            "type": "string",
            "description": "GreptimeDB database."
          },
          "username": {
            "type": "string",
            "description": "GreptimeDB username."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "GreptimeDB password.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_mysql.post_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mysql"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MySQL default port 3306 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mysql.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_s3.s3_aggregation": {
        "properties": {
          "time_interval": {
            "default": "30m",
            "type": "string",
            "description": "Amount of time events will be aggregated in a single object before uploading.",
            "example": "1h"
          },
          "max_records": {
            "default": "100000",
            "type": "integer",
            "description": "Number of records (events) allowed per each aggregated object. Each aggregated upload will contain no more than that number of events, but may contain less.<br/><br/>If event rate is high enough, there obviously may be more than one aggregated upload during the same time interval. These uploads will have different, but consecutive sequence numbers, which will be a part of S3 object key.",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "connector_postgres.put_connector": {
        "required": [
          "database",
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "Disables the usage of prepared statements in the connections.<br/>Some endpoints, like PGBouncer or Supabase in Transaction mode, do not<br/>support session features such as prepared statements.  For such connections,<br/>this option should be enabled."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "prometheus.collectors": {
        "required": [
          "mnesia",
          "vm_dist",
          "vm_memory",
          "vm_msacc",
          "vm_statistics",
          "vm_system_info"
        ],
        "properties": {
          "vm_dist": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "disabled",
              "enabled"
            ],
            "description": "Enable or disable VM distribution collector,<br/>collects information about the sockets and processes involved in the Erlang distribution mechanism."
          },
          "mnesia": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "enabled",
              "disabled"
            ],
            "description": "Collects Mnesia metrics mainly using <code> mnesia:system_info/1 </code>"
          },
          "vm_statistics": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "enabled",
              "disabled"
            ],
            "description": "Enable or disable VM statistics collector."
          },
          "vm_system_info": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "enabled",
              "disabled"
            ],
            "description": "Enable or disable VM system info collector."
          },
          "vm_memory": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "enabled",
              "disabled"
            ],
            "description": "Collects information about memory dynamically allocated by the Erlang emulator using<br/><code> erlang:memory/0 </code>."
          },
          "vm_msacc": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "enabled",
              "disabled"
            ],
            "description": "Enable or disable VM microstate accounting metrics collector."
          }
        },
        "type": "object"
      },
      "public.meta": {
        "required": [
          "hasnext"
        ],
        "properties": {
          "page": {
            "default": 1,
            "type": "integer",
            "description": "Page number of the results to fetch.",
            "minimum": 1,
            "example": 1
          },
          "limit": {
            "default": 100,
            "maximum": 10000,
            "type": "integer",
            "description": "Results per page(max 10000)",
            "minimum": 1,
            "example": 50
          },
          "count": {
            "type": "integer",
            "description": "Total number of records matching the query.<br/>Note: this field is present only if the query can be optimized and does not require a full table scan.",
            "minimum": 0
          },
          "hasnext": {
            "type": "boolean",
            "description": "Flag indicating whether there are more results available on next pages."
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.put_consumer": {
        "required": [
          "consumer",
          "resource_opts",
          "service_account_json"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_gcp_pubsub.consumer_resource_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "JSON containing the GCP Service Account credentials to be used with PubSub.<br/>When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed."
          },
          "consumer": {
            "description": "Local MQTT publish and GCP PubSub consumer configs.",
            "$ref": "#/components/schemas/bridge_gcp_pubsub.consumer"
          }
        },
        "type": "object"
      },
      "connector_mqtt.ingress": {
        "properties": {
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the pool of MQTT clients that will ingest messages from the remote broker.<br/><br/>This value will be respected only if 'remote.topic' is a shared subscription topic or topic-filter<br/>(for example `$share/name1/topic1` or `$share/name2/topic2/#`), otherwise only a single MQTT client will be used.<br/>Each MQTT client will be assigned 'clientid' of the form '${clientid_prefix}:${bridge_name}:ingress:${node}:${n}'<br/>where 'n' is the number of a client inside the pool.<br/>NOTE: Non-shared subscription will not work well when EMQX is clustered.",
            "minimum": 1
          },
          "remote": {
            "description": "The configs about subscribing to the remote broker.",
            "$ref": "#/components/schemas/connector_mqtt.ingress_remote"
          },
          "local": {
            "description": "The configs about sending message to the local broker.",
            "$ref": "#/components/schemas/connector_mqtt.ingress_local"
          }
        },
        "type": "object"
      },
      "tdengine_connector.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "connector_azure_blob_storage.put_connector": {
        "required": [
          "account_key",
          "account_name"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "account_name": {
            "type": "string",
            "description": "Account name for Azure Blob Storage service."
          },
          "account_key": {
            "type": "string",
            "format": "password",
            "description": "Account key for Azure Blob Storage service.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_azure_blob_storage.resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_clients.extra_sub_props": {
        "properties": {
          "subid": {
            "type": "string",
            "description": "Only stomp protocol, a unique identity for the subscription. range: 1-65535."
          }
        },
        "type": "object"
      },
      "pulsar.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.auth_username_password": {
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "format": "password",
            "description": "The Connection String for connecting to Azure Event Hubs.  Should be the \"connection string-primary key\" of a Namespace shared access policy.",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "bridge_http.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "http"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "parameters": {
            "description": "The parameters for HTTP action.",
            "$ref": "#/components/schemas/bridge_http.parameters_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_http.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_timescale.put_connector": {
        "required": [
          "database",
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "Disables the usage of prepared statements in the connections.<br/>Some endpoints, like PGBouncer or Supabase in Transaction mode, do not<br/>support session features such as prepared statements.  For such connections,<br/>this option should be enabled."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "mongo.connector_sharded": {
        "required": [
          "mongo_type",
          "servers"
        ],
        "properties": {
          "mongo_type": {
            "default": "sharded",
            "type": "string",
            "enum": [
              "sharded"
            ],
            "description": "Sharded cluster. Must be set to 'sharded' when MongoDB server is running in 'sharded' mode."
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          }
        },
        "type": "object"
      },
      "bridge_pulsar.get_producer": {
        "required": [
          "name",
          "pulsar_topic",
          "servers",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "pulsar_producer"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name, used as a human-readable description of the bridge."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this Pulsar bridge."
          },
          "servers": {
            "type": "string",
            "description": "A comma separated list of Pulsar URLs in the form <code>scheme://host[:port]</code><br/> for the client to connect to. The supported schemes are <code>pulsar://</code> (default)<br/> and <code>pulsar+ssl://</code>. The default port is 6650."
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_token"
              },
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_basic"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "message": {
            "description": "Template to render a Pulsar message.",
            "$ref": "#/components/schemas/pulsar.producer_pulsar_message"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "Maximum wait time for receiving a receipt from Pulsar when publishing synchronously.",
            "example": "32s"
          },
          "pulsar_topic": {
            "type": "string",
            "description": "Pulsar topic name"
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "Maximum number of individual requests to batch in a Pulsar message.",
            "minimum": 1
          },
          "compression": {
            "default": "no_compression",
            "type": "string",
            "enum": [
              "no_compression",
              "snappy",
              "zlib"
            ],
            "description": "Compression method."
          },
          "send_buffer": {
            "default": "1MB",
            "type": "string",
            "description": "Fine tune the socket send buffer. The default value is tuned for high throughput.",
            "example": "32MB"
          },
          "retention_period": {
            "default": "infinity",
            "description": "The amount of time messages will be buffered while there is no connection to<br/> the Pulsar broker.  Longer times mean that more memory/disk will be used",
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "max_batch_bytes": {
            "default": "900KB",
            "type": "string",
            "description": "Maximum bytes to collect in a Pulsar message batch. Most of the Pulsar brokers<br/> default to a limit of 5 MB batch size. EMQX's default value is less than 5 MB in<br/> order to compensate Pulsar message encoding overheads (especially when each individual<br/> message is very small). When a single message is over the limit, it is still<br/> sent (as a single element batch).",
            "example": "32MB"
          },
          "strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "roundrobin",
              "key_dispatch"
            ],
            "description": "Partition strategy is to tell the producer how to dispatch messages to Pulsar partitions.<br/><br/><code>random</code>: Randomly pick a partition for each message.<br/><code>roundrobin</code>: Pick each available producer in turn for each message.<br/><code>key_dispatch</code>: Hash Pulsar message key of the first message in a batch<br/> to a partition number."
          },
          "buffer": {
            "description": "Configure producer message buffer.\"<br/>Tell Pulsar producer how to buffer messages when EMQX has more messages to\"<br/> send than Pulsar can keep up, or when Pulsar is down.",
            "$ref": "#/components/schemas/bridge_pulsar.producer_buffer"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (bridge input)<br/> If rule action is used as data source, this config should be left empty,<br/> otherwise messages will be duplicated in Pulsar."
          },
          "resource_opts": {
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_pulsar.producer_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.get": {
        "required": [
          "exchange",
          "name",
          "password",
          "routing_key",
          "type",
          "username"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "rabbitmq"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to RabbitMQ. All MQTT 'PUBLISH' messages with the topic matching the local_topic will be forwarded.<br/>    NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is configured, then both the data got from the rule and the MQTT messages that match local_topic will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_rabbitmq.creation_opts"
          },
          "server": {
            "default": "localhost",
            "type": "string",
            "description": "The RabbitMQ server address that you want to connect to (for example, localhost)."
          },
          "port": {
            "default": 5672,
            "maximum": 65535,
            "type": "integer",
            "description": "The RabbitMQ server address that you want to connect to (for example, localhost).",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username used to authenticate with the RabbitMQ server."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The size of the connection pool.",
            "minimum": 1
          },
          "timeout": {
            "default": "5s",
            "type": "string",
            "description": "The timeout for waiting on the connection to be established.",
            "example": "32s"
          },
          "virtual_host": {
            "default": "/",
            "type": "string",
            "description": "The virtual host to use when connecting to the RabbitMQ server."
          },
          "heartbeat": {
            "default": "30s",
            "type": "string",
            "description": "The interval for sending heartbeat messages to the RabbitMQ server.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "wait_for_publish_confirmations": {
            "default": true,
            "type": "boolean",
            "description": "A boolean value that indicates whether to wait for RabbitMQ to confirm message publication when using publisher confirms."
          },
          "publish_confirmation_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The timeout for waiting on the connection to be established.",
            "example": "32s"
          },
          "exchange": {
            "type": "string",
            "description": "The name of the RabbitMQ exchange where the messages will be sent."
          },
          "routing_key": {
            "type": "string",
            "description": "The routing key used to route messages to the correct queue in the RabbitMQ exchange."
          },
          "delivery_mode": {
            "default": "non_persistent",
            "type": "string",
            "enum": [
              "non_persistent",
              "persistent"
            ],
            "description": "The delivery mode for messages published to RabbitMQ. Delivery mode non_persistent (1) is suitable for messages that don't require persistence across RabbitMQ restarts, whereas delivery mode persistent (2) is designed for messages that must survive RabbitMQ restarts."
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "The template for formatting the payload of the message before sending it to RabbitMQ. Template placeholders, such as ${field1.sub_field}, will be substituted with the respective field's value. When left empty, the entire input message will be used as the payload, formatted as a JSON text. This behavior is equivalent to specifying ${.} as the payload template."
          }
        },
        "type": "object"
      },
      "emqx.force_shutdown": {
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable `force_shutdown` feature."
          },
          "max_mailbox_size": {
            "default": 1000,
            "type": "integer",
            "description": "EMQX creates at least one lightweight process for each client connection.<br/><br/>Each process has its own message queue (aka mailbox) to hold messages from other processes (e.g. MQTT messages) so that the process can read messages from the message queue (mailbox) at any time.<br/><br/>If the system is busy or the process hangs due to a busy socket (see `high_watermark`), the message queue can accumulate many messages.<br/><br/>To avoid excessive memory usage, EMQX will force a process to shut down when the length of its message queue exceeds `max_mailbox_size`.",
            "minimum": 0
          },
          "max_heap_size": {
            "default": "32MB",
            "type": "string",
            "description": "The maximum heap size of the process. If the `force_shutdown` is enabled, processes that exceed this limit will automatically exit or be forcibly killed. Messages in the process message queue (mailbox) are also part of the heap. The shutdown of a process can be divided into the following two situations:<br/><br/>- The process actively checks the current heap size during its own operation, and actively exits after finding that it exceeds the limit.<br/>- The underlying scheduling system checks the current heap size after performing garbage collection for the process, and forcibly kills the process after finding that it exceeds the limit.<br/><br/>Note: The Error logs generated by the above two will be different. The log generated by the former is similar to `...errorContext: connection_shutdown, reason: #{max => 2097152, reason => proc_heap_too_large, value => 2787348}..`,<br/>and the log generated by the latter is similar to `...Context: maximum heap size reached...`.",
            "example": "1024KB"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_consumer.source_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "30s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          }
        },
        "type": "object"
      },
      "emqx.broker": {
        "properties": {
          "enable_session_registry": {
            "default": true,
            "type": "boolean",
            "description": "The Global Session Registry is a cluster-wide mechanism designed to maintain the uniqueness of client IDs within the cluster.<br/>Recommendations for Use<br/><br/>- Default Setting: It is generally advisable to enable. This feature is crucial for session takeover to work properly. For example if a client reconnected to another node in the cluster, the new connection will need to find the old session and take it over.<br/>- Disabling the Feature: Disabling is an option for scenarios when all sessions expire immediately after client is disconnected (i.e. session expiry interval is zero). This can be relevant in certain specialized use cases.<br/><br/>Advantages of Disabling<br/><br/>- Reduced Memory Usage: Turning off the session registry can lower the overall memory footprint of the system.<br/>- Improved Performance: Without the overhead of maintaining a global registry, the node can process client connections faster."
          },
          "session_history_retain": {
            "default": "0s",
            "type": "string",
            "description": "The duration to retain the session registration history. Setting this to a value greater than `0s` will increase memory usage and impact peformance.<br/>This retained history can be used to monitor how many sessions were registered in the past configured duration.<br/>Note: This config has no effect if `enable_session_registry` is set to `false`.<br/><br/>Note: If the clients are using random client IDs, it's not recommended to enable this feature, at least not for a long retention period.<br/><br/>Note: When clustered, the lowest (but greater than `0s`) value among the nodes in the cluster will take effect.",
            "example": "1h"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.get_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sqlserver"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "driver": {
            "default": "ms-sql",
            "type": "string",
            "description": "SQL Server Driver Name"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The SQL Server default port 1433 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "sa",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_sqlserver.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "gateway.dtls_opts": {
        "properties": {
          "cacertfile": {
            "default": "${EMQX_ETC_DIR}/certs/cacert.pem",
            "type": "string",
            "description": "Trusted PEM format CA certificates bundle file.<br/><br/>The certificates in this file are used to verify the TLS peer's certificates.<br/>Append new certificates to the file if new CAs are to be trusted.<br/>There is no need to restart EMQX to have the updated file loaded, because<br/>the system regularly checks if file has been updated (and reload).<br/><br/>NOTE: invalidating (deleting) a certificate from the file will not affect<br/>already established connections."
          },
          "cacerts": {
            "default": false,
            "type": "boolean",
            "deprecated": true
          },
          "certfile": {
            "default": "${EMQX_ETC_DIR}/certs/cert.pem",
            "type": "string",
            "description": "PEM format certificates chain file.<br/><br/>The certificates in this file should be in reversed order of the certificate<br/>issue chain. That is, the host's certificate should be placed in the beginning<br/>of the file, followed by the immediate issuer certificate and so on.<br/>Although the root CA certificate is optional, it should be placed at the end of<br/>the file if it is to be added."
          },
          "keyfile": {
            "default": "${EMQX_ETC_DIR}/certs/key.pem",
            "type": "string",
            "description": "PEM format private key file."
          },
          "verify": {
            "default": "verify_none",
            "type": "string",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "description": "Enable or disable peer verification."
          },
          "reuse_sessions": {
            "default": true,
            "type": "boolean",
            "description": "Enable TLS session reuse.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "depth": {
            "default": 10,
            "type": "integer",
            "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.<br/>So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
            "minimum": 0
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "String containing the user's password. Only used if the private key file is password-protected.",
            "example": ""
          },
          "versions": {
            "default": [
              "dtlsv1.2"
            ],
            "type": "array",
            "description": "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2', 'tlsv1.1']</code> here.",
            "items": {
              "type": "string"
            }
          },
          "ciphers": {
            "default": [],
            "type": "array",
            "description": "This config holds TLS cipher suite names separated by comma,<br/>or as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in which the<br/>client and server encrypts information over the network connection.<br/>Selecting a good cipher suite is critical for the<br/>application's data security, confidentiality and performance.<br/><br/>The names should be in OpenSSL string format (not RFC format).<br/>All default values and examples provided by EMQX config<br/>documentation are all in OpenSSL format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            }
          },
          "secure_renegotiate": {
            "default": true,
            "type": "boolean",
            "description": "Whether to reject TLS renegotiation attempts that are not compliant with [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt).<br/><br/>By default, `secure_renegotiate` is set to `true`, which forces secure renegotiation.<br/>If set to `false`, secure renegotiation will still be used, but will fall back to insecure renegotiation if the peer does not support [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt), which increases the risk of a MitM attack.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3."
          },
          "log_level": {
            "default": "notice",
            "type": "string",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "description": "The minimum level of logging allowed for SSL output.<br/><br/>The default is `notice`, set to a lower `debug` level for more detailed logging that can be used to investigate SSL handshake issues."
          },
          "hibernate_after": {
            "default": "5s",
            "type": "string",
            "description": "Specifies the amount of time that an SSL process will hibernate after being idle, thus reducing its memory footprint.<br/><br/>The hibernating process will be woken up when a new message arrives.<br/>Hibernating and waking up too often can cause CPU utilization to increase, as they both perform garbage collection on the process.",
            "example": "12m"
          },
          "partial_chain": {
            "type": "string",
            "enum": [
              true,
              false,
              "two_cacerts_from_cacertfile",
              "cacert_from_cacertfile"
            ],
            "description": "Enable or disable peer verification with partial_chain.<br/>When local verifies a peer certificate during the x509 path validation<br/>process, it constructs a certificate chain that starts with the peer<br/>certificate and ends with a trust anchor.<br/>By default, if it is set to `false`, the trust anchor is the<br/>Root CA, and the certificate chain must be complete.<br/>However, if the setting is set to `true` or `cacert_from_cacertfile`,<br/>the last certificate in `cacertfile` will be used as the trust anchor<br/>certificate (intermediate CA). This creates a partial chain<br/>in the path validation.<br/>Alternatively, if it is configured with `two_cacerts_from_cacertfile`,<br/>one of the last two certificates in `cacertfile` will be used as the<br/>trust anchor certificate, forming a partial chain. This option is<br/>particularly useful for intermediate CA certificate rotation.<br/>However, please note that it incurs some additional overhead, so it<br/>should only be used for certificate rotation purposes."
          },
          "verify_peer_ext_key_usage": {
            "type": "string",
            "description": "Verify extended key usage in peer's certificate<br/>For additional peer certificate validation, the value defined here must present in the<br/>'Extended Key Usage' of peer certificate defined in<br/>[rfc5280](https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.12).<br/><br/>Allowed values are<br/>- `clientAuth`<br/>- `serverAuth`<br/>- `codeSigning`<br/>- `emailProtection`<br/>- `timeStamping`<br/>- `ocspSigning`<br/>- raw OID, for example: \"OID:1.3.6.1.5.5.7.3.2\" means `id-pk 2` which is equivalent to `clientAuth`<br/><br/>Comma-separated string is also supported for validating more than one key usages.<br/><br/>For example, `\"serverAuth,OID:1.3.6.1.5.5.7.3.2\"`"
          },
          "dhfile": {
            "type": "string",
            "description": "Path to a file containing PEM-encoded Diffie-Hellman parameters<br/>to be used by the server if a cipher suite using Diffie-Hellman<br/>key exchange is negotiated. If not specified, default parameters<br/>are used.<br/><br/>NOTE: The <code>dhfile</code> option is not supported by TLS 1.3."
          },
          "fail_if_no_peer_cert": {
            "default": false,
            "type": "boolean",
            "description": "This option is only effective if `verify` is set to `verify_peer`.<br/><br/>If set to `true`, EMQX will reject the connection if the client fails to provide a certificate.<br/><br/>If set to `false`, EMQX will accept clients which don't present a certificate."
          },
          "honor_cipher_order": {
            "default": true,
            "type": "boolean",
            "description": "An important security setting. If this setting is enabled, the server will prioritize the cipher suites it prefers most from the list of cipher suites supported by the client, thus ignoring the client's preferences.<br/><br/>The server's cipher suites are specified by `ciphers`, with preference decreasing from left to right.<br/><br/>It is often better to use the server's preferences, as it is more likely that the server will be configured correctly."
          },
          "client_renegotiation": {
            "default": true,
            "type": "boolean",
            "description": "In protocols that support client-initiated renegotiation,<br/>the cost of resources of such an operation is higher for the server than the client.<br/>This can act as a vector for denial of service attacks.<br/>The SSL application already takes measures to counter-act such attempts,<br/>but client-initiated renegotiation can be strictly disabled by setting this option to false.<br/>The default value is true. Note that disabling renegotiation can result in<br/>long-lived connections becoming unusable due to limits on<br/>the number of messages the underlying cipher suite can encipher.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "handshake_timeout": {
            "default": "15s",
            "type": "string",
            "description": "Maximum time duration allowed for the handshake to complete",
            "example": "12m"
          },
          "gc_after_handshake": {
            "default": false,
            "type": "boolean",
            "description": "Memory usage tuning. If enabled, will immediately perform a garbage collection after the TLS/SSL handshake."
          },
          "ocsp": {
            "$ref": "#/components/schemas/emqx.ocsp"
          },
          "enable_crl_check": {
            "default": false,
            "type": "boolean",
            "description": "Whether to enable CRL verification for this listener."
          }
        },
        "type": "object"
      },
      "bridge_cassa.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "confluent.kafka_message": {
        "properties": {
          "key": {
            "default": "${.clientid}",
            "type": "string",
            "description": "Template for rendering message key. If the template is rendered into a NULL value (i.e. there is no such data field in Rule Engine context) then <code>NULL</code> (but not empty string) is used."
          },
          "value": {
            "default": "${.}",
            "type": "string",
            "description": "Template to render Confluent message value. If the template is rendered into a NULL value (i.e. there is no such data field in Rule Engine context) then Confluent's <code>NULL</code> (but not empty string) is used."
          }
        },
        "type": "object"
      },
      "connector_snowflake.post_connector": {
        "required": [
          "account",
          "dsn",
          "name",
          "password",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "snowflake"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The address of Snowflake computing server to connect to."
          },
          "account": {
            "type": "string",
            "description": "Account ID for Snowflake."
          },
          "dsn": {
            "type": "string",
            "description": "Data Source Name (DSN) associated with the installed Snowflake ODBC driver."
          },
          "proxy": {
            "default": "none",
            "description": "Proxy configuration.  Only plain HTTP proxies are currently supported (no HTTPS).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/connector_snowflake.proxy_config"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector.resource_opts"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "authn.scram_restapi_post": {
        "required": [
          "backend",
          "mechanism",
          "method",
          "url"
        ],
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "post"
            ],
            "description": "HTTP request method."
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=30, max=1000"
            },
            "type": "object",
            "description": "List of HTTP Headers.",
            "example": {}
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          },
          "mechanism": {
            "type": "string",
            "enum": [
              "scram"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "http"
            ],
            "description": "Backend type."
          },
          "algorithm": {
            "default": "sha256",
            "type": "string",
            "enum": [
              "sha256",
              "sha512"
            ],
            "description": "Hashing algorithm."
          },
          "iteration_count": {
            "default": 4096,
            "type": "integer",
            "description": "Iteration count.",
            "minimum": 0
          },
          "url": {
            "type": "string",
            "description": "URL of the HTTP server."
          },
          "body": {
            "type": "object",
            "description": "HTTP request body.",
            "example": {}
          },
          "request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "HTTP request timeout.",
            "example": "32s"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "max_retries": {
            "type": "integer",
            "deprecated": true,
            "minimum": 0
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "request": {
            "description": "Configure HTTP request parameters.",
            "$ref": "#/components/schemas/connector_http.request"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_redis.put_cluster": {
        "required": [
          "command_template",
          "servers"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "command_template": {
            "type": "array",
            "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_cluster"
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "cluster",
            "type": "string",
            "enum": [
              "cluster"
            ],
            "description": "Cluster mode. Must be set to 'cluster' when Redis server is running in clustered mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "schema_validation_http_api.get_metrics": {
        "properties": {
          "metrics": {
            "$ref": "#/components/schemas/schema_validation_http_api.metrics"
          },
          "node_metrics": {
            "$ref": "#/components/schemas/schema_validation_http_api.node_metrics"
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_connected": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "client_connected"
            ],
            "description": "Event Type"
          },
          "clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "mountpoint": {
            "type": "string",
            "description": "The Mountpoint"
          },
          "peername": {
            "type": "string",
            "description": "The IP Address and Port of the Peer Client"
          },
          "sockname": {
            "type": "string",
            "description": "The IP Address and Port of the Local Listener"
          },
          "proto_name": {
            "type": "string",
            "description": "Protocol Name"
          },
          "proto_ver": {
            "type": "string",
            "description": "Protocol Version"
          },
          "keepalive": {
            "type": "integer",
            "description": "KeepAlive"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "Clean Start"
          },
          "expiry_interval": {
            "type": "integer",
            "description": "Expiry Interval"
          },
          "is_bridge": {
            "default": false,
            "type": "boolean",
            "description": "Is Bridge"
          },
          "connected_at": {
            "type": "integer",
            "description": "The Time that this Client is Connected"
          }
        },
        "type": "object"
      },
      "cluster.replicant_info": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Replicant node name",
            "example": "emqx-replicant@127.0.0.2"
          },
          "streams": {
            "type": "integer",
            "description": "The number of RLOG (replicated log) streams",
            "minimum": 0,
            "example": "10"
          }
        },
        "type": "object"
      },
      "load_rebalance.global_purge_status": {
        "required": [
          "node",
          "state"
        ],
        "properties": {
          "state": {
            "type": "string",
            "description": "The state of the process that is being performed on the node"
          },
          "coordinator_node": {
            "type": "string",
            "description": "The node that is coordinating rebalance process"
          },
          "session_goal": {
            "type": "integer",
            "description": "The number of sessions that the node should have after the evacuation process",
            "minimum": 0
          },
          "stats": {
            "description": "Statistics of the evacuation/rebalance process",
            "$ref": "#/components/schemas/load_rebalance.status_stats"
          },
          "purge_rate": {
            "type": "integer",
            "description": "The rate of purging sessions, in sessions per second",
            "minimum": 1
          },
          "node": {
            "type": "string",
            "description": "The node that is being evacuated"
          }
        },
        "type": "object"
      },
      "bridge_oracle.post_connector": {
        "required": [
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "oracle"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Oracle Database default port 1521 is used if `[:Port]` is not specified."
          },
          "sid": {
            "type": "string",
            "description": "Sid for Oracle Database."
          },
          "service_name": {
            "type": "string",
            "description": "Service Name for Oracle Database."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_oracle.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "authn.gcp_device": {
        "required": [
          "mechanism"
        ],
        "properties": {
          "mechanism": {
            "type": "string",
            "enum": [
              "gcp_device"
            ],
            "description": "Authentication mechanism."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          }
        },
        "type": "object"
      },
      "kafka_consumer.post_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka_consumer"
            ]
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "description": "Source configs.",
            "$ref": "#/components/schemas/kafka_consumer.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.source_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_http.put": {
        "required": [
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this action."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "request": {
            "type": "object",
            "deprecated": true,
            "description": "This field is never used, so we deprecated it since 5.3.2.",
            "example": {}
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "url": {
            "type": "string",
            "description": "The URL of the HTTP action.<br/><br/>Template with variables is allowed in the path, but variables cannot be used in the scheme, host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic} </code> is allowed, but<br/><code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code><br/>is not allowed."
          },
          "direction": {
            "type": "string",
            "enum": [
              "egress"
            ],
            "deprecated": true
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to the HTTP server. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "method": {
            "default": "post",
            "type": "string",
            "enum": [
              "post",
              "put",
              "get",
              "delete"
            ],
            "description": "The method of the HTTP request. All the available methods are: post, put, get, delete.<br/><br/>Template with variables is allowed."
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "type": "object",
            "description": "The headers of the HTTP request.<br/><br/>Template with variables is allowed.",
            "example": {},
            "is_template": true
          },
          "body": {
            "type": "string",
            "description": "The body of the HTTP request.<br/><br/>If not provided, the body will be a JSON object of all the available fields.<br/><br/>There, 'all the available fields' means the context of a MQTT message when<br/>this webhook is triggered by receiving a MQTT message (the `local_topic` is set),<br/>or the context of the event when this webhook is triggered by a rule (i.e. this<br/>webhook is used as an action of a rule).<br/><br/>Template with variables is allowed."
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "HTTP request max retry times if failed.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "description": "HTTP request timeout.",
            "example": "32s"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_http.v1_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_authz_schema.metrics": {
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of times the authorization rule was triggered."
          },
          "ignore": {
            "type": "integer",
            "description": "Count of query ignored.  This counter is increased whenever the authorization source attempts to authorize a request, but either it's not applicable, or an error was encountered and the result is undecidable"
          },
          "allow": {
            "type": "integer",
            "description": "The number of times the authentication was successful."
          },
          "deny": {
            "type": "integer",
            "description": "The number of authentication failures."
          },
          "nomatch": {
            "type": "number",
            "description": "The number of times that no authorization rules were matched."
          },
          "rate": {
            "type": "number",
            "description": "The rate of matched, times/second."
          },
          "rate_max": {
            "type": "number",
            "description": "The max rate of matched, times/second."
          },
          "rate_last5m": {
            "type": "number",
            "description": "The average rate of matched in the last 5 minutes, times/second."
          }
        },
        "type": "object"
      },
      "bridge_pulsar.post_producer": {
        "required": [
          "name",
          "pulsar_topic",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pulsar_producer"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name, used as a human-readable description of the bridge."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this Pulsar bridge."
          },
          "servers": {
            "type": "string",
            "description": "A comma separated list of Pulsar URLs in the form <code>scheme://host[:port]</code><br/> for the client to connect to. The supported schemes are <code>pulsar://</code> (default)<br/> and <code>pulsar+ssl://</code>. The default port is 6650."
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_token"
              },
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_basic"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "message": {
            "description": "Template to render a Pulsar message.",
            "$ref": "#/components/schemas/pulsar.producer_pulsar_message"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "Maximum wait time for receiving a receipt from Pulsar when publishing synchronously.",
            "example": "32s"
          },
          "pulsar_topic": {
            "type": "string",
            "description": "Pulsar topic name"
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "Maximum number of individual requests to batch in a Pulsar message.",
            "minimum": 1
          },
          "compression": {
            "default": "no_compression",
            "type": "string",
            "enum": [
              "no_compression",
              "snappy",
              "zlib"
            ],
            "description": "Compression method."
          },
          "send_buffer": {
            "default": "1MB",
            "type": "string",
            "description": "Fine tune the socket send buffer. The default value is tuned for high throughput.",
            "example": "32MB"
          },
          "retention_period": {
            "default": "infinity",
            "description": "The amount of time messages will be buffered while there is no connection to<br/> the Pulsar broker.  Longer times mean that more memory/disk will be used",
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "max_batch_bytes": {
            "default": "900KB",
            "type": "string",
            "description": "Maximum bytes to collect in a Pulsar message batch. Most of the Pulsar brokers<br/> default to a limit of 5 MB batch size. EMQX's default value is less than 5 MB in<br/> order to compensate Pulsar message encoding overheads (especially when each individual<br/> message is very small). When a single message is over the limit, it is still<br/> sent (as a single element batch).",
            "example": "32MB"
          },
          "strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "roundrobin",
              "key_dispatch"
            ],
            "description": "Partition strategy is to tell the producer how to dispatch messages to Pulsar partitions.<br/><br/><code>random</code>: Randomly pick a partition for each message.<br/><code>roundrobin</code>: Pick each available producer in turn for each message.<br/><code>key_dispatch</code>: Hash Pulsar message key of the first message in a batch<br/> to a partition number."
          },
          "buffer": {
            "description": "Configure producer message buffer.\"<br/>Tell Pulsar producer how to buffer messages when EMQX has more messages to\"<br/> send than Pulsar can keep up, or when Pulsar is down.",
            "$ref": "#/components/schemas/bridge_pulsar.producer_buffer"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (bridge input)<br/> If rule action is used as data source, this config should be left empty,<br/> otherwise messages will be duplicated in Pulsar."
          },
          "resource_opts": {
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_pulsar.producer_resource_opts"
          }
        },
        "type": "object"
      },
      "rocketmq.get_connector": {
        "required": [
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rocketmq"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "servers": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The RocketMQ default port 9876 is used if `[:Port]` is not specified."
          },
          "namespace": {
            "type": "string",
            "description": "The namespace field MUST be set if you are using the RocketMQ service in<br/>aliyun cloud and also the namespace is enabled,<br/>or if you have configured a namespace in your RocketMQ server.<br/>For RocketMQ in aliyun cloud, the namespace is the instance ID."
          },
          "access_key": {
            "default": "",
            "type": "string",
            "description": "RocketMQ server `accessKey`."
          },
          "secret_key": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ server `secretKey`.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "security_token": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ Server Security Token",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/rocketmq.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pgsql.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pgsql"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Configuration Parameters Specific to the PostgreSQL Action",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "cluster.node_invitation_succeed": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name",
            "example": "emqx2@127.0.0.1"
          },
          "started_at": {
            "type": "string",
            "description": "The time of the async invitation is started",
            "example": "2024-01-30T15:24:39.355+08:00"
          },
          "finished_at": {
            "type": "string",
            "description": "The time of the async invitation result is received",
            "example": "2024-01-30T15:24:39.355+08:00"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_clients.stomp_client": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Name of the node to which the client is connected"
          },
          "clientid": {
            "type": "string",
            "description": "Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username of client when connecting"
          },
          "mountpoint": {
            "type": "string",
            "description": "Topic mountpoint"
          },
          "proto_name": {
            "type": "string",
            "description": "Client protocol name"
          },
          "proto_ver": {
            "type": "string",
            "description": "Protocol version used by the client"
          },
          "ip_address": {
            "type": "string",
            "description": "Client's IP address"
          },
          "port": {
            "type": "integer",
            "description": "Client's port"
          },
          "is_bridge": {
            "type": "boolean",
            "description": "Indicates whether the client is connected via bridge"
          },
          "connected_at": {
            "description": "Client connection time",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "disconnected_at": {
            "description": "Client offline time, This field is only valid and returned when connected is false",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "connected": {
            "type": "boolean",
            "description": "Whether the client is connected"
          },
          "keepalive": {
            "type": "integer",
            "description": "Keepalive time, with the unit of second"
          },
          "clean_start": {
            "type": "boolean",
            "description": "Indicate whether the client is using a brand new session"
          },
          "expiry_interval": {
            "type": "integer",
            "description": "Session expiration interval, with the unit of second"
          },
          "created_at": {
            "description": "Session creation time",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "subscriptions_cnt": {
            "type": "integer",
            "description": "Number of subscriptions established by this client"
          },
          "subscriptions_max": {
            "type": "integer",
            "description": "Maximum number of subscriptions allowed by this client"
          },
          "inflight_cnt": {
            "type": "integer",
            "description": "Current length of inflight"
          },
          "inflight_max": {
            "type": "integer",
            "description": "Maximum length of inflight"
          },
          "mqueue_len": {
            "type": "integer",
            "description": "Current length of message queue"
          },
          "mqueue_max": {
            "type": "integer",
            "description": "Maximum length of message queue"
          },
          "mqueue_dropped": {
            "type": "integer",
            "description": "Number of messages dropped by the message queue due to exceeding the length"
          },
          "awaiting_rel_cnt": {
            "type": "integer",
            "description": "Number of awaiting acknowledge packet"
          },
          "awaiting_rel_max": {
            "type": "integer",
            "description": "Maximum allowed number of awaiting PUBREC packet"
          },
          "recv_oct": {
            "type": "integer",
            "description": "Number of bytes received"
          },
          "recv_cnt": {
            "type": "integer",
            "description": "Number of socket packets received"
          },
          "recv_pkt": {
            "type": "integer",
            "description": "Number of protocol packets received"
          },
          "recv_msg": {
            "type": "integer",
            "description": "Number of message packets received"
          },
          "send_oct": {
            "type": "integer",
            "description": "Number of bytes sent"
          },
          "send_cnt": {
            "type": "integer",
            "description": "Number of socket packets sent"
          },
          "send_pkt": {
            "type": "integer",
            "description": "Number of protocol packets sent"
          },
          "send_msg": {
            "type": "integer",
            "description": "Number of message packets sent"
          },
          "mailbox_len": {
            "type": "integer",
            "description": "Process mailbox size"
          },
          "heap_size": {
            "type": "integer",
            "description": "Process heap size with the unit of byte"
          },
          "reductions": {
            "type": "integer",
            "description": "Erlang reduction"
          }
        },
        "type": "object"
      },
      "authn.redis_sentinel": {
        "required": [
          "backend",
          "cmd",
          "mechanism",
          "sentinel",
          "servers"
        ],
        "properties": {
          "mechanism": {
            "type": "string",
            "enum": [
              "password_based"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "redis"
            ],
            "description": "Backend type."
          },
          "cmd": {
            "type": "string",
            "description": "The Redis Command used to query data for authentication such as password hash, currently only supports <code>HGET</code> and <code>HMGET</code>."
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn_hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn_hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn_hash.bcrypt"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "sentinel",
            "type": "string",
            "enum": [
              "sentinel"
            ],
            "description": "Sentinel mode. Must be set to 'sentinel' when Redis server is running in sentinel mode."
          },
          "sentinel": {
            "type": "string",
            "description": "The cluster name in Redis sentinel mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis database ID.",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.post": {
        "required": [
          "database",
          "name",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "clickhouse"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "The template string can contain ${field} placeholders for message metadata and payload field. Make sure that the inserted values are formatted and escaped correctly. [Prepared Statement](https://docs.emqx.com/en/enterprise/v5.0/data-integration/data-bridges.html#Prepared-Statement) is not supported."
          },
          "batch_value_separator": {
            "default": ", ",
            "type": "string",
            "description": "The default value ',' works for the VALUES format. You can also use other separator if other format is specified. See [INSERT INTO Statement](https://clickhouse.com/docs/en/sql-reference/statements/insert-into)."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Clickhouse. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_clickhouse.creation_opts"
          },
          "url": {
            "type": "string",
            "description": "The HTTP URL to the Clickhouse server that you want to connect to (for example http://myhostname:8123)",
            "example": "http://127.0.0.1"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the Clickhouse server.",
            "example": "32s"
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "bridge_cassa.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configs.",
            "$ref": "#/components/schemas/bridge_cassa.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.update_jt808": {
        "properties": {
          "frame": {
            "$ref": "#/components/schemas/gateway.jt808_frame"
          },
          "proto": {
            "$ref": "#/components/schemas/gateway.jt808_proto"
          },
          "mountpoint": {
            "default": "jt808/${clientid}/",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "retry_interval": {
            "default": "8s",
            "type": "string",
            "description": "Re-send time interval",
            "example": "32s"
          },
          "max_retry_times": {
            "default": 3,
            "type": "integer",
            "description": "Re-send max times",
            "minimum": 0
          },
          "message_queue_len": {
            "default": 10,
            "type": "integer",
            "description": "Max message queue length",
            "minimum": 0
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          }
        },
        "type": "object"
      },
      "connector_snowflake.proxy_config": {
        "required": [
          "host",
          "port"
        ],
        "properties": {
          "host": {
            "type": "string",
            "description": "Proxy host address to connect to."
          },
          "port": {
            "maximum": 65535,
            "type": "integer",
            "description": "Proxy port to use when connecting.",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.update_gbt32960": {
        "properties": {
          "mountpoint": {
            "default": "gbt32960/${clientid}/",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "retry_interval": {
            "default": "8s",
            "type": "string",
            "description": "Re-send time interval",
            "example": "32s"
          },
          "max_retry_times": {
            "default": 3,
            "type": "integer",
            "description": "Re-send max times",
            "minimum": 0
          },
          "message_queue_len": {
            "default": 10,
            "type": "integer",
            "description": "Max message queue length",
            "minimum": 0
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_mnesia.clientid_response_data": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_clientid"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/public.meta"
          }
        },
        "type": "object"
      },
      "elasticsearch.get": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "elasticsearch"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_http.connector_resource_opts"
          },
          "server": {
            "default": "127.0.0.1:9200",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Elasticsearch default port 9200 is used if `[:Port]` is not specified."
          },
          "authentication": {
            "description": "Authentication configuration",
            "oneOf": [
              {
                "$ref": "#/components/schemas/elasticsearch.auth_basic"
              }
            ]
          }
        },
        "type": "object"
      },
      "message_transformation.operation": {
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_kafka.put_connector": {
        "required": [
          "bootstrap_hosts"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Kafka <code>host:port</code> endpoints to bootstrap the client."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching topic metadata.",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "kafka_consumer.get_connector": {
        "required": [
          "bootstrap_hosts",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka_consumer"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Kafka <code>host:port</code> endpoints to bootstrap the client."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching topic metadata.",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/bridge_hstreamdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "authn_hash.pbkdf2": {
        "required": [
          "iterations",
          "mac_fun",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "pbkdf2"
            ],
            "description": "PBKDF2 password hashing."
          },
          "mac_fun": {
            "type": "string",
            "enum": [
              "md4",
              "md5",
              "ripemd160",
              "sha",
              "sha224",
              "sha256",
              "sha384",
              "sha512"
            ],
            "description": "Specifies mac_fun for PBKDF2 hashing algorithm."
          },
          "iterations": {
            "type": "integer",
            "description": "Iteration count for PBKDF2 hashing algorithm.",
            "minimum": 1
          },
          "dk_length": {
            "type": "integer",
            "description": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "opentelemetry.otel_logs": {
        "properties": {
          "level": {
            "default": "warning",
            "type": "string",
            "enum": [
              "debug",
              "info",
              "notice",
              "warning",
              "error",
              "critical",
              "alert",
              "emergency",
              "all"
            ],
            "description": "The log level of the Open Telemetry log handler."
          },
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Enable or disable Open Telemetry signal."
          },
          "scheduled_delay": {
            "default": "1s",
            "type": "string",
            "description": "The delay interval between two consecutive exports of Open Telemetry signals.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_clients.mqueue_messages": {
        "properties": {
          "data": {
            "type": "array",
            "description": "Client's mqueue messages list.<br/>Messages are ordered according to their priority and queue (FIFO) order: from higher priority to lower priority.<br/>By default, all messages in Mqueue have the same priority of 0.",
            "items": {
              "$ref": "#/components/schemas/emqx_mgmt_api_clients.mqueue_message"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/public.continuation_meta"
          }
        },
        "type": "object"
      },
      "connector_mqtt.egress_local": {
        "properties": {
          "topic": {
            "type": "string",
            "description": "The local topic to be forwarded to the remote broker"
          }
        },
        "type": "object"
      },
      "bridge_opents.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "OpenTSDB action parameters",
            "$ref": "#/components/schemas/bridge_opents.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "authn.hash_method": {
        "properties": {
          "type": {
            "default": "hash",
            "type": "string",
            "enum": [
              "hash"
            ],
            "description": "Authentication method type."
          },
          "password_attribute": {
            "default": "userPassword",
            "type": "string",
            "description": "Indicates which attribute is used to represent the user's password."
          },
          "is_superuser_attribute": {
            "default": "isSuperuser",
            "type": "string",
            "description": "Indicates which attribute is used to represent whether the user is a superuser."
          }
        },
        "type": "object"
      },
      "authn.metrics": {
        "properties": {
          "nomatch": {
            "type": "integer",
            "description": "The number of times the instance was ignored when the required authentication information was not found in the current instance."
          },
          "total": {
            "type": "integer",
            "description": "The total number of times the current instance was triggered."
          },
          "success": {
            "type": "integer",
            "description": "The required authentication information is found in the current instance, and the instance returns authentication success."
          },
          "failed": {
            "type": "integer",
            "description": "The required authentication information is found in the current instance, and the instance returns authentication failure."
          },
          "rate": {
            "type": "number",
            "description": "The total rate at which instances are triggered, times/second."
          },
          "rate_max": {
            "type": "number",
            "description": "The highest trigger rate the instance has ever reached, times/second."
          },
          "rate_last5m": {
            "type": "number",
            "description": "The average trigger rate of the instance within 5 minutes, times/second."
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rabbitmq"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "The action config defines how this bridge send messages to the remote RabbitMQ broker",
            "$ref": "#/components/schemas/bridge_rabbitmq.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_rabbitmq.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_mongodb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mongodb.action_resource_opts"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_producer.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_producer"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action configs.",
            "$ref": "#/components/schemas/gcp_pubsub_producer.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_nodes.node_info": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name",
            "example": "emqx@127.0.0.1"
          },
          "connections": {
            "type": "integer",
            "description": "Number of clients session in this node",
            "minimum": 0,
            "example": 0
          },
          "live_connections": {
            "type": "integer",
            "description": "Number of clients currently connected to this node",
            "minimum": 0,
            "example": 0
          },
          "cluster_sessions": {
            "type": "integer",
            "description": "By default, it includes only those sessions that have not expired. If the `broker.session_history_retain` config is set to a duration greater than `0s`, this count will also include sessions that expired within the specified retain time",
            "minimum": 0,
            "example": 0
          },
          "load1": {
            "type": "number",
            "description": "CPU average load in 1 minute",
            "example": 2.66
          },
          "load5": {
            "type": "number",
            "description": "CPU average load in 5 minute",
            "example": 2.66
          },
          "load15": {
            "type": "number",
            "description": "CPU average load in 15 minute",
            "example": 2.66
          },
          "max_fds": {
            "type": "integer",
            "description": "File descriptors limit",
            "minimum": 0,
            "example": 1024
          },
          "memory_total": {
            "type": "string",
            "description": "Allocated memory",
            "example": "512.00M"
          },
          "memory_used": {
            "type": "string",
            "description": "Used memory",
            "example": "256.00M"
          },
          "node_status": {
            "type": "string",
            "enum": [
              "running",
              "stopped"
            ],
            "description": "Node status",
            "example": "running"
          },
          "otp_release": {
            "type": "string",
            "description": "Erlang/OTP version",
            "example": "24.2/12.2"
          },
          "process_available": {
            "type": "integer",
            "description": "Erlang processes limit",
            "minimum": 0,
            "example": 2097152
          },
          "process_used": {
            "type": "integer",
            "description": "Running Erlang processes",
            "minimum": 0,
            "example": 1024
          },
          "uptime": {
            "type": "integer",
            "description": "System uptime, milliseconds",
            "minimum": 0,
            "example": 5120000
          },
          "version": {
            "type": "string",
            "description": "Release version",
            "example": "5.0.0"
          },
          "edition": {
            "type": "string",
            "enum": [
              "Opensource",
              "Enterprise"
            ],
            "description": "Release edition",
            "example": "Opensource"
          },
          "sys_path": {
            "type": "string",
            "description": "Path to system files",
            "example": "path/to/emqx"
          },
          "log_path": {
            "type": "string",
            "description": "Path to log files",
            "example": "path/to/log | The log path is not yet set"
          },
          "role": {
            "type": "string",
            "enum": [
              "core",
              "replicant"
            ],
            "description": "Node role",
            "example": "core"
          }
        },
        "type": "object"
      },
      "emqx_delayed_api.message_without_payload": {
        "properties": {
          "msgid": {
            "type": "integer",
            "description": "Delayed Message ID"
          },
          "node": {
            "type": "string",
            "description": "The node where message from"
          },
          "publish_at": {
            "type": "string",
            "description": "Clinet publish message time, in RFC 3339 format"
          },
          "delayed_interval": {
            "type": "integer",
            "description": "Delayed interval(second)",
            "minimum": 1
          },
          "delayed_remaining": {
            "type": "integer",
            "description": "Delayed remaining(second)",
            "minimum": 0
          },
          "expected_at": {
            "type": "string",
            "description": "Expect publish time, in RFC 3339 format"
          },
          "topic": {
            "type": "string",
            "description": "Topic",
            "example": "/sys/#"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "QoS",
            "minimum": 0,
            "example": 0
          },
          "from_clientid": {
            "type": "string",
            "description": "From ClientID"
          },
          "from_username": {
            "type": "string",
            "description": "From Username"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_mnesia.rules": {
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/emqx_authz_api_mnesia.rule_item"
            }
          }
        },
        "type": "object"
      },
      "schema_registry.get_avro": {
        "required": [
          "name",
          "source",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for the schema that will serve as its identifier."
          },
          "type": {
            "type": "string",
            "enum": [
              "avro"
            ],
            "description": "Must be `avro` for Avro schema."
          },
          "source": {
            "type": "string",
            "description": "Source text for the schema.",
            "example": "{\"a\": [1,true]}"
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "A description for this schema."
          }
        },
        "type": "object"
      },
      "bridge_kafka.consumer_topic_mapping": {
        "required": [
          "kafka_topic",
          "mqtt_topic"
        ],
        "properties": {
          "kafka_topic": {
            "type": "string",
            "description": "Kafka topic to consume from."
          },
          "mqtt_topic": {
            "type": "string",
            "description": "Local topic to which consumed Kafka messages should be published to."
          },
          "qos": {
            "default": 0,
            "maximum": 2,
            "type": "integer",
            "description": "MQTT QoS used to publish messages consumed from Kafka.",
            "minimum": 0,
            "example": 0
          },
          "payload_template": {
            "default": "${.}",
            "type": "string",
            "description": "The template for transforming the incoming Kafka message.  By default, it will use JSON format to serialize inputs from the Kafka message.  Such fields are:<br/><code>headers</code>: an object containing string key-value pairs.<br/><code>key</code>: Kafka message key (uses the chosen key encoding).<br/><code>offset</code>: offset for the message.<br/><code>topic</code>: Kafka topic.<br/><code>ts</code>: message timestamp.<br/><code>ts_type</code>: message timestamp type, which is one of <code>create</code>, <code>append</code> or <code>undefined</code>.<br/><code>value</code>: Kafka message value (uses the chosen value encoding)."
          }
        },
        "type": "object"
      },
      "schema_validation.check_avro": {
        "required": [
          "schema"
        ],
        "properties": {
          "type": {
            "default": "avro",
            "type": "string",
            "enum": [
              "avro"
            ],
            "description": "Avro schema check"
          },
          "schema": {
            "type": "string",
            "description": "Schema name to use during check."
          }
        },
        "type": "object"
      },
      "action_couchbase.parameters": {
        "required": [
          "sql"
        ],
        "properties": {
          "sql": {
            "type": "string",
            "description": "SQL Template"
          },
          "max_retries": {
            "default": 3,
            "type": "integer",
            "description": "Max retry times if error on sending request.",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "action_azure_blob_storage.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "10ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "slow_subscribers_statistics.record": {
        "properties": {
          "clientid": {
            "type": "string",
            "description": "Message clientid"
          },
          "node": {
            "type": "string",
            "description": "Message node name"
          },
          "topic": {
            "type": "string",
            "description": "Message topic"
          },
          "timespan": {
            "type": "integer",
            "description": "Timespan for message transmission"
          },
          "last_update_time": {
            "type": "integer",
            "description": "The timestamp of last update"
          }
        },
        "type": "object"
      },
      "authn_hash.simple": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "plain",
              "md5",
              "sha",
              "sha256",
              "sha512"
            ],
            "description": "Simple password hashing algorithm."
          },
          "salt_position": {
            "default": "prefix",
            "type": "string",
            "enum": [
              "disable",
              "prefix",
              "suffix"
            ],
            "description": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms."
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_clients.mqttsn_client": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Name of the node to which the client is connected"
          },
          "clientid": {
            "type": "string",
            "description": "Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username of client when connecting"
          },
          "mountpoint": {
            "type": "string",
            "description": "Topic mountpoint"
          },
          "proto_name": {
            "type": "string",
            "description": "Client protocol name"
          },
          "proto_ver": {
            "type": "string",
            "description": "Protocol version used by the client"
          },
          "ip_address": {
            "type": "string",
            "description": "Client's IP address"
          },
          "port": {
            "type": "integer",
            "description": "Client's port"
          },
          "is_bridge": {
            "type": "boolean",
            "description": "Indicates whether the client is connected via bridge"
          },
          "connected_at": {
            "description": "Client connection time",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "disconnected_at": {
            "description": "Client offline time, This field is only valid and returned when connected is false",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "connected": {
            "type": "boolean",
            "description": "Whether the client is connected"
          },
          "keepalive": {
            "type": "integer",
            "description": "Keepalive time, with the unit of second"
          },
          "clean_start": {
            "type": "boolean",
            "description": "Indicate whether the client is using a brand new session"
          },
          "expiry_interval": {
            "type": "integer",
            "description": "Session expiration interval, with the unit of second"
          },
          "created_at": {
            "description": "Session creation time",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "subscriptions_cnt": {
            "type": "integer",
            "description": "Number of subscriptions established by this client"
          },
          "subscriptions_max": {
            "type": "integer",
            "description": "Maximum number of subscriptions allowed by this client"
          },
          "inflight_cnt": {
            "type": "integer",
            "description": "Current length of inflight"
          },
          "inflight_max": {
            "type": "integer",
            "description": "Maximum length of inflight"
          },
          "mqueue_len": {
            "type": "integer",
            "description": "Current length of message queue"
          },
          "mqueue_max": {
            "type": "integer",
            "description": "Maximum length of message queue"
          },
          "mqueue_dropped": {
            "type": "integer",
            "description": "Number of messages dropped by the message queue due to exceeding the length"
          },
          "awaiting_rel_cnt": {
            "type": "integer",
            "description": "Number of awaiting acknowledge packet"
          },
          "awaiting_rel_max": {
            "type": "integer",
            "description": "Maximum allowed number of awaiting PUBREC packet"
          },
          "recv_oct": {
            "type": "integer",
            "description": "Number of bytes received"
          },
          "recv_cnt": {
            "type": "integer",
            "description": "Number of socket packets received"
          },
          "recv_pkt": {
            "type": "integer",
            "description": "Number of protocol packets received"
          },
          "recv_msg": {
            "type": "integer",
            "description": "Number of message packets received"
          },
          "send_oct": {
            "type": "integer",
            "description": "Number of bytes sent"
          },
          "send_cnt": {
            "type": "integer",
            "description": "Number of socket packets sent"
          },
          "send_pkt": {
            "type": "integer",
            "description": "Number of protocol packets sent"
          },
          "send_msg": {
            "type": "integer",
            "description": "Number of message packets sent"
          },
          "mailbox_len": {
            "type": "integer",
            "description": "Process mailbox size"
          },
          "heap_size": {
            "type": "integer",
            "description": "Process heap size with the unit of byte"
          },
          "reductions": {
            "type": "integer",
            "description": "Erlang reduction"
          }
        },
        "type": "object"
      },
      "emqx_topic_metrics_api.metrics": {
        "properties": {
          "message.dropped.count": {
            "type": "integer",
            "description": "Dropped messages count",
            "example": 0
          },
          "message.in.count": {
            "type": "integer",
            "description": "In messages count",
            "example": 0
          },
          "message.out.count": {
            "type": "integer",
            "description": "Out messages count",
            "example": 0
          },
          "message.qos0.in.count": {
            "type": "integer",
            "description": "QoS0 in messages count",
            "example": 0
          },
          "message.qos0.out.count": {
            "type": "integer",
            "description": "QoS0 out messages count",
            "example": 0
          },
          "message.qos1.in.count": {
            "type": "integer",
            "description": "QoS1 in messages count",
            "example": 0
          },
          "message.qos1.out.count": {
            "type": "integer",
            "description": "QoS1 out messages count",
            "example": 0
          },
          "message.qos2.in.count": {
            "type": "integer",
            "description": "QoS2 in messages count",
            "example": 0
          },
          "message.qos2.out.count": {
            "type": "integer",
            "description": "QoS2 out messages count",
            "example": 0
          },
          "message.dropped.rate": {
            "type": "number",
            "description": "Dropped messages rate",
            "example": 0
          },
          "message.in.rate": {
            "type": "number",
            "description": "In messages rate",
            "example": 0
          },
          "message.out.rate": {
            "type": "number",
            "description": "Out messages rate",
            "example": 0
          },
          "message.qos0.in.rate": {
            "type": "number",
            "description": "QoS0 in messages rate",
            "example": 0
          },
          "message.qos0.out.rate": {
            "type": "number",
            "description": "QoS0 out messages rate",
            "example": 0
          },
          "message.qos1.in.rate": {
            "type": "number",
            "description": "QoS1 in messages rate",
            "example": 0
          },
          "message.qos1.out.rate": {
            "type": "number",
            "description": "QoS1 out messages rate",
            "example": 0
          },
          "message.qos2.in.rate": {
            "type": "number",
            "description": "QoS2 in messages rate",
            "example": 0
          },
          "message.qos2.out.rate": {
            "type": "number",
            "description": "QoS2 out messages rate",
            "example": 0
          }
        },
        "type": "object"
      },
      "action_couchbase.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Set of parameters for the action.",
            "$ref": "#/components/schemas/action_couchbase.parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/action_couchbase.action_resource_opts"
          }
        },
        "type": "object"
      },
      "listeners.ssl_not_required_bind": {
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ssl"
            ],
            "description": "Listener type"
          },
          "running": {
            "type": "boolean",
            "description": "Listener status"
          },
          "id": {
            "type": "string",
            "description": "Listener id"
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          },
          "bind": {
            "default": 8883,
            "type": "string",
            "description": "IP address and port for the listening socket.",
            "example": "127.0.0.1:80"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable listener."
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The size of the listener's receiving pool.",
            "minimum": 1
          },
          "max_connections": {
            "default": "infinity",
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message<br/>is delivered to the subscriber. The mountpoint is a way that users can use<br/>to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`, then the client actually subscribes to the topic<br/>`some_tenant/t`. Similarly, if another client B (connected to the same listener<br/>as the client A) sends a message to topic `t`, the message is routed<br/>to all the clients subscribed `some_tenant/t`, so client A will receive the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>: clientid<br/>  - <code>${username}</code>: username"
          },
          "zone": {
            "default": "default",
            "type": "string",
            "description": "The configuration zone to which the listener belongs.<br/>Clients connected to this listener will inherit zone-settings created under this zone name.<br/><br/>A zone can override the configs under below root names:<br/>- `mqtt`<br/>- `force_shutdown`<br/>- `force_gc`<br/>- `flapping_detect`<br/>- `durable_sessions`"
          },
          "enable_authn": {
            "default": true,
            "type": "string",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "description": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication<br/>process goes through the configured authentication chain.<br/>When set to <code>false</code>, any client (with or without username/password) is allowed to connect.<br/>When set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be<br/>denied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off<br/>anonymous clients early."
          },
          "max_conn_rate": {
            "default": "infinity",
            "type": "string",
            "description": "Used to limit the rate at which the current listener accepts connections.<br/><br/>Once the limit is reached, EMQX will pause fetching connections from the Accept queue, thereby delaying or rejecting new connections.<br/><br/>For example:<br/><br/>- `1000/s`: Only accepts 1000 connections per second.<br/>- `1000/10s`: Only accepts 1000 connections every 10 seconds.",
            "example": "1000/s"
          },
          "messages_rate": {
            "type": "string",
            "description": "Used to limit the number of messages a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>For example:<br/><br/>- `500/s`: Only 500 messages will be received per second, and the remaining messages will be delayed.<br/>- `500/10s`: Only 500 messages will be received every 10 seconds and the remaining messages will be delayed.",
            "example": "1000/s"
          },
          "bytes_rate": {
            "type": "string",
            "description": "Used to limit the number of bytes a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>The unit of the bytes could be: B, KB, MB, GB.<br/><br/>For example:<br/><br/>- `500KB/s`: Only 500 kilobytes per second will be received, and the remaining bytes will be delayed.<br/>- `500MB/10s`: Only 500 megabytes will be received every 10 seconds, and the remaining bytes will be delayed.",
            "example": "100MB/s"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses. The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP, this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/><br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "example": "12m"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/emqx.tcp_opts"
          },
          "ssl_options": {
            "$ref": "#/components/schemas/emqx.listener_ssl_opts"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.post_api_v2": {
        "required": [
          "bucket",
          "name",
          "org",
          "token",
          "type",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to the InfluxDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>Please note that a placeholder for an integer value must be annotated with a suffix `i`. For example `${payload.int_value}i`."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The InfluxDB default port 8086 is used if `[:Port]` is not specified."
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "InfluxDB time precision."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "bucket": {
            "type": "string",
            "description": "InfluxDB bucket name."
          },
          "org": {
            "type": "string",
            "description": "Organization name of InfluxDB."
          },
          "token": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB token.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "type": {
            "type": "string",
            "enum": [
              "influxdb_api_v2"
            ],
            "description": "The Bridge Type."
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.post_connector": {
        "required": [
          "name",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "hstreamdb"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "url": {
            "default": "http://127.0.0.1:6570",
            "type": "string",
            "description": "HStreamDB Server URL. This URL will be used as the gRPC HTTP server address."
          },
          "grpc_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The timeout for HStreamDB gRPC requests.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_hstreamdb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "cluster.node_invitation_in_progress": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name",
            "example": "emqx2@127.0.0.1"
          },
          "started_at": {
            "type": "string",
            "description": "The time of the async invitation is started",
            "example": "2024-01-30T15:24:39.355+08:00"
          }
        },
        "type": "object"
      },
      "mongo.connector_rs": {
        "required": [
          "mongo_type",
          "replica_set_name",
          "servers"
        ],
        "properties": {
          "mongo_type": {
            "default": "rs",
            "type": "string",
            "enum": [
              "rs"
            ],
            "description": "Replica set. Must be set to 'rs' when MongoDB server is running in 'replica set' mode."
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "r_mode": {
            "default": "master",
            "type": "string",
            "enum": [
              "master",
              "slave_ok"
            ],
            "description": "Read mode."
          },
          "replica_set_name": {
            "type": "string",
            "description": "Name of the replica set."
          }
        },
        "type": "object"
      },
      "bridge_iotdb.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "iotdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "IoTDB action parameters",
            "$ref": "#/components/schemas/bridge_iotdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_iotdb.action_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.update_lwm2m": {
        "required": [
          "translators",
          "xml_dir"
        ],
        "properties": {
          "xml_dir": {
            "type": "string",
            "description": "The Directory for LwM2M Resource definition.",
            "example": "/etc/emqx/lwm2m_xml"
          },
          "lifetime_min": {
            "default": "15s",
            "type": "string",
            "description": "Minimum value of lifetime allowed to be set by the LwM2M client.",
            "example": "12m"
          },
          "lifetime_max": {
            "default": "86400s",
            "type": "string",
            "description": "Maximum value of lifetime allowed to be set by the LwM2M client.",
            "example": "12m"
          },
          "qmode_time_window": {
            "default": "22s",
            "type": "string",
            "description": "The value of the time window during which the network link is considered valid by the LwM2M Gateway in QMode mode.<br/>For example, after receiving an update message from a client, any messages within this time window are sent directly to the LwM2M client, and all messages beyond this time window are temporarily stored in memory.",
            "example": "1h"
          },
          "auto_observe": {
            "default": false,
            "type": "boolean",
            "description": "Automatically observe the object list of REGISTER packet."
          },
          "update_msg_publish_condition": {
            "default": "contains_object_list",
            "type": "string",
            "enum": [
              "always",
              "contains_object_list"
            ],
            "description": "Policy for publishing UPDATE event message.<br/><br/>  - always: send update events as long as the UPDATE request is received.<br/><br/>  - contains_object_list: send update events only if the UPDATE request carries any Object List"
          },
          "translators": {
            "description": "Topic configuration for LwM2M's gateway publishing and subscription.",
            "$ref": "#/components/schemas/gateway.lwm2m_translators"
          },
          "mountpoint": {
            "default": "lwm2m/${endpoint_name}/",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          }
        },
        "type": "object"
      },
      "confluent.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in Confluent."
          },
          "parameters": {
            "description": "Confluent producer configs.",
            "$ref": "#/components/schemas/confluent.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.ssl_client_opts": {
        "properties": {
          "cacertfile": {
            "type": "string",
            "description": "Trusted PEM format CA certificates bundle file.<br/><br/>The certificates in this file are used to verify the TLS peer's certificates.<br/>Append new certificates to the file if new CAs are to be trusted.<br/>There is no need to restart EMQX to have the updated file loaded, because<br/>the system regularly checks if file has been updated (and reload).<br/><br/>NOTE: invalidating (deleting) a certificate from the file will not affect<br/>already established connections."
          },
          "cacerts": {
            "default": false,
            "type": "boolean",
            "deprecated": true
          },
          "certfile": {
            "type": "string",
            "description": "PEM format certificates chain file.<br/><br/>The certificates in this file should be in reversed order of the certificate<br/>issue chain. That is, the host's certificate should be placed in the beginning<br/>of the file, followed by the immediate issuer certificate and so on.<br/>Although the root CA certificate is optional, it should be placed at the end of<br/>the file if it is to be added."
          },
          "keyfile": {
            "type": "string",
            "description": "PEM format private key file."
          },
          "verify": {
            "default": "verify_none",
            "type": "string",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "description": "Enable or disable peer verification."
          },
          "reuse_sessions": {
            "default": true,
            "type": "boolean",
            "description": "Enable TLS session reuse.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "depth": {
            "default": 10,
            "type": "integer",
            "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.<br/>So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
            "minimum": 0
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "String containing the user's password. Only used if the private key file is password-protected.",
            "example": ""
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "type": "array",
            "description": "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2', 'tlsv1.1']</code> here.",
            "items": {
              "type": "string"
            }
          },
          "ciphers": {
            "default": [],
            "type": "array",
            "description": "This config holds TLS cipher suite names separated by comma,<br/>or as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in which the<br/>client and server encrypts information over the network connection.<br/>Selecting a good cipher suite is critical for the<br/>application's data security, confidentiality and performance.<br/><br/>The names should be in OpenSSL string format (not RFC format).<br/>All default values and examples provided by EMQX config<br/>documentation are all in OpenSSL format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            }
          },
          "secure_renegotiate": {
            "default": true,
            "type": "boolean",
            "description": "Whether to reject TLS renegotiation attempts that are not compliant with [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt).<br/><br/>By default, `secure_renegotiate` is set to `true`, which forces secure renegotiation.<br/>If set to `false`, secure renegotiation will still be used, but will fall back to insecure renegotiation if the peer does not support [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt), which increases the risk of a MitM attack.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3."
          },
          "log_level": {
            "default": "notice",
            "type": "string",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "description": "The minimum level of logging allowed for SSL output.<br/><br/>The default is `notice`, set to a lower `debug` level for more detailed logging that can be used to investigate SSL handshake issues."
          },
          "hibernate_after": {
            "default": "5s",
            "type": "string",
            "description": "Specifies the amount of time that an SSL process will hibernate after being idle, thus reducing its memory footprint.<br/><br/>The hibernating process will be woken up when a new message arrives.<br/>Hibernating and waking up too often can cause CPU utilization to increase, as they both perform garbage collection on the process.",
            "example": "12m"
          },
          "partial_chain": {
            "type": "string",
            "enum": [
              true,
              false,
              "two_cacerts_from_cacertfile",
              "cacert_from_cacertfile"
            ],
            "description": "Enable or disable peer verification with partial_chain.<br/>When local verifies a peer certificate during the x509 path validation<br/>process, it constructs a certificate chain that starts with the peer<br/>certificate and ends with a trust anchor.<br/>By default, if it is set to `false`, the trust anchor is the<br/>Root CA, and the certificate chain must be complete.<br/>However, if the setting is set to `true` or `cacert_from_cacertfile`,<br/>the last certificate in `cacertfile` will be used as the trust anchor<br/>certificate (intermediate CA). This creates a partial chain<br/>in the path validation.<br/>Alternatively, if it is configured with `two_cacerts_from_cacertfile`,<br/>one of the last two certificates in `cacertfile` will be used as the<br/>trust anchor certificate, forming a partial chain. This option is<br/>particularly useful for intermediate CA certificate rotation.<br/>However, please note that it incurs some additional overhead, so it<br/>should only be used for certificate rotation purposes."
          },
          "verify_peer_ext_key_usage": {
            "type": "string",
            "description": "Verify extended key usage in peer's certificate<br/>For additional peer certificate validation, the value defined here must present in the<br/>'Extended Key Usage' of peer certificate defined in<br/>[rfc5280](https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.12).<br/><br/>Allowed values are<br/>- `clientAuth`<br/>- `serverAuth`<br/>- `codeSigning`<br/>- `emailProtection`<br/>- `timeStamping`<br/>- `ocspSigning`<br/>- raw OID, for example: \"OID:1.3.6.1.5.5.7.3.2\" means `id-pk 2` which is equivalent to `clientAuth`<br/><br/>Comma-separated string is also supported for validating more than one key usages.<br/><br/>For example, `\"serverAuth,OID:1.3.6.1.5.5.7.3.2\"`"
          },
          "enable": {
            "default": true,
            "type": "string",
            "enum": [
              true
            ],
            "description": "Enable TLS."
          },
          "server_name_indication": {
            "default": "auto",
            "description": "Server Name Indication (SNI) setting for TLS handshake.<br/><br/>- <code>auto</code>: The client will use <code>\"servicebus.windows.net\"</code> as SNI.<br/><br/>- <code>disable</code>: If you wish to prevent the client from sending the SNI.<br/><br/>- Other string values it will be sent as-is.",
            "example": "auto",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "disable"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "opentelemetry.trace_filter": {
        "properties": {
          "trace_all": {
            "default": false,
            "type": "boolean",
            "description": "If enabled, all published messages are traced, a new trace ID is generated if it can't be extracted from the message.<br/>Otherwise, only messages published with trace context are traced. Disabled by default."
          }
        },
        "type": "object"
      },
      "authz.postgresql": {
        "required": [
          "database",
          "query",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "postgresql"
            ],
            "description": "Backend type."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this ACL provider"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "Disables the usage of prepared statements in the connections.<br/>Some endpoints, like PGBouncer or Supabase in Transaction mode, do not<br/>support session features such as prepared statements.  For such connections,<br/>this option should be enabled."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "prepare_statement": {
            "type": "object",
            "description": "Key-value list of SQL prepared statements.",
            "example": {}
          },
          "query": {
            "type": "string",
            "description": "Database query used to retrieve authorization data."
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.kafka_message": {
        "properties": {
          "key": {
            "default": "${.clientid}",
            "type": "string",
            "description": "Template for rendering message key. If the template is rendered into a NULL value (i.e. there is no such data field in Rule Engine context) then <code>NULL</code> (but not empty string) is used."
          },
          "value": {
            "default": "${.}",
            "type": "string",
            "description": "Template to render Azure Event Hubs message value. If the template is rendered into a NULL value (i.e. there is no such data field in Rule Engine context) then Azure Event Hubs' <code>NULL</code> (but not empty string) is used."
          }
        },
        "type": "object"
      },
      "bridge_pulsar.auth_token": {
        "required": [
          "jwt"
        ],
        "properties": {
          "jwt": {
            "type": "string",
            "format": "password",
            "description": "JWT authentication token.",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.put_producer": {
        "required": [
          "pubsub_topic",
          "service_account_json"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "JSON containing the GCP Service Account credentials to be used with PubSub.<br/>When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed."
          },
          "attributes_template": {
            "default": [],
            "type": "array",
            "description": "The template for formatting the outgoing message attributes.  Undefined values will be rendered as empty string values.  Empty keys are removed from the attribute map.",
            "items": {
              "$ref": "#/components/schemas/bridge_gcp_pubsub.key_value_pair"
            }
          },
          "ordering_key_template": {
            "default": "",
            "type": "string",
            "description": "The template for formatting the outgoing message ordering key.  Undefined values will be rendered as empty string values.  This value will not be added to the message if it's empty."
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, will send all the available context in JSON format."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to GCP PubSub. All MQTT 'PUBLISH' messages with the topic<br/>matching `local_topic` will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "pubsub_topic": {
            "type": "string",
            "description": "The GCP PubSub topic to publish messages to."
          }
        },
        "type": "object"
      },
      "bridge_http.post_connector": {
        "required": [
          "name",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "http"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "url": {
            "type": "string",
            "description": "The URL of the HTTP action.<br/><br/>Template with variables is allowed in the path, but variables cannot be used in the scheme, host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic} </code> is allowed, but<br/><code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code><br/>is not allowed."
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "type": "object",
            "description": "The headers of the HTTP request.<br/><br/>Template with variables is allowed.",
            "example": {},
            "is_template": true
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "request": {
            "type": "object",
            "deprecated": true,
            "description": "This field is never used, so we deprecated it since 5.3.2.",
            "example": {}
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_http.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.rule_metrics": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the rule",
            "example": "293fb66f"
          },
          "metrics": {
            "description": "The metrics of the rule",
            "$ref": "#/components/schemas/rule_engine.metrics"
          },
          "node_metrics": {
            "type": "array",
            "description": "The metrics of the rule for each node",
            "items": {
              "$ref": "#/components/schemas/rule_engine.node_metrics"
            }
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_sub": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "session_subscribed"
            ],
            "description": "Event Type"
          },
          "clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "payload": {
            "type": "string",
            "description": "The Message Payload"
          },
          "peerhost": {
            "type": "string",
            "description": "The IP Address of the Peer Client"
          },
          "topic": {
            "type": "string",
            "description": "Message Topic"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "The Time that this Message is Received"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "The Message QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "modules.delayed": {
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable this feature"
          },
          "max_delayed_messages": {
            "default": 0,
            "type": "integer",
            "description": "Maximum number of delayed messages (0 is no limit)."
          }
        },
        "type": "object"
      },
      "emqx_gcp_device_api.gcp_device_all_info": {
        "required": [
          "config",
          "created_at",
          "deviceid"
        ],
        "properties": {
          "created_at": {
            "type": "integer",
            "description": "Time when GCP device was imported",
            "minimum": 0,
            "example": 1690484400
          },
          "deviceid": {
            "type": "string",
            "description": "Device identifier",
            "example": "c2-ec-x509"
          },
          "registry": {
            "default": "",
            "type": "string",
            "description": "Device registry identifier",
            "example": "my-registry"
          },
          "project": {
            "default": "",
            "type": "string",
            "description": "Cloud project identifier",
            "example": "iot-export"
          },
          "location": {
            "default": "",
            "type": "string",
            "description": "Cloud region",
            "example": "europe-west1"
          },
          "keys": {
            "default": [],
            "type": "array",
            "description": "Public keys associated to GCP device",
            "items": {
              "$ref": "#/components/schemas/emqx_gcp_device_api.key"
            }
          },
          "config": {
            "type": "string",
            "description": "Configuration",
            "example": "bXktY29uZmln"
          }
        },
        "type": "object"
      },
      "load_rebalance.rebalance_start": {
        "properties": {
          "wait_health_check": {
            "type": "string",
            "description": "Time to wait before starting the rebalance/evacuation process, in seconds",
            "example": "1h"
          },
          "conn_evict_rate": {
            "type": "integer",
            "description": "The rate of evicting connections, in connections per second",
            "minimum": 1
          },
          "sess_evict_rate": {
            "type": "integer",
            "description": "The rate of evicting sessions, in sessions per second",
            "minimum": 1
          },
          "abs_conn_threshold": {
            "type": "integer",
            "description": "Maximum desired difference between the number of connections on the node and the average number of connections on the recipient nodes. Difference lower than this is the goal of the rebalance process.",
            "minimum": 1
          },
          "rel_conn_threshold": {
            "type": "number",
            "description": "Maximum desired fraction between the number of connections on the node and the average number of connections on the recipient nodes. Fraction lower than this is the goal of the rebalance process."
          },
          "abs_sess_threshold": {
            "type": "integer",
            "description": "Maximum desired difference between the number of sessions on the node and the average number of sessions on the recipient nodes. Difference lower than this is the goal of the evacuation process.",
            "minimum": 1
          },
          "rel_sess_threshold": {
            "type": "number",
            "description": "Maximum desired fraction between the number of sessions on the node and the average number of sessions on the recipient nodes. Fraction lower than this is the goal of the evacuation process"
          },
          "wait_takeover": {
            "type": "string",
            "description": "Time to wait before starting session evacuation process, in seconds",
            "example": "1h"
          },
          "nodes": {
            "type": "array",
            "description": "Nodes to participate in rebalance",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "plugins.builder": {
        "properties": {
          "contact": {
            "type": "string",
            "example": "emqx-support@emqx.io"
          },
          "name": {
            "type": "string",
            "example": "EMQX Team"
          },
          "website": {
            "type": "string",
            "example": "www.emqx.com"
          }
        },
        "type": "object"
      },
      "bridge_kafka.post_producer": {
        "required": [
          "bootstrap_hosts",
          "kafka",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka",
              "kafka_producer",
              "kafka_consumer"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Kafka <code>host:port</code> endpoints to bootstrap the client."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching topic metadata.",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in Kafka."
          },
          "kafka": {
            "description": "Kafka producer configs.",
            "$ref": "#/components/schemas/bridge_kafka.v1_producer_kafka_opts"
          }
        },
        "type": "object"
      },
      "exhook.hook_info": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The hook's name"
          },
          "params": {
            "description": "The parameters used when the hook is registered",
            "properties": {
              "$name": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "load_rebalance.global_evacuation_status": {
        "required": [
          "node",
          "state"
        ],
        "properties": {
          "state": {
            "type": "string",
            "description": "The state of the process that is being performed on the node"
          },
          "coordinator_node": {
            "type": "string",
            "description": "The node that is coordinating rebalance process"
          },
          "connection_eviction_rate": {
            "type": "integer",
            "description": "The rate of evicting connections, in connections per second",
            "minimum": 1
          },
          "session_eviction_rate": {
            "type": "integer",
            "description": "The rate of evicting sessions, in sessions per second",
            "minimum": 1
          },
          "connection_goal": {
            "type": "integer",
            "description": "The number of connections that the node should have after the rebalance/evacuation process",
            "minimum": 0
          },
          "session_goal": {
            "type": "integer",
            "description": "The number of sessions that the node should have after the evacuation process",
            "minimum": 0
          },
          "disconnected_session_goal": {
            "type": "integer",
            "description": "The number of disconnected sessions that the node should have after the rebalance process",
            "minimum": 0
          },
          "session_recipients": {
            "type": "array",
            "description": "List of nodes to which sessions are being evacuated",
            "items": {
              "type": "string"
            }
          },
          "recipients": {
            "type": "array",
            "description": "List of nodes to which connections/sessions are being evacuated during rebalance",
            "items": {
              "type": "string"
            }
          },
          "stats": {
            "description": "Statistics of the evacuation/rebalance process",
            "$ref": "#/components/schemas/load_rebalance.status_stats"
          },
          "node": {
            "type": "string",
            "description": "The node that is being evacuated"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.action_parameters": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Forward to which topic of the remote broker.<br/><br/>Template with variables is allowed."
          },
          "qos": {
            "default": 1,
            "description": "The QoS of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "maximum": 2,
                "type": "integer",
                "minimum": 0,
                "example": 0
              }
            ]
          },
          "retain": {
            "default": false,
            "description": "The 'retain' flag of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "payload": {
            "type": "string",
            "description": "The payload of the MQTT message to be sent.<br/><br/>Template with variables is allowed."
          }
        },
        "type": "object"
      },
      "schema_validation.check_sql": {
        "required": [
          "sql"
        ],
        "properties": {
          "type": {
            "default": "sql",
            "type": "string",
            "enum": [
              "sql"
            ],
            "description": "Use rule-engine's SQL to validate the message. SQL here is the same as in rule-engine,<br/>  just with the different that the `FROM` clause must be omitted.<br/>  A SQL statement which yields any value is considered successfully validated, otherwise failed.<br/>  For example <code>SELECT payload.foo + payload.bar as sum WHERE sum > 0</code><br/>  validates that the sum of field `foo` and `bar` is a positive value."
          },
          "sql": {
            "type": "string",
            "description": "Use rule-engine's SQL to validate the message. SQL here is the same as in rule-engine,<br/>  just with the different that the `FROM` clause must be omitted.<br/>  A SQL statement which yields any value is considered successfully validated, otherwise failed.<br/>  For example <code>SELECT payload.foo + payload.bar as sum WHERE sum > 0</code><br/>  validates that the sum of field `foo` and `bar` is a positive value."
          }
        },
        "type": "object"
      },
      "sso.login": {
        "required": [
          "backend"
        ],
        "properties": {
          "backend": {
            "type": "string",
            "enum": [
              "oidc"
            ],
            "description": "Backend type."
          }
        },
        "type": "object"
      },
      "syskeeper_forwarder.get": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "syskeeper_forwarder"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "type": "string",
            "description": "The address of the Syskeeper proxy server"
          },
          "ack_mode": {
            "default": "no_ack",
            "type": "string",
            "enum": [
              "need_ack",
              "no_ack"
            ],
            "description": "Specify whether the proxy server should reply with an acknowledgement for the message forwarding, can be:<br>- need_ack <br>- no_ack <br>"
          },
          "ack_timeout": {
            "default": "10s",
            "type": "string",
            "description": "The maximum time to wait for an acknowledgement from the proxy server",
            "example": "32s"
          },
          "pool_size": {
            "default": 16,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/syskeeper_forwarder.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.put_connector": {
        "required": [
          "authentication",
          "bootstrap_hosts",
          "ssl"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Azure Event Hubs Kafka <code>host[:port]</code> namespace endpoints to bootstrap the client.  Default port number is 9093."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Azure Event Hubs Kafka broker and topic metadata. Setting too small value may add extra load on Azure Event Hubs.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching metadata from Azure Event Hubs.",
            "example": "32s"
          },
          "authentication": {
            "default": {},
            "description": "Authentication configs.",
            "$ref": "#/components/schemas/bridge_azure_event_hub.auth_username_password"
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "default": {
              "enable": true
            },
            "$ref": "#/components/schemas/bridge_azure_event_hub.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "retainer.retainer": {
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable retainer feature"
          },
          "msg_expiry_interval": {
            "default": "0s",
            "type": "string",
            "description": "Expired retained messages will not be delivered again, and a setting of 0 means that retained messages will never expire.<br/><br/>However, if the `Message-Expiry-Interval` property is specified in the MQTT message, the value of that property prevails.",
            "example": "32s"
          },
          "msg_clear_interval": {
            "default": "0s",
            "type": "string",
            "description": "The time interval for checking and clearing expired retained messages. This can prevent expired retained messages from being stored for a long time.<br/><br/>If `msg_clear_interval` is set to 0, that is, expired retained messages are not actively checked regularly, EMQX will only check and delete expired retained messages when preparing for delivery.",
            "example": "32s"
          },
          "max_payload_size": {
            "default": "1MB",
            "type": "string",
            "description": "The maximum size of retained messages allowed to be stored. EMQX will refuse to store retained messages larger than this size and output an Error log with the keyword 'retain_failed_for_payload_size_exceeded_limit'.<br/><br/>0 means unlimited retained message size.",
            "example": "32MB"
          },
          "stop_publish_clear_msg": {
            "default": false,
            "type": "boolean",
            "description": "When the retained flag of the `PUBLISH` message is set and Payload is empty,<br/>whether to continue to publish the message.<br/>See:<br/>http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718038"
          },
          "delivery_rate": {
            "default": "1000/s",
            "type": "string",
            "description": "The maximum rate of delivering retained messages",
            "example": "1000/s"
          },
          "backend": {
            "description": "Settings for the database storing the retained messages.",
            "$ref": "#/components/schemas/retainer.mnesia_config"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_data_backup.backup_file_info": {
        "required": [
          "created_at",
          "filename",
          "node"
        ],
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name"
          },
          "filename": {
            "type": "string",
            "description": "Data backup file name"
          },
          "created_at": {
            "type": "string",
            "description": "Data backup file creation date and time"
          }
        },
        "type": "object"
      },
      "file_transfer.local_storage_exporter_backend": {
        "properties": {
          "local": {
            "description": "Exporter to the local file system.",
            "$ref": "#/components/schemas/file_transfer.local_storage_exporter"
          },
          "s3": {
            "description": "Exporter to the S3 API compatible object storage.",
            "$ref": "#/components/schemas/file_transfer.s3_exporter"
          }
        },
        "type": "object"
      },
      "bridge_kafka.get_producer": {
        "required": [
          "bootstrap_hosts",
          "kafka",
          "name",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "kafka",
              "kafka_producer",
              "kafka_consumer"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Kafka <code>host:port</code> endpoints to bootstrap the client."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching topic metadata.",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in Kafka."
          },
          "kafka": {
            "description": "Kafka producer configs.",
            "$ref": "#/components/schemas/bridge_kafka.v1_producer_kafka_opts"
          }
        },
        "type": "object"
      },
      "action_snowflake.proxy_config": {
        "required": [
          "host",
          "port"
        ],
        "properties": {
          "host": {
            "type": "string",
            "description": "Proxy host address to connect to."
          },
          "port": {
            "maximum": 65535,
            "type": "integer",
            "description": "Proxy port to use when connecting.",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "bridge_oracle.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "emqx.sysmon": {
        "properties": {
          "vm": {
            "$ref": "#/components/schemas/emqx.sysmon_vm"
          },
          "os": {
            "$ref": "#/components/schemas/emqx.sysmon_os"
          }
        },
        "type": "object"
      },
      "bridge_http.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "authn.cinfo_check": {
        "required": [
          "is_match",
          "result"
        ],
        "properties": {
          "is_match": {
            "description": "One Variform expression or an array of expressions to evaluate with a set of pre-bound variables derived from the client information.<br/>Supported variables:<br/>- `username`: the username of the client.<br/>- `clientid`: the client ID of the client.<br/>- `client_attrs.*`: the client attributes of the client.<br/>- `peerhost`: the IP address of the client.<br/>- `cert_subject`: the subject of the TLS certificate.<br/>- `cert_common_name`: the issuer of the TLS certificate.<br/>If the expression(s) all yields the string value `'true'`, then the associated `result` is returned from this authenticator.<br/>If any expression yields the other than `'true'`, then the current check is skipped.",
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "allow",
              "deny",
              "ignore"
            ],
            "description": "The result to return if the match condition is `true`.<br/>Supported results:<br/>- `ignore`: defer the authentication to the next authenticator in the chain.<br/>- `allow`: allow the client to connect.<br/>- `deny`: deny the client to connect."
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "azure_event_hub_producer"
            ],
            "description": "The type of the bridge."
          },
          "name": {
            "type": "string",
            "description": "Bridge name, used as a human-readable description of the bridge."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in Azure Event Hubs."
          },
          "parameters": {
            "description": "Azure Event Hubs producer configs.",
            "$ref": "#/components/schemas/bridge_azure_event_hub.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "authn.postgresql": {
        "required": [
          "backend",
          "database",
          "mechanism",
          "query",
          "server",
          "username"
        ],
        "properties": {
          "mechanism": {
            "type": "string",
            "enum": [
              "password_based"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "postgresql"
            ],
            "description": "Backend type."
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn_hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn_hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn_hash.bcrypt"
              }
            ]
          },
          "query": {
            "type": "string",
            "description": "SQL used to query data for authentication, such as password hash."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "Disables the usage of prepared statements in the connections.<br/>Some endpoints, like PGBouncer or Supabase in Transaction mode, do not<br/>support session features such as prepared statements.  For such connections,<br/>this option should be enabled."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_producer.action_parameters": {
        "required": [
          "pubsub_topic"
        ],
        "properties": {
          "attributes_template": {
            "default": [],
            "type": "array",
            "description": "The template for formatting the outgoing message attributes.  Undefined values will be rendered as empty string values.  Empty keys are removed from the attribute map.",
            "items": {
              "$ref": "#/components/schemas/bridge_gcp_pubsub.key_value_pair"
            }
          },
          "ordering_key_template": {
            "default": "",
            "type": "string",
            "description": "The template for formatting the outgoing message ordering key.  Undefined values will be rendered as empty string values.  This value will not be added to the message if it's empty."
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, will send all the available context in JSON format."
          },
          "pubsub_topic": {
            "type": "string",
            "description": "The GCP PubSub topic to publish messages to."
          }
        },
        "type": "object"
      },
      "connector_mqtt.egress": {
        "required": [
          "remote"
        ],
        "properties": {
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the pool of MQTT clients that will publish messages to the remote broker.<br/><br/>Each MQTT client will be assigned 'clientid' of the form '${clientid_prefix}:${bridge_name}:egress:${node}:${n}'<br/>where 'n' is the number of a client inside the pool.",
            "minimum": 1
          },
          "local": {
            "description": "The configs about receiving messages from local broker.",
            "$ref": "#/components/schemas/connector_mqtt.egress_local"
          },
          "remote": {
            "description": "The configs about sending message to the remote broker.",
            "$ref": "#/components/schemas/connector_mqtt.egress_remote"
          }
        },
        "type": "object"
      },
      "bridge_elasticsearch.action_delete": {
        "required": [
          "action",
          "id",
          "index"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "delete"
            ],
            "description": "delete"
          },
          "index": {
            "type": "string",
            "description": "Name of index, or index alias to perform the action on.<br/>This parameter is required.",
            "example": "${payload.index}"
          },
          "id": {
            "type": "string",
            "description": "The document ID. If no ID is specified, a document ID is automatically generated.",
            "example": "${payload.id}"
          },
          "routing": {
            "type": "string",
            "description": "Custom value used to route operations to a specific shard.",
            "example": "${payload.routing}"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "HTTP request max retry times if failed.",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "message_transformation.log_failure": {
        "properties": {
          "level": {
            "default": "info",
            "type": "string",
            "enum": [
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none"
            ]
          }
        },
        "type": "object"
      },
      "exhook.node_metrics": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name"
          },
          "metrics": {
            "description": "Metrics information",
            "$ref": "#/components/schemas/exhook.metrics"
          }
        },
        "type": "object"
      },
      "exhook.move_req": {
        "required": [
          "position"
        ],
        "properties": {
          "position": {
            "type": "string",
            "description": "The target position to be moved",
            "example": "front"
          }
        },
        "type": "object"
      },
      "emqx_authz_schema.resource_metrics": {
        "properties": {
          "matched": {
            "type": "integer",
            "description": "Count of this resource is queried."
          },
          "success": {
            "type": "integer",
            "description": "Count of query success."
          },
          "failed": {
            "type": "integer",
            "description": "Count of query failed."
          },
          "rate": {
            "type": "number",
            "description": "The rate of matched, times/second."
          },
          "rate_max": {
            "type": "number",
            "description": "The max rate of matched, times/second."
          },
          "rate_last5m": {
            "type": "number",
            "description": "The average rate of matched in the last 5 minutes, times/second."
          }
        },
        "type": "object"
      },
      "bridge_s3.put_connector": {
        "required": [
          "host",
          "port"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "access_key_id": {
            "type": "string",
            "description": "The access key ID of the S3 bucket."
          },
          "secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "The secret access key of the S3 bucket.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "host": {
            "type": "string",
            "description": "The host of the S3 endpoint."
          },
          "port": {
            "type": "integer",
            "description": "The port of the S3 endpoint.",
            "minimum": 1
          },
          "transport_options": {
            "description": "Options for the HTTP transport layer used by the S3 client.",
            "$ref": "#/components/schemas/s3.transport_options"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_s3.s3_connector_resource_opts"
          }
        },
        "type": "object"
      },
      "opents_connector.get": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "opents"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The URL of OpenTSDB endpoint."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "summary": {
            "default": true,
            "type": "boolean",
            "description": "Whether to return summary information."
          },
          "details": {
            "default": false,
            "type": "boolean",
            "description": "Whether to return detailed information."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/opents_connector.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.post_consumer": {
        "required": [
          "consumer",
          "name",
          "resource_opts",
          "service_account_json",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_consumer"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_gcp_pubsub.consumer_resource_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "JSON containing the GCP Service Account credentials to be used with PubSub.<br/>When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed."
          },
          "consumer": {
            "description": "Local MQTT publish and GCP PubSub consumer configs.",
            "$ref": "#/components/schemas/bridge_gcp_pubsub.consumer"
          }
        },
        "type": "object"
      },
      "emqx_authz_schema.node_error": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name.",
            "example": "emqx@127.0.0.1"
          },
          "error": {
            "type": "string",
            "description": "The error of node."
          }
        },
        "type": "object"
      },
      "exhook.node_status": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "connecting",
              "disconnected",
              "disabled",
              "error"
            ],
            "description": "The status of Exhook server.<br/><br/>connected: connection succeeded<br/><br/>connecting: connection failed, reconnecting<br/><br/>disconnected: failed to connect and didn't reconnect<br/><br/>disabled: this server is disabled<br/><br/>error: failed to view the status of this server"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.jt808": {
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "jt808"
            ],
            "description": "Gateway Name"
          },
          "frame": {
            "$ref": "#/components/schemas/gateway.jt808_frame"
          },
          "proto": {
            "$ref": "#/components/schemas/gateway.jt808_proto"
          },
          "mountpoint": {
            "default": "jt808/${clientid}/",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "retry_interval": {
            "default": "8s",
            "type": "string",
            "description": "Re-send time interval",
            "example": "32s"
          },
          "max_retry_times": {
            "default": 3,
            "type": "integer",
            "description": "Re-send max times",
            "minimum": 0
          },
          "message_queue_len": {
            "default": 10,
            "type": "integer",
            "description": "Max message queue length",
            "minimum": 0
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          },
          "listeners": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                }
              ]
            }
          }
        },
        "type": "object"
      },
      "bridge_cassa.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cassandra"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configs.",
            "$ref": "#/components/schemas/bridge_cassa.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_oracle.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/bridge_oracle.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_tdengine.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "TDengine action parameters",
            "$ref": "#/components/schemas/bridge_tdengine.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "listeners.ws_required_bind": {
        "required": [
          "bind",
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ws"
            ],
            "description": "Listener type"
          },
          "running": {
            "type": "boolean",
            "description": "Listener status"
          },
          "id": {
            "type": "string",
            "description": "Listener id"
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable listener."
          },
          "bind": {
            "default": 8083,
            "type": "string",
            "description": "IP address and port for the listening socket.",
            "example": "127.0.0.1:80"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The size of the listener's receiving pool.",
            "minimum": 1
          },
          "max_connections": {
            "default": "infinity",
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message<br/>is delivered to the subscriber. The mountpoint is a way that users can use<br/>to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`, then the client actually subscribes to the topic<br/>`some_tenant/t`. Similarly, if another client B (connected to the same listener<br/>as the client A) sends a message to topic `t`, the message is routed<br/>to all the clients subscribed `some_tenant/t`, so client A will receive the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>: clientid<br/>  - <code>${username}</code>: username"
          },
          "zone": {
            "default": "default",
            "type": "string",
            "description": "The configuration zone to which the listener belongs.<br/>Clients connected to this listener will inherit zone-settings created under this zone name.<br/><br/>A zone can override the configs under below root names:<br/>- `mqtt`<br/>- `force_shutdown`<br/>- `force_gc`<br/>- `flapping_detect`<br/>- `durable_sessions`"
          },
          "enable_authn": {
            "default": true,
            "type": "string",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "description": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication<br/>process goes through the configured authentication chain.<br/>When set to <code>false</code>, any client (with or without username/password) is allowed to connect.<br/>When set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be<br/>denied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off<br/>anonymous clients early."
          },
          "max_conn_rate": {
            "default": "infinity",
            "type": "string",
            "description": "Used to limit the rate at which the current listener accepts connections.<br/><br/>Once the limit is reached, EMQX will pause fetching connections from the Accept queue, thereby delaying or rejecting new connections.<br/><br/>For example:<br/><br/>- `1000/s`: Only accepts 1000 connections per second.<br/>- `1000/10s`: Only accepts 1000 connections every 10 seconds.",
            "example": "1000/s"
          },
          "messages_rate": {
            "type": "string",
            "description": "Used to limit the number of messages a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>For example:<br/><br/>- `500/s`: Only 500 messages will be received per second, and the remaining messages will be delayed.<br/>- `500/10s`: Only 500 messages will be received every 10 seconds and the remaining messages will be delayed.",
            "example": "1000/s"
          },
          "bytes_rate": {
            "type": "string",
            "description": "Used to limit the number of bytes a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>The unit of the bytes could be: B, KB, MB, GB.<br/><br/>For example:<br/><br/>- `500KB/s`: Only 500 kilobytes per second will be received, and the remaining bytes will be delayed.<br/>- `500MB/10s`: Only 500 megabytes will be received every 10 seconds, and the remaining bytes will be delayed.",
            "example": "100MB/s"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses. The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP, this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/><br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "example": "12m"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/emqx.tcp_opts"
          },
          "websocket": {
            "$ref": "#/components/schemas/emqx.ws_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.post_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rabbitmq"
            ]
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "description": "The source config defines how this bridge receive messages from the remote RabbitMQ broker",
            "$ref": "#/components/schemas/bridge_rabbitmq.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.source_resource_opts"
          }
        },
        "type": "object"
      },
      "action_azure_blob_storage.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_blob_storage"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Set of parameters for the action.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/action_azure_blob_storage.direct_parameters"
              },
              {
                "$ref": "#/components/schemas/action_azure_blob_storage.aggreg_parameters"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/action_azure_blob_storage.action_resource_opts"
          }
        },
        "type": "object"
      },
      "authn.redis_single": {
        "required": [
          "backend",
          "cmd",
          "mechanism",
          "server"
        ],
        "properties": {
          "mechanism": {
            "type": "string",
            "enum": [
              "password_based"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "redis"
            ],
            "description": "Backend type."
          },
          "cmd": {
            "type": "string",
            "description": "The Redis Command used to query data for authentication such as password hash, currently only supports <code>HGET</code> and <code>HMGET</code>."
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn_hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn_hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn_hash.bcrypt"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "Single mode. Must be set to 'single' when Redis server is running in single mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis database ID.",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "authn.scram_restapi_get": {
        "required": [
          "backend",
          "mechanism",
          "method",
          "url"
        ],
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "get"
            ],
            "description": "HTTP request method."
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "keep-alive": "timeout=30, max=1000"
            },
            "type": "object",
            "description": "List of HTTP headers (without <code>content-type</code>).",
            "example": {}
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          },
          "mechanism": {
            "type": "string",
            "enum": [
              "scram"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "http"
            ],
            "description": "Backend type."
          },
          "algorithm": {
            "default": "sha256",
            "type": "string",
            "enum": [
              "sha256",
              "sha512"
            ],
            "description": "Hashing algorithm."
          },
          "iteration_count": {
            "default": 4096,
            "type": "integer",
            "description": "Iteration count.",
            "minimum": 0
          },
          "url": {
            "type": "string",
            "description": "URL of the HTTP server."
          },
          "body": {
            "type": "object",
            "description": "HTTP request body.",
            "example": {}
          },
          "request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "HTTP request timeout.",
            "example": "32s"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "max_retries": {
            "type": "integer",
            "deprecated": true,
            "minimum": 0
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "request": {
            "description": "Configure HTTP request parameters.",
            "$ref": "#/components/schemas/connector_http.request"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only."
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "listeners.listener_type_status": {
        "required": [
          "enable",
          "ids",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "tcp",
              "ssl",
              "ws",
              "wss",
              "quic"
            ],
            "description": "Listener type"
          },
          "enable": {
            "type": "boolean",
            "description": "Listener enable"
          },
          "ids": {
            "type": "array",
            "description": "Listener Ids",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "$ref": "#/components/schemas/listeners.status"
          },
          "node_status": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/listeners.node_status"
            }
          }
        },
        "type": "object"
      },
      "gateway.translator": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Topic Name"
          },
          "qos": {
            "default": 0,
            "maximum": 2,
            "type": "integer",
            "description": "QoS Level",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_check_authz_complete": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "client_check_authz_complete"
            ],
            "description": "Event Type"
          },
          "clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "peerhost": {
            "type": "string",
            "description": "The IP Address of the Peer Client"
          },
          "topic": {
            "type": "string",
            "description": "Message Topic"
          },
          "action": {
            "type": "string",
            "description": "Publish or Subscribe"
          },
          "authz_source": {
            "type": "string",
            "description": "Cache, Plugs or Default"
          },
          "result": {
            "type": "string",
            "description": "Allow or Deny"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.get_grpc_v1": {
        "required": [
          "dbname",
          "name",
          "type",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to the GreptimeDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this Sink is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "Conf of GreptimeDB gRPC protocol to write data points. Write syntax is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported, which is the same as InfluxDB line protocol.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[GreptimeDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>Please note that a placeholder for an integer value must be annotated with a suffix `i`. For example `${payload.int_value}i`."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:4001",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The GreptimeDB default port 8086 is used if `[:Port]` is not specified."
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "GreptimeDB time precision."
          },
          "dbname": {
            "type": "string",
            "description": "GreptimeDB database."
          },
          "username": {
            "type": "string",
            "description": "GreptimeDB username."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "GreptimeDB password.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "greptimedb"
            ],
            "description": "The type of the action."
          },
          "name": {
            "type": "string",
            "description": "The name of the action."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          }
        },
        "type": "object"
      },
      "opents_connector.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "emqx_gcp_device_api.gcp_device": {
        "required": [
          "config"
        ],
        "properties": {
          "registry": {
            "default": "",
            "type": "string",
            "description": "Device registry identifier",
            "example": "my-registry"
          },
          "project": {
            "default": "",
            "type": "string",
            "description": "Cloud project identifier",
            "example": "iot-export"
          },
          "location": {
            "default": "",
            "type": "string",
            "description": "Cloud region",
            "example": "europe-west1"
          },
          "keys": {
            "default": [],
            "type": "array",
            "description": "Public keys associated to GCP device",
            "items": {
              "$ref": "#/components/schemas/emqx_gcp_device_api.key"
            }
          },
          "config": {
            "type": "string",
            "description": "Configuration",
            "example": "bXktY29uZmln"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configs.",
            "$ref": "#/components/schemas/bridge_clickhouse.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "datalayers"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_datalayers.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "gateway.ssl_server_opts": {
        "properties": {
          "cacertfile": {
            "default": "${EMQX_ETC_DIR}/certs/cacert.pem",
            "type": "string",
            "description": "Trusted PEM format CA certificates bundle file.<br/><br/>The certificates in this file are used to verify the TLS peer's certificates.<br/>Append new certificates to the file if new CAs are to be trusted.<br/>There is no need to restart EMQX to have the updated file loaded, because<br/>the system regularly checks if file has been updated (and reload).<br/><br/>NOTE: invalidating (deleting) a certificate from the file will not affect<br/>already established connections."
          },
          "cacerts": {
            "default": false,
            "type": "boolean",
            "deprecated": true
          },
          "certfile": {
            "default": "${EMQX_ETC_DIR}/certs/cert.pem",
            "type": "string",
            "description": "PEM format certificates chain file.<br/><br/>The certificates in this file should be in reversed order of the certificate<br/>issue chain. That is, the host's certificate should be placed in the beginning<br/>of the file, followed by the immediate issuer certificate and so on.<br/>Although the root CA certificate is optional, it should be placed at the end of<br/>the file if it is to be added."
          },
          "keyfile": {
            "default": "${EMQX_ETC_DIR}/certs/key.pem",
            "type": "string",
            "description": "PEM format private key file."
          },
          "verify": {
            "default": "verify_none",
            "type": "string",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "description": "Enable or disable peer verification."
          },
          "reuse_sessions": {
            "default": true,
            "type": "boolean",
            "description": "Enable TLS session reuse.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "depth": {
            "default": 10,
            "type": "integer",
            "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.<br/>So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
            "minimum": 0
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "String containing the user's password. Only used if the private key file is password-protected.",
            "example": ""
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "type": "array",
            "description": "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2', 'tlsv1.1']</code> here.",
            "items": {
              "type": "string"
            }
          },
          "ciphers": {
            "default": [],
            "type": "array",
            "description": "This config holds TLS cipher suite names separated by comma,<br/>or as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in which the<br/>client and server encrypts information over the network connection.<br/>Selecting a good cipher suite is critical for the<br/>application's data security, confidentiality and performance.<br/><br/>The names should be in OpenSSL string format (not RFC format).<br/>All default values and examples provided by EMQX config<br/>documentation are all in OpenSSL format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            }
          },
          "secure_renegotiate": {
            "default": true,
            "type": "boolean",
            "description": "Whether to reject TLS renegotiation attempts that are not compliant with [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt).<br/><br/>By default, `secure_renegotiate` is set to `true`, which forces secure renegotiation.<br/>If set to `false`, secure renegotiation will still be used, but will fall back to insecure renegotiation if the peer does not support [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt), which increases the risk of a MitM attack.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3."
          },
          "log_level": {
            "default": "notice",
            "type": "string",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "description": "The minimum level of logging allowed for SSL output.<br/><br/>The default is `notice`, set to a lower `debug` level for more detailed logging that can be used to investigate SSL handshake issues."
          },
          "hibernate_after": {
            "default": "5s",
            "type": "string",
            "description": "Specifies the amount of time that an SSL process will hibernate after being idle, thus reducing its memory footprint.<br/><br/>The hibernating process will be woken up when a new message arrives.<br/>Hibernating and waking up too often can cause CPU utilization to increase, as they both perform garbage collection on the process.",
            "example": "12m"
          },
          "partial_chain": {
            "type": "string",
            "enum": [
              true,
              false,
              "two_cacerts_from_cacertfile",
              "cacert_from_cacertfile"
            ],
            "description": "Enable or disable peer verification with partial_chain.<br/>When local verifies a peer certificate during the x509 path validation<br/>process, it constructs a certificate chain that starts with the peer<br/>certificate and ends with a trust anchor.<br/>By default, if it is set to `false`, the trust anchor is the<br/>Root CA, and the certificate chain must be complete.<br/>However, if the setting is set to `true` or `cacert_from_cacertfile`,<br/>the last certificate in `cacertfile` will be used as the trust anchor<br/>certificate (intermediate CA). This creates a partial chain<br/>in the path validation.<br/>Alternatively, if it is configured with `two_cacerts_from_cacertfile`,<br/>one of the last two certificates in `cacertfile` will be used as the<br/>trust anchor certificate, forming a partial chain. This option is<br/>particularly useful for intermediate CA certificate rotation.<br/>However, please note that it incurs some additional overhead, so it<br/>should only be used for certificate rotation purposes."
          },
          "verify_peer_ext_key_usage": {
            "type": "string",
            "description": "Verify extended key usage in peer's certificate<br/>For additional peer certificate validation, the value defined here must present in the<br/>'Extended Key Usage' of peer certificate defined in<br/>[rfc5280](https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.12).<br/><br/>Allowed values are<br/>- `clientAuth`<br/>- `serverAuth`<br/>- `codeSigning`<br/>- `emailProtection`<br/>- `timeStamping`<br/>- `ocspSigning`<br/>- raw OID, for example: \"OID:1.3.6.1.5.5.7.3.2\" means `id-pk 2` which is equivalent to `clientAuth`<br/><br/>Comma-separated string is also supported for validating more than one key usages.<br/><br/>For example, `\"serverAuth,OID:1.3.6.1.5.5.7.3.2\"`"
          },
          "dhfile": {
            "type": "string",
            "description": "Path to a file containing PEM-encoded Diffie-Hellman parameters<br/>to be used by the server if a cipher suite using Diffie-Hellman<br/>key exchange is negotiated. If not specified, default parameters<br/>are used.<br/><br/>NOTE: The <code>dhfile</code> option is not supported by TLS 1.3."
          },
          "fail_if_no_peer_cert": {
            "default": false,
            "type": "boolean",
            "description": "This option is only effective if `verify` is set to `verify_peer`.<br/><br/>If set to `true`, EMQX will reject the connection if the client fails to provide a certificate.<br/><br/>If set to `false`, EMQX will accept clients which don't present a certificate."
          },
          "honor_cipher_order": {
            "default": true,
            "type": "boolean",
            "description": "An important security setting. If this setting is enabled, the server will prioritize the cipher suites it prefers most from the list of cipher suites supported by the client, thus ignoring the client's preferences.<br/><br/>The server's cipher suites are specified by `ciphers`, with preference decreasing from left to right.<br/><br/>It is often better to use the server's preferences, as it is more likely that the server will be configured correctly."
          },
          "client_renegotiation": {
            "default": true,
            "type": "boolean",
            "description": "In protocols that support client-initiated renegotiation,<br/>the cost of resources of such an operation is higher for the server than the client.<br/>This can act as a vector for denial of service attacks.<br/>The SSL application already takes measures to counter-act such attempts,<br/>but client-initiated renegotiation can be strictly disabled by setting this option to false.<br/>The default value is true. Note that disabling renegotiation can result in<br/>long-lived connections becoming unusable due to limits on<br/>the number of messages the underlying cipher suite can encipher.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "handshake_timeout": {
            "default": "15s",
            "type": "string",
            "description": "Maximum time duration allowed for the handshake to complete",
            "example": "12m"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "maximum": 500,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only."
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "pulsar.get": {
        "required": [
          "servers"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "servers": {
            "type": "string",
            "description": "A comma separated list of Pulsar URLs in the form <code>scheme://host[:port]</code><br/> for the client to connect to. The supported schemes are <code>pulsar://</code> (default)<br/> and <code>pulsar+ssl://</code>. The default port is 6650."
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_token"
              },
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_basic"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/pulsar.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_syskeeper_proxy.put": {
        "required": [
          "listen"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "listen": {
            "type": "string",
            "description": "The listening address for this Syskeeper proxy server"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The number of the acceptors",
            "minimum": 0
          },
          "handshake_timeout": {
            "default": "10s",
            "type": "string",
            "description": "The maximum to wait for the handshake when a connection is created",
            "example": "32s"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_syskeeper_proxy.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_unsub": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "session_unsubscribed"
            ],
            "description": "Event Type"
          },
          "clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "payload": {
            "type": "string",
            "description": "The Message Payload"
          },
          "peerhost": {
            "type": "string",
            "description": "The IP Address of the Peer Client"
          },
          "topic": {
            "type": "string",
            "description": "Message Topic"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "The Time that this Message is Received"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "The Message QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "bridge_influxdb.get_connector": {
        "required": [
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "influxdb"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The InfluxDB default port 8086 is used if `[:Port]` is not specified."
          },
          "parameters": {
            "description": "Set of parameters specific for the given type of this InfluxDB connector, `influxdb_type` can be one of `influxdb_api_v1`, `influxdb_api_v1`.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/connector_influxdb.connector_influxdb_api_v2"
              },
              {
                "$ref": "#/components/schemas/connector_influxdb.connector_influxdb_api_v1"
              }
            ]
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_influxdb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_redis.creation_opts_redis_cluster": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only."
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_elasticsearch.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "elasticsearch"
            ]
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "description": "ElasticSearch action parameters",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_update"
              },
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_delete"
              },
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_create"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_elasticsearch.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.get_producer": {
        "required": [
          "name",
          "pubsub_topic",
          "service_account_json",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "JSON containing the GCP Service Account credentials to be used with PubSub.<br/>When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed."
          },
          "attributes_template": {
            "default": [],
            "type": "array",
            "description": "The template for formatting the outgoing message attributes.  Undefined values will be rendered as empty string values.  Empty keys are removed from the attribute map.",
            "items": {
              "$ref": "#/components/schemas/bridge_gcp_pubsub.key_value_pair"
            }
          },
          "ordering_key_template": {
            "default": "",
            "type": "string",
            "description": "The template for formatting the outgoing message ordering key.  Undefined values will be rendered as empty string values.  This value will not be added to the message if it's empty."
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, will send all the available context in JSON format."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to GCP PubSub. All MQTT 'PUBLISH' messages with the topic<br/>matching `local_topic` will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "pubsub_topic": {
            "type": "string",
            "description": "The GCP PubSub topic to publish messages to."
          }
        },
        "type": "object"
      },
      "redis.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "mongo.connector_single": {
        "required": [
          "mongo_type",
          "server"
        ],
        "properties": {
          "mongo_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "Standalone instance. Must be set to 'single' when MongoDB server is running in standalone mode."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "authz.redis_single": {
        "required": [
          "cmd",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "redis"
            ],
            "description": "Backend type."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this ACL provider"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "Single mode. Must be set to 'single' when Redis server is running in single mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis database ID.",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "cmd": {
            "type": "string",
            "description": "Database query used to retrieve authorization data.",
            "example": "HGETALL mqtt_authz"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_sources.sources": {
        "properties": {
          "sources": {
            "type": "array",
            "description": "Authorization data sources.<br/><br/>An array of authorization (ACL) data providers.<br/>It is designed as an array, not a hash-map, so the sources can be<br/>ordered to form a chain of access controls.<br/><br/><br/>When authorizing a 'publish' or 'subscribe' action, the configured<br/>sources are checked in order. When checking an ACL source,<br/>in case the client (identified by username or client ID) is not found,<br/>it moves on to the next source. And it stops immediately<br/>once an 'allow' or 'deny' decision is returned.<br/><br/><br/>If the client is not found in any of the sources,<br/>the default action configured in 'authorization.no_match' is applied.<br/><br/><br/>NOTE:<br/>The source elements are identified by their 'type'.<br/>It is NOT allowed to configure two or more sources of the same type.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/authz.ldap"
                },
                {
                  "$ref": "#/components/schemas/authz.mongo_sharded"
                },
                {
                  "$ref": "#/components/schemas/authz.mongo_rs"
                },
                {
                  "$ref": "#/components/schemas/authz.mongo_single"
                },
                {
                  "$ref": "#/components/schemas/authz.postgresql"
                },
                {
                  "$ref": "#/components/schemas/authz.mysql"
                },
                {
                  "$ref": "#/components/schemas/authz.redis_cluster"
                },
                {
                  "$ref": "#/components/schemas/authz.redis_sentinel"
                },
                {
                  "$ref": "#/components/schemas/authz.redis_single"
                },
                {
                  "$ref": "#/components/schemas/authz.http_post"
                },
                {
                  "$ref": "#/components/schemas/authz.http_get"
                },
                {
                  "$ref": "#/components/schemas/authz.builtin_db"
                },
                {
                  "$ref": "#/components/schemas/authz.api_file"
                }
              ]
            }
          }
        },
        "type": "object"
      },
      "bridge_matrix.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "matrix"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Configuration Parameters Specific to the PostgreSQL Action",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_alarms.alarm": {
        "properties": {
          "node": {
            "type": "string",
            "description": "The name of the node that triggered this alarm.",
            "example": "emqx@127.0.0.1"
          },
          "name": {
            "type": "string",
            "description": "The name of the node that triggered this alarm.",
            "example": "high_system_memory_usage"
          },
          "message": {
            "type": "string",
            "description": "Alarm message, which describes the alarm content in a human-readable format.",
            "example": "System memory usage is higher than 70%"
          },
          "details": {
            "type": "object",
            "description": "Alarm details, provides more alarm information, mainly for program processing.",
            "example": {
              "high_watermark": 70
            }
          },
          "duration": {
            "type": "integer",
            "description": "Indicates how long the alarm has been active in milliseconds.",
            "example": 297056
          },
          "activate_at": {
            "type": "string",
            "description": "Alarm start time, using rfc3339 standard time format.",
            "example": "2021-10-25T11:52:52.548+08:00"
          },
          "deactivate_at": {
            "type": "string",
            "description": "Alarm end time, using rfc3339 standard time format.",
            "example": "2021-10-31T10:52:52.548+08:00"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.action_parameters": {
        "required": [
          "exchange",
          "routing_key"
        ],
        "properties": {
          "wait_for_publish_confirmations": {
            "default": true,
            "type": "boolean",
            "description": "A boolean value that indicates whether to wait for RabbitMQ to confirm message publication when using publisher confirms."
          },
          "publish_confirmation_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The timeout for waiting on the connection to be established.",
            "example": "32s"
          },
          "exchange": {
            "type": "string",
            "description": "The name of the RabbitMQ exchange where the messages will be sent."
          },
          "routing_key": {
            "type": "string",
            "description": "The routing key used to route messages to the correct queue in the RabbitMQ exchange."
          },
          "delivery_mode": {
            "default": "non_persistent",
            "type": "string",
            "enum": [
              "non_persistent",
              "persistent"
            ],
            "description": "The delivery mode for messages published to RabbitMQ. Delivery mode non_persistent (1) is suitable for messages that don't require persistence across RabbitMQ restarts, whereas delivery mode persistent (2) is designed for messages that must survive RabbitMQ restarts."
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "The template for formatting the payload of the message before sending it to RabbitMQ. Template placeholders, such as ${field1.sub_field}, will be substituted with the respective field's value. When left empty, the entire input message will be used as the payload, formatted as a JSON text. This behavior is equivalent to specifying ${.} as the payload template."
          }
        },
        "type": "object"
      },
      "bridge_http.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "connector.node_status": {
        "properties": {
          "node": {
            "type": "string",
            "description": "The node name.",
            "example": "emqx@127.0.0.1"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ]
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          }
        },
        "type": "object"
      },
      "syskeeper_forwarder.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "schema_registry.get_json": {
        "required": [
          "name",
          "source",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "A name for the schema that will serve as its identifier."
          },
          "type": {
            "type": "string",
            "enum": [
              "json"
            ],
            "description": "Must be `json` for JSON schema."
          },
          "source": {
            "type": "string",
            "description": "Source text for the schema.",
            "example": "{\"a\": [1,true]}"
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "A description for this schema."
          }
        },
        "type": "object"
      },
      "bridge_mongodb.put_connector": {
        "required": [
          "database",
          "parameters"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "parameters": {
            "description": "Set of parameters specific for the given type of this MongoDB connector, `mongo_type` can be one of `single` (Standalone), `sharded` (Sharded) or `rs` (Replica Set).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/mongo.connector_rs"
              },
              {
                "$ref": "#/components/schemas/mongo.connector_sharded"
              },
              {
                "$ref": "#/components/schemas/mongo.connector_single"
              }
            ]
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mongodb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_redis.get_single": {
        "required": [
          "command_template",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "command_template": {
            "type": "array",
            "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_single"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "Single mode. Must be set to 'single' when Redis server is running in single mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis database ID.",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "redis_single"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          }
        },
        "type": "object"
      },
      "action_snowflake.aggregation": {
        "required": [
          "container"
        ],
        "properties": {
          "container": {
            "default": {
              "type": "csv"
            },
            "description": "Settings governing the file format of an upload containing aggregated events.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/connector_aggregator.container_csv"
              }
            ]
          },
          "time_interval": {
            "default": "1h",
            "type": "string",
            "description": "Amount of time events will be aggregated in a single file on each node before uploading.",
            "example": "1h"
          },
          "max_records": {
            "default": 1000000,
            "type": "integer",
            "description": "Number of records (events) allowed per each aggregated file. Each aggregated upload will contain no more than that number of events, but may contain less.<br/><br/>  If event rate is high enough, there obviously may be more than one aggregated upload during the same time interval. These uploads will have different, but consecutive sequence numbers, which will be a part of Snowflake staged file name.",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "authn.ldap_deprecated": {
        "required": [
          "backend",
          "base_dn",
          "mechanism",
          "server",
          "username"
        ],
        "properties": {
          "mechanism": {
            "type": "string",
            "enum": [
              "password_based"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "ldap"
            ],
            "description": "Backend type."
          },
          "query_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Timeout for the LDAP query.",
            "example": "32s"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The LDAP default port 389 is used if `[:Port]` is not specified."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "base_dn": {
            "type": "string",
            "description": "The name of the base object entry (or possibly the root) relative to<br/>which the Search is to be performed.",
            "example": "uid=${username},ou=testdevice,dc=emqx,dc=io"
          },
          "filter": {
            "default": "(objectClass=mqttUser)",
            "type": "string",
            "description": "The filter that defines the conditions that must be fulfilled in order<br/>for the Search to match a given entry.<br><br/>The syntax of the filter follows RFC 4515 and also supports placeholders.",
            "example": "(& (objectClass=mqttUser) (uid=${username}))"
          },
          "request_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Sets the maximum time in milliseconds that is used for each individual request.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/ldap.ssl"
          },
          "password_attribute": {
            "default": "userPassword",
            "type": "string",
            "description": "Indicates which attribute is used to represent the user's password."
          },
          "is_superuser_attribute": {
            "default": "isSuperuser",
            "type": "string",
            "description": "Indicates which attribute is used to represent whether the user is a superuser."
          }
        },
        "type": "object"
      },
      "bridge_kafka.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/bridge_sqlserver.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_dashboard_monitor_api.sampler_current_node": {
        "properties": {
          "dropped_msg_rate": {
            "type": "integer",
            "description": "Dropped messages per 10 seconds"
          },
          "sent_msg_rate": {
            "type": "integer",
            "description": "Sent messages per 10 seconds"
          },
          "persisted_rate": {
            "type": "integer",
            "description": "Messages saved to the durable storage per 10 seconds"
          },
          "received_msg_rate": {
            "type": "integer",
            "description": "Dropped messages per 10 seconds"
          },
          "transformation_failed_rate": {
            "type": "integer",
            "description": "Message transformations failed per 10 seconds"
          },
          "transformation_succeeded_rate": {
            "type": "integer",
            "description": "Message transformations succeeded per 10 seconds"
          },
          "validation_failed_rate": {
            "type": "integer",
            "description": "Schema validations failed per 10 seconds"
          },
          "validation_succeeded_rate": {
            "type": "integer",
            "description": "Schema validations succeeded per 10 seconds"
          },
          "disconnected_durable_sessions": {
            "type": "integer",
            "description": "Disconnected durable sessions at the time of sampling. Can only represent an approximate state."
          },
          "subscriptions_durable": {
            "type": "integer",
            "description": "Subscriptions from durable sessions at the time of sampling. Can only represent an approximate state."
          },
          "subscriptions": {
            "type": "integer",
            "description": "Subscriptions at the time of sampling. Can only represent an approximate state."
          },
          "topics": {
            "type": "integer",
            "description": "Count topics at the time of sampling. Can only represent an approximate state."
          },
          "connections": {
            "type": "integer",
            "description": "Sessions at the time of sampling. Can only represent an approximate state."
          },
          "live_connections": {
            "type": "integer",
            "description": "Connections at the time of sampling. Can only represent an approximate state."
          },
          "node_uptime": {
            "type": "integer",
            "description": "Node up time in seconds. Only presented in endpoint: `/monitor_current/nodes/:node`."
          },
          "retained_msg_count": {
            "type": "integer",
            "description": "Retained messages count at the time of sampling. Can only represent an approximate state."
          },
          "shared_subscriptions": {
            "type": "integer",
            "description": "Shared subscriptions count at the time of sampling. Can only represent an approximate state."
          },
          "license_quota": {
            "type": "integer",
            "description": "License quota. AKA: limited max_connections for cluster"
          }
        },
        "type": "object"
      },
      "authn.mongo_single": {
        "required": [
          "backend",
          "collection",
          "database",
          "mechanism",
          "mongo_type",
          "server"
        ],
        "properties": {
          "mechanism": {
            "type": "string",
            "enum": [
              "password_based"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "mongodb"
            ],
            "description": "Backend type."
          },
          "collection": {
            "type": "string",
            "description": "Collection used to store authentication data."
          },
          "filter": {
            "default": {},
            "type": "object",
            "description": "Conditional expression that defines the filter condition in the query.<br/>Filter supports the following placeholders:<br/>- <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting<br/>- <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting",
            "example": {}
          },
          "password_hash_field": {
            "default": "password_hash",
            "type": "string",
            "description": "Document field that contains password hash."
          },
          "salt_field": {
            "default": "salt",
            "type": "string",
            "description": "Document field that contains the password salt."
          },
          "is_superuser_field": {
            "default": "is_superuser",
            "type": "string",
            "description": "Document field that defines if the user has superuser privileges."
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn_hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn_hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn_hash.bcrypt"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          },
          "mongo_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "Standalone instance. Must be set to 'single' when MongoDB server is running in standalone mode."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "schema_validation.validation": {
        "required": [
          "checks",
          "failure_action",
          "name",
          "strategy",
          "topics"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "enable": {
            "default": true,
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "topics": {
            "description": "A single topic filter or list of topic filters that this validation should validate.",
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "strategy": {
            "type": "string",
            "enum": [
              "any_pass",
              "all_pass"
            ],
            "description": "Strategy"
          },
          "failure_action": {
            "type": "string",
            "enum": [
              "drop",
              "disconnect",
              "ignore"
            ],
            "description": "How to proceed if the validation fails.<br/><br/>  <code>drop</code>: The offending message is simply dropped without further processing.<br/>  <code>disconnect</code>: The message is not published, and the publishing client is disconnected.<br/>  <code>ignore</code>: Only the failure is logged and traced.  No other action is taken."
          },
          "log_failure": {
            "default": {},
            "description": "Log level at which failures will be logged.",
            "$ref": "#/components/schemas/schema_validation.log_failure"
          },
          "checks": {
            "type": "array",
            "description": "Checks that will be performed during validation.  They are evaluated in the same order as defined.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/schema_validation.check_protobuf"
                },
                {
                  "$ref": "#/components/schemas/schema_validation.check_avro"
                },
                {
                  "$ref": "#/components/schemas/schema_validation.check_json"
                },
                {
                  "$ref": "#/components/schemas/schema_validation.check_sql"
                }
              ]
            }
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.put_source": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "parameters": {
            "$ref": "#/components/schemas/bridge_mqtt_publisher.ingress_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.source_resource_opts"
          }
        },
        "type": "object"
      },
      "node_eviction.stats": {
        "properties": {
          "connections": {
            "type": "integer"
          },
          "sessions": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "bridge_kafka.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka_producer"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in Kafka."
          },
          "parameters": {
            "description": "Kafka producer configs.",
            "$ref": "#/components/schemas/bridge_kafka.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.post_producer": {
        "required": [
          "name",
          "pubsub_topic",
          "service_account_json",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "JSON containing the GCP Service Account credentials to be used with PubSub.<br/>When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed."
          },
          "attributes_template": {
            "default": [],
            "type": "array",
            "description": "The template for formatting the outgoing message attributes.  Undefined values will be rendered as empty string values.  Empty keys are removed from the attribute map.",
            "items": {
              "$ref": "#/components/schemas/bridge_gcp_pubsub.key_value_pair"
            }
          },
          "ordering_key_template": {
            "default": "",
            "type": "string",
            "description": "The template for formatting the outgoing message ordering key.  Undefined values will be rendered as empty string values.  This value will not be added to the message if it's empty."
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, will send all the available context in JSON format."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to GCP PubSub. All MQTT 'PUBLISH' messages with the topic<br/>matching `local_topic` will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "pubsub_topic": {
            "type": "string",
            "description": "The GCP PubSub topic to publish messages to."
          }
        },
        "type": "object"
      },
      "connector_azure_blob_storage.post_connector": {
        "required": [
          "account_key",
          "account_name",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_blob_storage"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "account_name": {
            "type": "string",
            "description": "Account name for Azure Blob Storage service."
          },
          "account_key": {
            "type": "string",
            "format": "password",
            "description": "Account key for Azure Blob Storage service.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_azure_blob_storage.resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_ds.db": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the durable storage",
            "example": "messages"
          },
          "shards": {
            "type": "array",
            "description": "List of storage shards",
            "items": {
              "$ref": "#/components/schemas/emqx_mgmt_api_ds.db_shard"
            }
          }
        },
        "type": "object"
      },
      "mongo.topology": {
        "properties": {
          "max_overflow": {
            "default": 0,
            "type": "integer",
            "description": "The maximum number of additional workers that can be created when all workers in the pool are busy. This helps to manage temporary spikes in workload by allowing more concurrent connections to the MongoDB server.",
            "minimum": 0
          },
          "overflow_ttl": {
            "type": "string",
            "description": "Period of time before workers that exceed the configured pool size (\"overflow\") to be terminated.",
            "example": "32s"
          },
          "overflow_check_period": {
            "type": "string",
            "description": "Period for checking if there are more workers than configured (\"overflow\").",
            "example": "32s"
          },
          "local_threshold_ms": {
            "type": "string",
            "description": "The size of the latency window for selecting among multiple suitable MongoDB instances.",
            "example": "32s"
          },
          "connect_timeout_ms": {
            "type": "string",
            "description": "The duration to attempt a connection before timing out.",
            "example": "32s"
          },
          "socket_timeout_ms": {
            "type": "string",
            "description": "The duration to attempt to send or to receive on a socket before the attempt times out.",
            "example": "32s"
          },
          "server_selection_timeout_ms": {
            "type": "string",
            "description": "Specifies how long to block for server selection before throwing an exception.",
            "example": "32s"
          },
          "wait_queue_timeout_ms": {
            "type": "string",
            "description": "The maximum duration that a worker can wait for a connection to become available.",
            "example": "32s"
          },
          "heartbeat_frequency_ms": {
            "default": "200s",
            "type": "string",
            "description": "Controls when the driver checks the state of the MongoDB deployment. Specify the interval between checks, counted from the end of the previous check until the beginning of the next one. If the number of connections is increased (which will happen, for example, if you increase the pool size), you may need to increase this period as well to avoid creating too many log entries in the MongoDB log file.",
            "example": "32s"
          },
          "min_heartbeat_frequency_ms": {
            "type": "string",
            "description": "Controls the minimum amount of time to wait between heartbeats.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "emqx.log_throttling": {
        "properties": {
          "time_window": {
            "default": "1m",
            "type": "string",
            "description": "This configuration setting controls the logging behavior for throttled messages,<br/>including, but not limited to messages like 'authorization_permission_denied'.<br/>Within each defined time window, only one instance of a throttled message will be logged to prevent log flooding.<br/>At the conclusion of each time window, a summary log will be generated, detailing the occurrence of any throttled messages during that period.<br/>It's important to note that the shortest effective time window for this setting is 1 second (`1s`).<br/>Should a value lower than `1s` be specified, it will automatically be adjusted to `1s`.",
            "example": "1h"
          }
        },
        "type": "object"
      },
      "authz.mysql": {
        "required": [
          "database",
          "query",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mysql"
            ],
            "description": "Backend type."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this ACL provider"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MySQL default port 3306 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "prepare_statement": {
            "type": "object",
            "description": "Key-value list of SQL prepared statements.",
            "example": {}
          },
          "query": {
            "type": "string",
            "description": "Database query used to retrieve authorization data."
          }
        },
        "type": "object"
      },
      "bridge_http.get": {
        "required": [
          "name",
          "type",
          "url"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "webhook",
              "http"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this action."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "request": {
            "type": "object",
            "deprecated": true,
            "description": "This field is never used, so we deprecated it since 5.3.2.",
            "example": {}
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "url": {
            "type": "string",
            "description": "The URL of the HTTP action.<br/><br/>Template with variables is allowed in the path, but variables cannot be used in the scheme, host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic} </code> is allowed, but<br/><code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code><br/>is not allowed."
          },
          "direction": {
            "type": "string",
            "enum": [
              "egress"
            ],
            "deprecated": true
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to the HTTP server. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "method": {
            "default": "post",
            "type": "string",
            "enum": [
              "post",
              "put",
              "get",
              "delete"
            ],
            "description": "The method of the HTTP request. All the available methods are: post, put, get, delete.<br/><br/>Template with variables is allowed."
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "type": "object",
            "description": "The headers of the HTTP request.<br/><br/>Template with variables is allowed.",
            "example": {},
            "is_template": true
          },
          "body": {
            "type": "string",
            "description": "The body of the HTTP request.<br/><br/>If not provided, the body will be a JSON object of all the available fields.<br/><br/>There, 'all the available fields' means the context of a MQTT message when<br/>this webhook is triggered by receiving a MQTT message (the `local_topic` is set),<br/>or the context of the event when this webhook is triggered by a rule (i.e. this<br/>webhook is used as an action of a rule).<br/><br/>Template with variables is allowed."
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "HTTP request max retry times if failed.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "description": "HTTP request timeout.",
            "example": "32s"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_http.v1_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_sources.position": {
        "required": [
          "position"
        ],
        "properties": {
          "position": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "rocketmq.post": {
        "required": [
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rocketmq"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "template": {
            "default": "",
            "type": "string",
            "description": "Template, the default value is empty. When this value is empty the whole message will be stored in the RocketMQ.<br><br/>            The template can be any valid string with placeholders, example:<br><br/>            - ${id}, ${username}, ${clientid}, ${timestamp}<br><br/>            - {\"id\" : ${id}, \"username\" : ${username}}"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to RocketMQ. All MQTT `PUBLISH` messages with the topic<br/>matching the `local_topic` will be forwarded.<br/><br/>NOTE: if the bridge is used as a rule action, `local_topic` should be left empty otherwise the messages will be duplicated."
          },
          "strategy": {
            "default": "roundrobin",
            "description": "Producer key dispatch strategy, the default is `roundrobin`, also supports placeholders, such as: `clientid`, `messageid`, `username`.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "roundrobin"
                ]
              }
            ]
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "servers": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The RocketMQ default port 9876 is used if `[:Port]` is not specified."
          },
          "namespace": {
            "type": "string",
            "description": "The namespace field MUST be set if you are using the RocketMQ service in<br/>aliyun cloud and also the namespace is enabled,<br/>or if you have configured a namespace in your RocketMQ server.<br/>For RocketMQ in aliyun cloud, the namespace is the instance ID."
          },
          "topic": {
            "default": "TopicTest",
            "type": "string",
            "description": "RocketMQ Topic"
          },
          "access_key": {
            "default": "",
            "type": "string",
            "description": "RocketMQ server `accessKey`."
          },
          "secret_key": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ server `secretKey`.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "security_token": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ Server Security Token",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "Timeout of RocketMQ driver synchronous call.",
            "example": "12m"
          },
          "refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "RocketMQ Topic Route Refresh Interval.",
            "example": "12m"
          },
          "send_buffer": {
            "default": "1024KB",
            "type": "string",
            "description": "The socket send buffer size of the RocketMQ driver client.",
            "example": "32MB"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_s3.s3_connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "exhook.detail_server_info": {
        "required": [
          "name",
          "url"
        ],
        "properties": {
          "metrics": {
            "description": "Metrics information of this server in the current node",
            "$ref": "#/components/schemas/exhook.metrics"
          },
          "node_metrics": {
            "type": "array",
            "description": "Metrics information of this server in all nodes",
            "items": {
              "$ref": "#/components/schemas/exhook.node_metrics"
            }
          },
          "node_status": {
            "type": "array",
            "description": "status of this server in all nodes",
            "items": {
              "$ref": "#/components/schemas/exhook.node_status"
            }
          },
          "hooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/exhook.hook_info"
            }
          },
          "name": {
            "type": "string",
            "description": "Name of the exhook server",
            "example": "default"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable this Exhook server"
          },
          "url": {
            "type": "string",
            "description": "URL of the gRPC server",
            "example": "http://127.0.0.1:9000"
          },
          "request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "The timeout of request gRPC server",
            "example": "12m"
          },
          "failed_action": {
            "default": "deny",
            "type": "string",
            "enum": [
              "deny",
              "ignore"
            ],
            "description": "The value that is returned when the request to the gRPC server fails for any reason"
          },
          "ssl": {
            "$ref": "#/components/schemas/exhook.ssl_conf"
          },
          "socket_options": {
            "default": {
              "keepalive": true,
              "nodelay": true
            },
            "$ref": "#/components/schemas/exhook.socket_options"
          },
          "auto_reconnect": {
            "default": "60s",
            "description": "Whether to automatically reconnect (initialize) the gRPC server.<br/>When gRPC is not available, Exhook tries to request the gRPC service at that interval and reinitialize the list of mounted hooks.",
            "oneOf": [
              {
                "type": "string",
                "example": "12m"
              },
              {
                "type": "string",
                "enum": [
                  false
                ]
              }
            ]
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The process pool size for gRPC client",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "redis.redis_sentinel_connector": {
        "required": [
          "sentinel",
          "servers"
        ],
        "properties": {
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "sentinel",
            "type": "string",
            "enum": [
              "sentinel"
            ],
            "description": "Sentinel mode. Must be set to 'sentinel' when Redis server is running in sentinel mode."
          },
          "sentinel": {
            "type": "string",
            "description": "The cluster name in Redis sentinel mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis database ID.",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "authn.bind_method": {
        "properties": {
          "type": {
            "default": "bind",
            "type": "string",
            "enum": [
              "bind"
            ],
            "description": "Authentication method type."
          },
          "bind_password": {
            "default": "${password}",
            "type": "string",
            "description": "The template for password to bind.",
            "example": "${password}"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.ocpp": {
        "required": [
          "default_heartbeat_interval"
        ],
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "ocpp"
            ],
            "description": "Gateway Name"
          },
          "mountpoint": {
            "default": "ocpp/",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "default_heartbeat_interval": {
            "default": "60s",
            "type": "string",
            "description": "The default Heartbeat time interval",
            "example": "1h"
          },
          "heartbeat_checking_times_backoff": {
            "default": 1,
            "type": "integer",
            "description": "The backoff for heartbeat checking times"
          },
          "upstream": {
            "$ref": "#/components/schemas/gateway_ocpp.upstream"
          },
          "dnstream": {
            "$ref": "#/components/schemas/gateway_ocpp.dnstream"
          },
          "message_format_checking": {
            "default": "disable",
            "description": "Whether to enable message format legality checking.<br/>EMQX checks the message format of the upload stream and download stream against the<br/>format defined in json-schema.<br/>When the check fails, emqx will reply with a corresponding answer message.<br/><br/>The checking strategy can be one of the following values:<br/>- <code>all</code>: check all messages<br/>- <code>upstream_only</code>: check upload stream messages only<br/>- <code>dnstream_only</code>: check download stream messages only<br/>- <code>disable</code>: don't check any messages",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "disable"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "dnstream_only"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "upstream_only"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "all"
                ]
              }
            ]
          },
          "json_schema_dir": {
            "default": "${application_priv}/schemas",
            "type": "string",
            "description": "JSON Schema directory for OCPP message definitions.<br/>Default: ${application}/priv/schemas"
          },
          "json_schema_id_prefix": {
            "default": "urn:OCPP:1.6:2019:12:",
            "type": "string",
            "description": "The ID prefix for the OCPP message schemas."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          },
          "listeners": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.wss_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.ws_listener"
                }
              ]
            }
          }
        },
        "type": "object"
      },
      "emqx_dashboard_monitor_api.sampler": {
        "properties": {
          "time_stamp": {
            "type": "integer",
            "description": "Timestamp",
            "minimum": 0
          },
          "disconnected_durable_sessions": {
            "type": "integer",
            "description": "Disconnected durable sessions at the time of sampling. Can only represent an approximate state."
          },
          "subscriptions_durable": {
            "type": "integer",
            "description": "Subscriptions from durable sessions at the time of sampling. Can only represent an approximate state."
          },
          "subscriptions": {
            "type": "integer",
            "description": "Subscriptions at the time of sampling. Can only represent an approximate state."
          },
          "topics": {
            "type": "integer",
            "description": "Count topics at the time of sampling. Can only represent an approximate state."
          },
          "connections": {
            "type": "integer",
            "description": "Sessions at the time of sampling. Can only represent an approximate state."
          },
          "live_connections": {
            "type": "integer",
            "description": "Connections at the time of sampling. Can only represent an approximate state."
          },
          "received": {
            "type": "integer",
            "description": "Received messages last 10 seconds"
          },
          "sent": {
            "type": "integer",
            "description": "Sent messages last 10 seconds"
          },
          "validation_succeeded": {
            "type": "integer",
            "description": "Schema validations succeeded last 10 seconds"
          },
          "validation_failed": {
            "type": "integer",
            "description": "Schema validations failed last 10 seconds"
          },
          "transformation_succeeded": {
            "type": "integer",
            "description": "Message transformations succeeded last 10 seconds"
          },
          "transformation_failed": {
            "type": "integer",
            "description": "Message transformations failed last 10 seconds"
          },
          "dropped": {
            "type": "integer",
            "description": "Dropped messages last 10 seconds"
          },
          "persisted": {
            "type": "integer",
            "description": "Messages saved to the durable storage last 10 seconds"
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_delivery_dropped": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "delivery_dropped"
            ],
            "description": "Event Type"
          },
          "id": {
            "type": "string",
            "description": "Message ID"
          },
          "reason": {
            "type": "string",
            "description": "The Reason for Dropping"
          },
          "from_clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "from_username": {
            "type": "string",
            "description": "The User Name"
          },
          "clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "payload": {
            "type": "string",
            "description": "The Message Payload"
          },
          "peerhost": {
            "type": "string",
            "description": "The IP Address of the Peer Client"
          },
          "topic": {
            "type": "string",
            "description": "Message Topic"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "The Time that this Message is Received"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "The Message QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "cluster_link.link_metrics_response": {
        "properties": {
          "node_metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cluster_link.node_metrics"
            }
          },
          "metrics": {
            "type": "object",
            "example": {}
          }
        },
        "type": "object"
      },
      "connector_postgres.post_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pgsql"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "Disables the usage of prepared statements in the connections.<br/>Some endpoints, like PGBouncer or Supabase in Transaction mode, do not<br/>support session features such as prepared statements.  For such connections,<br/>this option should be enabled."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "authn.jwt_public_key": {
        "required": [
          "algorithm",
          "mechanism",
          "public_key"
        ],
        "properties": {
          "algorithm": {
            "type": "string",
            "enum": [
              "public-key"
            ],
            "description": "JWT signing algorithm, Supports HMAC (configured as <code>hmac-based</code>) and RSA, ECDSA (configured as <code>public-key</code>)."
          },
          "public_key": {
            "type": "string",
            "description": "The public key used to verify the JWT."
          },
          "mechanism": {
            "type": "string",
            "enum": [
              "jwt"
            ],
            "description": "Authentication mechanism."
          },
          "acl_claim_name": {
            "default": "acl",
            "type": "string",
            "description": "The JWT claim designated for accessing ACL (Access Control List) rules can be specified,<br/>such as using the `acl` claim. A typical decoded JWT with this claim might appear as:<br/>`{\"username\": \"user1\", \"acl\": ...}`.<br/><br/>Supported ACL Rule Formats:<br/><br/>- Object Format:<br/>  Utilizes action types pub (publish), sub (subscribe), or all (both publish and subscribe).<br/>  The value is a list of topic filters.<br/>  Example: `{\"pub\": [\"topic1\"], \"sub\": [], \"all\": [\"${username}/#\"]}`.<br/>  This example signifies that the token owner can publish to topic1 and perform both publish and subscribe<br/>  actions on topics starting with their username.<br/>  Note: In this format, if no topic matches, the action is denied, and the authorization process terminates.<br/><br/>- Array Format (resembles File-Based ACL Rules):<br/>  Example: `[{\"permission\": \"allow\", \"action\": \"all\", \"topic\": \"${username}/#\"}]`.<br/>  Additionally, the `pub` or `publish` action rules can be extended with `qos` and `retain` field,<br/>  and `sub` or `subscribe` action rules can be extended with a `qos` field.<br/>  Note: Here, if no rule matches, the action is not immediately denied.<br/>  The process continues to other configured authorization sources,<br/>  and ultimately falls back to the default permission in config `authorization.no_match`.<br/><br/>The ACL claim utilizes MQTT topic wildcard matching rules for publishing or subscribing.<br/>A special syntax for the 'subscribe' action allows the use of `eq` for an exact match.<br/>For instance, `eq t/#` permits or denies subscription to `t/#`, but not to `t/1`."
          },
          "verify_claims": {
            "default": {},
            "type": "object",
            "description": "A list of custom claims to validate. The allowed formats are the following:<br/>A map where claim names are map keys and expected values are map values:<br/> <code>{ claim_name = \"${username}\", ...}</code>.<br/><br/>A list of maps with <code>name</code> (claim name) and <code>value</code> (expected claim value) keys:<br/> <code>[{name = \"claim_name\", value = \"${username}\"}, ...]</code>.<br/><br/>Values can use the following placeholders:<br/>- <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting<br/>- <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting<br/><br/>Authentication will verify that the value of claims in the JWT (taken from the Password field) matches what is required in <code>verify_claims</code>.",
            "example": {}
          },
          "disconnect_after_expire": {
            "default": true,
            "type": "boolean",
            "description": "Disconnect the client after the token expires."
          },
          "from": {
            "default": "password",
            "type": "string",
            "enum": [
              "username",
              "password"
            ],
            "description": "Field to take JWT from."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          }
        },
        "type": "object"
      },
      "bridge_redis.get_cluster": {
        "required": [
          "command_template",
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "command_template": {
            "type": "array",
            "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_cluster"
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "cluster",
            "type": "string",
            "enum": [
              "cluster"
            ],
            "description": "Cluster mode. Must be set to 'cluster' when Redis server is running in clustered mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "redis_cluster"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          }
        },
        "type": "object"
      },
      "bridge_kinesis.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kinesis"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/bridge_kinesis.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kinesis.action_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_authn_api.response_user": {
        "required": [
          "user_id"
        ],
        "properties": {
          "user_id": {
            "type": "string"
          },
          "is_superuser": {
            "default": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "bridge_kafka.producer_kafka_ext_headers": {
        "required": [
          "kafka_ext_header_key",
          "kafka_ext_header_value"
        ],
        "properties": {
          "kafka_ext_header_key": {
            "type": "string",
            "description": "Key of the header. Placeholders in format of ${var} are supported."
          },
          "kafka_ext_header_value": {
            "type": "string",
            "description": "Value of the header. Placeholders in format of ${var} are supported."
          }
        },
        "type": "object"
      },
      "sso.ldap": {
        "required": [
          "backend",
          "base_dn",
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Whether to enable this backend."
          },
          "backend": {
            "type": "string",
            "enum": [
              "ldap"
            ],
            "description": "Backend type."
          },
          "query_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Timeout for the LDAP query.",
            "example": "32s"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The LDAP default port 389 is used if `[:Port]` is not specified."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "base_dn": {
            "type": "string",
            "description": "The name of the base object entry (or possibly the root) relative to<br/>which the Search is to be performed."
          },
          "filter": {
            "default": "(& (objectClass=person) (uid=${username}))",
            "type": "string",
            "description": "The filter for matching users in LDAP is by default `(&(objectClass=person)(uid=${username}))`. For Active Directory, it should be set to `(&(objectClass=user)(sAMAccountName=${username}))` by default. Please refer to [LDAP Filters](https://ldap.com/ldap-filters/) for more details.",
            "example": "(& (objectClass=person) (uid=${username}))"
          },
          "request_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Sets the maximum time in milliseconds that is used for each individual request.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/ldap.ssl"
          }
        },
        "type": "object"
      },
      "rabbitmq.post": {
        "required": [
          "name",
          "password",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rabbitmq"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "default": "localhost",
            "type": "string",
            "description": "The RabbitMQ server address that you want to connect to (for example, localhost)."
          },
          "port": {
            "default": 5672,
            "maximum": 65535,
            "type": "integer",
            "description": "The RabbitMQ server address that you want to connect to (for example, localhost).",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username used to authenticate with the RabbitMQ server."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The size of the connection pool.",
            "minimum": 1
          },
          "timeout": {
            "default": "5s",
            "type": "string",
            "description": "The timeout for waiting on the connection to be established.",
            "example": "32s"
          },
          "virtual_host": {
            "default": "/",
            "type": "string",
            "description": "The virtual host to use when connecting to the RabbitMQ server."
          },
          "heartbeat": {
            "default": "30s",
            "type": "string",
            "description": "The interval for sending heartbeat messages to the RabbitMQ server.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/rabbitmq.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_timescale.get": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "pgsql"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.rule_test": {
        "required": [
          "sql"
        ],
        "properties": {
          "context": {
            "default": {},
            "description": "The context of the event for testing",
            "oneOf": [
              {
                "$ref": "#/components/schemas/rule_engine.ctx_message_transformation_failed"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_schema_validation_failed"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_delivery_dropped"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_bridge_mqtt"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_check_authn_complete"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_check_authz_complete"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_connack"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_disconnected"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_connected"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_dropped"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_acked"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_delivered"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_unsub"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_sub"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_pub"
              }
            ]
          },
          "sql": {
            "type": "string",
            "description": "The SQL of the rule for testing"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.get_connector": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "endpoint",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kinesis"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "Access Key ID for connecting to Amazon Kinesis."
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "AWS Secret Access Key for connecting to Amazon Kinesis.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "endpoint": {
            "type": "string",
            "description": "The url of Amazon Kinesis endpoint.",
            "example": "https://kinesis.us-east-1.amazonaws.com"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kinesis.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "authn_hash.bcrypt_rw": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "bcrypt"
            ],
            "description": "BCRYPT password hashing."
          },
          "salt_rounds": {
            "default": 10,
            "maximum": 10,
            "type": "integer",
            "description": "Work factor for BCRYPT password generation.",
            "minimum": 5,
            "example": 10
          }
        },
        "type": "object"
      },
      "exhook.metrics": {
        "properties": {
          "succeed": {
            "type": "integer",
            "description": "The number of times the hooks execution successful"
          },
          "failed": {
            "type": "integer",
            "description": "The number of times the hook execution failed"
          },
          "rate": {
            "type": "integer",
            "description": "The call rate of hooks"
          },
          "max_rate": {
            "type": "integer",
            "description": "Maximum call rate of hooks"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_clients.clients": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/emqx_mgmt_api_clients.client"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/public.meta"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.put_connector": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "region",
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "url": {
            "type": "string",
            "description": "The url of DynamoDB endpoint."
          },
          "region": {
            "type": "string",
            "description": "Region of AWS Dynamo"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "Access Key ID for connecting to DynamoDB."
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "AWS Secret Access Key for connecting to DynamoDB.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_dynamo.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "schema_registry.confluent_schema_registry": {
        "required": [
          "url"
        ],
        "properties": {
          "type": {
            "default": "confluent",
            "type": "string",
            "enum": [
              "confluent"
            ],
            "description": "External Schema Registry Type"
          },
          "url": {
            "type": "string",
            "description": "URL endpoint for external registry."
          },
          "auth": {
            "default": "none",
            "description": "Authentication options for accessing external registry.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/schema_registry.confluent_schema_registry_auth_basic"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "emqx_authn_api.request_authn_order": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Authenticator ID.",
            "example": "password_based:built_in_database"
          }
        },
        "type": "object"
      },
      "connector_syskeeper_proxy.post": {
        "required": [
          "listen",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "syskeeper_proxy"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "listen": {
            "type": "string",
            "description": "The listening address for this Syskeeper proxy server"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The number of the acceptors",
            "minimum": 0
          },
          "handshake_timeout": {
            "default": "10s",
            "type": "string",
            "description": "The maximum to wait for the handshake when a connection is created",
            "example": "32s"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_syskeeper_proxy.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "schema_registry.avro": {
        "required": [
          "source",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "avro"
            ],
            "description": "Must be `avro` for Avro schema."
          },
          "source": {
            "type": "string",
            "description": "Source text for the schema.",
            "example": "{\"a\": [1,true]}"
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "A description for this schema."
          }
        },
        "type": "object"
      },
      "gcp_pubsub_consumer.put_source": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "parameters": {
            "description": "Source configs.",
            "$ref": "#/components/schemas/gcp_pubsub_consumer.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/gcp_pubsub_consumer.source_resource_opts"
          }
        },
        "type": "object"
      },
      "dashboard.listeners": {
        "properties": {
          "http": {
            "description": "TCP listeners",
            "$ref": "#/components/schemas/dashboard.http"
          },
          "https": {
            "description": "SSL listeners",
            "$ref": "#/components/schemas/dashboard.https"
          }
        },
        "type": "object"
      },
      "listeners.tcp_required_bind": {
        "required": [
          "bind",
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "tcp"
            ],
            "description": "Listener type"
          },
          "running": {
            "type": "boolean",
            "description": "Listener status"
          },
          "id": {
            "type": "string",
            "description": "Listener id"
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable listener."
          },
          "bind": {
            "default": 1883,
            "type": "string",
            "description": "IP address and port for the listening socket.",
            "example": "127.0.0.1:80"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The size of the listener's receiving pool.",
            "minimum": 1
          },
          "max_connections": {
            "default": "infinity",
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message<br/>is delivered to the subscriber. The mountpoint is a way that users can use<br/>to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`, then the client actually subscribes to the topic<br/>`some_tenant/t`. Similarly, if another client B (connected to the same listener<br/>as the client A) sends a message to topic `t`, the message is routed<br/>to all the clients subscribed `some_tenant/t`, so client A will receive the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>: clientid<br/>  - <code>${username}</code>: username"
          },
          "zone": {
            "default": "default",
            "type": "string",
            "description": "The configuration zone to which the listener belongs.<br/>Clients connected to this listener will inherit zone-settings created under this zone name.<br/><br/>A zone can override the configs under below root names:<br/>- `mqtt`<br/>- `force_shutdown`<br/>- `force_gc`<br/>- `flapping_detect`<br/>- `durable_sessions`"
          },
          "enable_authn": {
            "default": true,
            "type": "string",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "description": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication<br/>process goes through the configured authentication chain.<br/>When set to <code>false</code>, any client (with or without username/password) is allowed to connect.<br/>When set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be<br/>denied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off<br/>anonymous clients early."
          },
          "max_conn_rate": {
            "default": "infinity",
            "type": "string",
            "description": "Used to limit the rate at which the current listener accepts connections.<br/><br/>Once the limit is reached, EMQX will pause fetching connections from the Accept queue, thereby delaying or rejecting new connections.<br/><br/>For example:<br/><br/>- `1000/s`: Only accepts 1000 connections per second.<br/>- `1000/10s`: Only accepts 1000 connections every 10 seconds.",
            "example": "1000/s"
          },
          "messages_rate": {
            "type": "string",
            "description": "Used to limit the number of messages a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>For example:<br/><br/>- `500/s`: Only 500 messages will be received per second, and the remaining messages will be delayed.<br/>- `500/10s`: Only 500 messages will be received every 10 seconds and the remaining messages will be delayed.",
            "example": "1000/s"
          },
          "bytes_rate": {
            "type": "string",
            "description": "Used to limit the number of bytes a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>The unit of the bytes could be: B, KB, MB, GB.<br/><br/>For example:<br/><br/>- `500KB/s`: Only 500 kilobytes per second will be received, and the remaining bytes will be delayed.<br/>- `500MB/10s`: Only 500 megabytes will be received every 10 seconds, and the remaining bytes will be delayed.",
            "example": "100MB/s"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses. The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP, this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/><br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "example": "12m"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/emqx.tcp_opts"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_influxdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_s3.post_connector": {
        "required": [
          "host",
          "name",
          "port",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "s3"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "access_key_id": {
            "type": "string",
            "description": "The access key ID of the S3 bucket."
          },
          "secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "The secret access key of the S3 bucket.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "host": {
            "type": "string",
            "description": "The host of the S3 endpoint."
          },
          "port": {
            "type": "integer",
            "description": "The port of the S3 endpoint.",
            "minimum": 1
          },
          "transport_options": {
            "description": "Options for the HTTP transport layer used by the S3 client.",
            "$ref": "#/components/schemas/s3.transport_options"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_s3.s3_connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in Azure Event Hubs."
          },
          "parameters": {
            "description": "Azure Event Hubs producer configs.",
            "$ref": "#/components/schemas/bridge_azure_event_hub.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "action_snowflake.aggreg_parameters": {
        "required": [
          "aggregation",
          "database",
          "mode",
          "pipe",
          "pipe_user",
          "private_key",
          "schema",
          "stage"
        ],
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "aggregated"
            ],
            "description": "Enables time-based aggregation of incoming events and uploading them to the Snowflake as a single object.  This aggregation is done independently by each node in the cluster."
          },
          "aggregation": {
            "description": "Set of parameters governing the aggregation process.",
            "$ref": "#/components/schemas/action_snowflake.aggregation"
          },
          "private_key": {
            "type": "string",
            "format": "password",
            "description": "The private key configured for the Pipe User.  This supports the input formats below:<br/>- Plain key: Enter the private key contents in PEM format directly as a string value.<br/>- File Path: Specify the path to a file that contains the private key. Ensure the path starts with <code>file://</code>.  The file path must be the same on all nodes in the cluster.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "type": "string",
            "description": "Name of the Database that contains the Snowflake resources."
          },
          "schema": {
            "type": "string",
            "description": "Name of the Schema that contains the Snowflake resources."
          },
          "stage": {
            "type": "string",
            "description": "Name of the Stage that'll be used for loading data files into Snowflake."
          },
          "pipe": {
            "type": "string",
            "description": "Name of the Pipe that'll be used to ingest data into the table."
          },
          "pipe_user": {
            "type": "string",
            "description": "A username which has a role with permissions over the Pipe to be used.  The minimum permissions are `operate` and `monitor`."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "max_retries": {
            "default": 3,
            "type": "integer",
            "description": "Max retry attempts if there's an error when sending an HTTP request.",
            "minimum": 0
          },
          "proxy": {
            "default": "none",
            "description": "Proxy configuration.  Only plain HTTP proxies are currently supported (no HTTPS).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/action_snowflake.proxy_config"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "connector.resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.post_connector": {
        "required": [
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "datalayers"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "default": "127.0.0.1:8361",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The Datalayers default port 8361 is used if `[:Port]` is not specified."
          },
          "parameters": {
            "description": "Set of parameters specific for the given type of this Datalayers connector.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/connector_datalayers.datalayers_influxdb_v1_parameters"
              }
            ]
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_datalayers.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only."
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "gateway.exproto_grpc_handler": {
        "required": [
          "address",
          "service_name"
        ],
        "properties": {
          "address": {
            "type": "string",
            "description": "gRPC server address."
          },
          "service_name": {
            "default": "ConnectionUnaryHandler",
            "description": "The service name to handle the connection events.<br/>In the initial version, we expected to use streams to improve the efficiency<br/>of requests in `ConnectionHandler`. But unfortunately, events between different<br/>streams are out of order. It causes the `OnSocketCreated` event to may arrive<br/>later than `OnReceivedBytes`.<br/>So we added the `ConnectionUnaryHandler` service since v5.0.25 and forced<br/>the use of Unary in it to avoid ordering problems.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "ConnectionUnaryHandler"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "ConnectionHandler"
                ]
              }
            ]
          },
          "ssl_options": {
            "description": "SSL configuration for the gRPC client.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.rule_apply_test": {
        "properties": {
          "context": {
            "default": {},
            "description": "The context of the event for testing",
            "oneOf": [
              {
                "$ref": "#/components/schemas/rule_engine.ctx_message_transformation_failed"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_schema_validation_failed"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_delivery_dropped"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_bridge_mqtt"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_check_authn_complete"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_check_authz_complete"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_connack"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_disconnected"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_connected"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_dropped"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_acked"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_delivered"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_unsub"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_sub"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_pub"
              }
            ]
          },
          "stop_action_after_template_rendering": {
            "default": true,
            "type": "boolean",
            "description": "Set this to true if the action should be stopped after its template has been rendered (default is true)."
          }
        },
        "type": "object"
      },
      "emqx.event_names": {
        "properties": {
          "client_connected": {
            "default": true,
            "type": "boolean",
            "description": "Enable to publish client connected event messages"
          },
          "client_disconnected": {
            "default": true,
            "type": "boolean",
            "description": "Enable to publish client disconnected event messages."
          },
          "client_subscribed": {
            "default": false,
            "type": "boolean",
            "description": "Enable to publish event message that client subscribed a topic successfully."
          },
          "client_unsubscribed": {
            "default": false,
            "type": "boolean",
            "description": "Enable to publish event message that client unsubscribed a topic successfully."
          }
        },
        "type": "object"
      },
      "bridge_mysql.get": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "mysql"
            ],
            "description": "The action type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier of the action."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this action"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to MySQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MySQL default port 3306 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "action_azure_blob_storage.aggreg_parameters": {
        "required": [
          "aggregation",
          "blob",
          "container",
          "mode"
        ],
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "aggregated"
            ],
            "description": "Enables time-based aggregation of incoming events and uploading them to the Azure Blob Storage service as a single object."
          },
          "aggregation": {
            "description": "Set of parameters governing the aggregation process.",
            "$ref": "#/components/schemas/action_azure_blob_storage.aggregation"
          },
          "container": {
            "type": "string",
            "description": "The Azure Blob Storage container name. Does not support templates."
          },
          "blob": {
            "type": "string",
            "description": "Template for the Azure Blob Storage blob name of an aggregated upload.<br/><br/>  Template may contain placeholders for the following variables:<br/>  <ul><br/>  <li><code>${action}</code>: name of the action (required).</li><br/>  <li><code>${node}</code>: name of the EMQX node conducting the upload (required).</li><br/>  <li><code>${datetime.{format}}</code>: date and time when aggregation started, formatted according to the <code>{format}</code> string (required):<br/>      <ul><br/>      <li><code>${datetime.rfc3339utc}</code>: RFC3339-formatted date and time in UTC,</li><br/>      <li><code>${datetime.rfc3339}</code>: RFC3339-formatted date and time in local timezone,</li><br/>      <li><code>${datetime.unix}</code>: Unix timestamp.</li><br/>      </ul><br/>  </li><br/>  <li><code>${datetime_until.{format}}</code>: date and time when aggregation ended, with the same formatting options.</li><br/>  <li><code>${sequence}</code>: sequence number of the aggregated upload within the same time interval (required).</li><br/>  </ul><br/>  All other placeholders are considered invalid. Note that placeholders marked as required will be added as a path suffix to the Azure Blob Storage blob name if they are missing from the template."
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.put_connector": {
        "required": [
          "database",
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "driver": {
            "default": "ms-sql",
            "type": "string",
            "description": "SQL Server Driver Name"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The SQL Server default port 1433 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "sa",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_sqlserver.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "cluster_link.node_metrics": {
        "properties": {
          "node": {
            "type": "string"
          },
          "metrics": {
            "type": "object",
            "example": {}
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_publish.bad_request": {
        "properties": {
          "code": {
            "type": "string",
            "description": "BAD_REQUEST",
            "example": 144
          },
          "message": {
            "type": "string",
            "description": "Describes the failure reason in detail.",
            "example": "topic_name_invalid"
          }
        },
        "type": "object"
      },
      "rocketmq.put_connector": {
        "required": [
          "servers"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "servers": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The RocketMQ default port 9876 is used if `[:Port]` is not specified."
          },
          "namespace": {
            "type": "string",
            "description": "The namespace field MUST be set if you are using the RocketMQ service in<br/>aliyun cloud and also the namespace is enabled,<br/>or if you have configured a namespace in your RocketMQ server.<br/>For RocketMQ in aliyun cloud, the namespace is the instance ID."
          },
          "access_key": {
            "default": "",
            "type": "string",
            "description": "RocketMQ server `accessKey`."
          },
          "secret_key": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ server `secretKey`.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "security_token": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ Server Security Token",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/rocketmq.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx.tcp_opts": {
        "properties": {
          "active_n": {
            "default": 100,
            "type": "integer",
            "description": "Specify the {active, N} option for this Socket.<br/><br/>See: https://erlang.org/doc/man/inet.html#setopts-2",
            "minimum": 0
          },
          "backlog": {
            "default": 1024,
            "type": "integer",
            "description": "TCP backlog defines the maximum length that the queue of<br/>pending connections can grow to.",
            "minimum": 1
          },
          "send_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The maximum time a process is suspended for sending data to a busy socket. After the timeout, the TCP connection and the process will be closed.<br/><br/>The process is unsuspended only when the socket is unbusy, that is, the data accumulated in the Erlang internal buffer drops from the high watermark (specified by `high_watermark`) to the low watermark (default 4 KB).<br/><br/>Therefore, `(high_watermark - 4 KB) / send_timeout` must be a suitable message outflow speed, otherwise the suspended process will never be able to recover before the timeout.",
            "example": "12m"
          },
          "send_timeout_close": {
            "default": true,
            "type": "boolean",
            "description": "Close the connection if send timeout."
          },
          "recbuf": {
            "type": "string",
            "description": "The TCP receive buffer (OS kernel) for the connections.",
            "example": "2KB"
          },
          "sndbuf": {
            "type": "string",
            "description": "The TCP send buffer (OS kernel) for the connections.",
            "example": "4KB"
          },
          "buffer": {
            "default": "4KB",
            "type": "string",
            "description": "The size of the user-space buffer used by the driver.",
            "example": "4KB"
          },
          "high_watermark": {
            "default": "1MB",
            "type": "string",
            "description": "When EMQX tries to send more data than the OS has allocated for the socket's send buffer, the remaining data will be temporarily stored in Erlang's internal buffer and then sent in the background.<br/><br/>If the amount of data queued in the internal buffer exceeds `high_watermark`, the corresponding socket will be marked as busy.<br/><br/>The process sending data to this busy socket will be suspended until the socket is no longer busy, or the suspension time exceeds `send_timeout`.<br/><br/>The socket will only be unbusy when the data in the internal buffer is below the low watermark.<br/><br/>While the process is suspended, the message queue of the process may accumulate, see `max_mailbox_len` for details.",
            "example": "32MB"
          },
          "nodelay": {
            "default": true,
            "type": "boolean",
            "description": "The TCP_NODELAY flag for the connections."
          },
          "reuseaddr": {
            "default": true,
            "type": "boolean",
            "description": "The SO_REUSEADDR flag for the connections."
          },
          "keepalive": {
            "default": "none",
            "type": "string",
            "description": "Enable TCP keepalive for MQTT connections over TCP or SSL.<br/>The value is three comma separated numbers in the format of 'Idle,Interval,Probes'<br/> - Idle: The number of seconds a connection needs to be idle before the server begins to send out keep-alive probes (Linux default 7200).<br/> - Interval: The number of seconds between TCP keep-alive probes (Linux default 75).<br/> - Probes: The maximum number of TCP keep-alive probes to send before giving up and killing the connection if no response is obtained from the other end (Linux default 9).<br/>For example \"240,30,5\" means: EMQX should start sending TCP keepalive probes after the connection is in idle for 240 seconds, and the probes are sent every 30 seconds until a response is received from the MQTT client, if it misses 5 consecutive responses, EMQX should close the connection.<br/>Default: 'none'"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "dynamo"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/bridge_dynamo.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_producer.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action configs.",
            "$ref": "#/components/schemas/gcp_pubsub_producer.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "listeners.with_name_quic_required_bind": {
        "required": [
          "bind",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "quic"
            ],
            "description": "Listener type"
          },
          "running": {
            "type": "boolean",
            "description": "Listener status"
          },
          "name": {
            "type": "string",
            "description": "Listener name"
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          },
          "ciphers": {
            "default": [
              "TLS_AES_256_GCM_SHA384",
              "TLS_AES_128_GCM_SHA256",
              "TLS_CHACHA20_POLY1305_SHA256"
            ],
            "type": "array",
            "description": "This config holds TLS cipher suite names separated by comma,<br/>or as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in which the<br/>client and server encrypts information over the network connection.<br/>Selecting a good cipher suite is critical for the<br/>application's data security, confidentiality and performance.<br/><br/>The names should be in OpenSSL string format (not RFC format).<br/>All default values and examples provided by EMQX config<br/>documentation are all in OpenSSL format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/><br/><br/>NOTE: QUIC listener supports only 'tlsv1.3' ciphers",
            "items": {
              "type": "string"
            }
          },
          "ssl_options": {
            "description": "TLS options for QUIC transport",
            "$ref": "#/components/schemas/emqx.listener_quic_ssl_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable listener."
          },
          "bind": {
            "default": 14567,
            "type": "string",
            "description": "IP address and port for the listening socket.",
            "example": "127.0.0.1:80"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The size of the listener's receiving pool.",
            "minimum": 1
          },
          "max_connections": {
            "default": "infinity",
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message<br/>is delivered to the subscriber. The mountpoint is a way that users can use<br/>to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`, then the client actually subscribes to the topic<br/>`some_tenant/t`. Similarly, if another client B (connected to the same listener<br/>as the client A) sends a message to topic `t`, the message is routed<br/>to all the clients subscribed `some_tenant/t`, so client A will receive the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>: clientid<br/>  - <code>${username}</code>: username"
          },
          "zone": {
            "default": "default",
            "type": "string",
            "description": "The configuration zone to which the listener belongs.<br/>Clients connected to this listener will inherit zone-settings created under this zone name.<br/><br/>A zone can override the configs under below root names:<br/>- `mqtt`<br/>- `force_shutdown`<br/>- `force_gc`<br/>- `flapping_detect`<br/>- `durable_sessions`"
          },
          "enable_authn": {
            "default": true,
            "type": "string",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "description": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication<br/>process goes through the configured authentication chain.<br/>When set to <code>false</code>, any client (with or without username/password) is allowed to connect.<br/>When set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be<br/>denied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off<br/>anonymous clients early."
          },
          "max_conn_rate": {
            "default": "infinity",
            "type": "string",
            "description": "Used to limit the rate at which the current listener accepts connections.<br/><br/>Once the limit is reached, EMQX will pause fetching connections from the Accept queue, thereby delaying or rejecting new connections.<br/><br/>For example:<br/><br/>- `1000/s`: Only accepts 1000 connections per second.<br/>- `1000/10s`: Only accepts 1000 connections every 10 seconds.",
            "example": "1000/s"
          },
          "messages_rate": {
            "type": "string",
            "description": "Used to limit the number of messages a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>For example:<br/><br/>- `500/s`: Only 500 messages will be received per second, and the remaining messages will be delayed.<br/>- `500/10s`: Only 500 messages will be received every 10 seconds and the remaining messages will be delayed.",
            "example": "1000/s"
          },
          "bytes_rate": {
            "type": "string",
            "description": "Used to limit the number of bytes a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>The unit of the bytes could be: B, KB, MB, GB.<br/><br/>For example:<br/><br/>- `500KB/s`: Only 500 kilobytes per second will be received, and the remaining bytes will be delayed.<br/>- `500MB/10s`: Only 500 megabytes will be received every 10 seconds, and the remaining bytes will be delayed.",
            "example": "100MB/s"
          }
        },
        "type": "object"
      },
      "action_snowflake.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "snowflake"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Set of parameters for the action.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/action_snowflake.aggreg_parameters"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/action_snowflake.action_resource_opts"
          }
        },
        "type": "object"
      },
      "authz.mongo_sharded": {
        "required": [
          "collection",
          "database",
          "mongo_type",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mongodb"
            ],
            "description": "Backend type."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this ACL provider"
          },
          "collection": {
            "type": "string",
            "description": "`MongoDB` collection containing the authorization data."
          },
          "filter": {
            "default": {},
            "type": "object",
            "description": "Conditional expression that defines the filter condition in the query.<br/>Filter supports the following placeholders<br/><br/> - <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting<br/><br/> - <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting",
            "example": {}
          },
          "mongo_type": {
            "default": "sharded",
            "type": "string",
            "enum": [
              "sharded"
            ],
            "description": "Sharded cluster. Must be set to 'sharded' when MongoDB server is running in 'sharded' mode."
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "connector_influxdb.connector_influxdb_api_v1": {
        "required": [
          "database",
          "influxdb_type"
        ],
        "properties": {
          "influxdb_type": {
            "default": "influxdb_api_v1",
            "type": "string",
            "enum": [
              "influxdb_api_v1"
            ],
            "description": "InfluxDB's protocol. Support InfluxDB v1.8 and before."
          },
          "database": {
            "type": "string",
            "description": "InfluxDB database."
          },
          "username": {
            "type": "string",
            "description": "InfluxDB username."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB password.",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "exhook.list_hook_info": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The hook's name"
          },
          "params": {
            "description": "The parameters used when the hook is registered",
            "properties": {
              "$name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "metrics": {
            "description": "Metrics information of this hook in the current node",
            "$ref": "#/components/schemas/exhook.metrics"
          },
          "node_metrics": {
            "type": "array",
            "description": "Metrics information of this hook in all nodes",
            "items": {
              "$ref": "#/components/schemas/exhook.node_metrics"
            }
          }
        },
        "type": "object"
      },
      "action_snowflake.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "snowflake"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Set of parameters for the action.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/action_snowflake.aggreg_parameters"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/action_snowflake.action_resource_opts"
          }
        },
        "type": "object"
      },
      "pulsar.post": {
        "required": [
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pulsar"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "servers": {
            "type": "string",
            "description": "A comma separated list of Pulsar URLs in the form <code>scheme://host[:port]</code><br/> for the client to connect to. The supported schemes are <code>pulsar://</code> (default)<br/> and <code>pulsar+ssl://</code>. The default port is 6650."
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_token"
              },
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_basic"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/pulsar.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_redis.post_cluster": {
        "required": [
          "command_template",
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "command_template": {
            "type": "array",
            "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_cluster"
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "cluster",
            "type": "string",
            "enum": [
              "cluster"
            ],
            "description": "Cluster mode. Must be set to 'cluster' when Redis server is running in clustered mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "redis_cluster"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          }
        },
        "type": "object"
      },
      "iotdb.get_restapi": {
        "required": [
          "base_url",
          "name",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "iotdb"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_http.connector_resource_opts"
          },
          "driver": {
            "default": "restapi",
            "type": "string",
            "enum": [
              "restapi"
            ],
            "description": "The drivers for IoTDB connector, can be:<br/>- rest<br/>- thrift"
          },
          "base_url": {
            "type": "string",
            "description": "The base URL of the external IoTDB service's REST interface.",
            "example": "http://127.0.0.1"
          },
          "iotdb_version": {
            "default": "v1.3.x",
            "type": "string",
            "enum": [
              "v1.3.x",
              "v1.1.x",
              "v1.0.x",
              "v0.13.x"
            ],
            "description": "The version of the IoTDB system to connect to."
          },
          "authentication": {
            "default": "auth_basic",
            "description": "Authentication configuration",
            "oneOf": [
              {
                "$ref": "#/components/schemas/iotdb.authentication"
              }
            ]
          }
        },
        "type": "object"
      },
      "message_transformation.transformation": {
        "required": [
          "failure_action",
          "name",
          "topics"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "enable": {
            "default": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "topics": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "failure_action": {
            "type": "string",
            "enum": [
              "drop",
              "disconnect",
              "ignore"
            ]
          },
          "log_failure": {
            "default": {},
            "$ref": "#/components/schemas/message_transformation.log_failure"
          },
          "payload_decoder": {
            "default": {
              "type": "none"
            },
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "payload_serde_protobuf"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "payload_serde_avro"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "payload_serde_json"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "payload_serde_none"
                ]
              }
            ]
          },
          "payload_encoder": {
            "default": {
              "type": "none"
            },
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "payload_serde_protobuf"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "payload_serde_avro"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "payload_serde_json"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "payload_serde_none"
                ]
              }
            ]
          },
          "operations": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/message_transformation.operation"
            }
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_listeners.udp_listener": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Listener ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "udp"
            ],
            "description": "Listener Type"
          },
          "name": {
            "type": "string",
            "description": "Listener Name"
          },
          "running": {
            "type": "boolean",
            "description": "Listener Running status"
          },
          "health_check": {
            "description": "Some Cloud platform use a `request-reply` mechanism to check whether a UDP port is healthy, here can configure this pair.",
            "$ref": "#/components/schemas/gateway.udp_health_check"
          },
          "udp_options": {
            "$ref": "#/components/schemas/gateway.udp_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable the listener."
          },
          "bind": {
            "type": "string",
            "description": "The IP address and port that the listener will bind.",
            "example": "127.0.0.1:80"
          },
          "max_connections": {
            "default": 1024,
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "integer",
                "minimum": 1
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "type": "integer",
            "description": "Maximum connections per second."
          },
          "enable_authn": {
            "default": true,
            "type": "boolean",
            "description": "Set <code>true</code> (default) to enable client authentication on this listener.<br/>When set to <code>false</code> clients will be allowed to connect without authentication."
          },
          "mountpoint": {
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "access_rules": {
            "default": [],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses.<br/>The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "description": "listener status",
            "$ref": "#/components/schemas/listeners.status"
          },
          "node_status": {
            "type": "array",
            "description": "listener status of each node in the cluster",
            "items": {
              "$ref": "#/components/schemas/listeners.node_status"
            }
          }
        },
        "type": "object"
      },
      "emqx_authz_api_mnesia.rule_item": {
        "required": [
          "action",
          "permission",
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Rule on specific topic",
            "example": "test/topic/1"
          },
          "permission": {
            "type": "string",
            "enum": [
              "allow",
              "deny"
            ],
            "description": "Permission",
            "example": "allow"
          },
          "action": {
            "type": "string",
            "enum": [
              "publish",
              "subscribe",
              "all"
            ],
            "description": "Authorized action (publish/subscribe/all)",
            "example": "publish"
          },
          "qos": {
            "default": [
              0,
              1,
              2
            ],
            "type": "array",
            "description": "QoS of authorized action",
            "items": {
              "maximum": 2,
              "type": "integer",
              "minimum": 0,
              "example": 0
            }
          },
          "retain": {
            "default": "all",
            "description": "Retain flag of authorized action",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "string",
                "enum": [
                  "all"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge_pulsar.producer_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "1s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "confluent.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "confluent_producer"
            ],
            "description": "The type of the action."
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable description of the action."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in Confluent."
          },
          "parameters": {
            "description": "Confluent producer configs.",
            "$ref": "#/components/schemas/confluent.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.get_producer": {
        "required": [
          "bootstrap_hosts",
          "kafka",
          "name",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "kafka",
              "kafka_producer",
              "kafka_consumer"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Bridge name, used as a human-readable description of the bridge."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Azure Event Hubs Kafka <code>host[:port]</code> namespace endpoints to bootstrap the client.  Default port number is 9093."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Azure Event Hubs Kafka broker and topic metadata. Setting too small value may add extra load on Azure Event Hubs.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching metadata from Azure Event Hubs.",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in Azure Event Hubs."
          },
          "kafka": {
            "description": "Azure Event Hubs producer configs.",
            "$ref": "#/components/schemas/bridge_kafka.v1_producer_kafka_opts"
          }
        },
        "type": "object"
      },
      "prometheus.push_gateway": {
        "required": [
          "enable"
        ],
        "properties": {
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Enable or disable Pushgateway"
          },
          "url": {
            "default": "http://127.0.0.1:9091",
            "type": "string",
            "description": "URL of Pushgateway server. Pushgateway is optional, should not be configured if prometheus is to scrape EMQX."
          },
          "interval": {
            "default": "15s",
            "type": "string",
            "description": "Data reporting interval",
            "example": "32s"
          },
          "headers": {
            "default": {},
            "type": "object",
            "description": "An HTTP Headers when pushing to Push Gateway.<br/><br/>For example, <code> { Authorization = \"some-authz-tokens\"}</code>",
            "example": {}
          },
          "job_name": {
            "default": "${name}/instance/${name}~${host}",
            "type": "string",
            "description": "Job Name that is pushed to the Push Gateway. Available variables:<br/><br/>- ${name}: Name of EMQX node.<br/><br/>- ${host}: Host name of EMQX node.<br/><br/>For example, when the EMQX node name is <code>emqx@127.0.0.1</code> then the <code>name</code><br/>variable takes value <code>emqx</code> and the <code>host</code> variable takes value <code>127.0.0.1</code>.<br/>Default value is: <code>${name}/instance/${name}~${host}</code>"
          }
        },
        "type": "object"
      },
      "connector_couchbase.get_connector": {
        "required": [
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "couchbase"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>  A host entry has the following form: `Host[:Port]`.<br/><br/>  The Couchbase default query service port 8093 is used if `[:Port]` is not specified."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "Username for Couchbase service."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Password for Couchbase service.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector.resource_opts"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_s3.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "s3"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action that takes incoming events and uploads them to the S3 API compatible service.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_s3.s3_direct_upload_parameters"
              },
              {
                "$ref": "#/components/schemas/bridge_s3.s3_aggregated_upload_parameters"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_s3.s3_upload_resource_opts"
          }
        },
        "type": "object"
      },
      "rocketmq.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rocketmq"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/rocketmq.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "file_transfer.local_storage": {
        "properties": {
          "segments": {
            "default": {
              "gc": {}
            },
            "description": "Settings for local segments storage, which include uploaded transfer fragments and temporary data.",
            "$ref": "#/components/schemas/file_transfer.local_storage_segments"
          },
          "exporter": {
            "default": {
              "local": {}
            },
            "description": "Exporter for the local file system storage backend.<br/><br/>Exporter defines where and how fully transferred and assembled files are stored.",
            "$ref": "#/components/schemas/file_transfer.local_storage_exporter_backend"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this backend."
          }
        },
        "type": "object"
      },
      "trace.trace": {
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name of the trace. Only ASCII letters in a-z, A-Z, 0-9 and underscore '_' are allowed.",
            "example": "EMQX-TRACE-1"
          },
          "type": {
            "type": "string",
            "enum": [
              "clientid",
              "topic",
              "ip_address",
              "ruleid"
            ],
            "description": "Filter type",
            "example": "clientid"
          },
          "topic": {
            "type": "string",
            "description": "Specify the topic or topic filter if the trace 'type' is 'topic'.",
            "example": "/dev/#"
          },
          "clientid": {
            "type": "string",
            "description": "Specify the MQTT clientid if the trace 'type' is 'clientid'.",
            "example": "dev-001"
          },
          "ip_address": {
            "type": "string",
            "description": "Specify the client's IP address if the trace type is 'ip_address'.",
            "example": "127.0.0.1"
          },
          "ruleid": {
            "type": "string",
            "example": "my_rule"
          },
          "status": {
            "type": "string",
            "enum": [
              "running",
              "stopped",
              "waiting"
            ],
            "description": "trace status",
            "example": "running"
          },
          "payload_encode": {
            "default": "text",
            "type": "string",
            "enum": [
              "hex",
              "text",
              "hidden"
            ],
            "description": "Determine the format of the payload format in the trace file.<br/><br/>`text`: Text-based protocol or plain text protocol.<br/> It is recommended when payload is JSON encoded.<br/><br/>`hex`: Binary hexadecimal encode.It is recommended when payload is a custom binary protocol.<br/><br/>`hidden`: payload is obfuscated as `******`"
          },
          "start_at": {
            "description": "rfc3339 timestamp or epoch second",
            "example": "2021-11-04T18:17:38+08:00",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-second",
                "example": 1640995200
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "end_at": {
            "description": "rfc3339 timestamp or epoch second",
            "example": "2021-11-05T18:17:38+08:00",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-second",
                "example": 1640995200
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "log_size": {
            "type": "array",
            "description": "trace log size",
            "items": {
              "type": "object",
              "example": {}
            },
            "example": [
              {
                "node": "emqx@127.0.0.1",
                "size": 1024
              }
            ]
          },
          "formatter": {
            "description": "The formatter that will be used to format the trace log entries. Set this to text to format the log entries as plain text (default). Set it to json to format each log entry as a JSON object.",
            "example": "text",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "json"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "text"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "rule_engine.rule_info": {
        "required": [
          "id",
          "sql"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the rule",
            "example": "293fb66f"
          },
          "from": {
            "type": "array",
            "description": "The topics of the rule",
            "items": {
              "type": "string"
            },
            "example": "t/#"
          },
          "created_at": {
            "type": "string",
            "description": "The created time of the rule",
            "example": "2021-12-01T15:00:43.153+08:00"
          },
          "name": {
            "default": "",
            "type": "string",
            "description": "The name of the rule",
            "example": "foo"
          },
          "sql": {
            "type": "string",
            "description": "SQL query to transform the messages.<br/>Example: <code>SELECT * FROM \"test/topic\" WHERE payload.x = 1</code>",
            "example": "SELECT * FROM \"test/topic\" WHERE payload.x = 1"
          },
          "actions": {
            "default": [],
            "type": "array",
            "description": "A list of actions of the rule.<br/>An action can be a string that refers to the channel ID of an EMQX bridge, or an object<br/>that refers to a function.<br/>There a some built-in functions like \"republish\" and \"console\", and we also support user<br/>provided functions in the format: \"{module}:{function}\".<br/>The actions in the list are executed sequentially.<br/>This means that if one of the action is executing slowly, all the following actions will not<br/>be executed until it returns.<br/>If one of the action crashed, all other actions come after it will still be executed, in the<br/>original order.<br/>If there's any error when running an action, there will be an error message, and the 'failure'<br/>counter of the function action or the bridge channel will increase.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/rule_engine.user_provided_function"
                },
                {
                  "$ref": "#/components/schemas/rule_engine.builtin_action_console"
                },
                {
                  "$ref": "#/components/schemas/rule_engine.builtin_action_republish"
                },
                {
                  "type": "string"
                }
              ]
            },
            "example": [
              "webhook:my_webhook",
              {
                "args": {
                  "payload": "${payload}",
                  "topic": "t/1"
                },
                "function": "republish"
              },
              {
                "function": "console"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable the rule"
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "The description of the rule",
            "example": "Some description"
          },
          "metadata": {
            "type": "object",
            "description": "Rule metadata, do not change manually",
            "example": {}
          }
        },
        "type": "object"
      },
      "authn.kerberos": {
        "required": [
          "backend",
          "mechanism",
          "principal"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          },
          "mechanism": {
            "type": "string",
            "enum": [
              "gssapi"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "kerberos"
            ],
            "description": "Backend type."
          },
          "principal": {
            "type": "string",
            "description": "Server Kerberos principal.<br/>For example <code>mqtt/emqx-cluster-1.example.com@MY_REALM.EXAMPLE.COM</code>.<br/>NOTE: The realm in use has to be configured in /etc/krb5.conf in EMQX nodes."
          }
        },
        "type": "object"
      },
      "redis.get_connector": {
        "required": [
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "redis"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "parameters": {
            "description": "Set of parameters specific for the given type of this Redis connector, `redis_type` can be one of `single`, `cluster` or `sentinel`.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/redis.redis_cluster_connector"
              },
              {
                "$ref": "#/components/schemas/redis.redis_sentinel_connector"
              },
              {
                "$ref": "#/components/schemas/redis.redis_single_connector"
              }
            ]
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/redis.connector_resource_opts"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "gateway.udp_opts": {
        "properties": {
          "active_n": {
            "default": 100,
            "type": "integer",
            "description": "Specify the {active, N} option for the socket.<br/>See: https://erlang.org/doc/man/inet.html#setopts-2"
          },
          "recbuf": {
            "type": "string",
            "description": "Size of the kernel-space receive buffer for the socket.",
            "example": "32MB"
          },
          "sndbuf": {
            "type": "string",
            "description": "Size of the kernel-space send buffer for the socket.",
            "example": "32MB"
          },
          "buffer": {
            "type": "string",
            "description": "Size of the user-space buffer for the socket.",
            "example": "32MB"
          },
          "reuseaddr": {
            "default": true,
            "type": "boolean",
            "description": "Allow local reuse of port numbers."
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.coap": {
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "coap"
            ],
            "description": "Gateway Name"
          },
          "heartbeat": {
            "default": "30s",
            "type": "string",
            "description": "The gateway server required minimum heartbeat interval.<br/>When connection mode is enabled, this parameter is used to set the minimum heartbeat interval for the connection to be alive",
            "example": "1h"
          },
          "connection_required": {
            "default": false,
            "type": "boolean",
            "description": "Enable or disable connection mode.<br/>Connection mode is a feature of non-standard protocols. When connection mode is enabled, it is necessary to maintain the creation, authentication and alive of connection resources"
          },
          "notify_type": {
            "default": "qos",
            "type": "string",
            "enum": [
              "non",
              "con",
              "qos"
            ],
            "description": "The Notification Message will be delivered to the CoAP client if a new message received on an observed topic.<br/>The type of delivered coap message can be set to:<br/><br/>  - non: Non-confirmable;<br/><br/>  - con: Confirmable;<br/><br/>  - qos: Mapping from QoS type of received message, QoS0 -> non, QoS1,2 -> con"
          },
          "subscribe_qos": {
            "default": "coap",
            "type": "string",
            "enum": [
              "qos0",
              "qos1",
              "qos2",
              "coap"
            ],
            "description": "The Default QoS Level indicator for subscribe request.<br/>This option specifies the QoS level for the CoAP Client when establishing a subscription membership, if the subscribe request is not carried `qos` option. The indicator can be set to:<br/><br/>  - qos0, qos1, qos2: Fixed default QoS level<br/><br/>  - coap: Dynamic QoS level by the message type of subscribe request<br/><br/>    * qos0: If the subscribe request is non-confirmable<br/><br/>    * qos1: If the subscribe request is confirmable"
          },
          "publish_qos": {
            "default": "coap",
            "type": "string",
            "enum": [
              "qos0",
              "qos1",
              "qos2",
              "coap"
            ],
            "description": "The Default QoS Level indicator for publish request.<br/>This option specifies the QoS level for the CoAP Client when publishing a message to EMQX PUB/SUB system, if the publish request is not carried `qos` option. The indicator can be set to:<br/><br/>  - qos0, qos1, qos2: Fixed default QoS level<br/><br/>  - coap: Dynamic QoS level by the message type of publish request<br/><br/>    * qos0: If the publish request is non-confirmable<br/><br/>    * qos1: If the publish request is confirmable"
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          },
          "listeners": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                }
              ]
            }
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_acked": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "message_acked"
            ],
            "description": "Event Type"
          },
          "id": {
            "type": "string",
            "description": "Message ID"
          },
          "from_clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "from_username": {
            "type": "string",
            "description": "The User Name"
          },
          "clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "payload": {
            "type": "string",
            "description": "The Message Payload"
          },
          "peerhost": {
            "type": "string",
            "description": "The IP Address of the Peer Client"
          },
          "topic": {
            "type": "string",
            "description": "Message Topic"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "The Time that this Message is Received"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "The Message QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "syskeeper_forwarder.put": {
        "required": [
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The address of the Syskeeper proxy server"
          },
          "ack_mode": {
            "default": "no_ack",
            "type": "string",
            "enum": [
              "need_ack",
              "no_ack"
            ],
            "description": "Specify whether the proxy server should reply with an acknowledgement for the message forwarding, can be:<br>- need_ack <br>- no_ack <br>"
          },
          "ack_timeout": {
            "default": "10s",
            "type": "string",
            "description": "The maximum time to wait for an acknowledgement from the proxy server",
            "example": "32s"
          },
          "pool_size": {
            "default": 16,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/syskeeper_forwarder.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_listeners.dtls_listener": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Listener ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "dtls"
            ],
            "description": "Listener Type"
          },
          "name": {
            "type": "string",
            "description": "Listener Name"
          },
          "running": {
            "type": "boolean",
            "description": "Listener Running status"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "Size of the acceptor pool."
          },
          "health_check": {
            "description": "Some Cloud platform use a `request-reply` mechanism to check whether a UDP port is healthy, here can configure this pair.",
            "$ref": "#/components/schemas/gateway.udp_health_check"
          },
          "udp_options": {
            "$ref": "#/components/schemas/gateway.udp_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable the listener."
          },
          "bind": {
            "type": "string",
            "description": "The IP address and port that the listener will bind.",
            "example": "127.0.0.1:80"
          },
          "max_connections": {
            "default": 1024,
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "integer",
                "minimum": 1
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "type": "integer",
            "description": "Maximum connections per second."
          },
          "enable_authn": {
            "default": true,
            "type": "boolean",
            "description": "Set <code>true</code> (default) to enable client authentication on this listener.<br/>When set to <code>false</code> clients will be allowed to connect without authentication."
          },
          "mountpoint": {
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "access_rules": {
            "default": [],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses.<br/>The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "dtls_options": {
            "description": "DTLS socket options",
            "$ref": "#/components/schemas/gateway.dtls_opts"
          },
          "status": {
            "description": "listener status",
            "$ref": "#/components/schemas/listeners.status"
          },
          "node_status": {
            "type": "array",
            "description": "listener status of each node in the cluster",
            "items": {
              "$ref": "#/components/schemas/listeners.node_status"
            }
          }
        },
        "type": "object"
      },
      "bridge_mysql.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "rocketmq.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rocketmq"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/rocketmq.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_timescale.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "timescale"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Configuration Parameters Specific to the PostgreSQL Action",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "kafka_consumer.source_parameters": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Kafka topic to consume from."
          },
          "group_id": {
            "type": "string",
            "description": "Consumer group identifier to be used for this source.  If omitted, one based off the source name will be automatically generated."
          },
          "max_batch_bytes": {
            "default": "896KB",
            "type": "string",
            "description": "Set how many bytes to pull from Kafka in each fetch request. Please note that if the configured value is smaller than the message size in Kafka, it may negatively impact the fetch performance.",
            "example": "32MB"
          },
          "offset_reset_policy": {
            "default": "latest",
            "type": "string",
            "enum": [
              "latest",
              "earliest"
            ],
            "description": "Defines from which offset a consumer should start fetching when there is no commit history or when the commit history becomes invalid."
          },
          "offset_commit_interval_seconds": {
            "default": "5s",
            "type": "string",
            "description": "Defines the time interval between two offset commit requests sent for each consumer group.",
            "example": "1h"
          },
          "key_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "Defines how the key from the Kafka message is encoded before being forwarded via MQTT.<br/><code>none</code> Uses the key from the Kafka message unchanged.  Note: in this case, the key must be a valid UTF-8 string.<br/><code>base64</code> Uses base-64 encoding on the received key."
          },
          "value_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "Defines how the value from the Kafka message is encoded before being forwarded via MQTT.<br/><code>none</code> Uses the value from the Kafka message unchanged.  Note: in this case, the value must be a valid UTF-8 string.<br/><code>base64</code> Uses base-64 encoding on the received value."
          }
        },
        "type": "object"
      },
      "bridge_kinesis.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/bridge_kinesis.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kinesis.action_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_postgres.resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_s3.s3_aggregated_upload_parameters": {
        "required": [
          "aggregation",
          "bucket",
          "container",
          "key",
          "mode"
        ],
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "aggregated"
            ],
            "description": "Enables time-based aggregation of incoming events and uploading them to the S3 service as a single object."
          },
          "container": {
            "default": {
              "type": "csv"
            },
            "description": "Settings governing the file format of an upload containing aggregated events.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_s3.s3_aggregated_container_csv"
              }
            ]
          },
          "aggregation": {
            "description": "Set of parameters governing the aggregation process.",
            "$ref": "#/components/schemas/bridge_s3.s3_aggregation"
          },
          "bucket": {
            "type": "string",
            "description": "The name of the S3 bucket."
          },
          "key": {
            "type": "string",
            "description": "Template for the S3 object key of an aggregated upload.<br/><br/>Template may contain placeholders for the following variables:<br/><ul><br/><li><code>${action}</code>: name of the action (required).</li><br/><li><code>${node}</code>: name of the EMQX node conducting the upload (required).</li><br/><li><code>${datetime.{format}}</code>: date and time when aggregation started, formatted according to the <code>{format}</code> string (required):<br/>    <ul><br/>    <li><code>${datetime.rfc3339utc}</code>: RFC3339-formatted date and time in UTC,</li><br/>    <li><code>${datetime.rfc3339}</code>: RFC3339-formatted date and time in local timezone,</li><br/>    <li><code>${datetime.unix}</code>: Unix timestamp.</li><br/>    </ul><br/></li><br/><li><code>${datetime_until.{format}}</code>: date and time when aggregation ended, with the same formatting options.</li><br/><li><code>${sequence}</code>: sequence number of the aggregated upload within the same time interval (required).</li><br/></ul><br/>All other placeholders are considered invalid. Note that placeholders marked as required will be added as a path suffix to the S3 object key if they are missing from the template."
          },
          "acl": {
            "type": "string",
            "enum": [
              "private",
              "public_read",
              "public_read_write",
              "authenticated_read",
              "bucket_owner_read",
              "bucket_owner_full_control"
            ],
            "description": "The ACL to use for the uploaded objects."
          },
          "headers": {
            "type": "object",
            "description": "HTTP headers to include in the S3 object upload request.<br/><br/>Useful to specify content type, content encoding, etc. of the S3 object.",
            "example": {}
          },
          "min_part_size": {
            "default": "5mb",
            "type": "string",
            "description": "The minimum part size for multipart uploads.<br/><br/>Uploaded data will be accumulated in memory until this size is reached.",
            "example": "32MB"
          },
          "max_part_size": {
            "default": "5gb",
            "type": "string",
            "description": "The maximum part size for multipart uploads.<br/><br/>S3 uploader won't try to upload parts larger than this size.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "action_azure_blob_storage.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_blob_storage"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Set of parameters for the action.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/action_azure_blob_storage.direct_parameters"
              },
              {
                "$ref": "#/components/schemas/action_azure_blob_storage.aggreg_parameters"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/action_azure_blob_storage.action_resource_opts"
          }
        },
        "type": "object"
      },
      "action_azure_blob_storage.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Set of parameters for the action.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/action_azure_blob_storage.direct_parameters"
              },
              {
                "$ref": "#/components/schemas/action_azure_blob_storage.aggreg_parameters"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/action_azure_blob_storage.action_resource_opts"
          }
        },
        "type": "object"
      },
      "redis.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "redis"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "The parameters of the action.",
            "$ref": "#/components/schemas/bridge_redis.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/redis.action_resource_opts"
          }
        },
        "type": "object"
      },
      "iotdb.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.mqttsn": {
        "required": [
          "gateway_id"
        ],
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "mqttsn"
            ],
            "description": "Gateway Name"
          },
          "gateway_id": {
            "default": 1,
            "type": "integer",
            "description": "MQTT-SN Gateway ID.<br/>When the <code>broadcast</code> option is enabled, the gateway will broadcast ADVERTISE message with this value"
          },
          "broadcast": {
            "default": false,
            "type": "boolean",
            "description": "Whether to periodically broadcast ADVERTISE messages"
          },
          "enable_qos3": {
            "default": true,
            "type": "boolean",
            "description": "Allows connectionless clients to publish messages with a Qos of -1.<br/>This feature is defined for very simple client implementations which do not support any other features except this one. There is no connection setup nor tear down, no registration nor subscription. The client just sends its 'PUBLISH' messages to a GW"
          },
          "subs_resume": {
            "default": false,
            "type": "boolean",
            "description": "Whether to initiate all subscribed topic name registration messages to the client after the Session has been taken over by a new channel"
          },
          "predefined": {
            "default": [],
            "type": "array",
            "description": "The pre-defined topic IDs and topic names.<br/>A 'pre-defined' topic ID is a topic ID whose mapping to a topic name is known in advance by both the client's application and the gateway",
            "items": {
              "$ref": "#/components/schemas/gateway.mqttsn_predefined"
            }
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          },
          "listeners": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                }
              ]
            }
          }
        },
        "type": "object"
      },
      "connector_snowflake.put_connector": {
        "required": [
          "account",
          "dsn",
          "password",
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The address of Snowflake computing server to connect to."
          },
          "account": {
            "type": "string",
            "description": "Account ID for Snowflake."
          },
          "dsn": {
            "type": "string",
            "description": "Data Source Name (DSN) associated with the installed Snowflake ODBC driver."
          },
          "proxy": {
            "default": "none",
            "description": "Proxy configuration.  Only plain HTTP proxies are currently supported (no HTTPS).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/connector_snowflake.proxy_config"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector.resource_opts"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "syskeeper_forwarder.post": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "syskeeper_forwarder"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The address of the Syskeeper proxy server"
          },
          "ack_mode": {
            "default": "no_ack",
            "type": "string",
            "enum": [
              "need_ack",
              "no_ack"
            ],
            "description": "Specify whether the proxy server should reply with an acknowledgement for the message forwarding, can be:<br>- need_ack <br>- no_ack <br>"
          },
          "ack_timeout": {
            "default": "10s",
            "type": "string",
            "description": "The maximum time to wait for an acknowledgement from the proxy server",
            "example": "32s"
          },
          "pool_size": {
            "default": 16,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/syskeeper_forwarder.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_elasticsearch.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "elasticsearch"
            ]
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "description": "ElasticSearch action parameters",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_update"
              },
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_delete"
              },
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_create"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_elasticsearch.action_resource_opts"
          }
        },
        "type": "object"
      },
      "confluent.post_connector": {
        "required": [
          "authentication",
          "bootstrap_hosts",
          "name",
          "ssl",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "confluent_producer"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Confluent Kafka <code>host[:port]</code> namespace endpoints to bootstrap the client.  Default port number is 9092."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Confluent Kafka broker and topic metadata. Setting too small value may add extra load on Confluent.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching metadata from Confluent.",
            "example": "32s"
          },
          "authentication": {
            "default": {},
            "description": "Authentication configs.",
            "$ref": "#/components/schemas/confluent.auth_username_password"
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "default": {
              "enable": true
            },
            "$ref": "#/components/schemas/confluent.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.builtin_action_console": {
        "properties": {
          "function": {
            "type": "string",
            "enum": [
              "console"
            ],
            "description": "Print the actions to the console"
          }
        },
        "type": "object"
      },
      "bridge_mqtt.put": {
        "required": [
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mqtt.creation_opts"
          },
          "mode": {
            "default": "cluster_shareload",
            "type": "string",
            "enum": [
              "cluster_shareload"
            ],
            "deprecated": true,
            "description": "The mode of the MQTT Bridge.<br/><br/>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/><br/>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid' is suffixed by the node name, this is to avoid<br/>clientid conflicts between different nodes. And we can only use shared subscription<br/>topic filters for <code>remote.topic</code> of ingress connections."
          },
          "server": {
            "type": "string",
            "description": "The host and port of the remote MQTT broker"
          },
          "clientid_prefix": {
            "type": "string",
            "description": "Optional prefix to prepend to the clientid used by egress bridges."
          },
          "reconnect_interval": {
            "type": "string",
            "deprecated": true
          },
          "proto_ver": {
            "default": "v4",
            "type": "string",
            "enum": [
              "v3",
              "v4",
              "v5"
            ],
            "description": "The MQTT protocol version"
          },
          "bridge_mode": {
            "default": false,
            "type": "boolean",
            "description": "If enable bridge mode.<br/>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT<br/>broker MUST support this feature.<br/>If bridge_mode is set to true, the bridge will indicate to the remote broker that it is a bridge not an ordinary client.<br/>This means that loop detection will be more effective and that retained messages will be propagated correctly."
          },
          "username": {
            "type": "string",
            "description": "The username of the MQTT protocol"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password of the MQTT protocol",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "Whether to start a clean session when reconnecting a remote broker for ingress bridge"
          },
          "keepalive": {
            "default": "160s",
            "type": "string",
            "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
            "minimum": 0
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "ingress": {
            "description": "The ingress config defines how this bridge receive messages from the remote MQTT broker, and then<br/>        send them to the local broker.<br/><br/>        Template with variables is allowed in 'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>        NOTE: if this bridge is used as the input of a rule, and also 'local.topic' is<br/>        configured, then messages got from the remote broker will be sent to both the 'local.topic' and<br/>        the rule.",
            "$ref": "#/components/schemas/connector_mqtt.ingress"
          },
          "egress": {
            "description": "The egress config defines how this bridge forwards messages from the local broker to the remote broker.<br/><br/>Template with variables is allowed in 'remote.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>NOTE: if this bridge is used as the action of a rule, and also 'local.topic'<br/>is configured, then both the data got from the rule and the MQTT messages that matches<br/>'local.topic' will be forwarded.",
            "$ref": "#/components/schemas/connector_mqtt.egress"
          }
        },
        "type": "object"
      },
      "elasticsearch.put": {
        "required": [
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_http.connector_resource_opts"
          },
          "server": {
            "default": "127.0.0.1:9200",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Elasticsearch default port 9200 is used if `[:Port]` is not specified."
          },
          "authentication": {
            "description": "Authentication configuration",
            "oneOf": [
              {
                "$ref": "#/components/schemas/elasticsearch.auth_basic"
              }
            ]
          }
        },
        "type": "object"
      },
      "connector_azure_blob_storage.get_connector": {
        "required": [
          "account_key",
          "account_name",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_blob_storage"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "account_name": {
            "type": "string",
            "description": "Account name for Azure Blob Storage service."
          },
          "account_key": {
            "type": "string",
            "format": "password",
            "description": "Account key for Azure Blob Storage service.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_azure_blob_storage.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "pulsar.put": {
        "required": [
          "servers"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "servers": {
            "type": "string",
            "description": "A comma separated list of Pulsar URLs in the form <code>scheme://host[:port]</code><br/> for the client to connect to. The supported schemes are <code>pulsar://</code> (default)<br/> and <code>pulsar+ssl://</code>. The default port is 6650."
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_token"
              },
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_basic"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/pulsar.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "schema_validation.log_failure": {
        "properties": {
          "level": {
            "default": "info",
            "type": "string",
            "enum": [
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none"
            ],
            "description": "Log level at which failures will be logged."
          }
        },
        "type": "object"
      },
      "rocketmq.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/rocketmq.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_tdengine.action_parameters": {
        "required": [
          "database"
        ],
        "properties": {
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "sql": {
            "default": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          }
        },
        "type": "object"
      },
      "exhook.ssl_conf": {
        "properties": {
          "cacertfile": {
            "type": "string",
            "description": "Trusted PEM format CA certificates bundle file.<br/><br/>The certificates in this file are used to verify the TLS peer's certificates.<br/>Append new certificates to the file if new CAs are to be trusted.<br/>There is no need to restart EMQX to have the updated file loaded, because<br/>the system regularly checks if file has been updated (and reload).<br/><br/>NOTE: invalidating (deleting) a certificate from the file will not affect<br/>already established connections."
          },
          "cacerts": {
            "default": false,
            "type": "boolean",
            "deprecated": true
          },
          "certfile": {
            "type": "string",
            "description": "PEM format certificates chain file.<br/><br/>The certificates in this file should be in reversed order of the certificate<br/>issue chain. That is, the host's certificate should be placed in the beginning<br/>of the file, followed by the immediate issuer certificate and so on.<br/>Although the root CA certificate is optional, it should be placed at the end of<br/>the file if it is to be added."
          },
          "keyfile": {
            "type": "string",
            "description": "PEM format private key file."
          },
          "verify": {
            "default": "verify_none",
            "type": "string",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "description": "Enable or disable peer verification."
          },
          "reuse_sessions": {
            "default": true,
            "type": "boolean",
            "description": "Enable TLS session reuse.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "depth": {
            "default": 10,
            "type": "integer",
            "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.<br/>So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
            "minimum": 0
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "String containing the user's password. Only used if the private key file is password-protected.",
            "example": ""
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "type": "array",
            "description": "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2', 'tlsv1.1']</code> here.",
            "items": {
              "type": "string"
            }
          },
          "ciphers": {
            "default": [],
            "type": "array",
            "description": "This config holds TLS cipher suite names separated by comma,<br/>or as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in which the<br/>client and server encrypts information over the network connection.<br/>Selecting a good cipher suite is critical for the<br/>application's data security, confidentiality and performance.<br/><br/>The names should be in OpenSSL string format (not RFC format).<br/>All default values and examples provided by EMQX config<br/>documentation are all in OpenSSL format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            }
          },
          "secure_renegotiate": {
            "default": true,
            "type": "boolean",
            "description": "Whether to reject TLS renegotiation attempts that are not compliant with [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt).<br/><br/>By default, `secure_renegotiate` is set to `true`, which forces secure renegotiation.<br/>If set to `false`, secure renegotiation will still be used, but will fall back to insecure renegotiation if the peer does not support [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt), which increases the risk of a MitM attack.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3."
          },
          "log_level": {
            "default": "notice",
            "type": "string",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "description": "The minimum level of logging allowed for SSL output.<br/><br/>The default is `notice`, set to a lower `debug` level for more detailed logging that can be used to investigate SSL handshake issues."
          },
          "hibernate_after": {
            "default": "5s",
            "type": "string",
            "description": "Specifies the amount of time that an SSL process will hibernate after being idle, thus reducing its memory footprint.<br/><br/>The hibernating process will be woken up when a new message arrives.<br/>Hibernating and waking up too often can cause CPU utilization to increase, as they both perform garbage collection on the process.",
            "example": "12m"
          },
          "partial_chain": {
            "type": "string",
            "enum": [
              true,
              false,
              "two_cacerts_from_cacertfile",
              "cacert_from_cacertfile"
            ],
            "description": "Enable or disable peer verification with partial_chain.<br/>When local verifies a peer certificate during the x509 path validation<br/>process, it constructs a certificate chain that starts with the peer<br/>certificate and ends with a trust anchor.<br/>By default, if it is set to `false`, the trust anchor is the<br/>Root CA, and the certificate chain must be complete.<br/>However, if the setting is set to `true` or `cacert_from_cacertfile`,<br/>the last certificate in `cacertfile` will be used as the trust anchor<br/>certificate (intermediate CA). This creates a partial chain<br/>in the path validation.<br/>Alternatively, if it is configured with `two_cacerts_from_cacertfile`,<br/>one of the last two certificates in `cacertfile` will be used as the<br/>trust anchor certificate, forming a partial chain. This option is<br/>particularly useful for intermediate CA certificate rotation.<br/>However, please note that it incurs some additional overhead, so it<br/>should only be used for certificate rotation purposes."
          },
          "verify_peer_ext_key_usage": {
            "type": "string",
            "description": "Verify extended key usage in peer's certificate<br/>For additional peer certificate validation, the value defined here must present in the<br/>'Extended Key Usage' of peer certificate defined in<br/>[rfc5280](https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.12).<br/><br/>Allowed values are<br/>- `clientAuth`<br/>- `serverAuth`<br/>- `codeSigning`<br/>- `emailProtection`<br/>- `timeStamping`<br/>- `ocspSigning`<br/>- raw OID, for example: \"OID:1.3.6.1.5.5.7.3.2\" means `id-pk 2` which is equivalent to `clientAuth`<br/><br/>Comma-separated string is also supported for validating more than one key usages.<br/><br/>For example, `\"serverAuth,OID:1.3.6.1.5.5.7.3.2\"`"
          },
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Enable TLS."
          },
          "server_name_indication": {
            "description": "Specify the host name to be used in TLS Server Name Indication extension.<br/><br/>For instance, when connecting to \"server.example.net\", the genuine server<br/>which accepts the connection and performs TLS handshake may differ from the<br/>host the TLS client initially connects to, e.g. when connecting to an IP address<br/>or when the host has multiple resolvable DNS records <br/><br/>If not specified, it will default to the host name string which is used<br/>to establish the connection, unless it is IP address used.<br/><br/>The host name is then also used in the host name verification of the peer<br/>certificate.<br/> The special value 'disable' prevents the Server Name<br/>Indication extension from being sent and disables the hostname<br/>verification check.",
            "example": "disable",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "disable"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.get": {
        "required": [
          "name",
          "stream",
          "type",
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "direction": {
            "default": "egress",
            "type": "string",
            "enum": [
              "egress"
            ],
            "description": "The direction of this bridge, MUST be 'egress'"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to the HStreamDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "record_template": {
            "default": "${payload}",
            "type": "string",
            "description": "The HStream Record template to be forwarded to the HStreamDB. Placeholders supported.<br><br/>NOTE: When you use `raw record` template (which means the data is not a valid JSON), you should use `read` or `subscription` in HStream to get the data."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "url": {
            "default": "http://127.0.0.1:6570",
            "type": "string",
            "description": "HStreamDB Server URL. This URL will be used as the gRPC HTTP server address."
          },
          "stream": {
            "type": "string",
            "description": "HStreamDB Stream Name."
          },
          "partition_key": {
            "type": "string",
            "description": "HStreamDB Partition Key. Placeholders supported."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "grpc_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The timeout for HStreamDB gRPC requests.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "hstreamdb"
            ],
            "description": "The type of the action."
          },
          "name": {
            "type": "string",
            "description": "Action name, a human-readable identifier."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          }
        },
        "type": "object"
      },
      "authn.node_status": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name.",
            "example": "emqx@127.0.0.1"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting"
            ],
            "description": "The status of the resource for each node."
          }
        },
        "type": "object"
      },
      "lwm2m.resource": {
        "properties": {
          "operations": {
            "type": "string",
            "description": "Resource Operations",
            "example": "E"
          },
          "dataType": {
            "type": "string",
            "enum": [
              "Integer",
              "Float",
              "Time",
              "String",
              "Boolean",
              "Opaque",
              "Objlnk"
            ],
            "description": "Data Type",
            "example": "Integer"
          },
          "path": {
            "type": "string",
            "description": "Resource Path",
            "example": "urn:oma:lwm2m:oma:2"
          },
          "name": {
            "type": "string",
            "description": "Resource Name",
            "example": "lwm2m-test"
          }
        },
        "type": "object"
      },
      "cluster.node_invitation_failed": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name",
            "example": "emqx2@127.0.0.1"
          },
          "started_at": {
            "type": "string",
            "description": "The time of the async invitation is started",
            "example": "2024-01-30T15:24:39.355+08:00"
          },
          "finished_at": {
            "type": "string",
            "description": "The time of the async invitation result is received",
            "example": "2024-01-30T15:24:39.355+08:00"
          },
          "reason": {
            "type": "string",
            "description": "Failure reason",
            "example": "Bad RPC to target node"
          }
        },
        "type": "object"
      },
      "iotdb.get_thrift": {
        "required": [
          "name",
          "password",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "iotdb"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "driver": {
            "default": "restapi",
            "type": "string",
            "enum": [
              "thrift"
            ],
            "description": "The drivers for IoTDB connector, can be:<br/>- rest<br/>- thrift"
          },
          "server": {
            "type": "string",
            "description": "The address of the IoTDB Thrift server (host:port)"
          },
          "protocol_version": {
            "default": "protocol_v3",
            "type": "string",
            "enum": [
              "protocol_v1",
              "protocol_v2",
              "protocol_v3"
            ],
            "description": "The version of IoTDB Thrift protocol"
          },
          "zoneId": {
            "default": "Asia/Shanghai",
            "type": "string",
            "description": "Timezone for IoTDB Thrift session"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size for the IoTDB Thrift connection pool",
            "minimum": 1
          },
          "connect_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Timeout for connecting to the IoTDB Thrift server",
            "example": "32s"
          },
          "recv_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Timeout for IoTDB Thrift server response",
            "example": "32s"
          },
          "username": {
            "type": "string",
            "description": "The username as configured at the IoTDB REST/Thrift interface"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password as configured at the IoTDB/Thrift REST interface",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/iotdb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "gateway.udp_health_check": {
        "properties": {
          "request": {
            "type": "string",
            "description": "The content of the request."
          },
          "reply": {
            "type": "string",
            "description": "The content to reply."
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_data_backup.import_request_body": {
        "required": [
          "filename"
        ],
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name"
          },
          "filename": {
            "type": "string",
            "description": "Data backup file name"
          }
        },
        "type": "object"
      },
      "connector_couchbase.post_connector": {
        "required": [
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "couchbase"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>  A host entry has the following form: `Host[:Port]`.<br/><br/>  The Couchbase default query service port 8093 is used if `[:Port]` is not specified."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "Username for Couchbase service."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Password for Couchbase service.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector.resource_opts"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "emqx.authz_cache": {
        "required": [
          "enable"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable the authorization cache."
          },
          "max_size": {
            "default": 32,
            "maximum": 1048576,
            "type": "integer",
            "description": "Maximum number of cached items.",
            "minimum": 1
          },
          "ttl": {
            "default": "1m",
            "type": "string",
            "description": "Time to live for the cached data.",
            "example": "12m"
          },
          "excludes": {
            "default": [],
            "type": "array",
            "description": "Exclude caching ACL check results for topics matching the given patterns.",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "action_snowflake.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Set of parameters for the action.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/action_snowflake.aggreg_parameters"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/action_snowflake.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_matrix.get_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "matrix"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "Disables the usage of prepared statements in the connections.<br/>Some endpoints, like PGBouncer or Supabase in Transaction mode, do not<br/>support session features such as prepared statements.  For such connections,<br/>this option should be enabled."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "gateway.lwm2m_translators": {
        "required": [
          "command",
          "notify",
          "register",
          "response",
          "update"
        ],
        "properties": {
          "command": {
            "description": "The topic for receiving downstream commands.<br/>For each new LwM2M client that succeeds in going online, the gateway creates a subscription relationship to receive downstream commands and send it to the LwM2M client",
            "$ref": "#/components/schemas/gateway.translator"
          },
          "response": {
            "description": "The topic for gateway to publish the acknowledge events from LwM2M client",
            "$ref": "#/components/schemas/gateway.translator"
          },
          "notify": {
            "description": "The topic for gateway to publish the notify events from LwM2M client.<br/>After succeed observe a resource of LwM2M client, Gateway will send the notify events via this topic, if the client reports any resource changes",
            "$ref": "#/components/schemas/gateway.translator"
          },
          "register": {
            "description": "The topic for gateway to publish the register events from LwM2M client.",
            "$ref": "#/components/schemas/gateway.translator"
          },
          "update": {
            "description": "The topic for gateway to publish the update events from LwM2M client",
            "$ref": "#/components/schemas/gateway.translator"
          }
        },
        "type": "object"
      },
      "listeners.ssl_required_bind": {
        "required": [
          "bind",
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ssl"
            ],
            "description": "Listener type"
          },
          "running": {
            "type": "boolean",
            "description": "Listener status"
          },
          "id": {
            "type": "string",
            "description": "Listener id"
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable listener."
          },
          "bind": {
            "default": 8883,
            "type": "string",
            "description": "IP address and port for the listening socket.",
            "example": "127.0.0.1:80"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The size of the listener's receiving pool.",
            "minimum": 1
          },
          "max_connections": {
            "default": "infinity",
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message<br/>is delivered to the subscriber. The mountpoint is a way that users can use<br/>to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`, then the client actually subscribes to the topic<br/>`some_tenant/t`. Similarly, if another client B (connected to the same listener<br/>as the client A) sends a message to topic `t`, the message is routed<br/>to all the clients subscribed `some_tenant/t`, so client A will receive the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>: clientid<br/>  - <code>${username}</code>: username"
          },
          "zone": {
            "default": "default",
            "type": "string",
            "description": "The configuration zone to which the listener belongs.<br/>Clients connected to this listener will inherit zone-settings created under this zone name.<br/><br/>A zone can override the configs under below root names:<br/>- `mqtt`<br/>- `force_shutdown`<br/>- `force_gc`<br/>- `flapping_detect`<br/>- `durable_sessions`"
          },
          "enable_authn": {
            "default": true,
            "type": "string",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "description": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication<br/>process goes through the configured authentication chain.<br/>When set to <code>false</code>, any client (with or without username/password) is allowed to connect.<br/>When set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be<br/>denied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off<br/>anonymous clients early."
          },
          "max_conn_rate": {
            "default": "infinity",
            "type": "string",
            "description": "Used to limit the rate at which the current listener accepts connections.<br/><br/>Once the limit is reached, EMQX will pause fetching connections from the Accept queue, thereby delaying or rejecting new connections.<br/><br/>For example:<br/><br/>- `1000/s`: Only accepts 1000 connections per second.<br/>- `1000/10s`: Only accepts 1000 connections every 10 seconds.",
            "example": "1000/s"
          },
          "messages_rate": {
            "type": "string",
            "description": "Used to limit the number of messages a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>For example:<br/><br/>- `500/s`: Only 500 messages will be received per second, and the remaining messages will be delayed.<br/>- `500/10s`: Only 500 messages will be received every 10 seconds and the remaining messages will be delayed.",
            "example": "1000/s"
          },
          "bytes_rate": {
            "type": "string",
            "description": "Used to limit the number of bytes a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>The unit of the bytes could be: B, KB, MB, GB.<br/><br/>For example:<br/><br/>- `500KB/s`: Only 500 kilobytes per second will be received, and the remaining bytes will be delayed.<br/>- `500MB/10s`: Only 500 megabytes will be received every 10 seconds, and the remaining bytes will be delayed.",
            "example": "100MB/s"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses. The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP, this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/><br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "example": "12m"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/emqx.tcp_opts"
          },
          "ssl_options": {
            "$ref": "#/components/schemas/emqx.listener_ssl_opts"
          }
        },
        "type": "object"
      },
      "gateway.stomp_frame": {
        "properties": {
          "max_headers": {
            "default": 10,
            "type": "integer",
            "description": "The maximum number of Header",
            "minimum": 0
          },
          "max_headers_length": {
            "default": 1024,
            "type": "integer",
            "description": "The maximum string length of the Header Value",
            "minimum": 0
          },
          "max_body_length": {
            "default": 65536,
            "type": "integer",
            "description": "Maximum number of bytes of Body allowed per Stomp packet"
          }
        },
        "type": "object"
      },
      "retainer.message_summary": {
        "properties": {
          "msgid": {
            "type": "string",
            "description": "Message ID."
          },
          "topic": {
            "type": "string",
            "description": "Topic."
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "QoS.",
            "minimum": 0,
            "example": 0
          },
          "publish_at": {
            "type": "string",
            "description": "Message publish time, RFC 3339 format."
          },
          "from_clientid": {
            "type": "string",
            "description": "The clientid of publisher."
          },
          "from_username": {
            "type": "string",
            "description": "The username of publisher."
          }
        },
        "type": "object"
      },
      "pulsar.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configs.",
            "$ref": "#/components/schemas/pulsar.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/pulsar.action_resource_opts"
          }
        },
        "type": "object"
      },
      "redis.put_connector": {
        "required": [
          "parameters"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "parameters": {
            "description": "Set of parameters specific for the given type of this Redis connector, `redis_type` can be one of `single`, `cluster` or `sentinel`.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/redis.redis_cluster_connector"
              },
              {
                "$ref": "#/components/schemas/redis.redis_sentinel_connector"
              },
              {
                "$ref": "#/components/schemas/redis.redis_single_connector"
              }
            ]
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/redis.connector_resource_opts"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_redis.creation_opts_redis_sentinel": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only."
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "syskeeper.parameters": {
        "properties": {
          "target_topic": {
            "default": "${topic}",
            "type": "string",
            "description": "The topic for the forwarded message"
          },
          "target_qos": {
            "maximum": 2,
            "type": "integer",
            "description": "The QoS for the forwarded message. To preserve the original QoS of the forwarded message, the value can be omitted.",
            "minimum": 0
          },
          "template": {
            "default": "${payload}",
            "type": "string",
            "description": "Template"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_topics.topic": {
        "required": [
          "node",
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Topic Name"
          },
          "node": {
            "type": "string",
            "description": "Node"
          },
          "session": {
            "type": "string",
            "description": "Session ID"
          }
        },
        "type": "object"
      },
      "file_transfer.s3_exporter": {
        "required": [
          "bucket",
          "host",
          "port"
        ],
        "properties": {
          "access_key_id": {
            "type": "string",
            "description": "The access key ID of the S3 bucket."
          },
          "secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "The secret access key of the S3 bucket.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "host": {
            "type": "string",
            "description": "The host of the S3 endpoint."
          },
          "port": {
            "type": "integer",
            "description": "The port of the S3 endpoint.",
            "minimum": 1
          },
          "transport_options": {
            "description": "Options for the HTTP transport layer used by the S3 client.",
            "$ref": "#/components/schemas/s3.transport_options"
          },
          "min_part_size": {
            "default": "5mb",
            "type": "string",
            "description": "The minimum part size for multipart uploads.<br/><br/>Uploaded data will be accumulated in memory until this size is reached.",
            "example": "32MB"
          },
          "max_part_size": {
            "default": "5gb",
            "type": "string",
            "description": "The maximum part size for multipart uploads.<br/><br/>S3 uploader won't try to upload parts larger than this size.",
            "example": "32MB"
          },
          "url_expire_time": {
            "default": "1h",
            "type": "string",
            "description": "The time in seconds for which the signed URLs to the S3 objects are valid.",
            "example": "1h"
          },
          "bucket": {
            "type": "string",
            "description": "The name of the S3 bucket."
          },
          "acl": {
            "type": "string",
            "enum": [
              "private",
              "public_read",
              "public_read_write",
              "authenticated_read",
              "bucket_owner_read",
              "bucket_owner_full_control"
            ],
            "description": "The ACL to use for the uploaded objects."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this backend."
          }
        },
        "type": "object"
      },
      "emqx.log": {
        "properties": {
          "console": {
            "$ref": "#/components/schemas/emqx.console_handler"
          },
          "file": {
            "default": {
              "level": "warning"
            },
            "description": "File-based log handlers.",
            "oneOf": [
              {
                "properties": {
                  "$handler_name": {
                    "$ref": "#/components/schemas/emqx.log_file_handler"
                  }
                },
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/emqx.log_file_handler"
              }
            ]
          },
          "throttling": {
            "$ref": "#/components/schemas/emqx.log_throttling"
          },
          "audit": {
            "default": {
              "enable": false,
              "level": "info"
            },
            "description": "Audit file-based log handler.",
            "$ref": "#/components/schemas/emqx.log_audit_handler"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.post": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sqlserver"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Microsoft SQL Server. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_sqlserver.creation_opts"
          },
          "driver": {
            "default": "ms-sql",
            "type": "string",
            "description": "SQL Server Driver Name"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The SQL Server default port 1433 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "sa",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "bridge_influxdb.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_elasticsearch.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "opentelemetry.otel_exporter": {
        "properties": {
          "endpoint": {
            "default": "http://localhost:4317",
            "type": "string",
            "description": "The target URL to which the exporter is going to send Open Telemetry signal data.",
            "example": "http://127.0.0.1"
          },
          "ssl_options": {
            "default": {
              "enable": false
            },
            "description": "SSL configuration for the Open Telemetry exporter",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "listeners.listener_id_status": {
        "required": [
          "bind",
          "enable",
          "id",
          "name",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Listener id",
            "example": "tcp:demo"
          },
          "type": {
            "type": "string",
            "enum": [
              "tcp",
              "ssl",
              "ws",
              "wss",
              "quic"
            ],
            "description": "Listener type"
          },
          "name": {
            "type": "string",
            "description": "Listener name"
          },
          "enable": {
            "type": "boolean",
            "description": "Listener enable"
          },
          "number": {
            "type": "integer",
            "description": "ListenerId counter",
            "minimum": 1
          },
          "bind": {
            "type": "string",
            "description": "Listener bind addr",
            "example": "127.0.0.1:80"
          },
          "acceptors": {
            "type": "integer",
            "description": "ListenerId acceptors",
            "minimum": 1
          },
          "status": {
            "$ref": "#/components/schemas/listeners.status"
          },
          "node_status": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/listeners.node_status"
            }
          }
        },
        "type": "object"
      },
      "bridge_timescale.get_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "timescale"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "Disables the usage of prepared statements in the connections.<br/>Some endpoints, like PGBouncer or Supabase in Transaction mode, do not<br/>support session features such as prepared statements.  For such connections,<br/>this option should be enabled."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pgsql.get": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "pgsql"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.get_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rabbitmq"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "parameters": {
            "description": "The source config defines how this bridge receive messages from the remote RabbitMQ broker",
            "$ref": "#/components/schemas/bridge_rabbitmq.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.source_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_stats.aggregated_data": {
        "properties": {
          "channels.count": {
            "type": "integer",
            "description": "sessions.count",
            "minimum": 0,
            "example": 0
          },
          "channels.max": {
            "type": "integer",
            "description": "session.max",
            "minimum": 0,
            "example": 0
          },
          "connections.count": {
            "type": "integer",
            "description": "Number of current connections",
            "minimum": 0,
            "example": 0
          },
          "connections.max": {
            "type": "integer",
            "description": "Historical maximum number of connections",
            "minimum": 0,
            "example": 0
          },
          "delayed.count": {
            "type": "integer",
            "description": "Number of delayed messages",
            "minimum": 0,
            "example": 0
          },
          "delayed.max": {
            "type": "integer",
            "description": "Historical maximum number of delayed messages",
            "minimum": 0,
            "example": 0
          },
          "live_connections.count": {
            "type": "integer",
            "description": "Number of current live connections",
            "minimum": 0,
            "example": 0
          },
          "live_connections.max": {
            "type": "integer",
            "description": "Historical maximum number of live connections",
            "minimum": 0,
            "example": 0
          },
          "cluster_sessions.count": {
            "type": "integer",
            "description": "Number of sessions in the cluster",
            "minimum": 0,
            "example": 0
          },
          "cluster_sessions.max": {
            "type": "integer",
            "description": "Historical maximum number of sessions in the cluster",
            "minimum": 0,
            "example": 0
          },
          "retained.count": {
            "type": "integer",
            "description": "Number of currently retained messages",
            "minimum": 0,
            "example": 0
          },
          "retained.max": {
            "type": "integer",
            "description": "Historical maximum number of retained messages",
            "minimum": 0,
            "example": 0
          },
          "sessions.count": {
            "type": "integer",
            "description": "Number of current sessions",
            "minimum": 0,
            "example": 0
          },
          "sessions.max": {
            "type": "integer",
            "description": "Historical maximum number of sessions",
            "minimum": 0,
            "example": 0
          },
          "suboptions.count": {
            "type": "integer",
            "description": "subscriptions.count",
            "minimum": 0,
            "example": 0
          },
          "suboptions.max": {
            "type": "integer",
            "description": "subscriptions.max",
            "minimum": 0,
            "example": 0
          },
          "subscribers.count": {
            "type": "integer",
            "description": "Number of current subscribers",
            "minimum": 0,
            "example": 0
          },
          "subscribers.max": {
            "type": "integer",
            "description": "Historical maximum number of subscribers",
            "minimum": 0,
            "example": 0
          },
          "subscriptions.count": {
            "type": "integer",
            "description": "Number of current subscriptions, including shared subscriptions, but not subscriptions from durable sessions",
            "minimum": 0,
            "example": 0
          },
          "subscriptions.max": {
            "type": "integer",
            "description": "Historical maximum number of subscriptions",
            "minimum": 0,
            "example": 0
          },
          "subscriptions.shared.count": {
            "type": "integer",
            "description": "Number of current shared subscriptions",
            "minimum": 0,
            "example": 0
          },
          "subscriptions.shared.max": {
            "type": "integer",
            "description": "Historical maximum number of shared subscriptions",
            "minimum": 0,
            "example": 0
          },
          "topics.count": {
            "type": "integer",
            "description": "Number of current topics",
            "minimum": 0,
            "example": 0
          },
          "topics.max": {
            "type": "integer",
            "description": "Historical maximum number of topics",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "emqx_dashboard_monitor_api.sampler_current": {
        "properties": {
          "dropped_msg_rate": {
            "type": "integer",
            "description": "Dropped messages per 10 seconds"
          },
          "sent_msg_rate": {
            "type": "integer",
            "description": "Sent messages per 10 seconds"
          },
          "persisted_rate": {
            "type": "integer",
            "description": "Messages saved to the durable storage per 10 seconds"
          },
          "received_msg_rate": {
            "type": "integer",
            "description": "Dropped messages per 10 seconds"
          },
          "transformation_failed_rate": {
            "type": "integer",
            "description": "Message transformations failed per 10 seconds"
          },
          "transformation_succeeded_rate": {
            "type": "integer",
            "description": "Message transformations succeeded per 10 seconds"
          },
          "validation_failed_rate": {
            "type": "integer",
            "description": "Schema validations failed per 10 seconds"
          },
          "validation_succeeded_rate": {
            "type": "integer",
            "description": "Schema validations succeeded per 10 seconds"
          },
          "disconnected_durable_sessions": {
            "type": "integer",
            "description": "Disconnected durable sessions at the time of sampling. Can only represent an approximate state."
          },
          "subscriptions_durable": {
            "type": "integer",
            "description": "Subscriptions from durable sessions at the time of sampling. Can only represent an approximate state."
          },
          "subscriptions": {
            "type": "integer",
            "description": "Subscriptions at the time of sampling. Can only represent an approximate state."
          },
          "topics": {
            "type": "integer",
            "description": "Count topics at the time of sampling. Can only represent an approximate state."
          },
          "connections": {
            "type": "integer",
            "description": "Sessions at the time of sampling. Can only represent an approximate state."
          },
          "live_connections": {
            "type": "integer",
            "description": "Connections at the time of sampling. Can only represent an approximate state."
          },
          "retained_msg_count": {
            "type": "integer",
            "description": "Retained messages count at the time of sampling. Can only represent an approximate state."
          },
          "shared_subscriptions": {
            "type": "integer",
            "description": "Shared subscriptions count at the time of sampling. Can only represent an approximate state."
          },
          "license_quota": {
            "type": "integer",
            "description": "License quota. AKA: limited max_connections for cluster"
          }
        },
        "type": "object"
      },
      "redis.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "This parameter defines the upper limit of the batch count.<br/>Setting this value to 1 effectively disables batching, as it indicates that only one item will be processed per batch.<br/>Note on Redis Cluster Mode:<br/>In the context of Redis Cluster Mode, it is important to note that batching is not supported.<br/>Consequently, the batch_size is always set to 1,<br/>reflecting the mode inherent limitation in handling batch operations.",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "authz.http_post": {
        "required": [
          "method",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "http"
            ],
            "description": "Backend type."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this ACL provider"
          },
          "url": {
            "type": "string",
            "description": "URL of the auth server."
          },
          "request_timeout": {
            "default": "30s",
            "type": "string",
            "description": "HTTP request timeout."
          },
          "body": {
            "description": "HTTP request body.",
            "properties": {
              "$name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "max_retries": {
            "type": "integer",
            "deprecated": true,
            "minimum": 0
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "request": {
            "description": "Configure HTTP request parameters.",
            "$ref": "#/components/schemas/connector_http.request"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "method": {
            "type": "string",
            "enum": [
              "post"
            ],
            "description": "HTTP method."
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=30, max=1000"
            },
            "type": "object",
            "description": "List of HTTP Headers.",
            "example": {}
          }
        },
        "type": "object"
      },
      "bridge_redis.action_parameters": {
        "required": [
          "command_template"
        ],
        "properties": {
          "command_template": {
            "type": "array",
            "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "bridge_iotdb.action_parameters": {
        "properties": {
          "is_aligned": {
            "default": false,
            "type": "boolean",
            "description": "Whether to align the timeseries"
          },
          "device_id": {
            "type": "string",
            "description": "The IoTDB device ID this data should be inserted for.<br/>If left empty, the MQTT message payload must contain a `device_id` field,<br/>or EMQX's rule-engine SQL must produce a `device_id` field."
          },
          "data": {
            "default": [],
            "type": "array",
            "description": "IoTDB action parameter data",
            "items": {
              "$ref": "#/components/schemas/bridge_iotdb.action_parameters_data"
            }
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "HTTP request max retry times if failed.",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "cluster.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only."
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "dynamo"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/bridge_dynamo.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kinesis"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/bridge_kinesis.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kinesis.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_matrix.get": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "pgsql"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "tdengine_connector.put": {
        "required": [
          "password",
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The TDengine default port 6041 is used if `[:Port]` is not specified."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/tdengine_connector.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "load_rebalance.status_stats": {
        "required": [
          "current_connected",
          "current_sessions",
          "initial_connected",
          "initial_sessions"
        ],
        "properties": {
          "initial_connected": {
            "type": "integer",
            "description": "The number of connections on the node before the evacuation/rebalance process",
            "minimum": 0
          },
          "current_connected": {
            "type": "integer",
            "description": "Current number of connections on the node",
            "minimum": 0
          },
          "initial_sessions": {
            "type": "integer",
            "description": "The number of sessions on the node before the evacuation/rebalance process",
            "minimum": 0
          },
          "current_sessions": {
            "type": "integer",
            "description": "Current number of sessions on the node",
            "minimum": 0
          },
          "current_disconnected_sessions": {
            "type": "integer",
            "description": "Current number of disconnected sessions on the node",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "rule_engine.republish_mqtt_properties": {
        "properties": {
          "Payload-Format-Indicator": {
            "type": "string"
          },
          "Message-Expiry-Interval": {
            "type": "string"
          },
          "Content-Type": {
            "type": "string"
          },
          "Response-Topic": {
            "type": "string"
          },
          "Correlation-Data": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_oracle.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "oracle"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/bridge_oracle.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only."
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.get": {
        "required": [
          "base_url",
          "name",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "iotdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "authentication": {
            "default": "auth_basic",
            "description": "Authentication configuration",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_iotdb.auth_basic"
              }
            ]
          },
          "is_aligned": {
            "default": false,
            "type": "boolean",
            "description": "Whether to align the timeseries"
          },
          "device_id": {
            "type": "string",
            "description": "The IoTDB device ID this data should be inserted for.<br/>If left empty, the MQTT message payload must contain a `device_id` field,<br/>or EMQX's rule-engine SQL must produce a `device_id` field."
          },
          "iotdb_version": {
            "default": "v1.3.x",
            "type": "string",
            "enum": [
              "v1.3.x",
              "v1.1.x",
              "v1.0.x",
              "v0.13.x"
            ],
            "description": "The version of the IoTDB system to connect to."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_iotdb.creation_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "base_url": {
            "type": "string",
            "description": "The base URL of the external IoTDB service's REST interface.",
            "example": "http://127.0.0.1"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "HTTP request max retry times if failed.",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_disconnected": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "client_disconnected"
            ],
            "description": "Event Type"
          },
          "clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "reason": {
            "type": "string",
            "description": "The Reason for Disconnect"
          },
          "peername": {
            "type": "string",
            "description": "The IP Address and Port of the Peer Client"
          },
          "sockname": {
            "type": "string",
            "description": "The IP Address and Port of the Local Listener"
          },
          "disconnected_at": {
            "type": "integer",
            "description": "The Time that this Client is Disconnected"
          }
        },
        "type": "object"
      },
      "connector_mqtt.get_connector": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mqtt"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the pool of MQTT clients that will publish messages to the remote broker.<br/><br/>Each MQTT client will be assigned 'clientid' of the form '${clientid_prefix}:${bridge_name}:egress:${node}:${n}'<br/>where 'n' is the number of a client inside the pool.",
            "minimum": 1
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_mqtt.resource_opts"
          },
          "mode": {
            "default": "cluster_shareload",
            "type": "string",
            "enum": [
              "cluster_shareload"
            ],
            "deprecated": true,
            "description": "The mode of the MQTT Bridge.<br/><br/>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/><br/>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid' is suffixed by the node name, this is to avoid<br/>clientid conflicts between different nodes. And we can only use shared subscription<br/>topic filters for <code>remote.topic</code> of ingress connections."
          },
          "server": {
            "type": "string",
            "description": "The host and port of the remote MQTT broker"
          },
          "clientid_prefix": {
            "type": "string",
            "description": "Optional prefix to prepend to the clientid used by egress bridges."
          },
          "reconnect_interval": {
            "type": "string",
            "deprecated": true
          },
          "proto_ver": {
            "default": "v4",
            "type": "string",
            "enum": [
              "v3",
              "v4",
              "v5"
            ],
            "description": "The MQTT protocol version"
          },
          "bridge_mode": {
            "default": false,
            "type": "boolean",
            "description": "If enable bridge mode.<br/>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT<br/>broker MUST support this feature.<br/>If bridge_mode is set to true, the bridge will indicate to the remote broker that it is a bridge not an ordinary client.<br/>This means that loop detection will be more effective and that retained messages will be propagated correctly."
          },
          "username": {
            "type": "string",
            "description": "The username of the MQTT protocol"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password of the MQTT protocol",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "Whether to start a clean session when reconnecting a remote broker for ingress bridge"
          },
          "keepalive": {
            "default": "160s",
            "type": "string",
            "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
            "minimum": 0
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "sso.oidc": {
        "required": [
          "backend",
          "clientid",
          "issuer",
          "secret"
        ],
        "properties": {
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Whether to enable this backend."
          },
          "backend": {
            "type": "string",
            "enum": [
              "oidc"
            ],
            "description": "Backend type."
          },
          "issuer": {
            "type": "string",
            "description": "The URL of the OIDC issuer."
          },
          "clientid": {
            "type": "string",
            "description": "The clientId for this backend."
          },
          "secret": {
            "type": "string",
            "format": "password",
            "description": "The client secret.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "scopes": {
            "default": [
              "openid"
            ],
            "type": "array",
            "description": "The scopes, its default value is `[\"openid\"]`.",
            "items": {
              "type": "string"
            }
          },
          "name_var": {
            "default": "${sub}",
            "type": "string",
            "description": "A template to map OIDC user information to a Dashboard name, its default value is `${sub}`."
          },
          "dashboard_addr": {
            "default": "http://127.0.0.1:18083",
            "type": "string",
            "description": "The address of the EMQX Dashboard."
          },
          "session_expiry": {
            "default": "30s",
            "type": "string",
            "description": "The valid time span for an OIDC `state`, the default is `30s`, if the code response returned by the authorization server exceeds this time span, it will be treated as invalid.",
            "example": "1h"
          },
          "require_pkce": {
            "default": false,
            "type": "boolean",
            "description": "Whether to require PKCE when getting the token."
          },
          "preferred_auth_methods": {
            "default": [
              "client_secret_post",
              "client_secret_basic",
              "none"
            ],
            "type": "array",
            "description": "Set the valid authentication methods and their priority.",
            "items": {
              "type": "string",
              "enum": [
                "private_key_jwt",
                "client_secret_jwt",
                "client_secret_post",
                "client_secret_basic",
                "none"
              ]
            }
          },
          "provider": {
            "default": "generic",
            "type": "string",
            "enum": [
              "okta",
              "generic"
            ],
            "description": "The OIDC provider."
          },
          "fallback_methods": {
            "default": [
              "RS256"
            ],
            "type": "array",
            "description": "Some providers do not provide all the method items in the provider configuration, set this value as a fallback for those items.",
            "items": {
              "type": "string"
            }
          },
          "client_jwks": {
            "default": "none",
            "description": "Set JWK or JWKS here to enable the `private_key_jwt` authorization or the `DPoP` extension.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/sso.client_file_jwks"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge_opents.get": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "opents"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The URL of OpenTSDB endpoint."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "summary": {
            "default": true,
            "type": "boolean",
            "description": "Whether to return summary information."
          },
          "details": {
            "default": false,
            "type": "boolean",
            "description": "Whether to return detailed information."
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "gcp_pubsub_producer.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_producer"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action configs.",
            "$ref": "#/components/schemas/gcp_pubsub_producer.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "authn.http_get": {
        "required": [
          "backend",
          "mechanism",
          "method",
          "url"
        ],
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "get"
            ],
            "description": "HTTP request method."
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "keep-alive": "timeout=30, max=1000"
            },
            "type": "object",
            "description": "List of HTTP headers (without <code>content-type</code>).",
            "example": {}
          },
          "mechanism": {
            "type": "string",
            "enum": [
              "password_based"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "http"
            ],
            "description": "Backend type."
          },
          "url": {
            "type": "string",
            "description": "URL of the HTTP server."
          },
          "body": {
            "type": "object",
            "description": "HTTP request body.",
            "example": {}
          },
          "request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "HTTP request timeout.",
            "example": "32s"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          },
          "request": {
            "description": "Configure HTTP request parameters.",
            "$ref": "#/components/schemas/connector_http.request"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "max_retries": {
            "type": "integer",
            "deprecated": true,
            "minimum": 0
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "opentelemetry.otel_traces": {
        "properties": {
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Enable or disable Open Telemetry signal."
          },
          "scheduled_delay": {
            "default": "5s",
            "type": "string",
            "description": "The delay interval between two consecutive exports of Open Telemetry signals.",
            "example": "32s"
          },
          "filter": {
            "description": "Open Telemetry Trace Filter configuration",
            "$ref": "#/components/schemas/opentelemetry.trace_filter"
          }
        },
        "type": "object"
      },
      "rule_engine.rule_creation": {
        "required": [
          "sql"
        ],
        "properties": {
          "name": {
            "default": "",
            "type": "string",
            "description": "The name of the rule",
            "example": "foo"
          },
          "sql": {
            "type": "string",
            "description": "SQL query to transform the messages.<br/>Example: <code>SELECT * FROM \"test/topic\" WHERE payload.x = 1</code>",
            "example": "SELECT * FROM \"test/topic\" WHERE payload.x = 1"
          },
          "actions": {
            "default": [],
            "type": "array",
            "description": "A list of actions of the rule.<br/>An action can be a string that refers to the channel ID of an EMQX bridge, or an object<br/>that refers to a function.<br/>There a some built-in functions like \"republish\" and \"console\", and we also support user<br/>provided functions in the format: \"{module}:{function}\".<br/>The actions in the list are executed sequentially.<br/>This means that if one of the action is executing slowly, all the following actions will not<br/>be executed until it returns.<br/>If one of the action crashed, all other actions come after it will still be executed, in the<br/>original order.<br/>If there's any error when running an action, there will be an error message, and the 'failure'<br/>counter of the function action or the bridge channel will increase.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/rule_engine.user_provided_function"
                },
                {
                  "$ref": "#/components/schemas/rule_engine.builtin_action_console"
                },
                {
                  "$ref": "#/components/schemas/rule_engine.builtin_action_republish"
                },
                {
                  "type": "string"
                }
              ]
            },
            "example": [
              "webhook:my_webhook",
              {
                "args": {
                  "payload": "${payload}",
                  "topic": "t/1"
                },
                "function": "republish"
              },
              {
                "function": "console"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable the rule"
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "The description of the rule",
            "example": "Some description"
          },
          "metadata": {
            "type": "object",
            "description": "Rule metadata, do not change manually",
            "example": {}
          }
        },
        "type": "object"
      },
      "dashboard.ssl_options": {
        "properties": {
          "cacertfile": {
            "default": "${EMQX_ETC_DIR}/certs/cacert.pem",
            "type": "string",
            "description": "Trusted PEM format CA certificates bundle file.<br/><br/>The certificates in this file are used to verify the TLS peer's certificates.<br/>Append new certificates to the file if new CAs are to be trusted.<br/>There is no need to restart EMQX to have the updated file loaded, because<br/>the system regularly checks if file has been updated (and reload).<br/><br/>NOTE: invalidating (deleting) a certificate from the file will not affect<br/>already established connections."
          },
          "cacerts": {
            "default": false,
            "type": "boolean",
            "deprecated": true
          },
          "certfile": {
            "default": "${EMQX_ETC_DIR}/certs/cert.pem",
            "type": "string",
            "description": "PEM format certificates chain file.<br/><br/>The certificates in this file should be in reversed order of the certificate<br/>issue chain. That is, the host's certificate should be placed in the beginning<br/>of the file, followed by the immediate issuer certificate and so on.<br/>Although the root CA certificate is optional, it should be placed at the end of<br/>the file if it is to be added."
          },
          "keyfile": {
            "default": "${EMQX_ETC_DIR}/certs/key.pem",
            "type": "string",
            "description": "PEM format private key file."
          },
          "verify": {
            "default": "verify_none",
            "type": "string",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "description": "Enable or disable peer verification."
          },
          "reuse_sessions": {
            "default": true,
            "type": "boolean",
            "description": "Enable TLS session reuse.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "depth": {
            "default": 10,
            "type": "integer",
            "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.<br/>So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
            "minimum": 0
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "String containing the user's password. Only used if the private key file is password-protected.",
            "example": ""
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "type": "array",
            "description": "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2', 'tlsv1.1']</code> here.",
            "items": {
              "type": "string"
            }
          },
          "ciphers": {
            "default": [],
            "type": "array",
            "description": "This config holds TLS cipher suite names separated by comma,<br/>or as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in which the<br/>client and server encrypts information over the network connection.<br/>Selecting a good cipher suite is critical for the<br/>application's data security, confidentiality and performance.<br/><br/>The names should be in OpenSSL string format (not RFC format).<br/>All default values and examples provided by EMQX config<br/>documentation are all in OpenSSL format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            }
          },
          "secure_renegotiate": {
            "default": true,
            "type": "boolean",
            "description": "Whether to reject TLS renegotiation attempts that are not compliant with [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt).<br/><br/>By default, `secure_renegotiate` is set to `true`, which forces secure renegotiation.<br/>If set to `false`, secure renegotiation will still be used, but will fall back to insecure renegotiation if the peer does not support [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt), which increases the risk of a MitM attack.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3."
          },
          "log_level": {
            "default": "notice",
            "type": "string",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "description": "The minimum level of logging allowed for SSL output.<br/><br/>The default is `notice`, set to a lower `debug` level for more detailed logging that can be used to investigate SSL handshake issues."
          },
          "hibernate_after": {
            "default": "5s",
            "type": "string",
            "description": "Specifies the amount of time that an SSL process will hibernate after being idle, thus reducing its memory footprint.<br/><br/>The hibernating process will be woken up when a new message arrives.<br/>Hibernating and waking up too often can cause CPU utilization to increase, as they both perform garbage collection on the process.",
            "example": "12m"
          },
          "partial_chain": {
            "type": "string",
            "enum": [
              true,
              false,
              "two_cacerts_from_cacertfile",
              "cacert_from_cacertfile"
            ],
            "description": "Enable or disable peer verification with partial_chain.<br/>When local verifies a peer certificate during the x509 path validation<br/>process, it constructs a certificate chain that starts with the peer<br/>certificate and ends with a trust anchor.<br/>By default, if it is set to `false`, the trust anchor is the<br/>Root CA, and the certificate chain must be complete.<br/>However, if the setting is set to `true` or `cacert_from_cacertfile`,<br/>the last certificate in `cacertfile` will be used as the trust anchor<br/>certificate (intermediate CA). This creates a partial chain<br/>in the path validation.<br/>Alternatively, if it is configured with `two_cacerts_from_cacertfile`,<br/>one of the last two certificates in `cacertfile` will be used as the<br/>trust anchor certificate, forming a partial chain. This option is<br/>particularly useful for intermediate CA certificate rotation.<br/>However, please note that it incurs some additional overhead, so it<br/>should only be used for certificate rotation purposes."
          },
          "verify_peer_ext_key_usage": {
            "type": "string",
            "description": "Verify extended key usage in peer's certificate<br/>For additional peer certificate validation, the value defined here must present in the<br/>'Extended Key Usage' of peer certificate defined in<br/>[rfc5280](https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.12).<br/><br/>Allowed values are<br/>- `clientAuth`<br/>- `serverAuth`<br/>- `codeSigning`<br/>- `emailProtection`<br/>- `timeStamping`<br/>- `ocspSigning`<br/>- raw OID, for example: \"OID:1.3.6.1.5.5.7.3.2\" means `id-pk 2` which is equivalent to `clientAuth`<br/><br/>Comma-separated string is also supported for validating more than one key usages.<br/><br/>For example, `\"serverAuth,OID:1.3.6.1.5.5.7.3.2\"`"
          },
          "dhfile": {
            "type": "string",
            "description": "Path to a file containing PEM-encoded Diffie-Hellman parameters<br/>to be used by the server if a cipher suite using Diffie-Hellman<br/>key exchange is negotiated. If not specified, default parameters<br/>are used.<br/><br/>NOTE: The <code>dhfile</code> option is not supported by TLS 1.3."
          },
          "fail_if_no_peer_cert": {
            "default": false,
            "type": "boolean",
            "description": "This option is only effective if `verify` is set to `verify_peer`.<br/><br/>If set to `true`, EMQX will reject the connection if the client fails to provide a certificate.<br/><br/>If set to `false`, EMQX will accept clients which don't present a certificate."
          },
          "honor_cipher_order": {
            "default": true,
            "type": "boolean",
            "description": "An important security setting. If this setting is enabled, the server will prioritize the cipher suites it prefers most from the list of cipher suites supported by the client, thus ignoring the client's preferences.<br/><br/>The server's cipher suites are specified by `ciphers`, with preference decreasing from left to right.<br/><br/>It is often better to use the server's preferences, as it is more likely that the server will be configured correctly."
          },
          "client_renegotiation": {
            "default": true,
            "type": "boolean",
            "description": "In protocols that support client-initiated renegotiation,<br/>the cost of resources of such an operation is higher for the server than the client.<br/>This can act as a vector for denial of service attacks.<br/>The SSL application already takes measures to counter-act such attempts,<br/>but client-initiated renegotiation can be strictly disabled by setting this option to false.<br/>The default value is true. Note that disabling renegotiation can result in<br/>long-lived connections becoming unusable due to limits on<br/>the number of messages the underlying cipher suite can encipher.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "handshake_timeout": {
            "default": "15s",
            "type": "string",
            "description": "Maximum time duration allowed for the handshake to complete",
            "example": "12m"
          }
        },
        "type": "object"
      },
      "schema_validation_http_api.node_metrics": {
        "properties": {
          "node": {
            "type": "string"
          },
          "matched": {
            "type": "integer",
            "minimum": 0
          },
          "succeeded": {
            "type": "integer",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "action_snowflake.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "10ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "s3.transport_options": {
        "properties": {
          "ipv6_probe": {
            "default": false,
            "type": "boolean",
            "description": "Whether to probe for IPv6 support."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "headers": {
            "type": "object",
            "description": "List of HTTP headers.",
            "example": {},
            "is_template": true
          },
          "max_retries": {
            "type": "integer",
            "description": "Max retry times if error on sending request.",
            "minimum": 0
          },
          "request_timeout": {
            "type": "string",
            "description": "HTTP request timeout.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "connector_azure_blob_storage.resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "clickhouse"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configs.",
            "$ref": "#/components/schemas/bridge_clickhouse.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "dashboard_sso.backend_status": {
        "required": [
          "backend"
        ],
        "properties": {
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Whether to enable this backend."
          },
          "backend": {
            "type": "string",
            "enum": [
              "ldap",
              "oidc",
              "saml"
            ],
            "description": "Backend type."
          },
          "running": {
            "type": "boolean"
          },
          "last_error": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "listeners.node_status": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name",
            "example": "emqx@127.0.0.1"
          },
          "status": {
            "$ref": "#/components/schemas/listeners.status"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_clients.client": {
        "properties": {
          "awaiting_rel_cnt": {
            "type": "integer",
            "description": "v4 api name [awaiting_rel] Number of awaiting PUBREC packet"
          },
          "awaiting_rel_max": {
            "type": "integer",
            "description": "v4 api name [max_awaiting_rel]. Maximum allowed number of awaiting PUBREC packet"
          },
          "clean_start": {
            "type": "boolean",
            "description": "Indicate whether the client is using a brand new session"
          },
          "clientid": {
            "type": "string",
            "description": "Client identifier"
          },
          "connected": {
            "type": "boolean",
            "description": "Whether the client is connected"
          },
          "connected_at": {
            "description": "Client connection time, rfc3339 or timestamp(millisecond)",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "created_at": {
            "description": "Session creation time, rfc3339 or timestamp(millisecond)",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "disconnected_at": {
            "description": "Client offline time. It's Only valid and returned when connected is false, rfc3339 or timestamp(millisecond)",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "expiry_interval": {
            "type": "integer",
            "description": "Session expiration interval, with the unit of second"
          },
          "heap_size": {
            "type": "integer",
            "description": "Process heap size with the unit of byte"
          },
          "inflight_cnt": {
            "type": "integer",
            "description": "Current length of inflight"
          },
          "inflight_max": {
            "type": "integer",
            "description": "v4 api name [max_inflight]. Maximum length of inflight"
          },
          "ip_address": {
            "type": "string",
            "description": "Client's IP address"
          },
          "is_bridge": {
            "type": "boolean",
            "description": "Indicates whether the client is connected via bridge"
          },
          "is_expired": {
            "type": "boolean",
            "description": "Indicates whether the client session is expired"
          },
          "keepalive": {
            "type": "integer",
            "description": "keepalive time, with the unit of second"
          },
          "mailbox_len": {
            "type": "integer",
            "description": "Process mailbox size"
          },
          "mqueue_dropped": {
            "type": "integer",
            "description": "Number of messages dropped by the message queue due to exceeding the length"
          },
          "mqueue_len": {
            "type": "integer",
            "description": "Current length of message queue"
          },
          "mqueue_max": {
            "type": "integer",
            "description": "v4 api name [max_mqueue]. Maximum length of message queue"
          },
          "node": {
            "type": "string",
            "description": "Name of the node to which the client is connected"
          },
          "port": {
            "type": "integer",
            "description": "Client's port"
          },
          "proto_name": {
            "type": "string",
            "description": "Client protocol name"
          },
          "proto_ver": {
            "type": "integer",
            "description": "Protocol version used by the client"
          },
          "recv_cnt": {
            "type": "integer",
            "description": "Number of TCP packets received"
          },
          "recv_msg": {
            "type": "integer",
            "description": "Number of PUBLISH packets received"
          },
          "recv_msg.dropped": {
            "type": "integer",
            "description": "Number of dropped PUBLISH packets"
          },
          "recv_msg.dropped.await_pubrel_timeout": {
            "type": "integer",
            "description": "Number of dropped PUBLISH packets due to expired"
          },
          "recv_msg.qos0": {
            "type": "integer",
            "description": "Number of PUBLISH QoS0 packets received"
          },
          "recv_msg.qos1": {
            "type": "integer",
            "description": "Number of PUBLISH QoS1 packets received"
          },
          "recv_msg.qos2": {
            "type": "integer",
            "description": "Number of PUBLISH QoS2 packets received"
          },
          "recv_oct": {
            "type": "integer",
            "description": "Number of bytes received"
          },
          "recv_pkt": {
            "type": "integer",
            "description": "Number of MQTT packets received"
          },
          "reductions": {
            "type": "integer",
            "description": "Erlang reduction"
          },
          "send_cnt": {
            "type": "integer",
            "description": "Number of TCP packets sent"
          },
          "send_msg": {
            "type": "integer",
            "description": "Number of PUBLISH packets sent"
          },
          "send_msg.dropped": {
            "type": "integer",
            "description": "Number of dropped PUBLISH packets"
          },
          "send_msg.dropped.expired": {
            "type": "integer",
            "description": "Number of dropped PUBLISH packets due to expired"
          },
          "send_msg.dropped.queue_full": {
            "type": "integer",
            "description": "Number of dropped PUBLISH packets due to queue full"
          },
          "send_msg.dropped.too_large": {
            "type": "integer",
            "description": "Number of dropped PUBLISH packets due to packet length too large"
          },
          "send_msg.qos0": {
            "type": "integer",
            "description": "Number of PUBLISH QoS0 packets sent"
          },
          "send_msg.qos1": {
            "type": "integer",
            "description": "Number of PUBLISH QoS1 packets sent"
          },
          "send_msg.qos2": {
            "type": "integer",
            "description": "Number of PUBLISH QoS2 packets sent"
          },
          "send_oct": {
            "type": "integer",
            "description": "Number of bytes sent"
          },
          "send_pkt": {
            "type": "integer",
            "description": "Number of MQTT packets sent"
          },
          "subscriptions_cnt": {
            "type": "integer",
            "description": "Number of subscriptions established by this client."
          },
          "subscriptions_max": {
            "type": "integer",
            "description": "v4 api name [max_subscriptions] Maximum number of subscriptions allowed by this client"
          },
          "username": {
            "type": "string",
            "description": "User name of client when connecting"
          },
          "mountpoint": {
            "type": "string",
            "description": "Topic mountpoint"
          },
          "durable": {
            "type": "boolean",
            "description": "Session is durable"
          },
          "n_streams": {
            "type": "integer",
            "description": "Number of streams used by the durable session",
            "minimum": 0
          },
          "seqno_q1_comm": {
            "type": "integer",
            "description": "Sequence number of the last PUBACK received from the client (Durable sessions only)",
            "minimum": 0
          },
          "seqno_q1_dup": {
            "type": "integer",
            "description": "Sequence number of the last QoS1 message sent to the client, that hasn't been acked (Durable sessions only)",
            "minimum": 0
          },
          "seqno_q1_next": {
            "type": "integer",
            "description": "Sequence number of next QoS1 message to be added to the batch (Durable sessions only)",
            "minimum": 0
          },
          "seqno_q2_comm": {
            "type": "integer",
            "description": "Sequence number of the last PUBCOMP received from the client (Durable sessions only)",
            "minimum": 0
          },
          "seqno_q2_dup": {
            "type": "integer",
            "description": "Sequence number of last unacked QoS2 PUBLISH message sent to the client (Durable sessions only)",
            "minimum": 0
          },
          "seqno_q2_rec": {
            "type": "integer",
            "description": "Sequence number of last PUBREC received from the client (Durable sessions only)",
            "minimum": 0
          },
          "seqno_q2_next": {
            "type": "integer",
            "description": "Sequence number of next QoS2 message to be added to the batch (Durable sessions only)",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "bridge_kafka.resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "emqx.file_transfer": {
        "properties": {
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Enable the File Transfer feature.<br/><br/>Enabling File Transfer implies reserving special MQTT topics in order to serve the protocol.<br/><br/>This toggle also affects the availability of the File Transfer REST API and<br/>storage-dependent background activities (e.g. garbage collection)."
          },
          "init_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Timeout for EMQX to initialize the file transfer.<br/><br/>After reaching the timeout (e.g. due to system is overloaded), the PUBACK message for `init` will contain error code (0x80).",
            "example": "32s"
          },
          "store_segment_timeout": {
            "default": "5m",
            "type": "string",
            "description": "Timeout for storing a file segment.<br/><br/>After reaching the timeout (e.g. due to system overloaded), the PUBACK message will contain error code (0x80).",
            "example": "32s"
          },
          "assemble_timeout": {
            "default": "5m",
            "type": "string",
            "description": "Timeout for assembling and exporting file segments into a final file.<br/><br/>After reaching the timeout (e.g. due to system is overloaded), the PUBACK message for `fin` will contain error code (0x80)",
            "example": "32s"
          },
          "storage": {
            "default": {
              "local": {}
            },
            "description": "Storage settings for file transfer.",
            "$ref": "#/components/schemas/file_transfer.storage_backend"
          }
        },
        "type": "object"
      },
      "opentelemetry.otel_metrics": {
        "required": [
          "enable"
        ],
        "properties": {
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Enable or disable Open Telemetry signal."
          },
          "interval": {
            "default": "10s",
            "type": "string",
            "description": "The delay interval between two consecutive exports of Open Telemetry signals.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_mqtt.get": {
        "required": [
          "server"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mqtt.creation_opts"
          },
          "mode": {
            "default": "cluster_shareload",
            "type": "string",
            "enum": [
              "cluster_shareload"
            ],
            "deprecated": true,
            "description": "The mode of the MQTT Bridge.<br/><br/>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/><br/>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid' is suffixed by the node name, this is to avoid<br/>clientid conflicts between different nodes. And we can only use shared subscription<br/>topic filters for <code>remote.topic</code> of ingress connections."
          },
          "server": {
            "type": "string",
            "description": "The host and port of the remote MQTT broker"
          },
          "clientid_prefix": {
            "type": "string",
            "description": "Optional prefix to prepend to the clientid used by egress bridges."
          },
          "reconnect_interval": {
            "type": "string",
            "deprecated": true
          },
          "proto_ver": {
            "default": "v4",
            "type": "string",
            "enum": [
              "v3",
              "v4",
              "v5"
            ],
            "description": "The MQTT protocol version"
          },
          "bridge_mode": {
            "default": false,
            "type": "boolean",
            "description": "If enable bridge mode.<br/>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT<br/>broker MUST support this feature.<br/>If bridge_mode is set to true, the bridge will indicate to the remote broker that it is a bridge not an ordinary client.<br/>This means that loop detection will be more effective and that retained messages will be propagated correctly."
          },
          "username": {
            "type": "string",
            "description": "The username of the MQTT protocol"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password of the MQTT protocol",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "Whether to start a clean session when reconnecting a remote broker for ingress bridge"
          },
          "keepalive": {
            "default": "160s",
            "type": "string",
            "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
            "minimum": 0
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "ingress": {
            "description": "The ingress config defines how this bridge receive messages from the remote MQTT broker, and then<br/>        send them to the local broker.<br/><br/>        Template with variables is allowed in 'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>        NOTE: if this bridge is used as the input of a rule, and also 'local.topic' is<br/>        configured, then messages got from the remote broker will be sent to both the 'local.topic' and<br/>        the rule.",
            "$ref": "#/components/schemas/connector_mqtt.ingress"
          },
          "egress": {
            "description": "The egress config defines how this bridge forwards messages from the local broker to the remote broker.<br/><br/>Template with variables is allowed in 'remote.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>NOTE: if this bridge is used as the action of a rule, and also 'local.topic'<br/>is configured, then both the data got from the rule and the MQTT messages that matches<br/>'local.topic' will be forwarded.",
            "$ref": "#/components/schemas/connector_mqtt.egress"
          }
        },
        "type": "object"
      },
      "bridge_oracle.get_connector": {
        "required": [
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "oracle"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Oracle Database default port 1521 is used if `[:Port]` is not specified."
          },
          "sid": {
            "type": "string",
            "description": "Sid for Oracle Database."
          },
          "service_name": {
            "type": "string",
            "description": "Service Name for Oracle Database."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_oracle.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "file_transfer.local_storage_exporter": {
        "properties": {
          "root": {
            "type": "string",
            "description": "Directory where the uploaded files are kept."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this backend."
          }
        },
        "type": "object"
      },
      "bridge_dynamo.put": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "hash_key",
          "region",
          "table",
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "template": {
            "default": "",
            "type": "string",
            "description": "Template, the default value is empty. When this value is empty the whole message will be stored in the database.<br><br/>The template can be any valid JSON with placeholders and make sure all keys for table are here, example:<br><br/>  <code>{\"id\" : \"${id}\", \"clientid\" : \"${clientid}\", \"data\" : \"${payload.data}\"}</code>"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to DynamoDB. All MQTT `PUBLISH` messages with the topic<br/>matching the `local_topic` will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also `local_topic` is<br/>configured, then both the data got from the rule and the MQTT messages that match `local_topic`<br/>will be forwarded."
          },
          "hash_key": {
            "type": "string",
            "description": "DynamoDB Hash Key"
          },
          "range_key": {
            "type": "string",
            "description": "DynamoDB Range Key"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_dynamo.creation_opts"
          },
          "url": {
            "type": "string",
            "description": "The url of DynamoDB endpoint."
          },
          "region": {
            "type": "string",
            "description": "Region of AWS Dynamo"
          },
          "table": {
            "type": "string",
            "description": "DynamoDB Table."
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "Access Key ID for connecting to DynamoDB."
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "AWS Secret Access Key for connecting to DynamoDB.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_subscriptions.subscription": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Access type",
            "example": "emqx@127.0.0.1"
          },
          "topic": {
            "type": "string",
            "description": "Topic name",
            "example": "testtopic/1"
          },
          "clientid": {
            "type": "string",
            "description": "Client identifier",
            "example": "emqx_clientid_xx128cdhfc"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "QoS",
            "minimum": 0,
            "example": 0
          },
          "nl": {
            "type": "integer",
            "description": "No Local",
            "example": 0
          },
          "rap": {
            "type": "integer",
            "description": "Retain as Published",
            "example": 0
          },
          "rh": {
            "type": "integer",
            "description": "Retain Handling",
            "example": 0
          },
          "durable": {
            "type": "boolean",
            "description": "Durable subscription",
            "example": false
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "greptimedb"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_greptimedb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_postgres.get_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pgsql"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "Disables the usage of prepared statements in the connections.<br/>Some endpoints, like PGBouncer or Supabase in Transaction mode, do not<br/>support session features such as prepared statements.  For such connections,<br/>this option should be enabled."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_greptimedb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_listeners.ssl_listener": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Listener ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "ssl"
            ],
            "description": "Listener Type"
          },
          "name": {
            "type": "string",
            "description": "Listener Name"
          },
          "running": {
            "type": "boolean",
            "description": "Listener Running status"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "Size of the acceptor pool."
          },
          "tcp_options": {
            "description": "Setting the TCP socket options.",
            "$ref": "#/components/schemas/emqx.tcp_opts"
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP,<br/>this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "Timeout for proxy protocol.<br/>EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
            "example": "12m"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable the listener."
          },
          "bind": {
            "type": "string",
            "description": "The IP address and port that the listener will bind.",
            "example": "127.0.0.1:80"
          },
          "max_connections": {
            "default": 1024,
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "integer",
                "minimum": 1
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "type": "integer",
            "description": "Maximum connections per second."
          },
          "enable_authn": {
            "default": true,
            "type": "boolean",
            "description": "Set <code>true</code> (default) to enable client authentication on this listener.<br/>When set to <code>false</code> clients will be allowed to connect without authentication."
          },
          "mountpoint": {
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "access_rules": {
            "default": [],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses.<br/>The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "ssl_options": {
            "description": "SSL Socket options.",
            "$ref": "#/components/schemas/emqx.listener_ssl_opts"
          },
          "status": {
            "description": "listener status",
            "$ref": "#/components/schemas/listeners.status"
          },
          "node_status": {
            "type": "array",
            "description": "listener status of each node in the cluster",
            "items": {
              "$ref": "#/components/schemas/listeners.node_status"
            }
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sqlserver"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configuration.",
            "$ref": "#/components/schemas/bridge_sqlserver.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_redis.put_sentinel": {
        "required": [
          "command_template",
          "sentinel",
          "servers"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "command_template": {
            "type": "array",
            "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_sentinel"
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "sentinel",
            "type": "string",
            "enum": [
              "sentinel"
            ],
            "description": "Sentinel mode. Must be set to 'sentinel' when Redis server is running in sentinel mode."
          },
          "sentinel": {
            "type": "string",
            "description": "The cluster name in Redis sentinel mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis database ID.",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_datalayers.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "durable_queues.durable_queue_get": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "sso.client_file_jwks": {
        "required": [
          "file",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "file"
            ],
            "description": "The JWKS source type."
          },
          "file": {
            "type": "string",
            "description": "The content of the JWKS."
          }
        },
        "type": "object"
      },
      "gcp_pubsub_consumer.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "emqx_topic_metrics_api.topic_metrics": {
        "required": [
          "create_time",
          "metrics",
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Topic",
            "example": "testtopic/1"
          },
          "create_time": {
            "description": "Create time",
            "example": "2022-01-14T21:48:47+08:00",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-second",
                "example": 1640995200
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "reset_time": {
            "description": "Reset time. In rfc3339. Nullable if never reset",
            "example": "2022-01-14T21:48:47+08:00",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-second",
                "example": 1640995200
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "metrics": {
            "description": "Metrics",
            "$ref": "#/components/schemas/emqx_topic_metrics_api.metrics"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_producer.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "listeners.quic_required_bind": {
        "required": [
          "bind",
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "quic"
            ],
            "description": "Listener type"
          },
          "running": {
            "type": "boolean",
            "description": "Listener status"
          },
          "id": {
            "type": "string",
            "description": "Listener id"
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          },
          "ciphers": {
            "default": [
              "TLS_AES_256_GCM_SHA384",
              "TLS_AES_128_GCM_SHA256",
              "TLS_CHACHA20_POLY1305_SHA256"
            ],
            "type": "array",
            "description": "This config holds TLS cipher suite names separated by comma,<br/>or as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in which the<br/>client and server encrypts information over the network connection.<br/>Selecting a good cipher suite is critical for the<br/>application's data security, confidentiality and performance.<br/><br/>The names should be in OpenSSL string format (not RFC format).<br/>All default values and examples provided by EMQX config<br/>documentation are all in OpenSSL format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/><br/><br/>NOTE: QUIC listener supports only 'tlsv1.3' ciphers",
            "items": {
              "type": "string"
            }
          },
          "ssl_options": {
            "description": "TLS options for QUIC transport",
            "$ref": "#/components/schemas/emqx.listener_quic_ssl_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable listener."
          },
          "bind": {
            "default": 14567,
            "type": "string",
            "description": "IP address and port for the listening socket.",
            "example": "127.0.0.1:80"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The size of the listener's receiving pool.",
            "minimum": 1
          },
          "max_connections": {
            "default": "infinity",
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message<br/>is delivered to the subscriber. The mountpoint is a way that users can use<br/>to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`, then the client actually subscribes to the topic<br/>`some_tenant/t`. Similarly, if another client B (connected to the same listener<br/>as the client A) sends a message to topic `t`, the message is routed<br/>to all the clients subscribed `some_tenant/t`, so client A will receive the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>: clientid<br/>  - <code>${username}</code>: username"
          },
          "zone": {
            "default": "default",
            "type": "string",
            "description": "The configuration zone to which the listener belongs.<br/>Clients connected to this listener will inherit zone-settings created under this zone name.<br/><br/>A zone can override the configs under below root names:<br/>- `mqtt`<br/>- `force_shutdown`<br/>- `force_gc`<br/>- `flapping_detect`<br/>- `durable_sessions`"
          },
          "enable_authn": {
            "default": true,
            "type": "string",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "description": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication<br/>process goes through the configured authentication chain.<br/>When set to <code>false</code>, any client (with or without username/password) is allowed to connect.<br/>When set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be<br/>denied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off<br/>anonymous clients early."
          },
          "max_conn_rate": {
            "default": "infinity",
            "type": "string",
            "description": "Used to limit the rate at which the current listener accepts connections.<br/><br/>Once the limit is reached, EMQX will pause fetching connections from the Accept queue, thereby delaying or rejecting new connections.<br/><br/>For example:<br/><br/>- `1000/s`: Only accepts 1000 connections per second.<br/>- `1000/10s`: Only accepts 1000 connections every 10 seconds.",
            "example": "1000/s"
          },
          "messages_rate": {
            "type": "string",
            "description": "Used to limit the number of messages a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>For example:<br/><br/>- `500/s`: Only 500 messages will be received per second, and the remaining messages will be delayed.<br/>- `500/10s`: Only 500 messages will be received every 10 seconds and the remaining messages will be delayed.",
            "example": "1000/s"
          },
          "bytes_rate": {
            "type": "string",
            "description": "Used to limit the number of bytes a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>The unit of the bytes could be: B, KB, MB, GB.<br/><br/>For example:<br/><br/>- `500KB/s`: Only 500 kilobytes per second will be received, and the remaining bytes will be delayed.<br/>- `500MB/10s`: Only 500 megabytes will be received every 10 seconds, and the remaining bytes will be delayed.",
            "example": "100MB/s"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_mnesia.username_response_data": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_username"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/public.meta"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.put_connector": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "endpoint"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "Access Key ID for connecting to Amazon Kinesis."
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "AWS Secret Access Key for connecting to Amazon Kinesis.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "endpoint": {
            "type": "string",
            "description": "The url of Amazon Kinesis endpoint.",
            "example": "https://kinesis.us-east-1.amazonaws.com"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kinesis.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_timescale.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Configuration Parameters Specific to the PostgreSQL Action",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_influxdb.connector_influxdb_api_v2": {
        "required": [
          "bucket",
          "influxdb_type",
          "org",
          "token"
        ],
        "properties": {
          "influxdb_type": {
            "default": "influxdb_api_v2",
            "type": "string",
            "enum": [
              "influxdb_api_v2"
            ],
            "description": "InfluxDB's protocol. Support InfluxDB v2.0 and after."
          },
          "bucket": {
            "type": "string",
            "description": "InfluxDB bucket name."
          },
          "org": {
            "type": "string",
            "description": "Organization name of InfluxDB."
          },
          "token": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB token.",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "elasticsearch.post": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "elasticsearch"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_http.connector_resource_opts"
          },
          "server": {
            "default": "127.0.0.1:9200",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Elasticsearch default port 9200 is used if `[:Port]` is not specified."
          },
          "authentication": {
            "description": "Authentication configuration",
            "oneOf": [
              {
                "$ref": "#/components/schemas/elasticsearch.auth_basic"
              }
            ]
          }
        },
        "type": "object"
      },
      "connector_datalayers.datalayers_influxdb_v1_parameters": {
        "required": [
          "database"
        ],
        "properties": {
          "driver_type": {
            "default": "influxdb_v1",
            "type": "string",
            "enum": [
              "influxdb_v1"
            ],
            "description": "The Driver used to communicate with Datalayers service."
          },
          "database": {
            "type": "string",
            "description": "Datalayers database."
          },
          "username": {
            "type": "string",
            "description": "Datalayers username."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Datalayers password.",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "bridge_kafka.producer_kafka_opts": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Kafka topic name.  Supports templates (e.g.: `t-${payload.t}`)."
          },
          "message": {
            "description": "Template for rendering a message.",
            "$ref": "#/components/schemas/bridge_kafka.kafka_message"
          },
          "max_linger_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum duration for a per-partition producer to wait for messages in order to collect a batch to buffer.<br/>The default value `0` means no wait. For non-memory buffer mode, it's advised to configure at least `5ms` for less IOPS.",
            "example": "32s"
          },
          "max_linger_bytes": {
            "default": "10MB",
            "type": "string",
            "description": "Maximum number of bytes for a per-partition producer to wait for messages in order to collect a batch to buffer.",
            "example": "32MB"
          },
          "max_batch_bytes": {
            "default": "896KB",
            "type": "string",
            "description": "Maximum bytes to collect in a Kafka message batch. Most of the Kafka brokers default to a limit of 1 MB batch size. EMQX's default value is less than 1 MB in order to compensate Kafka message encoding overheads (especially when each individual message is very small). When a single message is over the limit, it is still sent (as a single element batch).",
            "example": "32MB"
          },
          "compression": {
            "default": "no_compression",
            "type": "string",
            "enum": [
              "no_compression",
              "snappy",
              "gzip"
            ],
            "description": "Specify the method of compression."
          },
          "partition_strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "key_dispatch"
            ],
            "description": "Partition strategy is to tell the producer how to dispatch messages to partitions.<br/><br/><code>random</code>: Randomly pick a partition for each message.<br/><code>key_dispatch</code>: Assigns messages to partitions based on a hash of the message key,<br/>ensuring consistent partition for messages with the same key."
          },
          "required_acks": {
            "default": "all_isr",
            "type": "string",
            "enum": [
              "all_isr",
              "leader_only",
              "none"
            ],
            "description": "The acknowledgement criteria for the partition leader. It determines the level of confirmation required from partition replicas before sending an acknowledgement back to the producer.<br/><br/><code>all_isr</code>: Require all in-sync replicas to acknowledge.<br/><code>leader_only</code>: Require only the partition-leader's acknowledgement.<br/><code>none</code>: No need for Kafka to acknowledge at all."
          },
          "kafka_headers": {
            "type": "string",
            "description": "Provide a placeholder for message headers<br/><br/>e.g. <code>${pub_props}</code><br/><br/>Note that the value of the placeholder must be either an object:<br/><code>{\"foo\": \"bar\"}</code><br/>or an array of key-value pairs:<br/><code>[{\"key\": \"foo\", \"value\": \"bar\"}]</code>"
          },
          "kafka_ext_headers": {
            "type": "array",
            "description": "Provide more key-value pairs for message headers<br/><br/>The key-value pairs here will be combined with the<br/>value of <code>kafka_headers</code> field before sending producing.",
            "items": {
              "$ref": "#/components/schemas/bridge_kafka.producer_kafka_ext_headers"
            }
          },
          "kafka_header_value_encode_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "json"
            ],
            "description": "The encoding mode for headers.<br/><br/> - `none`: Add only strings are added as header values<br/> - `json`: Encode header values as JSON string"
          },
          "partition_count_refresh_interval": {
            "default": "60s",
            "type": "string",
            "description": "The time interval for Kafka producer to discover increased number of partitions.<br/>After the number of partitions is increased in Kafka, EMQX will start taking the<br/>discovered partitions into account when dispatching messages per <code>partition_strategy</code>.",
            "example": "1h"
          },
          "partitions_limit": {
            "default": "all_partitions",
            "description": "Limit the number of partitions to produce data for the given topic.<br/>The special value `all_partitions` is to utilize all partitions for the topic.<br/>Setting this to a value which is greater than the total number of partitions in has no effect.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "all_partitions"
                ]
              }
            ]
          },
          "max_inflight": {
            "default": 10,
            "type": "integer",
            "description": "The maximum number of message batches that the producer can send to each partition before it must wait for an acknowledgement.<br/>Setting a higher number can enhance throughput. However, value above 1 may lead to potential message reordering risks.",
            "minimum": 1
          },
          "buffer": {
            "description": "Configure producer message buffer.<br/><br/>Tell Kafka producer how to buffer messages when EMQX has more messages to send than Kafka can keep up, or when Kafka is down.",
            "$ref": "#/components/schemas/bridge_kafka.producer_buffer"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "async",
              "sync"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "sync_query_timeout": {
            "default": "5s",
            "type": "string",
            "description": "This parameter defines the timeout limit for synchronous queries. It applies only when the query mode is configured to 'sync'.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_tdengine.put": {
        "required": [
          "database",
          "password",
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to TDengine. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The TDengine default port 6041 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "authn.http_post": {
        "required": [
          "backend",
          "mechanism",
          "method",
          "url"
        ],
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "post"
            ],
            "description": "HTTP request method."
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=30, max=1000"
            },
            "type": "object",
            "description": "List of HTTP Headers.",
            "example": {}
          },
          "mechanism": {
            "type": "string",
            "enum": [
              "password_based"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "http"
            ],
            "description": "Backend type."
          },
          "url": {
            "type": "string",
            "description": "URL of the HTTP server."
          },
          "body": {
            "type": "object",
            "description": "HTTP request body.",
            "example": {}
          },
          "request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "HTTP request timeout.",
            "example": "32s"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          },
          "request": {
            "description": "Configure HTTP request parameters.",
            "$ref": "#/components/schemas/connector_http.request"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "max_retries": {
            "type": "integer",
            "deprecated": true,
            "minimum": 0
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "bridge_mqtt.post": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mqtt"
            ],
            "description": "The bridge type."
          },
          "name": {
            "type": "string",
            "description": "Bridge name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mqtt.creation_opts"
          },
          "mode": {
            "default": "cluster_shareload",
            "type": "string",
            "enum": [
              "cluster_shareload"
            ],
            "deprecated": true,
            "description": "The mode of the MQTT Bridge.<br/><br/>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/><br/>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid' is suffixed by the node name, this is to avoid<br/>clientid conflicts between different nodes. And we can only use shared subscription<br/>topic filters for <code>remote.topic</code> of ingress connections."
          },
          "server": {
            "type": "string",
            "description": "The host and port of the remote MQTT broker"
          },
          "clientid_prefix": {
            "type": "string",
            "description": "Optional prefix to prepend to the clientid used by egress bridges."
          },
          "reconnect_interval": {
            "type": "string",
            "deprecated": true
          },
          "proto_ver": {
            "default": "v4",
            "type": "string",
            "enum": [
              "v3",
              "v4",
              "v5"
            ],
            "description": "The MQTT protocol version"
          },
          "bridge_mode": {
            "default": false,
            "type": "boolean",
            "description": "If enable bridge mode.<br/>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT<br/>broker MUST support this feature.<br/>If bridge_mode is set to true, the bridge will indicate to the remote broker that it is a bridge not an ordinary client.<br/>This means that loop detection will be more effective and that retained messages will be propagated correctly."
          },
          "username": {
            "type": "string",
            "description": "The username of the MQTT protocol"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password of the MQTT protocol",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "Whether to start a clean session when reconnecting a remote broker for ingress bridge"
          },
          "keepalive": {
            "default": "160s",
            "type": "string",
            "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
            "minimum": 0
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "ingress": {
            "description": "The ingress config defines how this bridge receive messages from the remote MQTT broker, and then<br/>        send them to the local broker.<br/><br/>        Template with variables is allowed in 'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>        NOTE: if this bridge is used as the input of a rule, and also 'local.topic' is<br/>        configured, then messages got from the remote broker will be sent to both the 'local.topic' and<br/>        the rule.",
            "$ref": "#/components/schemas/connector_mqtt.ingress"
          },
          "egress": {
            "description": "The egress config defines how this bridge forwards messages from the local broker to the remote broker.<br/><br/>Template with variables is allowed in 'remote.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>NOTE: if this bridge is used as the action of a rule, and also 'local.topic'<br/>is configured, then both the data got from the rule and the MQTT messages that matches<br/>'local.topic' will be forwarded.",
            "$ref": "#/components/schemas/connector_mqtt.egress"
          }
        },
        "type": "object"
      },
      "kafka_consumer.post_connector": {
        "required": [
          "bootstrap_hosts",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka_consumer"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Kafka <code>host:port</code> endpoints to bootstrap the client."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching topic metadata.",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "gateway.jt808_frame": {
        "properties": {
          "max_length": {
            "default": 8192,
            "type": "integer",
            "description": "The maximum length of the JT/T 808 frame.",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "bridge_cassa.post_connector": {
        "required": [
          "keyspace",
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cassandra"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "servers": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port][,Host2:Port]`.<br/><br/>The Cassandra default port 9042 is used if `[:Port]` is not specified."
          },
          "keyspace": {
            "type": "string",
            "description": "Keyspace name to connect to."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_cassa.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.kafka_message": {
        "properties": {
          "key": {
            "default": "${.clientid}",
            "type": "string",
            "description": "Template for rendering message key. If the template is rendered into a NULL value (i.e. there is no such data field in Rule Engine context) then <code>NULL</code> (but not empty string) is used."
          },
          "value": {
            "default": "${.}",
            "type": "string",
            "description": "Template for rendering Kafka message value. If the template is rendered into a NULL value (i.e. there is no such data field in Rule Engine context) then Kafka's <code>NULL</code> (but not empty string) is used."
          },
          "timestamp": {
            "default": "${.timestamp}",
            "type": "string",
            "description": "Which timestamp to use. The timestamp is expected to be a millisecond precision Unix epoch which can be in string format, e.g. <code>1661326462115</code> or <code>'1661326462115'</code>. When the desired data field for this template is not found, or if the found data is not a valid integer, the current system timestamp will be used."
          }
        },
        "type": "object"
      },
      "actions_and_sources.source_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_oracle.put": {
        "required": [
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
            "type": "string",
            "format": "sql",
            "description": "SQL Template. The template string can contain placeholders for message metadata and payload field. The placeholders are inserted without any checking and special formatting, so it is important to ensure that the inserted values are formatted and escaped correctly."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Oracle Database. All MQTT 'PUBLISH' messages with the topic matching the local_topic will be forwarded.<br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is configured, then both the data got from the rule and the MQTT messages that match local_topic will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Oracle Database default port 1521 is used if `[:Port]` is not specified."
          },
          "sid": {
            "type": "string",
            "description": "Sid for Oracle Database."
          },
          "service_name": {
            "type": "string",
            "description": "Service Name for Oracle Database."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "rule_engine.metrics": {
        "properties": {
          "matched": {
            "type": "integer",
            "description": "How many times the FROM clause of the SQL is matched.",
            "minimum": 0
          },
          "matched.rate": {
            "type": "number",
            "description": "The rate of matched, times/second"
          },
          "matched.rate.max": {
            "type": "number",
            "description": "The max rate of matched, times/second"
          },
          "matched.rate.last5m": {
            "type": "number",
            "description": "The average rate of matched in last 5 minutes, times/second"
          },
          "passed": {
            "type": "integer",
            "description": "How many times the SQL is passed",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "description": "How many times the SQL statement has failed",
            "minimum": 0
          },
          "failed.exception": {
            "type": "integer",
            "description": "How many times the SQL is failed due to exceptions. This may because of a crash when calling a SQL function, or trying to do arithmetic operation on undefined variables",
            "minimum": 0
          },
          "failed.unknown": {
            "type": "integer",
            "description": "How many times the SQL is failed due to an unknown error.",
            "minimum": 0
          },
          "actions.total": {
            "type": "integer",
            "description": "How many times the actions are called by the rule. This value may several times of 'matched', depending on the number of the actions of the rule.",
            "minimum": 0
          },
          "actions.success": {
            "type": "integer",
            "description": "How many times the rule successided to call the actions.",
            "minimum": 0
          },
          "actions.failed": {
            "type": "integer",
            "description": "How many times the rule failed to call the actions.",
            "minimum": 0
          },
          "actions.failed.out_of_service": {
            "type": "integer",
            "description": "How many times the rule has failed to call actions due to the action is out of service. For example, a bridge is disabled or stopped.",
            "minimum": 0
          },
          "actions.failed.unknown": {
            "type": "integer",
            "description": "The number of action failures that have occurred due to unanticipated reasons. For more information on these errors, please refer to the EMQX log file.",
            "minimum": 0
          },
          "actions.discarded": {
            "type": "integer",
            "description": "The number of discarded actions due to action being disabled or race condition while action is being deleted.",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "bridge_kinesis.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_timescale.put": {
        "required": [
          "database",
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "plugins.plugin": {
        "required": [
          "description",
          "name",
          "rel_apps",
          "rel_vsn",
          "running_status"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name-Vsn: without .tar.gz",
            "example": "emqx_plugin_template-5.0-rc.1"
          },
          "author": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "EMQX Team"
            ]
          },
          "builder": {
            "$ref": "#/components/schemas/plugins.builder"
          },
          "built_on_otp_release": {
            "type": "string",
            "example": "24"
          },
          "compatibility": {
            "type": "object",
            "example": {
              "emqx": "~>5.0"
            }
          },
          "git_commit_or_build_date": {
            "type": "string",
            "description": "Last git commit date by `git log -1 --pretty=format:'%cd' --date=format:'%Y-%m-%d`.<br/> If the last commit date is not available, the build date will be presented.",
            "example": "2021-12-25"
          },
          "functionality": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Demo"
            ]
          },
          "git_ref": {
            "type": "string",
            "example": "ddab50fafeed6b1faea70fc9ffd8c700d7e26ec1"
          },
          "metadata_vsn": {
            "type": "string",
            "example": "0.1.0"
          },
          "rel_vsn": {
            "type": "string",
            "description": "Plugins release version",
            "example": "5.0-rc.1"
          },
          "rel_apps": {
            "type": "array",
            "description": "Aplications in plugin.",
            "items": {
              "type": "string"
            },
            "example": [
              "emqx_plugin_template-5.0.0",
              "map_sets-1.1.0"
            ]
          },
          "repo": {
            "type": "string",
            "example": "https://github.com/emqx/emqx-plugin-template"
          },
          "description": {
            "type": "string",
            "description": "Plugin description.",
            "example": "This is an demo plugin description"
          },
          "running_status": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/plugins.running_status"
            }
          },
          "readme": {
            "type": "string",
            "description": "only return when `GET /plugins/{name}`.",
            "example": "This is an demo plugin."
          }
        },
        "type": "object"
      },
      "bridge_mongodb.get_single": {
        "required": [
          "database",
          "mongo_type",
          "name",
          "resource_opts",
          "server",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "mongo_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "Standalone instance. Must be set to 'single' when MongoDB server is running in standalone mode."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this MongoDB Action"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "The collection where data will be stored into"
          },
          "payload_template": {
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc."
          },
          "resource_opts": {
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "mongodb_single"
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.post_connector": {
        "required": [
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "influxdb"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The InfluxDB default port 8086 is used if `[:Port]` is not specified."
          },
          "parameters": {
            "description": "Set of parameters specific for the given type of this InfluxDB connector, `influxdb_type` can be one of `influxdb_api_v1`, `influxdb_api_v1`.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/connector_influxdb.connector_influxdb_api_v2"
              },
              {
                "$ref": "#/components/schemas/connector_influxdb.connector_influxdb_api_v1"
              }
            ]
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_influxdb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_opents.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "opents"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "OpenTSDB action parameters",
            "$ref": "#/components/schemas/bridge_opents.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.post_grpc_v1": {
        "required": [
          "dbname",
          "name",
          "type",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to the GreptimeDB. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this Sink is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "Conf of GreptimeDB gRPC protocol to write data points. Write syntax is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported, which is the same as InfluxDB line protocol.<br/>See also [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) and<br/>[GreptimeDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>Please note that a placeholder for an integer value must be annotated with a suffix `i`. For example `${payload.int_value}i`."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:4001",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The GreptimeDB default port 8086 is used if `[:Port]` is not specified."
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "GreptimeDB time precision."
          },
          "dbname": {
            "type": "string",
            "description": "GreptimeDB database."
          },
          "username": {
            "type": "string",
            "description": "GreptimeDB username."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "GreptimeDB password.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "greptimedb"
            ],
            "description": "The type of the action."
          },
          "name": {
            "type": "string",
            "description": "The name of the action."
          }
        },
        "type": "object"
      },
      "bridge_kafka.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "kafka_producer"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in Kafka."
          },
          "parameters": {
            "description": "Kafka producer configs.",
            "$ref": "#/components/schemas/bridge_kafka.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "rocketmq.post_connector": {
        "required": [
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rocketmq"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "servers": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The RocketMQ default port 9876 is used if `[:Port]` is not specified."
          },
          "namespace": {
            "type": "string",
            "description": "The namespace field MUST be set if you are using the RocketMQ service in<br/>aliyun cloud and also the namespace is enabled,<br/>or if you have configured a namespace in your RocketMQ server.<br/>For RocketMQ in aliyun cloud, the namespace is the instance ID."
          },
          "access_key": {
            "default": "",
            "type": "string",
            "description": "RocketMQ server `accessKey`."
          },
          "secret_key": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ server `secretKey`.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "security_token": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ Server Security Token",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/rocketmq.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.put_connector": {
        "required": [
          "parameters"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The InfluxDB default port 8086 is used if `[:Port]` is not specified."
          },
          "parameters": {
            "description": "Set of parameters specific for the given type of this InfluxDB connector, `influxdb_type` can be one of `influxdb_api_v1`, `influxdb_api_v1`.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/connector_influxdb.connector_influxdb_api_v2"
              },
              {
                "$ref": "#/components/schemas/connector_influxdb.connector_influxdb_api_v1"
              }
            ]
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_influxdb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_mnesia.rules_for_clientid": {
        "required": [
          "clientid"
        ],
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/emqx_authz_api_mnesia.rule_item"
            }
          },
          "clientid": {
            "type": "string",
            "description": "ClientID",
            "example": "client1"
          }
        },
        "type": "object"
      },
      "connector_mqtt.ingress_remote": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Receive messages from which topic of the remote broker"
          },
          "qos": {
            "default": 1,
            "maximum": 2,
            "type": "integer",
            "description": "The QoS level to be used when subscribing to the remote broker",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.source_parameters": {
        "required": [
          "queue"
        ],
        "properties": {
          "queue": {
            "type": "string",
            "description": "The queue name of the RabbitMQ broker."
          },
          "wait_for_publish_confirmations": {
            "default": true,
            "type": "boolean",
            "description": "A boolean value that indicates whether to wait for RabbitMQ to confirm message publication when using publisher confirms."
          },
          "no_ack": {
            "default": true,
            "type": "boolean",
            "description": "Whether to use no_ack mode when consuming messages from the RabbitMQ broker."
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.post_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mqtt"
            ]
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/bridge_mqtt_publisher.ingress_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.source_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_clients.coap_client": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Name of the node to which the client is connected"
          },
          "clientid": {
            "type": "string",
            "description": "Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username of client when connecting"
          },
          "mountpoint": {
            "type": "string",
            "description": "Topic mountpoint"
          },
          "proto_name": {
            "type": "string",
            "description": "Client protocol name"
          },
          "proto_ver": {
            "type": "string",
            "description": "Protocol version used by the client"
          },
          "ip_address": {
            "type": "string",
            "description": "Client's IP address"
          },
          "port": {
            "type": "integer",
            "description": "Client's port"
          },
          "is_bridge": {
            "type": "boolean",
            "description": "Indicates whether the client is connected via bridge"
          },
          "connected_at": {
            "description": "Client connection time",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "disconnected_at": {
            "description": "Client offline time, This field is only valid and returned when connected is false",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "connected": {
            "type": "boolean",
            "description": "Whether the client is connected"
          },
          "keepalive": {
            "type": "integer",
            "description": "Keepalive time, with the unit of second"
          },
          "clean_start": {
            "type": "boolean",
            "description": "Indicate whether the client is using a brand new session"
          },
          "expiry_interval": {
            "type": "integer",
            "description": "Session expiration interval, with the unit of second"
          },
          "created_at": {
            "description": "Session creation time",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "subscriptions_cnt": {
            "type": "integer",
            "description": "Number of subscriptions established by this client"
          },
          "subscriptions_max": {
            "type": "integer",
            "description": "Maximum number of subscriptions allowed by this client"
          },
          "inflight_cnt": {
            "type": "integer",
            "description": "Current length of inflight"
          },
          "inflight_max": {
            "type": "integer",
            "description": "Maximum length of inflight"
          },
          "mqueue_len": {
            "type": "integer",
            "description": "Current length of message queue"
          },
          "mqueue_max": {
            "type": "integer",
            "description": "Maximum length of message queue"
          },
          "mqueue_dropped": {
            "type": "integer",
            "description": "Number of messages dropped by the message queue due to exceeding the length"
          },
          "awaiting_rel_cnt": {
            "type": "integer",
            "description": "Number of awaiting acknowledge packet"
          },
          "awaiting_rel_max": {
            "type": "integer",
            "description": "Maximum allowed number of awaiting PUBREC packet"
          },
          "recv_oct": {
            "type": "integer",
            "description": "Number of bytes received"
          },
          "recv_cnt": {
            "type": "integer",
            "description": "Number of socket packets received"
          },
          "recv_pkt": {
            "type": "integer",
            "description": "Number of protocol packets received"
          },
          "recv_msg": {
            "type": "integer",
            "description": "Number of message packets received"
          },
          "send_oct": {
            "type": "integer",
            "description": "Number of bytes sent"
          },
          "send_cnt": {
            "type": "integer",
            "description": "Number of socket packets sent"
          },
          "send_pkt": {
            "type": "integer",
            "description": "Number of protocol packets sent"
          },
          "send_msg": {
            "type": "integer",
            "description": "Number of message packets sent"
          },
          "mailbox_len": {
            "type": "integer",
            "description": "Process mailbox size"
          },
          "heap_size": {
            "type": "integer",
            "description": "Process heap size with the unit of byte"
          },
          "reductions": {
            "type": "integer",
            "description": "Erlang reduction"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_clients.authz_cache": {
        "properties": {
          "access": {
            "type": "string",
            "description": "Access type",
            "example": "publish"
          },
          "result": {
            "type": "string",
            "enum": [
              "allow",
              "denny"
            ],
            "description": "Allow or deny",
            "example": "allow"
          },
          "topic": {
            "type": "string",
            "description": "Topic name",
            "example": "testtopic/1"
          },
          "updated_time": {
            "type": "integer",
            "description": "Update time",
            "example": 1687850712989
          }
        },
        "type": "object"
      },
      "slow_subs.slow_subs": {
        "properties": {
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Enable Slow Subscriptions"
          },
          "threshold": {
            "default": "500ms",
            "type": "string",
            "description": "The Client ID and topic of the consumer whose message latency is greater than this threshold will be recorded in the slow subscription list.",
            "example": "32s"
          },
          "expire_interval": {
            "default": "300s",
            "type": "string",
            "description": "The expiration time of the slow subscription record, if the record is not updated within the expiration time, then the record will be deleted.",
            "example": "32s"
          },
          "top_k_num": {
            "default": 10,
            "type": "integer",
            "description": "The maximum number of slow-subscription records, up to a maximum of 1000.",
            "minimum": 1
          },
          "stats_type": {
            "default": "whole",
            "type": "string",
            "enum": [
              "whole",
              "internal",
              "response"
            ],
            "description": "Message latency calculation method:<br/><br/>- `whole`: The time from when the message arrives at the EMQX (the EMQX gets the message from the receive-buffer) until the message completes delivery.<br/>- `internal`: The time from when the message arrives at the EMQX (the EMQX gets the message from the receive-buffer) to when the message begins to be delivered (the EMQX attempts to write the message to the send-buffer).<br/>- `response`: The time from the start of message delivery to the completion.<br/><br/>Note: The completion delivery time refers to the time when QoS 1 and 2 messages complete the MQTT message response process, i.e., the time when QoS 1 message receives the PUBACK packet and QoS 2 message receives the PUBCOMP packet.<br/>Since there is no response packet for QoS 0 message, the completion delivery time of the QoS 0 message will be replaced by the time when the message starts to be delivered. Therefore, when using the `response` method to calculate the latency, the latency of a QoS 0 message will always be equal to 0."
          }
        },
        "type": "object"
      },
      "gateway.anonymous_true": {
        "required": [
          "allow_anonymous"
        ],
        "properties": {
          "allow_anonymous": {
            "description": "Allow anonymous access to the JT/T 808 Gateway.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  true
                ]
              }
            ]
          },
          "registry": {
            "type": "string",
            "description": "The JT/T 808 device registry central URL."
          },
          "authentication": {
            "type": "string",
            "description": "The JT/T 808 device authentication central URL."
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_clients.message": {
        "properties": {
          "msgid": {
            "type": "string",
            "description": "Message ID."
          },
          "topic": {
            "type": "string",
            "description": "Message topic."
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "Message QoS.",
            "minimum": 0,
            "example": 0
          },
          "publish_at": {
            "type": "integer",
            "description": "Message publish time, a millisecond precision Unix epoch timestamp."
          },
          "from_clientid": {
            "type": "string",
            "description": "Message publisher's Client ID"
          },
          "from_username": {
            "type": "string",
            "description": "Message publisher's username."
          },
          "payload": {
            "type": "string"
          },
          "inserted_at": {
            "type": "string",
            "description": "A nanosecond precision Unix epoch timestamp at which a message was inserted to In-flight / Mqueue."
          }
        },
        "type": "object"
      },
      "limiter.limiter": {
        "properties": {},
        "type": "object"
      },
      "bridge_matrix.get_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Configuration Parameters Specific to the PostgreSQL Action",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "dashboard.https": {
        "required": [
          "ssl_options"
        ],
        "properties": {
          "bind": {
            "default": 0,
            "type": "string",
            "description": "Bind the listener to a specified address and port number, for example `127.0.0.1:18083`.<br/>If configured with just the port number (e.g. `18083`) it's equivalent to binding to all addresses `0.0.0.0`.<br/>The listener is disabled if `bind` is `0`.",
            "example": "0.0.0.0:18084"
          },
          "ssl_options": {
            "description": "SSL/TLS options for the dashboard listener.",
            "$ref": "#/components/schemas/dashboard.ssl_options"
          },
          "num_acceptors": {
            "default": 4,
            "type": "integer",
            "description": "Socket acceptor pool size for TCP protocols. Default is the number of schedulers online"
          },
          "max_connections": {
            "default": 512,
            "type": "integer",
            "description": "The maximum number of concurrent connections allowed by the listener."
          },
          "backlog": {
            "default": 1024,
            "type": "integer",
            "description": "Defines the maximum length that the queue of pending connections can grow to."
          },
          "send_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Send timeout for the socket.",
            "example": "12m"
          },
          "inet6": {
            "default": false,
            "type": "boolean",
            "description": "Enable IPv6 support, default is false, which means IPv4 only."
          },
          "ipv6_v6only": {
            "default": false,
            "type": "boolean",
            "description": "Disable IPv4-to-IPv6 mapping for the listener.<br/>The configuration is only valid when the inet6 is true."
          },
          "proxy_header": {
            "default": false,
            "type": "boolean",
            "description": "Enable support for `HAProxy` header. Be aware once enabled regular HTTP requests can't be handled anymore."
          }
        },
        "type": "object"
      },
      "pulsar.producer_pulsar_message": {
        "properties": {
          "key": {
            "default": "${.clientid}",
            "type": "string",
            "description": "Template to render Pulsar message key."
          },
          "value": {
            "default": "${.}",
            "type": "string",
            "description": "Template to render Pulsar message value."
          }
        },
        "type": "object"
      },
      "gateway.exproto_grpc_server": {
        "required": [
          "bind"
        ],
        "properties": {
          "bind": {
            "type": "string",
            "description": "Listening address and port for the gRPC server.",
            "example": "127.0.0.1:80"
          },
          "ssl_options": {
            "description": "SSL configuration for the gRPC server.",
            "$ref": "#/components/schemas/gateway.ssl_server_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.socket_opts": {
        "properties": {
          "sndbuf": {
            "default": "1MB",
            "type": "string",
            "description": "Fine tune the socket send buffer. The default value is tuned for high throughput.",
            "example": "32MB"
          },
          "recbuf": {
            "default": "1MB",
            "type": "string",
            "description": "Fine tune the socket receive buffer. The default value is tuned for high throughput.",
            "example": "32MB"
          },
          "nodelay": {
            "default": true,
            "type": "boolean",
            "description": "When set to 'true', TCP buffer is sent as soon as possible. Otherwise, the OS kernel may buffer small TCP packets for a while (40 ms by default)."
          },
          "tcp_keepalive": {
            "default": "none",
            "type": "string",
            "description": "Enable TCP keepalive.<br/>The value is three comma separated numbers in the format of 'Idle,Interval,Probes'<br/> - Idle: The number of seconds a connection needs to be idle before the server begins to send out keep-alive probes (Linux default 7200).<br/> - Interval: The number of seconds between TCP keep-alive probes (Linux default 75).<br/> - Probes: The maximum number of TCP keep-alive probes to send before giving up and killing the connection if no response is obtained from the other end (Linux default 9).<br/>For example \"240,30,5\" means: TCP keepalive probes are sent after the connection is idle for 240 seconds, and the probes are sent every 30 seconds until a response is received, if it misses 5 consecutive responses, the connection should be closed.<br/>Default: 'none'"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_consumer.source_parameters": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "The GCP PubSub topic to publish messages to."
          },
          "pull_max_messages": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of messages to retrieve from GCP PubSub in a single pull request. The actual number may be less than the specified value.",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "license_http_api.key_license": {
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "default": "default",
            "description": "This configuration parameter is designated for the license key and supports below input formats:<br/><br/>- Direct Key: Enter the secret key directly as a string value.<br/>- File Path: Specify the path to a file that contains the secret key. Ensure the path starts with <code>file://</code>.<br/>- \"default\": Use string value <code>\"default\"</code> to apply the default trial license.<br/><br/>Note: An invalid license key or an incorrect file path may prevent EMQX from starting successfully.<br/>If a file path is used, EMQX attempts to reload the license key from the file every 2 minutes.<br/>Any failure in reloading the license file will be recorded as an error level log message,<br/>and EMQX continues to apply the license loaded previously.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "default"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge_redis.post_single": {
        "required": [
          "command_template",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "command_template": {
            "type": "array",
            "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_single"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "Single mode. Must be set to 'single' when Redis server is running in single mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis database ID.",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "redis_single"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          }
        },
        "type": "object"
      },
      "audit.audit": {
        "properties": {
          "created_at": {
            "description": "The time when the log is created",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-microsecond",
                "example": 1640995200000000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000000Z"
              }
            ]
          },
          "node": {
            "type": "string",
            "description": "The node name to which the log is created"
          },
          "from": {
            "type": "string",
            "enum": [
              "dashboard",
              "rest_api",
              "cli",
              "erlang_console"
            ],
            "description": "The source type of the log"
          },
          "source": {
            "type": "string",
            "description": "The source of the log"
          },
          "source_ip": {
            "type": "string",
            "description": "The source ip of the log"
          },
          "operation_id": {
            "type": "string",
            "description": "The operation id of the log"
          },
          "operation_type": {
            "type": "string",
            "description": "The operation type of the log"
          },
          "operation_result": {
            "type": "string",
            "enum": [
              "success",
              "failure"
            ],
            "description": "The operation result of the log"
          },
          "http_status_code": {
            "type": "integer",
            "description": "The http status code of the log"
          },
          "http_method": {
            "type": "string",
            "enum": [
              "post",
              "put",
              "delete"
            ],
            "description": "The http method of the log"
          },
          "duration_ms": {
            "type": "integer",
            "description": "The duration of the log"
          },
          "args": {
            "type": "array",
            "description": "The args of the log",
            "items": {
              "type": "string"
            }
          },
          "failure": {
            "type": "array",
            "description": "The failure of the log",
            "items": {
              "type": "string"
            }
          },
          "http_request": {
            "description": "The http request of the log",
            "$ref": "#/components/schemas/audit.http_request"
          }
        },
        "type": "object"
      },
      "bridge_opents.put": {
        "required": [
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The URL of OpenTSDB endpoint."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "summary": {
            "default": true,
            "type": "boolean",
            "description": "Whether to return summary information."
          },
          "details": {
            "default": false,
            "type": "boolean",
            "description": "Whether to return detailed information."
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "kafka_consumer.get_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka_consumer"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "parameters": {
            "description": "Source configs.",
            "$ref": "#/components/schemas/kafka_consumer.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.source_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "datalayers"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_datalayers.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "trace.log_file_detail": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name",
            "example": "emqx@127.0.0.1"
          },
          "size": {
            "type": "integer",
            "description": "file size"
          },
          "mtime": {
            "type": "integer",
            "description": "The last time this file is modified."
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_check_authn_complete": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "client_check_authn_complete"
            ],
            "description": "Event Type"
          },
          "clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "reason_code": {
            "type": "string",
            "description": "The reason code"
          },
          "peername": {
            "type": "string",
            "description": "The IP Address and Port of the Peer Client"
          },
          "is_anonymous": {
            "type": "boolean",
            "description": "True if this user is anonymous."
          },
          "is_superuser": {
            "type": "boolean",
            "description": "True if this is a super user."
          }
        },
        "type": "object"
      },
      "action_azure_blob_storage.direct_parameters": {
        "required": [
          "blob",
          "container",
          "mode"
        ],
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "direct"
            ],
            "description": "Enables uploading of events to the Azure Blob Storage service as separate objects."
          },
          "container": {
            "type": "string",
            "description": "The name of the Azure Blob Storage container name."
          },
          "blob": {
            "type": "string",
            "description": "The name of the Azure Blob Storage blob name."
          },
          "content": {
            "default": "${.}",
            "type": "string",
            "description": "Content of the Azure Blob Storage blob being uploaded. Supports templates."
          }
        },
        "type": "object"
      },
      "authn.node_metrics": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name.",
            "example": "emqx@127.0.0.1"
          },
          "metrics": {
            "description": "The metrics of the resource.",
            "$ref": "#/components/schemas/authn.metrics"
          }
        },
        "type": "object"
      },
      "gateway.websocket": {
        "properties": {
          "path": {
            "default": "",
            "type": "string",
            "description": "WebSocket's MQTT protocol path. So the address of EMQX Broker's WebSocket is:<br/><code>ws://{ip}:{port}/mqtt</code>"
          },
          "piggyback": {
            "default": "single",
            "type": "string",
            "enum": [
              "single",
              "multiple"
            ],
            "description": "Whether a WebSocket message is allowed to contain multiple MQTT packets."
          },
          "compress": {
            "default": false,
            "type": "boolean",
            "description": "If <code>true</code>, compress WebSocket messages using <code>zlib</code>.<br/><br/>The configuration items under <code>deflate_opts</code> belong to the compression-related parameter configuration."
          },
          "idle_timeout": {
            "default": "7200s",
            "type": "string",
            "description": "The timeout for waiting for the WebSocket upgrade request. After the timeout, the connection will be closed.",
            "example": "12m"
          },
          "max_frame_size": {
            "default": "infinity",
            "description": "The maximum length of a single MQTT packet.",
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "fail_if_no_subprotocol": {
            "default": true,
            "type": "boolean",
            "description": "If <code>true</code>, the server will return an error when<br/> the client does not carry the <code>Sec-WebSocket-Protocol</code> field.<br/> <br/>Note: WeChat applet needs to disable this verification."
          },
          "supported_subprotocols": {
            "default": "",
            "type": "string",
            "description": "Comma-separated list of supported subprotocols.",
            "example": "item1,item2"
          },
          "check_origin_enable": {
            "default": false,
            "type": "boolean",
            "description": "If <code>true</code>, <code>origin</code> HTTP header will be<br/> validated against the list of allowed origins configured in <code>check_origins</code><br/> parameter."
          },
          "allow_origin_absence": {
            "default": true,
            "type": "boolean",
            "description": "If <code>false</code> and <code>check_origin_enable</code> is<br/> <code>true</code>, the server will reject requests that don't have <code>origin</code><br/> HTTP header."
          },
          "check_origins": {
            "default": "http://localhost:18083, http://127.0.0.1:18083",
            "type": "string",
            "description": "List of allowed origins.<br/>See <code>check_origin_enable</code>.",
            "example": "item1,item2"
          },
          "proxy_address_header": {
            "default": "x-forwarded-for",
            "type": "string",
            "description": "HTTP header used to pass information about the client IP address.<br/>Relevant when the EMQX cluster is deployed behind a load-balancer."
          },
          "proxy_port_header": {
            "default": "x-forwarded-port",
            "type": "string",
            "description": "HTTP header used to pass information about the client port. Relevant when the EMQX cluster is deployed behind a load-balancer."
          },
          "deflate_opts": {
            "$ref": "#/components/schemas/emqx.deflate_opts"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_consumer.get_connector": {
        "required": [
          "name",
          "service_account_json",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_consumer"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "JSON containing the GCP Service Account credentials to be used with PubSub.<br/>When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/gcp_pubsub_consumer.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_oracle.action_parameters": {
        "properties": {
          "sql": {
            "default": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
            "type": "string",
            "format": "sql",
            "description": "SQL Template. The template string can contain placeholders for message metadata and payload field. The placeholders are inserted without any checking and special formatting, so it is important to ensure that the inserted values are formatted and escaped correctly."
          }
        },
        "type": "object"
      },
      "emqx_authz_schema.node_resource_metrics": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name.",
            "example": "emqx@127.0.0.1"
          },
          "metrics": {
            "description": "The metrics of the resource.",
            "$ref": "#/components/schemas/emqx_authz_schema.resource_metrics"
          }
        },
        "type": "object"
      },
      "connector_mqtt.resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.put_connector": {
        "required": [
          "parameters"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "default": "127.0.0.1:8361",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The Datalayers default port 8361 is used if `[:Port]` is not specified."
          },
          "parameters": {
            "description": "Set of parameters specific for the given type of this Datalayers connector.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/connector_datalayers.datalayers_influxdb_v1_parameters"
              }
            ]
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_datalayers.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.action_parameters": {
        "required": [
          "write_syntax"
        ],
        "properties": {
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.<br/>See also [InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>Please note that a placeholder for an integer value must be annotated with a suffix `i`. For example `${payload.int_value}i`."
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "Datalayers time precision."
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_ds.sites_shard": {
        "properties": {
          "storage": {
            "type": "string",
            "description": "Durable storage ID",
            "example": "messages"
          },
          "id": {
            "type": "string",
            "description": "Shard ID",
            "example": "1"
          },
          "status": {
            "type": "string",
            "description": "Shard status",
            "example": "up"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_sources.request_sources_order": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "file",
              "built_in_database",
              "http",
              "redis",
              "mysql",
              "postgresql",
              "mongodb",
              "ldap"
            ],
            "description": "Authorization type",
            "example": "file"
          }
        },
        "type": "object"
      },
      "syskeeper.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "syskeeper_forwarder"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Action name."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Syskeeper action parameters",
            "$ref": "#/components/schemas/syskeeper.parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/syskeeper.creation_opts"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_data_backup.files_response": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/emqx_mgmt_api_data_backup.backup_file_info"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/public.meta"
          }
        },
        "type": "object"
      },
      "emqx.log_audit_handler": {
        "properties": {
          "path": {
            "default": "${EMQX_LOG_DIR}/audit.log",
            "type": "string",
            "description": "Name the audit log file."
          },
          "rotation_count": {
            "default": 10,
            "maximum": 128,
            "type": "integer",
            "description": "Maximum number of log files.",
            "minimum": 1
          },
          "rotation_size": {
            "default": "50MB",
            "description": "This parameter controls log file rotation. The value `infinity` means the log file will grow indefinitely, otherwise the log file will be rotated once it reaches `rotation_size` in bytes.",
            "oneOf": [
              {
                "type": "string",
                "example": "32MB"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "max_filter_size": {
            "default": 5000,
            "maximum": 30000,
            "type": "integer",
            "description": "Store the latest N log entries in a database for allow `/audit` HTTP API to filter and retrieval of log data.<br/>The interval for purging redundant log records is maintained within a range of 10~20 seconds.",
            "minimum": 10
          },
          "ignore_high_frequency_request": {
            "default": true,
            "type": "boolean",
            "description": "Ignore high frequency requests to avoid flooding the audit log,<br/>such as publish/subscribe kick out http api requests are ignored."
          },
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Enable this log handler."
          },
          "timestamp_format": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              "epoch",
              "rfc3339"
            ],
            "description": "Pick a timestamp format:<br/>- `auto`: automatically choose the best format based on log formatter. `epoch` for JSON and `rfc3339` for text.<br/>- `epoch`: Unix epoch time in microseconds.<br/>- `rfc3339`: RFC3339 format."
          },
          "time_offset": {
            "default": "system",
            "type": "string",
            "description": "The time offset to be used when formatting the timestamp.<br/>Can be one of:<br/>  - <code>system</code>: the time offset used by the local system<br/>  - <code>utc</code>: the UTC time offset<br/>  - <code>+-[hh]:[mm]</code>: user specified time offset, such as \"-02:00\" or \"+00:00\"<br/>Defaults to: <code>system</code>.<br/>This config has no effect for when formatter is <code>json</code> as the timestamp in JSON is milliseconds since epoch."
          },
          "payload_encode": {
            "default": "text",
            "type": "string",
            "enum": [
              "hex",
              "text",
              "hidden"
            ],
            "description": "Determine the format of the payload format in the trace file.<br/><br/>`text`: Text-based protocol or plain text protocol.<br/> It is recommended when payload is JSON encoded.<br/><br/>`hex`: Binary hexadecimal encode. It is recommended when payload is a custom binary protocol.<br/><br/>`hidden`: payload is obfuscated as `******`"
          }
        },
        "type": "object"
      },
      "message_transformation_http_api.get_metrics": {
        "properties": {
          "metrics": {
            "$ref": "#/components/schemas/message_transformation_http_api.metrics"
          },
          "node_metrics": {
            "$ref": "#/components/schemas/message_transformation_http_api.node_metrics"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_ds.db_site": {
        "properties": {
          "site": {
            "type": "string",
            "description": "Site ID",
            "example": "E9A185F9B43E1E14"
          },
          "status": {
            "type": "string",
            "enum": [
              "up",
              "joining"
            ],
            "description": "Status of the replica"
          }
        },
        "type": "object"
      },
      "confluent.put_connector": {
        "required": [
          "authentication",
          "bootstrap_hosts",
          "ssl"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Confluent Kafka <code>host[:port]</code> namespace endpoints to bootstrap the client.  Default port number is 9092."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Confluent Kafka broker and topic metadata. Setting too small value may add extra load on Confluent.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching metadata from Confluent.",
            "example": "32s"
          },
          "authentication": {
            "default": {},
            "description": "Authentication configs.",
            "$ref": "#/components/schemas/confluent.auth_username_password"
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "default": {
              "enable": true
            },
            "$ref": "#/components/schemas/confluent.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx.sysmon_os": {
        "properties": {
          "cpu_check_interval": {
            "default": "60s",
            "type": "string",
            "description": "The time interval for the periodic CPU check. Disabled on Windows platform.",
            "example": "12m"
          },
          "cpu_high_watermark": {
            "default": "80%",
            "type": "string",
            "description": "The threshold, as percentage of system CPU load,<br/> for how much system cpu can be used before the corresponding alarm is raised. Disabled on Windows platform",
            "example": "12%"
          },
          "cpu_low_watermark": {
            "default": "60%",
            "type": "string",
            "description": "The threshold, as percentage of system CPU load,<br/> for how much system cpu can be used before the corresponding alarm is cleared. Disabled on Windows platform",
            "example": "12%"
          },
          "mem_check_interval": {
            "default": "60s",
            "description": "The time interval for the periodic memory check. Disabled on Windows platform.",
            "oneOf": [
              {
                "type": "string",
                "example": "12m"
              },
              {
                "type": "string",
                "enum": [
                  "disabled"
                ]
              }
            ]
          },
          "sysmem_high_watermark": {
            "default": "70%",
            "type": "string",
            "description": "The threshold, as percentage of system memory,<br/> for how much system memory can be allocated before the corresponding alarm is raised. Disabled on Windows platform",
            "example": "12%"
          },
          "procmem_high_watermark": {
            "default": "5%",
            "type": "string",
            "description": "The threshold, as percentage of system memory,<br/> for how much system memory can be allocated by one Erlang process before<br/> the corresponding alarm is raised. Disabled on Windows platform.",
            "example": "12%"
          }
        },
        "type": "object"
      },
      "emqx_gcp_device_api.gcp_exported_device": {
        "required": [
          "blocked",
          "config",
          "deviceid"
        ],
        "properties": {
          "blocked": {
            "type": "boolean",
            "description": "Blocked",
            "example": false
          },
          "deviceid": {
            "type": "string",
            "description": "Device identifier",
            "example": "c2-ec-x509"
          },
          "registry": {
            "default": "",
            "type": "string",
            "description": "Device registry identifier",
            "example": "my-registry"
          },
          "project": {
            "default": "",
            "type": "string",
            "description": "Cloud project identifier",
            "example": "iot-export"
          },
          "location": {
            "default": "",
            "type": "string",
            "description": "Cloud region",
            "example": "europe-west1"
          },
          "keys": {
            "default": [],
            "type": "array",
            "description": "Public keys associated to GCP device",
            "items": {
              "$ref": "#/components/schemas/emqx_gcp_device_api.key"
            }
          },
          "config": {
            "type": "string",
            "description": "Configuration",
            "example": "bXktY29uZmln"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.dtls_listener": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Listener ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "dtls"
            ],
            "description": "Listener Type"
          },
          "name": {
            "type": "string",
            "description": "Listener Name"
          },
          "running": {
            "type": "boolean",
            "description": "Listener Running status"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "Size of the acceptor pool."
          },
          "health_check": {
            "description": "Some Cloud platform use a `request-reply` mechanism to check whether a UDP port is healthy, here can configure this pair.",
            "$ref": "#/components/schemas/gateway.udp_health_check"
          },
          "udp_options": {
            "$ref": "#/components/schemas/gateway.udp_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable the listener."
          },
          "bind": {
            "type": "string",
            "description": "The IP address and port that the listener will bind.",
            "example": "127.0.0.1:80"
          },
          "max_connections": {
            "default": 1024,
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "integer",
                "minimum": 1
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "type": "integer",
            "description": "Maximum connections per second."
          },
          "enable_authn": {
            "default": true,
            "type": "boolean",
            "description": "Set <code>true</code> (default) to enable client authentication on this listener.<br/>When set to <code>false</code> clients will be allowed to connect without authentication."
          },
          "mountpoint": {
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "access_rules": {
            "default": [],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses.<br/>The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "dtls_options": {
            "description": "DTLS socket options",
            "$ref": "#/components/schemas/gateway.dtls_opts"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_consumer.post_connector": {
        "required": [
          "name",
          "service_account_json",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_consumer"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "JSON containing the GCP Service Account credentials to be used with PubSub.<br/>When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/gcp_pubsub_consumer.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mysql.post": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mysql"
            ],
            "description": "The action type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier of the action."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this action"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to MySQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MySQL default port 3306 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "ldap.ssl": {
        "properties": {
          "cacertfile": {
            "type": "string",
            "description": "Trusted PEM format CA certificates bundle file.<br/><br/>The certificates in this file are used to verify the TLS peer's certificates.<br/>Append new certificates to the file if new CAs are to be trusted.<br/>There is no need to restart EMQX to have the updated file loaded, because<br/>the system regularly checks if file has been updated (and reload).<br/><br/>NOTE: invalidating (deleting) a certificate from the file will not affect<br/>already established connections."
          },
          "cacerts": {
            "default": false,
            "type": "boolean",
            "deprecated": true
          },
          "certfile": {
            "type": "string",
            "description": "PEM format certificates chain file.<br/><br/>The certificates in this file should be in reversed order of the certificate<br/>issue chain. That is, the host's certificate should be placed in the beginning<br/>of the file, followed by the immediate issuer certificate and so on.<br/>Although the root CA certificate is optional, it should be placed at the end of<br/>the file if it is to be added."
          },
          "keyfile": {
            "type": "string",
            "description": "PEM format private key file."
          },
          "verify": {
            "default": "verify_none",
            "type": "string",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "description": "Enable or disable peer verification."
          },
          "reuse_sessions": {
            "default": true,
            "type": "boolean",
            "description": "Enable TLS session reuse.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "depth": {
            "default": 10,
            "type": "integer",
            "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.<br/>So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
            "minimum": 0
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "String containing the user's password. Only used if the private key file is password-protected.",
            "example": ""
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "type": "array",
            "description": "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2', 'tlsv1.1']</code> here.",
            "items": {
              "type": "string"
            }
          },
          "ciphers": {
            "default": [],
            "type": "array",
            "description": "This config holds TLS cipher suite names separated by comma,<br/>or as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in which the<br/>client and server encrypts information over the network connection.<br/>Selecting a good cipher suite is critical for the<br/>application's data security, confidentiality and performance.<br/><br/>The names should be in OpenSSL string format (not RFC format).<br/>All default values and examples provided by EMQX config<br/>documentation are all in OpenSSL format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            }
          },
          "secure_renegotiate": {
            "default": true,
            "type": "boolean",
            "description": "Whether to reject TLS renegotiation attempts that are not compliant with [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt).<br/><br/>By default, `secure_renegotiate` is set to `true`, which forces secure renegotiation.<br/>If set to `false`, secure renegotiation will still be used, but will fall back to insecure renegotiation if the peer does not support [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt), which increases the risk of a MitM attack.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3."
          },
          "log_level": {
            "default": "notice",
            "type": "string",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "description": "The minimum level of logging allowed for SSL output.<br/><br/>The default is `notice`, set to a lower `debug` level for more detailed logging that can be used to investigate SSL handshake issues."
          },
          "hibernate_after": {
            "default": "5s",
            "type": "string",
            "description": "Specifies the amount of time that an SSL process will hibernate after being idle, thus reducing its memory footprint.<br/><br/>The hibernating process will be woken up when a new message arrives.<br/>Hibernating and waking up too often can cause CPU utilization to increase, as they both perform garbage collection on the process.",
            "example": "12m"
          },
          "partial_chain": {
            "type": "string",
            "enum": [
              true,
              false,
              "two_cacerts_from_cacertfile",
              "cacert_from_cacertfile"
            ],
            "description": "Enable or disable peer verification with partial_chain.<br/>When local verifies a peer certificate during the x509 path validation<br/>process, it constructs a certificate chain that starts with the peer<br/>certificate and ends with a trust anchor.<br/>By default, if it is set to `false`, the trust anchor is the<br/>Root CA, and the certificate chain must be complete.<br/>However, if the setting is set to `true` or `cacert_from_cacertfile`,<br/>the last certificate in `cacertfile` will be used as the trust anchor<br/>certificate (intermediate CA). This creates a partial chain<br/>in the path validation.<br/>Alternatively, if it is configured with `two_cacerts_from_cacertfile`,<br/>one of the last two certificates in `cacertfile` will be used as the<br/>trust anchor certificate, forming a partial chain. This option is<br/>particularly useful for intermediate CA certificate rotation.<br/>However, please note that it incurs some additional overhead, so it<br/>should only be used for certificate rotation purposes."
          },
          "verify_peer_ext_key_usage": {
            "type": "string",
            "description": "Verify extended key usage in peer's certificate<br/>For additional peer certificate validation, the value defined here must present in the<br/>'Extended Key Usage' of peer certificate defined in<br/>[rfc5280](https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.12).<br/><br/>Allowed values are<br/>- `clientAuth`<br/>- `serverAuth`<br/>- `codeSigning`<br/>- `emailProtection`<br/>- `timeStamping`<br/>- `ocspSigning`<br/>- raw OID, for example: \"OID:1.3.6.1.5.5.7.3.2\" means `id-pk 2` which is equivalent to `clientAuth`<br/><br/>Comma-separated string is also supported for validating more than one key usages.<br/><br/>For example, `\"serverAuth,OID:1.3.6.1.5.5.7.3.2\"`"
          },
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Enable TLS."
          },
          "server_name_indication": {
            "description": "Specify the host name to be used in TLS Server Name Indication extension.<br/><br/>For instance, when connecting to \"server.example.net\", the genuine server<br/>which accepts the connection and performs TLS handshake may differ from the<br/>host the TLS client initially connects to, e.g. when connecting to an IP address<br/>or when the host has multiple resolvable DNS records <br/><br/>If not specified, it will default to the host name string which is used<br/>to establish the connection, unless it is IP address used.<br/><br/>The host name is then also used in the host name verification of the peer<br/>certificate.<br/> The special value 'disable' prevents the Server Name<br/>Indication extension from being sent and disables the hostname<br/>verification check.",
            "example": "disable",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "disable"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "gcp_pubsub_producer.get_connector": {
        "required": [
          "name",
          "service_account_json",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_producer"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "JSON containing the GCP Service Account credentials to be used with PubSub.<br/>When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/gcp_pubsub_producer.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only."
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_kafka.auth_gssapi_kerberos": {
        "required": [
          "kerberos_keytab_file",
          "kerberos_principal"
        ],
        "properties": {
          "kerberos_principal": {
            "type": "string",
            "description": "SASL GSSAPI authentication Kerberos principal. For example <code>kafka/node1.example.com@EXAMPLE.COM</code>, NOTE: The realm in use has to be configured in /etc/krb5.conf in EMQX nodes."
          },
          "kerberos_keytab_file": {
            "type": "string",
            "description": "SASL GSSAPI authentication Kerberos keytab file path. NOTE: This file has to be placed in EMQX nodes, and the EMQX service runner user requires read permission."
          }
        },
        "type": "object"
      },
      "bridge_redis.put_single": {
        "required": [
          "command_template",
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Redis. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: If this action is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "command_template": {
            "type": "array",
            "description": "Redis command template used to export messages. Each list element stands for a command name or its argument.<br/>For example, to push payloads in a Redis list by key `msgs`, the elements should be the following:<br/>`rpush`, `msgs`, `${payload}`.",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_single"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "Single mode. Must be set to 'single' when Redis server is running in single mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis database ID.",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.get_connector": {
        "required": [
          "database",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mongodb"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the connector<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the connector passes the health probes.<br/><br/>- <code>disconnected</code>: when the connector can not pass health probes.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a connector is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "List of actions added to this connector.",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "parameters": {
            "description": "Set of parameters specific for the given type of this MongoDB connector, `mongo_type` can be one of `single` (Standalone), `sharded` (Sharded) or `rs` (Replica Set).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/mongo.connector_rs"
              },
              {
                "$ref": "#/components/schemas/mongo.connector_sharded"
              },
              {
                "$ref": "#/components/schemas/mongo.connector_single"
              }
            ]
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mongodb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.put_producer": {
        "required": [
          "bootstrap_hosts",
          "kafka"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Azure Event Hubs Kafka <code>host[:port]</code> namespace endpoints to bootstrap the client.  Default port number is 9093."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Azure Event Hubs Kafka broker and topic metadata. Setting too small value may add extra load on Azure Event Hubs.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching metadata from Azure Event Hubs.",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in Azure Event Hubs."
          },
          "kafka": {
            "description": "Azure Event Hubs producer configs.",
            "$ref": "#/components/schemas/bridge_kafka.v1_producer_kafka_opts"
          }
        },
        "type": "object"
      },
      "dashboard.user": {
        "properties": {
          "username": {
            "type": "string",
            "description": "Dashboard Username",
            "maxLength": 100,
            "example": "admin"
          },
          "role": {
            "default": "administrator",
            "type": "string",
            "description": "User role",
            "example": "administrator"
          },
          "description": {
            "type": "string",
            "description": "Dashboard User Description",
            "example": "administrator"
          },
          "backend": {
            "type": "string",
            "description": "User account source",
            "example": "local"
          }
        },
        "type": "object"
      },
      "emqx.deflate_opts": {
        "properties": {
          "level": {
            "type": "string",
            "enum": [
              "none",
              "default",
              "best_compression",
              "best_speed"
            ],
            "description": "Compression level."
          },
          "mem_level": {
            "default": 8,
            "maximum": 9,
            "type": "integer",
            "description": "Specifies the size of the compression state.<br/><br/>Lower values decrease memory usage per connection.",
            "minimum": 1
          },
          "strategy": {
            "default": "default",
            "type": "string",
            "enum": [
              "default",
              "filtered",
              "huffman_only",
              "rle"
            ],
            "description": "Specifies the compression strategy."
          },
          "server_context_takeover": {
            "default": "takeover",
            "type": "string",
            "enum": [
              "takeover",
              "no_takeover"
            ],
            "description": "Takeover means the compression state is retained between server messages."
          },
          "client_context_takeover": {
            "default": "takeover",
            "type": "string",
            "enum": [
              "takeover",
              "no_takeover"
            ],
            "description": "Takeover means the compression state is retained between client messages."
          },
          "server_max_window_bits": {
            "default": 15,
            "maximum": 15,
            "type": "integer",
            "description": "Specifies the size of the compression context for the server.",
            "minimum": 8
          },
          "client_max_window_bits": {
            "default": 15,
            "maximum": 15,
            "type": "integer",
            "description": "Specifies the size of the compression context for the client.",
            "minimum": 8
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_ds.site": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Name of the EMQX handling the site",
            "example": "'emqx@example.com'"
          },
          "up": {
            "type": "boolean",
            "description": "Site is up and running"
          },
          "shards": {
            "type": "array",
            "description": "Durable storages that have replicas at the site",
            "items": {
              "$ref": "#/components/schemas/emqx_mgmt_api_ds.sites_shard"
            }
          }
        },
        "type": "object"
      },
      "emqx.log_file_handler": {
        "properties": {
          "path": {
            "default": "${EMQX_LOG_DIR}/emqx.log",
            "type": "string",
            "description": "Name the log file."
          },
          "rotation_count": {
            "default": 10,
            "maximum": 128,
            "type": "integer",
            "description": "Maximum number of log files.",
            "minimum": 1
          },
          "rotation_size": {
            "default": "50MB",
            "description": "This parameter controls log file rotation. The value `infinity` means the log file will grow indefinitely, otherwise the log file will be rotated once it reaches `rotation_size` in bytes.",
            "oneOf": [
              {
                "type": "string",
                "example": "32MB"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "level": {
            "default": "warning",
            "type": "string",
            "enum": [
              "debug",
              "info",
              "notice",
              "warning",
              "error",
              "critical",
              "alert",
              "emergency",
              "all"
            ],
            "description": "The log level for the current log handler.<br/>Defaults to warning."
          },
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Enable this log handler."
          },
          "formatter": {
            "default": "text",
            "type": "string",
            "enum": [
              "text",
              "json"
            ],
            "description": "Choose log formatter. <code>text</code> for free text, and <code>json</code> for structured logging."
          },
          "timestamp_format": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              "epoch",
              "rfc3339"
            ],
            "description": "Pick a timestamp format:<br/>- `auto`: automatically choose the best format based on log formatter. `epoch` for JSON and `rfc3339` for text.<br/>- `epoch`: Unix epoch time in microseconds.<br/>- `rfc3339`: RFC3339 format."
          },
          "time_offset": {
            "default": "system",
            "type": "string",
            "description": "The time offset to be used when formatting the timestamp.<br/>Can be one of:<br/>  - <code>system</code>: the time offset used by the local system<br/>  - <code>utc</code>: the UTC time offset<br/>  - <code>+-[hh]:[mm]</code>: user specified time offset, such as \"-02:00\" or \"+00:00\"<br/>Defaults to: <code>system</code>.<br/>This config has no effect for when formatter is <code>json</code> as the timestamp in JSON is milliseconds since epoch."
          },
          "payload_encode": {
            "default": "text",
            "type": "string",
            "enum": [
              "hex",
              "text",
              "hidden"
            ],
            "description": "Determine the format of the payload format in the trace file.<br/><br/>`text`: Text-based protocol or plain text protocol.<br/> It is recommended when payload is JSON encoded.<br/><br/>`hex`: Binary hexadecimal encode. It is recommended when payload is a custom binary protocol.<br/><br/>`hidden`: payload is obfuscated as `******`"
          }
        },
        "type": "object"
      },
      "bridge_kafka.get_consumer": {
        "required": [
          "bootstrap_hosts",
          "name",
          "topic_mapping",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "kafka",
              "kafka_producer",
              "kafka_consumer"
            ],
            "description": "The Action Type"
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Kafka <code>host:port</code> endpoints to bootstrap the client."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching topic metadata.",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "kafka": {
            "description": "Kafka consumer configs.",
            "$ref": "#/components/schemas/bridge_kafka.consumer_kafka_opts"
          },
          "topic_mapping": {
            "type": "array",
            "description": "Defines the mapping between Kafka topics and MQTT topics. Must contain at least one item.",
            "items": {
              "$ref": "#/components/schemas/bridge_kafka.consumer_topic_mapping"
            }
          },
          "key_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "Defines how the key from the Kafka message is encoded before being forwarded via MQTT.<br/><code>none</code> Uses the key from the Kafka message unchanged.  Note: in this case, the key must be a valid UTF-8 string.<br/><code>base64</code> Uses base-64 encoding on the received key."
          },
          "value_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "Defines how the value from the Kafka message is encoded before being forwarded via MQTT.<br/><code>none</code> Uses the value from the Kafka message unchanged.  Note: in this case, the value must be a valid UTF-8 string.<br/><code>base64</code> Uses base-64 encoding on the received value."
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_clients.lwm2m_client": {
        "properties": {
          "endpoint_name": {
            "type": "string",
            "description": "The LwM2M client endpoint name"
          },
          "lifetime": {
            "type": "integer",
            "description": "LwM2M Life time"
          },
          "node": {
            "type": "string",
            "description": "Name of the node to which the client is connected"
          },
          "clientid": {
            "type": "string",
            "description": "Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username of client when connecting"
          },
          "mountpoint": {
            "type": "string",
            "description": "Topic mountpoint"
          },
          "proto_name": {
            "type": "string",
            "description": "Client protocol name"
          },
          "proto_ver": {
            "type": "string",
            "description": "Protocol version used by the client"
          },
          "ip_address": {
            "type": "string",
            "description": "Client's IP address"
          },
          "port": {
            "type": "integer",
            "description": "Client's port"
          },
          "is_bridge": {
            "type": "boolean",
            "description": "Indicates whether the client is connected via bridge"
          },
          "connected_at": {
            "description": "Client connection time",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "disconnected_at": {
            "description": "Client offline time, This field is only valid and returned when connected is false",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "connected": {
            "type": "boolean",
            "description": "Whether the client is connected"
          },
          "keepalive": {
            "type": "integer",
            "description": "Keepalive time, with the unit of second"
          },
          "clean_start": {
            "type": "boolean",
            "description": "Indicate whether the client is using a brand new session"
          },
          "expiry_interval": {
            "type": "integer",
            "description": "Session expiration interval, with the unit of second"
          },
          "created_at": {
            "description": "Session creation time",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-millisecond",
                "example": 1640995200000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000Z"
              }
            ]
          },
          "subscriptions_cnt": {
            "type": "integer",
            "description": "Number of subscriptions established by this client"
          },
          "subscriptions_max": {
            "type": "integer",
            "description": "Maximum number of subscriptions allowed by this client"
          },
          "inflight_cnt": {
            "type": "integer",
            "description": "Current length of inflight"
          },
          "inflight_max": {
            "type": "integer",
            "description": "Maximum length of inflight"
          },
          "mqueue_len": {
            "type": "integer",
            "description": "Current length of message queue"
          },
          "mqueue_max": {
            "type": "integer",
            "description": "Maximum length of message queue"
          },
          "mqueue_dropped": {
            "type": "integer",
            "description": "Number of messages dropped by the message queue due to exceeding the length"
          },
          "awaiting_rel_cnt": {
            "type": "integer",
            "description": "Number of awaiting acknowledge packet"
          },
          "awaiting_rel_max": {
            "type": "integer",
            "description": "Maximum allowed number of awaiting PUBREC packet"
          },
          "recv_oct": {
            "type": "integer",
            "description": "Number of bytes received"
          },
          "recv_cnt": {
            "type": "integer",
            "description": "Number of socket packets received"
          },
          "recv_pkt": {
            "type": "integer",
            "description": "Number of protocol packets received"
          },
          "recv_msg": {
            "type": "integer",
            "description": "Number of message packets received"
          },
          "send_oct": {
            "type": "integer",
            "description": "Number of bytes sent"
          },
          "send_cnt": {
            "type": "integer",
            "description": "Number of socket packets sent"
          },
          "send_pkt": {
            "type": "integer",
            "description": "Number of protocol packets sent"
          },
          "send_msg": {
            "type": "integer",
            "description": "Number of message packets sent"
          },
          "mailbox_len": {
            "type": "integer",
            "description": "Process mailbox size"
          },
          "heap_size": {
            "type": "integer",
            "description": "Process heap size with the unit of byte"
          },
          "reductions": {
            "type": "integer",
            "description": "Erlang reduction"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mqtt"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configs.",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.action_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.wss_listener": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Listener ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "wss"
            ],
            "description": "Listener Type"
          },
          "name": {
            "type": "string",
            "description": "Listener Name"
          },
          "running": {
            "type": "boolean",
            "description": "Listener Running status"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "Size of the acceptor pool."
          },
          "tcp_options": {
            "description": "Setting the TCP socket options.",
            "$ref": "#/components/schemas/emqx.tcp_opts"
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP,<br/>this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "Timeout for proxy protocol.<br/>EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
            "example": "12m"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable the listener."
          },
          "bind": {
            "type": "string",
            "description": "The IP address and port that the listener will bind.",
            "example": "127.0.0.1:80"
          },
          "max_connections": {
            "default": 1024,
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "integer",
                "minimum": 1
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "type": "integer",
            "description": "Maximum connections per second."
          },
          "enable_authn": {
            "default": true,
            "type": "boolean",
            "description": "Set <code>true</code> (default) to enable client authentication on this listener.<br/>When set to <code>false</code> clients will be allowed to connect without authentication."
          },
          "mountpoint": {
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "access_rules": {
            "default": [],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses.<br/>The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "ssl_options": {
            "description": "SSL Socket options.",
            "$ref": "#/components/schemas/emqx.listener_wss_opts"
          },
          "websocket": {
            "$ref": "#/components/schemas/gateway.websocket"
          }
        },
        "type": "object"
      },
      "emqx.durable_sessions": {
        "properties": {
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "Use durable storage for client sessions persistence.<br/>If enabled, sessions configured to outlive client connections, along with their corresponding messages, will be durably stored and survive broker downtime.<br/><br/>:::warning<br/>This feature is currently experimental. Please don't enable it in the production environments that contain valuable data.<br/>:::"
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "This value affects the flow control for the persistent sessions.<br/>Persistent session queries the durable message storage in batches.<br/>This value specifies size of the batch.<br/><br/>Note: larger batches generally improve the throughput and overall performance of the system, but increase RAM usage per client.",
            "minimum": 1
          },
          "idle_poll_interval": {
            "default": "10s",
            "type": "string",
            "example": "12m"
          },
          "heartbeat_interval": {
            "default": "5000ms",
            "type": "string",
            "example": "12m"
          },
          "session_gc_interval": {
            "default": "10m",
            "type": "string",
            "description": "The interval at which session garbage collection is executed for persistent sessions.",
            "example": "12m"
          },
          "session_gc_batch_size": {
            "default": 100,
            "type": "integer",
            "description": "The size of each batch of expired persistent sessions to be garbage collected per iteration.",
            "minimum": 1
          },
          "message_retention_period": {
            "default": "1d",
            "type": "string",
            "example": "12m"
          }
        },
        "type": "object"
      },
      "load_rebalance.local_status_disabled": {
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "disabled"
            ],
            "description": "Whether the node is being evacuated"
          }
        },
        "type": "object"
      },
      "emqx_authz_schema.metrics_status_fields": {
        "properties": {
          "resource_metrics": {
            "description": "The metrics of the resource.",
            "$ref": "#/components/schemas/emqx_authz_schema.resource_metrics"
          },
          "node_resource_metrics": {
            "type": "array",
            "description": "The metrics of the resource for each node.",
            "items": {
              "$ref": "#/components/schemas/emqx_authz_schema.node_resource_metrics"
            }
          },
          "metrics": {
            "description": "The metrics of the resource.",
            "$ref": "#/components/schemas/emqx_authz_schema.metrics"
          },
          "node_metrics": {
            "type": "array",
            "description": "The metrics of the resource for each node.",
            "items": {
              "$ref": "#/components/schemas/emqx_authz_schema.node_metrics"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the resource."
          },
          "node_status": {
            "type": "array",
            "description": "The status of the resource for each node.",
            "items": {
              "$ref": "#/components/schemas/emqx_authz_schema.node_status"
            }
          },
          "node_error": {
            "type": "array",
            "description": "The error of node.",
            "items": {
              "$ref": "#/components/schemas/emqx_authz_schema.node_error"
            }
          }
        },
        "type": "object"
      },
      "node_eviction.status_enabled": {
        "properties": {
          "status": {
            "default": "enabled",
            "type": "string",
            "enum": [
              "enabled"
            ]
          },
          "stats": {
            "$ref": "#/components/schemas/node_eviction.stats"
          }
        },
        "type": "object"
      },
      "auto_subscribe.topic": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Topic name, placeholders are supported. For example: client/${clientid}/username/${username}/host/${host}/port/${port}<br/>Required field, and cannot be empty string",
            "example": "/clientid/${clientid}/username/${username}/host/${host}/port/${port}"
          },
          "qos": {
            "default": 0,
            "maximum": 2,
            "type": "integer",
            "description": "Default value 0. Quality of service.<br/>At most once (0)<br/>At least once (1)<br/>Exactly once (2)",
            "minimum": 0,
            "example": 0
          },
          "rh": {
            "default": 0,
            "maximum": 2,
            "type": "integer",
            "description": "Default value 0. This option is used to specify whether the server forwards the retained message to the client when establishing a subscription.<br/>Retain Handling is equal to 0, as long as the client successfully subscribes, the server will send the retained message.<br/>Retain Handling is equal to 1, if the client successfully subscribes and this subscription does not exist previously, the server sends the retained message. After all, sometimes the client re-initiate the subscription just to change the QoS, but it does not mean that it wants to receive the reserved messages again.<br/>Retain Handling is equal to 2, even if the client successfully subscribes, the server does not send the retained message.",
            "minimum": 0
          },
          "rap": {
            "default": 0,
            "maximum": 1,
            "type": "integer",
            "description": "Default value 0. This option is used to specify whether the server retains the RETAIN mark when forwarding messages to the client, and this option does not affect the RETAIN mark in the retained message. Therefore, when the option Retain As Publish is set to 0, the client will directly distinguish whether this is a normal forwarded message or a retained message according to the RETAIN mark in the message, instead of judging whether this message is the first received after subscribing(the forwarded message may be sent before the retained message, which depends on the specific implementation of different brokers).",
            "minimum": 0
          },
          "nl": {
            "default": 0,
            "maximum": 1,
            "type": "integer",
            "description": "Default value 0.<br/>MQTT v3.1.1: if you subscribe to the topic published by yourself, you will receive all messages that you published.<br/>MQTT v5: if you set this option as 1 when subscribing, the server will not forward the message you published to you.",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_schema_validation_failed": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "schema_validation_failed"
            ],
            "description": "Event Type"
          },
          "validation": {
            "type": "string",
            "description": "Validation"
          },
          "clientid": {
            "type": "string",
            "description": "The Client ID"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "payload": {
            "type": "string",
            "description": "The Message Payload"
          },
          "peerhost": {
            "type": "string",
            "description": "The IP Address of the Peer Client"
          },
          "topic": {
            "type": "string",
            "description": "Message Topic"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "The Time that this Message is Received"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "The Message QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "authn.redis_cluster": {
        "required": [
          "backend",
          "cmd",
          "mechanism",
          "servers"
        ],
        "properties": {
          "mechanism": {
            "type": "string",
            "enum": [
              "password_based"
            ],
            "description": "Authentication mechanism."
          },
          "backend": {
            "type": "string",
            "enum": [
              "redis"
            ],
            "description": "Backend type."
          },
          "cmd": {
            "type": "string",
            "description": "The Redis Command used to query data for authentication such as password hash, currently only supports <code>HGET</code> and <code>HMGET</code>."
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn_hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn_hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn_hash.bcrypt"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this auth provider."
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "cluster",
            "type": "string",
            "enum": [
              "cluster"
            ],
            "description": "Cluster mode. Must be set to 'cluster' when Redis server is running in clustered mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.consumer_kafka_opts": {
        "properties": {
          "max_batch_bytes": {
            "default": "896KB",
            "type": "string",
            "description": "Set how many bytes to pull from Kafka in each fetch request. Please note that if the configured value is smaller than the message size in Kafka, it may negatively impact the fetch performance.",
            "example": "32MB"
          },
          "offset_reset_policy": {
            "default": "latest",
            "type": "string",
            "enum": [
              "latest",
              "earliest"
            ],
            "description": "Defines from which offset a consumer should start fetching when there is no commit history or when the commit history becomes invalid."
          },
          "offset_commit_interval_seconds": {
            "default": "5s",
            "type": "string",
            "description": "Defines the time interval between two offset commit requests sent for each consumer group.",
            "example": "1h"
          }
        },
        "type": "object"
      },
      "bridge_pgsql.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Configuration Parameters Specific to the PostgreSQL Action",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_consumer.post_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_consumer"
            ]
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "description": "Source configs.",
            "$ref": "#/components/schemas/gcp_pubsub_consumer.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/gcp_pubsub_consumer.source_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.put": {
        "required": [
          "base_url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "authentication": {
            "default": "auth_basic",
            "description": "Authentication configuration",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_iotdb.auth_basic"
              }
            ]
          },
          "is_aligned": {
            "default": false,
            "type": "boolean",
            "description": "Whether to align the timeseries"
          },
          "device_id": {
            "type": "string",
            "description": "The IoTDB device ID this data should be inserted for.<br/>If left empty, the MQTT message payload must contain a `device_id` field,<br/>or EMQX's rule-engine SQL must produce a `device_id` field."
          },
          "iotdb_version": {
            "default": "v1.3.x",
            "type": "string",
            "enum": [
              "v1.3.x",
              "v1.1.x",
              "v1.0.x",
              "v0.13.x"
            ],
            "description": "The version of the IoTDB system to connect to."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_iotdb.creation_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "base_url": {
            "type": "string",
            "description": "The base URL of the external IoTDB service's REST interface.",
            "example": "http://127.0.0.1"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "HTTP request max retry times if failed.",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "syskeeper.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "infinity",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only."
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "schema_registry.confluent_schema_registry_auth_basic": {
        "required": [
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Username for basic authentication method."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Password for basic authentication method.",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "authz.mongo_rs": {
        "required": [
          "collection",
          "database",
          "mongo_type",
          "replica_set_name",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mongodb"
            ],
            "description": "Backend type."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this ACL provider"
          },
          "collection": {
            "type": "string",
            "description": "`MongoDB` collection containing the authorization data."
          },
          "filter": {
            "default": {},
            "type": "object",
            "description": "Conditional expression that defines the filter condition in the query.<br/>Filter supports the following placeholders<br/><br/> - <code>${username}</code>: Will be replaced at runtime with <code>Username</code> used by the client when connecting<br/><br/> - <code>${clientid}</code>: Will be replaced at runtime with <code>Client ID</code> used by the client when connecting",
            "example": {}
          },
          "mongo_type": {
            "default": "rs",
            "type": "string",
            "enum": [
              "rs"
            ],
            "description": "Replica set. Must be set to 'rs' when MongoDB server is running in 'replica set' mode."
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "r_mode": {
            "default": "master",
            "type": "string",
            "enum": [
              "master",
              "slave_ok"
            ],
            "description": "Read mode."
          },
          "replica_set_name": {
            "type": "string",
            "description": "Name of the replica set."
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "confluent.ssl_client_opts": {
        "properties": {
          "cacertfile": {
            "type": "string",
            "description": "Trusted PEM format CA certificates bundle file.<br/><br/>The certificates in this file are used to verify the TLS peer's certificates.<br/>Append new certificates to the file if new CAs are to be trusted.<br/>There is no need to restart EMQX to have the updated file loaded, because<br/>the system regularly checks if file has been updated (and reload).<br/><br/>NOTE: invalidating (deleting) a certificate from the file will not affect<br/>already established connections."
          },
          "cacerts": {
            "default": false,
            "type": "boolean",
            "deprecated": true
          },
          "certfile": {
            "type": "string",
            "description": "PEM format certificates chain file.<br/><br/>The certificates in this file should be in reversed order of the certificate<br/>issue chain. That is, the host's certificate should be placed in the beginning<br/>of the file, followed by the immediate issuer certificate and so on.<br/>Although the root CA certificate is optional, it should be placed at the end of<br/>the file if it is to be added."
          },
          "keyfile": {
            "type": "string",
            "description": "PEM format private key file."
          },
          "reuse_sessions": {
            "default": true,
            "type": "boolean",
            "description": "Enable TLS session reuse.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3"
          },
          "depth": {
            "default": 10,
            "type": "integer",
            "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.<br/>So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/><br/>if 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/><br/>if 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.",
            "minimum": 0
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "String containing the user's password. Only used if the private key file is password-protected.",
            "example": ""
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "type": "array",
            "description": "All TLS/DTLS versions to be supported.<br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/><br/>In case PSK cipher suites are intended, make sure to configure<br/><code>['tlsv1.2', 'tlsv1.1']</code> here.",
            "items": {
              "type": "string"
            }
          },
          "ciphers": {
            "default": [],
            "type": "array",
            "description": "This config holds TLS cipher suite names separated by comma,<br/>or as an array of strings. e.g.<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.<br/><br/><br/>Ciphers (and their ordering) define the way in which the<br/>client and server encrypts information over the network connection.<br/>Selecting a good cipher suite is critical for the<br/>application's data security, confidentiality and performance.<br/><br/>The names should be in OpenSSL string format (not RFC format).<br/>All default values and examples provided by EMQX config<br/>documentation are all in OpenSSL format.<br/><br/><br/>NOTE: Certain cipher suites are only compatible with<br/>specific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')<br/>incompatible cipher suites will be silently dropped.<br/>For instance, if only 'tlsv1.3' is given in the <code>versions</code>,<br/>configuring cipher suites for other versions will have no effect.<br/><br/><br/><br/>NOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/><br/>If PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/><br/>PSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            }
          },
          "secure_renegotiate": {
            "default": true,
            "type": "boolean",
            "description": "Whether to reject TLS renegotiation attempts that are not compliant with [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt).<br/><br/>By default, `secure_renegotiate` is set to `true`, which forces secure renegotiation.<br/>If set to `false`, secure renegotiation will still be used, but will fall back to insecure renegotiation if the peer does not support [RFC 5746](http://www.ietf.org/rfc/rfc5746.txt), which increases the risk of a MitM attack.<br/><br/>Has no effect when TLS version is configured (or negotiated) to 1.3."
          },
          "log_level": {
            "default": "notice",
            "type": "string",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "description": "The minimum level of logging allowed for SSL output.<br/><br/>The default is `notice`, set to a lower `debug` level for more detailed logging that can be used to investigate SSL handshake issues."
          },
          "hibernate_after": {
            "default": "5s",
            "type": "string",
            "description": "Specifies the amount of time that an SSL process will hibernate after being idle, thus reducing its memory footprint.<br/><br/>The hibernating process will be woken up when a new message arrives.<br/>Hibernating and waking up too often can cause CPU utilization to increase, as they both perform garbage collection on the process.",
            "example": "12m"
          },
          "partial_chain": {
            "type": "string",
            "enum": [
              true,
              false,
              "two_cacerts_from_cacertfile",
              "cacert_from_cacertfile"
            ],
            "description": "Enable or disable peer verification with partial_chain.<br/>When local verifies a peer certificate during the x509 path validation<br/>process, it constructs a certificate chain that starts with the peer<br/>certificate and ends with a trust anchor.<br/>By default, if it is set to `false`, the trust anchor is the<br/>Root CA, and the certificate chain must be complete.<br/>However, if the setting is set to `true` or `cacert_from_cacertfile`,<br/>the last certificate in `cacertfile` will be used as the trust anchor<br/>certificate (intermediate CA). This creates a partial chain<br/>in the path validation.<br/>Alternatively, if it is configured with `two_cacerts_from_cacertfile`,<br/>one of the last two certificates in `cacertfile` will be used as the<br/>trust anchor certificate, forming a partial chain. This option is<br/>particularly useful for intermediate CA certificate rotation.<br/>However, please note that it incurs some additional overhead, so it<br/>should only be used for certificate rotation purposes."
          },
          "verify_peer_ext_key_usage": {
            "type": "string",
            "description": "Verify extended key usage in peer's certificate<br/>For additional peer certificate validation, the value defined here must present in the<br/>'Extended Key Usage' of peer certificate defined in<br/>[rfc5280](https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.12).<br/><br/>Allowed values are<br/>- `clientAuth`<br/>- `serverAuth`<br/>- `codeSigning`<br/>- `emailProtection`<br/>- `timeStamping`<br/>- `ocspSigning`<br/>- raw OID, for example: \"OID:1.3.6.1.5.5.7.3.2\" means `id-pk 2` which is equivalent to `clientAuth`<br/><br/>Comma-separated string is also supported for validating more than one key usages.<br/><br/>For example, `\"serverAuth,OID:1.3.6.1.5.5.7.3.2\"`"
          },
          "server_name_indication": {
            "default": "auto",
            "description": "Server Name Indication (SNI) setting for TLS handshake.<br/><br/>- <code>auto</code>: The client will use <code>\"servicebus.windows.net\"</code> as SNI.<br/><br/>- <code>disable</code>: If you wish to prevent the client from sending the SNI.<br/><br/>- Other string values it will be sent as-is.",
            "example": "auto",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "disable"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "rocketmq.put": {
        "required": [
          "servers"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "template": {
            "default": "",
            "type": "string",
            "description": "Template, the default value is empty. When this value is empty the whole message will be stored in the RocketMQ.<br><br/>            The template can be any valid string with placeholders, example:<br><br/>            - ${id}, ${username}, ${clientid}, ${timestamp}<br><br/>            - {\"id\" : ${id}, \"username\" : ${username}}"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to RocketMQ. All MQTT `PUBLISH` messages with the topic<br/>matching the `local_topic` will be forwarded.<br/><br/>NOTE: if the bridge is used as a rule action, `local_topic` should be left empty otherwise the messages will be duplicated."
          },
          "strategy": {
            "default": "roundrobin",
            "description": "Producer key dispatch strategy, the default is `roundrobin`, also supports placeholders, such as: `clientid`, `messageid`, `username`.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "roundrobin"
                ]
              }
            ]
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "servers": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The RocketMQ default port 9876 is used if `[:Port]` is not specified."
          },
          "namespace": {
            "type": "string",
            "description": "The namespace field MUST be set if you are using the RocketMQ service in<br/>aliyun cloud and also the namespace is enabled,<br/>or if you have configured a namespace in your RocketMQ server.<br/>For RocketMQ in aliyun cloud, the namespace is the instance ID."
          },
          "topic": {
            "default": "TopicTest",
            "type": "string",
            "description": "RocketMQ Topic"
          },
          "access_key": {
            "default": "",
            "type": "string",
            "description": "RocketMQ server `accessKey`."
          },
          "secret_key": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ server `secretKey`.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "security_token": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ Server Security Token",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "Timeout of RocketMQ driver synchronous call.",
            "example": "12m"
          },
          "refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "RocketMQ Topic Route Refresh Interval.",
            "example": "12m"
          },
          "send_buffer": {
            "default": "1024KB",
            "type": "string",
            "description": "The socket send buffer size of the RocketMQ driver client.",
            "example": "32MB"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "authn.node_error": {
        "properties": {
          "node": {
            "type": "string",
            "description": "Node name.",
            "example": "emqx@127.0.0.1"
          },
          "error": {
            "type": "string",
            "description": "The error of node."
          }
        },
        "type": "object"
      },
      "opentelemetry.opentelemetry": {
        "properties": {
          "metrics": {
            "description": "Open Telemetry Metrics configuration.",
            "$ref": "#/components/schemas/opentelemetry.otel_metrics"
          },
          "logs": {
            "description": "Open Telemetry Logs configuration. If enabled, EMQX installs a log handler that formats events according to Open Telemetry log data model and<br/>exports them to the configured Open Telemetry collector or backend.",
            "$ref": "#/components/schemas/opentelemetry.otel_logs"
          },
          "traces": {
            "description": "Open Telemetry Traces configuration.",
            "$ref": "#/components/schemas/opentelemetry.otel_traces"
          },
          "exporter": {
            "description": "Open Telemetry Exporter",
            "$ref": "#/components/schemas/opentelemetry.otel_exporter"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.action_parameters_data": {
        "required": [
          "data_type",
          "measurement",
          "value"
        ],
        "properties": {
          "timestamp": {
            "default": "now",
            "description": "Timestamp. Placeholders in format of ${var} is supported, the final value can be:<br/><br/>- now: use the `now_ms` which is contained in the payload as timestamp<br/>- now_ms: same as above<br/>- now_us: use the `now_us` which is contained in the payload as timestamp<br/>- now_ns: use the `now_ns` which is contained in the payload as timestamp<br/>- any other: use the value directly as the timestamp",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "now",
                  "now_ms",
                  "now_ns",
                  "now_us"
                ]
              }
            ]
          },
          "measurement": {
            "type": "string",
            "description": "Measurement. Placeholders in format of ${var} is supported"
          },
          "data_type": {
            "description": "Data Type, an enumerated or a string.<br/>For string placeholders in format of ${var} is supported, the final value can be:<br/><br/>- TEXT<br/>- BOOLEAN<br/>- INT32<br/>- INT64<br/>- FLOAT<br/>- DOUBLE",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "text",
                  "boolean",
                  "int32",
                  "int64",
                  "float",
                  "double"
                ]
              }
            ]
          },
          "value": {
            "type": "string",
            "description": "Value. Placeholders in format of ${var} is supported"
          }
        },
        "type": "object"
      },
      "iotdb.put_thrift": {
        "required": [
          "password",
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "driver": {
            "default": "restapi",
            "type": "string",
            "enum": [
              "thrift"
            ],
            "description": "The drivers for IoTDB connector, can be:<br/>- rest<br/>- thrift"
          },
          "server": {
            "type": "string",
            "description": "The address of the IoTDB Thrift server (host:port)"
          },
          "protocol_version": {
            "default": "protocol_v3",
            "type": "string",
            "enum": [
              "protocol_v1",
              "protocol_v2",
              "protocol_v3"
            ],
            "description": "The version of IoTDB Thrift protocol"
          },
          "zoneId": {
            "default": "Asia/Shanghai",
            "type": "string",
            "description": "Timezone for IoTDB Thrift session"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size for the IoTDB Thrift connection pool",
            "minimum": 1
          },
          "connect_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Timeout for connecting to the IoTDB Thrift server",
            "example": "32s"
          },
          "recv_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Timeout for IoTDB Thrift server response",
            "example": "32s"
          },
          "username": {
            "type": "string",
            "description": "The username as configured at the IoTDB REST/Thrift interface"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password as configured at the IoTDB/Thrift REST interface",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/iotdb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "gateway.mqttsn_predefined": {
        "required": [
          "id",
          "topic"
        ],
        "properties": {
          "id": {
            "maximum": 1024,
            "type": "integer",
            "description": "Topic ID. Range: 1-65535",
            "minimum": 1
          },
          "topic": {
            "type": "string",
            "description": "Topic Name"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.exproto": {
        "required": [
          "handler",
          "server"
        ],
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "exproto"
            ],
            "description": "Gateway Name"
          },
          "server": {
            "description": "Configurations for starting the <code>ConnectionAdapter</code> service",
            "$ref": "#/components/schemas/gateway.exproto_grpc_server"
          },
          "handler": {
            "description": "Configurations for request to <code>ConnectionHandler</code> service",
            "$ref": "#/components/schemas/gateway.exproto_grpc_handler"
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          },
          "listeners": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                }
              ]
            }
          }
        },
        "type": "object"
      },
      "bridge_mongodb.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_cassa.post": {
        "required": [
          "keyspace",
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cassandra"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "cql": {
            "default": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "CQL Template"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Cassandra. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "servers": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port][,Host2:Port]`.<br/><br/>The Cassandra default port 9042 is used if `[:Port]` is not specified."
          },
          "keyspace": {
            "type": "string",
            "description": "Keyspace name to connect to."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.user_provided_function": {
        "required": [
          "function"
        ],
        "properties": {
          "function": {
            "type": "string",
            "description": "The user provided function. Should be in the format: '{module}:{function}'.<br/>Where {module} is the Erlang callback module and {function} is the Erlang function.<br/><br/>To write your own function, checkout the function <code>console</code> and<br/><code>republish</code> in the source file:<br/><code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code> as an example.",
            "example": "module:function"
          },
          "args": {
            "default": {},
            "type": "object",
            "description": "The args will be passed as the 3rd argument to module:function/3,<br/>checkout the function <code>console</code> and <code>republish</code> in the source file:<br/><code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code> as an example.",
            "example": {}
          }
        },
        "type": "object"
      },
      "bridge_tdengine.get": {
        "required": [
          "database",
          "name",
          "password",
          "server",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "tdengine"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to TDengine. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The TDengine default port 6041 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.udp_listener": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Listener ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "udp"
            ],
            "description": "Listener Type"
          },
          "name": {
            "type": "string",
            "description": "Listener Name"
          },
          "running": {
            "type": "boolean",
            "description": "Listener Running status"
          },
          "health_check": {
            "description": "Some Cloud platform use a `request-reply` mechanism to check whether a UDP port is healthy, here can configure this pair.",
            "$ref": "#/components/schemas/gateway.udp_health_check"
          },
          "udp_options": {
            "$ref": "#/components/schemas/gateway.udp_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable the listener."
          },
          "bind": {
            "type": "string",
            "description": "The IP address and port that the listener will bind.",
            "example": "127.0.0.1:80"
          },
          "max_connections": {
            "default": 1024,
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "integer",
                "minimum": 1
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "type": "integer",
            "description": "Maximum connections per second."
          },
          "enable_authn": {
            "default": true,
            "type": "boolean",
            "description": "Set <code>true</code> (default) to enable client authentication on this listener.<br/>When set to <code>false</code> clients will be allowed to connect without authentication."
          },
          "mountpoint": {
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "access_rules": {
            "default": [],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses.<br/>The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "iotdb.put_restapi": {
        "required": [
          "base_url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_http.connector_resource_opts"
          },
          "driver": {
            "default": "restapi",
            "type": "string",
            "enum": [
              "restapi"
            ],
            "description": "The drivers for IoTDB connector, can be:<br/>- rest<br/>- thrift"
          },
          "base_url": {
            "type": "string",
            "description": "The base URL of the external IoTDB service's REST interface.",
            "example": "http://127.0.0.1"
          },
          "iotdb_version": {
            "default": "v1.3.x",
            "type": "string",
            "enum": [
              "v1.3.x",
              "v1.1.x",
              "v1.0.x",
              "v0.13.x"
            ],
            "description": "The version of the IoTDB system to connect to."
          },
          "authentication": {
            "default": "auth_basic",
            "description": "Authentication configuration",
            "oneOf": [
              {
                "$ref": "#/components/schemas/iotdb.authentication"
              }
            ]
          }
        },
        "type": "object"
      },
      "action_azure_blob_storage.aggregation": {
        "required": [
          "container"
        ],
        "properties": {
          "container": {
            "default": {
              "type": "csv"
            },
            "description": "Settings governing the file format of an upload containing aggregated events.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/connector_aggregator.container_csv"
              }
            ]
          },
          "time_interval": {
            "default": "1h",
            "type": "string",
            "description": "Amount of time events will be aggregated in a single object before uploading.",
            "example": "1h"
          },
          "max_records": {
            "default": 1000000,
            "type": "integer",
            "description": "Number of records (events) allowed per each aggregated object. Each aggregated upload will contain no more than that number of events, but may contain less.<br/><br/>  If event rate is high enough, there obviously may be more than one aggregated upload during the same time interval. These uploads will have different, but consecutive sequence numbers, which will be a part of Azure Blob Storage blob name.",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "iotdb.authentication": {
        "required": [
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "The username as configured at the IoTDB REST/Thrift interface"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password as configured at the IoTDB/Thrift REST interface",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "bridge_cassa.put_connector": {
        "required": [
          "keyspace",
          "servers"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "servers": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port][,Host2:Port]`.<br/><br/>The Cassandra default port 9042 is used if `[:Port]` is not specified."
          },
          "keyspace": {
            "type": "string",
            "description": "Keyspace name to connect to."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_cassa.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_listeners.tcp_listener": {
        "properties": {
          "id": {
            "type": "string",
            "description": "Listener ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "tcp"
            ],
            "description": "Listener Type"
          },
          "name": {
            "type": "string",
            "description": "Listener Name"
          },
          "running": {
            "type": "boolean",
            "description": "Listener Running status"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "Size of the acceptor pool."
          },
          "tcp_options": {
            "description": "Setting the TCP socket options.",
            "$ref": "#/components/schemas/emqx.tcp_opts"
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP,<br/>this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "Timeout for proxy protocol.<br/>EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
            "example": "12m"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable the listener."
          },
          "bind": {
            "type": "string",
            "description": "The IP address and port that the listener will bind.",
            "example": "127.0.0.1:80"
          },
          "max_connections": {
            "default": 1024,
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "integer",
                "minimum": 1
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "type": "integer",
            "description": "Maximum connections per second."
          },
          "enable_authn": {
            "default": true,
            "type": "boolean",
            "description": "Set <code>true</code> (default) to enable client authentication on this listener.<br/>When set to <code>false</code> clients will be allowed to connect without authentication."
          },
          "mountpoint": {
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "access_rules": {
            "default": [],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses.<br/>The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "description": "listener status",
            "$ref": "#/components/schemas/listeners.status"
          },
          "node_status": {
            "type": "array",
            "description": "listener status of each node in the cluster",
            "items": {
              "$ref": "#/components/schemas/listeners.node_status"
            }
          }
        },
        "type": "object"
      },
      "bridge_kafka.put_producer": {
        "required": [
          "bootstrap_hosts",
          "kafka"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Kafka <code>host:port</code> endpoints to bootstrap the client."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching topic metadata.",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in Kafka."
          },
          "kafka": {
            "description": "Kafka producer configs.",
            "$ref": "#/components/schemas/bridge_kafka.v1_producer_kafka_opts"
          }
        },
        "type": "object"
      },
      "gateway.anonymous_false": {
        "required": [
          "allow_anonymous",
          "authentication",
          "registry"
        ],
        "properties": {
          "allow_anonymous": {
            "description": "Allow anonymous access to the JT/T 808 Gateway.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  false
                ]
              }
            ]
          },
          "registry": {
            "type": "string",
            "description": "The JT/T 808 device registry central URL."
          },
          "authentication": {
            "type": "string",
            "description": "The JT/T 808 device authentication central URL."
          }
        },
        "type": "object"
      },
      "elasticsearch.auth_basic": {
        "required": [
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "The username as configured at the ElasticSearch REST interface"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password as configured at the ElasticSearch REST interface",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "schema_validation.check_json": {
        "required": [
          "schema"
        ],
        "properties": {
          "type": {
            "default": "json",
            "type": "string",
            "enum": [
              "json"
            ],
            "description": "JSON schema check"
          },
          "schema": {
            "type": "string",
            "description": "JSON schema check"
          }
        },
        "type": "object"
      },
      "resource_schema.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "Enable disk buffer queue (only applicable for egress bridges).<br/>When Enabled, messages will be buffered on disk when the bridge connection is down.<br/>When disabled the messages are buffered in RAM only."
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_timescale.post": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "timescale"
            ],
            "description": "The Bridge Type"
          },
          "name": {
            "type": "string",
            "description": "Bridge name."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to PostgreSQL. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The PostgreSQL default port 5432 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "emqx_delayed_api.message": {
        "properties": {
          "msgid": {
            "type": "integer",
            "description": "Delayed Message ID"
          },
          "node": {
            "type": "string",
            "description": "The node where message from"
          },
          "publish_at": {
            "type": "string",
            "description": "Clinet publish message time, in RFC 3339 format"
          },
          "delayed_interval": {
            "type": "integer",
            "description": "Delayed interval(second)",
            "minimum": 1
          },
          "delayed_remaining": {
            "type": "integer",
            "description": "Delayed remaining(second)",
            "minimum": 0
          },
          "expected_at": {
            "type": "string",
            "description": "Expect publish time, in RFC 3339 format"
          },
          "topic": {
            "type": "string",
            "description": "Topic",
            "example": "/sys/#"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "QoS",
            "minimum": 0,
            "example": 0
          },
          "from_clientid": {
            "type": "string",
            "description": "From ClientID"
          },
          "from_username": {
            "type": "string",
            "description": "From Username"
          },
          "payload": {
            "type": "string",
            "description": "Payload, base64 encoded. Payload will be set to 'PAYLOAD_TO_LARGE' if its length is larger than 2048 bytes"
          }
        },
        "type": "object"
      },
      "authz.redis_cluster": {
        "required": [
          "cmd",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "redis"
            ],
            "description": "Backend type."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Set to <code>true</code> or <code>false</code> to disable this ACL provider"
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "cluster",
            "type": "string",
            "enum": [
              "cluster"
            ],
            "description": "Cluster mode. Must be set to 'cluster' when Redis server is running in clustered mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "cmd": {
            "type": "string",
            "description": "Database query used to retrieve authorization data.",
            "example": "HGETALL mqtt_authz"
          }
        },
        "type": "object"
      },
      "confluent.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "confluent_producer"
            ],
            "description": "The type of the action."
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable description of the action."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in Confluent."
          },
          "parameters": {
            "description": "Confluent producer configs.",
            "$ref": "#/components/schemas/confluent.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "redis.redis_cluster_connector": {
        "required": [
          "servers"
        ],
        "properties": {
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Redis default port 6379 is used if `[:Port]` is not specified."
          },
          "redis_type": {
            "default": "cluster",
            "type": "string",
            "enum": [
              "cluster"
            ],
            "description": "Cluster mode. Must be set to 'cluster' when Redis server is running in clustered mode."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "kafka_consumer.put_connector": {
        "required": [
          "bootstrap_hosts"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "A comma separated list of Kafka <code>host:port</code> endpoints to bootstrap the client."
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "Minimum time interval the client has to wait before refreshing Kafka broker and topic metadata. Setting too small value may add extra load on Kafka.",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time when fetching topic metadata.",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "Extra socket options.",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.consumer_topic_mapping": {
        "required": [
          "mqtt_topic",
          "pubsub_topic"
        ],
        "properties": {
          "pubsub_topic": {
            "type": "string",
            "description": "GCP PubSub topic to consume from."
          },
          "mqtt_topic": {
            "type": "string",
            "description": "Local topic to which consumed GCP PubSub messages should be published to."
          },
          "qos": {
            "default": 0,
            "maximum": 2,
            "type": "integer",
            "description": "MQTT QoS level applied when publishing messages that are consumed from GCP PubSub.",
            "minimum": 0,
            "example": 0
          },
          "payload_template": {
            "default": "${.}",
            "type": "string",
            "description": "The template for transforming the incoming GCP PubSub message.  By default, it will use JSON format to serialize inputs from the GCP PubSub message.  Available fields are:<br/><code>message_id</code>: the message ID assigned by GCP PubSub.<br/><code>publish_time</code>: message timestamp assigned by GCP PubSub.<br/><code>topic</code>: GCP PubSub topic.<br/><code>value</code>: the payload of the GCP PubSub message.  Omitted if there's no payload.<br/><code>attributes</code>: an object containing string key-value pairs.  Omitted if there are no attributes.<br/><code>ordering_key</code>: GCP PubSub message ordering key.  Omitted if there's none."
          }
        },
        "type": "object"
      },
      "bridge_s3.s3_upload_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "10ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "iotdb.post_restapi": {
        "required": [
          "base_url",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "iotdb"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "The type of the pool. Can be one of `random`, `hash`."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "The maximum number of HTTP requests that can be sent before an HTTP response is received.<br/><br/>Setting this to 1 is equivalent to turning off HTTP pipelining, and the EMQX must receive a response to the previous HTTP request before sending the next HTTP request.",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_http.connector_resource_opts"
          },
          "driver": {
            "default": "restapi",
            "type": "string",
            "enum": [
              "restapi"
            ],
            "description": "The drivers for IoTDB connector, can be:<br/>- rest<br/>- thrift"
          },
          "base_url": {
            "type": "string",
            "description": "The base URL of the external IoTDB service's REST interface.",
            "example": "http://127.0.0.1"
          },
          "iotdb_version": {
            "default": "v1.3.x",
            "type": "string",
            "enum": [
              "v1.3.x",
              "v1.1.x",
              "v1.0.x",
              "v0.13.x"
            ],
            "description": "The version of the IoTDB system to connect to."
          },
          "authentication": {
            "default": "auth_basic",
            "description": "Authentication configuration",
            "oneOf": [
              {
                "$ref": "#/components/schemas/iotdb.authentication"
              }
            ]
          }
        },
        "type": "object"
      },
      "dashboard.sso": {
        "properties": {
          "ldap": {
            "$ref": "#/components/schemas/sso.ldap"
          },
          "oidc": {
            "$ref": "#/components/schemas/sso.oidc"
          },
          "saml": {
            "$ref": "#/components/schemas/dashboard.saml"
          }
        },
        "type": "object"
      },
      "connector_syskeeper_proxy.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "Whether start the resource right after created."
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Time interval to wait for an auto-started resource to become healthy before responding resource creation requests.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.put": {
        "required": [
          "database",
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
            "type": "string",
            "format": "sql",
            "description": "SQL Template"
          },
          "local_topic": {
            "type": "string",
            "description": "The MQTT topic filter to be forwarded to Microsoft SQL Server. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_sqlserver.creation_opts"
          },
          "driver": {
            "default": "ms-sql",
            "type": "string",
            "description": "SQL Server Driver Name"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The SQL Server default port 1433 is used if `[:Port]` is not specified."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "default": "sa",
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          }
        },
        "type": "object"
      },
      "emqx.force_gc": {
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable forced garbage collection."
          },
          "count": {
            "default": 16000,
            "type": "integer",
            "description": "GC the process after this many received messages.",
            "minimum": 0
          },
          "bytes": {
            "default": "16MB",
            "type": "string",
            "description": "GC the process after specified number of bytes have passed through.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.get_consumer": {
        "required": [
          "consumer",
          "name",
          "resource_opts",
          "service_account_json",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_consumer"
            ],
            "description": "The action type."
          },
          "name": {
            "type": "string",
            "description": "Action name, used as a human-readable identifier."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_gcp_pubsub.consumer_resource_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "Max retry times if an error occurs when sending a request.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "JSON containing the GCP Service Account credentials to be used with PubSub.<br/>When a GCP Service Account is created (as described in https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount), you have the option of downloading the credentials in JSON form.  That's the file needed."
          },
          "consumer": {
            "description": "Local MQTT publish and GCP PubSub consumer configs.",
            "$ref": "#/components/schemas/bridge_gcp_pubsub.consumer"
          }
        },
        "type": "object"
      },
      "cluster_link.link_config_response": {
        "required": [
          "name",
          "server",
          "topics"
        ],
        "properties": {
          "node": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable a cluster link. The link is enabled by default, disabling it allows stopping the link without removing its configuration. The link must be enabled on both sides to be operational. Disabling the link should also be done on both clusters in order to free up all associated resources."
          },
          "name": {
            "type": "string",
            "description": "Linked (remote) cluster name. Must be exactly equal to the value of `cluster.name` configured at the remote cluster. Must not be equal to the local cluster.name. All configured cluster link names must be unique."
          },
          "server": {
            "type": "string",
            "description": "MQTT host and port of the remote EMQX broker."
          },
          "clientid": {
            "type": "string",
            "description": "Optional Base MQTT client ID for connecting to the remote EMQX cluster. If omitted, local `cluster.name` is used. EMQX maintains several connections between linked clusters, so distinct suffixes are automatically appended to the base client ID."
          },
          "username": {
            "type": "string",
            "description": "Optional MQTT username for connecting to the remote EMQX cluster."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Optional MQTT username for connecting to the remote EMQX cluster.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL configuration for connecting to the remote EMQX cluster.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "topics": {
            "type": "array",
            "description": "MQTT topics to be forwarded by the linked remote EMQX broker to the local broker. Messages are only forwarded if the local EMQX broker has matching subscriber(s).<br/>Wildcards are supported. Setting empty topics list on one side of the link can be used to establish unidirectional links: the side with the empty topics won't receive remote messages, but it can forward relevant messages to its linked counterpart (according to the topics configured on that side of the link).",
            "items": {
              "type": "string"
            }
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the pool of MQTT clients that will publish messages to the linked EMQX broker.",
            "minimum": 1
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "MQTT Message retry interval. Delay for the link to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
            "minimum": 0
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/cluster.creation_opts"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "influxdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "The status of the bridge<br/><br/>- <code>connecting</code>: the initial state before any health probes were made.<br/><br/>- <code>connected</code>: when the bridge passes the health probes.<br/><br/>- <code>disconnected</code>: when the bridge can not pass health probes.<br/><br/>- <code>stopped</code>: when the bridge resource is requested to be stopped.<br/><br/>- <code>inconsistent</code>: When not all the nodes are at the same status."
          },
          "status_reason": {
            "type": "string",
            "description": "This is the reason given in case a bridge is failing to connect.",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "Node status.",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_influxdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_publish.message_properties": {
        "properties": {
          "payload_format_indicator": {
            "maximum": 1,
            "type": "integer",
            "description": "0 (0x00) Byte Indicates that the Payload is unspecified bytes, which is equivalent to not sending a Payload Format Indicator.<br/>1 (0x01) Byte Indicates that the Payload is UTF-8 Encoded Character Data. The UTF-8 data in the Payload MUST be well-formed UTF-8 as defined by the Unicode specification and restated in RFC 3629.",
            "minimum": 0,
            "example": 0
          },
          "message_expiry_interval": {
            "type": "integer",
            "description": "Identifier of the Message Expiry Interval. If the Message Expiry Interval has passed and the Server has not managed to start onward delivery to a matching subscriber, then it MUST delete the copy of the message for that subscriber."
          },
          "response_topic": {
            "type": "string",
            "description": "Identifier of the Response Topic.The Response Topic MUST be a UTF-8 Encoded, It MUST NOT contain wildcard characters.",
            "example": "some_other_topic"
          },
          "correlation_data": {
            "type": "string",
            "description": "Identifier of the Correlation Data. The Server MUST send the Correlation Data unaltered to all subscribers receiving the Application Message."
          },
          "user_properties": {
            "type": "object",
            "description": "The User-Property key-value pairs. Note: in case there are duplicated keys, only the last one will be used.",
            "example": {
              "foo": "bar"
            }
          },
          "content_type": {
            "type": "string",
            "description": "The Content Type MUST be a UTF-8 Encoded String.",
            "example": "text/plain"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.action_parameters": {
        "properties": {
          "sql": {
            "default": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "The template string can contain ${field} placeholders for message metadata and payload field. Make sure that the inserted values are formatted and escaped correctly. [Prepared Statement](https://docs.emqx.com/en/enterprise/v5.0/data-integration/data-bridges.html#Prepared-Statement) is not supported."
          },
          "batch_value_separator": {
            "default": ", ",
            "type": "string",
            "description": "The default value ',' works for the VALUES format. You can also use other separator if other format is specified. See [INSERT INTO Statement](https://clickhouse.com/docs/en/sql-reference/statements/insert-into)."
          }
        },
        "type": "object"
      },
      "relup.package": {
        "properties": {
          "name": {
            "type": "string",
            "description": "File name of the package",
            "example": "emqx_relup-5.8.2.tar.gz"
          },
          "target_vsn": {
            "type": "string",
            "description": "Target emqx version for this package",
            "example": "5.8.2"
          },
          "built_on_otp_release": {
            "type": "string",
            "example": "24"
          },
          "applicable_vsns": {
            "type": "array",
            "description": "The emqx versions that this package can be applied to.",
            "items": {
              "type": "string"
            },
            "example": [
              "5.8.0",
              "5.8.1"
            ]
          },
          "build_date": {
            "type": "string",
            "description": "The date when the package was built.",
            "example": "2021-12-25"
          },
          "change_logs": {
            "type": "array",
            "description": "Changes that this package brings",
            "items": {
              "type": "string"
            },
            "example": [
              "1. Fix a bug foo in the plugin.2. Add a new bar feature."
            ]
          },
          "md5_sum": {
            "type": "string",
            "example": "d41d8cd98f00b204e9800998ecf8427e"
          }
        },
        "type": "object"
      },
      "rabbitmq.put": {
        "required": [
          "password",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this bridge"
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "default": "localhost",
            "type": "string",
            "description": "The RabbitMQ server address that you want to connect to (for example, localhost)."
          },
          "port": {
            "default": 5672,
            "maximum": 65535,
            "type": "integer",
            "description": "The RabbitMQ server address that you want to connect to (for example, localhost).",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username used to authenticate with the RabbitMQ server."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The size of the connection pool.",
            "minimum": 1
          },
          "timeout": {
            "default": "5s",
            "type": "string",
            "description": "The timeout for waiting on the connection to be established.",
            "example": "32s"
          },
          "virtual_host": {
            "default": "/",
            "type": "string",
            "description": "The virtual host to use when connecting to the RabbitMQ server."
          },
          "heartbeat": {
            "default": "30s",
            "type": "string",
            "description": "The interval for sending heartbeat messages to the RabbitMQ server.",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/rabbitmq.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "public.continuation_meta": {
        "required": [
          "start"
        ],
        "properties": {
          "start": {
            "description": "The position of the current first element of the data collection.",
            "example": "none",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "position": {
            "description": "An opaque token that can then be in subsequent requests to get  the next chunk of results: \"?position={prev_response.meta.position}\"<br/>It is used instead of \"page\" parameter to traverse highly volatile data.<br/>Can be omitted or set to \"none\" to get the first chunk of data.",
            "example": "none",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "end_of_data"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge_mongodb.post_connector": {
        "required": [
          "database",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mongodb"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "parameters": {
            "description": "Set of parameters specific for the given type of this MongoDB connector, `mongo_type` can be one of `single` (Standalone), `sharded` (Sharded) or `rs` (Replica Set).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/mongo.connector_rs"
              },
              {
                "$ref": "#/components/schemas/mongo.connector_sharded"
              },
              {
                "$ref": "#/components/schemas/mongo.connector_single"
              }
            ]
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mongodb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "iotdb.post_thrift": {
        "required": [
          "name",
          "password",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "iotdb"
            ],
            "description": "The type of the connector."
          },
          "name": {
            "type": "string",
            "description": "The name of the connector."
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "driver": {
            "default": "restapi",
            "type": "string",
            "enum": [
              "thrift"
            ],
            "description": "The drivers for IoTDB connector, can be:<br/>- rest<br/>- thrift"
          },
          "server": {
            "type": "string",
            "description": "The address of the IoTDB Thrift server (host:port)"
          },
          "protocol_version": {
            "default": "protocol_v3",
            "type": "string",
            "enum": [
              "protocol_v1",
              "protocol_v2",
              "protocol_v3"
            ],
            "description": "The version of IoTDB Thrift protocol"
          },
          "zoneId": {
            "default": "Asia/Shanghai",
            "type": "string",
            "description": "Timezone for IoTDB Thrift session"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size for the IoTDB Thrift connection pool",
            "minimum": 1
          },
          "connect_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Timeout for connecting to the IoTDB Thrift server",
            "example": "32s"
          },
          "recv_timeout": {
            "default": "10s",
            "type": "string",
            "description": "Timeout for IoTDB Thrift server response",
            "example": "32s"
          },
          "username": {
            "type": "string",
            "description": "The username as configured at the IoTDB REST/Thrift interface"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password as configured at the IoTDB/Thrift REST interface",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/iotdb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.gateway_overview": {
        "properties": {
          "name": {
            "type": "string",
            "description": "Gateway Name"
          },
          "status": {
            "type": "string",
            "enum": [
              "running",
              "stopped",
              "unloaded"
            ],
            "description": "Gateway status"
          },
          "created_at": {
            "type": "string",
            "description": "The Gateway created datetime"
          },
          "started_at": {
            "type": "string",
            "description": "The Gateway started datetime"
          },
          "stopped_at": {
            "type": "string",
            "description": "The Gateway stopped datetime"
          },
          "max_connections": {
            "type": "integer",
            "description": "The maximum number of concurrent connections allowed by the gateway.",
            "minimum": 1
          },
          "current_connections": {
            "type": "integer",
            "description": "The Gateway current connected connections/clients",
            "minimum": 0
          },
          "listeners": {
            "type": "array",
            "description": "The Gateway listeners overview",
            "items": {
              "$ref": "#/components/schemas/emqx_gateway_api.gateway_listener_overview"
            }
          },
          "node_status": {
            "type": "array",
            "description": "The status of the gateway on each node in the cluster",
            "items": {
              "$ref": "#/components/schemas/emqx_gateway_api.gateway_node_status"
            }
          }
        },
        "type": "object"
      },
      "rule_engine.rule_events": {
        "required": [
          "event"
        ],
        "properties": {
          "event": {
            "type": "string",
            "enum": [
              "$events/client_connected",
              "$events/client_disconnected",
              "$events/client_connack",
              "$events/client_check_authz_complete",
              "$events/session_subscribed",
              "$events/session_unsubscribed",
              "$events/message_delivered",
              "$events/message_acked",
              "$events/message_dropped",
              "$events/message_transformation_failed",
              "$events/schema_validation_failed",
              "$events/delivery_dropped"
            ],
            "description": "The event topics"
          },
          "title": {
            "type": "string",
            "description": "The title",
            "example": "some title"
          },
          "description": {
            "type": "string",
            "description": "The description",
            "example": "some desc"
          },
          "columns": {
            "type": "object",
            "description": "The columns",
            "example": {}
          },
          "test_columns": {
            "type": "object",
            "description": "The test columns",
            "example": {}
          },
          "sql_example": {
            "type": "string",
            "description": "The sql_example"
          }
        },
        "type": "object"
      },
      "dashboard.dashboard": {
        "required": [
          "default_password"
        ],
        "properties": {
          "listeners": {
            "description": "HTTP(s) listeners are identified by their protocol type and are<br/>used to serve dashboard UI and restful HTTP API.<br/>Listeners must have a unique combination of port number and IP address.<br/>For example, an HTTP listener can listen on all configured IP addresses<br/>on a given port for a machine by specifying the IP address 0.0.0.0.<br/>Alternatively, the HTTP listener can specify a unique IP address for each listener,<br/>but use the same port.",
            "$ref": "#/components/schemas/dashboard.listeners"
          },
          "default_password": {
            "default": "public",
            "type": "string",
            "description": "The password used to initialize a database record for `admin` user.<br/>NOTE: Changing the default password after it has been initialized (boot up for the fist time) has no effect.<br/>Once initialized, the default password `public` must be changed from dashboard or CLI as soon as possible.",
            "readOnly": true
          },
          "token_expired_time": {
            "default": "60m",
            "type": "string",
            "description": "JWT token expiration time. Default is 60 minutes",
            "example": "12m"
          },
          "cors": {
            "default": false,
            "type": "boolean",
            "description": "Support Cross-Origin Resource Sharing (CORS).<br/>Allows a server to indicate any origins (domain, scheme, or port) other than<br/>its own from which a browser should permit loading resources."
          },
          "swagger_support": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable support for swagger API documentation."
          },
          "sso": {
            "$ref": "#/components/schemas/dashboard.sso"
          }
        },
        "type": "object"
      },
      "listeners.with_name_wss_required_bind": {
        "required": [
          "bind",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "wss"
            ],
            "description": "Listener type"
          },
          "running": {
            "type": "boolean",
            "description": "Listener status"
          },
          "name": {
            "type": "string",
            "description": "Listener name"
          },
          "current_connections": {
            "type": "integer",
            "description": "Current connections",
            "minimum": 0
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable listener."
          },
          "bind": {
            "default": 8084,
            "type": "string",
            "description": "IP address and port for the listening socket.",
            "example": "127.0.0.1:80"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "The size of the listener's receiving pool.",
            "minimum": 1
          },
          "max_connections": {
            "default": "infinity",
            "description": "The maximum number of concurrent connections allowed by the listener.",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message<br/>is delivered to the subscriber. The mountpoint is a way that users can use<br/>to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`<br/>set to `some_tenant`, then the client actually subscribes to the topic<br/>`some_tenant/t`. Similarly, if another client B (connected to the same listener<br/>as the client A) sends a message to topic `t`, the message is routed<br/>to all the clients subscribed `some_tenant/t`, so client A will receive the<br/>message, with topic name `t`.<br/><br/>Set to `\"\"` to disable the feature.<br/><br/><br/>Variables in mountpoint string:<br/>  - <code>${clientid}</code>: clientid<br/>  - <code>${username}</code>: username"
          },
          "zone": {
            "default": "default",
            "type": "string",
            "description": "The configuration zone to which the listener belongs.<br/>Clients connected to this listener will inherit zone-settings created under this zone name.<br/><br/>A zone can override the configs under below root names:<br/>- `mqtt`<br/>- `force_shutdown`<br/>- `force_gc`<br/>- `flapping_detect`<br/>- `durable_sessions`"
          },
          "enable_authn": {
            "default": true,
            "type": "string",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "description": "Set <code>true</code> (default) to enable client authentication on this listener, the authentication<br/>process goes through the configured authentication chain.<br/>When set to <code>false</code>, any client (with or without username/password) is allowed to connect.<br/>When set to <code>quick_deny_anonymous</code>, it behaves like when set to <code>true</code>, but clients will be<br/>denied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off<br/>anonymous clients early."
          },
          "max_conn_rate": {
            "default": "infinity",
            "type": "string",
            "description": "Used to limit the rate at which the current listener accepts connections.<br/><br/>Once the limit is reached, EMQX will pause fetching connections from the Accept queue, thereby delaying or rejecting new connections.<br/><br/>For example:<br/><br/>- `1000/s`: Only accepts 1000 connections per second.<br/>- `1000/10s`: Only accepts 1000 connections every 10 seconds.",
            "example": "1000/s"
          },
          "messages_rate": {
            "type": "string",
            "description": "Used to limit the number of messages a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>For example:<br/><br/>- `500/s`: Only 500 messages will be received per second, and the remaining messages will be delayed.<br/>- `500/10s`: Only 500 messages will be received every 10 seconds and the remaining messages will be delayed.",
            "example": "1000/s"
          },
          "bytes_rate": {
            "type": "string",
            "description": "Used to limit the number of bytes a single client can send to EMQX per second.<br/><br/>Once the limit is reached, EMQX will pause reading data from the receive-buffer, thus slowing down or even temporarily hanging the sender.<br/><br/>The unit of the bytes could be: B, KB, MB, GB.<br/><br/>For example:<br/><br/>- `500KB/s`: Only 500 kilobytes per second will be received, and the remaining bytes will be delayed.<br/>- `500MB/10s`: Only 500 megabytes will be received every 10 seconds, and the remaining bytes will be delayed.",
            "example": "100MB/s"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "type": "array",
            "description": "An access rule list consisting of string rules to restrict or allow access from some addresses. The rules that appear earlier in the list are matched first.<br/>The format is `allow | deny <address> | <CIDR> | all`.<br/><br/>For example:<br/><br/>`[\\\"deny 192.168.1.1\\\", \\\"allow 192.168.1.0/24\\\", \\\"deny, all\\\"]`",
            "items": {
              "type": "string"
            }
          },
          "proxy_protocol": {
            "default": false,
            "type": "boolean",
            "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/><br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "type": "string",
            "description": "If a reverse proxy is deployed for EMQX, and the PROXY protocol is enabled at the proxy to pass the client's real IP, this option needs to be turned on so that EMQX can extract the client's real IP from the PROXY protocol header.<br/><br/>EMQX will automatically detect the version of the PROXY protocol and support V1 and V2.<br/><br/>For a detailed description of the PROXY protocol, please refer to: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "example": "12m"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/emqx.tcp_opts"
          },
          "ssl_options": {
            "$ref": "#/components/schemas/emqx.listener_wss_opts"
          },
          "websocket": {
            "$ref": "#/components/schemas/emqx.ws_opts"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Action specific configs.",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_oracle.put_connector": {
        "required": [
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this connector."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The Oracle Database default port 1521 is used if `[:Port]` is not specified."
          },
          "sid": {
            "type": "string",
            "description": "Sid for Oracle Database."
          },
          "service_name": {
            "type": "string",
            "description": "Service Name for Oracle Database."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "Deprecated. Enable automatic reconnect to the database."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_oracle.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pulsar.put_producer": {
        "required": [
          "pulsar_topic",
          "servers"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this Pulsar bridge."
          },
          "servers": {
            "type": "string",
            "description": "A comma separated list of Pulsar URLs in the form <code>scheme://host[:port]</code><br/> for the client to connect to. The supported schemes are <code>pulsar://</code> (default)<br/> and <code>pulsar+ssl://</code>. The default port is 6650."
          },
          "authentication": {
            "default": "none",
            "description": "Authentication configs.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_token"
              },
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_basic"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "Maximum wait time for TCP connection establishment (including authentication time if enabled).",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "message": {
            "description": "Template to render a Pulsar message.",
            "$ref": "#/components/schemas/pulsar.producer_pulsar_message"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "Maximum wait time for receiving a receipt from Pulsar when publishing synchronously.",
            "example": "32s"
          },
          "pulsar_topic": {
            "type": "string",
            "description": "Pulsar topic name"
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "Maximum number of individual requests to batch in a Pulsar message.",
            "minimum": 1
          },
          "compression": {
            "default": "no_compression",
            "type": "string",
            "enum": [
              "no_compression",
              "snappy",
              "zlib"
            ],
            "description": "Compression method."
          },
          "send_buffer": {
            "default": "1MB",
            "type": "string",
            "description": "Fine tune the socket send buffer. The default value is tuned for high throughput.",
            "example": "32MB"
          },
          "retention_period": {
            "default": "infinity",
            "description": "The amount of time messages will be buffered while there is no connection to<br/> the Pulsar broker.  Longer times mean that more memory/disk will be used",
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "max_batch_bytes": {
            "default": "900KB",
            "type": "string",
            "description": "Maximum bytes to collect in a Pulsar message batch. Most of the Pulsar brokers<br/> default to a limit of 5 MB batch size. EMQX's default value is less than 5 MB in<br/> order to compensate Pulsar message encoding overheads (especially when each individual<br/> message is very small). When a single message is over the limit, it is still<br/> sent (as a single element batch).",
            "example": "32MB"
          },
          "strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "roundrobin",
              "key_dispatch"
            ],
            "description": "Partition strategy is to tell the producer how to dispatch messages to Pulsar partitions.<br/><br/><code>random</code>: Randomly pick a partition for each message.<br/><code>roundrobin</code>: Pick each available producer in turn for each message.<br/><code>key_dispatch</code>: Hash Pulsar message key of the first message in a batch<br/> to a partition number."
          },
          "buffer": {
            "description": "Configure producer message buffer.\"<br/>Tell Pulsar producer how to buffer messages when EMQX has more messages to\"<br/> send than Pulsar can keep up, or when Pulsar is down.",
            "$ref": "#/components/schemas/bridge_pulsar.producer_buffer"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (bridge input)<br/> If rule action is used as data source, this config should be left empty,<br/> otherwise messages will be duplicated in Pulsar."
          },
          "resource_opts": {
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_pulsar.producer_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.gateway_node_status": {
        "properties": {
          "node": {
            "type": "string",
            "enum": [
              "emqx@127.0.0.1"
            ],
            "description": "Node Name"
          },
          "status": {
            "type": "string",
            "enum": [
              "running",
              "stopped",
              "unloaded"
            ],
            "description": "Gateway status"
          },
          "max_connections": {
            "type": "integer",
            "description": "The maximum number of concurrent connections allowed by the gateway.",
            "minimum": 1
          },
          "current_connections": {
            "type": "integer",
            "description": "The Gateway current connected connections/clients",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "bridge_mongodb.put_sharded": {
        "required": [
          "database",
          "mongo_type",
          "resource_opts",
          "servers"
        ],
        "properties": {
          "mongo_type": {
            "default": "sharded",
            "type": "string",
            "enum": [
              "sharded"
            ],
            "description": "Sharded cluster. Must be set to 'sharded' when MongoDB server is running in 'sharded' mode."
          },
          "servers": {
            "type": "string",
            "description": "A Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].`<br/>For each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>A host entry has the following form: `Host[:Port]`.<br/>The MongoDB default port 27017 is used if `[:Port]` is not specified."
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "Write mode."
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "Use DNS SRV record."
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the connection pool towards the bridge target service.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "The username associated with the bridge in the external database used for authentication or identification purposes."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "The password associated with the bridge, used for authentication with the external database.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported."
          },
          "auth_source": {
            "type": "string",
            "description": "Database name associated with the user's credentials."
          },
          "database": {
            "type": "string",
            "description": "Database name."
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL connection settings.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable this MongoDB Action"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "The collection where data will be stored into"
          },
          "payload_template": {
            "type": "string",
            "description": "The template for formatting the outgoing messages.  If undefined, rule engine will use JSON format to serialize all visible inputs, such as clientid, topic, payload etc."
          },
          "resource_opts": {
            "description": "Creation options.",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.lwm2m": {
        "required": [
          "translators",
          "xml_dir"
        ],
        "properties": {
          "name": {
            "type": "string",
            "enum": [
              "lwm2m"
            ],
            "description": "Gateway Name"
          },
          "xml_dir": {
            "type": "string",
            "description": "The Directory for LwM2M Resource definition.",
            "example": "/etc/emqx/lwm2m_xml"
          },
          "lifetime_min": {
            "default": "15s",
            "type": "string",
            "description": "Minimum value of lifetime allowed to be set by the LwM2M client.",
            "example": "12m"
          },
          "lifetime_max": {
            "default": "86400s",
            "type": "string",
            "description": "Maximum value of lifetime allowed to be set by the LwM2M client.",
            "example": "12m"
          },
          "qmode_time_window": {
            "default": "22s",
            "type": "string",
            "description": "The value of the time window during which the network link is considered valid by the LwM2M Gateway in QMode mode.<br/>For example, after receiving an update message from a client, any messages within this time window are sent directly to the LwM2M client, and all messages beyond this time window are temporarily stored in memory.",
            "example": "1h"
          },
          "auto_observe": {
            "default": false,
            "type": "boolean",
            "description": "Automatically observe the object list of REGISTER packet."
          },
          "update_msg_publish_condition": {
            "default": "contains_object_list",
            "type": "string",
            "enum": [
              "always",
              "contains_object_list"
            ],
            "description": "Policy for publishing UPDATE event message.<br/><br/>  - always: send update events as long as the UPDATE request is received.<br/><br/>  - contains_object_list: send update events only if the UPDATE request carries any Object List"
          },
          "translators": {
            "description": "Topic configuration for LwM2M's gateway publishing and subscription.",
            "$ref": "#/components/schemas/gateway.lwm2m_translators"
          },
          "mountpoint": {
            "default": "lwm2m/${endpoint_name}/",
            "type": "string",
            "description": "When publishing or subscribing, prefix all topics with a mountpoint string.<br/>The prefixed string will be removed from the topic name when the message is delivered to the subscriber.<br/>The mountpoint is a way that users can use to implement isolation of message routing between different listeners.<br/>For example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint` set to `some_tenant`,<br/>then the client actually subscribes to the topic `some_tenant/t`.<br/>Similarly, if another client B (connected to the same listener as the client A) sends a message to topic `t`,<br/>the message is routed to all the clients subscribed `some_tenant/t`,<br/>so client A will receive the message, with topic name `t`. Set to `\"\"` to disable the feature.<br/>Supported placeholders in mountpoint string:<br/><br/>  - <code>${clientid}</code>: clientid<br/><br/>  - <code>${username}</code>: username<br/><br/>  - <code>${endpoint_name}</code>: endpoint name"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable this gateway"
          },
          "enable_stats": {
            "default": true,
            "type": "boolean",
            "description": "Whether to enable client process statistic"
          },
          "idle_timeout": {
            "default": "30s",
            "type": "string",
            "description": "The idle time of the client connection process. It has two purposes:<br/>  1. A newly created client process that does not receive any client requests after that time will be closed directly.<br/>  2. A running client process that does not receive any client requests after this time will go into hibernation to save resources.",
            "example": "12m"
          },
          "clientinfo_override": {
            "description": "ClientInfo override.",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          },
          "listeners": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                }
              ]
            }
          }
        },
        "type": "object"
      },
      "bridge_iotdb.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_http.parameters_opts": {
        "properties": {
          "path": {
            "type": "string",
            "description": "The URL path for this Action.<br/><br/>This path will be appended to the Connector's <code>url</code> configuration to form the full<br/>URL address.<br/>Template with variables is allowed in this option. For example, <code>/room/{$room_no}</code>"
          },
          "method": {
            "default": "post",
            "type": "string",
            "enum": [
              "post",
              "put",
              "get",
              "delete"
            ],
            "description": "The method of the HTTP request. All the available methods are: post, put, get, delete.<br/><br/>Template with variables is allowed."
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "type": "object",
            "description": "The headers of the HTTP request.<br/><br/>Template with variables is allowed.",
            "example": {},
            "is_template": true
          },
          "body": {
            "type": "string",
            "description": "The body of the HTTP request.<br/><br/>If not provided, the body will be a JSON object of all the available fields.<br/><br/>There, 'all the available fields' means the context of a MQTT message when<br/>this webhook is triggered by receiving a MQTT message (the `local_topic` is set),<br/>or the context of the event when this webhook is triggered by a rule (i.e. this<br/>webhook is used as an action of a rule).<br/><br/>Template with variables is allowed."
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "HTTP request max retry times if failed.",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "description": "HTTP request timeout.",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mongodb"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT topic or topic filter as data source (action input).  If rule action is used as data source, this config should be left empty, otherwise messages will be duplicated in the remote system."
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_mongodb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable (true) or disable (false) this action."
          },
          "connector": {
            "type": "string",
            "description": "Name of the connector specified by the action, used for external resource selection."
          },
          "tags": {
            "type": "array",
            "description": "Tags to annotate this config entry.",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "Descriptive text."
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/bridge_mongodb.action_resource_opts"
          }
        },
        "type": "object"
      },
      "rocketmq.action_parameters": {
        "properties": {
          "template": {
            "default": "",
            "type": "string",
            "description": "Template, the default value is empty. When this value is empty the whole message will be stored in the RocketMQ.<br><br/>            The template can be any valid string with placeholders, example:<br><br/>            - ${id}, ${username}, ${clientid}, ${timestamp}<br><br/>            - {\"id\" : ${id}, \"username\" : ${username}}"
          },
          "strategy": {
            "default": "roundrobin",
            "description": "Producer key dispatch strategy, the default is `roundrobin`, also supports placeholders, such as: `clientid`, `messageid`, `username`.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "roundrobin"
                ]
              }
            ]
          },
          "topic": {
            "default": "TopicTest",
            "type": "string",
            "description": "RocketMQ Topic"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "Timeout of RocketMQ driver synchronous call.",
            "example": "12m"
          },
          "refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "RocketMQ Topic Route Refresh Interval.",
            "example": "12m"
          },
          "send_buffer": {
            "default": "1024KB",
            "type": "string",
            "description": "The socket send buffer size of the RocketMQ driver client.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "cluster.link": {
        "required": [
          "name",
          "server",
          "topics"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable a cluster link. The link is enabled by default, disabling it allows stopping the link without removing its configuration. The link must be enabled on both sides to be operational. Disabling the link should also be done on both clusters in order to free up all associated resources."
          },
          "name": {
            "type": "string",
            "description": "Linked (remote) cluster name. Must be exactly equal to the value of `cluster.name` configured at the remote cluster. Must not be equal to the local cluster.name. All configured cluster link names must be unique."
          },
          "server": {
            "type": "string",
            "description": "MQTT host and port of the remote EMQX broker."
          },
          "clientid": {
            "type": "string",
            "description": "Optional Base MQTT client ID for connecting to the remote EMQX cluster. If omitted, local `cluster.name` is used. EMQX maintains several connections between linked clusters, so distinct suffixes are automatically appended to the base client ID."
          },
          "username": {
            "type": "string",
            "description": "Optional MQTT username for connecting to the remote EMQX cluster."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Optional MQTT username for connecting to the remote EMQX cluster.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL configuration for connecting to the remote EMQX cluster.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "topics": {
            "type": "array",
            "description": "MQTT topics to be forwarded by the linked remote EMQX broker to the local broker. Messages are only forwarded if the local EMQX broker has matching subscriber(s).<br/>Wildcards are supported. Setting empty topics list on one side of the link can be used to establish unidirectional links: the side with the empty topics won't receive remote messages, but it can forward relevant messages to its linked counterpart (according to the topics configured on that side of the link).",
            "items": {
              "type": "string"
            }
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the pool of MQTT clients that will publish messages to the linked EMQX broker.",
            "minimum": 1
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "MQTT Message retry interval. Delay for the link to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
            "minimum": 0
          },
          "resource_opts": {
            "default": {},
            "description": "Resource options.",
            "$ref": "#/components/schemas/cluster.creation_opts"
          }
        },
        "type": "object"
      },
      "bridge_pulsar.auth_basic": {
        "required": [
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Basic authentication username. The `username` part of the `username:password` authentication string."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Basic authentication password. The `password` part of the `username:password` authentication string.",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "actions_and_sources.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "The number of buffer workers. Only applicable for egress type bridges.<br/>For bridges only have ingress direction data flow, it can be set to 0 otherwise must be greater than 0.",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "Health check interval.",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "Query mode. Optional 'sync/async', default 'async'."
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "Query inflight window. When query_mode is set to async, this config has to be set to 1 if messages from the same MQTT client have to be strictly ordered.",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "Maximum batch count. If equal to 1, there's effectively no batching.",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "Maximum waiting interval when accumulating a batch at a low message rates for more efficient resource usage.",
            "example": "32s"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "Maximum number of bytes to buffer for each buffer worker.",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "relup.upgrade_history": {
        "properties": {
          "started_at": {
            "type": "string",
            "description": "The timestamp (in format of RFC3339) when the upgrade started",
            "example": "2024-07-15T13:48:02.648559+08:00"
          },
          "finished_at": {
            "type": "string",
            "description": "The timestamp (in format of RFC3339) when the upgrade finished",
            "example": "2024-07-16T11:00:01.875627+08:00"
          },
          "from_vsn": {
            "type": "string",
            "description": "The version before the upgrade",
            "example": "5.8.0"
          },
          "target_vsn": {
            "type": "string",
            "description": "The target version of the upgrade",
            "example": "5.8.2"
          },
          "upgrade_opts": {
            "type": "object",
            "description": "The options used for the upgrade",
            "example": {
              "deploy_inplace": false
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "in-progress",
              "finished"
            ],
            "description": "The upgrade status of the node",
            "example": "in-progress"
          },
          "result": {
            "description": "The upgrade result",
            "example": "success",
            "oneOf": [
              {
                "$ref": "#/components/schemas/relup.upgrade_error"
              },
              {
                "type": "string",
                "enum": [
                  "success"
                ]
              }
            ]
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "scheme": "bearer",
        "type": "http",
        "description": "Authorize with Bearer Token"
      },
      "basicAuth": {
        "scheme": "basic",
        "type": "http",
        "description": "Authorize with [API Keys](https://www.emqx.io/docs/en/v5.0/admin/api.html#api-keys)"
      }
    }
  },
  "paths": {
    "/plugins/{name}/schema": {
      "get": {
        "description": "Get plugin's config AVRO schema.",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "FILE_NOT_EXISTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Plugin Not Found or Plugin not given a schema file"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get installed plugin's AVRO schema",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication/{id}/position/{position}": {
      "put": {
        "description": "Move authenticator in global authentication chain.",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Authenticator ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "position",
            "description": "Position of authenticator in chain. Possible values are 'front', 'rear', 'before:{other_authenticator}', 'after:{other_authenticator}'.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "before:password_based:built_in_database"
          }
        ],
        "responses": {
          "204": {
            "description": "Authenticator moved"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/actions/{id}/metrics/reset": {
      "put": {
        "description": "Reset a bridge metrics by id.",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "responses": {
          "204": {
            "description": "Reset success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Action not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Reset action metrics",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/links/link/{name}/metrics/reset": {
      "put": {
        "description": "Reset a cluster link's metrics",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_link"
          }
        ],
        "responses": {
          "204": {
            "description": "Reset"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cluster link not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/metrics": {
      "get": {
        "description": "EMQX metrics",
        "tags": [
          "Metrics"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "aggregate",
            "description": "Whether to aggregate all nodes Metrics",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_metrics.node_metrics"
                      }
                    },
                    {
                      "$ref": "#/components/schemas/emqx_mgmt_api_metrics.aggregated_metrics"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication/{id}/users/{user_id}": {
      "get": {
        "description": "Get user from authenticator in global authentication chain.",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Authenticator ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "description": "User ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update user in authenticator in global authentication chain.",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Authenticator ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "description": "User ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "value": {
                    "password": "******"
                  },
                  "summary": "Update regular user"
                },
                "super_user": {
                  "value": {
                    "password": "******",
                    "is_superuser": true
                  },
                  "summary": "Update user and promote to superuser"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_update"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete user in authenticator in global authentication chain.",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Authenticator ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "description": "User ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication/{id}/import_users": {
      "post": {
        "description": "Import users into authenticator in global authentication chain.",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Authenticator ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "The import file template type, enum with `plain`,`hash`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "plain",
                "hash"
              ]
            },
            "example": "hash"
          }
        ],
        "responses": {
          "204": {
            "description": "Users imported"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Import body",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "example": [
                  {
                    "is_superuser": true,
                    "password": "password1",
                    "user_id": "user1"
                  },
                  {
                    "is_superuser": false,
                    "password": "password2",
                    "user_id": "user2"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/actions/{id}/{operation}": {
      "post": {
        "description": "Start bridge on all nodes in the cluster.",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "Operation can be one of: 'start'.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start"
              ]
            },
            "example": "start"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Manually start a bridge",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/delayed": {
      "get": {
        "description": "Get delayed status",
        "tags": [
          "MQTT"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/modules.delayed"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Enable or disable delayed, set max delayed messages",
        "tags": [
          "MQTT"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Enable or disable delayed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/modules.delayed"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Max limit illegality"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/modules.delayed"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/lwm2m/clients/{clientid}/observe": {
      "post": {
        "description": "Observe or Cancel observe a resource",
        "tags": [
          "LwM2M Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "urn:oma:lwm2m:oma:2"
          },
          {
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "/3/0/7"
          },
          {
            "in": "query",
            "name": "enable",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENT_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Clientid not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Observe a Resource",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_validations/validation/{name}/metrics": {
      "get": {
        "description": "Get metrics for a particular validation",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Validation name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_validation"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "metrics": {
                    "value": {
                      "metrics": {
                        "matched": 2,
                        "failed": 1,
                        "succeeded": 1,
                        "rate": 1.23,
                        "rate_last5m": 0.88,
                        "rate_max": 1.87
                      },
                      "node_metrics": [
                        {
                          "node": "emqx@127.0.0.1",
                          "metrics": {
                            "matched": 2,
                            "failed": 1,
                            "succeeded": 1,
                            "rate": 1.23,
                            "rate_last5m": 0.88,
                            "rate_max": 1.87
                          }
                        }
                      ]
                    },
                    "summary": "Metrics"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/schema_validation_http_api.get_metrics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get validation metrics",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/plugins/{name}": {
      "get": {
        "description": "Describe a plugin according to its `release.json` and `README.md`.",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plugins.plugin"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Plugin Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get a plugin description",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Uninstalls a previously uploaded plugin package.",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          }
        ],
        "responses": {
          "204": {
            "description": "Uninstall successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "PARAM_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad parameter"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Plugin Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete a plugin",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/bridges/{id}/metrics/reset": {
      "put": {
        "description": "Reset a bridge metrics by Id",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge Id. Must be of format {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          }
        ],
        "responses": {
          "204": {
            "description": "Reset success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Reset bridge metrics",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/links/link/{name}/metrics": {
      "get": {
        "description": "Get a cluster link metrics",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_link"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "metrics": {
                    "routes": 10240
                  },
                  "node_metrics": [
                    {
                      "metrics": {
                        "routes": 10240
                      },
                      "node": "emqx1@emqx.net"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/cluster_link.link_metrics_response"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cluster link not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/status": {
      "get": {
        "description": "Serves as a health check for the node.<br/>Returns response to describe the status of the node and the application.<br/><br/>This endpoint requires no authentication.<br/><br/>Returns status code 200 if the EMQX application is up and running, 503 otherwise.<br/>This API was introduced in v5.0.10.<br/>The GET `/status` endpoint (without the `/api/...` prefix) is also an alias to this endpoint and works in the same way.<br/>This alias has been available since v5.0.0.<br/><br/>Starting from v5.0.25 or e5.0.4, you can also use 'format' parameter to get JSON format information.",
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "description": "Specify the response format, 'text' (default) to return the HTTP body in free text,<br/>or 'json' to return the HTTP body with a JSON object.",
            "schema": {
              "default": "text",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If 'format' parameter is 'json', then it returns a JSON like below:<br/><br/>{<br/>  \"rel_vsn\": \"v5.0.23\",<br/>  \"node_name\": \"emqx@127.0.0.1\",<br/>  \"broker_status\": \"started\",<br/>  \"app_status\": \"running\"<br/>}<br/><br/><br/>Otherwise it returns free text strings as below:<br/><br/>Node emqx@127.0.0.1 is started<br/>emqx is running"
          },
          "503": {
            "description": "When EMQX application is temporary not running or being restarted, it may return 'emqx is not_running'.<br/>If the 'format' parameter is provided 'json', then the 'app_status' field in the JSON object will be 'not_running'."
          }
        },
        "security": []
      }
    },
    "/topics/{topic}": {
      "get": {
        "description": "Lookup topic info by name",
        "tags": [
          "Topics"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "topic",
            "description": "Topic Name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_topics.topic"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TOPIC_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Topic not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message_transformations": {
      "get": {
        "description": "List transformations",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "list": {
                    "value": [
                      {
                        "name": "my_transformation",
                        "description": "my transformation",
                        "tags": [
                          "transformation"
                        ],
                        "enable": true,
                        "topics": [
                          "t/+"
                        ],
                        "operations": [
                          {
                            "value": "concat([topic, '/', payload.t])",
                            "key": "topic"
                          }
                        ],
                        "failure_action": "drop",
                        "log_failure": {
                          "level": "info"
                        },
                        "payload_encoder": {
                          "type": "json"
                        },
                        "payload_decoder": {
                          "type": "json"
                        }
                      },
                      {
                        "name": "other_transformation",
                        "description": "my transformation",
                        "tags": [
                          "transformation"
                        ],
                        "enable": true,
                        "topics": [
                          "t/+"
                        ],
                        "operations": [
                          {
                            "value": "concat([topic, '/', payload.t])",
                            "key": "topic"
                          }
                        ],
                        "failure_action": "drop",
                        "log_failure": {
                          "level": "info"
                        },
                        "payload_encoder": {
                          "type": "json"
                        },
                        "payload_decoder": {
                          "type": "json"
                        }
                      }
                    ],
                    "summary": "List"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/message_transformation.transformation"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "List transformations",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update a transformation",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "update": {
                    "value": {
                      "name": "my_transformation",
                      "description": "my transformation",
                      "tags": [
                        "transformation"
                      ],
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "operations": [
                        {
                          "value": "concat([topic, '/', payload.t])",
                          "key": "topic"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      },
                      "payload_encoder": {
                        "type": "json"
                      },
                      "payload_decoder": {
                        "type": "json"
                      }
                    },
                    "summary": "Update"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/message_transformation.transformation"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad params"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Transformation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update a transformation",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "update": {
                  "value": {
                    "name": "my_transformation",
                    "description": "my transformation",
                    "tags": [
                      "transformation"
                    ],
                    "enable": true,
                    "topics": [
                      "t/+"
                    ],
                    "operations": [
                      {
                        "value": "concat([topic, '/', payload.t])",
                        "key": "topic"
                      }
                    ],
                    "failure_action": "drop",
                    "log_failure": {
                      "level": "info"
                    },
                    "payload_encoder": {
                      "type": "json"
                    },
                    "payload_decoder": {
                      "type": "json"
                    }
                  },
                  "summary": "Update"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/message_transformation.transformation"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Append a new transformation to the list of transformations",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "message_transformation": {
                    "value": {
                      "name": "my_transformation",
                      "description": "my transformation",
                      "tags": [
                        "transformation"
                      ],
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "operations": [
                        {
                          "value": "concat([topic, '/', payload.t])",
                          "key": "topic"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      },
                      "payload_encoder": {
                        "type": "json"
                      },
                      "payload_decoder": {
                        "type": "json"
                      }
                    },
                    "summary": "Simple message transformation"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/message_transformation.transformation"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Transformation already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Append a new transformation",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "message_transformation": {
                  "value": {
                    "name": "my_transformation",
                    "description": "my transformation",
                    "tags": [
                      "transformation"
                    ],
                    "enable": true,
                    "topics": [
                      "t/+"
                    ],
                    "operations": [
                      {
                        "value": "concat([topic, '/', payload.t])",
                        "key": "topic"
                      }
                    ],
                    "failure_action": "drop",
                    "log_failure": {
                      "level": "info"
                    },
                    "payload_encoder": {
                      "type": "json"
                    },
                    "payload_decoder": {
                      "type": "json"
                    }
                  },
                  "summary": "Simple message transformation"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/message_transformation.transformation"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message_transformations/dryrun": {
      "post": {
        "description": "Test an input against a transformation",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "TODO"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Test an input against a configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "test": {
                  "value": {
                    "message": {
                      "user_property": {},
                      "retain": true,
                      "payload": "{}",
                      "client_attrs": {},
                      "topic": "t/u/v",
                      "qos": 2
                    },
                    "transformation": {
                      "name": "my_transformation",
                      "description": "my transformation",
                      "tags": [
                        "transformation"
                      ],
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "operations": [
                        {
                          "value": "concat([topic, '/', payload.t])",
                          "key": "topic"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      },
                      "payload_encoder": {
                        "type": "json"
                      },
                      "payload_decoder": {
                        "type": "json"
                      }
                    }
                  },
                  "summary": "Test an input against a configuration"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/message_transformation_http_api.dryrun_transformation"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/file_transfer/file": {
      "get": {
        "description": "Get a file by its id.",
        "tags": [
          "File Transfer"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/file_transfer.file_node"
          },
          {
            "$ref": "#/components/parameters/file_transfer.file_ref"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Download a particular file",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/stats": {
      "get": {
        "description": "EMQX stats",
        "tags": [
          "Metrics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_mgmt_api_stats.aggregate"
          }
        ],
        "responses": {
          "200": {
            "description": "List stats ok",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_mgmt_api_stats.aggregated_data"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_stats.per_node_data"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/monitor_current": {
      "get": {
        "description": "Current monitor (statistics) data, e.g. number of connections and connection rate in the whole cluster.",
        "tags": [
          "Metrics"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_dashboard_monitor_api.sampler_current"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/built_in_database/rules/users": {
      "get": {
        "description": "Show the list of rules for users",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "in": "query",
            "name": "like_username",
            "description": "Fuzzy search `username` as substring",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "password_based:built_in_database": {
                    "value": {
                      "data": [
                        {
                          "rules": [
                            {
                              "action": "publish",
                              "permission": "allow",
                              "topic": "test/topic/1"
                            },
                            {
                              "action": "subscribe",
                              "permission": "allow",
                              "topic": "test/topic/2"
                            },
                            {
                              "action": "all",
                              "permission": "deny",
                              "topic": "eq test/#"
                            },
                            {
                              "action": "publish",
                              "retain": "true",
                              "permission": "allow",
                              "topic": "test/topic/3",
                              "qos": [
                                "1"
                              ]
                            },
                            {
                              "action": "publish",
                              "retain": "all",
                              "permission": "allow",
                              "topic": "test/topic/4",
                              "qos": [
                                "0",
                                "1",
                                "2"
                              ]
                            }
                          ],
                          "username": "user1"
                        }
                      ],
                      "meta": {
                        "count": 1,
                        "limit": 100,
                        "page": 1
                      }
                    },
                    "summary": "Username"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.username_response_data"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Add new rule for 'username'",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Created"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad username or bad rule schema"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "ALREADY_EXISTS"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "password_based:built_in_database": {
                  "value": [
                    {
                      "rules": [
                        {
                          "action": "publish",
                          "permission": "allow",
                          "topic": "test/topic/1"
                        },
                        {
                          "action": "subscribe",
                          "permission": "allow",
                          "topic": "test/topic/2"
                        },
                        {
                          "action": "all",
                          "permission": "deny",
                          "topic": "eq test/#"
                        },
                        {
                          "action": "publish",
                          "retain": "true",
                          "permission": "allow",
                          "topic": "test/topic/3",
                          "qos": [
                            "1"
                          ]
                        },
                        {
                          "action": "publish",
                          "retain": "all",
                          "permission": "allow",
                          "topic": "test/topic/4",
                          "qos": [
                            "0",
                            "1",
                            "2"
                          ]
                        }
                      ],
                      "username": "user1"
                    }
                  ],
                  "summary": "Username"
                }
              },
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_username"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message_transformations/transformation/{name}/metrics": {
      "get": {
        "description": "Get metrics for a particular transformation",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Transformation name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_transformation"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "metrics": {
                    "value": {
                      "metrics": {
                        "matched": 2,
                        "failed": 1,
                        "succeeded": 1,
                        "rate": 1.23,
                        "rate_last5m": 0.88,
                        "rate_max": 1.87
                      },
                      "node_metrics": [
                        {
                          "node": "emqx@127.0.0.1",
                          "metrics": {
                            "matched": 2,
                            "failed": 1,
                            "succeeded": 1,
                            "rate": 1.23,
                            "rate_last5m": 0.88,
                            "rate_max": 1.87
                          }
                        }
                      ]
                    },
                    "summary": "Metrics"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/message_transformation_http_api.get_metrics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Transformation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get transformation metrics",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes/{node}/stats": {
      "get": {
        "description": "Get node run-time stats. Such as the number of topics, connections, etc.",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_mgmt_api_nodes.node_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Get node stats successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_stats.aggregated_data"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/exhooks/{name}": {
      "get": {
        "description": "Get the detail information of Exhook server",
        "tags": [
          "ExHook"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The Exhook server name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "default"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exhook.detail_server_info"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Server not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the server",
        "tags": [
          "ExHook"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The Exhook server name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "default"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exhook.detail_server_info"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Server not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_RPC"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad RPC"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "default",
                "ssl": {
                  "cacertfile": "/etc/emqx/certs/cacert.pem",
                  "certfile": "/etc/emqx/certs/cert.pem",
                  "keyfile": "/etc/emqx/certs/key.pem",
                  "enable": false
                },
                "pool_size": 8,
                "enable": true,
                "url": "http://127.0.0.1:8081",
                "request_timeout": "5s",
                "auto_reconnect": "60s",
                "failed_action": "deny"
              },
              "schema": {
                "$ref": "#/components/schemas/exhook.server_config"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the server",
        "tags": [
          "ExHook"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The Exhook server name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "default"
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Server not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_RPC"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad RPC"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/prometheus": {
      "get": {
        "description": "Get Prometheus config info",
        "tags": [
          "Monitor"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "collectors": {
                    "mnesia": "disabled",
                    "vm_msacc": "disabled",
                    "vm_memory": "disabled",
                    "vm_system_info": "disabled",
                    "vm_statistics": "disabled",
                    "vm_dist": "disabled"
                  },
                  "push_gateway": {
                    "interval": "15s",
                    "headers": {
                      "Authorization": "Basic YWRtaW46Y2JraG55eWd5QDE="
                    },
                    "url": "http://127.0.0.1:9091",
                    "job_name": "${name}/instance/${name}~${host}"
                  },
                  "enable_basic_auth": false
                },
                "schema": {
                  "$ref": "#/components/schemas/prometheus.recommend_setting"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update Prometheus config",
        "tags": [
          "Monitor"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "collectors": {
                    "mnesia": "disabled",
                    "vm_msacc": "disabled",
                    "vm_memory": "disabled",
                    "vm_system_info": "disabled",
                    "vm_statistics": "disabled",
                    "vm_dist": "disabled"
                  },
                  "push_gateway": {
                    "interval": "15s",
                    "headers": {
                      "Authorization": "Basic YWRtaW46Y2JraG55eWd5QDE="
                    },
                    "url": "http://127.0.0.1:9091",
                    "job_name": "${name}/instance/${name}~${host}"
                  },
                  "enable_basic_auth": false
                },
                "schema": {
                  "$ref": "#/components/schemas/prometheus.recommend_setting"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "recommend_setting": {
                  "value": {
                    "collectors": {
                      "mnesia": "disabled",
                      "vm_msacc": "disabled",
                      "vm_memory": "disabled",
                      "vm_system_info": "disabled",
                      "vm_statistics": "disabled",
                      "vm_dist": "disabled"
                    },
                    "push_gateway": {
                      "interval": "15s",
                      "headers": {
                        "Authorization": "Basic YWRtaW46Y2JraG55eWd5QDE="
                      },
                      "url": "http://127.0.0.1:9091",
                      "job_name": "${name}/instance/${name}~${host}"
                    },
                    "enable_basic_auth": false
                  },
                  "summary": "recommend_setting"
                },
                "legacy_deprecated_setting": {
                  "value": {
                    "enable": true,
                    "interval": "15s",
                    "headers": {
                      "Authorization": "Basic YWRtaW46Y2JraG55eWd5QDE="
                    },
                    "push_gateway_server": "http://127.0.0.1:9091",
                    "job_name": "${name}/instance/${name}~${host}",
                    "vm_msacc_collector": "disabled",
                    "vm_memory_collector": "disabled",
                    "vm_system_info_collector": "disabled",
                    "vm_statistics_collector": "disabled",
                    "mnesia_collector": "disabled",
                    "vm_dist_collector": "disabled"
                  },
                  "summary": "legacy_deprecated_setting"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/prometheus.legacy_deprecated_setting"
                  },
                  {
                    "$ref": "#/components/schemas/prometheus.recommend_setting"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/auto_subscribe": {
      "get": {
        "description": "Get auto subscribe topic list",
        "tags": [
          "Auto Subscribe"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "After the device logs in successfully, the subscription is automatically completed for the device through the pre-defined subscription representation. Supports the use of placeholders.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/auto_subscribe.topic"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update auto subscribe topic list",
        "tags": [
          "Auto Subscribe"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "After the device logs in successfully, the subscription is automatically completed for the device through the pre-defined subscription representation. Supports the use of placeholders.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/auto_subscribe.topic"
                  }
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "EXCEED_LIMIT"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Auto Subscribe topics max limit"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/auto_subscribe.topic"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/load_rebalance/{node}/evacuation/start": {
      "post": {
        "description": "Start evacuation process",
        "tags": [
          "Load Rebalance"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "Node name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response is empty",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Start evacuation on a node",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "evacuation": {
                  "conn_evict_rate": 100,
                  "sess_evict_rate": 100,
                  "migrate_to": [
                    "othernode@127.0.0.1"
                  ],
                  "wait_takeover": "10s",
                  "wait_health_check": "10s",
                  "redirect_to": "othernode:1883"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/load_rebalance.rebalance_evacuation_start"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/listeners/{id}/authentication": {
      "get": {
        "description": "Get the listener's authenticator configs.",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Listener ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "server": "127.0.0.1:6379",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.cinfo"
                    },
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Authentication or listener does not existed"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get the listener's authenticator",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update authenticator configs for the listener, or disable/enable it.",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Listener ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "server": "127.0.0.1:6379",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.cinfo"
                    },
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update config of authenticator for listener",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "value": {
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "algorithm": "hmac-based",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  },
                  "summary": "JWT authentication"
                },
                "password_based:built_in_database": {
                  "value": {
                    "mechanism": "password_based",
                    "backend": "built_in_database",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  },
                  "summary": "Built-in password_based authentication"
                },
                "password_based:http": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "5s",
                    "mechanism": "password_based",
                    "pool_size": 8,
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://127.0.0.1:18083",
                    "method": "post",
                    "backend": "http",
                    "request_timeout": "5s",
                    "enable_pipelining": 100
                  },
                  "summary": "password_based authentication through external HTTP API"
                },
                "password_based:mongodb": {
                  "value": {
                    "mechanism": "password_based",
                    "filter": {
                      "username": "${username}"
                    },
                    "server": "127.0.0.1:27017",
                    "database": "example",
                    "backend": "mongodb",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "collection": "users",
                    "is_superuser_field": "is_superuser",
                    "password_hash_field": "password_hash",
                    "salt_field": "salt"
                  },
                  "summary": "password_based authentication with MongoDB backend"
                },
                "password_based:redis": {
                  "value": {
                    "mechanism": "password_based",
                    "server": "127.0.0.1:6379",
                    "cmd": "HMGET ${username} password_hash salt",
                    "database": 0,
                    "backend": "redis",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single"
                  },
                  "summary": "password_based authentication with Redis backend"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.cinfo"
                  },
                  {
                    "$ref": "#/components/schemas/authn.kerberos"
                  },
                  {
                    "$ref": "#/components/schemas/authn.gcp_device"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap_deprecated"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Remove authenticator for the listener.",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Listener ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete the listener's authenticator",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Enable authenticator for specified listener for client authentication.<br/><br/>When authenticator is enabled for a listener, all clients connecting to that listener will use that authenticator for authentication.",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Listener ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "server": "127.0.0.1:6379",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.cinfo"
                    },
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Create authenticator for listener",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "value": {
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "algorithm": "hmac-based",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  },
                  "summary": "JWT authentication"
                },
                "password_based:built_in_database": {
                  "value": {
                    "mechanism": "password_based",
                    "backend": "built_in_database",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  },
                  "summary": "Built-in password_based authentication"
                },
                "password_based:http": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "5s",
                    "mechanism": "password_based",
                    "pool_size": 8,
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://127.0.0.1:18083",
                    "method": "post",
                    "backend": "http",
                    "request_timeout": "5s",
                    "enable_pipelining": 100
                  },
                  "summary": "password_based authentication through external HTTP API"
                },
                "password_based:mongodb": {
                  "value": {
                    "mechanism": "password_based",
                    "filter": {
                      "username": "${username}"
                    },
                    "server": "127.0.0.1:27017",
                    "database": "example",
                    "backend": "mongodb",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "collection": "users",
                    "is_superuser_field": "is_superuser",
                    "password_hash_field": "password_hash",
                    "salt_field": "salt"
                  },
                  "summary": "password_based authentication with MongoDB backend"
                },
                "password_based:redis": {
                  "value": {
                    "mechanism": "password_based",
                    "server": "127.0.0.1:6379",
                    "cmd": "HMGET ${username} password_hash salt",
                    "database": 0,
                    "backend": "redis",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single"
                  },
                  "summary": "password_based authentication with Redis backend"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.cinfo"
                  },
                  {
                    "$ref": "#/components/schemas/authn.kerberos"
                  },
                  {
                    "$ref": "#/components/schemas/authn.gcp_device"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap_deprecated"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/listeners": {
      "get": {
        "description": "Gets a list of gateway listeners. This interface returns all the configs of the listener (including the authenticator on that listener), as well as the status of that listener running in the cluster.",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "name": "udp-def",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "udp",
                    "bind": "22212",
                    "udp_options": {
                      "buffer": "10KB",
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "sndbuf": "10KB",
                      "active_n": 100
                    },
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ]
                  },
                  {
                    "name": "dtls-def",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "dtls",
                    "bind": "22213",
                    "udp_options": {
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "acceptors": 16,
                    "dtls_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "access_rules": [
                      "allow all"
                    ],
                    "max_conn_rate": 1000
                  },
                  {
                    "name": "ssl-def",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "ssl",
                    "bind": "22211",
                    "tcp_options": {
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "ssl_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2",
                        "tlsv1.1",
                        "tlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "acceptors": 16,
                    "access_rules": [
                      "allow all"
                    ],
                    "max_conn_rate": 1000
                  },
                  {
                    "name": "tcp-def",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "tcp",
                    "bind": "22210",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  {
                    "name": "ws-def",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "ws",
                    "bind": "33043",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "websocket": {
                      "path": "/ocpp",
                      "compress": false,
                      "fail_if_no_subprotocol": true,
                      "supported_subprotocols": "ocpp1.6",
                      "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                      "check_origin_enable": false,
                      "piggyback": "single"
                    },
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  {
                    "name": "ws-ssl-def",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "wss",
                    "bind": "33053",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "ssl_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2",
                        "tlsv1.1",
                        "tlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "websocket": {
                      "path": "/ocpp",
                      "compress": false,
                      "fail_if_no_subprotocol": true,
                      "supported_subprotocols": "ocpp1.6",
                      "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                      "check_origin_enable": false,
                      "piggyback": "single"
                    },
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  {
                    "name": "dtls-psk",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "dtls",
                    "bind": "22214",
                    "max_connections": 1024000,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "acceptors": 16,
                    "dtls_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ],
                      "fail_if_no_peer_cert": false,
                      "user_lookup_fun": "emqx_tls_psk:lookup"
                    },
                    "max_conn_rate": 1000
                  },
                  {
                    "name": "tcp-with-authn",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "tcp",
                    "bind": "22215",
                    "authentication": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256"
                      },
                      "user_id_type": "username"
                    },
                    "max_connections": 1024000,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/emqx_gateway_api_listeners.dtls_listener"
                      },
                      {
                        "$ref": "#/components/schemas/emqx_gateway_api_listeners.udp_listener"
                      },
                      {
                        "$ref": "#/components/schemas/emqx_gateway_api_listeners.ssl_listener"
                      },
                      {
                        "$ref": "#/components/schemas/emqx_gateway_api_listeners.tcp_listener"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "List all listeners",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create the gateway listener.<br/><br/>Note: For listener types not supported by a gateway, this API returns `400: BAD_REQUEST`.",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "udp_listener": {
                    "value": {
                      "name": "udp-def",
                      "type": "udp",
                      "bind": "22212",
                      "udp_options": {
                        "buffer": "10KB",
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "sndbuf": "10KB",
                        "active_n": 100
                      }
                    },
                    "summary": "A simple UDP listener example"
                  },
                  "dtls_listener": {
                    "value": {
                      "name": "dtls-def",
                      "type": "dtls",
                      "bind": "22213",
                      "udp_options": {
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "dtls_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "access_rules": [
                        "allow all"
                      ],
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple DTLS listener example"
                  },
                  "ssl_listener": {
                    "value": {
                      "name": "ssl-def",
                      "type": "ssl",
                      "bind": "22211",
                      "tcp_options": {
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "ssl_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2",
                          "tlsv1.1",
                          "tlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "acceptors": 16,
                      "access_rules": [
                        "allow all"
                      ],
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple SSL listener example"
                  },
                  "tcp_listener": {
                    "value": {
                      "name": "tcp-def",
                      "type": "tcp",
                      "bind": "22210",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple TCP listener example"
                  },
                  "ws_listener": {
                    "value": {
                      "name": "ws-def",
                      "type": "ws",
                      "bind": "33043",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "websocket": {
                        "path": "/ocpp",
                        "compress": false,
                        "fail_if_no_subprotocol": true,
                        "supported_subprotocols": "ocpp1.6",
                        "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                        "check_origin_enable": false,
                        "piggyback": "single"
                      },
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple WebSocket listener example"
                  },
                  "wss_listener": {
                    "value": {
                      "name": "ws-ssl-def",
                      "type": "wss",
                      "bind": "33053",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "ssl_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2",
                          "tlsv1.1",
                          "tlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "websocket": {
                        "path": "/ocpp",
                        "compress": false,
                        "fail_if_no_subprotocol": true,
                        "supported_subprotocols": "ocpp1.6",
                        "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                        "check_origin_enable": false,
                        "piggyback": "single"
                      },
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple WebSocket/TLS listener example"
                  },
                  "dtls_listener_with_psk_ciphers": {
                    "value": {
                      "name": "dtls-psk",
                      "type": "dtls",
                      "bind": "22214",
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "dtls_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ],
                        "fail_if_no_peer_cert": false,
                        "user_lookup_fun": "emqx_tls_psk:lookup"
                      },
                      "max_conn_rate": 1000
                    },
                    "summary": "A DTLS listener with PSK example"
                  },
                  "lisetner_with_authn": {
                    "value": {
                      "name": "tcp-with-authn",
                      "type": "tcp",
                      "bind": "22215",
                      "authentication": {
                        "mechanism": "password_based",
                        "backend": "built_in_database",
                        "password_hash_algorithm": {
                          "name": "sha256"
                        },
                        "user_id_type": "username"
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A TCP listener with authentication example"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.wss_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ws_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Add listener",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "udp_listener": {
                  "value": {
                    "name": "udp-def",
                    "type": "udp",
                    "bind": "22212",
                    "udp_options": {
                      "buffer": "10KB",
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "sndbuf": "10KB",
                      "active_n": 100
                    }
                  },
                  "summary": "A simple UDP listener example"
                },
                "dtls_listener": {
                  "value": {
                    "name": "dtls-def",
                    "type": "dtls",
                    "bind": "22213",
                    "udp_options": {
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "dtls_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "access_rules": [
                      "allow all"
                    ],
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple DTLS listener example"
                },
                "ssl_listener": {
                  "value": {
                    "name": "ssl-def",
                    "type": "ssl",
                    "bind": "22211",
                    "tcp_options": {
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "ssl_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2",
                        "tlsv1.1",
                        "tlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "acceptors": 16,
                    "access_rules": [
                      "allow all"
                    ],
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple SSL listener example"
                },
                "tcp_listener": {
                  "value": {
                    "name": "tcp-def",
                    "type": "tcp",
                    "bind": "22210",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple TCP listener example"
                },
                "ws_listener": {
                  "value": {
                    "name": "ws-def",
                    "type": "ws",
                    "bind": "33043",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "websocket": {
                      "path": "/ocpp",
                      "compress": false,
                      "fail_if_no_subprotocol": true,
                      "supported_subprotocols": "ocpp1.6",
                      "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                      "check_origin_enable": false,
                      "piggyback": "single"
                    },
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple WebSocket listener example"
                },
                "wss_listener": {
                  "value": {
                    "name": "ws-ssl-def",
                    "type": "wss",
                    "bind": "33053",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "ssl_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2",
                        "tlsv1.1",
                        "tlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "websocket": {
                      "path": "/ocpp",
                      "compress": false,
                      "fail_if_no_subprotocol": true,
                      "supported_subprotocols": "ocpp1.6",
                      "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                      "check_origin_enable": false,
                      "piggyback": "single"
                    },
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple WebSocket/TLS listener example"
                },
                "dtls_listener_with_psk_ciphers": {
                  "value": {
                    "name": "dtls-psk",
                    "type": "dtls",
                    "bind": "22214",
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "dtls_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ],
                      "fail_if_no_peer_cert": false,
                      "user_lookup_fun": "emqx_tls_psk:lookup"
                    },
                    "max_conn_rate": 1000
                  },
                  "summary": "A DTLS listener with PSK example"
                },
                "lisetner_with_authn": {
                  "value": {
                    "name": "tcp-with-authn",
                    "type": "tcp",
                    "bind": "22215",
                    "authentication": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256"
                      },
                      "user_id_type": "username"
                    },
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A TCP listener with authentication example"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.wss_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.ws_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/plugins/{name}/config": {
      "get": {
        "description": "Get plugin config. Config schema is defined by user's schema.avsc file.<br/>",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Plugin Config Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Plugin Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get plugin config",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update plugin config. Config schema defined by user's schema.avsc file.<br/>",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          }
        ],
        "responses": {
          "204": {
            "description": "Config updated successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_CONFIG",
                        "UNEXPECTED_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update plugin config failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Plugin Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update plugin config",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/sys_topics": {
      "get": {
        "description": "Get the sub-configurations under *sys_topics*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "System topics configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.sys_topics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "config not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get the sub-configurations under *sys_topics*",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *sys_topics*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "System topics configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.sys_topics"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update the sub-configurations under *sys_topics*",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx.sys_topics"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/kickout/bulk": {
      "post": {
        "description": "Kick out a batch of client by client IDs",
        "tags": [
          "Clients"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Kick out clients successfully"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": [
                "emqx_clientid_985bb09d",
                "emqx_clientid_211cc01c"
              ],
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/connectors_probe": {
      "post": {
        "description": "Test creating a new connector.",
        "tags": [
          "Connectors"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Test connector OK"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TEST_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "connector test failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Test creating connector",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "influxdb_api_v2": {
                  "value": {
                    "name": "influxdb_connector",
                    "type": "influxdb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "org": "examlpe_org",
                      "token": "example_token",
                      "bucket": "example_bucket",
                      "influxdb_type": "influxdb_api_v2"
                    }
                  },
                  "summary": "InfluxDB HTTP API V2 Connector"
                },
                "http": {
                  "value": {
                    "name": "my_http_connector",
                    "type": "http",
                    "connect_timeout": "15s",
                    "pool_size": 1,
                    "enable": true,
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://localhost:8080/api/v1",
                    "pool_type": "hash",
                    "enable_pipelining": 100
                  },
                  "summary": "HTTP Connector"
                },
                "confluent_producer": {
                  "value": {
                    "name": "my_confluent_producer_connector",
                    "type": "confluent_producer",
                    "ssl": {
                      "verify": "verify_none",
                      "enable": true,
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ],
                      "server_name_indication": "auto"
                    },
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "xyz.sa-east1.gcp.confluent.cloud:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Confluent Connector"
                },
                "iotdb": {
                  "value": {
                    "name": "iotdb_connector",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example iotdb connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "base_url": "http://iotdb.local:18080/",
                    "pool_type": "random",
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.3.x"
                  },
                  "summary": "Apache IoTDB Connector"
                },
                "couchbase": {
                  "value": {
                    "name": "my_connector",
                    "type": "couchbase",
                    "ssl": {
                      "enable": true
                    },
                    "description": "My connector",
                    "server": "couchbase:8093",
                    "enable": true,
                    "password": "******",
                    "username": "admin",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    }
                  },
                  "summary": "Couchbase Connector"
                },
                "datalayers": {
                  "value": {
                    "name": "datalayers_connector",
                    "type": "datalayers",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example datalayers connector",
                    "server": "127.0.0.1:8361",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database"
                    }
                  },
                  "summary": "Datalayers Connector"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "name": "my_azure_event_hub_producer_connector",
                    "type": "azure_event_hub_producer",
                    "ssl": {
                      "verify": "verify_none",
                      "enable": true,
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ],
                      "server_name_indication": "auto"
                    },
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Azure Event Hub Connector"
                },
                "kafka_producer": {
                  "value": {
                    "name": "my_kafka_producer_connector",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Kafka Producer Connector"
                },
                "kinesis": {
                  "value": {
                    "name": "kinesis_connector",
                    "type": "kinesis",
                    "description": "My example kinesis connector",
                    "aws_access_key_id": "your_access_key",
                    "aws_secret_access_key": "aws_secret_key",
                    "endpoint": "http://localhost:4566",
                    "max_retries": 2,
                    "pool_size": 8
                  },
                  "summary": "Kinesis Connector"
                },
                "syskeeper_proxy": {
                  "value": {
                    "name": "syskeeper_proxy",
                    "type": "syskeeper_proxy",
                    "listen": "127.0.0.1:9092",
                    "enable": true,
                    "acceptors": 16,
                    "handshake_timeout": "16s"
                  },
                  "summary": "Syskeeper Proxy Connector"
                },
                "pgsql": {
                  "value": {
                    "name": "my_pgsql_connector",
                    "type": "pgsql",
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "PostgreSQL Connector"
                },
                "mysql": {
                  "value": {
                    "name": "mysql_connector",
                    "type": "mysql",
                    "description": "My example mysql connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  "summary": "MySQL Connector"
                },
                "rabbitmq": {
                  "value": {
                    "timeout": "5s",
                    "name": "rabbitmq_connector",
                    "port": 5672,
                    "type": "rabbitmq",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example rabbitmq connector",
                    "pool_size": 8,
                    "server": "127.0.0.1",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "heartbeat": "30s",
                    "virtual_host": "/"
                  },
                  "summary": "Rabbitmq Connector"
                },
                "dynamo": {
                  "value": {
                    "name": "dynamo_connector",
                    "type": "dynamo",
                    "description": "My example dynamo connector",
                    "aws_access_key_id": "root",
                    "aws_secret_access_key": "******",
                    "enable": true,
                    "pool_size": 8,
                    "region": "us-west-2",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "url": "http://127.0.0.1:8000"
                  },
                  "summary": "DynamoDB Connector"
                },
                "tdengine": {
                  "value": {
                    "name": "tdengine_connector",
                    "type": "tdengine",
                    "description": "My example tdengine connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root"
                  },
                  "summary": "TDengine Connector"
                },
                "mongodb_single": {
                  "value": {
                    "name": "mongodb_single_connector",
                    "type": "mongodb_single",
                    "description": "My example mongodb_single connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Standalone Connector"
                },
                "greptimedb": {
                  "value": {
                    "name": "demo",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example greptimedb connector",
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "password": "******",
                    "username": "example_username",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db"
                  },
                  "summary": "GreptimeDB Connector"
                },
                "opents": {
                  "value": {
                    "name": "opents_connector",
                    "type": "opents",
                    "description": "My example opents connector",
                    "pool_size": 8,
                    "server": "http://localhost:4242/",
                    "enable": true
                  },
                  "summary": "OpenTSDB Connector"
                },
                "abs": {
                  "value": {
                    "name": "my_connector",
                    "type": "azure_blob_storage",
                    "description": "My connector",
                    "enable": true,
                    "account_key": "******",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    },
                    "account_name": "my_account_name"
                  },
                  "summary": "Azure Blob Storage Connector"
                },
                "mongodb_sharded": {
                  "value": {
                    "name": "mongodb_sharded_connector",
                    "type": "mongodb_sharded",
                    "description": "My example mongodb_sharded connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Sharded Connector"
                },
                "mongodb_rs": {
                  "value": {
                    "name": "mongodb_rs_connector",
                    "type": "mongodb_rs",
                    "description": "My example mongodb_rs connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Replica Set Connector"
                },
                "redis_single_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "redis",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis single connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "server": "127.0.0.1:6379",
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "redis_type": "single"
                    }
                  },
                  "summary": "Redis Single Producer Connector"
                },
                "oracle": {
                  "value": {
                    "name": "oracle_connector",
                    "type": "oracle",
                    "description": "My example oracle connector",
                    "password": "oracle",
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "server": "127.0.0.1:1521",
                    "service_name": "XE",
                    "sid": "XE",
                    "username": "system"
                  },
                  "summary": "Oracle Connector"
                },
                "snowflake": {
                  "value": {
                    "name": "my_connector",
                    "type": "snowflake",
                    "description": "My connector",
                    "pool_size": 8,
                    "server": "myorg-myaccount.snowflakecomputing.com",
                    "enable": true,
                    "password": "******",
                    "username": "admin",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    },
                    "account": "myorg-myaccount",
                    "dsn": "snowflake"
                  },
                  "summary": "Snowflake Connector"
                },
                "hstreamdb": {
                  "value": {
                    "name": "hstreamdb_connector",
                    "type": "hstreamdb",
                    "description": "My example hstreamdb connector",
                    "grpc_timeout": "30s",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "ssl": {
                      "enable": false,
                      "verify": "verify_peer"
                    },
                    "url": "http://127.0.0.1:6570"
                  },
                  "summary": "HStreamDB Connector"
                },
                "influxdb_api_v1": {
                  "value": {
                    "name": "influxdb_connector",
                    "type": "influxdb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database",
                      "influxdb_type": "influxdb_api_v1"
                    }
                  },
                  "summary": "InfluxDB HTTP API V1 Connector"
                },
                "s3_aws": {
                  "value": {
                    "name": "my_s3_connector",
                    "port": 443,
                    "type": "s3",
                    "host": "s3.eu-east-1.amazonaws.com",
                    "description": "My S3 connector",
                    "enable": true,
                    "transport_options": {
                      "ssl": {
                        "verify": "verify_peer",
                        "enable": true
                      },
                      "connect_timeout": "1s",
                      "pool_size": 4,
                      "max_retries": 1,
                      "request_timeout": "60s",
                      "enable_pipelining": 1
                    },
                    "secret_access_key": "SECRET",
                    "access_key_id": "ACCESS"
                  },
                  "summary": "S3 Connector"
                },
                "cassandra": {
                  "value": {
                    "name": "cassandra_connector",
                    "type": "cassandra",
                    "description": "My example cassandra connector",
                    "pool_size": 8,
                    "password": "******",
                    "username": "root",
                    "servers": "127.0.0.1:9042",
                    "keyspace": "mqtt"
                  },
                  "summary": "Cassandra Connector"
                },
                "gcp_pubsub_consumer": {
                  "value": {
                    "name": "my_connector",
                    "type": "gcp_pubsub_producer",
                    "description": "my connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Consumer Connector"
                },
                "clickhouse": {
                  "value": {
                    "name": "clickhouse_connector",
                    "type": "clickhouse",
                    "description": "My example clickhouse connector",
                    "pool_size": 8,
                    "password": "******",
                    "url": "http://localhost:8123",
                    "username": "default",
                    "database": "mqtt"
                  },
                  "summary": "ClickHouse Connector"
                },
                "sqlserver": {
                  "value": {
                    "driver": "ms-sql",
                    "name": "sqlserver_connector",
                    "type": "sqlserver",
                    "description": "My example sqlserver connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  "summary": "Microsoft SQL Server Connector"
                },
                "redis_cluster_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "redis",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis cluster connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "redis_type": "cluster"
                    }
                  },
                  "summary": "Redis Cluster Producer Connector"
                },
                "matrix": {
                  "value": {
                    "name": "my_matrix_connector",
                    "type": "matrix",
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "Matrix Connector"
                },
                "kafka_consumer": {
                  "value": {
                    "name": "my_connector",
                    "type": "kafka_consumer",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "bootstrap_hosts": "kafka.emqx.net:9092"
                  },
                  "summary": "Kafka Consumer Connector"
                },
                "rocketmq": {
                  "value": {
                    "name": "rocketmq_connector",
                    "type": "rocketmq",
                    "description": "My example rocketmq connector",
                    "enable": true,
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_after_created": true,
                      "start_timeout": "5s"
                    },
                    "servers": "127.0.0.1:9876"
                  },
                  "summary": "RocketMQ Connector"
                },
                "pulsar": {
                  "value": {
                    "name": "pulsar_connector",
                    "type": "pulsar",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": "none",
                    "description": "My example pulsar connector",
                    "connect_timeout": "5s",
                    "enable": true,
                    "servers": "pulsar://127.0.0.1:6650"
                  },
                  "summary": "Pulsar Connector"
                },
                "syskeeper_forwarder": {
                  "value": {
                    "name": "syskeeper_forwarder",
                    "type": "syskeeper_forwarder",
                    "pool_size": 16,
                    "server": "127.0.0.1:9092",
                    "enable": true,
                    "ack_timeout": "10s",
                    "ack_mode": "no_ack"
                  },
                  "summary": "Syskeeper Forwarder Connector"
                },
                "elasticsearch": {
                  "value": {
                    "name": "elasticsearch_connector",
                    "type": "elasticsearch",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example elasticsearch connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "server": "127.0.0.1:9200",
                    "enable": true,
                    "pool_type": "random",
                    "enable_pipelining": 100
                  },
                  "summary": "Elastic Search Connector"
                },
                "gcp_pubsub_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "gcp_pubsub_producer",
                    "connect_timeout": "10s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "resource_opts": {
                      "request_ttl": "60s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Producer Connector"
                },
                "timescale": {
                  "value": {
                    "name": "my_timescale_connector",
                    "type": "timescale",
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "Timescale Connector"
                },
                "redis_sentinel_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "redis",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis sentinel connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "sentinel": "myredismaster",
                      "redis_type": "sentinel"
                    }
                  },
                  "summary": "Redis Sentinel Producer Connector"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_timescale.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_producer.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/elasticsearch.post"
                  },
                  {
                    "$ref": "#/components/schemas/connector_azure_blob_storage.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/syskeeper_forwarder.post"
                  },
                  {
                    "$ref": "#/components/schemas/pulsar.post"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/kafka_consumer.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_consumer.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_snowflake.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/opents_connector.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_s3.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/tdengine_connector.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/redis.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/rabbitmq.post"
                  },
                  {
                    "$ref": "#/components/schemas/connector_mqtt.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_postgres.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_syskeeper_proxy.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_datalayers.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_couchbase.post_connector"
                  },
                  {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/iotdb.post_thrift"
                      },
                      {
                        "$ref": "#/components/schemas/iotdb.post_restapi"
                      }
                    ]
                  },
                  {
                    "$ref": "#/components/schemas/confluent.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.post_connector"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_validations/reorder": {
      "post": {
        "description": "Reorder of all validations",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "not_found": {
                      "type": "array",
                      "description": "Validations not found",
                      "items": {
                        "type": "string"
                      }
                    },
                    "not_reordered": {
                      "type": "array",
                      "description": "Validations not referenced in input",
                      "items": {
                        "type": "string"
                      }
                    },
                    "duplicated": {
                      "type": "array",
                      "description": "Duplicated validations in input",
                      "items": {
                        "type": "string"
                      }
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Reorder all validations",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "reorder": {
                  "value": {
                    "order": [
                      "bar",
                      "foo",
                      "baz"
                    ]
                  },
                  "summary": "Update"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/schema_validation_http_api.reorder"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes/{node}/sources/{id}/{operation}": {
      "post": {
        "description": "Start bridge on a specific node.",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "The node name, e.g. 'emqx@127.0.0.1'.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "Operation can be one of: 'start'.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start"
              ]
            },
            "example": "start"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service or bridge not enabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge or node not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Manually start a bridge on a given node",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/built_in_database/rules/clients": {
      "get": {
        "description": "Show the list of rules for clients",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "in": "query",
            "name": "like_clientid",
            "description": "Fuzzy search `clientid` as substring",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "password_based:built_in_database": {
                    "value": {
                      "data": [
                        {
                          "rules": [
                            {
                              "action": "publish",
                              "permission": "allow",
                              "topic": "test/topic/1"
                            },
                            {
                              "action": "subscribe",
                              "permission": "allow",
                              "topic": "test/topic/2"
                            },
                            {
                              "action": "all",
                              "permission": "deny",
                              "topic": "eq test/#"
                            },
                            {
                              "action": "publish",
                              "retain": "true",
                              "permission": "allow",
                              "topic": "test/topic/3",
                              "qos": [
                                "1"
                              ]
                            },
                            {
                              "action": "publish",
                              "retain": "all",
                              "permission": "allow",
                              "topic": "test/topic/4",
                              "qos": [
                                "0",
                                "1",
                                "2"
                              ]
                            }
                          ],
                          "clientid": "client1"
                        }
                      ],
                      "meta": {
                        "count": 1,
                        "limit": 100,
                        "page": 1
                      }
                    },
                    "summary": "ClientID"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.clientid_response_data"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Add new rule for 'clientid'",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Created"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad clientid or bad rule schema"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "password_based:built_in_database": {
                  "value": [
                    {
                      "rules": [
                        {
                          "action": "publish",
                          "permission": "allow",
                          "topic": "test/topic/1"
                        },
                        {
                          "action": "subscribe",
                          "permission": "allow",
                          "topic": "test/topic/2"
                        },
                        {
                          "action": "all",
                          "permission": "deny",
                          "topic": "eq test/#"
                        },
                        {
                          "action": "publish",
                          "retain": "true",
                          "permission": "allow",
                          "topic": "test/topic/3",
                          "qos": [
                            "1"
                          ]
                        },
                        {
                          "action": "publish",
                          "retain": "all",
                          "permission": "allow",
                          "topic": "test/topic/4",
                          "qos": [
                            "0",
                            "1",
                            "2"
                          ]
                        }
                      ],
                      "clientid": "client1"
                    }
                  ],
                  "summary": "ClientID"
                }
              },
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_clientid"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_registry": {
      "get": {
        "description": "List all registered schemas",
        "tags": [
          "Schema Registry"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "sample": {
                    "value": [
                      {
                        "name": "my_avro_schema",
                        "type": "avro",
                        "description": "My Avro Schema",
                        "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                      }
                    ]
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/schema_registry.get_json"
                      },
                      {
                        "$ref": "#/components/schemas/schema_registry.get_protobuf"
                      },
                      {
                        "$ref": "#/components/schemas/schema_registry.get_avro"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "summary": "List registered schemas",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Register a new schema",
        "tags": [
          "Schema Registry"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "avro_schema": {
                    "value": {
                      "name": "my_avro_schema",
                      "type": "avro",
                      "description": "My Avro Schema",
                      "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                    },
                    "summary": "Avro"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/schema_registry.get_json"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.get_protobuf"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.get_avro"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Schema already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Register a new schema",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "avro_schema": {
                  "value": {
                    "name": "my_avro_schema",
                    "type": "avro",
                    "description": "My Avro Schema",
                    "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                  },
                  "summary": "Avro"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/schema_registry.get_json"
                  },
                  {
                    "$ref": "#/components/schemas/schema_registry.get_protobuf"
                  },
                  {
                    "$ref": "#/components/schemas/schema_registry.get_avro"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sso": {
      "get": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dashboard_sso.backend_status"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/delayed/messages/{node}/{msgid}": {
      "get": {
        "description": "View delayed message",
        "tags": [
          "MQTT"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "The node where message from",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "msgid",
            "description": "Delayed Message ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_delayed_api.message_without_payload"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "MESSAGE_ID_SCHEMA_ERROR",
                        "INVALID_NODE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Message ID format"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "MESSAGE_ID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete delayed message",
        "tags": [
          "MQTT"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "The node where message from",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "msgid",
            "description": "Delayed Message ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete delayed message success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "MESSAGE_ID_SCHEMA_ERROR",
                        "INVALID_NODE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Message ID format"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "MESSAGE_ID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Message ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/monitor_current/nodes/{node}": {
      "get": {
        "description": "Node monitor (statistics) data, e.g. number of connections and connection rate on the specified node.",
        "tags": [
          "Metrics"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "EMQX node name.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_dashboard_monitor_api.sampler_current_node"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication/{id}/users": {
      "get": {
        "description": "List users in authenticator in global authentication chain.",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Authenticator ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "in": "query",
            "name": "like_user_id",
            "description": "Fuzzy search user_id (username or clientid).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "is_superuser",
            "description": "Is superuser",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "user_id": "user1"
                    },
                    {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  ],
                  "meta": {
                    "count": 300,
                    "limit": 20,
                    "page": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_users"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create users for authenticator in global authentication chain.",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Authenticator ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "value": {
                    "password": "******",
                    "user_id": "user1"
                  },
                  "summary": "Regular user"
                },
                "super_user": {
                  "value": {
                    "password": "******",
                    "is_superuser": true,
                    "user_id": "user2"
                  },
                  "summary": "Superuser"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_create"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sessions_count": {
      "get": {
        "description": "Get the total number of sessions in the cluster.<br/>By default, it includes only those sessions that have not expired.<br/>If the `broker.session_history_retain` config is set to a duration greater than 0s,<br/>this count will also include sessions that expired within the specified retain time.<br/>By specifying the `since` parameter, it can return the number of sessions that have expired within the specified time.",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "since",
            "description": "Include sessions expired after this time (UNIX Epoch in seconds precision)",
            "required": false,
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            },
            "example": 1705391625
          }
        ],
        "responses": {
          "200": {
            "description": "Number of sessions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node {name} cannot handle this request."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sso/oidc/callback": {
      "get": {
        "description": "The callback path for the OIDC authorization server.",
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "Dashboard Auth Token"
                    },
                    "version": {
                      "type": "string",
                      "description": "EMQX Version",
                      "example": "5.0.0"
                    },
                    "license": {
                      "properties": {
                        "edition": {
                          "type": "string",
                          "enum": [
                            "opensource",
                            "enterprise"
                          ],
                          "description": "EMQX License. opensource or enterprise",
                          "example": "opensource"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_USERNAME_OR_PWD"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Login failed. Bad username or password"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BACKEND_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Backend not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/sources": {
      "get": {
        "description": "List all created bridges.",
        "tags": [
          "Sources"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "status": "connected",
                    "description": "my source",
                    "enable": true,
                    "parameters": {
                      "topic": "my-topic",
                      "pull_max_messages": 100
                    },
                    "connector": "my_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "status": "connected",
                    "parameters": {
                      "topic": "mytopic"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "mqtt_source",
                    "status": "connected",
                    "type": "mqtt",
                    "description": "My example mqtt source",
                    "enable": true,
                    "parameters": {
                      "topic": "remote/topic",
                      "qos": 1
                    },
                    "connector": "mqtt_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "rabbitmq_source",
                    "status": "connected",
                    "type": "rabbitmq",
                    "description": "My example rabbitmq source",
                    "enable": true,
                    "parameters": {
                      "queue": "test_queue",
                      "no_ack": true
                    },
                    "connector": "rabbitmq_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/bridge_rabbitmq.get_source"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mqtt_publisher.get_source"
                      },
                      {
                        "$ref": "#/components/schemas/kafka_consumer.get_source"
                      },
                      {
                        "$ref": "#/components/schemas/gcp_pubsub_consumer.get_source"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "summary": "List sources",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create a new bridge by type and name.",
        "tags": [
          "Sources"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "gcp_pubsub_consumer": {
                    "value": {
                      "status": "connected",
                      "description": "my source",
                      "enable": true,
                      "parameters": {
                        "topic": "my-topic",
                        "pull_max_messages": 100
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "GCP PubSub Consumer Source"
                  },
                  "kafka_consumer": {
                    "value": {
                      "status": "connected",
                      "parameters": {
                        "topic": "mytopic"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Kafka Consumer Source"
                  },
                  "mqtt": {
                    "value": {
                      "name": "mqtt_source",
                      "status": "connected",
                      "type": "mqtt",
                      "description": "My example mqtt source",
                      "enable": true,
                      "parameters": {
                        "topic": "remote/topic",
                        "qos": 1
                      },
                      "connector": "mqtt_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MQTT Subscriber Source"
                  },
                  "rabbitmq": {
                    "value": {
                      "name": "rabbitmq_source",
                      "status": "connected",
                      "type": "rabbitmq",
                      "description": "My example rabbitmq source",
                      "enable": true,
                      "parameters": {
                        "queue": "test_queue",
                        "no_ack": true
                      },
                      "connector": "rabbitmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "RabbitMQ Subscriber Source"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt_publisher.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/kafka_consumer.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_consumer.get_source"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Source already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Create source",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "gcp_pubsub_consumer": {
                  "value": {
                    "name": "my_action",
                    "type": "gcp_pubsub_consumer",
                    "description": "my source",
                    "enable": true,
                    "parameters": {
                      "topic": "my-topic",
                      "pull_max_messages": 100
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "GCP PubSub Consumer Source"
                },
                "kafka_consumer": {
                  "value": {
                    "name": "my_source",
                    "type": "kafka_consumer",
                    "parameters": {
                      "topic": "mytopic"
                    },
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Kafka Consumer Source"
                },
                "mqtt": {
                  "value": {
                    "name": "mqtt_source",
                    "type": "mqtt",
                    "description": "My example mqtt source",
                    "enable": true,
                    "parameters": {
                      "topic": "remote/topic",
                      "qos": 1
                    },
                    "connector": "mqtt_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MQTT Subscriber Source"
                },
                "rabbitmq": {
                  "value": {
                    "name": "rabbitmq_source",
                    "type": "rabbitmq",
                    "description": "My example rabbitmq source",
                    "enable": true,
                    "parameters": {
                      "queue": "test_queue",
                      "no_ack": true
                    },
                    "connector": "rabbitmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "RabbitMQ Subscriber Source"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.post_source"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt_publisher.post_source"
                  },
                  {
                    "$ref": "#/components/schemas/kafka_consumer.post_source"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_consumer.post_source"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/actions/{id}/enable/{enable}": {
      "put": {
        "description": "Enable or Disable bridge on all nodes in the cluster.",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "path",
            "name": "enable",
            "description": "Whether to enable this bridge.",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Enable or disable bridge",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/prometheus/data_integration": {
      "get": {
        "description": "Get Prometheus Metrics for Data Integration",
        "tags": [
          "Monitor"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_prometheus_api.mode"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Prometheus Data.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/data/files/{filename}": {
      "get": {
        "description": "Download a data backup file",
        "tags": [
          "Data Backup"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "description": "Data backup file name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "node",
            "description": "Node name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "binary"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Backup file not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a data backup file",
        "tags": [
          "Data Backup"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "description": "Data backup file name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "node",
            "description": "Node name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Backup file not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster": {
      "get": {
        "description": "Get cluster info",
        "tags": [
          "Cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Cluster name"
                    },
                    "nodes": {
                      "type": "array",
                      "description": "Node name",
                      "items": {
                        "type": "string"
                      }
                    },
                    "self": {
                      "type": "string",
                      "description": "Self node name"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/plugins/{name}/{action}": {
      "put": {
        "description": "start/stop a installed plugin.<br/>- **start**: start the plugin.<br/>- **stop**: stop the plugin.<br/>",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          },
          {
            "in": "path",
            "name": "action",
            "description": "Action",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start",
                "stop"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Trigger action successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Plugin Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Trigger action on an installed plugin",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sources/{id}": {
      "get": {
        "description": "Get a bridge by id.",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "gcp_pubsub_consumer": {
                    "value": {
                      "status": "connected",
                      "description": "my source",
                      "enable": true,
                      "parameters": {
                        "topic": "my-topic",
                        "pull_max_messages": 100
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "GCP PubSub Consumer Source"
                  },
                  "kafka_consumer": {
                    "value": {
                      "status": "connected",
                      "parameters": {
                        "topic": "mytopic"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Kafka Consumer Source"
                  },
                  "mqtt": {
                    "value": {
                      "name": "mqtt_source",
                      "status": "connected",
                      "type": "mqtt",
                      "description": "My example mqtt source",
                      "enable": true,
                      "parameters": {
                        "topic": "remote/topic",
                        "qos": 1
                      },
                      "connector": "mqtt_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MQTT Subscriber Source"
                  },
                  "rabbitmq": {
                    "value": {
                      "name": "rabbitmq_source",
                      "status": "connected",
                      "type": "rabbitmq",
                      "description": "My example rabbitmq source",
                      "enable": true,
                      "parameters": {
                        "queue": "test_queue",
                        "no_ack": true
                      },
                      "connector": "rabbitmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "RabbitMQ Subscriber Source"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt_publisher.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/kafka_consumer.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_consumer.get_source"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Source not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get source",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update a bridge by id.",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "gcp_pubsub_consumer": {
                    "value": {
                      "status": "connected",
                      "description": "my source",
                      "enable": true,
                      "parameters": {
                        "topic": "my-topic",
                        "pull_max_messages": 100
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "GCP PubSub Consumer Source"
                  },
                  "kafka_consumer": {
                    "value": {
                      "status": "connected",
                      "parameters": {
                        "topic": "mytopic"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Kafka Consumer Source"
                  },
                  "mqtt": {
                    "value": {
                      "name": "mqtt_source",
                      "status": "connected",
                      "type": "mqtt",
                      "description": "My example mqtt source",
                      "enable": true,
                      "parameters": {
                        "topic": "remote/topic",
                        "qos": 1
                      },
                      "connector": "mqtt_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MQTT Subscriber Source"
                  },
                  "rabbitmq": {
                    "value": {
                      "name": "rabbitmq_source",
                      "status": "connected",
                      "type": "rabbitmq",
                      "description": "My example rabbitmq source",
                      "enable": true,
                      "parameters": {
                        "queue": "test_queue",
                        "no_ack": true
                      },
                      "connector": "rabbitmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "RabbitMQ Subscriber Source"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt_publisher.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/kafka_consumer.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_consumer.get_source"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update source failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Source not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update source",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "gcp_pubsub_consumer": {
                  "value": {
                    "description": "my source",
                    "enable": true,
                    "parameters": {
                      "topic": "my-topic",
                      "pull_max_messages": 100
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "GCP PubSub Consumer Source"
                },
                "kafka_consumer": {
                  "value": {
                    "parameters": {
                      "topic": "mytopic"
                    },
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Kafka Consumer Source"
                },
                "mqtt": {
                  "value": {
                    "description": "My example mqtt source",
                    "enable": true,
                    "parameters": {
                      "topic": "remote/topic",
                      "qos": 1
                    },
                    "connector": "mqtt_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MQTT Subscriber Source"
                },
                "rabbitmq": {
                  "value": {
                    "description": "My example rabbitmq source",
                    "enable": true,
                    "parameters": {
                      "queue": "test_queue",
                      "no_ack": true
                    },
                    "connector": "rabbitmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "RabbitMQ Subscriber Source"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.put_source"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt_publisher.put_source"
                  },
                  {
                    "$ref": "#/components/schemas/kafka_consumer.put_source"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_consumer.put_source"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a bridge by id.",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "query",
            "name": "also_delete_dep_actions",
            "description": "Whether to cascade delete dependent actions.",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Source deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "Dependent Rule IDs",
                      "items": {
                        "type": "string"
                      }
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cannot delete bridge while active rules are defined for this source"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Source not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete source",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/data/export": {
      "post": {
        "description": "Export a data backup file",
        "tags": [
          "Data Backup"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "node": "emqx@127.0.0.1",
                  "size": 22740,
                  "filename": "emqx-export-2023-11-23-19-13-19.043.tar.gz",
                  "created_at": "2023-11-23T19:13:19+02:00",
                  "created_at_sec": 1700759599
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_data_backup.backup_file_info"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/source_types": {
      "get": {
        "description": "Lists the available source types.",
        "tags": [
          "Sources"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "types": {
                    "value": [
                      "rabbitmq",
                      "kafka_consumer",
                      "gcp_pubsub_consumer",
                      "mqtt"
                    ],
                    "summary": "Source types"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "rabbitmq",
                      "kafka_consumer",
                      "gcp_pubsub_consumer",
                      "mqtt"
                    ]
                  }
                }
              }
            }
          }
        },
        "summary": "List available source types",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gcp_devices": {
      "get": {
        "description": "List all devices imported from GCP IoT Core",
        "tags": [
          "GCP Devices"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_gcp_device_api.gcp_device_all_info"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Import authentication and config data for devices from GCP IoT Core",
        "tags": [
          "GCP Devices"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_gcp_device_api.import_result"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_gcp_device_api.gcp_exported_device"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/clients/{clientid}": {
      "get": {
        "description": "Get the gateway client information",
        "tags": [
          "Gateway Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "lwm2m_client": {
                    "value": {
                      "lifetime": 86400,
                      "recv_oct": 56,
                      "inflight_cnt": 0,
                      "proto_ver": "1.0",
                      "send_msg": 0,
                      "endpoint_name": "urn:imei:154928475237123",
                      "clean_start": true,
                      "proto_name": "LwM2M",
                      "subscriptions_cnt": 0,
                      "keepalive": 0,
                      "username": "guest",
                      "node": "emqx@127.0.0.1",
                      "send_cnt": 1,
                      "awaiting_rel_max": "infinity",
                      "recv_msg": 0,
                      "connected_at": "2021-12-07T10:44:02.721+08:00",
                      "awaiting_rel_cnt": 0,
                      "send_oct": 61,
                      "heap_size": 4185,
                      "inflight_max": "infinity",
                      "recv_pkt": 1,
                      "port": 50675,
                      "created_at": "2021-12-07T10:44:02.721+08:00",
                      "mqueue_len": 0,
                      "expiry_interval": 0,
                      "mailbox_len": 0,
                      "mqueue_max": "infinity",
                      "clientid": "MzAyMzEzNTUwNzk1NDA1MzYyMzIwNzUxNjQwMTY1NzQ0NjE",
                      "ip_address": "127.0.0.1",
                      "send_pkt": 1,
                      "subscriptions_max": "infinity",
                      "is_bridge": false,
                      "disconnected_at": null,
                      "connected": true,
                      "reductions": 72022,
                      "mqueue_dropped": 0,
                      "recv_cnt": 1
                    },
                    "summary": "LwM2M client info"
                  },
                  "general_client": {
                    "value": {
                      "recv_oct": 56,
                      "inflight_cnt": 0,
                      "proto_ver": "1.0",
                      "send_msg": 0,
                      "clean_start": true,
                      "proto_name": "STOMP",
                      "subscriptions_cnt": 0,
                      "keepalive": 0,
                      "username": "guest",
                      "node": "emqx@127.0.0.1",
                      "send_cnt": 1,
                      "awaiting_rel_max": "infinity",
                      "recv_msg": 0,
                      "connected_at": "2021-12-07T10:44:02.721+08:00",
                      "awaiting_rel_cnt": 0,
                      "send_oct": 61,
                      "heap_size": 4185,
                      "inflight_max": "infinity",
                      "recv_pkt": 1,
                      "port": 50675,
                      "created_at": "2021-12-07T10:44:02.721+08:00",
                      "mqueue_len": 0,
                      "expiry_interval": 0,
                      "mailbox_len": 0,
                      "mqueue_max": "infinity",
                      "clientid": "MzAyMzEzNTUwNzk1NDA1MzYyMzIwNzUxNjQwMTY1NzQ0NjE",
                      "ip_address": "127.0.0.1",
                      "send_pkt": 1,
                      "subscriptions_max": "infinity",
                      "is_bridge": false,
                      "disconnected_at": null,
                      "connected": true,
                      "reductions": 72022,
                      "mqueue_dropped": 0,
                      "recv_cnt": 1
                    },
                    "summary": "General client info"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api_clients.exproto_client"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api_clients.lwm2m_client"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api_clients.coap_client"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api_clients.mqttsn_client"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api_clients.stomp_client"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get client info",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Kick out the gateway client",
        "tags": [
          "Gateway Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Kicked"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Kick out client",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/publish/bulk": {
      "post": {
        "description": "Possible HTTP response status code are:<br/><br/>200: All messages are delivered to at least one subscriber;<br/><br/>202: At least one message was not delivered to any subscriber;<br/><br/>400: At least one message is invalid. For example bad topic name, or QoS is out of range;<br/><br/>503: Failed to deliver at least one of the messages;<br/><br/><br/>In case there is at lest one invalid message in the batch, the HTTP response body<br/>is the same as for <code>/publish</code> API.<br/><br/>Otherwise the HTTP response body is an array of JSON objects indicating the publish<br/>result of each individual message in the batch.",
        "tags": [
          "Publish"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_ok"
                  }
                }
              }
            }
          },
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                      }
                    },
                    {
                      "$ref": "#/components/schemas/emqx_mgmt_api_publish.bad_request"
                    }
                  ]
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                  }
                }
              }
            }
          }
        },
        "summary": "Publish a batch of messages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_message"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes/{node}/bridges/{id}/{operation}": {
      "post": {
        "description": "Stop/Restart bridges on a specific node.",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "The node name, e.g. emqx@127.0.0.1",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The bridge Id. Must be of format {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "Operations can be one of: stop, restart",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start",
                "stop",
                "restart"
              ]
            },
            "example": "start"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service or bridge not enabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge or node not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Stop/restart bridge",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/rule_test": {
      "post": {
        "description": "Test a rule",
        "tags": [
          "Rules"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Rule Test Pass"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid Parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "412": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_MATCH"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "SQL Not Match"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Test a rule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rule_engine.rule_test"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/built_in_database/rules/clients/{clientid}": {
      "get": {
        "description": "Get rule for 'clientid'",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.clientid"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "password_based:built_in_database": {
                    "value": {
                      "rules": [
                        {
                          "action": "publish",
                          "permission": "allow",
                          "topic": "test/topic/1"
                        },
                        {
                          "action": "subscribe",
                          "permission": "allow",
                          "topic": "test/topic/2"
                        },
                        {
                          "action": "all",
                          "permission": "deny",
                          "topic": "eq test/#"
                        },
                        {
                          "action": "publish",
                          "retain": "true",
                          "permission": "allow",
                          "topic": "test/topic/3",
                          "qos": [
                            "1"
                          ]
                        },
                        {
                          "action": "publish",
                          "retain": "all",
                          "permission": "allow",
                          "topic": "test/topic/4",
                          "qos": [
                            "0",
                            "1",
                            "2"
                          ]
                        }
                      ],
                      "clientid": "client1"
                    },
                    "summary": "ClientID"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_clientid"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Set rule for 'clientid'",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.clientid"
          }
        ],
        "responses": {
          "204": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad clientid or bad rule schema"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "password_based:built_in_database": {
                  "value": {
                    "rules": [
                      {
                        "action": "publish",
                        "permission": "allow",
                        "topic": "test/topic/1"
                      },
                      {
                        "action": "subscribe",
                        "permission": "allow",
                        "topic": "test/topic/2"
                      },
                      {
                        "action": "all",
                        "permission": "deny",
                        "topic": "eq test/#"
                      },
                      {
                        "action": "publish",
                        "retain": "true",
                        "permission": "allow",
                        "topic": "test/topic/3",
                        "qos": [
                          "1"
                        ]
                      },
                      {
                        "action": "publish",
                        "retain": "all",
                        "permission": "allow",
                        "topic": "test/topic/4",
                        "qos": [
                          "0",
                          "1",
                          "2"
                        ]
                      }
                    ],
                    "clientid": "client1"
                  },
                  "summary": "ClientID"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_clientid"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete rule for 'clientid'",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.clientid"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad clientid"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "ClientID Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/sysmon": {
      "get": {
        "description": "Get the sub-configurations under *sysmon*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.sysmon"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "config not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get the sub-configurations under *sysmon*",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *sysmon*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.sysmon"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update the sub-configurations under *sysmon*",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx.sysmon"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/connectors/{id}": {
      "get": {
        "description": "Get a connector by id.",
        "tags": [
          "Connectors"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The connector id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_connector"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "influxdb_api_v2": {
                    "value": {
                      "name": "influxdb_connector",
                      "status": "connected",
                      "type": "influxdb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example influxdb connector",
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "parameters": {
                        "org": "examlpe_org",
                        "token": "example_token",
                        "bucket": "example_bucket",
                        "influxdb_type": "influxdb_api_v2"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "InfluxDB HTTP API V2 Connector"
                  },
                  "http": {
                    "value": {
                      "name": "my_http_connector",
                      "status": "connected",
                      "type": "http",
                      "connect_timeout": "15s",
                      "pool_size": 1,
                      "enable": true,
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://localhost:8080/api/v1",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "pool_type": "hash",
                      "enable_pipelining": 100
                    },
                    "summary": "HTTP Connector"
                  },
                  "confluent_producer": {
                    "value": {
                      "name": "my_confluent_producer_connector",
                      "status": "connected",
                      "type": "confluent_producer",
                      "ssl": {
                        "verify": "verify_none",
                        "enable": true,
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ],
                        "server_name_indication": "auto"
                      },
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "xyz.sa-east1.gcp.confluent.cloud:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Confluent Connector"
                  },
                  "iotdb": {
                    "value": {
                      "name": "iotdb_connector",
                      "status": "connected",
                      "type": "iotdb",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "******",
                        "username": "root"
                      },
                      "description": "My example iotdb connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "base_url": "http://iotdb.local:18080/",
                      "actions": [
                        "my_action"
                      ],
                      "pool_type": "random",
                      "enable_pipelining": 100,
                      "iotdb_version": "v1.3.x"
                    },
                    "summary": "Apache IoTDB Connector"
                  },
                  "couchbase": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": true
                      },
                      "description": "My connector",
                      "server": "couchbase:8093",
                      "enable": true,
                      "password": "******",
                      "username": "admin",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "45s"
                      }
                    },
                    "summary": "Couchbase Connector"
                  },
                  "datalayers": {
                    "value": {
                      "name": "datalayers_connector",
                      "status": "connected",
                      "type": "datalayers",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example datalayers connector",
                      "server": "127.0.0.1:8361",
                      "enable": true,
                      "parameters": {
                        "password": "******",
                        "username": "example_username",
                        "database": "example_database"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Datalayers Connector"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer_connector",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "ssl": {
                        "verify": "verify_none",
                        "enable": true,
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ],
                        "server_name_indication": "auto"
                      },
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Azure Event Hub Connector"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_connector",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "localhost:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Kafka Producer Connector"
                  },
                  "kinesis": {
                    "value": {
                      "name": "kinesis_connector",
                      "status": "connected",
                      "type": "kinesis",
                      "description": "My example kinesis connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "aws_access_key_id": "your_access_key",
                      "aws_secret_access_key": "aws_secret_key",
                      "endpoint": "http://localhost:4566",
                      "max_retries": 2,
                      "pool_size": 8
                    },
                    "summary": "Kinesis Connector"
                  },
                  "syskeeper_proxy": {
                    "value": {
                      "name": "syskeeper_proxy",
                      "status": "connected",
                      "type": "syskeeper_proxy",
                      "listen": "127.0.0.1:9092",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "acceptors": 16,
                      "handshake_timeout": "16s",
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Syskeeper Proxy Connector"
                  },
                  "pgsql": {
                    "value": {
                      "name": "my_pgsql_connector",
                      "status": "connected",
                      "type": "pgsql",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "PostgreSQL Connector"
                  },
                  "mysql": {
                    "value": {
                      "name": "mysql_connector",
                      "status": "connected",
                      "type": "mysql",
                      "description": "My example mysql connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:3306",
                      "password": "******",
                      "username": "root",
                      "database": "test",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "health_check_interval": "20s"
                      }
                    },
                    "summary": "MySQL Connector"
                  },
                  "rabbitmq": {
                    "value": {
                      "timeout": "5s",
                      "name": "rabbitmq_connector",
                      "port": 5672,
                      "status": "connected",
                      "type": "rabbitmq",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example rabbitmq connector",
                      "pool_size": 8,
                      "server": "127.0.0.1",
                      "enable": true,
                      "password": "******",
                      "username": "guest",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "heartbeat": "30s",
                      "actions": [
                        "my_action"
                      ],
                      "virtual_host": "/"
                    },
                    "summary": "Rabbitmq Connector"
                  },
                  "dynamo": {
                    "value": {
                      "name": "dynamo_connector",
                      "status": "connected",
                      "type": "dynamo",
                      "description": "My example dynamo connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "aws_access_key_id": "root",
                      "aws_secret_access_key": "******",
                      "enable": true,
                      "pool_size": 8,
                      "region": "us-west-2",
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "url": "http://127.0.0.1:8000"
                    },
                    "summary": "DynamoDB Connector"
                  },
                  "tdengine": {
                    "value": {
                      "name": "tdengine_connector",
                      "status": "connected",
                      "type": "tdengine",
                      "description": "My example tdengine connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:6041",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "TDengine Connector"
                  },
                  "mongodb_single": {
                    "value": {
                      "name": "mongodb_single_connector",
                      "status": "connected",
                      "type": "mongodb_single",
                      "description": "My example mongodb_single connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Standalone Connector"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "demo",
                      "status": "connected",
                      "type": "greptimedb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example greptimedb connector",
                      "server": "127.0.0.1:4001",
                      "enable": true,
                      "password": "******",
                      "username": "example_username",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "dbname": "example_db"
                    },
                    "summary": "GreptimeDB Connector"
                  },
                  "opents": {
                    "value": {
                      "name": "opents_connector",
                      "status": "connected",
                      "type": "opents",
                      "description": "My example opents connector",
                      "pool_size": 8,
                      "server": "http://localhost:4242/",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "OpenTSDB Connector"
                  },
                  "abs": {
                    "value": {
                      "status": "connected",
                      "description": "My connector",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "account_key": "******",
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "45s"
                      },
                      "account_name": "my_account_name"
                    },
                    "summary": "Azure Blob Storage Connector"
                  },
                  "mongodb_sharded": {
                    "value": {
                      "name": "mongodb_sharded_connector",
                      "status": "connected",
                      "type": "mongodb_sharded",
                      "description": "My example mongodb_sharded connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Sharded Connector"
                  },
                  "mongodb_rs": {
                    "value": {
                      "name": "mongodb_rs_connector",
                      "status": "connected",
                      "type": "mongodb_rs",
                      "description": "My example mongodb_rs connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Replica Set Connector"
                  },
                  "redis_single_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis single connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "server": "127.0.0.1:6379",
                        "password": "******",
                        "username": "test",
                        "database": 1,
                        "redis_type": "single"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Single Producer Connector"
                  },
                  "oracle": {
                    "value": {
                      "name": "oracle_connector",
                      "status": "connected",
                      "type": "oracle",
                      "description": "My example oracle connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "password": "oracle",
                      "pool_size": 8,
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "server": "127.0.0.1:1521",
                      "service_name": "XE",
                      "sid": "XE",
                      "username": "system"
                    },
                    "summary": "Oracle Connector"
                  },
                  "snowflake": {
                    "value": {
                      "status": "connected",
                      "description": "My connector",
                      "pool_size": 8,
                      "server": "myorg-myaccount.snowflakecomputing.com",
                      "enable": true,
                      "password": "******",
                      "username": "admin",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "45s"
                      },
                      "account": "myorg-myaccount",
                      "dsn": "snowflake"
                    },
                    "summary": "Snowflake Connector"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "hstreamdb_connector",
                      "status": "connected",
                      "type": "hstreamdb",
                      "description": "My example hstreamdb connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "grpc_timeout": "30s",
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "ssl": {
                        "enable": false,
                        "verify": "verify_peer"
                      },
                      "url": "http://127.0.0.1:6570"
                    },
                    "summary": "HStreamDB Connector"
                  },
                  "influxdb_api_v1": {
                    "value": {
                      "name": "influxdb_connector",
                      "status": "connected",
                      "type": "influxdb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example influxdb connector",
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "parameters": {
                        "password": "******",
                        "username": "example_username",
                        "database": "example_database",
                        "influxdb_type": "influxdb_api_v1"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "InfluxDB HTTP API V1 Connector"
                  },
                  "s3_aws": {
                    "value": {
                      "port": 443,
                      "status": "connected",
                      "host": "s3.eu-east-1.amazonaws.com",
                      "description": "My S3 connector",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "transport_options": {
                        "ssl": {
                          "verify": "verify_peer",
                          "enable": true
                        },
                        "connect_timeout": "1s",
                        "pool_size": 4,
                        "max_retries": 1,
                        "request_timeout": "60s",
                        "enable_pipelining": 1
                      },
                      "secret_access_key": "SECRET",
                      "access_key_id": "ACCESS"
                    },
                    "summary": "S3 Connector"
                  },
                  "cassandra": {
                    "value": {
                      "name": "cassandra_connector",
                      "status": "connected",
                      "type": "cassandra",
                      "description": "My example cassandra connector",
                      "pool_size": 8,
                      "password": "******",
                      "username": "root",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "servers": "127.0.0.1:9042",
                      "actions": [
                        "my_action"
                      ],
                      "keyspace": "mqtt"
                    },
                    "summary": "Cassandra Connector"
                  },
                  "gcp_pubsub_consumer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "gcp_pubsub_producer",
                      "description": "my connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "max_retries": 2,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "30s"
                      },
                      "pipelining": 100,
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Consumer Connector"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "clickhouse_connector",
                      "status": "connected",
                      "type": "clickhouse",
                      "description": "My example clickhouse connector",
                      "pool_size": 8,
                      "password": "******",
                      "url": "http://localhost:8123",
                      "username": "default",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "ClickHouse Connector"
                  },
                  "sqlserver": {
                    "value": {
                      "driver": "ms-sql",
                      "name": "sqlserver_connector",
                      "status": "connected",
                      "type": "sqlserver",
                      "description": "My example sqlserver connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:1433",
                      "password": "******",
                      "username": "sa",
                      "database": "test",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "health_check_interval": "20s"
                      }
                    },
                    "summary": "Microsoft SQL Server Connector"
                  },
                  "redis_cluster_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis cluster connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "password": "******",
                        "username": "test",
                        "servers": "127.0.0.1:6379,127.0.0.2:6379",
                        "redis_type": "cluster"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Cluster Producer Connector"
                  },
                  "matrix": {
                    "value": {
                      "name": "my_matrix_connector",
                      "status": "connected",
                      "type": "matrix",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "Matrix Connector"
                  },
                  "kafka_consumer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "kafka_consumer",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "30s"
                      },
                      "bootstrap_hosts": "kafka.emqx.net:9092"
                    },
                    "summary": "Kafka Consumer Connector"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "rocketmq_connector",
                      "status": "connected",
                      "type": "rocketmq",
                      "description": "My example rocketmq connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "enable": true,
                      "pool_size": 8,
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_after_created": true,
                        "start_timeout": "5s"
                      },
                      "servers": "127.0.0.1:9876"
                    },
                    "summary": "RocketMQ Connector"
                  },
                  "pulsar": {
                    "value": {
                      "name": "pulsar_connector",
                      "status": "connected",
                      "type": "pulsar",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": "none",
                      "description": "My example pulsar connector",
                      "connect_timeout": "5s",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "servers": "pulsar://127.0.0.1:6650",
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Pulsar Connector"
                  },
                  "syskeeper_forwarder": {
                    "value": {
                      "name": "syskeeper_forwarder",
                      "status": "connected",
                      "type": "syskeeper_forwarder",
                      "pool_size": 16,
                      "server": "127.0.0.1:9092",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "ack_timeout": "10s",
                      "actions": [
                        "my_action"
                      ],
                      "ack_mode": "no_ack"
                    },
                    "summary": "Syskeeper Forwarder Connector"
                  },
                  "elasticsearch": {
                    "value": {
                      "name": "elasticsearch_connector",
                      "status": "connected",
                      "type": "elasticsearch",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "******",
                        "username": "root"
                      },
                      "description": "My example elasticsearch connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "server": "127.0.0.1:9200",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "pool_type": "random",
                      "enable_pipelining": 100
                    },
                    "summary": "Elastic Search Connector"
                  },
                  "gcp_pubsub_producer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "gcp_pubsub_producer",
                      "connect_timeout": "10s",
                      "pool_size": 8,
                      "enable": true,
                      "max_retries": 2,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "request_ttl": "60s"
                      },
                      "pipelining": 100,
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Producer Connector"
                  },
                  "timescale": {
                    "value": {
                      "name": "my_timescale_connector",
                      "status": "connected",
                      "type": "timescale",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "Timescale Connector"
                  },
                  "redis_sentinel_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis sentinel connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "password": "******",
                        "username": "test",
                        "database": 1,
                        "servers": "127.0.0.1:6379,127.0.0.2:6379",
                        "sentinel": "myredismaster",
                        "redis_type": "sentinel"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Sentinel Producer Connector"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_producer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/elasticsearch.get"
                    },
                    {
                      "$ref": "#/components/schemas/connector_azure_blob_storage.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/syskeeper_forwarder.get"
                    },
                    {
                      "$ref": "#/components/schemas/pulsar.get"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/kafka_consumer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_consumer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_snowflake.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/opents_connector.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_s3.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/tdengine_connector.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/redis.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/rabbitmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/connector_mqtt.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_postgres.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_syskeeper_proxy.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_datalayers.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_couchbase.get_connector"
                    },
                    {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/iotdb.get_thrift"
                        },
                        {
                          "$ref": "#/components/schemas/iotdb.get_restapi"
                        }
                      ]
                    },
                    {
                      "$ref": "#/components/schemas/confluent.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get_connector"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Connector not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get connector",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update a connector by id.",
        "tags": [
          "Connectors"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The connector id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_connector"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "influxdb_api_v2": {
                    "value": {
                      "name": "influxdb_connector",
                      "status": "connected",
                      "type": "influxdb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example influxdb connector",
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "parameters": {
                        "org": "examlpe_org",
                        "token": "example_token",
                        "bucket": "example_bucket",
                        "influxdb_type": "influxdb_api_v2"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "InfluxDB HTTP API V2 Connector"
                  },
                  "http": {
                    "value": {
                      "name": "my_http_connector",
                      "status": "connected",
                      "type": "http",
                      "connect_timeout": "15s",
                      "pool_size": 1,
                      "enable": true,
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://localhost:8080/api/v1",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "pool_type": "hash",
                      "enable_pipelining": 100
                    },
                    "summary": "HTTP Connector"
                  },
                  "confluent_producer": {
                    "value": {
                      "name": "my_confluent_producer_connector",
                      "status": "connected",
                      "type": "confluent_producer",
                      "ssl": {
                        "verify": "verify_none",
                        "enable": true,
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ],
                        "server_name_indication": "auto"
                      },
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "xyz.sa-east1.gcp.confluent.cloud:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Confluent Connector"
                  },
                  "iotdb": {
                    "value": {
                      "name": "iotdb_connector",
                      "status": "connected",
                      "type": "iotdb",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "******",
                        "username": "root"
                      },
                      "description": "My example iotdb connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "base_url": "http://iotdb.local:18080/",
                      "actions": [
                        "my_action"
                      ],
                      "pool_type": "random",
                      "enable_pipelining": 100,
                      "iotdb_version": "v1.3.x"
                    },
                    "summary": "Apache IoTDB Connector"
                  },
                  "couchbase": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": true
                      },
                      "description": "My connector",
                      "server": "couchbase:8093",
                      "enable": true,
                      "password": "******",
                      "username": "admin",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "45s"
                      }
                    },
                    "summary": "Couchbase Connector"
                  },
                  "datalayers": {
                    "value": {
                      "name": "datalayers_connector",
                      "status": "connected",
                      "type": "datalayers",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example datalayers connector",
                      "server": "127.0.0.1:8361",
                      "enable": true,
                      "parameters": {
                        "password": "******",
                        "username": "example_username",
                        "database": "example_database"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Datalayers Connector"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer_connector",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "ssl": {
                        "verify": "verify_none",
                        "enable": true,
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ],
                        "server_name_indication": "auto"
                      },
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Azure Event Hub Connector"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_connector",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "localhost:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Kafka Producer Connector"
                  },
                  "kinesis": {
                    "value": {
                      "name": "kinesis_connector",
                      "status": "connected",
                      "type": "kinesis",
                      "description": "My example kinesis connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "aws_access_key_id": "your_access_key",
                      "aws_secret_access_key": "aws_secret_key",
                      "endpoint": "http://localhost:4566",
                      "max_retries": 2,
                      "pool_size": 8
                    },
                    "summary": "Kinesis Connector"
                  },
                  "syskeeper_proxy": {
                    "value": {
                      "name": "syskeeper_proxy",
                      "status": "connected",
                      "type": "syskeeper_proxy",
                      "listen": "127.0.0.1:9092",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "acceptors": 16,
                      "handshake_timeout": "16s",
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Syskeeper Proxy Connector"
                  },
                  "pgsql": {
                    "value": {
                      "name": "my_pgsql_connector",
                      "status": "connected",
                      "type": "pgsql",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "PostgreSQL Connector"
                  },
                  "mysql": {
                    "value": {
                      "name": "mysql_connector",
                      "status": "connected",
                      "type": "mysql",
                      "description": "My example mysql connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:3306",
                      "password": "******",
                      "username": "root",
                      "database": "test",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "health_check_interval": "20s"
                      }
                    },
                    "summary": "MySQL Connector"
                  },
                  "rabbitmq": {
                    "value": {
                      "timeout": "5s",
                      "name": "rabbitmq_connector",
                      "port": 5672,
                      "status": "connected",
                      "type": "rabbitmq",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example rabbitmq connector",
                      "pool_size": 8,
                      "server": "127.0.0.1",
                      "enable": true,
                      "password": "******",
                      "username": "guest",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "heartbeat": "30s",
                      "actions": [
                        "my_action"
                      ],
                      "virtual_host": "/"
                    },
                    "summary": "Rabbitmq Connector"
                  },
                  "dynamo": {
                    "value": {
                      "name": "dynamo_connector",
                      "status": "connected",
                      "type": "dynamo",
                      "description": "My example dynamo connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "aws_access_key_id": "root",
                      "aws_secret_access_key": "******",
                      "enable": true,
                      "pool_size": 8,
                      "region": "us-west-2",
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "url": "http://127.0.0.1:8000"
                    },
                    "summary": "DynamoDB Connector"
                  },
                  "tdengine": {
                    "value": {
                      "name": "tdengine_connector",
                      "status": "connected",
                      "type": "tdengine",
                      "description": "My example tdengine connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:6041",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "TDengine Connector"
                  },
                  "mongodb_single": {
                    "value": {
                      "name": "mongodb_single_connector",
                      "status": "connected",
                      "type": "mongodb_single",
                      "description": "My example mongodb_single connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Standalone Connector"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "demo",
                      "status": "connected",
                      "type": "greptimedb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example greptimedb connector",
                      "server": "127.0.0.1:4001",
                      "enable": true,
                      "password": "******",
                      "username": "example_username",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "dbname": "example_db"
                    },
                    "summary": "GreptimeDB Connector"
                  },
                  "opents": {
                    "value": {
                      "name": "opents_connector",
                      "status": "connected",
                      "type": "opents",
                      "description": "My example opents connector",
                      "pool_size": 8,
                      "server": "http://localhost:4242/",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "OpenTSDB Connector"
                  },
                  "abs": {
                    "value": {
                      "status": "connected",
                      "description": "My connector",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "account_key": "******",
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "45s"
                      },
                      "account_name": "my_account_name"
                    },
                    "summary": "Azure Blob Storage Connector"
                  },
                  "mongodb_sharded": {
                    "value": {
                      "name": "mongodb_sharded_connector",
                      "status": "connected",
                      "type": "mongodb_sharded",
                      "description": "My example mongodb_sharded connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Sharded Connector"
                  },
                  "mongodb_rs": {
                    "value": {
                      "name": "mongodb_rs_connector",
                      "status": "connected",
                      "type": "mongodb_rs",
                      "description": "My example mongodb_rs connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Replica Set Connector"
                  },
                  "redis_single_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis single connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "server": "127.0.0.1:6379",
                        "password": "******",
                        "username": "test",
                        "database": 1,
                        "redis_type": "single"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Single Producer Connector"
                  },
                  "oracle": {
                    "value": {
                      "name": "oracle_connector",
                      "status": "connected",
                      "type": "oracle",
                      "description": "My example oracle connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "password": "oracle",
                      "pool_size": 8,
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "server": "127.0.0.1:1521",
                      "service_name": "XE",
                      "sid": "XE",
                      "username": "system"
                    },
                    "summary": "Oracle Connector"
                  },
                  "snowflake": {
                    "value": {
                      "status": "connected",
                      "description": "My connector",
                      "pool_size": 8,
                      "server": "myorg-myaccount.snowflakecomputing.com",
                      "enable": true,
                      "password": "******",
                      "username": "admin",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "45s"
                      },
                      "account": "myorg-myaccount",
                      "dsn": "snowflake"
                    },
                    "summary": "Snowflake Connector"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "hstreamdb_connector",
                      "status": "connected",
                      "type": "hstreamdb",
                      "description": "My example hstreamdb connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "grpc_timeout": "30s",
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "ssl": {
                        "enable": false,
                        "verify": "verify_peer"
                      },
                      "url": "http://127.0.0.1:6570"
                    },
                    "summary": "HStreamDB Connector"
                  },
                  "influxdb_api_v1": {
                    "value": {
                      "name": "influxdb_connector",
                      "status": "connected",
                      "type": "influxdb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example influxdb connector",
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "parameters": {
                        "password": "******",
                        "username": "example_username",
                        "database": "example_database",
                        "influxdb_type": "influxdb_api_v1"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "InfluxDB HTTP API V1 Connector"
                  },
                  "s3_aws": {
                    "value": {
                      "port": 443,
                      "status": "connected",
                      "host": "s3.eu-east-1.amazonaws.com",
                      "description": "My S3 connector",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "transport_options": {
                        "ssl": {
                          "verify": "verify_peer",
                          "enable": true
                        },
                        "connect_timeout": "1s",
                        "pool_size": 4,
                        "max_retries": 1,
                        "request_timeout": "60s",
                        "enable_pipelining": 1
                      },
                      "secret_access_key": "SECRET",
                      "access_key_id": "ACCESS"
                    },
                    "summary": "S3 Connector"
                  },
                  "cassandra": {
                    "value": {
                      "name": "cassandra_connector",
                      "status": "connected",
                      "type": "cassandra",
                      "description": "My example cassandra connector",
                      "pool_size": 8,
                      "password": "******",
                      "username": "root",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "servers": "127.0.0.1:9042",
                      "actions": [
                        "my_action"
                      ],
                      "keyspace": "mqtt"
                    },
                    "summary": "Cassandra Connector"
                  },
                  "gcp_pubsub_consumer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "gcp_pubsub_producer",
                      "description": "my connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "max_retries": 2,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "30s"
                      },
                      "pipelining": 100,
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Consumer Connector"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "clickhouse_connector",
                      "status": "connected",
                      "type": "clickhouse",
                      "description": "My example clickhouse connector",
                      "pool_size": 8,
                      "password": "******",
                      "url": "http://localhost:8123",
                      "username": "default",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "ClickHouse Connector"
                  },
                  "sqlserver": {
                    "value": {
                      "driver": "ms-sql",
                      "name": "sqlserver_connector",
                      "status": "connected",
                      "type": "sqlserver",
                      "description": "My example sqlserver connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:1433",
                      "password": "******",
                      "username": "sa",
                      "database": "test",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "health_check_interval": "20s"
                      }
                    },
                    "summary": "Microsoft SQL Server Connector"
                  },
                  "redis_cluster_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis cluster connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "password": "******",
                        "username": "test",
                        "servers": "127.0.0.1:6379,127.0.0.2:6379",
                        "redis_type": "cluster"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Cluster Producer Connector"
                  },
                  "matrix": {
                    "value": {
                      "name": "my_matrix_connector",
                      "status": "connected",
                      "type": "matrix",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "Matrix Connector"
                  },
                  "kafka_consumer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "kafka_consumer",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "30s"
                      },
                      "bootstrap_hosts": "kafka.emqx.net:9092"
                    },
                    "summary": "Kafka Consumer Connector"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "rocketmq_connector",
                      "status": "connected",
                      "type": "rocketmq",
                      "description": "My example rocketmq connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "enable": true,
                      "pool_size": 8,
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_after_created": true,
                        "start_timeout": "5s"
                      },
                      "servers": "127.0.0.1:9876"
                    },
                    "summary": "RocketMQ Connector"
                  },
                  "pulsar": {
                    "value": {
                      "name": "pulsar_connector",
                      "status": "connected",
                      "type": "pulsar",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": "none",
                      "description": "My example pulsar connector",
                      "connect_timeout": "5s",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "servers": "pulsar://127.0.0.1:6650",
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Pulsar Connector"
                  },
                  "syskeeper_forwarder": {
                    "value": {
                      "name": "syskeeper_forwarder",
                      "status": "connected",
                      "type": "syskeeper_forwarder",
                      "pool_size": 16,
                      "server": "127.0.0.1:9092",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "ack_timeout": "10s",
                      "actions": [
                        "my_action"
                      ],
                      "ack_mode": "no_ack"
                    },
                    "summary": "Syskeeper Forwarder Connector"
                  },
                  "elasticsearch": {
                    "value": {
                      "name": "elasticsearch_connector",
                      "status": "connected",
                      "type": "elasticsearch",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "******",
                        "username": "root"
                      },
                      "description": "My example elasticsearch connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "server": "127.0.0.1:9200",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "pool_type": "random",
                      "enable_pipelining": 100
                    },
                    "summary": "Elastic Search Connector"
                  },
                  "gcp_pubsub_producer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "gcp_pubsub_producer",
                      "connect_timeout": "10s",
                      "pool_size": 8,
                      "enable": true,
                      "max_retries": 2,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "request_ttl": "60s"
                      },
                      "pipelining": 100,
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Producer Connector"
                  },
                  "timescale": {
                    "value": {
                      "name": "my_timescale_connector",
                      "status": "connected",
                      "type": "timescale",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "Timescale Connector"
                  },
                  "redis_sentinel_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis sentinel connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "password": "******",
                        "username": "test",
                        "database": 1,
                        "servers": "127.0.0.1:6379,127.0.0.2:6379",
                        "sentinel": "myredismaster",
                        "redis_type": "sentinel"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Sentinel Producer Connector"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_producer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/elasticsearch.get"
                    },
                    {
                      "$ref": "#/components/schemas/connector_azure_blob_storage.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/syskeeper_forwarder.get"
                    },
                    {
                      "$ref": "#/components/schemas/pulsar.get"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/kafka_consumer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_consumer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_snowflake.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/opents_connector.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_s3.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/tdengine_connector.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/redis.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/rabbitmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/connector_mqtt.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_postgres.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_syskeeper_proxy.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_datalayers.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_couchbase.get_connector"
                    },
                    {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/iotdb.get_thrift"
                        },
                        {
                          "$ref": "#/components/schemas/iotdb.get_restapi"
                        }
                      ]
                    },
                    {
                      "$ref": "#/components/schemas/confluent.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get_connector"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update connector failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Connector not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update connector",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "influxdb_api_v2": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "org": "examlpe_org",
                      "token": "example_token",
                      "bucket": "example_bucket",
                      "influxdb_type": "influxdb_api_v2"
                    }
                  },
                  "summary": "InfluxDB HTTP API V2 Connector"
                },
                "http": {
                  "value": {
                    "connect_timeout": "15s",
                    "pool_size": 1,
                    "enable": true,
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://localhost:8080/api/v1",
                    "pool_type": "hash",
                    "enable_pipelining": 100
                  },
                  "summary": "HTTP Connector"
                },
                "confluent_producer": {
                  "value": {
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "xyz.sa-east1.gcp.confluent.cloud:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Confluent Connector"
                },
                "iotdb": {
                  "value": {
                    "name": "iotdb_connector",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example iotdb connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "base_url": "http://iotdb.local:18080/",
                    "pool_type": "random",
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.3.x"
                  },
                  "summary": "Apache IoTDB Connector"
                },
                "couchbase": {
                  "value": {
                    "ssl": {
                      "enable": true
                    },
                    "description": "My connector",
                    "server": "couchbase:8093",
                    "enable": true,
                    "password": "******",
                    "username": "admin",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    }
                  },
                  "summary": "Couchbase Connector"
                },
                "datalayers": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example datalayers connector",
                    "server": "127.0.0.1:8361",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database"
                    }
                  },
                  "summary": "Datalayers Connector"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Azure Event Hub Connector"
                },
                "kafka_producer": {
                  "value": {
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Kafka Producer Connector"
                },
                "kinesis": {
                  "value": {
                    "description": "My example kinesis connector",
                    "aws_access_key_id": "your_access_key",
                    "aws_secret_access_key": "aws_secret_key",
                    "endpoint": "http://localhost:4566",
                    "max_retries": 2,
                    "pool_size": 8
                  },
                  "summary": "Kinesis Connector"
                },
                "syskeeper_proxy": {
                  "value": {
                    "listen": "127.0.0.1:9092",
                    "enable": true,
                    "acceptors": 16,
                    "handshake_timeout": "16s"
                  },
                  "summary": "Syskeeper Proxy Connector"
                },
                "pgsql": {
                  "value": {
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "PostgreSQL Connector"
                },
                "mysql": {
                  "value": {
                    "description": "My example mysql connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  "summary": "MySQL Connector"
                },
                "rabbitmq": {
                  "value": {
                    "timeout": "5s",
                    "name": "rabbitmq_connector",
                    "port": 5672,
                    "type": "rabbitmq",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example rabbitmq connector",
                    "pool_size": 8,
                    "server": "127.0.0.1",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "heartbeat": "30s",
                    "virtual_host": "/"
                  },
                  "summary": "Rabbitmq Connector"
                },
                "dynamo": {
                  "value": {
                    "description": "My example dynamo connector",
                    "aws_access_key_id": "root",
                    "aws_secret_access_key": "******",
                    "enable": true,
                    "pool_size": 8,
                    "region": "us-west-2",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "url": "http://127.0.0.1:8000"
                  },
                  "summary": "DynamoDB Connector"
                },
                "tdengine": {
                  "value": {
                    "name": "tdengine_connector",
                    "type": "tdengine",
                    "description": "My example tdengine connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root"
                  },
                  "summary": "TDengine Connector"
                },
                "mongodb_single": {
                  "value": {
                    "description": "My example mongodb_single connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Standalone Connector"
                },
                "greptimedb": {
                  "value": {
                    "name": "demo",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example greptimedb connector",
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "password": "******",
                    "username": "example_username",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db"
                  },
                  "summary": "GreptimeDB Connector"
                },
                "opents": {
                  "value": {
                    "name": "opents_connector",
                    "type": "opents",
                    "description": "My example opents connector",
                    "pool_size": 8,
                    "server": "http://localhost:4242/",
                    "enable": true
                  },
                  "summary": "OpenTSDB Connector"
                },
                "abs": {
                  "value": {
                    "description": "My connector",
                    "enable": true,
                    "account_key": "******",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    },
                    "account_name": "my_account_name"
                  },
                  "summary": "Azure Blob Storage Connector"
                },
                "mongodb_sharded": {
                  "value": {
                    "description": "My example mongodb_sharded connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Sharded Connector"
                },
                "mongodb_rs": {
                  "value": {
                    "description": "My example mongodb_rs connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Replica Set Connector"
                },
                "redis_single_producer": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis single connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "server": "127.0.0.1:6379",
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "redis_type": "single"
                    }
                  },
                  "summary": "Redis Single Producer Connector"
                },
                "oracle": {
                  "value": {
                    "description": "My example oracle connector",
                    "password": "oracle",
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "server": "127.0.0.1:1521",
                    "service_name": "XE",
                    "sid": "XE",
                    "username": "system"
                  },
                  "summary": "Oracle Connector"
                },
                "snowflake": {
                  "value": {
                    "description": "My connector",
                    "pool_size": 8,
                    "server": "myorg-myaccount.snowflakecomputing.com",
                    "enable": true,
                    "password": "******",
                    "username": "admin",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    },
                    "account": "myorg-myaccount",
                    "dsn": "snowflake"
                  },
                  "summary": "Snowflake Connector"
                },
                "hstreamdb": {
                  "value": {
                    "description": "My example hstreamdb connector",
                    "grpc_timeout": "30s",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "ssl": {
                      "enable": false,
                      "verify": "verify_peer"
                    },
                    "url": "http://127.0.0.1:6570"
                  },
                  "summary": "HStreamDB Connector"
                },
                "influxdb_api_v1": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database",
                      "influxdb_type": "influxdb_api_v1"
                    }
                  },
                  "summary": "InfluxDB HTTP API V1 Connector"
                },
                "s3_aws": {
                  "value": {
                    "port": 443,
                    "host": "s3.eu-east-1.amazonaws.com",
                    "description": "My S3 connector",
                    "enable": true,
                    "transport_options": {
                      "ssl": {
                        "verify": "verify_peer",
                        "enable": true
                      },
                      "connect_timeout": "1s",
                      "pool_size": 4,
                      "max_retries": 1,
                      "request_timeout": "60s",
                      "enable_pipelining": 1
                    },
                    "secret_access_key": "SECRET",
                    "access_key_id": "ACCESS"
                  },
                  "summary": "S3 Connector"
                },
                "cassandra": {
                  "value": {
                    "description": "My example cassandra connector",
                    "pool_size": 8,
                    "password": "******",
                    "username": "root",
                    "servers": "127.0.0.1:9042",
                    "keyspace": "mqtt"
                  },
                  "summary": "Cassandra Connector"
                },
                "gcp_pubsub_consumer": {
                  "value": {
                    "description": "my connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Consumer Connector"
                },
                "clickhouse": {
                  "value": {
                    "description": "My example clickhouse connector",
                    "pool_size": 8,
                    "password": "******",
                    "url": "http://localhost:8123",
                    "username": "default",
                    "database": "mqtt"
                  },
                  "summary": "ClickHouse Connector"
                },
                "sqlserver": {
                  "value": {
                    "driver": "ms-sql",
                    "description": "My example sqlserver connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  "summary": "Microsoft SQL Server Connector"
                },
                "redis_cluster_producer": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis cluster connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "redis_type": "cluster"
                    }
                  },
                  "summary": "Redis Cluster Producer Connector"
                },
                "matrix": {
                  "value": {
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "Matrix Connector"
                },
                "kafka_consumer": {
                  "value": {
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "bootstrap_hosts": "kafka.emqx.net:9092"
                  },
                  "summary": "Kafka Consumer Connector"
                },
                "rocketmq": {
                  "value": {
                    "description": "My example rocketmq connector",
                    "enable": true,
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_after_created": true,
                      "start_timeout": "5s"
                    },
                    "servers": "127.0.0.1:9876"
                  },
                  "summary": "RocketMQ Connector"
                },
                "pulsar": {
                  "value": {
                    "name": "pulsar_connector",
                    "type": "pulsar",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": "none",
                    "description": "My example pulsar connector",
                    "connect_timeout": "5s",
                    "enable": true,
                    "servers": "pulsar://127.0.0.1:6650"
                  },
                  "summary": "Pulsar Connector"
                },
                "syskeeper_forwarder": {
                  "value": {
                    "pool_size": 16,
                    "server": "127.0.0.1:9092",
                    "enable": true,
                    "ack_timeout": "10s",
                    "ack_mode": "no_ack"
                  },
                  "summary": "Syskeeper Forwarder Connector"
                },
                "elasticsearch": {
                  "value": {
                    "name": "elasticsearch_connector",
                    "type": "elasticsearch",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example elasticsearch connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "server": "127.0.0.1:9200",
                    "enable": true,
                    "pool_type": "random",
                    "enable_pipelining": 100
                  },
                  "summary": "Elastic Search Connector"
                },
                "gcp_pubsub_producer": {
                  "value": {
                    "connect_timeout": "10s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "resource_opts": {
                      "request_ttl": "60s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Producer Connector"
                },
                "timescale": {
                  "value": {
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "Timescale Connector"
                },
                "redis_sentinel_producer": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis sentinel connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "sentinel": "myredismaster",
                      "redis_type": "sentinel"
                    }
                  },
                  "summary": "Redis Sentinel Producer Connector"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_timescale.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_producer.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/elasticsearch.put"
                  },
                  {
                    "$ref": "#/components/schemas/connector_azure_blob_storage.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/syskeeper_forwarder.put"
                  },
                  {
                    "$ref": "#/components/schemas/pulsar.put"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/kafka_consumer.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_consumer.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_snowflake.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/opents_connector.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_s3.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/tdengine_connector.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/redis.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/rabbitmq.put"
                  },
                  {
                    "$ref": "#/components/schemas/connector_mqtt.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_postgres.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_syskeeper_proxy.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_datalayers.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_couchbase.put_connector"
                  },
                  {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/iotdb.put_thrift"
                      },
                      {
                        "$ref": "#/components/schemas/iotdb.put_restapi"
                      }
                    ]
                  },
                  {
                    "$ref": "#/components/schemas/confluent.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.put_connector"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a connector by id.",
        "tags": [
          "Connectors"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The connector id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_connector"
          }
        ],
        "responses": {
          "204": {
            "description": "Connector deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cannot delete connector while active rules are defined for this connector"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Connector not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete connector",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}/authorization/cache": {
      "get": {
        "description": "Get client authz cache in the cluster.",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.authz_cache"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Clean client authz cache in the cluster.",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Clean client authz cache successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/data/import": {
      "post": {
        "description": "Import a data backup file",
        "tags": [
          "Data Backup"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Backup file import failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "node": "emqx@127.0.0.1",
                "filename": "emqx-export-2023-11-23-19-13-19.043.tar.gz"
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_mgmt_api_data_backup.import_request_body"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/{node}/force_leave": {
      "delete": {
        "description": "Force leave node from cluster",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cluster.node"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/prometheus/schema_validation": {
      "get": {
        "description": "Get Prometheus Metrics for Schema Validation",
        "tags": [
          "Monitor"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_prometheus_api.mode"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Prometheus Data.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/gateways/{name}/listeners/{id}": {
      "get": {
        "description": "Get the gateway listener configs",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Listener ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "udp_listener": {
                    "value": {
                      "name": "udp-def",
                      "type": "udp",
                      "bind": "22212",
                      "udp_options": {
                        "buffer": "10KB",
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "sndbuf": "10KB",
                        "active_n": 100
                      }
                    },
                    "summary": "A simple UDP listener example"
                  },
                  "dtls_listener": {
                    "value": {
                      "name": "dtls-def",
                      "type": "dtls",
                      "bind": "22213",
                      "udp_options": {
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "dtls_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "access_rules": [
                        "allow all"
                      ],
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple DTLS listener example"
                  },
                  "ssl_listener": {
                    "value": {
                      "name": "ssl-def",
                      "type": "ssl",
                      "bind": "22211",
                      "tcp_options": {
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "ssl_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2",
                          "tlsv1.1",
                          "tlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "acceptors": 16,
                      "access_rules": [
                        "allow all"
                      ],
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple SSL listener example"
                  },
                  "tcp_listener": {
                    "value": {
                      "name": "tcp-def",
                      "type": "tcp",
                      "bind": "22210",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple TCP listener example"
                  },
                  "ws_listener": {
                    "value": {
                      "name": "ws-def",
                      "type": "ws",
                      "bind": "33043",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "websocket": {
                        "path": "/ocpp",
                        "compress": false,
                        "fail_if_no_subprotocol": true,
                        "supported_subprotocols": "ocpp1.6",
                        "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                        "check_origin_enable": false,
                        "piggyback": "single"
                      },
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple WebSocket listener example"
                  },
                  "wss_listener": {
                    "value": {
                      "name": "ws-ssl-def",
                      "type": "wss",
                      "bind": "33053",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "ssl_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2",
                          "tlsv1.1",
                          "tlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "websocket": {
                        "path": "/ocpp",
                        "compress": false,
                        "fail_if_no_subprotocol": true,
                        "supported_subprotocols": "ocpp1.6",
                        "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                        "check_origin_enable": false,
                        "piggyback": "single"
                      },
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple WebSocket/TLS listener example"
                  },
                  "dtls_listener_with_psk_ciphers": {
                    "value": {
                      "name": "dtls-psk",
                      "type": "dtls",
                      "bind": "22214",
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "dtls_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ],
                        "fail_if_no_peer_cert": false,
                        "user_lookup_fun": "emqx_tls_psk:lookup"
                      },
                      "max_conn_rate": 1000
                    },
                    "summary": "A DTLS listener with PSK example"
                  },
                  "lisetner_with_authn": {
                    "value": {
                      "name": "tcp-with-authn",
                      "type": "tcp",
                      "bind": "22215",
                      "authentication": {
                        "mechanism": "password_based",
                        "backend": "built_in_database",
                        "password_hash_algorithm": {
                          "name": "sha256"
                        },
                        "user_id_type": "username"
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A TCP listener with authentication example"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.wss_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ws_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get listener config",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the gateway listener. The listener being updated performs a restart and all clients connected to that listener will be disconnected.",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Listener ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "udp_listener": {
                    "value": {
                      "name": "udp-def",
                      "type": "udp",
                      "bind": "22212",
                      "udp_options": {
                        "buffer": "10KB",
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "sndbuf": "10KB",
                        "active_n": 100
                      }
                    },
                    "summary": "A simple UDP listener example"
                  },
                  "dtls_listener": {
                    "value": {
                      "name": "dtls-def",
                      "type": "dtls",
                      "bind": "22213",
                      "udp_options": {
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "dtls_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "access_rules": [
                        "allow all"
                      ],
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple DTLS listener example"
                  },
                  "ssl_listener": {
                    "value": {
                      "name": "ssl-def",
                      "type": "ssl",
                      "bind": "22211",
                      "tcp_options": {
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "ssl_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2",
                          "tlsv1.1",
                          "tlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "acceptors": 16,
                      "access_rules": [
                        "allow all"
                      ],
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple SSL listener example"
                  },
                  "tcp_listener": {
                    "value": {
                      "name": "tcp-def",
                      "type": "tcp",
                      "bind": "22210",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple TCP listener example"
                  },
                  "ws_listener": {
                    "value": {
                      "name": "ws-def",
                      "type": "ws",
                      "bind": "33043",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "websocket": {
                        "path": "/ocpp",
                        "compress": false,
                        "fail_if_no_subprotocol": true,
                        "supported_subprotocols": "ocpp1.6",
                        "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                        "check_origin_enable": false,
                        "piggyback": "single"
                      },
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple WebSocket listener example"
                  },
                  "wss_listener": {
                    "value": {
                      "name": "ws-ssl-def",
                      "type": "wss",
                      "bind": "33053",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "ssl_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2",
                          "tlsv1.1",
                          "tlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "websocket": {
                        "path": "/ocpp",
                        "compress": false,
                        "fail_if_no_subprotocol": true,
                        "supported_subprotocols": "ocpp1.6",
                        "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                        "check_origin_enable": false,
                        "piggyback": "single"
                      },
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple WebSocket/TLS listener example"
                  },
                  "dtls_listener_with_psk_ciphers": {
                    "value": {
                      "name": "dtls-psk",
                      "type": "dtls",
                      "bind": "22214",
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "dtls_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ],
                        "fail_if_no_peer_cert": false,
                        "user_lookup_fun": "emqx_tls_psk:lookup"
                      },
                      "max_conn_rate": 1000
                    },
                    "summary": "A DTLS listener with PSK example"
                  },
                  "lisetner_with_authn": {
                    "value": {
                      "name": "tcp-with-authn",
                      "type": "tcp",
                      "bind": "22215",
                      "authentication": {
                        "mechanism": "password_based",
                        "backend": "built_in_database",
                        "password_hash_algorithm": {
                          "name": "sha256"
                        },
                        "user_id_type": "username"
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A TCP listener with authentication example"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.wss_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ws_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update listener config",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "udp_listener": {
                  "value": {
                    "name": "udp-def",
                    "type": "udp",
                    "bind": "22212",
                    "udp_options": {
                      "buffer": "10KB",
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "sndbuf": "10KB",
                      "active_n": 100
                    }
                  },
                  "summary": "A simple UDP listener example"
                },
                "dtls_listener": {
                  "value": {
                    "name": "dtls-def",
                    "type": "dtls",
                    "bind": "22213",
                    "udp_options": {
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "dtls_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "access_rules": [
                      "allow all"
                    ],
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple DTLS listener example"
                },
                "ssl_listener": {
                  "value": {
                    "name": "ssl-def",
                    "type": "ssl",
                    "bind": "22211",
                    "tcp_options": {
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "ssl_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2",
                        "tlsv1.1",
                        "tlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "acceptors": 16,
                    "access_rules": [
                      "allow all"
                    ],
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple SSL listener example"
                },
                "tcp_listener": {
                  "value": {
                    "name": "tcp-def",
                    "type": "tcp",
                    "bind": "22210",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple TCP listener example"
                },
                "ws_listener": {
                  "value": {
                    "name": "ws-def",
                    "type": "ws",
                    "bind": "33043",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "websocket": {
                      "path": "/ocpp",
                      "compress": false,
                      "fail_if_no_subprotocol": true,
                      "supported_subprotocols": "ocpp1.6",
                      "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                      "check_origin_enable": false,
                      "piggyback": "single"
                    },
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple WebSocket listener example"
                },
                "wss_listener": {
                  "value": {
                    "name": "ws-ssl-def",
                    "type": "wss",
                    "bind": "33053",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "ssl_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2",
                        "tlsv1.1",
                        "tlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "websocket": {
                      "path": "/ocpp",
                      "compress": false,
                      "fail_if_no_subprotocol": true,
                      "supported_subprotocols": "ocpp1.6",
                      "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                      "check_origin_enable": false,
                      "piggyback": "single"
                    },
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple WebSocket/TLS listener example"
                },
                "dtls_listener_with_psk_ciphers": {
                  "value": {
                    "name": "dtls-psk",
                    "type": "dtls",
                    "bind": "22214",
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "dtls_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ],
                      "fail_if_no_peer_cert": false,
                      "user_lookup_fun": "emqx_tls_psk:lookup"
                    },
                    "max_conn_rate": 1000
                  },
                  "summary": "A DTLS listener with PSK example"
                },
                "lisetner_with_authn": {
                  "value": {
                    "name": "tcp-with-authn",
                    "type": "tcp",
                    "bind": "22215",
                    "authentication": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256"
                      },
                      "user_id_type": "username"
                    },
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A TCP listener with authentication example"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.wss_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.ws_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the gateway listener. All connected clients under the deleted listener will be disconnected.",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Listener ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete listener",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/relup/upgrade/{node}": {
      "post": {
        "description": "Upgrade a specified node to the target version with the installed package.",
        "tags": [
          "Relup"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/relup.node_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Upgrade is started successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UNEXPECTED_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Upgrade failed because of invalid input or environment"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INTERNAL_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Upgrade failed because of internal errors"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Upgrade a specified node",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sources/{id}/metrics/reset": {
      "put": {
        "description": "Reset a bridge metrics by id.",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "responses": {
          "204": {
            "description": "Reset success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Source not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Reset source metrics",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/rules/{id}/test": {
      "post": {
        "description": "Apply a rule with the given message and environment",
        "tags": [
          "Rules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_rule_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Rule Applied"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid Parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "RULE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "The rule could not be found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "412": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_MATCH"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "SQL Not Match"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Apply a rule for testing",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rule_engine.rule_apply_test"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/relup/upgrade": {
      "post": {
        "description": "Upgrade all nodes to the target version with the installed package.",
        "tags": [
          "Relup"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Upgrade is started successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UNEXPECTED_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Upgrade failed because of invalid input or environment"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INTERNAL_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Upgrade failed because of internal errors"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Upgrade all nodes",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/enable/{enable}": {
      "put": {
        "description": "Update the gateway basic configurations and running status.<br/><br/>Note: The Authentication and Listener configurations should be updated by other special APIs.",
        "tags": [
          "Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "enable",
            "description": "Whether to enable this gateway",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "204": {
            "description": "Gateway configuration updated"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Enable or disable gateway",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/relup/package/upload": {
      "post": {
        "description": "Upload a hot upgrade package (emqx_relup-vsn.tar.gz).<br/>Note that only one package is alllowed to be installed at a time.",
        "tags": [
          "Relup"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Package is uploaded successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UNEXPECTED_ERROR",
                        "ALREADY_INSTALLED",
                        "BAD_PLUGIN_INFO"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Upload a hot upgrade package",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "encoding": {
                "plugin": {
                  "contentType": "application/gzip"
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "plugin": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/rules": {
      "get": {
        "description": "List all rules",
        "tags": [
          "Rules"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "enable",
            "description": "Filter enable/disable rules",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "from",
            "description": "Filter rules by from(topic), exact match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "like_id",
            "description": "Filter rules by id, Substring matching",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "like_from",
            "description": "Filter rules by from(topic), Substring matching",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "like_description",
            "description": "Filter rules by description, Substring matching",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "match_from",
            "description": "Filter rules by from(topic), Mqtt topic matching",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "action",
            "description": "Filters rules that contain any of the given action id(s).  When used in conjunction with source id filtering, the rules must contain sources *and* actions that match some of the criteria.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "source",
            "description": "Filters rules that contain any of the given source id(s).  When used in conjunction with action id filtering, the rules must contain sources *and* actions that match some of the criteria.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "List of rules",
                      "items": {
                        "$ref": "#/components/schemas/rule_engine.rule_info"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid Parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "List rules",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create a new rule using given Id",
        "tags": [
          "Rules"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule_engine.rule_info"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid Parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Create a rule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rule_engine.rule_creation"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication/{id}/status": {
      "get": {
        "description": "Get authenticator status from global authentication chain.",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Authenticator ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "status_metrics": {
                    "value": {
                      "status": "connected",
                      "metrics": {
                        "nomatch": 0,
                        "total": 0,
                        "success": 0,
                        "failed": 0,
                        "rate": 0,
                        "rate_last5m": 0,
                        "rate_max": 0
                      },
                      "node_status": [
                        {
                          "node": "emqx@127.0.0.1",
                          "status": "connected"
                        }
                      ],
                      "resource_metrics": {
                        "success": 0,
                        "matched": 0,
                        "failed": 0,
                        "rate": 0,
                        "rate_last5m": 0,
                        "rate_max": 0
                      },
                      "node_error": [],
                      "node_metrics": [
                        {
                          "node": "emqx@127.0.0.1",
                          "metrics": {
                            "nomatch": 0,
                            "total": 0,
                            "matched": 0,
                            "failed": 0,
                            "rate": 0,
                            "rate_last5m": 0,
                            "rate_max": 0
                          }
                        }
                      ],
                      "node_resource_metrics": [
                        {
                          "node": "emqx@127.0.0.1",
                          "metrics": {
                            "success": 0,
                            "matched": 0,
                            "failed": 0,
                            "rate": 0,
                            "rate_last5m": 0,
                            "rate_max": 0
                          }
                        }
                      ]
                    },
                    "summary": "Authn status metrics"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/authn.metrics_status_fields"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INTERNAL_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Internal Service Error"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/topic_rewrite": {
      "get": {
        "description": "List all rewrite rules",
        "tags": [
          "MQTT"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List all rewrite rules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/modules.rewrite"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update all rewrite rules",
        "tags": [
          "MQTT"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Update all rewrite rules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/modules.rewrite"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "EXCEED_LIMIT"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Rules count exceed max limit"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/modules.rewrite"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways": {
      "get": {
        "description": "This API returns an overview info for the specified or all gateways.<br/>including current running status, number of connections, listener status, etc.",
        "tags": [
          "Gateways"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "description": "Filter gateways by status.<br/><br/>It is enum with `running`, `stopped`, `unloaded`",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "running",
                "stopped",
                "unloaded"
              ]
            },
            "example": "running"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "name": "coap",
                    "status": "unloaded"
                  },
                  {
                    "name": "exproto",
                    "status": "unloaded"
                  },
                  {
                    "name": "lwm2m",
                    "status": "running",
                    "max_connections": 1024000,
                    "started_at": "2021-12-08T14:41:26.202+08:00",
                    "node_status": [
                      {
                        "node": "node@127.0.0.1",
                        "status": "running",
                        "max_connections": 1024000,
                        "current_connections": 0
                      }
                    ],
                    "listeners": [
                      {
                        "id": "lwm2m:udp:default",
                        "name": "default",
                        "running": true,
                        "type": "udp"
                      }
                    ],
                    "created_at": "2021-12-08T14:41:26.171+08:00",
                    "current_connections": 0
                  },
                  {
                    "name": "mqttsn",
                    "status": "stopped",
                    "max_connections": 1024000,
                    "node_status": [
                      {
                        "node": "node@127.0.0.1",
                        "status": "running",
                        "max_connections": 1024000,
                        "current_connections": 0
                      }
                    ],
                    "listeners": [
                      {
                        "id": "mqttsn:udp:default",
                        "name": "default",
                        "running": false,
                        "type": "udp"
                      }
                    ],
                    "created_at": "2021-12-08T14:41:45.071+08:00",
                    "stopped_at": "2021-12-08T14:56:35.576+08:00",
                    "current_connections": 0
                  },
                  {
                    "name": "stomp",
                    "status": "running",
                    "max_connections": 1024000,
                    "started_at": "2021-12-08T14:42:15.274+08:00",
                    "node_status": [
                      {
                        "node": "node@127.0.0.1",
                        "status": "running",
                        "max_connections": 1024000,
                        "current_connections": 0
                      }
                    ],
                    "listeners": [
                      {
                        "id": "stomp:tcp:default",
                        "name": "default",
                        "running": true,
                        "type": "tcp"
                      }
                    ],
                    "created_at": "2021-12-08T14:42:15.272+08:00",
                    "current_connections": 0
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_gateway_api.gateway_overview"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "List all gateways",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/topic_metrics/{topic}": {
      "get": {
        "description": "Get topic metrics",
        "tags": [
          "MQTT"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "topic",
            "description": "Topic string. Notice: Topic string in url path must be encoded",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "testtopic/1"
          }
        ],
        "responses": {
          "200": {
            "description": "Topic",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_topic_metrics_api.topic_metrics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TOPIC_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found. Topic metrics not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete topic metrics",
        "tags": [
          "MQTT"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "topic",
            "description": "Topic string. Notice: Topic string in url path must be encoded",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "testtopic/1"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete topic metrics"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TOPIC_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found. Topic metrics not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/bridges_probe": {
      "post": {
        "description": "Test creating a new bridge by given ID <br/><br/>The ID must be of format '{type}:{name}'",
        "tags": [
          "Bridges"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Test bridge OK"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TEST_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "bridge test failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Test creating bridge",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "influxdb_api_v2": {
                  "value": {
                    "name": "demo",
                    "type": "influxdb_api_v2",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "org": "examlpe_org",
                    "token": "example_token",
                    "bucket": "example_bucket",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v2"
                  },
                  "summary": "InfluxDB HTTP API V2 Bridge"
                },
                "iotdb": {
                  "value": {
                    "name": "My IoTDB Bridge",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "*****",
                      "username": "root"
                    },
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "base_url": "http://iotdb.local:18080/",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "health_check_interval": "15s"
                    },
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.1.x",
                    "device_id": "my_device",
                    "is_aligned": false
                  },
                  "summary": "Apache IoTDB Bridge"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "name": "my_azure_event_hub_producer",
                    "type": "azure_event_hub_producer",
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${.pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "local_topic": "mqtt/local/topic",
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Azure Event Hub Producer Bridge"
                },
                "kafka_producer": {
                  "value": {
                    "name": "my_kafka_producer_action",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "kafka": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "10MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partitions_limit": "all_partitions",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "local_topic": "mqtt/local/topic",
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Kafka Producer Bridge"
                },
                "redis_sentinel": {
                  "value": {
                    "name": "redis_bridge",
                    "type": "redis_sentinel",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "servers": [
                      "127.0.0.1:26379"
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "sentinel": "mymaster",
                    "redis_type": "sentinel",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Sentinel Bridge"
                },
                "pulsar_producer": {
                  "value": {
                    "authentication": "none",
                    "batch_size": 1,
                    "buffer": {
                      "memory_overload_protection": true,
                      "mode": "memory",
                      "per_partition_limit": "10MB",
                      "segment_bytes": "5MB"
                    },
                    "compression": "no_compression",
                    "enable": true,
                    "local_topic": "mqtt/topic/-576460752303423482",
                    "max_batch_bytes": "900KB",
                    "message": {
                      "key": "${.clientid}",
                      "value": "${.}"
                    },
                    "name": "pulsar_example_name",
                    "pulsar_topic": "pulsar_example_topic",
                    "retention_period": "infinity",
                    "send_buffer": "1MB",
                    "servers": "pulsar://127.0.0.1:6650",
                    "ssl": {
                      "enable": false,
                      "server_name_indication": "auto",
                      "verify": "verify_none"
                    },
                    "strategy": "key_dispatch",
                    "sync_timeout": "5s",
                    "type": "pulsar_producer"
                  },
                  "summary": "Pulsar Producer Bridge"
                },
                "pgsql": {
                  "value": {
                    "name": "foo",
                    "type": "pgsql",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "PostgreSQL Bridge"
                },
                "redis_cluster": {
                  "value": {
                    "name": "redis_bridge",
                    "type": "redis_cluster",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "servers": [
                      "127.0.0.1:6379"
                    ],
                    "resource_opts": {},
                    "redis_type": "cluster",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Cluster Bridge"
                },
                "mysql": {
                  "value": {
                    "name": "foo",
                    "type": "mysql",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "MySQL Bridge"
                },
                "kinesis_producer": {
                  "value": {
                    "name": "foo",
                    "type": "kinesis_producer",
                    "enable": true,
                    "max_retries": 3,
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "endpoint": "https://kinesis.us-east-1.amazonaws.com",
                    "partition_key": "key",
                    "aws_access_key_id": "aws_access_key_id",
                    "stream_name": "stream_name"
                  },
                  "summary": "Amazon Kinesis Producer Bridge"
                },
                "http_example": {
                  "value": {
                    "name": "http_example",
                    "type": "http",
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "15s",
                    "pool_size": 4,
                    "enable": true,
                    "body": "${payload}",
                    "url": "http://localhost:9901/messages/${topic}",
                    "method": "post",
                    "max_retries": 3,
                    "request_timeout": "15s",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "enable_pipelining": 100,
                    "local_topic": "emqx_http/#"
                  },
                  "summary": "HTTP"
                },
                "rabbitmq": {
                  "value": {
                    "timeout": 5,
                    "name": "foo",
                    "port": 5672,
                    "type": "rabbitmq",
                    "exchange": "messages",
                    "pool_size": 8,
                    "server": "localhost",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "heartbeat": "30s",
                    "durable": false,
                    "auto_reconnect": "2s",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "payload_template": "",
                    "routing_key": "my_routing_key",
                    "virtual_host": "/",
                    "exchange_type": "topic"
                  },
                  "summary": "RabbitMQ Bridge"
                },
                "dynamo": {
                  "value": {
                    "name": "foo",
                    "table": "mqtt",
                    "type": "dynamo",
                    "pool_size": 8,
                    "template": "",
                    "enable": true,
                    "url": "http://127.0.0.1:8000",
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "aws_access_key_id": "root"
                  },
                  "summary": "DynamoDB Bridge"
                },
                "tdengine": {
                  "value": {
                    "name": "foo",
                    "type": "tdengine",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "TDengine Bridge"
                },
                "mongodb_single": {
                  "value": {
                    "name": "mongodb_single_demo",
                    "type": "mongodb_single",
                    "pool_size": 8,
                    "server": "localhost:27017",
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "single"
                  },
                  "summary": "MongoDB (Standalone) Bridge"
                },
                "greptimedb": {
                  "value": {
                    "name": "demo",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                  },
                  "summary": "Greptimedb HTTP API V2 Bridge"
                },
                "opents": {
                  "value": {
                    "name": "foo",
                    "type": "opents",
                    "pool_size": 8,
                    "server": "http://127.0.0.1:4242",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "enabledb": true
                  },
                  "summary": "OpenTSDB Bridge"
                },
                "mongodb_sharded": {
                  "value": {
                    "name": "mongodb_sharded_demo",
                    "type": "mongodb_sharded",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "sharded"
                  },
                  "summary": "MongoDB (Sharded) Bridge"
                },
                "mongodb_rs": {
                  "value": {
                    "name": "mongodb_rs_demo",
                    "type": "mongodb_rs",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "r_mode": "safe",
                    "w_mode": "safe",
                    "replica_set_name": "rs",
                    "srv_record": false,
                    "mongo_type": "rs"
                  },
                  "summary": "MongoDB (Replica Set) Bridge"
                },
                "oracle": {
                  "value": {
                    "name": "foo",
                    "type": "oracle",
                    "pool_size": 8,
                    "server": "127.0.0.1:1521",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "service_name": "ORCL",
                    "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "sid": "ORCL"
                  },
                  "summary": "Oracle Database Bridge"
                },
                "hstreamdb": {
                  "value": {
                    "name": "demo",
                    "stream": "stream",
                    "type": "hstreamdb",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "direction": "egress",
                    "url": "http://127.0.0.1:6570",
                    "resource_opts": {
                      "batch_size": 100,
                      "query_mode": "sync",
                      "batch_time": "20ms"
                    },
                    "record_template": "{ \"temperature\": ${payload.temperature}, \"humidity\": ${payload.humidity} }"
                  },
                  "summary": "HStreamDB Bridge"
                },
                "influxdb_api_v1": {
                  "value": {
                    "name": "demo",
                    "type": "influxdb_api_v1",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "database": "example_database",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v1"
                  },
                  "summary": "InfluxDB HTTP API V1 Bridge"
                },
                "gcp_pubsub": {
                  "value": {
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    },
                    "pubsub_topic": "mytopic"
                  },
                  "summary": "GCP PubSub Producer Bridge"
                },
                "redis_single": {
                  "value": {
                    "name": "redis_bridge",
                    "type": "redis_single",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "server": "127.0.0.1:6379",
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "redis_type": "single",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Single Node Bridge"
                },
                "mqtt_example": {
                  "value": {
                    "name": "mqtt_example",
                    "type": "mqtt",
                    "keepalive": "300s",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:1883",
                    "enable": true,
                    "password": "******",
                    "username": "foo",
                    "proto_ver": "v4",
                    "clean_start": true,
                    "retry_interval": "15s",
                    "max_inflight": 100,
                    "resource_opts": {
                      "query_mode": "sync",
                      "max_buffer_bytes": 104857600,
                      "health_check_interval": "15s"
                    },
                    "ingress": {
                      "local": {
                        "retain": "${retain}",
                        "payload": "${payload}",
                        "topic": "from_aws/${topic}",
                        "qos": "${qos}"
                      },
                      "remote": {
                        "topic": "aws/#",
                        "qos": 1
                      }
                    },
                    "egress": {
                      "local": {
                        "topic": "emqx/#"
                      },
                      "remote": {
                        "retain": false,
                        "payload": "${payload}",
                        "topic": "from_emqx/${topic}",
                        "qos": "${qos}"
                      }
                    }
                  },
                  "summary": "MQTT Bridge"
                },
                "cassandra": {
                  "value": {
                    "name": "foo",
                    "type": "cassandra",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
                    "servers": "127.0.0.1:9042",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "keyspace": "mqtt"
                  },
                  "summary": "Cassandra Bridge"
                },
                "gcp_pubsub_consumer": {
                  "value": {
                    "connect_timeout": "15s",
                    "consumer": {
                      "topic_mapping": [
                        {
                          "qos": 1,
                          "mqtt_topic": "mqtt/topic/1",
                          "payload_template": "${.}",
                          "pubsub_topic": "pubsub-topic-1"
                        },
                        {
                          "qos": 2,
                          "mqtt_topic": "mqtt/topic/2",
                          "payload_template": "v = ${.value}, a = ${.attributes}, o = ${.ordering_key}",
                          "pubsub_topic": "pubsub-topic-2"
                        }
                      ],
                      "pull_max_messages": 100
                    },
                    "resource_opts": {
                      "request_ttl": "20s"
                    },
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Consumer Bridge"
                },
                "clickhouse": {
                  "value": {
                    "name": "foo",
                    "type": "clickhouse",
                    "pool_size": 8,
                    "server": "127.0.0.1:8123",
                    "enable": true,
                    "password": "******",
                    "username": "default",
                    "database": "mqtt",
                    "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "batch_value_separator": ", "
                  },
                  "summary": "Clickhouse Bridge"
                },
                "sqlserver": {
                  "value": {
                    "driver": "ms-sql",
                    "name": "bar",
                    "type": "sqlserver",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "enable": true,
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Microsoft SQL Server Bridge"
                },
                "matrix": {
                  "value": {
                    "name": "foo",
                    "type": "matrix",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Matrix Bridge"
                },
                "kafka_consumer": {
                  "value": {
                    "name": "my_kafka_producer_action",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "kafka": {
                      "max_batch_bytes": "896KB",
                      "offset_reset_policy": "latest",
                      "offset_commit_interval_seconds": 5
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s",
                    "topic_mapping": [
                      {
                        "qos": 1,
                        "mqtt_topic": "mqtt/topic/${.offset}",
                        "kafka_topic": "kafka-topic-1",
                        "payload_template": "${.}"
                      },
                      {
                        "qos": 2,
                        "mqtt_topic": "mqtt/topic/2",
                        "kafka_topic": "kafka-topic-2",
                        "payload_template": "v = ${.value}"
                      }
                    ],
                    "value_encoding_mode": "none",
                    "key_encoding_mode": "none"
                  },
                  "summary": "Kafka Consumer Bridge"
                },
                "rocketmq": {
                  "value": {
                    "name": "foo",
                    "type": "rocketmq",
                    "server": "127.0.0.1:9876",
                    "template": "",
                    "enable": true,
                    "topic": "TopicTest",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "RocketMQ Bridge"
                },
                "timescale": {
                  "value": {
                    "name": "foo",
                    "type": "timescale",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Timescale Bridge"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_timescale.post"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_consumer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_gcp_pubsub.post_consumer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.post_single"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_gcp_pubsub.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_api_v1"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_rs"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_opents.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.post_grpc_v1"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_single"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_tdengine.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.post_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pgsql.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pulsar.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.post_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_iotdb.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_api_v2"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sso/saml/acs": {
      "post": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [],
        "responses": {
          "302": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "REDIRECT"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_USERNAME_OR_PWD"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BACKEND_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/monitor/nodes/{node}": {
      "get": {
        "description": "List the monitor (statistics) data on the specified node.",
        "tags": [
          "Metrics"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "EMQX node name.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "in": "query",
            "name": "latest",
            "description": "The latest N seconds data. Like 300 for 5 min.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "example": 300
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_dashboard_monitor_api.sampler"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/prometheus/stats": {
      "get": {
        "description": "Get Prometheus Metrics",
        "tags": [
          "Monitor"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_prometheus_api.mode"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Prometheus Data.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/trace/{name}/log_detail": {
      "get": {
        "description": "get trace log file's metadata, such as size, last update time",
        "tags": [
          "Trace"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/trace.name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/trace.log_file_detail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Trace Name Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication/{id}": {
      "get": {
        "description": "Get authenticator from global authentication chain.",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Authenticator ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "server": "127.0.0.1:6379",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.cinfo"
                    },
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.scram_restapi_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.scram_restapi_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.scram"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update authenticator from global authentication chain.",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Authenticator ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Authenticator updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "ALREADY_EXISTS"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "value": {
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "algorithm": "hmac-based",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  },
                  "summary": "JWT authentication"
                },
                "password_based:built_in_database": {
                  "value": {
                    "mechanism": "password_based",
                    "backend": "built_in_database",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  },
                  "summary": "Built-in password_based authentication"
                },
                "password_based:http": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "5s",
                    "mechanism": "password_based",
                    "pool_size": 8,
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://127.0.0.1:18083",
                    "method": "post",
                    "backend": "http",
                    "request_timeout": "5s",
                    "enable_pipelining": 100
                  },
                  "summary": "password_based authentication through external HTTP API"
                },
                "password_based:mongodb": {
                  "value": {
                    "mechanism": "password_based",
                    "filter": {
                      "username": "${username}"
                    },
                    "server": "127.0.0.1:27017",
                    "database": "example",
                    "backend": "mongodb",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "collection": "users",
                    "is_superuser_field": "is_superuser",
                    "password_hash_field": "password_hash",
                    "salt_field": "salt"
                  },
                  "summary": "password_based authentication with MongoDB backend"
                },
                "password_based:redis": {
                  "value": {
                    "mechanism": "password_based",
                    "server": "127.0.0.1:6379",
                    "cmd": "HMGET ${username} password_hash salt",
                    "database": 0,
                    "backend": "redis",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single"
                  },
                  "summary": "password_based authentication with Redis backend"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.cinfo"
                  },
                  {
                    "$ref": "#/components/schemas/authn.kerberos"
                  },
                  {
                    "$ref": "#/components/schemas/authn.scram_restapi_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.scram_restapi_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.gcp_device"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap_deprecated"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authn.scram"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db_api"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete authenticator from global authentication chain.",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Authenticator ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Authenticator deleted"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_registry/{name}": {
      "get": {
        "description": "Get a schema by its name",
        "tags": [
          "Schema Registry"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The schema name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_schema"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "avro_schema": {
                    "value": {
                      "name": "my_avro_schema",
                      "type": "avro",
                      "description": "My Avro Schema",
                      "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                    },
                    "summary": "Avro"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/schema_registry.get_json"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.get_protobuf"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.get_avro"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Schema not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get registered schema",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update an existing schema",
        "tags": [
          "Schema Registry"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The schema name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_schema"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "avro_schema": {
                    "value": {
                      "name": "my_avro_schema",
                      "type": "avro",
                      "description": "My Avro Schema",
                      "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                    },
                    "summary": "Avro"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/schema_registry.json"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.protobuf"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.avro"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Schema not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update a schema",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "avro_schema": {
                  "value": {
                    "name": "my_avro_schema",
                    "type": "avro",
                    "description": "My Avro Schema",
                    "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                  },
                  "summary": "Avro"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/schema_registry.json"
                  },
                  {
                    "$ref": "#/components/schemas/schema_registry.protobuf"
                  },
                  {
                    "$ref": "#/components/schemas/schema_registry.avro"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a schema",
        "tags": [
          "Schema Registry"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The schema name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_schema"
          }
        ],
        "responses": {
          "204": {
            "description": "Schema deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Schema not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete registered schema",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/publish": {
      "post": {
        "description": "Possible HTTP status response codes are:<br/><br/><code>200</code>: The message is delivered to at least one subscriber;<br/><br/><code>202</code>: No matched subscribers;<br/><br/><code>400</code>: Message is invalid. for example bad topic name, or QoS is out of range;<br/><br/><code>503</code>: Failed to deliver the message to subscriber(s)",
        "tags": [
          "Publish"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_ok"
                }
              }
            }
          },
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_publish.bad_request"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                }
              }
            }
          }
        },
        "summary": "Publish a message",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_message"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes/{node}/metrics": {
      "get": {
        "description": "Get node run-time counter metrics. Such as received or sent bytes or messages, the number of succeeded or failed authentications or authorizations, etc.",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_mgmt_api_nodes.node_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Get node metrics successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_metrics.node_metrics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/global_zone": {
      "get": {
        "description": "Get the MQTT-related configuration",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "mqtt": {
                      "$ref": "#/components/schemas/emqx.mqtt"
                    },
                    "flapping_detect": {
                      "$ref": "#/components/schemas/emqx.flapping_detect"
                    },
                    "force_shutdown": {
                      "$ref": "#/components/schemas/emqx.force_shutdown"
                    },
                    "force_gc": {
                      "$ref": "#/components/schemas/emqx.force_gc"
                    },
                    "durable_sessions": {
                      "$ref": "#/components/schemas/emqx.durable_sessions"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update MQTT-related configuration",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "mqtt": {
                      "$ref": "#/components/schemas/emqx.mqtt"
                    },
                    "flapping_detect": {
                      "$ref": "#/components/schemas/emqx.flapping_detect"
                    },
                    "force_shutdown": {
                      "$ref": "#/components/schemas/emqx.force_shutdown"
                    },
                    "force_gc": {
                      "$ref": "#/components/schemas/emqx.force_gc"
                    },
                    "durable_sessions": {
                      "$ref": "#/components/schemas/emqx.durable_sessions"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "mqtt": {
                    "$ref": "#/components/schemas/emqx.mqtt"
                  },
                  "flapping_detect": {
                    "$ref": "#/components/schemas/emqx.flapping_detect"
                  },
                  "force_shutdown": {
                    "$ref": "#/components/schemas/emqx.force_shutdown"
                  },
                  "force_gc": {
                    "$ref": "#/components/schemas/emqx.force_gc"
                  },
                  "durable_sessions": {
                    "$ref": "#/components/schemas/emqx.durable_sessions"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sources/{id}/enable/{enable}": {
      "put": {
        "description": "Enable or Disable bridge on all nodes in the cluster.",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "path",
            "name": "enable",
            "description": "Whether to enable this bridge.",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Enable or disable bridge",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/data/files": {
      "get": {
        "description": "List backup files",
        "tags": [
          "Data Backup"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "node": "emqx@127.0.0.1",
                      "size": 22740,
                      "filename": "emqx-export-2023-09-02-11-11-33.012.tar.gz",
                      "created_at": "2023-09-02T11:11:33+02:00",
                      "created_at_sec": 1693645893
                    },
                    {
                      "node": "emqx@127.0.0.1",
                      "size": 22740,
                      "filename": "emqx-export-2023-11-23-19-13-19.043.tar.gz",
                      "created_at": "2023-11-23T19:13:19+02:00",
                      "created_at_sec": 1700759599
                    }
                  ],
                  "meta": {
                    "count": 300,
                    "limit": 20,
                    "page": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_data_backup.files_response"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Upload a data backup file",
        "tags": [
          "Data Backup"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad backup file"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/bridges/{id}/enable/{enable}": {
      "put": {
        "description": "Enable or Disable bridges on all nodes in the cluster.",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge Id. Must be of format {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          },
          {
            "in": "path",
            "name": "enable",
            "description": "Whether to enable this bridge",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "bridge already exists as non Bridge V1 compatible action"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Enable or disable bridge",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/load_rebalance/status": {
      "get": {
        "description": "Get rebalance status of the current node",
        "tags": [
          "Load Rebalance"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/load_rebalance.local_status_enabled"
                    },
                    {
                      "$ref": "#/components/schemas/load_rebalance.local_status_disabled"
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get rebalance status",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/bridges/{id}/metrics": {
      "get": {
        "description": "Get bridge metrics by Id",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge Id. Must be of format {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "metrics": {
                      "description": "Bridge metrics.",
                      "$ref": "#/components/schemas/bridge.metrics"
                    },
                    "node_metrics": {
                      "type": "array",
                      "description": "Node metrics.",
                      "items": {
                        "$ref": "#/components/schemas/bridge.node_metrics"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get bridge metrics",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "description": "Dashboard list users",
        "tags": [
          "Dashboard"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Dashboard list users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dashboard.user"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create dashboard user",
        "tags": [
          "Dashboard"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Dashboard Username",
                      "maxLength": 100,
                      "example": "admin"
                    },
                    "role": {
                      "default": "administrator",
                      "type": "string",
                      "description": "User role",
                      "example": "administrator"
                    },
                    "description": {
                      "type": "string",
                      "description": "Dashboard User Description",
                      "example": "administrator"
                    },
                    "backend": {
                      "type": "string",
                      "description": "User account source",
                      "example": "local"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Dashboard Username",
                    "maxLength": 100,
                    "example": "admin"
                  },
                  "password": {
                    "type": "string",
                    "description": "Dashboard Password",
                    "maxLength": 100,
                    "example": "public"
                  },
                  "role": {
                    "default": "administrator",
                    "type": "string",
                    "description": "User role",
                    "example": "administrator"
                  },
                  "description": {
                    "type": "string",
                    "description": "Dashboard User Description",
                    "example": "administrator"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/{type}/status": {
      "get": {
        "description": "Get a authorization source",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "description": "Authorization type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "file",
                "built_in_database",
                "http",
                "redis",
                "mysql",
                "postgresql",
                "mongodb",
                "ldap"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "metrics_example": {
                    "value": {
                      "status": "connected",
                      "metrics": {
                        "nomatch": 0,
                        "total": 0,
                        "allow": 0,
                        "deny": 0,
                        "rate": 0,
                        "rate_last5m": 0,
                        "rate_max": 0
                      },
                      "node_status": [
                        {
                          "node": "emqx@127.0.0.1",
                          "status": "connected"
                        }
                      ],
                      "resource_metrics": {
                        "success": 0,
                        "matched": 0,
                        "failed": 0,
                        "rate": 0,
                        "rate_last5m": 0,
                        "rate_max": 0
                      },
                      "node_metrics": [
                        {
                          "node": "emqx@127.0.0.1",
                          "metrics": {
                            "nomatch": 0,
                            "total": 0,
                            "allow": 0,
                            "deny": 0,
                            "rate": 0,
                            "rate_last5m": 0,
                            "rate_max": 0
                          }
                        }
                      ],
                      "node_resource_metrics": [
                        {
                          "node": "emqx@127.0.0.1",
                          "metrics": {
                            "success": 0,
                            "matched": 0,
                            "failed": 0,
                            "rate": 0,
                            "rate_last5m": 0,
                            "rate_max": 0
                          }
                        }
                      ]
                    },
                    "summary": "Showing a typical metrics example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_schema.metrics_status_fields"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sources_probe": {
      "post": {
        "description": "Test creating a new bridge.",
        "tags": [
          "Sources"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Test bridge OK"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TEST_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "bridge test failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Test creating bridge",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "gcp_pubsub_consumer": {
                  "value": {
                    "name": "my_action",
                    "type": "gcp_pubsub_consumer",
                    "description": "my source",
                    "enable": true,
                    "parameters": {
                      "topic": "my-topic",
                      "pull_max_messages": 100
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "GCP PubSub Consumer Source"
                },
                "kafka_consumer": {
                  "value": {
                    "name": "my_source",
                    "type": "kafka_consumer",
                    "parameters": {
                      "topic": "mytopic"
                    },
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Kafka Consumer Source"
                },
                "mqtt": {
                  "value": {
                    "name": "mqtt_source",
                    "type": "mqtt",
                    "description": "My example mqtt source",
                    "enable": true,
                    "parameters": {
                      "topic": "remote/topic",
                      "qos": 1
                    },
                    "connector": "mqtt_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MQTT Subscriber Source"
                },
                "rabbitmq": {
                  "value": {
                    "name": "rabbitmq_source",
                    "type": "rabbitmq",
                    "description": "My example rabbitmq source",
                    "enable": true,
                    "parameters": {
                      "queue": "test_queue",
                      "no_ack": true
                    },
                    "connector": "rabbitmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "RabbitMQ Subscriber Source"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.post_source"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt_publisher.post_source"
                  },
                  {
                    "$ref": "#/components/schemas/kafka_consumer.post_source"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_consumer.post_source"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gcp_devices/{deviceid}": {
      "get": {
        "description": "Get a device imported from GCP IoT Core",
        "tags": [
          "GCP Devices"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deviceid",
            "description": "Device identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "c2-ec-x509"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_gcp_device_api.gcp_device_all_info"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "The GCP device was not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update a device imported from GCP IoT Core",
        "tags": [
          "GCP Devices"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deviceid",
            "description": "Device identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "c2-ec-x509"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_gcp_device_api.gcp_device_info"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_gcp_device_api.gcp_device"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Remove a device imported from GCP IoT Core",
        "tags": [
          "GCP Devices"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deviceid",
            "description": "Device identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "c2-ec-x509"
          }
        ],
        "responses": {
          "204": {
            "description": "GCP device deleted"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/listeners": {
      "get": {
        "description": "List all running node's listeners for the specified type.",
        "tags": [
          "Listeners"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "description": "Listener type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "tcp",
                "ssl",
                "ws",
                "wss",
                "quic"
              ]
            },
            "example": "tcp"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": "tcp:demo",
                    "name": "demo",
                    "status": {
                      "running": true,
                      "max_connections": 2048000,
                      "current_connections": 201
                    },
                    "type": "tcp",
                    "bind": "0.0.0.0:1884",
                    "number": 2,
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 100
                        }
                      },
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 101
                        }
                      }
                    ],
                    "acceptors": 16
                  },
                  {
                    "id": "tcp:default",
                    "name": "default",
                    "status": {
                      "running": true,
                      "max_connections": "infinity",
                      "current_connections": 501
                    },
                    "type": "tcp",
                    "bind": "0.0.0.0:1883",
                    "number": 2,
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": "infinity",
                          "current_connections": 200
                        }
                      },
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": "infinity",
                          "current_connections": 301
                        }
                      }
                    ],
                    "acceptors": 32
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/listeners.listener_id_status"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create the specified listener on all nodes.",
        "tags": [
          "Listeners"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "id": "tcp:demo",
                  "running": true,
                  "type": "tcp",
                  "bind": "0.0.0.0:1884",
                  "tcp_options": {
                    "buffer": "4KB",
                    "high_watermark": "1MB",
                    "nodelay": false,
                    "reuseaddr": true,
                    "send_timeout": "15s",
                    "send_timeout_close": true,
                    "backlog": 1024,
                    "active_n": 100
                  },
                  "max_connections": 204800,
                  "acceptors": 16,
                  "proxy_protocol": false,
                  "access_rules": [
                    "allow all"
                  ],
                  "proxy_protocol_timeout": "3s",
                  "zone": "default",
                  "mountpoint": "/",
                  "current_connections": 10240
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/listeners.wss_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ws_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.tcp_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ssl_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.quic_required_bind"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_LISTENER_ID",
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "demo",
                "running": true,
                "type": "tcp",
                "bind": "0.0.0.0:1884",
                "tcp_options": {
                  "buffer": "4KB",
                  "high_watermark": "1MB",
                  "nodelay": false,
                  "reuseaddr": true,
                  "send_timeout": "15s",
                  "send_timeout_close": true,
                  "backlog": 1024,
                  "active_n": 100
                },
                "max_connections": 204800,
                "acceptors": 16,
                "proxy_protocol": false,
                "access_rules": [
                  "allow all"
                ],
                "proxy_protocol_timeout": "3s",
                "zone": "default",
                "mountpoint": "/",
                "current_connections": 10240
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/listeners.with_name_quic_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.with_name_wss_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.with_name_ws_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.with_name_ssl_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.with_name_tcp_required_bind"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/links": {
      "get": {
        "description": "Get cluster links configuration",
        "tags": [
          "Cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "enable": true,
                    "name": "emqxcl_b",
                    "node_status": [
                      {
                        "node": "emqx1@emqx.net",
                        "status": "connected"
                      }
                    ],
                    "pool_size": 10,
                    "server": "emqxcl_b.host:1883",
                    "ssl": {
                      "enable": false
                    },
                    "status": "connected",
                    "topics": [
                      "t/topic-example",
                      "t/topic-filter-example/1/#"
                    ]
                  },
                  {
                    "enable": true,
                    "name": "emqxcl_c",
                    "node_status": [
                      {
                        "node": "emqx1@emqx.net",
                        "status": "connected"
                      }
                    ],
                    "pool_size": 10,
                    "server": "emqxcl_c.host:1883",
                    "ssl": {
                      "enable": false
                    },
                    "status": "connected",
                    "topics": [
                      "t/topic-example",
                      "t/topic-filter-example/1/#"
                    ]
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/cluster_link.link_config_response"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create a cluster link",
        "tags": [
          "Cluster"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "enable": true,
                  "name": "emqxcl_b",
                  "node_status": [
                    {
                      "node": "emqx1@emqx.net",
                      "status": "connected"
                    }
                  ],
                  "pool_size": 10,
                  "server": "emqxcl_b.host:1883",
                  "ssl": {
                    "enable": false
                  },
                  "status": "connected",
                  "topics": [
                    "t/topic-example",
                    "t/topic-filter-example/1/#"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/cluster_link.link_config_response"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST",
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update Config Failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "enable": true,
                "name": "emqxcl_b",
                "pool_size": 10,
                "server": "emqxcl_b.host:1883",
                "ssl": {
                  "enable": false
                },
                "topics": [
                  "t/topic-example",
                  "t/topic-filter-example/1/#"
                ]
              },
              "schema": {
                "$ref": "#/components/schemas/cluster.link"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/trace/{name}/download": {
      "get": {
        "description": "Download trace log by name",
        "tags": [
          "Trace"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/trace.name"
          },
          {
            "$ref": "#/components/parameters/trace.node"
          }
        ],
        "responses": {
          "200": {
            "description": "A trace zip file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "NODE_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Trace Name or Node Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}": {
      "get": {
        "description": "Get clients info by client ID",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "heap_size": 610,
                  "send_msg.dropped.expired": 0,
                  "send_oct": 31,
                  "recv_msg.qos1": 0,
                  "is_persistent": false,
                  "send_pkt": 4,
                  "clean_start": true,
                  "inflight_cnt": 0,
                  "node": "emqx@127.0.0.1",
                  "send_msg.dropped.queue_full": 0,
                  "awaiting_rel_cnt": 0,
                  "inflight_max": 32,
                  "created_at": "2024-01-01T12:34:56.789+08:00",
                  "subscriptions_cnt": 1,
                  "mailbox_len": 0,
                  "send_cnt": 4,
                  "connected": true,
                  "ip_address": "127.0.0.1",
                  "awaiting_rel_max": 100,
                  "recv_msg.qos2": 0,
                  "proto_ver": 5,
                  "mountpoint": "null",
                  "proto_name": "MQTT",
                  "durable": false,
                  "port": 52571,
                  "connected_at": "2024-01-01T12:34:56.789+08:00",
                  "enable_authn": true,
                  "expiry_interval": 0,
                  "username": null,
                  "recv_msg": 0,
                  "recv_oct": 49,
                  "send_msg.dropped.too_large": 0,
                  "keepalive": 60,
                  "send_msg.qos1": 0,
                  "send_msg.qos2": 0,
                  "recv_msg.qos0": 0,
                  "send_msg.qos0": 0,
                  "subscriptions_max": "infinity",
                  "mqueue_max": 1000,
                  "mqueue_dropped": 0,
                  "clientid": "01",
                  "is_bridge": false,
                  "peerport": 52571,
                  "send_msg": 0,
                  "listener": "tcp:default",
                  "recv_cnt": 4,
                  "recv_pkt": 4,
                  "recv_msg.dropped": 0,
                  "send_msg.dropped": 0,
                  "recv_msg.dropped.await_pubrel_timeout": 0,
                  "reductions": 6836,
                  "mqueue_len": 0
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.client"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Kick out client by client ID",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Kick out client successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sources/{id}/metrics": {
      "get": {
        "description": "Get bridge metrics by id.",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "metrics": {
                      "description": "Bridge metrics.",
                      "$ref": "#/components/schemas/bridge.metrics"
                    },
                    "node_metrics": {
                      "type": "array",
                      "description": "Node metrics.",
                      "items": {
                        "$ref": "#/components/schemas/bridge.node_metrics"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Source not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get source metrics",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/authentication": {
      "get": {
        "description": "Gets the configuration of the specified gateway authenticator.<br/><br/>Returns 404 when gateway or authentication is not enabled.",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "server": "127.0.0.1:6379",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.cinfo"
                    },
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Authenticator not initialized"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get authenticator configuration",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the configuration of the specified gateway authenticator, or disable the authenticator.",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "server": "127.0.0.1:6379",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.cinfo"
                    },
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update authenticator configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "value": {
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "algorithm": "hmac-based",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  },
                  "summary": "JWT authentication"
                },
                "password_based:built_in_database": {
                  "value": {
                    "mechanism": "password_based",
                    "backend": "built_in_database",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  },
                  "summary": "Built-in password_based authentication"
                },
                "password_based:http": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "5s",
                    "mechanism": "password_based",
                    "pool_size": 8,
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://127.0.0.1:18083",
                    "method": "post",
                    "backend": "http",
                    "request_timeout": "5s",
                    "enable_pipelining": 100
                  },
                  "summary": "password_based authentication through external HTTP API"
                },
                "password_based:mongodb": {
                  "value": {
                    "mechanism": "password_based",
                    "filter": {
                      "username": "${username}"
                    },
                    "server": "127.0.0.1:27017",
                    "database": "example",
                    "backend": "mongodb",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "collection": "users",
                    "is_superuser_field": "is_superuser",
                    "password_hash_field": "password_hash",
                    "salt_field": "salt"
                  },
                  "summary": "password_based authentication with MongoDB backend"
                },
                "password_based:redis": {
                  "value": {
                    "mechanism": "password_based",
                    "server": "127.0.0.1:6379",
                    "cmd": "HMGET ${username} password_hash salt",
                    "database": 0,
                    "backend": "redis",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single"
                  },
                  "summary": "password_based authentication with Redis backend"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.cinfo"
                  },
                  {
                    "$ref": "#/components/schemas/authn.kerberos"
                  },
                  {
                    "$ref": "#/components/schemas/authn.gcp_device"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap_deprecated"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the authenticator of the specified gateway.",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete gateway authenticator",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Enables the authenticator for client authentication for the specified gateway. <br/><br/>When the authenticator is not configured or turned off, all client connections are assumed to be allowed. <br/><br/>Note: Only one authenticator is allowed to be enabled at a time in the gateway, rather than allowing multiple authenticators to be configured to form an authentication chain as in MQTT.",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "server": "127.0.0.1:6379",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.cinfo"
                    },
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Create authenticator for gateway",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "value": {
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "algorithm": "hmac-based",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  },
                  "summary": "JWT authentication"
                },
                "password_based:built_in_database": {
                  "value": {
                    "mechanism": "password_based",
                    "backend": "built_in_database",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  },
                  "summary": "Built-in password_based authentication"
                },
                "password_based:http": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "5s",
                    "mechanism": "password_based",
                    "pool_size": 8,
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://127.0.0.1:18083",
                    "method": "post",
                    "backend": "http",
                    "request_timeout": "5s",
                    "enable_pipelining": 100
                  },
                  "summary": "password_based authentication through external HTTP API"
                },
                "password_based:mongodb": {
                  "value": {
                    "mechanism": "password_based",
                    "filter": {
                      "username": "${username}"
                    },
                    "server": "127.0.0.1:27017",
                    "database": "example",
                    "backend": "mongodb",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "collection": "users",
                    "is_superuser_field": "is_superuser",
                    "password_hash_field": "password_hash",
                    "salt_field": "salt"
                  },
                  "summary": "password_based authentication with MongoDB backend"
                },
                "password_based:redis": {
                  "value": {
                    "mechanism": "password_based",
                    "server": "127.0.0.1:6379",
                    "cmd": "HMGET ${username} password_hash salt",
                    "database": 0,
                    "backend": "redis",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single"
                  },
                  "summary": "password_based authentication with Redis backend"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.cinfo"
                  },
                  {
                    "$ref": "#/components/schemas/authn.kerberos"
                  },
                  {
                    "$ref": "#/components/schemas/authn.gcp_device"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap_deprecated"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}/unsubscribe/bulk": {
      "post": {
        "description": "Unsubscribe bulk",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Unsubscribe OK"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.unsubscribe"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}/subscribe/bulk": {
      "post": {
        "description": "Subscribe bulk",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_subscriptions.subscription"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.subscribe"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sources/{id}/{operation}": {
      "post": {
        "description": "Start bridge on all nodes in the cluster.",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "Operation can be one of: 'start'.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start"
              ]
            },
            "example": "start"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Manually start a bridge",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/connectors/{id}/{operation}": {
      "post": {
        "description": "Start connector on all nodes in the cluster.",
        "tags": [
          "Connectors"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The connector id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_connector"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "Operation can be one of: 'start'.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start"
              ]
            },
            "example": "start"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Connector not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Manually start a connector",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/alarm": {
      "get": {
        "description": "Get the sub-configurations under *alarm*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.alarm"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "config not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get the sub-configurations under *alarm*",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *alarm*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.alarm"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update the sub-configurations under *alarm*",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx.alarm"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/load_rebalance/{node}/evacuation/stop": {
      "post": {
        "description": "Stop evacuation process",
        "tags": [
          "Load Rebalance"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "Node name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response is empty",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Stop evacuation on a node",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/file_transfer": {
      "get": {
        "description": "Get the sub-configurations under *file_transfer*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.file_transfer"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "config not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get the sub-configurations under *file_transfer*",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *file_transfer*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.file_transfer"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update the sub-configurations under *file_transfer*",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx.file_transfer"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/actions": {
      "get": {
        "description": "List all created bridges.",
        "tags": [
          "Actions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "name": "my_http_action",
                    "status": "connected",
                    "type": "http",
                    "enable": true,
                    "parameters": {
                      "path": "/room/${room_no}",
                      "body": "${.}",
                      "headers": {},
                      "method": "post"
                    },
                    "connector": "my_http_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "async",
                      "health_check_interval": "15s"
                    }
                  },
                  {
                    "name": "my_confluent_producer_action",
                    "status": "connected",
                    "type": "confluent_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${.pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "connector": "my_confluent_producer_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "local_topic": "mqtt/local/topic"
                  },
                  {
                    "name": "iotdb_action",
                    "status": "connected",
                    "type": "iotdb",
                    "description": "My example iotdb action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "timestamp": "now",
                          "value": "${st}",
                          "data_type": "BOOLEAN",
                          "measurement": "status"
                        }
                      ],
                      "device_id": "my_device",
                      "is_aligned": false
                    },
                    "connector": "iotdb_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "status": "connected",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "direct",
                      "content": "${.payload}",
                      "blob": "${.payload.blob}",
                      "container": "${.payload.container}"
                    },
                    "connector": "my_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "0ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "status": "connected",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into mqtt (key, value) values (${.id}, ${.payload})"
                    },
                    "connector": "my_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "datalayers_action",
                    "status": "connected",
                    "type": "datalayers",
                    "description": "My example datalayers action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "datalayers_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "my_azure_event_hub_producer_action",
                    "status": "connected",
                    "type": "azure_event_hub_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${.pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "connector": "my_azure_event_hub_producer_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "local_topic": "mqtt/local/topic"
                  },
                  {
                    "name": "my_kafka_producer_action",
                    "status": "connected",
                    "type": "kafka_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "10MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partitions_limit": "all_partitions",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "connector": "my_kafka_producer_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "32s"
                    },
                    "local_topic": "mqtt/local/topic"
                  },
                  {
                    "name": "kinesis_action",
                    "status": "connected",
                    "type": "kinesis",
                    "description": "My example kinesis action",
                    "enable": true,
                    "parameters": {
                      "partition_key": "any_key",
                      "payload_template": "${.}",
                      "stream_name": "my_stream"
                    },
                    "connector": "kinesis_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "my_action",
                    "status": "connected",
                    "type": "pgsql",
                    "enable": true,
                    "connector": "my_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  {
                    "name": "mysql_action",
                    "status": "connected",
                    "type": "mysql",
                    "description": "My example mysql action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))"
                    },
                    "connector": "mysql_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "mqtt_action",
                    "status": "connected",
                    "type": "mqtt",
                    "description": "My example mqtt action",
                    "enable": true,
                    "parameters": {
                      "retain": false,
                      "payload": "${.payload}",
                      "topic": "remote/topic",
                      "qos": 2
                    },
                    "connector": "mqtt_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "rabbitmq_action",
                    "status": "connected",
                    "type": "rabbitmq",
                    "description": "My example rabbitmq action",
                    "enable": true,
                    "parameters": {
                      "exchange": "test_exchange",
                      "payload_template": "${.payload}",
                      "routing_key": "/",
                      "wait_for_publish_confirmations": true,
                      "delivery_mode": "non_persistent",
                      "publish_confirmation_timeout": "30s"
                    },
                    "connector": "rabbitmq_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "status": "connected",
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "connector": "my_connector_name",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "batch_size": 1
                    }
                  },
                  {
                    "name": "dynamo_action",
                    "status": "connected",
                    "type": "dynamo",
                    "description": "My example dynamo action",
                    "enable": true,
                    "connector": "dynamo_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "hash_key": "clientid",
                      "table": "mqtt_msg",
                      "template": ""
                    }
                  },
                  {
                    "name": "tdengine_action",
                    "status": "connected",
                    "type": "tdengine",
                    "description": "My example tdengine action",
                    "enable": true,
                    "parameters": {
                      "database": "mqtt",
                      "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})"
                    },
                    "connector": "tdengine_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "status": "connected",
                    "description": "My upload action",
                    "enable": true,
                    "parameters": {
                      "mode": "direct",
                      "key": "${topic}",
                      "content": "${payload}",
                      "bucket": "${clientid}",
                      "acl": "public_read"
                    },
                    "connector": "my_s3_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "query_mode": "sync",
                      "inflight_window": 10
                    }
                  },
                  {
                    "name": "greptimedb_action",
                    "status": "connected",
                    "type": "greptimedb",
                    "description": "My example greptimedb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                    },
                    "connector": "greptimedb_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "opents_action",
                    "status": "connected",
                    "type": "opents",
                    "description": "My example opents action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "value": "${value}",
                          "tags": "${tags}",
                          "metric": "${metric}"
                        }
                      ]
                    },
                    "connector": "opents_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "oracle_action",
                    "status": "connected",
                    "type": "oracle",
                    "description": "My example oracle action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})"
                    },
                    "connector": "oracle_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "status": "connected",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "connect_timeout": "15s",
                      "pool_size": 16,
                      "private_key": "file:///path/to/secret.pem",
                      "max_retries": 3,
                      "schema": "public",
                      "database": "testdatabase",
                      "stage": "teststage",
                      "pipe": "testpipe",
                      "pipelining": 100,
                      "aggregation": {
                        "container": {
                          "type": "csv"
                        },
                        "max_records": 1000,
                        "time_interval": "60s"
                      },
                      "pipe_user": "pipeuser"
                    },
                    "connector": "my_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "batch_size": 10000,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "60s",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "hstreamdb_action",
                    "status": "connected",
                    "type": "hstreamdb",
                    "description": "My example hstreamdb action",
                    "enable": true,
                    "connector": "hstreamdb_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "aggregation_pool_size": 8,
                      "partition_key": "hej",
                      "record_template": "${payload}",
                      "stream": "mqtt_message",
                      "writer_pool_size": 8
                    }
                  },
                  {
                    "name": "cassandra_action",
                    "status": "connected",
                    "type": "cassandra",
                    "description": "My example cassandra action",
                    "enable": true,
                    "parameters": {
                      "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})"
                    },
                    "connector": "cassandra_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "clickhouse_action",
                    "status": "connected",
                    "type": "clickhouse",
                    "description": "My example clickhouse action",
                    "enable": true,
                    "parameters": {
                      "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                      "batch_value_separator": ", "
                    },
                    "connector": "clickhouse_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "influxdb_action",
                    "status": "connected",
                    "type": "influxdb",
                    "description": "My example influxdb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "influxdb_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "sqlserver_action",
                    "status": "connected",
                    "type": "sqlserver",
                    "description": "My example sqlserver action",
                    "enable": true,
                    "connector": "sqlserver_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )"
                    }
                  },
                  {
                    "name": "my_action",
                    "status": "connected",
                    "type": "matrix",
                    "enable": true,
                    "connector": "my_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  {
                    "status": "connected",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "blob": "${action}/${node}/${datetime.rfc3339}/${sequence}",
                      "container": "mycontainer",
                      "aggregation": {
                        "container": {
                          "type": "csv",
                          "column_order": [
                            "a",
                            "b"
                          ]
                        },
                        "max_records": 10000,
                        "time_interval": "4s"
                      }
                    },
                    "connector": "my_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "batch_size": 100,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "10ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "rocketmq_action",
                    "status": "connected",
                    "type": "rocketmq",
                    "description": "My example rocketmq action",
                    "enable": true,
                    "connector": "rocketmq_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "refresh_interval": "3s",
                      "send_buffer": "1024KB",
                      "sync_timeout": "3s",
                      "template": "",
                      "topic": "TopicTest"
                    }
                  },
                  {
                    "name": "pulsar_action",
                    "status": "connected",
                    "type": "pulsar",
                    "description": "My example pulsar action",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "pulsar_topic": "test_topic",
                      "sync_timeout": "5s"
                    },
                    "connector": "pulsar_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "syskeeper_forwarder",
                    "status": "connected",
                    "type": "syskeeper_forwarder",
                    "enable": true,
                    "parameters": {
                      "template": "${payload}",
                      "target_topic": "${topic}"
                    },
                    "connector": "syskeeper_forwarder",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "worker_pool_size": 16
                    }
                  },
                  {
                    "status": "connected",
                    "description": "My aggregated upload action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "key": "${action}/${node}/${datetime.rfc3339utc}_N${sequence}.csv",
                      "bucket": "mqtt-aggregated",
                      "acl": "public_read",
                      "aggregation": {
                        "max_records": 100000,
                        "time_interval": "15m"
                      },
                      "container": {
                        "type": "csv",
                        "column_order": [
                          "clientid",
                          "topic",
                          "publish_received_at"
                        ]
                      }
                    },
                    "connector": "my_s3_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "query_mode": "async",
                      "inflight_window": 100,
                      "health_check_interval": "10s"
                    }
                  },
                  {
                    "name": "elasticsearch_action",
                    "status": "connected",
                    "type": "elasticsearch",
                    "description": "My example elasticsearch action",
                    "enable": true,
                    "parameters": {
                      "index": "${payload.index}",
                      "action": "create",
                      "doc": "${payload.doc}",
                      "overwrite": true
                    },
                    "connector": "elasticsearch_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "status": "connected",
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "payload_template": "${payload}",
                      "attributes_template": [
                        {
                          "value": "${payload.attrs.v}",
                          "key": "${payload.attrs.k}"
                        }
                      ],
                      "ordering_key_template": "${payload.ok}",
                      "pubsub_topic": "mytopic"
                    },
                    "connector": "my_connector_name",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "batch_size": 5
                    },
                    "local_topic": "local/topic"
                  },
                  {
                    "name": "mongodb_action",
                    "status": "connected",
                    "type": "mongodb",
                    "description": "My example mongodb action",
                    "enable": true,
                    "parameters": {
                      "collection": "mycol"
                    },
                    "connector": "mongodb_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "my_action",
                    "status": "connected",
                    "type": "timescale",
                    "enable": true,
                    "connector": "my_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/bridge_timescale.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mongodb.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/gcp_pubsub_producer.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_elasticsearch.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/action_azure_blob_storage.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/syskeeper.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/pulsar.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/rocketmq.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_matrix.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_sqlserver.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_influxdb.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_clickhouse.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_cassa.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_hstreamdb.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/action_snowflake.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_oracle.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_opents.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_greptimedb.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_s3.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_tdengine.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_dynamo.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/redis.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_rabbitmq.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mqtt_publisher.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mysql.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_pgsql.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_kinesis.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_kafka.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_azure_event_hub.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_datalayers.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/action_couchbase.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_iotdb.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/confluent.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_http.get_bridge_v2"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "summary": "List bridges",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create a new bridge by type and name.",
        "tags": [
          "Actions"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "http": {
                    "value": {
                      "name": "my_http_action",
                      "status": "connected",
                      "type": "http",
                      "enable": true,
                      "parameters": {
                        "path": "/room/${room_no}",
                        "body": "${.}",
                        "headers": {},
                        "method": "post"
                      },
                      "connector": "my_http_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16,
                        "query_mode": "async",
                        "health_check_interval": "15s"
                      }
                    },
                    "summary": "HTTP Action"
                  },
                  "confluent_producer": {
                    "value": {
                      "name": "my_confluent_producer_action",
                      "status": "connected",
                      "type": "confluent_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB",
                          "memory_overload_protection": true
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_linger_bytes": "10MB",
                        "max_batch_bytes": "896KB",
                        "kafka_headers": "${.pub_props}",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_header_value_encode_mode": "none",
                        "partition_strategy": "random",
                        "partition_count_refresh_interval": "60s",
                        "max_linger_time": "5ms"
                      },
                      "connector": "my_confluent_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Confluent Action"
                  },
                  "iotdb": {
                    "value": {
                      "name": "iotdb_action",
                      "status": "connected",
                      "type": "iotdb",
                      "description": "My example iotdb action",
                      "enable": true,
                      "parameters": {
                        "data": [
                          {
                            "timestamp": "now",
                            "value": "${st}",
                            "data_type": "BOOLEAN",
                            "measurement": "status"
                          }
                        ],
                        "device_id": "my_device",
                        "is_aligned": false
                      },
                      "connector": "iotdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Apache IoTDB Bridge"
                  },
                  "direct_azure_blob_storage": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "mode": "direct",
                        "content": "${.payload}",
                        "blob": "${.payload.blob}",
                        "container": "${.payload.container}"
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "batch_time": "0ms",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Azure Blob Storage Direct Upload Action"
                  },
                  "couchbase": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into mqtt (key, value) values (${.id}, ${.payload})"
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Couchbase Action"
                  },
                  "datalayers": {
                    "value": {
                      "name": "datalayers_action",
                      "status": "connected",
                      "type": "datalayers",
                      "description": "My example datalayers action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                      },
                      "connector": "datalayers_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Datalayers Action"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer_action",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB",
                          "memory_overload_protection": true
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_linger_bytes": "10MB",
                        "max_batch_bytes": "896KB",
                        "kafka_headers": "${.pub_props}",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_header_value_encode_mode": "none",
                        "partition_strategy": "random",
                        "partition_count_refresh_interval": "60s",
                        "max_linger_time": "5ms"
                      },
                      "connector": "my_azure_event_hub_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Azure Event Hub Action"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "timestamp": "${.timestamp}",
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "segment_bytes": "10MB",
                          "per_partition_limit": "2GB",
                          "memory_overload_protection": true
                        },
                        "compression": "no_compression",
                        "topic": "kafka-topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_linger_bytes": "10MB",
                        "max_batch_bytes": "896KB",
                        "kafka_headers": "${pub_props}",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_header_value_encode_mode": "none",
                        "partitions_limit": "all_partitions",
                        "partition_strategy": "random",
                        "partition_count_refresh_interval": "60s",
                        "max_linger_time": "5ms"
                      },
                      "connector": "my_kafka_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "32s"
                      },
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Kafka Producer Action"
                  },
                  "kinesis": {
                    "value": {
                      "name": "kinesis_action",
                      "status": "connected",
                      "type": "kinesis",
                      "description": "My example kinesis action",
                      "enable": true,
                      "parameters": {
                        "partition_key": "any_key",
                        "payload_template": "${.}",
                        "stream_name": "my_stream"
                      },
                      "connector": "kinesis_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Kinesis Action"
                  },
                  "pgsql": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "pgsql",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "PostgreSQL Action"
                  },
                  "mysql": {
                    "value": {
                      "name": "mysql_action",
                      "status": "connected",
                      "type": "mysql",
                      "description": "My example mysql action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))"
                      },
                      "connector": "mysql_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MySQL Action"
                  },
                  "mqtt": {
                    "value": {
                      "name": "mqtt_action",
                      "status": "connected",
                      "type": "mqtt",
                      "description": "My example mqtt action",
                      "enable": true,
                      "parameters": {
                        "retain": false,
                        "payload": "${.payload}",
                        "topic": "remote/topic",
                        "qos": 2
                      },
                      "connector": "mqtt_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MQTT Producer Action"
                  },
                  "rabbitmq": {
                    "value": {
                      "name": "rabbitmq_action",
                      "status": "connected",
                      "type": "rabbitmq",
                      "description": "My example rabbitmq action",
                      "enable": true,
                      "parameters": {
                        "exchange": "test_exchange",
                        "payload_template": "${.payload}",
                        "routing_key": "/",
                        "wait_for_publish_confirmations": true,
                        "delivery_mode": "non_persistent",
                        "publish_confirmation_timeout": "30s"
                      },
                      "connector": "rabbitmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "RabbitMQ Producer Action"
                  },
                  "redis": {
                    "value": {
                      "status": "connected",
                      "description": "My action",
                      "enable": true,
                      "parameters": {
                        "command_template": [
                          "LPUSH",
                          "MSGS",
                          "${payload}"
                        ]
                      },
                      "connector": "my_connector_name",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1
                      }
                    },
                    "summary": "Redis Action"
                  },
                  "dynamo": {
                    "value": {
                      "name": "dynamo_action",
                      "status": "connected",
                      "type": "dynamo",
                      "description": "My example dynamo action",
                      "enable": true,
                      "connector": "dynamo_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "hash_key": "clientid",
                        "table": "mqtt_msg",
                        "template": ""
                      }
                    },
                    "summary": "DynamoDB Action"
                  },
                  "tdengine": {
                    "value": {
                      "name": "tdengine_action",
                      "status": "connected",
                      "type": "tdengine",
                      "description": "My example tdengine action",
                      "enable": true,
                      "parameters": {
                        "database": "mqtt",
                        "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})"
                      },
                      "connector": "tdengine_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "TDengine Action"
                  },
                  "s3": {
                    "value": {
                      "status": "connected",
                      "description": "My upload action",
                      "enable": true,
                      "parameters": {
                        "mode": "direct",
                        "key": "${topic}",
                        "content": "${payload}",
                        "bucket": "${clientid}",
                        "acl": "public_read"
                      },
                      "connector": "my_s3_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "query_mode": "sync",
                        "inflight_window": 10
                      }
                    },
                    "summary": "S3 Direct Upload"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "greptimedb_action",
                      "status": "connected",
                      "type": "greptimedb",
                      "description": "My example greptimedb action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                      },
                      "connector": "greptimedb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "GreptimeDB Action"
                  },
                  "opents": {
                    "value": {
                      "name": "opents_action",
                      "status": "connected",
                      "type": "opents",
                      "description": "My example opents action",
                      "enable": true,
                      "parameters": {
                        "data": [
                          {
                            "value": "${value}",
                            "tags": "${tags}",
                            "metric": "${metric}"
                          }
                        ]
                      },
                      "connector": "opents_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "OpenTSDB Action"
                  },
                  "oracle": {
                    "value": {
                      "name": "oracle_action",
                      "status": "connected",
                      "type": "oracle",
                      "description": "My example oracle action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})"
                      },
                      "connector": "oracle_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Oracle Action"
                  },
                  "snowflake": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "mode": "aggregated",
                        "connect_timeout": "15s",
                        "pool_size": 16,
                        "private_key": "file:///path/to/secret.pem",
                        "max_retries": 3,
                        "schema": "public",
                        "database": "testdatabase",
                        "stage": "teststage",
                        "pipe": "testpipe",
                        "pipelining": 100,
                        "aggregation": {
                          "container": {
                            "type": "csv"
                          },
                          "max_records": 1000,
                          "time_interval": "60s"
                        },
                        "pipe_user": "pipeuser"
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 10000,
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "batch_time": "60s",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Snowflake Action"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "hstreamdb_action",
                      "status": "connected",
                      "type": "hstreamdb",
                      "description": "My example hstreamdb action",
                      "enable": true,
                      "connector": "hstreamdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "aggregation_pool_size": 8,
                        "partition_key": "hej",
                        "record_template": "${payload}",
                        "stream": "mqtt_message",
                        "writer_pool_size": 8
                      }
                    },
                    "summary": "HStreamDB Action"
                  },
                  "cassandra": {
                    "value": {
                      "name": "cassandra_action",
                      "status": "connected",
                      "type": "cassandra",
                      "description": "My example cassandra action",
                      "enable": true,
                      "parameters": {
                        "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})"
                      },
                      "connector": "cassandra_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Cassandra Action"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "clickhouse_action",
                      "status": "connected",
                      "type": "clickhouse",
                      "description": "My example clickhouse action",
                      "enable": true,
                      "parameters": {
                        "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                        "batch_value_separator": ", "
                      },
                      "connector": "clickhouse_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "ClickHouse Action"
                  },
                  "influxdb": {
                    "value": {
                      "name": "influxdb_action",
                      "status": "connected",
                      "type": "influxdb",
                      "description": "My example influxdb action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                      },
                      "connector": "influxdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "InfluxDB Action"
                  },
                  "sqlserver": {
                    "value": {
                      "name": "sqlserver_action",
                      "status": "connected",
                      "type": "sqlserver",
                      "description": "My example sqlserver action",
                      "enable": true,
                      "connector": "sqlserver_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )"
                      }
                    },
                    "summary": "Microsoft SQL Server Action"
                  },
                  "matrix": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "matrix",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "Matrix Action"
                  },
                  "aggregated_azure_blob_storage": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "mode": "aggregated",
                        "blob": "${action}/${node}/${datetime.rfc3339}/${sequence}",
                        "container": "mycontainer",
                        "aggregation": {
                          "container": {
                            "type": "csv",
                            "column_order": [
                              "a",
                              "b"
                            ]
                          },
                          "max_records": 10000,
                          "time_interval": "4s"
                        }
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 100,
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "batch_time": "10ms",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Azure Blob Storage Aggregated Upload Action"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "rocketmq_action",
                      "status": "connected",
                      "type": "rocketmq",
                      "description": "My example rocketmq action",
                      "enable": true,
                      "connector": "rocketmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "refresh_interval": "3s",
                        "send_buffer": "1024KB",
                        "sync_timeout": "3s",
                        "template": "",
                        "topic": "TopicTest"
                      }
                    },
                    "summary": "RocketMQ Action"
                  },
                  "pulsar": {
                    "value": {
                      "name": "pulsar_action",
                      "status": "connected",
                      "type": "pulsar",
                      "description": "My example pulsar action",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "pulsar_topic": "test_topic",
                        "sync_timeout": "5s"
                      },
                      "connector": "pulsar_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Pulsar Producer Action"
                  },
                  "syskeeper_forwarder": {
                    "value": {
                      "name": "syskeeper_forwarder",
                      "status": "connected",
                      "type": "syskeeper_forwarder",
                      "enable": true,
                      "parameters": {
                        "template": "${payload}",
                        "target_topic": "${topic}"
                      },
                      "connector": "syskeeper_forwarder",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16
                      }
                    },
                    "summary": "Syskeeper Forwarder Bridge"
                  },
                  "s3_aggreg": {
                    "value": {
                      "status": "connected",
                      "description": "My aggregated upload action",
                      "enable": true,
                      "parameters": {
                        "mode": "aggregated",
                        "key": "${action}/${node}/${datetime.rfc3339utc}_N${sequence}.csv",
                        "bucket": "mqtt-aggregated",
                        "acl": "public_read",
                        "aggregation": {
                          "max_records": 100000,
                          "time_interval": "15m"
                        },
                        "container": {
                          "type": "csv",
                          "column_order": [
                            "clientid",
                            "topic",
                            "publish_received_at"
                          ]
                        }
                      },
                      "connector": "my_s3_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "query_mode": "async",
                        "inflight_window": 100,
                        "health_check_interval": "10s"
                      }
                    },
                    "summary": "S3 Aggregated Upload"
                  },
                  "elasticsearch": {
                    "value": {
                      "name": "elasticsearch_action",
                      "status": "connected",
                      "type": "elasticsearch",
                      "description": "My example elasticsearch action",
                      "enable": true,
                      "parameters": {
                        "index": "${payload.index}",
                        "action": "create",
                        "doc": "${payload.doc}",
                        "overwrite": true
                      },
                      "connector": "elasticsearch_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Elastic Search Bridge"
                  },
                  "gcp_pubsub_producer": {
                    "value": {
                      "status": "connected",
                      "description": "My action",
                      "enable": true,
                      "parameters": {
                        "payload_template": "${payload}",
                        "attributes_template": [
                          {
                            "value": "${payload.attrs.v}",
                            "key": "${payload.attrs.k}"
                          }
                        ],
                        "ordering_key_template": "${payload.ok}",
                        "pubsub_topic": "mytopic"
                      },
                      "connector": "my_connector_name",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 5
                      },
                      "local_topic": "local/topic"
                    },
                    "summary": "GCP PubSub Producer Action"
                  },
                  "mongodb": {
                    "value": {
                      "name": "mongodb_action",
                      "status": "connected",
                      "type": "mongodb",
                      "description": "My example mongodb action",
                      "enable": true,
                      "parameters": {
                        "collection": "mycol"
                      },
                      "connector": "mongodb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MongoDB Action"
                  },
                  "timescale": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "timescale",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "Timescale Action"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_producer.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_elasticsearch.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/action_azure_blob_storage.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/syskeeper.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/pulsar.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/action_snowflake.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_opents.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_s3.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_tdengine.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/redis.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt_publisher.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pgsql.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_datalayers.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/action_couchbase.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_iotdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/confluent.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get_bridge_v2"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Create bridge",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "http": {
                  "value": {
                    "name": "my_http_action",
                    "type": "http",
                    "enable": true,
                    "parameters": {
                      "path": "/room/${room_no}",
                      "body": "${.}",
                      "headers": {},
                      "method": "post"
                    },
                    "connector": "my_http_connector",
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "async",
                      "health_check_interval": "15s"
                    }
                  },
                  "summary": "HTTP Action"
                },
                "confluent_producer": {
                  "value": {
                    "name": "my_confluent_producer_action",
                    "type": "confluent_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${.pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "connector": "my_confluent_producer_connector",
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Confluent Action"
                },
                "iotdb": {
                  "value": {
                    "name": "iotdb_action",
                    "type": "iotdb",
                    "description": "My example iotdb action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "timestamp": "now",
                          "value": "${st}",
                          "data_type": "BOOLEAN",
                          "measurement": "status"
                        }
                      ],
                      "device_id": "my_device",
                      "is_aligned": false
                    },
                    "connector": "iotdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Apache IoTDB Bridge"
                },
                "direct_azure_blob_storage": {
                  "value": {
                    "name": "my_action",
                    "type": "azure_blob_storage",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "direct",
                      "content": "${.payload}",
                      "blob": "${.payload.blob}",
                      "container": "${.payload.container}"
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "0ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Azure Blob Storage Direct Upload Action"
                },
                "couchbase": {
                  "value": {
                    "name": "my_action",
                    "type": "couchbase",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into mqtt (key, value) values (${.id}, ${.payload})"
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Couchbase Action"
                },
                "datalayers": {
                  "value": {
                    "name": "datalayers_action",
                    "type": "datalayers",
                    "description": "My example datalayers action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "datalayers_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Datalayers Action"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "name": "my_azure_event_hub_producer_action",
                    "type": "azure_event_hub_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${.pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "connector": "my_azure_event_hub_producer_connector",
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Azure Event Hub Action"
                },
                "kafka_producer": {
                  "value": {
                    "name": "my_kafka_producer_action",
                    "type": "kafka_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "10MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partitions_limit": "all_partitions",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "connector": "my_kafka_producer_connector",
                    "resource_opts": {
                      "health_check_interval": "32s"
                    },
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Kafka Producer Action"
                },
                "kinesis": {
                  "value": {
                    "name": "kinesis_action",
                    "type": "kinesis",
                    "description": "My example kinesis action",
                    "enable": true,
                    "parameters": {
                      "partition_key": "any_key",
                      "payload_template": "${.}",
                      "stream_name": "my_stream"
                    },
                    "connector": "kinesis_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Kinesis Action"
                },
                "pgsql": {
                  "value": {
                    "name": "my_action",
                    "type": "pgsql",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "PostgreSQL Action"
                },
                "mysql": {
                  "value": {
                    "name": "mysql_action",
                    "type": "mysql",
                    "description": "My example mysql action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))"
                    },
                    "connector": "mysql_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MySQL Action"
                },
                "mqtt": {
                  "value": {
                    "name": "mqtt_action",
                    "type": "mqtt",
                    "description": "My example mqtt action",
                    "enable": true,
                    "parameters": {
                      "retain": false,
                      "payload": "${.payload}",
                      "topic": "remote/topic",
                      "qos": 2
                    },
                    "connector": "mqtt_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MQTT Producer Action"
                },
                "rabbitmq": {
                  "value": {
                    "name": "rabbitmq_action",
                    "type": "rabbitmq",
                    "description": "My example rabbitmq action",
                    "enable": true,
                    "parameters": {
                      "exchange": "test_exchange",
                      "payload_template": "${.payload}",
                      "routing_key": "/",
                      "wait_for_publish_confirmations": true,
                      "delivery_mode": "non_persistent",
                      "publish_confirmation_timeout": "30s"
                    },
                    "connector": "rabbitmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "RabbitMQ Producer Action"
                },
                "redis": {
                  "value": {
                    "name": "my_action",
                    "type": "redis",
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "connector": "my_connector_name",
                    "resource_opts": {
                      "batch_size": 1
                    }
                  },
                  "summary": "Redis Action"
                },
                "dynamo": {
                  "value": {
                    "name": "dynamo_action",
                    "type": "dynamo",
                    "description": "My example dynamo action",
                    "enable": true,
                    "connector": "dynamo_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "hash_key": "clientid",
                      "table": "mqtt_msg",
                      "template": ""
                    }
                  },
                  "summary": "DynamoDB Action"
                },
                "tdengine": {
                  "value": {
                    "name": "tdengine_action",
                    "type": "tdengine",
                    "description": "My example tdengine action",
                    "enable": true,
                    "parameters": {
                      "database": "mqtt",
                      "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})"
                    },
                    "connector": "tdengine_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "TDengine Action"
                },
                "s3": {
                  "value": {
                    "name": "my_s3_action",
                    "type": "s3",
                    "description": "My upload action",
                    "enable": true,
                    "parameters": {
                      "mode": "direct",
                      "key": "${topic}",
                      "content": "${payload}",
                      "bucket": "${clientid}",
                      "acl": "public_read"
                    },
                    "connector": "my_s3_connector",
                    "resource_opts": {
                      "query_mode": "sync",
                      "inflight_window": 10
                    }
                  },
                  "summary": "S3 Direct Upload"
                },
                "greptimedb": {
                  "value": {
                    "name": "greptimedb_action",
                    "type": "greptimedb",
                    "description": "My example greptimedb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                    },
                    "connector": "greptimedb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "GreptimeDB Action"
                },
                "opents": {
                  "value": {
                    "name": "opents_action",
                    "type": "opents",
                    "description": "My example opents action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "value": "${value}",
                          "tags": "${tags}",
                          "metric": "${metric}"
                        }
                      ]
                    },
                    "connector": "opents_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "OpenTSDB Action"
                },
                "oracle": {
                  "value": {
                    "name": "oracle_action",
                    "type": "oracle",
                    "description": "My example oracle action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})"
                    },
                    "connector": "oracle_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Oracle Action"
                },
                "snowflake": {
                  "value": {
                    "name": "my_action",
                    "type": "snowflake",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "connect_timeout": "15s",
                      "pool_size": 16,
                      "private_key": "file:///path/to/secret.pem",
                      "max_retries": 3,
                      "schema": "public",
                      "database": "testdatabase",
                      "stage": "teststage",
                      "pipe": "testpipe",
                      "pipelining": 100,
                      "aggregation": {
                        "container": {
                          "type": "csv"
                        },
                        "max_records": 1000,
                        "time_interval": "60s"
                      },
                      "pipe_user": "pipeuser"
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 10000,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "60s",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Snowflake Action"
                },
                "hstreamdb": {
                  "value": {
                    "name": "hstreamdb_action",
                    "type": "hstreamdb",
                    "description": "My example hstreamdb action",
                    "enable": true,
                    "connector": "hstreamdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "aggregation_pool_size": 8,
                      "partition_key": "hej",
                      "record_template": "${payload}",
                      "stream": "mqtt_message",
                      "writer_pool_size": 8
                    }
                  },
                  "summary": "HStreamDB Action"
                },
                "cassandra": {
                  "value": {
                    "name": "cassandra_action",
                    "type": "cassandra",
                    "description": "My example cassandra action",
                    "enable": true,
                    "parameters": {
                      "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})"
                    },
                    "connector": "cassandra_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Cassandra Action"
                },
                "clickhouse": {
                  "value": {
                    "name": "clickhouse_action",
                    "type": "clickhouse",
                    "description": "My example clickhouse action",
                    "enable": true,
                    "parameters": {
                      "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                      "batch_value_separator": ", "
                    },
                    "connector": "clickhouse_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "ClickHouse Action"
                },
                "influxdb": {
                  "value": {
                    "name": "influxdb_action",
                    "type": "influxdb",
                    "description": "My example influxdb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "influxdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "InfluxDB Action"
                },
                "sqlserver": {
                  "value": {
                    "name": "sqlserver_action",
                    "type": "sqlserver",
                    "description": "My example sqlserver action",
                    "enable": true,
                    "connector": "sqlserver_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )"
                    }
                  },
                  "summary": "Microsoft SQL Server Action"
                },
                "matrix": {
                  "value": {
                    "name": "my_action",
                    "type": "matrix",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "Matrix Action"
                },
                "aggregated_azure_blob_storage": {
                  "value": {
                    "name": "my_action",
                    "type": "azure_blob_storage",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "blob": "${action}/${node}/${datetime.rfc3339}/${sequence}",
                      "container": "mycontainer",
                      "aggregation": {
                        "container": {
                          "type": "csv",
                          "column_order": [
                            "a",
                            "b"
                          ]
                        },
                        "max_records": 10000,
                        "time_interval": "4s"
                      }
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 100,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "10ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Azure Blob Storage Aggregated Upload Action"
                },
                "rocketmq": {
                  "value": {
                    "name": "rocketmq_action",
                    "type": "rocketmq",
                    "description": "My example rocketmq action",
                    "enable": true,
                    "connector": "rocketmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "refresh_interval": "3s",
                      "send_buffer": "1024KB",
                      "sync_timeout": "3s",
                      "template": "",
                      "topic": "TopicTest"
                    }
                  },
                  "summary": "RocketMQ Action"
                },
                "pulsar": {
                  "value": {
                    "name": "pulsar_action",
                    "type": "pulsar",
                    "description": "My example pulsar action",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "pulsar_topic": "test_topic",
                      "sync_timeout": "5s"
                    },
                    "connector": "pulsar_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Pulsar Producer Action"
                },
                "syskeeper_forwarder": {
                  "value": {
                    "name": "syskeeper_forwarder",
                    "type": "syskeeper_forwarder",
                    "enable": true,
                    "parameters": {
                      "template": "${payload}",
                      "target_topic": "${topic}"
                    },
                    "connector": "syskeeper_forwarder",
                    "resource_opts": {
                      "worker_pool_size": 16
                    }
                  },
                  "summary": "Syskeeper Forwarder Bridge"
                },
                "s3_aggreg": {
                  "value": {
                    "name": "my_s3_action",
                    "type": "s3",
                    "description": "My aggregated upload action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "key": "${action}/${node}/${datetime.rfc3339utc}_N${sequence}.csv",
                      "bucket": "mqtt-aggregated",
                      "acl": "public_read",
                      "aggregation": {
                        "max_records": 100000,
                        "time_interval": "15m"
                      },
                      "container": {
                        "type": "csv",
                        "column_order": [
                          "clientid",
                          "topic",
                          "publish_received_at"
                        ]
                      }
                    },
                    "connector": "my_s3_connector",
                    "resource_opts": {
                      "query_mode": "async",
                      "inflight_window": 100,
                      "health_check_interval": "10s"
                    }
                  },
                  "summary": "S3 Aggregated Upload"
                },
                "elasticsearch": {
                  "value": {
                    "name": "elasticsearch_action",
                    "type": "elasticsearch",
                    "description": "My example elasticsearch action",
                    "enable": true,
                    "parameters": {
                      "index": "${payload.index}",
                      "action": "create",
                      "doc": "${payload.doc}",
                      "overwrite": true
                    },
                    "connector": "elasticsearch_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Elastic Search Bridge"
                },
                "gcp_pubsub_producer": {
                  "value": {
                    "name": "my_action",
                    "type": "gcp_pubsub_producer",
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "payload_template": "${payload}",
                      "attributes_template": [
                        {
                          "value": "${payload.attrs.v}",
                          "key": "${payload.attrs.k}"
                        }
                      ],
                      "ordering_key_template": "${payload.ok}",
                      "pubsub_topic": "mytopic"
                    },
                    "connector": "my_connector_name",
                    "resource_opts": {
                      "batch_size": 5
                    },
                    "local_topic": "local/topic"
                  },
                  "summary": "GCP PubSub Producer Action"
                },
                "mongodb": {
                  "value": {
                    "name": "mongodb_action",
                    "type": "mongodb",
                    "description": "My example mongodb action",
                    "enable": true,
                    "parameters": {
                      "collection": "mycol"
                    },
                    "connector": "mongodb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MongoDB Action"
                },
                "timescale": {
                  "value": {
                    "name": "my_action",
                    "type": "timescale",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "Timescale Action"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_timescale.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_producer.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_elasticsearch.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/action_azure_blob_storage.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/syskeeper.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/pulsar.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/action_snowflake.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_opents.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_s3.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_tdengine.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/redis.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt_publisher.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pgsql.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_datalayers.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/action_couchbase.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_iotdb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/confluent.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.post_bridge_v2"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes/{node}": {
      "get": {
        "description": "Get node info",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_mgmt_api_nodes.node_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Get node info successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_nodes.node_info"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ds/storages/{ds}/replicas/{site}": {
      "put": {
        "description": "Add site as a replica for the durable storage",
        "tags": [
          "Durable storage"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ds",
            "description": "Durable storage ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "messages"
          },
          {
            "in": "path",
            "name": "site",
            "description": "Site ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "E9A185F9B43E1E14"
          }
        ],
        "responses": {
          "202": {
            "description": "OK"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Object not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Remove site as a replica for the durable storage",
        "tags": [
          "Durable storage"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ds",
            "description": "Durable storage ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "messages"
          },
          {
            "in": "path",
            "name": "site",
            "description": "Site ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "E9A185F9B43E1E14"
          }
        ],
        "responses": {
          "202": {
            "description": "OK"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Object not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/delayed/messages/{topic}": {
      "delete": {
        "description": "Delete delayed message",
        "tags": [
          "MQTT"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "topic",
            "description": "Topic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete delayed message success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_TOPIC_NAME"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Topic Name"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "MESSAGE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not found delayed message for this topic"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/coap/clients/{clientid}/request": {
      "post": {
        "description": "Send a CoAP request message to the client",
        "tags": [
          "CoAP Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Message ID"
                    },
                    "token": {
                      "type": "string",
                      "description": "Message token, can be empty"
                    },
                    "method": {
                      "type": "string",
                      "description": "Response code"
                    },
                    "payload": {
                      "type": "string",
                      "description": "The content of the payload"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENT_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client not found error"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENT_NOT_RESPONSE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Waiting for client response timeout"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Send a Request to a Client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Message token, can be empty"
                  },
                  "method": {
                    "type": "string",
                    "enum": [
                      "get",
                      "put",
                      "post",
                      "delete"
                    ],
                    "description": "Request method type"
                  },
                  "timeout": {
                    "type": "string",
                    "description": "Timespan for response",
                    "example": "32s"
                  },
                  "content_type": {
                    "type": "string",
                    "enum": [
                      "text/plain",
                      "application/json",
                      "application/octet-stream"
                    ],
                    "description": "Payload type"
                  },
                  "payload": {
                    "type": "string",
                    "description": "The content of the payload"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/listeners/{id}/stop": {
      "post": {
        "description": "Stop the listener on all nodes.",
        "tags": [
          "Listeners"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST",
                        "BAD_LISTENER_ID"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/topics": {
      "get": {
        "description": "Topics list",
        "tags": [
          "Topics"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "topic",
            "description": "Topic Name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "node",
            "description": "Node Name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_topics.topic"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/{node}/invite_async": {
      "put": {
        "description": "Send a join invitation to a node to join the cluster but do not wait for the join result. Join status can be retrieved with `GET api/<version>/invitation`",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cluster.node"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/load_rebalance/{node}/start": {
      "post": {
        "description": "Start rebalance process",
        "tags": [
          "Load Rebalance"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "Node name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response is empty",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Start rebalancing with the node as coordinator",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "rebalance": {
                  "nodes": [
                    "othernode@127.0.0.1"
                  ],
                  "conn_evict_rate": 10,
                  "sess_evict_rate": 20,
                  "wait_takeover": "10s",
                  "wait_health_check": "10s",
                  "rel_sess_threshold": 1.5,
                  "rel_conn_threshold": 1.5,
                  "abs_sess_threshold": 10,
                  "abs_conn_threshold": 10
                }
              },
              "schema": {
                "$ref": "#/components/schemas/load_rebalance.rebalance_start"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources": {
      "get": {
        "description": "List all authorization sources",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_sources.sources"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Add a new source",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Authorization source created successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authz.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authz.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authz.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authz.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authz.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authz.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authz.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authz.builtin_db"
                  },
                  {
                    "$ref": "#/components/schemas/authz.api_file"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/plugins": {
      "get": {
        "description": "Plugins are launched in top-down order.<br/>Use `POST /plugins/{name}/move` to change the boot order.",
        "tags": [
          "Plugins"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/plugins.plugin"
                  }
                }
              }
            }
          }
        },
        "summary": "List all installed plugins",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message_transformations/reorder": {
      "post": {
        "description": "Reorder of all transformations",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "not_found": {
                      "type": "array",
                      "description": "Transformations not found",
                      "items": {
                        "type": "string"
                      }
                    },
                    "not_reordered": {
                      "type": "array",
                      "description": "Transformations not referenced in input",
                      "items": {
                        "type": "string"
                      }
                    },
                    "duplicated": {
                      "type": "array",
                      "description": "Duplicated transformations in input",
                      "items": {
                        "type": "string"
                      }
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Reorder all transformations",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "reorder": {
                  "value": {
                    "order": [
                      "bar",
                      "foo",
                      "baz"
                    ]
                  },
                  "summary": "Update"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/message_transformation_http_api.reorder"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/login": {
      "post": {
        "description": "Get Dashboard Auth Token.",
        "tags": [
          "Dashboard"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "role": {
                      "default": "administrator",
                      "type": "string",
                      "description": "User role",
                      "example": "administrator"
                    },
                    "token": {
                      "type": "string",
                      "description": "Dashboard Auth Token"
                    },
                    "version": {
                      "type": "string",
                      "description": "EMQX Version",
                      "example": "5.0.0"
                    },
                    "license": {
                      "properties": {
                        "edition": {
                          "type": "string",
                          "enum": [
                            "opensource",
                            "enterprise"
                          ],
                          "description": "EMQX License. opensource or enterprise",
                          "example": "opensource"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_USERNAME_OR_PWD"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Login failed. Bad username or password"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Dashboard authentication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Dashboard Username",
                    "maxLength": 100,
                    "example": "admin"
                  },
                  "password": {
                    "type": "string",
                    "description": "Dashboard Password",
                    "maxLength": 100,
                    "example": "public"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": []
      }
    },
    "/bridges/{id}": {
      "get": {
        "description": "Get a bridge by Id",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge Id. Must be of format {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "influxdb_api_v2": {
                    "value": {
                      "name": "demo",
                      "type": "influxdb_api_v2",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "precision": "ms",
                      "org": "examlpe_org",
                      "token": "example_token",
                      "bucket": "example_bucket",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}",
                      "influxdb_type": "influxdb_api_v2"
                    },
                    "summary": "InfluxDB HTTP API V2 Bridge"
                  },
                  "iotdb": {
                    "value": {
                      "name": "My IoTDB Bridge",
                      "type": "iotdb",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "*****",
                        "username": "root"
                      },
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "base_url": "http://iotdb.local:18080/",
                      "pool_type": "random",
                      "resource_opts": {
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "health_check_interval": "15s"
                      },
                      "enable_pipelining": 100,
                      "iotdb_version": "v1.1.x",
                      "device_id": "my_device",
                      "is_aligned": false
                    },
                    "summary": "Apache IoTDB Bridge"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB",
                          "memory_overload_protection": true
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_linger_bytes": "10MB",
                        "max_batch_bytes": "896KB",
                        "kafka_headers": "${.pub_props}",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_header_value_encode_mode": "none",
                        "partition_strategy": "random",
                        "partition_count_refresh_interval": "60s",
                        "max_linger_time": "5ms"
                      },
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic",
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Azure Event Hub Producer Bridge"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "kafka": {
                        "message": {
                          "timestamp": "${.timestamp}",
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "segment_bytes": "10MB",
                          "per_partition_limit": "2GB",
                          "memory_overload_protection": true
                        },
                        "compression": "no_compression",
                        "topic": "kafka-topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_linger_bytes": "10MB",
                        "max_batch_bytes": "896KB",
                        "kafka_headers": "${pub_props}",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_header_value_encode_mode": "none",
                        "partitions_limit": "all_partitions",
                        "partition_strategy": "random",
                        "partition_count_refresh_interval": "60s",
                        "max_linger_time": "5ms"
                      },
                      "local_topic": "mqtt/local/topic",
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "localhost:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Kafka Producer Bridge"
                  },
                  "redis_sentinel": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_sentinel",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "database": 1,
                      "servers": [
                        "127.0.0.1:26379"
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "batch_time": "20ms"
                      },
                      "sentinel": "mymaster",
                      "redis_type": "sentinel",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Sentinel Bridge"
                  },
                  "pulsar_producer": {
                    "value": {
                      "authentication": "none",
                      "batch_size": 1,
                      "buffer": {
                        "memory_overload_protection": true,
                        "mode": "memory",
                        "per_partition_limit": "10MB",
                        "segment_bytes": "5MB"
                      },
                      "compression": "no_compression",
                      "enable": true,
                      "local_topic": "mqtt/topic/-576460752303423482",
                      "max_batch_bytes": "900KB",
                      "message": {
                        "key": "${.clientid}",
                        "value": "${.}"
                      },
                      "name": "pulsar_example_name",
                      "pulsar_topic": "pulsar_example_topic",
                      "retention_period": "infinity",
                      "send_buffer": "1MB",
                      "servers": "pulsar://127.0.0.1:6650",
                      "ssl": {
                        "enable": false,
                        "server_name_indication": "auto",
                        "verify": "verify_none"
                      },
                      "strategy": "key_dispatch",
                      "sync_timeout": "5s",
                      "type": "pulsar_producer"
                    },
                    "summary": "Pulsar Producer Bridge"
                  },
                  "pgsql": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "pgsql",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "PostgreSQL Bridge"
                  },
                  "redis_cluster": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_cluster",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "servers": [
                        "127.0.0.1:6379"
                      ],
                      "resource_opts": {},
                      "redis_type": "cluster",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Cluster Bridge"
                  },
                  "mysql": {
                    "value": {
                      "name": "foo",
                      "type": "mysql",
                      "pool_size": 8,
                      "server": "127.0.0.1:3306",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "test",
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "MySQL Bridge"
                  },
                  "kinesis_producer": {
                    "value": {
                      "name": "foo",
                      "type": "kinesis_producer",
                      "enable": true,
                      "max_retries": 3,
                      "aws_secret_access_key": "******",
                      "resource_opts": {
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 104857600,
                        "inflight_window": 100,
                        "health_check_interval": 15000
                      },
                      "endpoint": "https://kinesis.us-east-1.amazonaws.com",
                      "partition_key": "key",
                      "aws_access_key_id": "aws_access_key_id",
                      "stream_name": "stream_name"
                    },
                    "summary": "Amazon Kinesis Producer Bridge"
                  },
                  "http_example": {
                    "value": {
                      "name": "http_example",
                      "type": "http",
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "15s",
                      "pool_size": 4,
                      "enable": true,
                      "body": "${payload}",
                      "url": "http://localhost:9901/messages/${topic}",
                      "method": "post",
                      "max_retries": 3,
                      "request_timeout": "15s",
                      "pool_type": "random",
                      "resource_opts": {
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 104857600,
                        "inflight_window": 100,
                        "health_check_interval": 15000
                      },
                      "enable_pipelining": 100,
                      "local_topic": "emqx_http/#"
                    },
                    "summary": "HTTP"
                  },
                  "rabbitmq": {
                    "value": {
                      "timeout": 5,
                      "name": "foo",
                      "port": 5672,
                      "type": "rabbitmq",
                      "exchange": "messages",
                      "pool_size": 8,
                      "server": "localhost",
                      "enable": true,
                      "password": "******",
                      "username": "guest",
                      "heartbeat": "30s",
                      "durable": false,
                      "auto_reconnect": "2s",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "payload_template": "",
                      "routing_key": "my_routing_key",
                      "virtual_host": "/",
                      "exchange_type": "topic"
                    },
                    "summary": "RabbitMQ Bridge"
                  },
                  "dynamo": {
                    "value": {
                      "name": "foo",
                      "table": "mqtt",
                      "type": "dynamo",
                      "pool_size": 8,
                      "template": "",
                      "enable": true,
                      "url": "http://127.0.0.1:8000",
                      "aws_secret_access_key": "******",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "aws_access_key_id": "root"
                    },
                    "summary": "DynamoDB Bridge"
                  },
                  "tdengine": {
                    "value": {
                      "name": "foo",
                      "type": "tdengine",
                      "pool_size": 8,
                      "server": "127.0.0.1:6041",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "TDengine Bridge"
                  },
                  "mongodb_single": {
                    "value": {
                      "name": "mongodb_single_demo",
                      "type": "mongodb_single",
                      "pool_size": 8,
                      "server": "localhost:27017",
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "collection": "mycol",
                      "w_mode": "safe",
                      "srv_record": false,
                      "mongo_type": "single"
                    },
                    "summary": "MongoDB (Standalone) Bridge"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "demo",
                      "type": "greptimedb",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:4001",
                      "enable": true,
                      "precision": "ms",
                      "password": "******",
                      "username": "example_username",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "dbname": "example_db",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                    },
                    "summary": "Greptimedb HTTP API V2 Bridge"
                  },
                  "opents": {
                    "value": {
                      "name": "foo",
                      "type": "opents",
                      "pool_size": 8,
                      "server": "http://127.0.0.1:4242",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "enabledb": true
                    },
                    "summary": "OpenTSDB Bridge"
                  },
                  "mongodb_sharded": {
                    "value": {
                      "name": "mongodb_sharded_demo",
                      "type": "mongodb_sharded",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "servers": "localhost:27017, localhost:27018",
                      "collection": "mycol",
                      "w_mode": "safe",
                      "srv_record": false,
                      "mongo_type": "sharded"
                    },
                    "summary": "MongoDB (Sharded) Bridge"
                  },
                  "mongodb_rs": {
                    "value": {
                      "name": "mongodb_rs_demo",
                      "type": "mongodb_rs",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "servers": "localhost:27017, localhost:27018",
                      "collection": "mycol",
                      "r_mode": "safe",
                      "w_mode": "safe",
                      "replica_set_name": "rs",
                      "srv_record": false,
                      "mongo_type": "rs"
                    },
                    "summary": "MongoDB (Replica Set) Bridge"
                  },
                  "oracle": {
                    "value": {
                      "name": "foo",
                      "type": "oracle",
                      "pool_size": 8,
                      "server": "127.0.0.1:1521",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "service_name": "ORCL",
                      "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "sid": "ORCL"
                    },
                    "summary": "Oracle Database Bridge"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "demo",
                      "stream": "stream",
                      "type": "hstreamdb",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "direction": "egress",
                      "url": "http://127.0.0.1:6570",
                      "resource_opts": {
                        "batch_size": 100,
                        "query_mode": "sync",
                        "batch_time": "20ms"
                      },
                      "record_template": "{ \"temperature\": ${payload.temperature}, \"humidity\": ${payload.humidity} }"
                    },
                    "summary": "HStreamDB Bridge"
                  },
                  "influxdb_api_v1": {
                    "value": {
                      "name": "demo",
                      "type": "influxdb_api_v1",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "precision": "ms",
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}",
                      "influxdb_type": "influxdb_api_v1"
                    },
                    "summary": "InfluxDB HTTP API V1 Bridge"
                  },
                  "gcp_pubsub": {
                    "value": {
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      },
                      "pubsub_topic": "mytopic"
                    },
                    "summary": "GCP PubSub Producer Bridge"
                  },
                  "redis_single": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_single",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "server": "127.0.0.1:6379",
                      "enable": true,
                      "password": "******",
                      "database": 1,
                      "resource_opts": {
                        "batch_size": 1,
                        "batch_time": "20ms"
                      },
                      "redis_type": "single",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Single Node Bridge"
                  },
                  "mqtt_example": {
                    "value": {
                      "name": "mqtt_example",
                      "type": "mqtt",
                      "keepalive": "300s",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:1883",
                      "enable": true,
                      "password": "******",
                      "username": "foo",
                      "proto_ver": "v4",
                      "clean_start": true,
                      "retry_interval": "15s",
                      "max_inflight": 100,
                      "resource_opts": {
                        "query_mode": "sync",
                        "max_buffer_bytes": 104857600,
                        "health_check_interval": "15s"
                      },
                      "ingress": {
                        "local": {
                          "retain": "${retain}",
                          "payload": "${payload}",
                          "topic": "from_aws/${topic}",
                          "qos": "${qos}"
                        },
                        "remote": {
                          "topic": "aws/#",
                          "qos": 1
                        }
                      },
                      "egress": {
                        "local": {
                          "topic": "emqx/#"
                        },
                        "remote": {
                          "retain": false,
                          "payload": "${payload}",
                          "topic": "from_emqx/${topic}",
                          "qos": "${qos}"
                        }
                      }
                    },
                    "summary": "MQTT Bridge"
                  },
                  "cassandra": {
                    "value": {
                      "name": "foo",
                      "type": "cassandra",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
                      "servers": "127.0.0.1:9042",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "keyspace": "mqtt"
                    },
                    "summary": "Cassandra Bridge"
                  },
                  "gcp_pubsub_consumer": {
                    "value": {
                      "connect_timeout": "15s",
                      "consumer": {
                        "topic_mapping": [
                          {
                            "qos": 1,
                            "mqtt_topic": "mqtt/topic/1",
                            "payload_template": "${.}",
                            "pubsub_topic": "pubsub-topic-1"
                          },
                          {
                            "qos": 2,
                            "mqtt_topic": "mqtt/topic/2",
                            "payload_template": "v = ${.value}, a = ${.attributes}, o = ${.ordering_key}",
                            "pubsub_topic": "pubsub-topic-2"
                          }
                        ],
                        "pull_max_messages": 100
                      },
                      "resource_opts": {
                        "request_ttl": "20s"
                      },
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Consumer Bridge"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "foo",
                      "type": "clickhouse",
                      "pool_size": 8,
                      "server": "127.0.0.1:8123",
                      "enable": true,
                      "password": "******",
                      "username": "default",
                      "database": "mqtt",
                      "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "batch_value_separator": ", "
                    },
                    "summary": "Clickhouse Bridge"
                  },
                  "sqlserver": {
                    "value": {
                      "driver": "ms-sql",
                      "name": "bar",
                      "type": "sqlserver",
                      "pool_size": 8,
                      "server": "127.0.0.1:1433",
                      "enable": true,
                      "password": "******",
                      "username": "sa",
                      "database": "test",
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Microsoft SQL Server Bridge"
                  },
                  "matrix": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "matrix",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Matrix Bridge"
                  },
                  "kafka_consumer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "kafka": {
                        "max_batch_bytes": "896KB",
                        "offset_reset_policy": "latest",
                        "offset_commit_interval_seconds": 5
                      },
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "localhost:9092",
                      "metadata_request_timeout": "4s",
                      "topic_mapping": [
                        {
                          "qos": 1,
                          "mqtt_topic": "mqtt/topic/${.offset}",
                          "kafka_topic": "kafka-topic-1",
                          "payload_template": "${.}"
                        },
                        {
                          "qos": 2,
                          "mqtt_topic": "mqtt/topic/2",
                          "kafka_topic": "kafka-topic-2",
                          "payload_template": "v = ${.value}"
                        }
                      ],
                      "value_encoding_mode": "none",
                      "key_encoding_mode": "none"
                    },
                    "summary": "Kafka Consumer Bridge"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "foo",
                      "type": "rocketmq",
                      "server": "127.0.0.1:9876",
                      "template": "",
                      "enable": true,
                      "topic": "TopicTest",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "RocketMQ Bridge"
                  },
                  "timescale": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "timescale",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Timescale Bridge"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_consumer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_gcp_pubsub.get_consumer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_single"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_gcp_pubsub.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_api_v1"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_rs"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_opents.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_grpc_v1"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_single"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_tdengine.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pgsql.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pulsar.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_iotdb.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_api_v2"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get bridge",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update a bridge by Id",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge Id. Must be of format {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "influxdb_api_v2": {
                    "value": {
                      "name": "demo",
                      "type": "influxdb_api_v2",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "precision": "ms",
                      "org": "examlpe_org",
                      "token": "example_token",
                      "bucket": "example_bucket",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}",
                      "influxdb_type": "influxdb_api_v2"
                    },
                    "summary": "InfluxDB HTTP API V2 Bridge"
                  },
                  "iotdb": {
                    "value": {
                      "name": "My IoTDB Bridge",
                      "type": "iotdb",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "*****",
                        "username": "root"
                      },
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "base_url": "http://iotdb.local:18080/",
                      "pool_type": "random",
                      "resource_opts": {
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "health_check_interval": "15s"
                      },
                      "enable_pipelining": 100,
                      "iotdb_version": "v1.1.x",
                      "device_id": "my_device",
                      "is_aligned": false
                    },
                    "summary": "Apache IoTDB Bridge"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB",
                          "memory_overload_protection": true
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_linger_bytes": "10MB",
                        "max_batch_bytes": "896KB",
                        "kafka_headers": "${.pub_props}",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_header_value_encode_mode": "none",
                        "partition_strategy": "random",
                        "partition_count_refresh_interval": "60s",
                        "max_linger_time": "5ms"
                      },
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic",
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Azure Event Hub Producer Bridge"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "kafka": {
                        "message": {
                          "timestamp": "${.timestamp}",
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "segment_bytes": "10MB",
                          "per_partition_limit": "2GB",
                          "memory_overload_protection": true
                        },
                        "compression": "no_compression",
                        "topic": "kafka-topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_linger_bytes": "10MB",
                        "max_batch_bytes": "896KB",
                        "kafka_headers": "${pub_props}",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_header_value_encode_mode": "none",
                        "partitions_limit": "all_partitions",
                        "partition_strategy": "random",
                        "partition_count_refresh_interval": "60s",
                        "max_linger_time": "5ms"
                      },
                      "local_topic": "mqtt/local/topic",
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "localhost:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Kafka Producer Bridge"
                  },
                  "redis_sentinel": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_sentinel",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "database": 1,
                      "servers": [
                        "127.0.0.1:26379"
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "batch_time": "20ms"
                      },
                      "sentinel": "mymaster",
                      "redis_type": "sentinel",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Sentinel Bridge"
                  },
                  "pulsar_producer": {
                    "value": {
                      "authentication": "none",
                      "batch_size": 1,
                      "buffer": {
                        "memory_overload_protection": true,
                        "mode": "memory",
                        "per_partition_limit": "10MB",
                        "segment_bytes": "5MB"
                      },
                      "compression": "no_compression",
                      "enable": true,
                      "local_topic": "mqtt/topic/-576460752303423482",
                      "max_batch_bytes": "900KB",
                      "message": {
                        "key": "${.clientid}",
                        "value": "${.}"
                      },
                      "name": "pulsar_example_name",
                      "pulsar_topic": "pulsar_example_topic",
                      "retention_period": "infinity",
                      "send_buffer": "1MB",
                      "servers": "pulsar://127.0.0.1:6650",
                      "ssl": {
                        "enable": false,
                        "server_name_indication": "auto",
                        "verify": "verify_none"
                      },
                      "strategy": "key_dispatch",
                      "sync_timeout": "5s",
                      "type": "pulsar_producer"
                    },
                    "summary": "Pulsar Producer Bridge"
                  },
                  "pgsql": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "pgsql",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "PostgreSQL Bridge"
                  },
                  "redis_cluster": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_cluster",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "servers": [
                        "127.0.0.1:6379"
                      ],
                      "resource_opts": {},
                      "redis_type": "cluster",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Cluster Bridge"
                  },
                  "mysql": {
                    "value": {
                      "name": "foo",
                      "type": "mysql",
                      "pool_size": 8,
                      "server": "127.0.0.1:3306",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "test",
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "MySQL Bridge"
                  },
                  "kinesis_producer": {
                    "value": {
                      "name": "foo",
                      "type": "kinesis_producer",
                      "enable": true,
                      "max_retries": 3,
                      "aws_secret_access_key": "******",
                      "resource_opts": {
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 104857600,
                        "inflight_window": 100,
                        "health_check_interval": 15000
                      },
                      "endpoint": "https://kinesis.us-east-1.amazonaws.com",
                      "partition_key": "key",
                      "aws_access_key_id": "aws_access_key_id",
                      "stream_name": "stream_name"
                    },
                    "summary": "Amazon Kinesis Producer Bridge"
                  },
                  "http_example": {
                    "value": {
                      "name": "http_example",
                      "type": "http",
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "15s",
                      "pool_size": 4,
                      "enable": true,
                      "body": "${payload}",
                      "url": "http://localhost:9901/messages/${topic}",
                      "method": "post",
                      "max_retries": 3,
                      "request_timeout": "15s",
                      "pool_type": "random",
                      "resource_opts": {
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 104857600,
                        "inflight_window": 100,
                        "health_check_interval": 15000
                      },
                      "enable_pipelining": 100,
                      "local_topic": "emqx_http/#"
                    },
                    "summary": "HTTP"
                  },
                  "rabbitmq": {
                    "value": {
                      "timeout": 5,
                      "name": "foo",
                      "port": 5672,
                      "type": "rabbitmq",
                      "exchange": "messages",
                      "pool_size": 8,
                      "server": "localhost",
                      "enable": true,
                      "password": "******",
                      "username": "guest",
                      "heartbeat": "30s",
                      "durable": false,
                      "auto_reconnect": "2s",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "payload_template": "",
                      "routing_key": "my_routing_key",
                      "virtual_host": "/",
                      "exchange_type": "topic"
                    },
                    "summary": "RabbitMQ Bridge"
                  },
                  "dynamo": {
                    "value": {
                      "name": "foo",
                      "table": "mqtt",
                      "type": "dynamo",
                      "pool_size": 8,
                      "template": "",
                      "enable": true,
                      "url": "http://127.0.0.1:8000",
                      "aws_secret_access_key": "******",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "aws_access_key_id": "root"
                    },
                    "summary": "DynamoDB Bridge"
                  },
                  "tdengine": {
                    "value": {
                      "name": "foo",
                      "type": "tdengine",
                      "pool_size": 8,
                      "server": "127.0.0.1:6041",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "TDengine Bridge"
                  },
                  "mongodb_single": {
                    "value": {
                      "name": "mongodb_single_demo",
                      "type": "mongodb_single",
                      "pool_size": 8,
                      "server": "localhost:27017",
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "collection": "mycol",
                      "w_mode": "safe",
                      "srv_record": false,
                      "mongo_type": "single"
                    },
                    "summary": "MongoDB (Standalone) Bridge"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "demo",
                      "type": "greptimedb",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:4001",
                      "enable": true,
                      "precision": "ms",
                      "password": "******",
                      "username": "example_username",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "dbname": "example_db",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                    },
                    "summary": "Greptimedb HTTP API V2 Bridge"
                  },
                  "opents": {
                    "value": {
                      "name": "foo",
                      "type": "opents",
                      "pool_size": 8,
                      "server": "http://127.0.0.1:4242",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "enabledb": true
                    },
                    "summary": "OpenTSDB Bridge"
                  },
                  "mongodb_sharded": {
                    "value": {
                      "name": "mongodb_sharded_demo",
                      "type": "mongodb_sharded",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "servers": "localhost:27017, localhost:27018",
                      "collection": "mycol",
                      "w_mode": "safe",
                      "srv_record": false,
                      "mongo_type": "sharded"
                    },
                    "summary": "MongoDB (Sharded) Bridge"
                  },
                  "mongodb_rs": {
                    "value": {
                      "name": "mongodb_rs_demo",
                      "type": "mongodb_rs",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "servers": "localhost:27017, localhost:27018",
                      "collection": "mycol",
                      "r_mode": "safe",
                      "w_mode": "safe",
                      "replica_set_name": "rs",
                      "srv_record": false,
                      "mongo_type": "rs"
                    },
                    "summary": "MongoDB (Replica Set) Bridge"
                  },
                  "oracle": {
                    "value": {
                      "name": "foo",
                      "type": "oracle",
                      "pool_size": 8,
                      "server": "127.0.0.1:1521",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "service_name": "ORCL",
                      "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "sid": "ORCL"
                    },
                    "summary": "Oracle Database Bridge"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "demo",
                      "stream": "stream",
                      "type": "hstreamdb",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "direction": "egress",
                      "url": "http://127.0.0.1:6570",
                      "resource_opts": {
                        "batch_size": 100,
                        "query_mode": "sync",
                        "batch_time": "20ms"
                      },
                      "record_template": "{ \"temperature\": ${payload.temperature}, \"humidity\": ${payload.humidity} }"
                    },
                    "summary": "HStreamDB Bridge"
                  },
                  "influxdb_api_v1": {
                    "value": {
                      "name": "demo",
                      "type": "influxdb_api_v1",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "precision": "ms",
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}",
                      "influxdb_type": "influxdb_api_v1"
                    },
                    "summary": "InfluxDB HTTP API V1 Bridge"
                  },
                  "gcp_pubsub": {
                    "value": {
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      },
                      "pubsub_topic": "mytopic"
                    },
                    "summary": "GCP PubSub Producer Bridge"
                  },
                  "redis_single": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_single",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "server": "127.0.0.1:6379",
                      "enable": true,
                      "password": "******",
                      "database": 1,
                      "resource_opts": {
                        "batch_size": 1,
                        "batch_time": "20ms"
                      },
                      "redis_type": "single",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Single Node Bridge"
                  },
                  "mqtt_example": {
                    "value": {
                      "name": "mqtt_example",
                      "type": "mqtt",
                      "keepalive": "300s",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:1883",
                      "enable": true,
                      "password": "******",
                      "username": "foo",
                      "proto_ver": "v4",
                      "clean_start": true,
                      "retry_interval": "15s",
                      "max_inflight": 100,
                      "resource_opts": {
                        "query_mode": "sync",
                        "max_buffer_bytes": 104857600,
                        "health_check_interval": "15s"
                      },
                      "ingress": {
                        "local": {
                          "retain": "${retain}",
                          "payload": "${payload}",
                          "topic": "from_aws/${topic}",
                          "qos": "${qos}"
                        },
                        "remote": {
                          "topic": "aws/#",
                          "qos": 1
                        }
                      },
                      "egress": {
                        "local": {
                          "topic": "emqx/#"
                        },
                        "remote": {
                          "retain": false,
                          "payload": "${payload}",
                          "topic": "from_emqx/${topic}",
                          "qos": "${qos}"
                        }
                      }
                    },
                    "summary": "MQTT Bridge"
                  },
                  "cassandra": {
                    "value": {
                      "name": "foo",
                      "type": "cassandra",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
                      "servers": "127.0.0.1:9042",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "keyspace": "mqtt"
                    },
                    "summary": "Cassandra Bridge"
                  },
                  "gcp_pubsub_consumer": {
                    "value": {
                      "connect_timeout": "15s",
                      "consumer": {
                        "topic_mapping": [
                          {
                            "qos": 1,
                            "mqtt_topic": "mqtt/topic/1",
                            "payload_template": "${.}",
                            "pubsub_topic": "pubsub-topic-1"
                          },
                          {
                            "qos": 2,
                            "mqtt_topic": "mqtt/topic/2",
                            "payload_template": "v = ${.value}, a = ${.attributes}, o = ${.ordering_key}",
                            "pubsub_topic": "pubsub-topic-2"
                          }
                        ],
                        "pull_max_messages": 100
                      },
                      "resource_opts": {
                        "request_ttl": "20s"
                      },
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Consumer Bridge"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "foo",
                      "type": "clickhouse",
                      "pool_size": 8,
                      "server": "127.0.0.1:8123",
                      "enable": true,
                      "password": "******",
                      "username": "default",
                      "database": "mqtt",
                      "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "batch_value_separator": ", "
                    },
                    "summary": "Clickhouse Bridge"
                  },
                  "sqlserver": {
                    "value": {
                      "driver": "ms-sql",
                      "name": "bar",
                      "type": "sqlserver",
                      "pool_size": 8,
                      "server": "127.0.0.1:1433",
                      "enable": true,
                      "password": "******",
                      "username": "sa",
                      "database": "test",
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Microsoft SQL Server Bridge"
                  },
                  "matrix": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "matrix",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Matrix Bridge"
                  },
                  "kafka_consumer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "kafka": {
                        "max_batch_bytes": "896KB",
                        "offset_reset_policy": "latest",
                        "offset_commit_interval_seconds": 5
                      },
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "localhost:9092",
                      "metadata_request_timeout": "4s",
                      "topic_mapping": [
                        {
                          "qos": 1,
                          "mqtt_topic": "mqtt/topic/${.offset}",
                          "kafka_topic": "kafka-topic-1",
                          "payload_template": "${.}"
                        },
                        {
                          "qos": 2,
                          "mqtt_topic": "mqtt/topic/2",
                          "kafka_topic": "kafka-topic-2",
                          "payload_template": "v = ${.value}"
                        }
                      ],
                      "value_encoding_mode": "none",
                      "key_encoding_mode": "none"
                    },
                    "summary": "Kafka Consumer Bridge"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "foo",
                      "type": "rocketmq",
                      "server": "127.0.0.1:9876",
                      "template": "",
                      "enable": true,
                      "topic": "TopicTest",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "RocketMQ Bridge"
                  },
                  "timescale": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "timescale",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Timescale Bridge"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_consumer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_gcp_pubsub.get_consumer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_single"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_gcp_pubsub.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_api_v1"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_rs"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_opents.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_grpc_v1"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_single"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_tdengine.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pgsql.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pulsar.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_iotdb.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_api_v2"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update bridge failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update bridge",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "influxdb_api_v2": {
                  "value": {
                    "name": "demo",
                    "type": "influxdb_api_v2",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "org": "examlpe_org",
                    "token": "example_token",
                    "bucket": "example_bucket",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v2"
                  },
                  "summary": "InfluxDB HTTP API V2 Bridge"
                },
                "iotdb": {
                  "value": {
                    "name": "My IoTDB Bridge",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "*****",
                      "username": "root"
                    },
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "base_url": "http://iotdb.local:18080/",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "health_check_interval": "15s"
                    },
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.1.x",
                    "device_id": "my_device",
                    "is_aligned": false
                  },
                  "summary": "Apache IoTDB Bridge"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "name": "my_azure_event_hub_producer",
                    "type": "azure_event_hub_producer",
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${.pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "local_topic": "mqtt/local/topic",
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Azure Event Hub Producer Bridge"
                },
                "kafka_producer": {
                  "value": {
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "kafka": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "10MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partitions_limit": "all_partitions",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "local_topic": "mqtt/local/topic",
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Kafka Producer Bridge"
                },
                "redis_sentinel": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "servers": [
                      "127.0.0.1:26379"
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "sentinel": "mymaster",
                    "redis_type": "sentinel",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Sentinel Bridge"
                },
                "pulsar_producer": {
                  "value": {
                    "authentication": "none",
                    "batch_size": 1,
                    "buffer": {
                      "memory_overload_protection": true,
                      "mode": "memory",
                      "per_partition_limit": "10MB",
                      "segment_bytes": "5MB"
                    },
                    "compression": "no_compression",
                    "enable": true,
                    "local_topic": "mqtt/topic/-576460752303423482",
                    "max_batch_bytes": "900KB",
                    "message": {
                      "key": "${.clientid}",
                      "value": "${.}"
                    },
                    "name": "pulsar_example_name",
                    "pulsar_topic": "pulsar_example_topic",
                    "retention_period": "infinity",
                    "send_buffer": "1MB",
                    "servers": "pulsar://127.0.0.1:6650",
                    "ssl": {
                      "enable": false,
                      "server_name_indication": "auto",
                      "verify": "verify_none"
                    },
                    "strategy": "key_dispatch",
                    "sync_timeout": "5s",
                    "type": "pulsar_producer"
                  },
                  "summary": "Pulsar Producer Bridge"
                },
                "pgsql": {
                  "value": {
                    "name": "foo",
                    "type": "pgsql",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "PostgreSQL Bridge"
                },
                "redis_cluster": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "servers": [
                      "127.0.0.1:6379"
                    ],
                    "resource_opts": {},
                    "redis_type": "cluster",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Cluster Bridge"
                },
                "mysql": {
                  "value": {
                    "name": "foo",
                    "type": "mysql",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "MySQL Bridge"
                },
                "kinesis_producer": {
                  "value": {
                    "name": "foo",
                    "type": "kinesis_producer",
                    "enable": true,
                    "max_retries": 3,
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "endpoint": "https://kinesis.us-east-1.amazonaws.com",
                    "partition_key": "key",
                    "aws_access_key_id": "aws_access_key_id",
                    "stream_name": "stream_name"
                  },
                  "summary": "Amazon Kinesis Producer Bridge"
                },
                "http_example": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "15s",
                    "pool_size": 4,
                    "enable": true,
                    "body": "${payload}",
                    "url": "http://localhost:9901/messages/${topic}",
                    "method": "post",
                    "max_retries": 3,
                    "request_timeout": "15s",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "enable_pipelining": 100,
                    "local_topic": "emqx_http/#"
                  },
                  "summary": "HTTP"
                },
                "rabbitmq": {
                  "value": {
                    "timeout": 5,
                    "name": "foo",
                    "port": 5672,
                    "type": "rabbitmq",
                    "exchange": "messages",
                    "pool_size": 8,
                    "server": "localhost",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "heartbeat": "30s",
                    "durable": false,
                    "auto_reconnect": "2s",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "payload_template": "",
                    "routing_key": "my_routing_key",
                    "virtual_host": "/",
                    "exchange_type": "topic"
                  },
                  "summary": "RabbitMQ Bridge"
                },
                "dynamo": {
                  "value": {
                    "name": "foo",
                    "table": "mqtt",
                    "type": "dynamo",
                    "pool_size": 8,
                    "template": "",
                    "enable": true,
                    "url": "http://127.0.0.1:8000",
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "aws_access_key_id": "root"
                  },
                  "summary": "DynamoDB Bridge"
                },
                "tdengine": {
                  "value": {
                    "name": "foo",
                    "type": "tdengine",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "TDengine Bridge"
                },
                "mongodb_single": {
                  "value": {
                    "name": "mongodb_single_demo",
                    "type": "mongodb_single",
                    "pool_size": 8,
                    "server": "localhost:27017",
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "single"
                  },
                  "summary": "MongoDB (Standalone) Bridge"
                },
                "greptimedb": {
                  "value": {
                    "name": "demo",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                  },
                  "summary": "Greptimedb HTTP API V2 Bridge"
                },
                "opents": {
                  "value": {
                    "name": "foo",
                    "type": "opents",
                    "pool_size": 8,
                    "server": "http://127.0.0.1:4242",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "enabledb": true
                  },
                  "summary": "OpenTSDB Bridge"
                },
                "mongodb_sharded": {
                  "value": {
                    "name": "mongodb_sharded_demo",
                    "type": "mongodb_sharded",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "sharded"
                  },
                  "summary": "MongoDB (Sharded) Bridge"
                },
                "mongodb_rs": {
                  "value": {
                    "name": "mongodb_rs_demo",
                    "type": "mongodb_rs",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "r_mode": "safe",
                    "w_mode": "safe",
                    "replica_set_name": "rs",
                    "srv_record": false,
                    "mongo_type": "rs"
                  },
                  "summary": "MongoDB (Replica Set) Bridge"
                },
                "oracle": {
                  "value": {
                    "name": "foo",
                    "type": "oracle",
                    "pool_size": 8,
                    "server": "127.0.0.1:1521",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "service_name": "ORCL",
                    "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "sid": "ORCL"
                  },
                  "summary": "Oracle Database Bridge"
                },
                "hstreamdb": {
                  "value": {
                    "name": "demo",
                    "stream": "stream",
                    "type": "hstreamdb",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "direction": "egress",
                    "url": "http://127.0.0.1:6570",
                    "resource_opts": {
                      "batch_size": 100,
                      "query_mode": "sync",
                      "batch_time": "20ms"
                    },
                    "record_template": "{ \"temperature\": ${payload.temperature}, \"humidity\": ${payload.humidity} }"
                  },
                  "summary": "HStreamDB Bridge"
                },
                "influxdb_api_v1": {
                  "value": {
                    "name": "demo",
                    "type": "influxdb_api_v1",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "database": "example_database",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v1"
                  },
                  "summary": "InfluxDB HTTP API V1 Bridge"
                },
                "gcp_pubsub": {
                  "value": {
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    },
                    "pubsub_topic": "mytopic"
                  },
                  "summary": "GCP PubSub Producer Bridge"
                },
                "redis_single": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "server": "127.0.0.1:6379",
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "redis_type": "single",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Single Node Bridge"
                },
                "mqtt_example": {
                  "value": {
                    "keepalive": "300s",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:1883",
                    "enable": true,
                    "password": "******",
                    "username": "foo",
                    "proto_ver": "v4",
                    "clean_start": true,
                    "retry_interval": "15s",
                    "max_inflight": 100,
                    "resource_opts": {
                      "query_mode": "sync",
                      "max_buffer_bytes": 104857600,
                      "health_check_interval": "15s"
                    },
                    "ingress": {
                      "local": {
                        "retain": "${retain}",
                        "payload": "${payload}",
                        "topic": "from_aws/${topic}",
                        "qos": "${qos}"
                      },
                      "remote": {
                        "topic": "aws/#",
                        "qos": 1
                      }
                    },
                    "egress": {
                      "local": {
                        "topic": "emqx/#"
                      },
                      "remote": {
                        "retain": false,
                        "payload": "${payload}",
                        "topic": "from_emqx/${topic}",
                        "qos": "${qos}"
                      }
                    }
                  },
                  "summary": "MQTT Bridge"
                },
                "cassandra": {
                  "value": {
                    "name": "foo",
                    "type": "cassandra",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
                    "servers": "127.0.0.1:9042",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "keyspace": "mqtt"
                  },
                  "summary": "Cassandra Bridge"
                },
                "gcp_pubsub_consumer": {
                  "value": {
                    "connect_timeout": "15s",
                    "consumer": {
                      "topic_mapping": [
                        {
                          "qos": 1,
                          "mqtt_topic": "mqtt/topic/1",
                          "payload_template": "${.}",
                          "pubsub_topic": "pubsub-topic-1"
                        },
                        {
                          "qos": 2,
                          "mqtt_topic": "mqtt/topic/2",
                          "payload_template": "v = ${.value}, a = ${.attributes}, o = ${.ordering_key}",
                          "pubsub_topic": "pubsub-topic-2"
                        }
                      ],
                      "pull_max_messages": 100
                    },
                    "resource_opts": {
                      "request_ttl": "20s"
                    },
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Consumer Bridge"
                },
                "clickhouse": {
                  "value": {
                    "name": "foo",
                    "type": "clickhouse",
                    "pool_size": 8,
                    "server": "127.0.0.1:8123",
                    "enable": true,
                    "password": "******",
                    "username": "default",
                    "database": "mqtt",
                    "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "batch_value_separator": ", "
                  },
                  "summary": "Clickhouse Bridge"
                },
                "sqlserver": {
                  "value": {
                    "driver": "ms-sql",
                    "name": "bar",
                    "type": "sqlserver",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "enable": true,
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Microsoft SQL Server Bridge"
                },
                "matrix": {
                  "value": {
                    "name": "foo",
                    "type": "matrix",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Matrix Bridge"
                },
                "kafka_consumer": {
                  "value": {
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "kafka": {
                      "max_batch_bytes": "896KB",
                      "offset_reset_policy": "latest",
                      "offset_commit_interval_seconds": 5
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s",
                    "topic_mapping": [
                      {
                        "qos": 1,
                        "mqtt_topic": "mqtt/topic/${.offset}",
                        "kafka_topic": "kafka-topic-1",
                        "payload_template": "${.}"
                      },
                      {
                        "qos": 2,
                        "mqtt_topic": "mqtt/topic/2",
                        "kafka_topic": "kafka-topic-2",
                        "payload_template": "v = ${.value}"
                      }
                    ],
                    "value_encoding_mode": "none",
                    "key_encoding_mode": "none"
                  },
                  "summary": "Kafka Consumer Bridge"
                },
                "rocketmq": {
                  "value": {
                    "name": "foo",
                    "type": "rocketmq",
                    "server": "127.0.0.1:9876",
                    "template": "",
                    "enable": true,
                    "topic": "TopicTest",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "RocketMQ Bridge"
                },
                "timescale": {
                  "value": {
                    "name": "foo",
                    "type": "timescale",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Timescale Bridge"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_kafka.put_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_timescale.put"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.put_consumer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_gcp_pubsub.put_consumer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.put_single"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_gcp_pubsub.put_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.put_api_v1"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.put_rs"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.put_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_opents.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.put_grpc_v1"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.put_single"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_tdengine.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.put_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.put_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pgsql.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pulsar.put_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.put_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.put_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_iotdb.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.put_api_v2"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a bridge by Id",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge Id. Must be of format {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          }
        ],
        "responses": {
          "204": {
            "description": "Bridge deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "Dependent Rule IDs",
                      "items": {
                        "type": "string"
                      }
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cannot delete bridge while active rules are defined for this bridge"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete bridge",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/dashboard": {
      "get": {
        "description": "Get the sub-configurations under *dashboard*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dashboard.dashboard"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "config not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get the sub-configurations under *dashboard*",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *dashboard*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dashboard.dashboard"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update the sub-configurations under *dashboard*",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dashboard.dashboard"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/clients/{clientid}/subscriptions": {
      "get": {
        "description": "Get the gateway client subscriptions",
        "tags": [
          "Gateway Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "general_subscription_list": {
                    "value": [
                      {
                        "nl": 0,
                        "topic": "test/topic",
                        "qos": 1,
                        "rap": 0,
                        "rh": 0
                      }
                    ],
                    "summary": "A general subscription list"
                  },
                  "stomp_subscription_list": {
                    "value": [
                      "example_stomp_subscription"
                    ],
                    "summary": "The STOMP subscription list"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_gateway_api_clients.subscription"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "List client's subscription",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create a subscription membership",
        "tags": [
          "Gateway Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "general_subscription": {
                    "value": {
                      "nl": 0,
                      "topic": "test/topic",
                      "qos": 1,
                      "rap": 0,
                      "rh": 0
                    },
                    "summary": "A general subscription"
                  },
                  "stomp_subscription": {
                    "value": {
                      "nl": 0,
                      "topic": "stomp/topic",
                      "qos": 1,
                      "sub_props": {
                        "subid": "10"
                      },
                      "rap": 0,
                      "rh": 0
                    },
                    "summary": "A STOMP subscription"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_gateway_api_clients.subscription"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Add subscription for client",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "general_subscription": {
                  "value": {
                    "nl": 0,
                    "topic": "test/topic",
                    "qos": 1,
                    "rap": 0,
                    "rh": 0
                  },
                  "summary": "A general subscription"
                },
                "stomp_subscription": {
                  "value": {
                    "nl": 0,
                    "topic": "stomp/topic",
                    "qos": 1,
                    "sub_props": {
                      "subid": "10"
                    },
                    "rap": 0,
                    "rh": 0
                  },
                  "summary": "A STOMP subscription"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_gateway_api_clients.subscription"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/{node}/invite": {
      "put": {
        "description": "Invite node to cluster",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cluster.node"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster.timeout"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/load_rebalance/{node}/stop": {
      "post": {
        "description": "Stop rebalance process",
        "tags": [
          "Load Rebalance"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "Node name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response is empty",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Stop rebalancing coordinated by the node",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message_transformations/transformation/{name}": {
      "get": {
        "description": "Lookup a transformation",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Transformation name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_transformation"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "message_transformation": {
                    "value": {
                      "name": "my_transformation",
                      "description": "my transformation",
                      "tags": [
                        "transformation"
                      ],
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "operations": [
                        {
                          "value": "concat([topic, '/', payload.t])",
                          "key": "topic"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      },
                      "payload_encoder": {
                        "type": "json"
                      },
                      "payload_decoder": {
                        "type": "json"
                      }
                    },
                    "summary": "Simple message transformation"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/message_transformation.transformation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Transformation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Lookup a transformation",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a transformation",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Transformation name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_transformation"
          }
        ],
        "responses": {
          "204": {
            "description": "Transformation deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Transformation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete a transformation",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/topology": {
      "get": {
        "description": "Get RLOG cluster topology: connections between core and replicant nodes.",
        "tags": [
          "Cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cluster topology",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/cluster.core_replicants"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/retainer/messages": {
      "get": {
        "description": "List retained messages.",
        "tags": [
          "Retainer"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "topic",
            "description": "Topic filter, supports wildcards, omit this to match all messages.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of the results to fetch.",
            "schema": {
              "default": 1,
              "type": "integer",
              "minimum": 1
            },
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Results per page(max 10000)",
            "schema": {
              "default": 100,
              "maximum": 10000,
              "type": "integer",
              "minimum": 1
            },
            "example": 50
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "Retained messages list.",
                      "items": {
                        "$ref": "#/components/schemas/retainer.message_summary"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Unsupported backend."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete all retained messages",
        "tags": [
          "Retainer"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/plugins/{name}/move": {
      "post": {
        "description": "Setting the boot order of plugins.",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          }
        ],
        "responses": {
          "204": {
            "description": "Boot order changed successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "MOVE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Move failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Move plugin within plugin hierarchy",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "move_to_after": {
                  "value": {
                    "position": "after:emqx_plugin_demo-5.1-rc.2"
                  },
                  "summary": "move plugin after other plugins"
                },
                "move_to_before": {
                  "value": {
                    "position": "before:emqx_plugin_demo-5.1-rc.2"
                  },
                  "summary": "move plugin before other plugins"
                },
                "move_to_front": {
                  "value": {
                    "position": "front"
                  },
                  "summary": "move plugin on the front"
                },
                "move_to_rear": {
                  "value": {
                    "position": "rear"
                  },
                  "summary": "move plugin on the rear"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/plugins.position"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/broker": {
      "get": {
        "description": "Get the sub-configurations under *broker*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Message broker options.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.broker"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "config not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get the sub-configurations under *broker*",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *broker*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Message broker options.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.broker"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update the sub-configurations under *broker*",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx.broker"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/alarms": {
      "get": {
        "description": "List currently activated alarms or historical alarms, determined by query parameters.",
        "tags": [
          "Alarms"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "in": "query",
            "name": "activated",
            "description": "It is used to specify the alarm type of the query.<br/>When true, it returns the currently activated alarm,<br/>and when it is false, it returns the historical alarm.<br/>The default is false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_alarms.alarm"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Remove all historical alarms.",
        "tags": [
          "Alarms"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Historical alarms have been cleared successfully."
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/built_in_database/rules/users/{username}": {
      "get": {
        "description": "Get rule for 'username'",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.username"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "password_based:built_in_database": {
                    "value": {
                      "rules": [
                        {
                          "action": "publish",
                          "permission": "allow",
                          "topic": "test/topic/1"
                        },
                        {
                          "action": "subscribe",
                          "permission": "allow",
                          "topic": "test/topic/2"
                        },
                        {
                          "action": "all",
                          "permission": "deny",
                          "topic": "eq test/#"
                        },
                        {
                          "action": "publish",
                          "retain": "true",
                          "permission": "allow",
                          "topic": "test/topic/3",
                          "qos": [
                            "1"
                          ]
                        },
                        {
                          "action": "publish",
                          "retain": "all",
                          "permission": "allow",
                          "topic": "test/topic/4",
                          "qos": [
                            "0",
                            "1",
                            "2"
                          ]
                        }
                      ],
                      "username": "user1"
                    },
                    "summary": "Username"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_username"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Set rule for 'username'",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.username"
          }
        ],
        "responses": {
          "204": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad username or bad rule schema"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "password_based:built_in_database": {
                  "value": {
                    "rules": [
                      {
                        "action": "publish",
                        "permission": "allow",
                        "topic": "test/topic/1"
                      },
                      {
                        "action": "subscribe",
                        "permission": "allow",
                        "topic": "test/topic/2"
                      },
                      {
                        "action": "all",
                        "permission": "deny",
                        "topic": "eq test/#"
                      },
                      {
                        "action": "publish",
                        "retain": "true",
                        "permission": "allow",
                        "topic": "test/topic/3",
                        "qos": [
                          "1"
                        ]
                      },
                      {
                        "action": "publish",
                        "retain": "all",
                        "permission": "allow",
                        "topic": "test/topic/4",
                        "qos": [
                          "0",
                          "1",
                          "2"
                        ]
                      }
                    ],
                    "username": "user1"
                  },
                  "summary": "Username"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_username"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete rule for 'username'",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.username"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad username"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Username Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sso/saml/metadata": {
      "get": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "Dashboard Auth Token"
                    },
                    "version": {
                      "type": "string",
                      "description": "EMQX Version",
                      "example": "5.0.0"
                    },
                    "license": {
                      "properties": {
                        "edition": {
                          "type": "string",
                          "enum": [
                            "opensource",
                            "enterprise"
                          ],
                          "description": "EMQX License. opensource or enterprise",
                          "example": "opensource"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BACKEND_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "requestbody": {
          "content": {
            "application/xml": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    },
    "/sso/login/{backend}": {
      "post": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ldap",
                "oidc",
                "saml"
              ]
            },
            "example": "ldap"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "role": {
                      "default": "administrator",
                      "type": "string",
                      "description": "User role",
                      "example": "administrator"
                    },
                    "token": {
                      "type": "string",
                      "description": "Dashboard Auth Token"
                    },
                    "version": {
                      "type": "string",
                      "description": "EMQX Version",
                      "example": "5.0.0"
                    },
                    "license": {
                      "properties": {
                        "edition": {
                          "type": "string",
                          "enum": [
                            "opensource",
                            "enterprise"
                          ],
                          "description": "EMQX License. opensource or enterprise",
                          "example": "opensource"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "302": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "REDIRECT"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_USERNAME_OR_PWD"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BACKEND_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/dashboard.login"
                  },
                  {
                    "$ref": "#/components/schemas/sso.login"
                  },
                  {
                    "$ref": "#/components/schemas/sso.login"
                  }
                ]
              }
            }
          }
        },
        "security": []
      }
    },
    "/ds/storages": {
      "get": {
        "description": "List durable storages",
        "tags": [
          "Durable storage"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List durable storages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Durable storage is disabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/subscriptions": {
      "get": {
        "description": "List subscriptions",
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "in": "query",
            "name": "node",
            "description": "Node name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "in": "query",
            "name": "clientid",
            "description": "Client ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "qos",
            "description": "QoS",
            "required": false,
            "schema": {
              "maximum": 2,
              "type": "integer",
              "minimum": 0,
              "example": 0
            }
          },
          {
            "in": "query",
            "name": "topic",
            "description": "Topic, url encoding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "match_topic",
            "description": "Match topic string, url encoding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "share_group",
            "description": "Shared subscription group name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "durable",
            "description": "Filter subscriptions by durability",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_subscriptions.subscription"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_PARAMETER"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid parameter"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NODE_DOWN"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad RPC"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ds/sites": {
      "get": {
        "description": "List sites",
        "tags": [
          "Durable storage"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List sites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Durable storage is disabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/error_codes": {
      "get": {
        "description": "API Error Codes",
        "tags": [
          "Error Codes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dashboard.error_code"
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/authorization/sources/built_in_database/rules": {
      "delete": {
        "description": "Delete all rules for all 'users', 'clients' and 'all'",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/{type}/move": {
      "post": {
        "description": "Change the exection order of sources",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "description": "Authorization type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "file",
                "built_in_database",
                "http",
                "redis",
                "mysql",
                "postgresql",
                "mongodb",
                "ldap"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "front": {
                  "value": {
                    "position": "front"
                  },
                  "summary": "front example"
                },
                "rear": {
                  "value": {
                    "position": "rear"
                  },
                  "summary": "rear example"
                },
                "relative_after": {
                  "value": {
                    "position": "after:file"
                  },
                  "summary": "relative example"
                },
                "relative_before": {
                  "value": {
                    "position": "before:file"
                  },
                  "summary": "relative example"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authz_api_sources.position"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/listeners/{id}/authentication/users/{uid}": {
      "get": {
        "description": "Get user info from the gateway authenticator (only supports built_in_database)",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Listener ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "path",
            "name": "uid",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get user info",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the user info for the gateway authenticator (only supports built_in_database)",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Listener ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "path",
            "name": "uid",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update user info",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "value": {
                    "password": "******"
                  },
                  "summary": "Update regular user"
                },
                "super_user": {
                  "value": {
                    "password": "******",
                    "is_superuser": true
                  },
                  "summary": "Update user and promote to superuser"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_update"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the user for the gateway authenticator (only supports built_in_database)",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Listener ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "path",
            "name": "uid",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete user",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication": {
      "get": {
        "description": "List authenticators for global authentication.",
        "tags": [
          "Authentication"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "algorithm": "hmac-based",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  },
                  {
                    "mechanism": "password_based",
                    "backend": "built_in_database",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  },
                  {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "5s",
                    "mechanism": "password_based",
                    "pool_size": 8,
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://127.0.0.1:18083",
                    "method": "post",
                    "backend": "http",
                    "request_timeout": "5s",
                    "enable_pipelining": 100
                  },
                  {
                    "mechanism": "password_based",
                    "filter": {
                      "username": "${username}"
                    },
                    "server": "127.0.0.1:27017",
                    "database": "example",
                    "backend": "mongodb",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "collection": "users",
                    "is_superuser_field": "is_superuser",
                    "password_hash_field": "password_hash",
                    "salt_field": "salt"
                  },
                  {
                    "mechanism": "password_based",
                    "server": "127.0.0.1:6379",
                    "cmd": "HMGET ${username} password_hash salt",
                    "database": 0,
                    "backend": "redis",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single"
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/authn.cinfo"
                      },
                      {
                        "$ref": "#/components/schemas/authn.kerberos"
                      },
                      {
                        "$ref": "#/components/schemas/authn.scram_restapi_post"
                      },
                      {
                        "$ref": "#/components/schemas/authn.scram_restapi_get"
                      },
                      {
                        "$ref": "#/components/schemas/authn.gcp_device"
                      },
                      {
                        "$ref": "#/components/schemas/authn.ldap_deprecated"
                      },
                      {
                        "$ref": "#/components/schemas/authn.ldap"
                      },
                      {
                        "$ref": "#/components/schemas/authn.scram"
                      },
                      {
                        "$ref": "#/components/schemas/authn.jwt_jwks"
                      },
                      {
                        "$ref": "#/components/schemas/authn.jwt_public_key"
                      },
                      {
                        "$ref": "#/components/schemas/authn.jwt_hmac"
                      },
                      {
                        "$ref": "#/components/schemas/authn.http_post"
                      },
                      {
                        "$ref": "#/components/schemas/authn.http_get"
                      },
                      {
                        "$ref": "#/components/schemas/authn.redis_sentinel"
                      },
                      {
                        "$ref": "#/components/schemas/authn.redis_cluster"
                      },
                      {
                        "$ref": "#/components/schemas/authn.redis_single"
                      },
                      {
                        "$ref": "#/components/schemas/authn.mongo_sharded"
                      },
                      {
                        "$ref": "#/components/schemas/authn.mongo_rs"
                      },
                      {
                        "$ref": "#/components/schemas/authn.mongo_single"
                      },
                      {
                        "$ref": "#/components/schemas/authn.postgresql"
                      },
                      {
                        "$ref": "#/components/schemas/authn.mysql"
                      },
                      {
                        "$ref": "#/components/schemas/authn.builtin_db"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create authenticator for global authentication.",
        "tags": [
          "Authentication"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "server": "127.0.0.1:6379",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.cinfo"
                    },
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.scram_restapi_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.scram_restapi_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.scram"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "ALREADY_EXISTS"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "value": {
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "algorithm": "hmac-based",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  },
                  "summary": "JWT authentication"
                },
                "password_based:built_in_database": {
                  "value": {
                    "mechanism": "password_based",
                    "backend": "built_in_database",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  },
                  "summary": "Built-in password_based authentication"
                },
                "password_based:http": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "5s",
                    "mechanism": "password_based",
                    "pool_size": 8,
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://127.0.0.1:18083",
                    "method": "post",
                    "backend": "http",
                    "request_timeout": "5s",
                    "enable_pipelining": 100
                  },
                  "summary": "password_based authentication through external HTTP API"
                },
                "password_based:mongodb": {
                  "value": {
                    "mechanism": "password_based",
                    "filter": {
                      "username": "${username}"
                    },
                    "server": "127.0.0.1:27017",
                    "database": "example",
                    "backend": "mongodb",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "collection": "users",
                    "is_superuser_field": "is_superuser",
                    "password_hash_field": "password_hash",
                    "salt_field": "salt"
                  },
                  "summary": "password_based authentication with MongoDB backend"
                },
                "password_based:redis": {
                  "value": {
                    "mechanism": "password_based",
                    "server": "127.0.0.1:6379",
                    "cmd": "HMGET ${username} password_hash salt",
                    "database": 0,
                    "backend": "redis",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single"
                  },
                  "summary": "password_based authentication with Redis backend"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.cinfo"
                  },
                  {
                    "$ref": "#/components/schemas/authn.kerberos"
                  },
                  {
                    "$ref": "#/components/schemas/authn.scram_restapi_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.scram_restapi_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.gcp_device"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap_deprecated"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authn.scram"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db_api"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}/subscribe": {
      "post": {
        "description": "Subscribe",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_subscriptions.subscription"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_mgmt_api_clients.subscribe"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/trace": {
      "get": {
        "description": "List all trace",
        "tags": [
          "Trace"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/trace.trace"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Clear all traces",
        "tags": [
          "Trace"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create new trace",
        "tags": [
          "Trace"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/trace.trace"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_PARAMS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "invalid trace params"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS",
                        "DUPLICATE_CONDITION",
                        "BAD_TYPE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "trace already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "type"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique name of the trace. Only ASCII letters in a-z, A-Z, 0-9 and underscore '_' are allowed.",
                    "example": "EMQX-TRACE-1"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "clientid",
                      "topic",
                      "ip_address",
                      "ruleid"
                    ],
                    "description": "Filter type",
                    "example": "clientid"
                  },
                  "topic": {
                    "type": "string",
                    "description": "Specify the topic or topic filter if the trace 'type' is 'topic'.",
                    "example": "/dev/#"
                  },
                  "clientid": {
                    "type": "string",
                    "description": "Specify the MQTT clientid if the trace 'type' is 'clientid'.",
                    "example": "dev-001"
                  },
                  "ip_address": {
                    "type": "string",
                    "description": "Specify the client's IP address if the trace type is 'ip_address'.",
                    "example": "127.0.0.1"
                  },
                  "ruleid": {
                    "type": "string",
                    "example": "my_rule"
                  },
                  "payload_encode": {
                    "default": "text",
                    "type": "string",
                    "enum": [
                      "hex",
                      "text",
                      "hidden"
                    ],
                    "description": "Determine the format of the payload format in the trace file.<br/><br/>`text`: Text-based protocol or plain text protocol.<br/> It is recommended when payload is JSON encoded.<br/><br/>`hex`: Binary hexadecimal encode.It is recommended when payload is a custom binary protocol.<br/><br/>`hidden`: payload is obfuscated as `******`"
                  },
                  "start_at": {
                    "description": "rfc3339 timestamp or epoch second",
                    "example": "2021-11-04T18:17:38+08:00",
                    "oneOf": [
                      {
                        "type": "integer",
                        "description": "epoch-second",
                        "example": 1640995200
                      },
                      {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-01T00:00:00.000Z"
                      }
                    ]
                  },
                  "end_at": {
                    "description": "rfc3339 timestamp or epoch second",
                    "example": "2021-11-05T18:17:38+08:00",
                    "oneOf": [
                      {
                        "type": "integer",
                        "description": "epoch-second",
                        "example": 1640995200
                      },
                      {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-01T00:00:00.000Z"
                      }
                    ]
                  },
                  "formatter": {
                    "description": "The formatter that will be used to format the trace log entries. Set this to text to format the log entries as plain text (default). Set it to json to format each log entry as a JSON object.",
                    "example": "text",
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "json"
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "text"
                        ]
                      }
                    ]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes/{node}/connectors/{id}/{operation}": {
      "post": {
        "description": "Start connector on a specific node.",
        "tags": [
          "Connectors"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "The node name, e.g. 'emqx@127.0.0.1'.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The connector id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_connector"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "Operation can be one of: 'start'.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start"
              ]
            },
            "example": "start"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service or connector not enabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Connector or node not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Manually start a connector on a given node",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/prometheus/message_transformation": {
      "get": {
        "description": "Get Prometheus Metrics for Message Validation",
        "tags": [
          "Monitor"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_prometheus_api.mode"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Prometheus Data.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/clients/{clientid}/mqueue_messages": {
      "get": {
        "description": "Get client mqueue messages",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "payload",
            "description": "Client's inflight/mqueue messages payload encoding. If set to `none`, no payload is returned in the response.",
            "schema": {
              "default": "base64",
              "type": "string",
              "enum": [
                "none",
                "base64",
                "plain"
              ]
            }
          },
          {
            "in": "query",
            "name": "max_payload_bytes",
            "description": "Client's inflight/mqueue messages payload limit. The total payload size of all messages in the response will not exceed this value. Messages beyond the limit will be silently omitted in the response. The only exception to this rule is when the first message payload is already larger than the limit. In this case, the first message will be returned in the response.",
            "schema": {
              "default": "1MB",
              "type": "string",
              "example": "32MB"
            }
          },
          {
            "$ref": "#/components/parameters/public.position"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "from_clientid": "mqttx_59ac0a87",
                      "from_username": "test-user",
                      "mqueue_priority": 0,
                      "msgid": "000611F460D57FA9F44500000D360002",
                      "payload": "eyJmb28iOiAiYmFyIn0=",
                      "publish_at": 1709055346487,
                      "qos": 0,
                      "topic": "t/test"
                    }
                  ],
                  "meta": {
                    "count": 100,
                    "last": "1710785444656449826_10"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.mqueue_messages"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_PARAMETER"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND",
                        "CLIENT_SHUTDOWN"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "API not implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/actions_probe": {
      "post": {
        "description": "Test creating a new bridge.",
        "tags": [
          "Actions"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Test bridge OK"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TEST_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "bridge test failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Test creating bridge",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "http": {
                  "value": {
                    "name": "my_http_action",
                    "type": "http",
                    "enable": true,
                    "parameters": {
                      "path": "/room/${room_no}",
                      "body": "${.}",
                      "headers": {},
                      "method": "post"
                    },
                    "connector": "my_http_connector",
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "async",
                      "health_check_interval": "15s"
                    }
                  },
                  "summary": "HTTP Action"
                },
                "confluent_producer": {
                  "value": {
                    "name": "my_confluent_producer_action",
                    "type": "confluent_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${.pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "connector": "my_confluent_producer_connector",
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Confluent Action"
                },
                "iotdb": {
                  "value": {
                    "name": "iotdb_action",
                    "type": "iotdb",
                    "description": "My example iotdb action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "timestamp": "now",
                          "value": "${st}",
                          "data_type": "BOOLEAN",
                          "measurement": "status"
                        }
                      ],
                      "device_id": "my_device",
                      "is_aligned": false
                    },
                    "connector": "iotdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Apache IoTDB Bridge"
                },
                "direct_azure_blob_storage": {
                  "value": {
                    "name": "my_action",
                    "type": "azure_blob_storage",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "direct",
                      "content": "${.payload}",
                      "blob": "${.payload.blob}",
                      "container": "${.payload.container}"
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "0ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Azure Blob Storage Direct Upload Action"
                },
                "couchbase": {
                  "value": {
                    "name": "my_action",
                    "type": "couchbase",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into mqtt (key, value) values (${.id}, ${.payload})"
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Couchbase Action"
                },
                "datalayers": {
                  "value": {
                    "name": "datalayers_action",
                    "type": "datalayers",
                    "description": "My example datalayers action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "datalayers_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Datalayers Action"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "name": "my_azure_event_hub_producer_action",
                    "type": "azure_event_hub_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${.pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "connector": "my_azure_event_hub_producer_connector",
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Azure Event Hub Action"
                },
                "kafka_producer": {
                  "value": {
                    "name": "my_kafka_producer_action",
                    "type": "kafka_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "10MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partitions_limit": "all_partitions",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "connector": "my_kafka_producer_connector",
                    "resource_opts": {
                      "health_check_interval": "32s"
                    },
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Kafka Producer Action"
                },
                "kinesis": {
                  "value": {
                    "name": "kinesis_action",
                    "type": "kinesis",
                    "description": "My example kinesis action",
                    "enable": true,
                    "parameters": {
                      "partition_key": "any_key",
                      "payload_template": "${.}",
                      "stream_name": "my_stream"
                    },
                    "connector": "kinesis_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Kinesis Action"
                },
                "pgsql": {
                  "value": {
                    "name": "my_action",
                    "type": "pgsql",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "PostgreSQL Action"
                },
                "mysql": {
                  "value": {
                    "name": "mysql_action",
                    "type": "mysql",
                    "description": "My example mysql action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))"
                    },
                    "connector": "mysql_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MySQL Action"
                },
                "mqtt": {
                  "value": {
                    "name": "mqtt_action",
                    "type": "mqtt",
                    "description": "My example mqtt action",
                    "enable": true,
                    "parameters": {
                      "retain": false,
                      "payload": "${.payload}",
                      "topic": "remote/topic",
                      "qos": 2
                    },
                    "connector": "mqtt_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MQTT Producer Action"
                },
                "rabbitmq": {
                  "value": {
                    "name": "rabbitmq_action",
                    "type": "rabbitmq",
                    "description": "My example rabbitmq action",
                    "enable": true,
                    "parameters": {
                      "exchange": "test_exchange",
                      "payload_template": "${.payload}",
                      "routing_key": "/",
                      "wait_for_publish_confirmations": true,
                      "delivery_mode": "non_persistent",
                      "publish_confirmation_timeout": "30s"
                    },
                    "connector": "rabbitmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "RabbitMQ Producer Action"
                },
                "redis": {
                  "value": {
                    "name": "my_action",
                    "type": "redis",
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "connector": "my_connector_name",
                    "resource_opts": {
                      "batch_size": 1
                    }
                  },
                  "summary": "Redis Action"
                },
                "dynamo": {
                  "value": {
                    "name": "dynamo_action",
                    "type": "dynamo",
                    "description": "My example dynamo action",
                    "enable": true,
                    "connector": "dynamo_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "hash_key": "clientid",
                      "table": "mqtt_msg",
                      "template": ""
                    }
                  },
                  "summary": "DynamoDB Action"
                },
                "tdengine": {
                  "value": {
                    "name": "tdengine_action",
                    "type": "tdengine",
                    "description": "My example tdengine action",
                    "enable": true,
                    "parameters": {
                      "database": "mqtt",
                      "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})"
                    },
                    "connector": "tdengine_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "TDengine Action"
                },
                "s3": {
                  "value": {
                    "name": "my_s3_action",
                    "type": "s3",
                    "description": "My upload action",
                    "enable": true,
                    "parameters": {
                      "mode": "direct",
                      "key": "${topic}",
                      "content": "${payload}",
                      "bucket": "${clientid}",
                      "acl": "public_read"
                    },
                    "connector": "my_s3_connector",
                    "resource_opts": {
                      "query_mode": "sync",
                      "inflight_window": 10
                    }
                  },
                  "summary": "S3 Direct Upload"
                },
                "greptimedb": {
                  "value": {
                    "name": "greptimedb_action",
                    "type": "greptimedb",
                    "description": "My example greptimedb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                    },
                    "connector": "greptimedb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "GreptimeDB Action"
                },
                "opents": {
                  "value": {
                    "name": "opents_action",
                    "type": "opents",
                    "description": "My example opents action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "value": "${value}",
                          "tags": "${tags}",
                          "metric": "${metric}"
                        }
                      ]
                    },
                    "connector": "opents_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "OpenTSDB Action"
                },
                "oracle": {
                  "value": {
                    "name": "oracle_action",
                    "type": "oracle",
                    "description": "My example oracle action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})"
                    },
                    "connector": "oracle_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Oracle Action"
                },
                "snowflake": {
                  "value": {
                    "name": "my_action",
                    "type": "snowflake",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "connect_timeout": "15s",
                      "pool_size": 16,
                      "private_key": "file:///path/to/secret.pem",
                      "max_retries": 3,
                      "schema": "public",
                      "database": "testdatabase",
                      "stage": "teststage",
                      "pipe": "testpipe",
                      "pipelining": 100,
                      "aggregation": {
                        "container": {
                          "type": "csv"
                        },
                        "max_records": 1000,
                        "time_interval": "60s"
                      },
                      "pipe_user": "pipeuser"
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 10000,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "60s",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Snowflake Action"
                },
                "hstreamdb": {
                  "value": {
                    "name": "hstreamdb_action",
                    "type": "hstreamdb",
                    "description": "My example hstreamdb action",
                    "enable": true,
                    "connector": "hstreamdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "aggregation_pool_size": 8,
                      "partition_key": "hej",
                      "record_template": "${payload}",
                      "stream": "mqtt_message",
                      "writer_pool_size": 8
                    }
                  },
                  "summary": "HStreamDB Action"
                },
                "cassandra": {
                  "value": {
                    "name": "cassandra_action",
                    "type": "cassandra",
                    "description": "My example cassandra action",
                    "enable": true,
                    "parameters": {
                      "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})"
                    },
                    "connector": "cassandra_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Cassandra Action"
                },
                "clickhouse": {
                  "value": {
                    "name": "clickhouse_action",
                    "type": "clickhouse",
                    "description": "My example clickhouse action",
                    "enable": true,
                    "parameters": {
                      "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                      "batch_value_separator": ", "
                    },
                    "connector": "clickhouse_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "ClickHouse Action"
                },
                "influxdb": {
                  "value": {
                    "name": "influxdb_action",
                    "type": "influxdb",
                    "description": "My example influxdb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "influxdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "InfluxDB Action"
                },
                "sqlserver": {
                  "value": {
                    "name": "sqlserver_action",
                    "type": "sqlserver",
                    "description": "My example sqlserver action",
                    "enable": true,
                    "connector": "sqlserver_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )"
                    }
                  },
                  "summary": "Microsoft SQL Server Action"
                },
                "matrix": {
                  "value": {
                    "name": "my_action",
                    "type": "matrix",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "Matrix Action"
                },
                "aggregated_azure_blob_storage": {
                  "value": {
                    "name": "my_action",
                    "type": "azure_blob_storage",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "blob": "${action}/${node}/${datetime.rfc3339}/${sequence}",
                      "container": "mycontainer",
                      "aggregation": {
                        "container": {
                          "type": "csv",
                          "column_order": [
                            "a",
                            "b"
                          ]
                        },
                        "max_records": 10000,
                        "time_interval": "4s"
                      }
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 100,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "10ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Azure Blob Storage Aggregated Upload Action"
                },
                "rocketmq": {
                  "value": {
                    "name": "rocketmq_action",
                    "type": "rocketmq",
                    "description": "My example rocketmq action",
                    "enable": true,
                    "connector": "rocketmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "refresh_interval": "3s",
                      "send_buffer": "1024KB",
                      "sync_timeout": "3s",
                      "template": "",
                      "topic": "TopicTest"
                    }
                  },
                  "summary": "RocketMQ Action"
                },
                "pulsar": {
                  "value": {
                    "name": "pulsar_action",
                    "type": "pulsar",
                    "description": "My example pulsar action",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "pulsar_topic": "test_topic",
                      "sync_timeout": "5s"
                    },
                    "connector": "pulsar_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Pulsar Producer Action"
                },
                "syskeeper_forwarder": {
                  "value": {
                    "name": "syskeeper_forwarder",
                    "type": "syskeeper_forwarder",
                    "enable": true,
                    "parameters": {
                      "template": "${payload}",
                      "target_topic": "${topic}"
                    },
                    "connector": "syskeeper_forwarder",
                    "resource_opts": {
                      "worker_pool_size": 16
                    }
                  },
                  "summary": "Syskeeper Forwarder Bridge"
                },
                "s3_aggreg": {
                  "value": {
                    "name": "my_s3_action",
                    "type": "s3",
                    "description": "My aggregated upload action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "key": "${action}/${node}/${datetime.rfc3339utc}_N${sequence}.csv",
                      "bucket": "mqtt-aggregated",
                      "acl": "public_read",
                      "aggregation": {
                        "max_records": 100000,
                        "time_interval": "15m"
                      },
                      "container": {
                        "type": "csv",
                        "column_order": [
                          "clientid",
                          "topic",
                          "publish_received_at"
                        ]
                      }
                    },
                    "connector": "my_s3_connector",
                    "resource_opts": {
                      "query_mode": "async",
                      "inflight_window": 100,
                      "health_check_interval": "10s"
                    }
                  },
                  "summary": "S3 Aggregated Upload"
                },
                "elasticsearch": {
                  "value": {
                    "name": "elasticsearch_action",
                    "type": "elasticsearch",
                    "description": "My example elasticsearch action",
                    "enable": true,
                    "parameters": {
                      "index": "${payload.index}",
                      "action": "create",
                      "doc": "${payload.doc}",
                      "overwrite": true
                    },
                    "connector": "elasticsearch_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Elastic Search Bridge"
                },
                "gcp_pubsub_producer": {
                  "value": {
                    "name": "my_action",
                    "type": "gcp_pubsub_producer",
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "payload_template": "${payload}",
                      "attributes_template": [
                        {
                          "value": "${payload.attrs.v}",
                          "key": "${payload.attrs.k}"
                        }
                      ],
                      "ordering_key_template": "${payload.ok}",
                      "pubsub_topic": "mytopic"
                    },
                    "connector": "my_connector_name",
                    "resource_opts": {
                      "batch_size": 5
                    },
                    "local_topic": "local/topic"
                  },
                  "summary": "GCP PubSub Producer Action"
                },
                "mongodb": {
                  "value": {
                    "name": "mongodb_action",
                    "type": "mongodb",
                    "description": "My example mongodb action",
                    "enable": true,
                    "parameters": {
                      "collection": "mycol"
                    },
                    "connector": "mongodb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MongoDB Action"
                },
                "timescale": {
                  "value": {
                    "name": "my_action",
                    "type": "timescale",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "Timescale Action"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_timescale.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_producer.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_elasticsearch.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/action_azure_blob_storage.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/syskeeper.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/pulsar.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/action_snowflake.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_opents.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_s3.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_tdengine.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/redis.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt_publisher.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pgsql.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_datalayers.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/action_couchbase.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_iotdb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/confluent.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.post_bridge_v2"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}/inflight_messages": {
      "get": {
        "description": "Get client in-flight messages",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "payload",
            "description": "Client's inflight/mqueue messages payload encoding. If set to `none`, no payload is returned in the response.",
            "schema": {
              "default": "base64",
              "type": "string",
              "enum": [
                "none",
                "base64",
                "plain"
              ]
            }
          },
          {
            "in": "query",
            "name": "max_payload_bytes",
            "description": "Client's inflight/mqueue messages payload limit. The total payload size of all messages in the response will not exceed this value. Messages beyond the limit will be silently omitted in the response. The only exception to this rule is when the first message payload is already larger than the limit. In this case, the first message will be returned in the response.",
            "schema": {
              "default": "1MB",
              "type": "string",
              "example": "32MB"
            }
          },
          {
            "$ref": "#/components/parameters/public.position"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "from_clientid": "mqttx_59ac0a87",
                      "from_username": "test-user",
                      "msgid": "000611F460D57FA9F44500000D360002",
                      "payload": "eyJmb28iOiAiYmFyIn0=",
                      "publish_at": 1709055346487,
                      "qos": 0,
                      "topic": "t/test"
                    }
                  ],
                  "meta": {
                    "count": 100,
                    "last": "1710785444656449826"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.inflight_messages"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_PARAMETER"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND",
                        "CLIENT_SHUTDOWN"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "API not implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/relup/status": {
      "get": {
        "description": "Get the hot upgrade status of all nodes",
        "tags": [
          "Relup"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/relup.running_status"
                  }
                }
              }
            }
          }
        },
        "summary": "Get the hot upgrade status of all nodes",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/exhooks/{name}/move": {
      "post": {
        "description": "Move the server.<br/>NOTE: The position should be \"front | rear | before:{name} | after:{name}",
        "tags": [
          "ExHook"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The Exhook server name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "default"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_RPC"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad RPC"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "front": {
                  "value": {
                    "position": "front"
                  },
                  "summary": "absolute position 'front'"
                },
                "rear": {
                  "value": {
                    "position": "rear"
                  },
                  "summary": "absolute position 'rear'"
                },
                "related_after": {
                  "value": {
                    "position": "after:default"
                  },
                  "summary": "relative position 'after'"
                },
                "related_before": {
                  "value": {
                    "position": "before:default"
                  },
                  "summary": "relative position 'before'"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/exhook.move_req"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/slow_subscriptions/settings": {
      "get": {
        "description": "View slow subs settings",
        "tags": [
          "Slow Subscriptions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/slow_subs.slow_subs"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update slow subs settings",
        "tags": [
          "Slow Subscriptions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/slow_subs.slow_subs"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/slow_subs.slow_subs"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message_transformations/transformation/{name}/enable/{enable}": {
      "post": {
        "description": "Enable or disable a particular transformation",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Transformation name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_transformation"
          },
          {
            "in": "path",
            "name": "enable",
            "description": "Enable or disable transformation",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad params"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Transformation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Enable or disable transformation",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/prometheus/auth": {
      "get": {
        "description": "Get Prometheus Metrics for AuthN, AuthZ and Banned",
        "tags": [
          "Monitor"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_prometheus_api.mode"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Prometheus Data.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/mqtt/topic_metrics": {
      "get": {
        "description": "List topic metrics",
        "tags": [
          "MQTT"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List topic metrics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_topic_metrics_api.topic_metrics"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Reset telemetry status",
        "tags": [
          "MQTT"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Reset telemetry status"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TOPIC_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found. Topic metrics not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "reset_all_topic_metrics": {
                  "value": {
                    "action": "reset"
                  },
                  "summary": "reset_all_topic_metrics"
                },
                "reset_specific_one_topic_metrics": {
                  "value": {
                    "action": "reset",
                    "topic": "testtopic/1"
                  },
                  "summary": "reset_specific_one_topic_metrics"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_topic_metrics_api.reset"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create topic metrics",
        "tags": [
          "MQTT"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Create topic metrics"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST",
                        "BAD_TOPIC"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request. Already exists or bad topic name"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "EXCEED_LIMIT"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Conflict. Topic metrics exceeded max limit 512"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "topic"
                ],
                "properties": {
                  "topic": {
                    "type": "string",
                    "description": "Raw topic string",
                    "example": "testtopic/1"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/durable_queues": {
      "get": {
        "description": "Get the list of durable queues.",
        "tags": [
          "Durable Queues"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": "queue1"
                  },
                  {
                    "id": "queue2"
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/durable_queues.durable_queue_get"
                  }
                }
              }
            }
          }
        },
        "summary": "List declared durable queues",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/error_codes/{code}": {
      "get": {
        "description": "API Error Codes",
        "tags": [
          "Error Codes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "description": "API Error Codes",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "BAD_USERNAME_OR_PWD",
                "BAD_API_KEY_OR_SECRET",
                "BAD_REQUEST",
                "NOT_MATCH",
                "ALREADY_EXISTS",
                "BAD_CONFIG_SCHEMA",
                "BAD_LISTENER_ID",
                "BAD_NODE_NAME",
                "BAD_RPC",
                "BAD_TOPIC",
                "EXCEED_LIMIT",
                "INVALID_PARAMETER",
                "CONFLICT",
                "NO_DEFAULT_VALUE",
                "DEPENDENCY_EXISTS",
                "MESSAGE_ID_SCHEMA_ERROR",
                "INVALID_ID",
                "MESSAGE_ID_NOT_FOUND",
                "NOT_FOUND",
                "CLIENTID_NOT_FOUND",
                "CLIENT_NOT_FOUND",
                "RESOURCE_NOT_FOUND",
                "TOPIC_NOT_FOUND",
                "USER_NOT_FOUND",
                "INTERNAL_ERROR",
                "SERVICE_UNAVAILABLE",
                "SOURCE_ERROR",
                "UPDATE_FAILED",
                "REST_FAILED",
                "CLIENT_NOT_RESPONSE",
                "UNSUPPORTED_MEDIA_TYPE"
              ]
            },
            "example": "BAD_USERNAME_OR_PWD"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dashboard.error_code"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/bridges/{id}/{operation}": {
      "post": {
        "description": "Stop/Restart bridges on all nodes in the cluster.",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge Id. Must be of format {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "Operations can be one of: stop, restart",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start",
                "stop",
                "restart"
              ]
            },
            "example": "start"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Stop or restart bridge",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sso/running": {
      "get": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "ldap",
                      "oidc",
                      "saml"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/gateways/{name}/clients/{clientid}/subscriptions/{topic}": {
      "delete": {
        "description": "Delete a subscriptions membership",
        "tags": [
          "Gateway Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "topic",
            "description": "Topic Filter/Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clientid",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Unsubscribed"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete client's subscription",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/action_types": {
      "get": {
        "description": "Lists the available action types.",
        "tags": [
          "Actions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "types": {
                    "value": [
                      "http",
                      "cassandra",
                      "rabbitmq",
                      "rocketmq",
                      "syskeeper_forwarder",
                      "kafka_producer",
                      "pulsar",
                      "mongodb",
                      "confluent_producer",
                      "hstreamdb",
                      "gcp_pubsub_producer",
                      "greptimedb",
                      "sqlserver",
                      "azure_event_hub_producer",
                      "iotdb",
                      "influxdb",
                      "s3",
                      "kinesis",
                      "datalayers",
                      "redis",
                      "opents",
                      "mqtt",
                      "tdengine",
                      "snowflake",
                      "azure_blob_storage",
                      "oracle",
                      "clickhouse",
                      "couchbase",
                      "timescale",
                      "matrix",
                      "elasticsearch",
                      "pgsql",
                      "mysql",
                      "dynamo"
                    ],
                    "summary": "Action types"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "http",
                      "cassandra",
                      "rabbitmq",
                      "rocketmq",
                      "syskeeper_forwarder",
                      "kafka_producer",
                      "pulsar",
                      "mongodb",
                      "confluent_producer",
                      "hstreamdb",
                      "gcp_pubsub_producer",
                      "greptimedb",
                      "sqlserver",
                      "azure_event_hub_producer",
                      "iotdb",
                      "influxdb",
                      "s3",
                      "kinesis",
                      "datalayers",
                      "redis",
                      "opents",
                      "mqtt",
                      "tdengine",
                      "snowflake",
                      "azure_blob_storage",
                      "oracle",
                      "clickhouse",
                      "couchbase",
                      "timescale",
                      "matrix",
                      "elasticsearch",
                      "pgsql",
                      "mysql",
                      "dynamo"
                    ]
                  }
                }
              }
            }
          }
        },
        "summary": "List available action types",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ds/storages/{ds}/replicas": {
      "get": {
        "description": "List replicas of the durable storage",
        "tags": [
          "Durable storage"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ds",
            "description": "Durable storage ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "messages"
          }
        ],
        "responses": {
          "200": {
            "description": "List sites that contain replicas of the durable storage",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Durable storage not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Durable storage is disabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update replicas of the durable storage",
        "tags": [
          "Durable storage"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ds",
            "description": "Durable storage ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "messages"
          }
        ],
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Durable storage is disabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/delayed/messages": {
      "get": {
        "description": "List delayed messages",
        "tags": [
          "MQTT"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_delayed_api.message"
                      }
                    },
                    "meta": {
                      "properties": {
                        "page": {
                          "type": "integer",
                          "description": "View page",
                          "minimum": 1
                        },
                        "limit": {
                          "type": "integer",
                          "description": "Page limit",
                          "minimum": 1
                        },
                        "count": {
                          "type": "integer",
                          "description": "Count of delayed messages",
                          "minimum": 0
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/{username}": {
      "put": {
        "description": "Update dashboard user description",
        "tags": [
          "Dashboard"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "backend",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "local",
                "ldap",
                "oidc",
                "saml"
              ]
            },
            "example": "local"
          },
          {
            "in": "path",
            "name": "username",
            "description": "Dashboard Username",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "admin"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Dashboard Username",
                      "maxLength": 100,
                      "example": "admin"
                    },
                    "role": {
                      "default": "administrator",
                      "type": "string",
                      "description": "User role",
                      "example": "administrator"
                    },
                    "description": {
                      "type": "string",
                      "description": "Dashboard User Description",
                      "example": "administrator"
                    },
                    "backend": {
                      "type": "string",
                      "description": "User account source",
                      "example": "local"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "USER_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Dashboard user not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "role": {
                    "default": "administrator",
                    "type": "string",
                    "description": "User role",
                    "example": "administrator"
                  },
                  "description": {
                    "type": "string",
                    "description": "Dashboard User Description",
                    "example": "administrator"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete dashboard user",
        "tags": [
          "Dashboard"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "backend",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "local",
                "ldap",
                "oidc",
                "saml"
              ]
            },
            "example": "local"
          },
          {
            "in": "path",
            "name": "username",
            "description": "Dashboard Username",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "admin"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete User successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST",
                        "NOT_ALLOWED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Login failed. Bad username or password"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "USER_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Dashboard user not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/exhooks": {
      "get": {
        "description": "List all servers",
        "tags": [
          "ExHook"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/exhook.detail_server_info"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Add a server",
        "tags": [
          "ExHook"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exhook.detail_server_info"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_RPC"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad RPC"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "default",
                "ssl": {
                  "cacertfile": "/etc/emqx/certs/cacert.pem",
                  "certfile": "/etc/emqx/certs/cert.pem",
                  "keyfile": "/etc/emqx/certs/key.pem",
                  "enable": false
                },
                "pool_size": 8,
                "enable": true,
                "url": "http://127.0.0.1:8081",
                "request_timeout": "5s",
                "auto_reconnect": "60s",
                "failed_action": "deny"
              },
              "schema": {
                "$ref": "#/components/schemas/exhook.server_config"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message_transformations/transformation/{name}/metrics/reset": {
      "post": {
        "description": "Reset metrics for a particular transformation",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Transformation name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_transformation"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Transformation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Reset transformation metrics",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ds/sites/{site}": {
      "get": {
        "description": "Get sites",
        "tags": [
          "Durable storage"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "site",
            "description": "Site ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "E9A185F9B43E1E14"
          }
        ],
        "responses": {
          "200": {
            "description": "Get information about the site",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_ds.site"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Site not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/lwm2m/clients/{clientid}/lookup": {
      "get": {
        "description": "Look up a resource",
        "tags": [
          "LwM2M Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "urn:oma:lwm2m:oma:2"
          },
          {
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "/3/0/7"
          },
          {
            "in": "query",
            "name": "action",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "discover"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "clientid": {
                      "type": "string",
                      "example": "urn:oma:lwm2m:oma:2"
                    },
                    "path": {
                      "type": "string",
                      "example": "/3/0/7"
                    },
                    "action": {
                      "type": "string",
                      "example": "discover"
                    },
                    "codeMsg": {
                      "type": "string",
                      "example": "reply_not_received"
                    },
                    "content": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/lwm2m.resource"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENT_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "List Client's Resources",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/file_transfer/files": {
      "get": {
        "description": "List all uploaded files.",
        "tags": [
          "File Transfer"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/file_transfer.following"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid cursor"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "List all uploaded files",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/rules/{id}/metrics": {
      "get": {
        "description": "Get a rule's metrics by given Id",
        "tags": [
          "Rules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_rule_id"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule_engine.rule_metrics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Rule not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get rule metrics",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/file_transfer": {
      "get": {
        "description": "Show current File Transfer configuration.",
        "tags": [
          "File Transfer"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file_transfer.file_transfer"
                }
              }
            }
          }
        },
        "summary": "Get current File Transfer configuration",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Replace File Transfer configuration.",
        "tags": [
          "File Transfer"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file_transfer.file_transfer"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Provided configuration is invalid"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update File Transfer configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/file_transfer.file_transfer"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/slow_subscriptions": {
      "get": {
        "description": "View slow topics statistics record data",
        "tags": [
          "Slow Subscriptions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/slow_subscribers_statistics.record"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Clear current data and re count slow topic",
        "tags": [
          "Slow Subscriptions"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/durable_queues/{id}": {
      "get": {
        "description": "Get the information of a durable queue.",
        "tags": [
          "Durable Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the durable queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "id": "queue1"
                },
                "schema": {
                  "$ref": "#/components/schemas/durable_queues.durable_queue_get"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Queue Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get a declared durable queue",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Create a durable queue.",
        "tags": [
          "Durable Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the durable queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "id": "queue1"
                },
                "schema": {
                  "$ref": "#/components/schemas/durable_queues.durable_queue_get"
                }
              }
            }
          }
        },
        "summary": "Declare a durable queue",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {}
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a durable queue.",
        "tags": [
          "Durable Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the durable queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Queue deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Queue Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete a declared durable queue",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}": {
      "get": {
        "description": "Get the gateway configurations",
        "tags": [
          "Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "coap_gateway": {
                    "value": {
                      "name": "coap",
                      "enable": true,
                      "heartbeat": "30s",
                      "listeners": [
                        {
                          "name": "default",
                          "type": "udp",
                          "bind": "5683",
                          "max_connections": 1024000,
                          "max_conn_rate": 1000
                        }
                      ],
                      "idle_timeout": "30s",
                      "mountpoint": "coap/",
                      "enable_stats": true,
                      "connection_required": false,
                      "notify_type": "qos",
                      "publish_qos": "coap",
                      "subscribe_qos": "coap"
                    },
                    "summary": "A simple CoAP gateway config"
                  },
                  "exproto_gateway": {
                    "value": {
                      "name": "exproto",
                      "handler": {
                        "address": "http://127.0.0.1:9001"
                      },
                      "server": {
                        "bind": "9100"
                      },
                      "enable": true,
                      "listeners": [
                        {
                          "name": "default",
                          "type": "tcp",
                          "bind": "7993",
                          "max_connections": 1024000,
                          "max_conn_rate": 1000
                        }
                      ],
                      "idle_timeout": "30s",
                      "mountpoint": "exproto/",
                      "enable_stats": true
                    },
                    "summary": "A simple ExProto gateway config"
                  },
                  "gbt32960_gateway": {
                    "value": {
                      "message_queue_len": 10,
                      "name": "gbt32960",
                      "enable": true,
                      "listeners": [
                        {
                          "name": "default",
                          "type": "tcp",
                          "bind": "7325",
                          "max_connections": 1024000,
                          "max_conn_rate": 1000
                        }
                      ],
                      "mountpoint": "gbt32960/${clientid}",
                      "retry_interval": "8s",
                      "enable_stats": true,
                      "max_retry_times": 3
                    },
                    "summary": "A simple GBT32960 gateway config"
                  },
                  "lwm2m_gateway": {
                    "value": {
                      "name": "lwm2m",
                      "enable": true,
                      "listeners": [
                        {
                          "name": "default",
                          "type": "udp",
                          "bind": "5783",
                          "max_connections": 1024000,
                          "max_conn_rate": 1000
                        }
                      ],
                      "idle_timeout": "30s",
                      "mountpoint": "lwm2m/",
                      "enable_stats": true,
                      "auto_observe": false,
                      "lifetime_max": "86400s",
                      "lifetime_min": "1s",
                      "qmode_time_window": "22s",
                      "translators": {
                        "command": {
                          "topic": "dn/#"
                        },
                        "notify": {
                          "topic": "up/notify"
                        },
                        "register": {
                          "topic": "up/resp"
                        },
                        "update": {
                          "topic": "up/resp"
                        },
                        "response": {
                          "topic": "up/resp"
                        }
                      },
                      "update_msg_publish_condition": "always",
                      "xml_dir": "/etc/emqx/lwm2m_xml"
                    },
                    "summary": "A simple LwM2M gateway config"
                  },
                  "mqttsn_gateway": {
                    "value": {
                      "name": "mqttsn",
                      "broadcast": true,
                      "enable": true,
                      "predefined": [
                        {
                          "id": "1001",
                          "topic": "pred/1001"
                        },
                        {
                          "id": "1002",
                          "topic": "pred/1002"
                        }
                      ],
                      "listeners": [
                        {
                          "name": "default",
                          "type": "udp",
                          "bind": "1884",
                          "max_connections": 1024000,
                          "max_conn_rate": 1000
                        }
                      ],
                      "idle_timeout": "30s",
                      "mountpoint": "mqttsn/",
                      "enable_stats": true,
                      "enable_qos3": true,
                      "gateway_id": 1
                    },
                    "summary": "A simple MQTT-SN gateway config"
                  },
                  "ocpp_gateway": {
                    "value": {
                      "name": "ocpp",
                      "enable": true,
                      "upstream": {
                        "topic": "cp/${cid}",
                        "error_topic": "cp/${cid}/error",
                        "reply_topic": "cp/${cid}/reply"
                      },
                      "listeners": [
                        {
                          "name": "default",
                          "type": "ws",
                          "bind": "33033",
                          "max_connections": 1024000
                        }
                      ],
                      "mountpoint": "ocpp/",
                      "enable_stats": true,
                      "default_heartbeat_interval": "60s",
                      "dnstream": {
                        "topic": "cp/${cid}"
                      },
                      "message_format_checking": "disable"
                    },
                    "summary": "A simple OCPP gateway config"
                  },
                  "stomp_gateway": {
                    "value": {
                      "name": "stomp",
                      "enable": true,
                      "frame": {
                        "max_headers": 10,
                        "max_body_length": 65535,
                        "max_headers_length": 1024
                      },
                      "listeners": [
                        {
                          "name": "default",
                          "type": "tcp",
                          "bind": "61613",
                          "max_connections": 1024000,
                          "max_conn_rate": 1000
                        }
                      ],
                      "idle_timeout": "30s",
                      "mountpoint": "stomp/",
                      "enable_stats": true
                    },
                    "summary": "A simple STOMP gateway config"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.stomp"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ocpp"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.mqttsn"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.lwm2m"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.jt808"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.gbt32960"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.exproto"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.coap"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get gateway",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the gateway basic configurations and running status.<br/><br/>Note: The Authentication and Listener configurations should be updated by other special APIs.",
        "tags": [
          "Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "responses": {
          "204": {
            "description": "Gateway configuration updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Load or update the gateway confs",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "coap_gateway": {
                  "value": {
                    "enable": true,
                    "heartbeat": "30s",
                    "idle_timeout": "30s",
                    "mountpoint": "coap2/",
                    "enable_stats": true,
                    "connection_required": false,
                    "notify_type": "qos",
                    "publish_qos": "coap",
                    "subscribe_qos": "coap"
                  },
                  "summary": "A simple CoAP gateway config"
                },
                "exproto_gateway": {
                  "value": {
                    "handler": {
                      "address": "http://127.0.0.1:9001"
                    },
                    "server": {
                      "bind": "9100"
                    },
                    "enable": true,
                    "idle_timeout": "30s",
                    "mountpoint": "exproto2/",
                    "enable_stats": true
                  },
                  "summary": "A simple ExProto gateway config"
                },
                "gbt32960_gateway": {
                  "value": {
                    "message_queue_len": 10,
                    "enable": true,
                    "mountpoint": "gbt32960/${clientid}",
                    "retry_interval": "8s",
                    "enable_stats": true,
                    "max_retry_times": 3
                  },
                  "summary": "A simple GBT32960 gateway config"
                },
                "lwm2m_gateway": {
                  "value": {
                    "enable": true,
                    "idle_timeout": "30s",
                    "mountpoint": "lwm2m2/",
                    "enable_stats": true,
                    "auto_observe": false,
                    "lifetime_max": "86400s",
                    "lifetime_min": "1s",
                    "qmode_time_window": "22s",
                    "translators": {
                      "command": {
                        "topic": "dn/#"
                      },
                      "notify": {
                        "topic": "up/notify"
                      },
                      "register": {
                        "topic": "up/resp"
                      },
                      "update": {
                        "topic": "up/resp"
                      },
                      "response": {
                        "topic": "up/resp"
                      }
                    },
                    "update_msg_publish_condition": "always",
                    "xml_dir": "/etc/emqx/lwm2m_xml"
                  },
                  "summary": "A simple LwM2M gateway config"
                },
                "mqttsn_gateway": {
                  "value": {
                    "broadcast": true,
                    "enable": true,
                    "predefined": [
                      {
                        "id": "1003",
                        "topic": "pred/1003"
                      }
                    ],
                    "idle_timeout": "30s",
                    "mountpoint": "mqttsn2/",
                    "enable_stats": true,
                    "enable_qos3": false,
                    "gateway_id": 1
                  },
                  "summary": "A simple MQTT-SN gateway config"
                },
                "ocpp_gateway": {
                  "value": {
                    "enable": true,
                    "upstream": {
                      "topic": "cp/${cid}",
                      "error_topic": "cp/${cid}/error",
                      "reply_topic": "cp/${cid}/reply"
                    },
                    "mountpoint": "ocpp/",
                    "enable_stats": true,
                    "default_heartbeat_interval": "60s",
                    "dnstream": {
                      "topic": "cp/${cid}"
                    },
                    "message_format_checking": "disable"
                  },
                  "summary": "A simple OCPP gateway config"
                },
                "stomp_gateway": {
                  "value": {
                    "enable": true,
                    "frame": {
                      "max_headers": 100,
                      "max_body_length": 655350,
                      "max_headers_length": 10240
                    },
                    "idle_timeout": "30s",
                    "mountpoint": "stomp2/",
                    "enable_stats": true
                  },
                  "summary": "A simple STOMP gateway config"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_stomp"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_ocpp"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_mqttsn"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_lwm2m"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_jt808"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_gbt32960"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_exproto"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_coap"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.stomp"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.ocpp"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.mqttsn"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.lwm2m"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.jt808"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.gbt32960"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.exproto"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.coap"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes": {
      "get": {
        "description": "List EMQX nodes",
        "tags": [
          "Nodes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List all EMQX nodes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_nodes.node_info"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/actions/{id}": {
      "get": {
        "description": "Get a bridge by id.",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "http": {
                    "value": {
                      "name": "my_http_action",
                      "status": "connected",
                      "type": "http",
                      "enable": true,
                      "parameters": {
                        "path": "/room/${room_no}",
                        "body": "${.}",
                        "headers": {},
                        "method": "post"
                      },
                      "connector": "my_http_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16,
                        "query_mode": "async",
                        "health_check_interval": "15s"
                      }
                    },
                    "summary": "HTTP Action"
                  },
                  "confluent_producer": {
                    "value": {
                      "name": "my_confluent_producer_action",
                      "status": "connected",
                      "type": "confluent_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB",
                          "memory_overload_protection": true
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_linger_bytes": "10MB",
                        "max_batch_bytes": "896KB",
                        "kafka_headers": "${.pub_props}",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_header_value_encode_mode": "none",
                        "partition_strategy": "random",
                        "partition_count_refresh_interval": "60s",
                        "max_linger_time": "5ms"
                      },
                      "connector": "my_confluent_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Confluent Action"
                  },
                  "iotdb": {
                    "value": {
                      "name": "iotdb_action",
                      "status": "connected",
                      "type": "iotdb",
                      "description": "My example iotdb action",
                      "enable": true,
                      "parameters": {
                        "data": [
                          {
                            "timestamp": "now",
                            "value": "${st}",
                            "data_type": "BOOLEAN",
                            "measurement": "status"
                          }
                        ],
                        "device_id": "my_device",
                        "is_aligned": false
                      },
                      "connector": "iotdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Apache IoTDB Bridge"
                  },
                  "direct_azure_blob_storage": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "mode": "direct",
                        "content": "${.payload}",
                        "blob": "${.payload.blob}",
                        "container": "${.payload.container}"
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "batch_time": "0ms",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Azure Blob Storage Direct Upload Action"
                  },
                  "couchbase": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into mqtt (key, value) values (${.id}, ${.payload})"
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Couchbase Action"
                  },
                  "datalayers": {
                    "value": {
                      "name": "datalayers_action",
                      "status": "connected",
                      "type": "datalayers",
                      "description": "My example datalayers action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                      },
                      "connector": "datalayers_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Datalayers Action"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer_action",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB",
                          "memory_overload_protection": true
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_linger_bytes": "10MB",
                        "max_batch_bytes": "896KB",
                        "kafka_headers": "${.pub_props}",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_header_value_encode_mode": "none",
                        "partition_strategy": "random",
                        "partition_count_refresh_interval": "60s",
                        "max_linger_time": "5ms"
                      },
                      "connector": "my_azure_event_hub_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Azure Event Hub Action"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "timestamp": "${.timestamp}",
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "segment_bytes": "10MB",
                          "per_partition_limit": "2GB",
                          "memory_overload_protection": true
                        },
                        "compression": "no_compression",
                        "topic": "kafka-topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_linger_bytes": "10MB",
                        "max_batch_bytes": "896KB",
                        "kafka_headers": "${pub_props}",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_header_value_encode_mode": "none",
                        "partitions_limit": "all_partitions",
                        "partition_strategy": "random",
                        "partition_count_refresh_interval": "60s",
                        "max_linger_time": "5ms"
                      },
                      "connector": "my_kafka_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "32s"
                      },
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Kafka Producer Action"
                  },
                  "kinesis": {
                    "value": {
                      "name": "kinesis_action",
                      "status": "connected",
                      "type": "kinesis",
                      "description": "My example kinesis action",
                      "enable": true,
                      "parameters": {
                        "partition_key": "any_key",
                        "payload_template": "${.}",
                        "stream_name": "my_stream"
                      },
                      "connector": "kinesis_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Kinesis Action"
                  },
                  "pgsql": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "pgsql",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "PostgreSQL Action"
                  },
                  "mysql": {
                    "value": {
                      "name": "mysql_action",
                      "status": "connected",
                      "type": "mysql",
                      "description": "My example mysql action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))"
                      },
                      "connector": "mysql_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MySQL Action"
                  },
                  "mqtt": {
                    "value": {
                      "name": "mqtt_action",
                      "status": "connected",
                      "type": "mqtt",
                      "description": "My example mqtt action",
                      "enable": true,
                      "parameters": {
                        "retain": false,
                        "payload": "${.payload}",
                        "topic": "remote/topic",
                        "qos": 2
                      },
                      "connector": "mqtt_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MQTT Producer Action"
                  },
                  "rabbitmq": {
                    "value": {
                      "name": "rabbitmq_action",
                      "status": "connected",
                      "type": "rabbitmq",
                      "description": "My example rabbitmq action",
                      "enable": true,
                      "parameters": {
                        "exchange": "test_exchange",
                        "payload_template": "${.payload}",
                        "routing_key": "/",
                        "wait_for_publish_confirmations": true,
                        "delivery_mode": "non_persistent",
                        "publish_confirmation_timeout": "30s"
                      },
                      "connector": "rabbitmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "RabbitMQ Producer Action"
                  },
                  "redis": {
                    "value": {
                      "status": "connected",
                      "description": "My action",
                      "enable": true,
                      "parameters": {
                        "command_template": [
                          "LPUSH",
                          "MSGS",
                          "${payload}"
                        ]
                      },
                      "connector": "my_connector_name",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1
                      }
                    },
                    "summary": "Redis Action"
                  },
                  "dynamo": {
                    "value": {
                      "name": "dynamo_action",
                      "status": "connected",
                      "type": "dynamo",
                      "description": "My example dynamo action",
                      "enable": true,
                      "connector": "dynamo_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "hash_key": "clientid",
                        "table": "mqtt_msg",
                        "template": ""
                      }
                    },
                    "summary": "DynamoDB Action"
                  },
                  "tdengine": {
                    "value": {
                      "name": "tdengine_action",
                      "status": "connected",
                      "type": "tdengine",
                      "description": "My example tdengine action",
                      "enable": true,
                      "parameters": {
                        "database": "mqtt",
                        "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})"
                      },
                      "connector": "tdengine_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "TDengine Action"
                  },
                  "s3": {
                    "value": {
                      "status": "connected",
                      "description": "My upload action",
                      "enable": true,
                      "parameters": {
                        "mode": "direct",
                        "key": "${topic}",
                        "content": "${payload}",
                        "bucket": "${clientid}",
                        "acl": "public_read"
                      },
                      "connector": "my_s3_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "query_mode": "sync",
                        "inflight_window": 10
                      }
                    },
                    "summary": "S3 Direct Upload"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "greptimedb_action",
                      "status": "connected",
                      "type": "greptimedb",
                      "description": "My example greptimedb action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                      },
                      "connector": "greptimedb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "GreptimeDB Action"
                  },
                  "opents": {
                    "value": {
                      "name": "opents_action",
                      "status": "connected",
                      "type": "opents",
                      "description": "My example opents action",
                      "enable": true,
                      "parameters": {
                        "data": [
                          {
                            "value": "${value}",
                            "tags": "${tags}",
                            "metric": "${metric}"
                          }
                        ]
                      },
                      "connector": "opents_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "OpenTSDB Action"
                  },
                  "oracle": {
                    "value": {
                      "name": "oracle_action",
                      "status": "connected",
                      "type": "oracle",
                      "description": "My example oracle action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})"
                      },
                      "connector": "oracle_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Oracle Action"
                  },
                  "snowflake": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "mode": "aggregated",
                        "connect_timeout": "15s",
                        "pool_size": 16,
                        "private_key": "file:///path/to/secret.pem",
                        "max_retries": 3,
                        "schema": "public",
                        "database": "testdatabase",
                        "stage": "teststage",
                        "pipe": "testpipe",
                        "pipelining": 100,
                        "aggregation": {
                          "container": {
                            "type": "csv"
                          },
                          "max_records": 1000,
                          "time_interval": "60s"
                        },
                        "pipe_user": "pipeuser"
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 10000,
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "batch_time": "60s",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Snowflake Action"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "hstreamdb_action",
                      "status": "connected",
                      "type": "hstreamdb",
                      "description": "My example hstreamdb action",
                      "enable": true,
                      "connector": "hstreamdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "aggregation_pool_size": 8,
                        "partition_key": "hej",
                        "record_template": "${payload}",
                        "stream": "mqtt_message",
                        "writer_pool_size": 8
                      }
                    },
                    "summary": "HStreamDB Action"
                  },
                  "cassandra": {
                    "value": {
                      "name": "cassandra_action",
                      "status": "connected",
                      "type": "cassandra",
                      "description": "My example cassandra action",
                      "enable": true,
                      "parameters": {
                        "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})"
                      },
                      "connector": "cassandra_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Cassandra Action"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "clickhouse_action",
                      "status": "connected",
                      "type": "clickhouse",
                      "description": "My example clickhouse action",
                      "enable": true,
                      "parameters": {
                        "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                        "batch_value_separator": ", "
                      },
                      "connector": "clickhouse_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "ClickHouse Action"
                  },
                  "influxdb": {
                    "value": {
                      "name": "influxdb_action",
                      "status": "connected",
                      "type": "influxdb",
                      "description": "My example influxdb action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                      },
                      "connector": "influxdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "InfluxDB Action"
                  },
                  "sqlserver": {
                    "value": {
                      "name": "sqlserver_action",
                      "status": "connected",
                      "type": "sqlserver",
                      "description": "My example sqlserver action",
                      "enable": true,
                      "connector": "sqlserver_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )"
                      }
                    },
                    "summary": "Microsoft SQL Server Action"
                  },
                  "matrix": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "matrix",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "Matrix Action"
                  },
                  "aggregated_azure_blob_storage": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "mode": "aggregated",
                        "blob": "${action}/${node}/${datetime.rfc3339}/${sequence}",
                        "container": "mycontainer",
                        "aggregation": {
                          "container": {
                            "type": "csv",
                            "column_order": [
                              "a",
                              "b"
                            ]
                          },
                          "max_records": 10000,
                          "time_interval": "4s"
                        }
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 100,
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "batch_time": "10ms",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Azure Blob Storage Aggregated Upload Action"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "rocketmq_action",
                      "status": "connected",
                      "type": "rocketmq",
                      "description": "My example rocketmq action",
                      "enable": true,
                      "connector": "rocketmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "refresh_interval": "3s",
                        "send_buffer": "1024KB",
                        "sync_timeout": "3s",
                        "template": "",
                        "topic": "TopicTest"
                      }
                    },
                    "summary": "RocketMQ Action"
                  },
                  "pulsar": {
                    "value": {
                      "name": "pulsar_action",
                      "status": "connected",
                      "type": "pulsar",
                      "description": "My example pulsar action",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "pulsar_topic": "test_topic",
                        "sync_timeout": "5s"
                      },
                      "connector": "pulsar_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Pulsar Producer Action"
                  },
                  "syskeeper_forwarder": {
                    "value": {
                      "name": "syskeeper_forwarder",
                      "status": "connected",
                      "type": "syskeeper_forwarder",
                      "enable": true,
                      "parameters": {
                        "template": "${payload}",
                        "target_topic": "${topic}"
                      },
                      "connector": "syskeeper_forwarder",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16
                      }
                    },
                    "summary": "Syskeeper Forwarder Bridge"
                  },
                  "s3_aggreg": {
                    "value": {
                      "status": "connected",
                      "description": "My aggregated upload action",
                      "enable": true,
                      "parameters": {
                        "mode": "aggregated",
                        "key": "${action}/${node}/${datetime.rfc3339utc}_N${sequence}.csv",
                        "bucket": "mqtt-aggregated",
                        "acl": "public_read",
                        "aggregation": {
                          "max_records": 100000,
                          "time_interval": "15m"
                        },
                        "container": {
                          "type": "csv",
                          "column_order": [
                            "clientid",
                            "topic",
                            "publish_received_at"
                          ]
                        }
                      },
                      "connector": "my_s3_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "query_mode": "async",
                        "inflight_window": 100,
                        "health_check_interval": "10s"
                      }
                    },
                    "summary": "S3 Aggregated Upload"
                  },
                  "elasticsearch": {
                    "value": {
                      "name": "elasticsearch_action",
                      "status": "connected",
                      "type": "elasticsearch",
                      "description": "My example elasticsearch action",
                      "enable": true,
                      "parameters": {
                        "index": "${payload.index}",
                        "action": "create",
                        "doc": "${payload.doc}",
                        "overwrite": true
                      },
                      "connector": "elasticsearch_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Elastic Search Bridge"
                  },
                  "gcp_pubsub_producer": {
                    "value": {
                      "status": "connected",
                      "description": "My action",
                      "enable": true,
                      "parameters": {
                        "payload_template": "${payload}",
                        "attributes_template": [
                          {
                            "value": "${payload.attrs.v}",
                            "key": "${payload.attrs.k}"
                          }
                        ],
                        "ordering_key_template": "${payload.ok}",
                        "pubsub_topic": "mytopic"
                      },
                      "connector": "my_connector_name",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 5
                      },
                      "local_topic": "local/topic"
                    },
                    "summary": "GCP PubSub Producer Action"
                  },
                  "mongodb": {
                    "value": {
                      "name": "mongodb_action",
                      "status": "connected",
                      "type": "mongodb",
                      "description": "My example mongodb action",
                      "enable": true,
                      "parameters": {
                        "collection": "mycol"
                      },
                      "connector": "mongodb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MongoDB Action"
                  },
                  "timescale": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "timescale",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "Timescale Action"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_producer.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_elasticsearch.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/action_azure_blob_storage.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/syskeeper.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/pulsar.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/action_snowflake.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_opents.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_s3.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_tdengine.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/redis.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt_publisher.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pgsql.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_datalayers.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/action_couchbase.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_iotdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/confluent.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get_bridge_v2"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get bridge",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update a bridge by id.",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "http": {
                    "value": {
                      "name": "my_http_action",
                      "status": "connected",
                      "type": "http",
                      "enable": true,
                      "parameters": {
                        "path": "/room/${room_no}",
                        "body": "${.}",
                        "headers": {},
                        "method": "post"
                      },
                      "connector": "my_http_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16,
                        "query_mode": "async",
                        "health_check_interval": "15s"
                      }
                    },
                    "summary": "HTTP Action"
                  },
                  "confluent_producer": {
                    "value": {
                      "name": "my_confluent_producer_action",
                      "status": "connected",
                      "type": "confluent_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB",
                          "memory_overload_protection": true
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_linger_bytes": "10MB",
                        "max_batch_bytes": "896KB",
                        "kafka_headers": "${.pub_props}",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_header_value_encode_mode": "none",
                        "partition_strategy": "random",
                        "partition_count_refresh_interval": "60s",
                        "max_linger_time": "5ms"
                      },
                      "connector": "my_confluent_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Confluent Action"
                  },
                  "iotdb": {
                    "value": {
                      "name": "iotdb_action",
                      "status": "connected",
                      "type": "iotdb",
                      "description": "My example iotdb action",
                      "enable": true,
                      "parameters": {
                        "data": [
                          {
                            "timestamp": "now",
                            "value": "${st}",
                            "data_type": "BOOLEAN",
                            "measurement": "status"
                          }
                        ],
                        "device_id": "my_device",
                        "is_aligned": false
                      },
                      "connector": "iotdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Apache IoTDB Bridge"
                  },
                  "direct_azure_blob_storage": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "mode": "direct",
                        "content": "${.payload}",
                        "blob": "${.payload.blob}",
                        "container": "${.payload.container}"
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "batch_time": "0ms",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Azure Blob Storage Direct Upload Action"
                  },
                  "couchbase": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into mqtt (key, value) values (${.id}, ${.payload})"
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Couchbase Action"
                  },
                  "datalayers": {
                    "value": {
                      "name": "datalayers_action",
                      "status": "connected",
                      "type": "datalayers",
                      "description": "My example datalayers action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                      },
                      "connector": "datalayers_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Datalayers Action"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer_action",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB",
                          "memory_overload_protection": true
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_linger_bytes": "10MB",
                        "max_batch_bytes": "896KB",
                        "kafka_headers": "${.pub_props}",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_header_value_encode_mode": "none",
                        "partition_strategy": "random",
                        "partition_count_refresh_interval": "60s",
                        "max_linger_time": "5ms"
                      },
                      "connector": "my_azure_event_hub_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Azure Event Hub Action"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "timestamp": "${.timestamp}",
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "segment_bytes": "10MB",
                          "per_partition_limit": "2GB",
                          "memory_overload_protection": true
                        },
                        "compression": "no_compression",
                        "topic": "kafka-topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_linger_bytes": "10MB",
                        "max_batch_bytes": "896KB",
                        "kafka_headers": "${pub_props}",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_header_value_encode_mode": "none",
                        "partitions_limit": "all_partitions",
                        "partition_strategy": "random",
                        "partition_count_refresh_interval": "60s",
                        "max_linger_time": "5ms"
                      },
                      "connector": "my_kafka_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "32s"
                      },
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Kafka Producer Action"
                  },
                  "kinesis": {
                    "value": {
                      "name": "kinesis_action",
                      "status": "connected",
                      "type": "kinesis",
                      "description": "My example kinesis action",
                      "enable": true,
                      "parameters": {
                        "partition_key": "any_key",
                        "payload_template": "${.}",
                        "stream_name": "my_stream"
                      },
                      "connector": "kinesis_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Kinesis Action"
                  },
                  "pgsql": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "pgsql",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "PostgreSQL Action"
                  },
                  "mysql": {
                    "value": {
                      "name": "mysql_action",
                      "status": "connected",
                      "type": "mysql",
                      "description": "My example mysql action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))"
                      },
                      "connector": "mysql_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MySQL Action"
                  },
                  "mqtt": {
                    "value": {
                      "name": "mqtt_action",
                      "status": "connected",
                      "type": "mqtt",
                      "description": "My example mqtt action",
                      "enable": true,
                      "parameters": {
                        "retain": false,
                        "payload": "${.payload}",
                        "topic": "remote/topic",
                        "qos": 2
                      },
                      "connector": "mqtt_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MQTT Producer Action"
                  },
                  "rabbitmq": {
                    "value": {
                      "name": "rabbitmq_action",
                      "status": "connected",
                      "type": "rabbitmq",
                      "description": "My example rabbitmq action",
                      "enable": true,
                      "parameters": {
                        "exchange": "test_exchange",
                        "payload_template": "${.payload}",
                        "routing_key": "/",
                        "wait_for_publish_confirmations": true,
                        "delivery_mode": "non_persistent",
                        "publish_confirmation_timeout": "30s"
                      },
                      "connector": "rabbitmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "RabbitMQ Producer Action"
                  },
                  "redis": {
                    "value": {
                      "status": "connected",
                      "description": "My action",
                      "enable": true,
                      "parameters": {
                        "command_template": [
                          "LPUSH",
                          "MSGS",
                          "${payload}"
                        ]
                      },
                      "connector": "my_connector_name",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1
                      }
                    },
                    "summary": "Redis Action"
                  },
                  "dynamo": {
                    "value": {
                      "name": "dynamo_action",
                      "status": "connected",
                      "type": "dynamo",
                      "description": "My example dynamo action",
                      "enable": true,
                      "connector": "dynamo_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "hash_key": "clientid",
                        "table": "mqtt_msg",
                        "template": ""
                      }
                    },
                    "summary": "DynamoDB Action"
                  },
                  "tdengine": {
                    "value": {
                      "name": "tdengine_action",
                      "status": "connected",
                      "type": "tdengine",
                      "description": "My example tdengine action",
                      "enable": true,
                      "parameters": {
                        "database": "mqtt",
                        "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})"
                      },
                      "connector": "tdengine_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "TDengine Action"
                  },
                  "s3": {
                    "value": {
                      "status": "connected",
                      "description": "My upload action",
                      "enable": true,
                      "parameters": {
                        "mode": "direct",
                        "key": "${topic}",
                        "content": "${payload}",
                        "bucket": "${clientid}",
                        "acl": "public_read"
                      },
                      "connector": "my_s3_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "query_mode": "sync",
                        "inflight_window": 10
                      }
                    },
                    "summary": "S3 Direct Upload"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "greptimedb_action",
                      "status": "connected",
                      "type": "greptimedb",
                      "description": "My example greptimedb action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                      },
                      "connector": "greptimedb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "GreptimeDB Action"
                  },
                  "opents": {
                    "value": {
                      "name": "opents_action",
                      "status": "connected",
                      "type": "opents",
                      "description": "My example opents action",
                      "enable": true,
                      "parameters": {
                        "data": [
                          {
                            "value": "${value}",
                            "tags": "${tags}",
                            "metric": "${metric}"
                          }
                        ]
                      },
                      "connector": "opents_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "OpenTSDB Action"
                  },
                  "oracle": {
                    "value": {
                      "name": "oracle_action",
                      "status": "connected",
                      "type": "oracle",
                      "description": "My example oracle action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})"
                      },
                      "connector": "oracle_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Oracle Action"
                  },
                  "snowflake": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "mode": "aggregated",
                        "connect_timeout": "15s",
                        "pool_size": 16,
                        "private_key": "file:///path/to/secret.pem",
                        "max_retries": 3,
                        "schema": "public",
                        "database": "testdatabase",
                        "stage": "teststage",
                        "pipe": "testpipe",
                        "pipelining": 100,
                        "aggregation": {
                          "container": {
                            "type": "csv"
                          },
                          "max_records": 1000,
                          "time_interval": "60s"
                        },
                        "pipe_user": "pipeuser"
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 10000,
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "batch_time": "60s",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Snowflake Action"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "hstreamdb_action",
                      "status": "connected",
                      "type": "hstreamdb",
                      "description": "My example hstreamdb action",
                      "enable": true,
                      "connector": "hstreamdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "aggregation_pool_size": 8,
                        "partition_key": "hej",
                        "record_template": "${payload}",
                        "stream": "mqtt_message",
                        "writer_pool_size": 8
                      }
                    },
                    "summary": "HStreamDB Action"
                  },
                  "cassandra": {
                    "value": {
                      "name": "cassandra_action",
                      "status": "connected",
                      "type": "cassandra",
                      "description": "My example cassandra action",
                      "enable": true,
                      "parameters": {
                        "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})"
                      },
                      "connector": "cassandra_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Cassandra Action"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "clickhouse_action",
                      "status": "connected",
                      "type": "clickhouse",
                      "description": "My example clickhouse action",
                      "enable": true,
                      "parameters": {
                        "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                        "batch_value_separator": ", "
                      },
                      "connector": "clickhouse_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "ClickHouse Action"
                  },
                  "influxdb": {
                    "value": {
                      "name": "influxdb_action",
                      "status": "connected",
                      "type": "influxdb",
                      "description": "My example influxdb action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                      },
                      "connector": "influxdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "InfluxDB Action"
                  },
                  "sqlserver": {
                    "value": {
                      "name": "sqlserver_action",
                      "status": "connected",
                      "type": "sqlserver",
                      "description": "My example sqlserver action",
                      "enable": true,
                      "connector": "sqlserver_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )"
                      }
                    },
                    "summary": "Microsoft SQL Server Action"
                  },
                  "matrix": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "matrix",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "Matrix Action"
                  },
                  "aggregated_azure_blob_storage": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "mode": "aggregated",
                        "blob": "${action}/${node}/${datetime.rfc3339}/${sequence}",
                        "container": "mycontainer",
                        "aggregation": {
                          "container": {
                            "type": "csv",
                            "column_order": [
                              "a",
                              "b"
                            ]
                          },
                          "max_records": 10000,
                          "time_interval": "4s"
                        }
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 100,
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "batch_time": "10ms",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Azure Blob Storage Aggregated Upload Action"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "rocketmq_action",
                      "status": "connected",
                      "type": "rocketmq",
                      "description": "My example rocketmq action",
                      "enable": true,
                      "connector": "rocketmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "refresh_interval": "3s",
                        "send_buffer": "1024KB",
                        "sync_timeout": "3s",
                        "template": "",
                        "topic": "TopicTest"
                      }
                    },
                    "summary": "RocketMQ Action"
                  },
                  "pulsar": {
                    "value": {
                      "name": "pulsar_action",
                      "status": "connected",
                      "type": "pulsar",
                      "description": "My example pulsar action",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "pulsar_topic": "test_topic",
                        "sync_timeout": "5s"
                      },
                      "connector": "pulsar_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Pulsar Producer Action"
                  },
                  "syskeeper_forwarder": {
                    "value": {
                      "name": "syskeeper_forwarder",
                      "status": "connected",
                      "type": "syskeeper_forwarder",
                      "enable": true,
                      "parameters": {
                        "template": "${payload}",
                        "target_topic": "${topic}"
                      },
                      "connector": "syskeeper_forwarder",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16
                      }
                    },
                    "summary": "Syskeeper Forwarder Bridge"
                  },
                  "s3_aggreg": {
                    "value": {
                      "status": "connected",
                      "description": "My aggregated upload action",
                      "enable": true,
                      "parameters": {
                        "mode": "aggregated",
                        "key": "${action}/${node}/${datetime.rfc3339utc}_N${sequence}.csv",
                        "bucket": "mqtt-aggregated",
                        "acl": "public_read",
                        "aggregation": {
                          "max_records": 100000,
                          "time_interval": "15m"
                        },
                        "container": {
                          "type": "csv",
                          "column_order": [
                            "clientid",
                            "topic",
                            "publish_received_at"
                          ]
                        }
                      },
                      "connector": "my_s3_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "query_mode": "async",
                        "inflight_window": 100,
                        "health_check_interval": "10s"
                      }
                    },
                    "summary": "S3 Aggregated Upload"
                  },
                  "elasticsearch": {
                    "value": {
                      "name": "elasticsearch_action",
                      "status": "connected",
                      "type": "elasticsearch",
                      "description": "My example elasticsearch action",
                      "enable": true,
                      "parameters": {
                        "index": "${payload.index}",
                        "action": "create",
                        "doc": "${payload.doc}",
                        "overwrite": true
                      },
                      "connector": "elasticsearch_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Elastic Search Bridge"
                  },
                  "gcp_pubsub_producer": {
                    "value": {
                      "status": "connected",
                      "description": "My action",
                      "enable": true,
                      "parameters": {
                        "payload_template": "${payload}",
                        "attributes_template": [
                          {
                            "value": "${payload.attrs.v}",
                            "key": "${payload.attrs.k}"
                          }
                        ],
                        "ordering_key_template": "${payload.ok}",
                        "pubsub_topic": "mytopic"
                      },
                      "connector": "my_connector_name",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 5
                      },
                      "local_topic": "local/topic"
                    },
                    "summary": "GCP PubSub Producer Action"
                  },
                  "mongodb": {
                    "value": {
                      "name": "mongodb_action",
                      "status": "connected",
                      "type": "mongodb",
                      "description": "My example mongodb action",
                      "enable": true,
                      "parameters": {
                        "collection": "mycol"
                      },
                      "connector": "mongodb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MongoDB Action"
                  },
                  "timescale": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "timescale",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "Timescale Action"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_producer.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_elasticsearch.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/action_azure_blob_storage.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/syskeeper.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/pulsar.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/action_snowflake.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_opents.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_s3.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_tdengine.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/redis.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt_publisher.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pgsql.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_datalayers.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/action_couchbase.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_iotdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/confluent.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get_bridge_v2"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update bridge failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update bridge",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "http": {
                  "value": {
                    "enable": true,
                    "parameters": {
                      "path": "/room/${room_no}",
                      "body": "${.}",
                      "headers": {},
                      "method": "post"
                    },
                    "connector": "my_http_connector",
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "async",
                      "health_check_interval": "15s"
                    }
                  },
                  "summary": "HTTP Action"
                },
                "confluent_producer": {
                  "value": {
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${.pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "connector": "my_confluent_producer_connector",
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Confluent Action"
                },
                "iotdb": {
                  "value": {
                    "description": "My example iotdb action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "timestamp": "now",
                          "value": "${st}",
                          "data_type": "BOOLEAN",
                          "measurement": "status"
                        }
                      ],
                      "device_id": "my_device",
                      "is_aligned": false
                    },
                    "connector": "iotdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Apache IoTDB Bridge"
                },
                "direct_azure_blob_storage": {
                  "value": {
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "direct",
                      "content": "${.payload}",
                      "blob": "${.payload.blob}",
                      "container": "${.payload.container}"
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "0ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Azure Blob Storage Direct Upload Action"
                },
                "couchbase": {
                  "value": {
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into mqtt (key, value) values (${.id}, ${.payload})"
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Couchbase Action"
                },
                "datalayers": {
                  "value": {
                    "description": "My example datalayers action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "datalayers_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Datalayers Action"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${.pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "connector": "my_azure_event_hub_producer_connector",
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Azure Event Hub Action"
                },
                "kafka_producer": {
                  "value": {
                    "enable": true,
                    "parameters": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "10MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partitions_limit": "all_partitions",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "connector": "my_kafka_producer_connector",
                    "resource_opts": {
                      "health_check_interval": "32s"
                    },
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Kafka Producer Action"
                },
                "kinesis": {
                  "value": {
                    "description": "My example kinesis action",
                    "enable": true,
                    "parameters": {
                      "partition_key": "any_key",
                      "payload_template": "${.}",
                      "stream_name": "my_stream"
                    },
                    "connector": "kinesis_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Kinesis Action"
                },
                "pgsql": {
                  "value": {
                    "name": "my_action",
                    "type": "pgsql",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "PostgreSQL Action"
                },
                "mysql": {
                  "value": {
                    "description": "My example mysql action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))"
                    },
                    "connector": "mysql_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MySQL Action"
                },
                "mqtt": {
                  "value": {
                    "description": "My example mqtt action",
                    "enable": true,
                    "parameters": {
                      "retain": false,
                      "payload": "${.payload}",
                      "topic": "remote/topic",
                      "qos": 2
                    },
                    "connector": "mqtt_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MQTT Producer Action"
                },
                "rabbitmq": {
                  "value": {
                    "description": "My example rabbitmq action",
                    "enable": true,
                    "parameters": {
                      "exchange": "test_exchange",
                      "payload_template": "${.payload}",
                      "routing_key": "/",
                      "wait_for_publish_confirmations": true,
                      "delivery_mode": "non_persistent",
                      "publish_confirmation_timeout": "30s"
                    },
                    "connector": "rabbitmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "RabbitMQ Producer Action"
                },
                "redis": {
                  "value": {
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "connector": "my_connector_name",
                    "resource_opts": {
                      "batch_size": 1
                    }
                  },
                  "summary": "Redis Action"
                },
                "dynamo": {
                  "value": {
                    "description": "My example dynamo action",
                    "enable": true,
                    "connector": "dynamo_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "hash_key": "clientid",
                      "table": "mqtt_msg",
                      "template": ""
                    }
                  },
                  "summary": "DynamoDB Action"
                },
                "tdengine": {
                  "value": {
                    "description": "My example tdengine action",
                    "enable": true,
                    "parameters": {
                      "database": "mqtt",
                      "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})"
                    },
                    "connector": "tdengine_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "TDengine Action"
                },
                "s3": {
                  "value": {
                    "description": "My upload action",
                    "parameters": {
                      "mode": "direct",
                      "key": "${topic}",
                      "content": "${payload}",
                      "bucket": "${clientid}",
                      "acl": "public_read"
                    },
                    "resource_opts": {
                      "query_mode": "sync",
                      "inflight_window": 10
                    }
                  },
                  "summary": "S3 Direct Upload"
                },
                "greptimedb": {
                  "value": {
                    "description": "My example greptimedb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                    },
                    "connector": "greptimedb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "GreptimeDB Action"
                },
                "opents": {
                  "value": {
                    "description": "My example opents action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "value": "${value}",
                          "tags": "${tags}",
                          "metric": "${metric}"
                        }
                      ]
                    },
                    "connector": "opents_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "OpenTSDB Action"
                },
                "oracle": {
                  "value": {
                    "description": "My example oracle action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})"
                    },
                    "connector": "oracle_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Oracle Action"
                },
                "snowflake": {
                  "value": {
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "connect_timeout": "15s",
                      "pool_size": 16,
                      "private_key": "file:///path/to/secret.pem",
                      "max_retries": 3,
                      "schema": "public",
                      "database": "testdatabase",
                      "stage": "teststage",
                      "pipe": "testpipe",
                      "pipelining": 100,
                      "aggregation": {
                        "container": {
                          "type": "csv"
                        },
                        "max_records": 1000,
                        "time_interval": "60s"
                      },
                      "pipe_user": "pipeuser"
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 10000,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "60s",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Snowflake Action"
                },
                "hstreamdb": {
                  "value": {
                    "description": "My example hstreamdb action",
                    "enable": true,
                    "connector": "hstreamdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "aggregation_pool_size": 8,
                      "partition_key": "hej",
                      "record_template": "${payload}",
                      "stream": "mqtt_message",
                      "writer_pool_size": 8
                    }
                  },
                  "summary": "HStreamDB Action"
                },
                "cassandra": {
                  "value": {
                    "description": "My example cassandra action",
                    "enable": true,
                    "parameters": {
                      "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})"
                    },
                    "connector": "cassandra_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Cassandra Action"
                },
                "clickhouse": {
                  "value": {
                    "description": "My example clickhouse action",
                    "enable": true,
                    "parameters": {
                      "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                      "batch_value_separator": ", "
                    },
                    "connector": "clickhouse_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "ClickHouse Action"
                },
                "influxdb": {
                  "value": {
                    "description": "My example influxdb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "influxdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "InfluxDB Action"
                },
                "sqlserver": {
                  "value": {
                    "description": "My example sqlserver action",
                    "enable": true,
                    "connector": "sqlserver_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )"
                    }
                  },
                  "summary": "Microsoft SQL Server Action"
                },
                "matrix": {
                  "value": {
                    "name": "my_action",
                    "type": "matrix",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "Matrix Action"
                },
                "aggregated_azure_blob_storage": {
                  "value": {
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "blob": "${action}/${node}/${datetime.rfc3339}/${sequence}",
                      "container": "mycontainer",
                      "aggregation": {
                        "container": {
                          "type": "csv",
                          "column_order": [
                            "a",
                            "b"
                          ]
                        },
                        "max_records": 10000,
                        "time_interval": "4s"
                      }
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 100,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "10ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Azure Blob Storage Aggregated Upload Action"
                },
                "rocketmq": {
                  "value": {
                    "description": "My example rocketmq action",
                    "enable": true,
                    "connector": "rocketmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "refresh_interval": "3s",
                      "send_buffer": "1024KB",
                      "sync_timeout": "3s",
                      "template": "",
                      "topic": "TopicTest"
                    }
                  },
                  "summary": "RocketMQ Action"
                },
                "pulsar": {
                  "value": {
                    "description": "My example pulsar action",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "pulsar_topic": "test_topic",
                      "sync_timeout": "5s"
                    },
                    "connector": "pulsar_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Pulsar Producer Action"
                },
                "syskeeper_forwarder": {
                  "value": {
                    "enable": true,
                    "parameters": {
                      "template": "${payload}",
                      "target_topic": "${topic}"
                    },
                    "connector": "syskeeper_forwarder",
                    "resource_opts": {
                      "worker_pool_size": 16
                    }
                  },
                  "summary": "Syskeeper Forwarder Bridge"
                },
                "s3_aggreg": {
                  "value": {
                    "description": "My aggregated upload action",
                    "parameters": {
                      "mode": "aggregated",
                      "key": "${action}/${node}/${datetime.rfc3339utc}_N${sequence}.csv",
                      "bucket": "mqtt-aggregated",
                      "acl": "public_read",
                      "aggregation": {
                        "max_records": 100000,
                        "time_interval": "15m"
                      },
                      "container": {
                        "type": "csv",
                        "column_order": [
                          "clientid",
                          "topic",
                          "publish_received_at"
                        ]
                      }
                    },
                    "resource_opts": {
                      "query_mode": "async",
                      "inflight_window": 100,
                      "health_check_interval": "10s"
                    }
                  },
                  "summary": "S3 Aggregated Upload"
                },
                "elasticsearch": {
                  "value": {
                    "description": "My example elasticsearch action",
                    "enable": true,
                    "parameters": {
                      "index": "${payload.index}",
                      "action": "create",
                      "doc": "${payload.doc}",
                      "overwrite": true
                    },
                    "connector": "elasticsearch_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Elastic Search Bridge"
                },
                "gcp_pubsub_producer": {
                  "value": {
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "payload_template": "${payload}",
                      "attributes_template": [
                        {
                          "value": "${payload.attrs.v}",
                          "key": "${payload.attrs.k}"
                        }
                      ],
                      "ordering_key_template": "${payload.ok}",
                      "pubsub_topic": "mytopic"
                    },
                    "connector": "my_connector_name",
                    "resource_opts": {
                      "batch_size": 5
                    },
                    "local_topic": "local/topic"
                  },
                  "summary": "GCP PubSub Producer Action"
                },
                "mongodb": {
                  "value": {
                    "description": "My example mongodb action",
                    "enable": true,
                    "parameters": {
                      "collection": "mycol"
                    },
                    "connector": "mongodb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MongoDB Action"
                },
                "timescale": {
                  "value": {
                    "name": "my_action",
                    "type": "timescale",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "Timescale Action"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_timescale.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_producer.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_elasticsearch.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/action_azure_blob_storage.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/syskeeper.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/pulsar.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/action_snowflake.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_opents.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_s3.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_tdengine.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/redis.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt_publisher.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pgsql.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_datalayers.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/action_couchbase.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_iotdb.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/confluent.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.put_bridge_v2"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a bridge by id.",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "query",
            "name": "also_delete_dep_actions",
            "description": "Whether to cascade delete dependent actions.",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Bridge deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "Dependent Rule IDs",
                      "items": {
                        "type": "string"
                      }
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cannot delete bridge while active rules are defined for this bridge"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete bridge",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/license/setting": {
      "get": {
        "description": "Update license setting",
        "tags": [
          "License"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "connection_low_watermark": {
                      "default": "75%",
                      "type": "string",
                      "description": "Low watermark limit below which license connection quota usage alarms are deactivated",
                      "example": "75%"
                    },
                    "connection_high_watermark": {
                      "default": "80%",
                      "type": "string",
                      "description": "High watermark limit above which license connection quota usage alarms are activated",
                      "example": "80%"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get license setting",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update license setting",
        "tags": [
          "License"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "connection_low_watermark": {
                      "default": "75%",
                      "type": "string",
                      "description": "Low watermark limit below which license connection quota usage alarms are deactivated",
                      "example": "75%"
                    },
                    "connection_high_watermark": {
                      "default": "80%",
                      "type": "string",
                      "description": "High watermark limit above which license connection quota usage alarms are activated",
                      "example": "80%"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad setting value"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update license setting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "connection_low_watermark": {
                    "default": "75%",
                    "type": "string",
                    "description": "Low watermark limit below which license connection quota usage alarms are deactivated",
                    "example": "75%"
                  },
                  "connection_high_watermark": {
                    "default": "80%",
                    "type": "string",
                    "description": "High watermark limit above which license connection quota usage alarms are activated",
                    "example": "80%"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/{type}": {
      "get": {
        "description": "Get a authorization source",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "description": "Authorization type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "file",
                "built_in_database",
                "http",
                "redis",
                "mysql",
                "postgresql",
                "mongodb",
                "ldap"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authorization source",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authz.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authz.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authz.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authz.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authz.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authz.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authz.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authz.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authz.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authz.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authz.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authz.builtin_db"
                    },
                    {
                      "$ref": "#/components/schemas/authz.api_file"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update source",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "description": "Authorization type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "file",
                "built_in_database",
                "http",
                "redis",
                "mysql",
                "postgresql",
                "mongodb",
                "ldap"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Authorization source updated successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authz.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authz.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authz.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authz.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authz.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authz.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authz.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authz.builtin_db"
                  },
                  {
                    "$ref": "#/components/schemas/authz.api_file"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete source",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "description": "Authorization type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "file",
                "built_in_database",
                "http",
                "redis",
                "mysql",
                "postgresql",
                "mongodb",
                "ldap"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/authentication/import_users": {
      "post": {
        "description": "Import users into the gateway authenticator (only supports built_in_database)",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "responses": {
          "204": {
            "description": "Imported"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Import users",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_validations/validation/{name}/metrics/reset": {
      "post": {
        "description": "Reset metrics for a particular validation",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Validation name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_validation"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Reset validation metrics",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api_key": {
      "get": {
        "description": "Return api_key list. This API can only be requested using a bearer token.",
        "tags": [
          "API Keys"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Unique and format by [a-zA-Z0-9-_]",
                      "example": "EMQX-API-KEY-1"
                    },
                    "api_key": {
                      "type": "string",
                      "description": "TODO:uses HMAC-SHA256 for signing.",
                      "example": "a4697a5c75a769f6"
                    },
                    "expired_at": {
                      "default": "infinity",
                      "description": "No longer valid datetime",
                      "example": "2021-12-05T02:01:34.186Z",
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "type": "integer",
                              "description": "epoch-second",
                              "example": 1640995200
                            },
                            {
                              "type": "string",
                              "format": "date-time",
                              "example": "2022-01-01T00:00:00.000Z"
                            }
                          ]
                        },
                        {
                          "type": "string",
                          "enum": [
                            "infinity"
                          ]
                        }
                      ]
                    },
                    "created_at": {
                      "description": "ApiKey create datetime",
                      "example": "2021-12-01T00:00:00.000Z",
                      "oneOf": [
                        {
                          "type": "integer",
                          "description": "epoch-second",
                          "example": 1640995200
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2022-01-01T00:00:00.000Z"
                        }
                      ]
                    },
                    "desc": {
                      "type": "string",
                      "example": "Note"
                    },
                    "enable": {
                      "type": "boolean",
                      "description": "Enable/Disable"
                    },
                    "expired": {
                      "type": "boolean",
                      "description": "Expired"
                    },
                    "role": {
                      "default": "administrator",
                      "type": "string",
                      "description": "Role for this API",
                      "example": "administrator"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create new api_key. This API can only be requested using a bearer token.",
        "tags": [
          "API Keys"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api_key.app"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique and format by [a-zA-Z0-9-_]",
                    "example": "EMQX-API-KEY-1"
                  },
                  "expired_at": {
                    "default": "infinity",
                    "description": "No longer valid datetime",
                    "example": "2021-12-05T02:01:34.186Z",
                    "oneOf": [
                      {
                        "oneOf": [
                          {
                            "type": "integer",
                            "description": "epoch-second",
                            "example": 1640995200
                          },
                          {
                            "type": "string",
                            "format": "date-time",
                            "example": "2022-01-01T00:00:00.000Z"
                          }
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "infinity"
                        ]
                      }
                    ]
                  },
                  "desc": {
                    "type": "string",
                    "example": "Note"
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Enable/Disable"
                  },
                  "expired": {
                    "type": "boolean",
                    "description": "Expired"
                  },
                  "role": {
                    "default": "administrator",
                    "type": "string",
                    "description": "Role for this API",
                    "example": "administrator"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/listeners/{id}/start": {
      "post": {
        "description": "Start the listener on all nodes.",
        "tags": [
          "Listeners"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST",
                        "BAD_LISTENER_ID"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/banned": {
      "get": {
        "description": "List all currently banned client IDs, usernames and IP addresses.<br/>Filters are supported. Since filters are mutually exclusive, only one filter is allowed in a query.",
        "tags": [
          "Banned"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "in": "query",
            "name": "clientid",
            "description": "Query the banned objects with an exact client ID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "username",
            "description": "Query the banned objects with an exact username.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "peerhost",
            "description": "Query the banned objects with an exact IP address.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "127.0.0.1"
          },
          {
            "in": "query",
            "name": "like_clientid",
            "description": "Fuzzy query banned objects with a client ID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "like_username",
            "description": "Fuzzy query banned objects with an username.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "like_peerhost",
            "description": "Fuzzy query banned objects with an IP address.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "127.0.0.1"
          },
          {
            "in": "query",
            "name": "like_peerhost_net",
            "description": "Fuzzy query banned objects with a CIDR.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "192.1.0.0/16"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_banned.ban"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request, possibly due to wrong parameters or the existence of a banned object."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Clear all banned data.",
        "tags": [
          "Banned"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Add a client ID, username or IP address to the blacklist.",
        "tags": [
          "Banned"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_banned.ban"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS",
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request, possibly due to wrong parameters or the existence of a banned object."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_mgmt_api_banned.ban"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/connectors/{id}/enable/{enable}": {
      "put": {
        "description": "Enable or Disable connector on all nodes in the cluster.",
        "tags": [
          "Connectors"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The connector id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_connector"
          },
          {
            "in": "path",
            "name": "enable",
            "description": "Whether to enable this connector.",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Connector not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Enable or disable connector",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/actions/{id}/metrics": {
      "get": {
        "description": "Get bridge metrics by id.",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "metrics": {
                      "description": "Bridge metrics.",
                      "$ref": "#/components/schemas/bridge.metrics"
                    },
                    "node_metrics": {
                      "type": "array",
                      "description": "Node metrics.",
                      "items": {
                        "$ref": "#/components/schemas/bridge.node_metrics"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Action not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get action metrics",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/order": {
      "put": {
        "description": "Reorder all authorization sources.",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Authorization sources order updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_authz_api_sources.request_sources_order"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/trace/{name}/log": {
      "get": {
        "description": "view trace log",
        "tags": [
          "Trace"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/trace.name"
          },
          {
            "$ref": "#/components/parameters/trace.bytes"
          },
          {
            "$ref": "#/components/parameters/trace.position"
          },
          {
            "$ref": "#/components/parameters/trace.node"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "string",
                      "example": "TEXT-LOG-ITEMS"
                    },
                    "meta": {
                      "properties": {
                        "bytes": {
                          "default": 1000,
                          "maximum": 2147483647,
                          "type": "integer",
                          "description": "Maximum number of bytes to send in response",
                          "minimum": 0
                        },
                        "position": {
                          "default": 0,
                          "type": "integer",
                          "description": "Offset from the current trace position."
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad input parameter"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "NODE_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Trace Name or Node Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Requested chunk size too big"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/connectors": {
      "get": {
        "description": "List all created connectors.",
        "tags": [
          "Connectors"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "name": "influxdb_connector",
                    "status": "connected",
                    "type": "influxdb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "org": "examlpe_org",
                      "token": "example_token",
                      "bucket": "example_bucket",
                      "influxdb_type": "influxdb_api_v2"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "name": "my_http_connector",
                    "status": "connected",
                    "type": "http",
                    "connect_timeout": "15s",
                    "pool_size": 1,
                    "enable": true,
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://localhost:8080/api/v1",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "pool_type": "hash",
                    "enable_pipelining": 100
                  },
                  {
                    "name": "my_confluent_producer_connector",
                    "status": "connected",
                    "type": "confluent_producer",
                    "ssl": {
                      "verify": "verify_none",
                      "enable": true,
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ],
                      "server_name_indication": "auto"
                    },
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "xyz.sa-east1.gcp.confluent.cloud:9092",
                    "metadata_request_timeout": "4s"
                  },
                  {
                    "name": "iotdb_connector",
                    "status": "connected",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example iotdb connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "base_url": "http://iotdb.local:18080/",
                    "actions": [
                      "my_action"
                    ],
                    "pool_type": "random",
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.3.x"
                  },
                  {
                    "status": "connected",
                    "ssl": {
                      "enable": true
                    },
                    "description": "My connector",
                    "server": "couchbase:8093",
                    "enable": true,
                    "password": "******",
                    "username": "admin",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    }
                  },
                  {
                    "name": "datalayers_connector",
                    "status": "connected",
                    "type": "datalayers",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example datalayers connector",
                    "server": "127.0.0.1:8361",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "name": "my_azure_event_hub_producer_connector",
                    "status": "connected",
                    "type": "azure_event_hub_producer",
                    "ssl": {
                      "verify": "verify_none",
                      "enable": true,
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ],
                      "server_name_indication": "auto"
                    },
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  {
                    "name": "my_kafka_producer_connector",
                    "status": "connected",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  {
                    "name": "kinesis_connector",
                    "status": "connected",
                    "type": "kinesis",
                    "description": "My example kinesis connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "aws_access_key_id": "your_access_key",
                    "aws_secret_access_key": "aws_secret_key",
                    "endpoint": "http://localhost:4566",
                    "max_retries": 2,
                    "pool_size": 8
                  },
                  {
                    "name": "syskeeper_proxy",
                    "status": "connected",
                    "type": "syskeeper_proxy",
                    "listen": "127.0.0.1:9092",
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "acceptors": 16,
                    "handshake_timeout": "16s",
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "name": "my_pgsql_connector",
                    "status": "connected",
                    "type": "pgsql",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  {
                    "name": "mysql_connector",
                    "status": "connected",
                    "type": "mysql",
                    "description": "My example mysql connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  {
                    "timeout": "5s",
                    "name": "rabbitmq_connector",
                    "port": 5672,
                    "status": "connected",
                    "type": "rabbitmq",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example rabbitmq connector",
                    "pool_size": 8,
                    "server": "127.0.0.1",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "heartbeat": "30s",
                    "actions": [
                      "my_action"
                    ],
                    "virtual_host": "/"
                  },
                  {
                    "name": "dynamo_connector",
                    "status": "connected",
                    "type": "dynamo",
                    "description": "My example dynamo connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "aws_access_key_id": "root",
                    "aws_secret_access_key": "******",
                    "enable": true,
                    "pool_size": 8,
                    "region": "us-west-2",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "url": "http://127.0.0.1:8000"
                  },
                  {
                    "name": "tdengine_connector",
                    "status": "connected",
                    "type": "tdengine",
                    "description": "My example tdengine connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "name": "mongodb_single_connector",
                    "status": "connected",
                    "type": "mongodb_single",
                    "description": "My example mongodb_single connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "name": "demo",
                    "status": "connected",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example greptimedb connector",
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "password": "******",
                    "username": "example_username",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db"
                  },
                  {
                    "name": "opents_connector",
                    "status": "connected",
                    "type": "opents",
                    "description": "My example opents connector",
                    "pool_size": 8,
                    "server": "http://localhost:4242/",
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "status": "connected",
                    "description": "My connector",
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "account_key": "******",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    },
                    "account_name": "my_account_name"
                  },
                  {
                    "name": "mongodb_sharded_connector",
                    "status": "connected",
                    "type": "mongodb_sharded",
                    "description": "My example mongodb_sharded connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "name": "mongodb_rs_connector",
                    "status": "connected",
                    "type": "mongodb_rs",
                    "description": "My example mongodb_rs connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "status": "connected",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis single connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "server": "127.0.0.1:6379",
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "redis_type": "single"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ]
                  },
                  {
                    "name": "oracle_connector",
                    "status": "connected",
                    "type": "oracle",
                    "description": "My example oracle connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "password": "oracle",
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "server": "127.0.0.1:1521",
                    "service_name": "XE",
                    "sid": "XE",
                    "username": "system"
                  },
                  {
                    "status": "connected",
                    "description": "My connector",
                    "pool_size": 8,
                    "server": "myorg-myaccount.snowflakecomputing.com",
                    "enable": true,
                    "password": "******",
                    "username": "admin",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    },
                    "account": "myorg-myaccount",
                    "dsn": "snowflake"
                  },
                  {
                    "name": "hstreamdb_connector",
                    "status": "connected",
                    "type": "hstreamdb",
                    "description": "My example hstreamdb connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "grpc_timeout": "30s",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "ssl": {
                      "enable": false,
                      "verify": "verify_peer"
                    },
                    "url": "http://127.0.0.1:6570"
                  },
                  {
                    "name": "influxdb_connector",
                    "status": "connected",
                    "type": "influxdb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database",
                      "influxdb_type": "influxdb_api_v1"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "port": 443,
                    "status": "connected",
                    "host": "s3.eu-east-1.amazonaws.com",
                    "description": "My S3 connector",
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "transport_options": {
                      "ssl": {
                        "verify": "verify_peer",
                        "enable": true
                      },
                      "connect_timeout": "1s",
                      "pool_size": 4,
                      "max_retries": 1,
                      "request_timeout": "60s",
                      "enable_pipelining": 1
                    },
                    "secret_access_key": "SECRET",
                    "access_key_id": "ACCESS"
                  },
                  {
                    "name": "cassandra_connector",
                    "status": "connected",
                    "type": "cassandra",
                    "description": "My example cassandra connector",
                    "pool_size": 8,
                    "password": "******",
                    "username": "root",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "servers": "127.0.0.1:9042",
                    "actions": [
                      "my_action"
                    ],
                    "keyspace": "mqtt"
                  },
                  {
                    "name": "my_connector",
                    "status": "connected",
                    "type": "gcp_pubsub_producer",
                    "description": "my connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  {
                    "name": "clickhouse_connector",
                    "status": "connected",
                    "type": "clickhouse",
                    "description": "My example clickhouse connector",
                    "pool_size": 8,
                    "password": "******",
                    "url": "http://localhost:8123",
                    "username": "default",
                    "database": "mqtt",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "driver": "ms-sql",
                    "name": "sqlserver_connector",
                    "status": "connected",
                    "type": "sqlserver",
                    "description": "My example sqlserver connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  {
                    "status": "connected",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis cluster connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "redis_type": "cluster"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ]
                  },
                  {
                    "name": "my_matrix_connector",
                    "status": "connected",
                    "type": "matrix",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  {
                    "name": "my_connector",
                    "status": "connected",
                    "type": "kafka_consumer",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "bootstrap_hosts": "kafka.emqx.net:9092"
                  },
                  {
                    "name": "rocketmq_connector",
                    "status": "connected",
                    "type": "rocketmq",
                    "description": "My example rocketmq connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "enable": true,
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_after_created": true,
                      "start_timeout": "5s"
                    },
                    "servers": "127.0.0.1:9876"
                  },
                  {
                    "name": "pulsar_connector",
                    "status": "connected",
                    "type": "pulsar",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": "none",
                    "description": "My example pulsar connector",
                    "connect_timeout": "5s",
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "servers": "pulsar://127.0.0.1:6650",
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "name": "syskeeper_forwarder",
                    "status": "connected",
                    "type": "syskeeper_forwarder",
                    "pool_size": 16,
                    "server": "127.0.0.1:9092",
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "ack_timeout": "10s",
                    "actions": [
                      "my_action"
                    ],
                    "ack_mode": "no_ack"
                  },
                  {
                    "name": "elasticsearch_connector",
                    "status": "connected",
                    "type": "elasticsearch",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example elasticsearch connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "server": "127.0.0.1:9200",
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "pool_type": "random",
                    "enable_pipelining": 100
                  },
                  {
                    "name": "my_connector",
                    "status": "connected",
                    "type": "gcp_pubsub_producer",
                    "connect_timeout": "10s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "resource_opts": {
                      "request_ttl": "60s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  {
                    "name": "my_timescale_connector",
                    "status": "connected",
                    "type": "timescale",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  {
                    "status": "connected",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis sentinel connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "sentinel": "myredismaster",
                      "redis_type": "sentinel"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ]
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/bridge_timescale.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mongodb.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/gcp_pubsub_producer.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/elasticsearch.get"
                      },
                      {
                        "$ref": "#/components/schemas/connector_azure_blob_storage.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/syskeeper_forwarder.get"
                      },
                      {
                        "$ref": "#/components/schemas/pulsar.get"
                      },
                      {
                        "$ref": "#/components/schemas/rocketmq.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/kafka_consumer.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_matrix.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_sqlserver.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_influxdb.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_clickhouse.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/gcp_pubsub_consumer.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_cassa.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_hstreamdb.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/connector_snowflake.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_oracle.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/opents_connector.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_greptimedb.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_s3.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/tdengine_connector.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_dynamo.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/redis.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/rabbitmq.get"
                      },
                      {
                        "$ref": "#/components/schemas/connector_mqtt.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mysql.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/connector_postgres.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/connector_syskeeper_proxy.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_kinesis.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_kafka.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_azure_event_hub.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_datalayers.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/connector_couchbase.get_connector"
                      },
                      {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/iotdb.get_thrift"
                          },
                          {
                            "$ref": "#/components/schemas/iotdb.get_restapi"
                          }
                        ]
                      },
                      {
                        "$ref": "#/components/schemas/confluent.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_http.get_connector"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "summary": "List connectors",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create a new connector by type and name.",
        "tags": [
          "Connectors"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "influxdb_api_v2": {
                    "value": {
                      "name": "influxdb_connector",
                      "status": "connected",
                      "type": "influxdb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example influxdb connector",
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "parameters": {
                        "org": "examlpe_org",
                        "token": "example_token",
                        "bucket": "example_bucket",
                        "influxdb_type": "influxdb_api_v2"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "InfluxDB HTTP API V2 Connector"
                  },
                  "http": {
                    "value": {
                      "name": "my_http_connector",
                      "status": "connected",
                      "type": "http",
                      "connect_timeout": "15s",
                      "pool_size": 1,
                      "enable": true,
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://localhost:8080/api/v1",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "pool_type": "hash",
                      "enable_pipelining": 100
                    },
                    "summary": "HTTP Connector"
                  },
                  "confluent_producer": {
                    "value": {
                      "name": "my_confluent_producer_connector",
                      "status": "connected",
                      "type": "confluent_producer",
                      "ssl": {
                        "verify": "verify_none",
                        "enable": true,
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ],
                        "server_name_indication": "auto"
                      },
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "xyz.sa-east1.gcp.confluent.cloud:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Confluent Connector"
                  },
                  "iotdb": {
                    "value": {
                      "name": "iotdb_connector",
                      "status": "connected",
                      "type": "iotdb",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "******",
                        "username": "root"
                      },
                      "description": "My example iotdb connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "base_url": "http://iotdb.local:18080/",
                      "actions": [
                        "my_action"
                      ],
                      "pool_type": "random",
                      "enable_pipelining": 100,
                      "iotdb_version": "v1.3.x"
                    },
                    "summary": "Apache IoTDB Connector"
                  },
                  "couchbase": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": true
                      },
                      "description": "My connector",
                      "server": "couchbase:8093",
                      "enable": true,
                      "password": "******",
                      "username": "admin",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "45s"
                      }
                    },
                    "summary": "Couchbase Connector"
                  },
                  "datalayers": {
                    "value": {
                      "name": "datalayers_connector",
                      "status": "connected",
                      "type": "datalayers",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example datalayers connector",
                      "server": "127.0.0.1:8361",
                      "enable": true,
                      "parameters": {
                        "password": "******",
                        "username": "example_username",
                        "database": "example_database"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Datalayers Connector"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer_connector",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "ssl": {
                        "verify": "verify_none",
                        "enable": true,
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ],
                        "server_name_indication": "auto"
                      },
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Azure Event Hub Connector"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_connector",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "localhost:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Kafka Producer Connector"
                  },
                  "kinesis": {
                    "value": {
                      "name": "kinesis_connector",
                      "status": "connected",
                      "type": "kinesis",
                      "description": "My example kinesis connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "aws_access_key_id": "your_access_key",
                      "aws_secret_access_key": "aws_secret_key",
                      "endpoint": "http://localhost:4566",
                      "max_retries": 2,
                      "pool_size": 8
                    },
                    "summary": "Kinesis Connector"
                  },
                  "syskeeper_proxy": {
                    "value": {
                      "name": "syskeeper_proxy",
                      "status": "connected",
                      "type": "syskeeper_proxy",
                      "listen": "127.0.0.1:9092",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "acceptors": 16,
                      "handshake_timeout": "16s",
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Syskeeper Proxy Connector"
                  },
                  "pgsql": {
                    "value": {
                      "name": "my_pgsql_connector",
                      "status": "connected",
                      "type": "pgsql",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "PostgreSQL Connector"
                  },
                  "mysql": {
                    "value": {
                      "name": "mysql_connector",
                      "status": "connected",
                      "type": "mysql",
                      "description": "My example mysql connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:3306",
                      "password": "******",
                      "username": "root",
                      "database": "test",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "health_check_interval": "20s"
                      }
                    },
                    "summary": "MySQL Connector"
                  },
                  "rabbitmq": {
                    "value": {
                      "timeout": "5s",
                      "name": "rabbitmq_connector",
                      "port": 5672,
                      "status": "connected",
                      "type": "rabbitmq",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example rabbitmq connector",
                      "pool_size": 8,
                      "server": "127.0.0.1",
                      "enable": true,
                      "password": "******",
                      "username": "guest",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "heartbeat": "30s",
                      "actions": [
                        "my_action"
                      ],
                      "virtual_host": "/"
                    },
                    "summary": "Rabbitmq Connector"
                  },
                  "dynamo": {
                    "value": {
                      "name": "dynamo_connector",
                      "status": "connected",
                      "type": "dynamo",
                      "description": "My example dynamo connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "aws_access_key_id": "root",
                      "aws_secret_access_key": "******",
                      "enable": true,
                      "pool_size": 8,
                      "region": "us-west-2",
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "url": "http://127.0.0.1:8000"
                    },
                    "summary": "DynamoDB Connector"
                  },
                  "tdengine": {
                    "value": {
                      "name": "tdengine_connector",
                      "status": "connected",
                      "type": "tdengine",
                      "description": "My example tdengine connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:6041",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "TDengine Connector"
                  },
                  "mongodb_single": {
                    "value": {
                      "name": "mongodb_single_connector",
                      "status": "connected",
                      "type": "mongodb_single",
                      "description": "My example mongodb_single connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Standalone Connector"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "demo",
                      "status": "connected",
                      "type": "greptimedb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example greptimedb connector",
                      "server": "127.0.0.1:4001",
                      "enable": true,
                      "password": "******",
                      "username": "example_username",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "dbname": "example_db"
                    },
                    "summary": "GreptimeDB Connector"
                  },
                  "opents": {
                    "value": {
                      "name": "opents_connector",
                      "status": "connected",
                      "type": "opents",
                      "description": "My example opents connector",
                      "pool_size": 8,
                      "server": "http://localhost:4242/",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "OpenTSDB Connector"
                  },
                  "abs": {
                    "value": {
                      "status": "connected",
                      "description": "My connector",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "account_key": "******",
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "45s"
                      },
                      "account_name": "my_account_name"
                    },
                    "summary": "Azure Blob Storage Connector"
                  },
                  "mongodb_sharded": {
                    "value": {
                      "name": "mongodb_sharded_connector",
                      "status": "connected",
                      "type": "mongodb_sharded",
                      "description": "My example mongodb_sharded connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Sharded Connector"
                  },
                  "mongodb_rs": {
                    "value": {
                      "name": "mongodb_rs_connector",
                      "status": "connected",
                      "type": "mongodb_rs",
                      "description": "My example mongodb_rs connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Replica Set Connector"
                  },
                  "redis_single_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis single connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "server": "127.0.0.1:6379",
                        "password": "******",
                        "username": "test",
                        "database": 1,
                        "redis_type": "single"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Single Producer Connector"
                  },
                  "oracle": {
                    "value": {
                      "name": "oracle_connector",
                      "status": "connected",
                      "type": "oracle",
                      "description": "My example oracle connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "password": "oracle",
                      "pool_size": 8,
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "server": "127.0.0.1:1521",
                      "service_name": "XE",
                      "sid": "XE",
                      "username": "system"
                    },
                    "summary": "Oracle Connector"
                  },
                  "snowflake": {
                    "value": {
                      "status": "connected",
                      "description": "My connector",
                      "pool_size": 8,
                      "server": "myorg-myaccount.snowflakecomputing.com",
                      "enable": true,
                      "password": "******",
                      "username": "admin",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "45s"
                      },
                      "account": "myorg-myaccount",
                      "dsn": "snowflake"
                    },
                    "summary": "Snowflake Connector"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "hstreamdb_connector",
                      "status": "connected",
                      "type": "hstreamdb",
                      "description": "My example hstreamdb connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "grpc_timeout": "30s",
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "ssl": {
                        "enable": false,
                        "verify": "verify_peer"
                      },
                      "url": "http://127.0.0.1:6570"
                    },
                    "summary": "HStreamDB Connector"
                  },
                  "influxdb_api_v1": {
                    "value": {
                      "name": "influxdb_connector",
                      "status": "connected",
                      "type": "influxdb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example influxdb connector",
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "parameters": {
                        "password": "******",
                        "username": "example_username",
                        "database": "example_database",
                        "influxdb_type": "influxdb_api_v1"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "InfluxDB HTTP API V1 Connector"
                  },
                  "s3_aws": {
                    "value": {
                      "port": 443,
                      "status": "connected",
                      "host": "s3.eu-east-1.amazonaws.com",
                      "description": "My S3 connector",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "transport_options": {
                        "ssl": {
                          "verify": "verify_peer",
                          "enable": true
                        },
                        "connect_timeout": "1s",
                        "pool_size": 4,
                        "max_retries": 1,
                        "request_timeout": "60s",
                        "enable_pipelining": 1
                      },
                      "secret_access_key": "SECRET",
                      "access_key_id": "ACCESS"
                    },
                    "summary": "S3 Connector"
                  },
                  "cassandra": {
                    "value": {
                      "name": "cassandra_connector",
                      "status": "connected",
                      "type": "cassandra",
                      "description": "My example cassandra connector",
                      "pool_size": 8,
                      "password": "******",
                      "username": "root",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "servers": "127.0.0.1:9042",
                      "actions": [
                        "my_action"
                      ],
                      "keyspace": "mqtt"
                    },
                    "summary": "Cassandra Connector"
                  },
                  "gcp_pubsub_consumer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "gcp_pubsub_producer",
                      "description": "my connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "max_retries": 2,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "30s"
                      },
                      "pipelining": 100,
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Consumer Connector"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "clickhouse_connector",
                      "status": "connected",
                      "type": "clickhouse",
                      "description": "My example clickhouse connector",
                      "pool_size": 8,
                      "password": "******",
                      "url": "http://localhost:8123",
                      "username": "default",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "ClickHouse Connector"
                  },
                  "sqlserver": {
                    "value": {
                      "driver": "ms-sql",
                      "name": "sqlserver_connector",
                      "status": "connected",
                      "type": "sqlserver",
                      "description": "My example sqlserver connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:1433",
                      "password": "******",
                      "username": "sa",
                      "database": "test",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "health_check_interval": "20s"
                      }
                    },
                    "summary": "Microsoft SQL Server Connector"
                  },
                  "redis_cluster_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis cluster connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "password": "******",
                        "username": "test",
                        "servers": "127.0.0.1:6379,127.0.0.2:6379",
                        "redis_type": "cluster"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Cluster Producer Connector"
                  },
                  "matrix": {
                    "value": {
                      "name": "my_matrix_connector",
                      "status": "connected",
                      "type": "matrix",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "Matrix Connector"
                  },
                  "kafka_consumer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "kafka_consumer",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "30s"
                      },
                      "bootstrap_hosts": "kafka.emqx.net:9092"
                    },
                    "summary": "Kafka Consumer Connector"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "rocketmq_connector",
                      "status": "connected",
                      "type": "rocketmq",
                      "description": "My example rocketmq connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "enable": true,
                      "pool_size": 8,
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_after_created": true,
                        "start_timeout": "5s"
                      },
                      "servers": "127.0.0.1:9876"
                    },
                    "summary": "RocketMQ Connector"
                  },
                  "pulsar": {
                    "value": {
                      "name": "pulsar_connector",
                      "status": "connected",
                      "type": "pulsar",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": "none",
                      "description": "My example pulsar connector",
                      "connect_timeout": "5s",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "servers": "pulsar://127.0.0.1:6650",
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Pulsar Connector"
                  },
                  "syskeeper_forwarder": {
                    "value": {
                      "name": "syskeeper_forwarder",
                      "status": "connected",
                      "type": "syskeeper_forwarder",
                      "pool_size": 16,
                      "server": "127.0.0.1:9092",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "ack_timeout": "10s",
                      "actions": [
                        "my_action"
                      ],
                      "ack_mode": "no_ack"
                    },
                    "summary": "Syskeeper Forwarder Connector"
                  },
                  "elasticsearch": {
                    "value": {
                      "name": "elasticsearch_connector",
                      "status": "connected",
                      "type": "elasticsearch",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "******",
                        "username": "root"
                      },
                      "description": "My example elasticsearch connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "server": "127.0.0.1:9200",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "pool_type": "random",
                      "enable_pipelining": 100
                    },
                    "summary": "Elastic Search Connector"
                  },
                  "gcp_pubsub_producer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "gcp_pubsub_producer",
                      "connect_timeout": "10s",
                      "pool_size": 8,
                      "enable": true,
                      "max_retries": 2,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "request_ttl": "60s"
                      },
                      "pipelining": 100,
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Producer Connector"
                  },
                  "timescale": {
                    "value": {
                      "name": "my_timescale_connector",
                      "status": "connected",
                      "type": "timescale",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "Timescale Connector"
                  },
                  "redis_sentinel_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis sentinel connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "password": "******",
                        "username": "test",
                        "database": 1,
                        "servers": "127.0.0.1:6379,127.0.0.2:6379",
                        "sentinel": "myredismaster",
                        "redis_type": "sentinel"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Sentinel Producer Connector"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_producer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/elasticsearch.get"
                    },
                    {
                      "$ref": "#/components/schemas/connector_azure_blob_storage.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/syskeeper_forwarder.get"
                    },
                    {
                      "$ref": "#/components/schemas/pulsar.get"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/kafka_consumer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_consumer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_snowflake.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/opents_connector.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_s3.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/tdengine_connector.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/redis.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/rabbitmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/connector_mqtt.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_postgres.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_syskeeper_proxy.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_datalayers.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_couchbase.get_connector"
                    },
                    {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/iotdb.get_thrift"
                        },
                        {
                          "$ref": "#/components/schemas/iotdb.get_restapi"
                        }
                      ]
                    },
                    {
                      "$ref": "#/components/schemas/confluent.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get_connector"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Connector already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Create connector",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "influxdb_api_v2": {
                  "value": {
                    "name": "influxdb_connector",
                    "type": "influxdb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "org": "examlpe_org",
                      "token": "example_token",
                      "bucket": "example_bucket",
                      "influxdb_type": "influxdb_api_v2"
                    }
                  },
                  "summary": "InfluxDB HTTP API V2 Connector"
                },
                "http": {
                  "value": {
                    "name": "my_http_connector",
                    "type": "http",
                    "connect_timeout": "15s",
                    "pool_size": 1,
                    "enable": true,
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://localhost:8080/api/v1",
                    "pool_type": "hash",
                    "enable_pipelining": 100
                  },
                  "summary": "HTTP Connector"
                },
                "confluent_producer": {
                  "value": {
                    "name": "my_confluent_producer_connector",
                    "type": "confluent_producer",
                    "ssl": {
                      "verify": "verify_none",
                      "enable": true,
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ],
                      "server_name_indication": "auto"
                    },
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "xyz.sa-east1.gcp.confluent.cloud:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Confluent Connector"
                },
                "iotdb": {
                  "value": {
                    "name": "iotdb_connector",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example iotdb connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "base_url": "http://iotdb.local:18080/",
                    "pool_type": "random",
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.3.x"
                  },
                  "summary": "Apache IoTDB Connector"
                },
                "couchbase": {
                  "value": {
                    "name": "my_connector",
                    "type": "couchbase",
                    "ssl": {
                      "enable": true
                    },
                    "description": "My connector",
                    "server": "couchbase:8093",
                    "enable": true,
                    "password": "******",
                    "username": "admin",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    }
                  },
                  "summary": "Couchbase Connector"
                },
                "datalayers": {
                  "value": {
                    "name": "datalayers_connector",
                    "type": "datalayers",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example datalayers connector",
                    "server": "127.0.0.1:8361",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database"
                    }
                  },
                  "summary": "Datalayers Connector"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "name": "my_azure_event_hub_producer_connector",
                    "type": "azure_event_hub_producer",
                    "ssl": {
                      "verify": "verify_none",
                      "enable": true,
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ],
                      "server_name_indication": "auto"
                    },
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Azure Event Hub Connector"
                },
                "kafka_producer": {
                  "value": {
                    "name": "my_kafka_producer_connector",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Kafka Producer Connector"
                },
                "kinesis": {
                  "value": {
                    "name": "kinesis_connector",
                    "type": "kinesis",
                    "description": "My example kinesis connector",
                    "aws_access_key_id": "your_access_key",
                    "aws_secret_access_key": "aws_secret_key",
                    "endpoint": "http://localhost:4566",
                    "max_retries": 2,
                    "pool_size": 8
                  },
                  "summary": "Kinesis Connector"
                },
                "syskeeper_proxy": {
                  "value": {
                    "name": "syskeeper_proxy",
                    "type": "syskeeper_proxy",
                    "listen": "127.0.0.1:9092",
                    "enable": true,
                    "acceptors": 16,
                    "handshake_timeout": "16s"
                  },
                  "summary": "Syskeeper Proxy Connector"
                },
                "pgsql": {
                  "value": {
                    "name": "my_pgsql_connector",
                    "type": "pgsql",
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "PostgreSQL Connector"
                },
                "mysql": {
                  "value": {
                    "name": "mysql_connector",
                    "type": "mysql",
                    "description": "My example mysql connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  "summary": "MySQL Connector"
                },
                "rabbitmq": {
                  "value": {
                    "timeout": "5s",
                    "name": "rabbitmq_connector",
                    "port": 5672,
                    "type": "rabbitmq",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example rabbitmq connector",
                    "pool_size": 8,
                    "server": "127.0.0.1",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "heartbeat": "30s",
                    "virtual_host": "/"
                  },
                  "summary": "Rabbitmq Connector"
                },
                "dynamo": {
                  "value": {
                    "name": "dynamo_connector",
                    "type": "dynamo",
                    "description": "My example dynamo connector",
                    "aws_access_key_id": "root",
                    "aws_secret_access_key": "******",
                    "enable": true,
                    "pool_size": 8,
                    "region": "us-west-2",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "url": "http://127.0.0.1:8000"
                  },
                  "summary": "DynamoDB Connector"
                },
                "tdengine": {
                  "value": {
                    "name": "tdengine_connector",
                    "type": "tdengine",
                    "description": "My example tdengine connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root"
                  },
                  "summary": "TDengine Connector"
                },
                "mongodb_single": {
                  "value": {
                    "name": "mongodb_single_connector",
                    "type": "mongodb_single",
                    "description": "My example mongodb_single connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Standalone Connector"
                },
                "greptimedb": {
                  "value": {
                    "name": "demo",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example greptimedb connector",
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "password": "******",
                    "username": "example_username",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db"
                  },
                  "summary": "GreptimeDB Connector"
                },
                "opents": {
                  "value": {
                    "name": "opents_connector",
                    "type": "opents",
                    "description": "My example opents connector",
                    "pool_size": 8,
                    "server": "http://localhost:4242/",
                    "enable": true
                  },
                  "summary": "OpenTSDB Connector"
                },
                "abs": {
                  "value": {
                    "name": "my_connector",
                    "type": "azure_blob_storage",
                    "description": "My connector",
                    "enable": true,
                    "account_key": "******",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    },
                    "account_name": "my_account_name"
                  },
                  "summary": "Azure Blob Storage Connector"
                },
                "mongodb_sharded": {
                  "value": {
                    "name": "mongodb_sharded_connector",
                    "type": "mongodb_sharded",
                    "description": "My example mongodb_sharded connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Sharded Connector"
                },
                "mongodb_rs": {
                  "value": {
                    "name": "mongodb_rs_connector",
                    "type": "mongodb_rs",
                    "description": "My example mongodb_rs connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Replica Set Connector"
                },
                "redis_single_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "redis",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis single connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "server": "127.0.0.1:6379",
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "redis_type": "single"
                    }
                  },
                  "summary": "Redis Single Producer Connector"
                },
                "oracle": {
                  "value": {
                    "name": "oracle_connector",
                    "type": "oracle",
                    "description": "My example oracle connector",
                    "password": "oracle",
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "server": "127.0.0.1:1521",
                    "service_name": "XE",
                    "sid": "XE",
                    "username": "system"
                  },
                  "summary": "Oracle Connector"
                },
                "snowflake": {
                  "value": {
                    "name": "my_connector",
                    "type": "snowflake",
                    "description": "My connector",
                    "pool_size": 8,
                    "server": "myorg-myaccount.snowflakecomputing.com",
                    "enable": true,
                    "password": "******",
                    "username": "admin",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    },
                    "account": "myorg-myaccount",
                    "dsn": "snowflake"
                  },
                  "summary": "Snowflake Connector"
                },
                "hstreamdb": {
                  "value": {
                    "name": "hstreamdb_connector",
                    "type": "hstreamdb",
                    "description": "My example hstreamdb connector",
                    "grpc_timeout": "30s",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "ssl": {
                      "enable": false,
                      "verify": "verify_peer"
                    },
                    "url": "http://127.0.0.1:6570"
                  },
                  "summary": "HStreamDB Connector"
                },
                "influxdb_api_v1": {
                  "value": {
                    "name": "influxdb_connector",
                    "type": "influxdb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database",
                      "influxdb_type": "influxdb_api_v1"
                    }
                  },
                  "summary": "InfluxDB HTTP API V1 Connector"
                },
                "s3_aws": {
                  "value": {
                    "name": "my_s3_connector",
                    "port": 443,
                    "type": "s3",
                    "host": "s3.eu-east-1.amazonaws.com",
                    "description": "My S3 connector",
                    "enable": true,
                    "transport_options": {
                      "ssl": {
                        "verify": "verify_peer",
                        "enable": true
                      },
                      "connect_timeout": "1s",
                      "pool_size": 4,
                      "max_retries": 1,
                      "request_timeout": "60s",
                      "enable_pipelining": 1
                    },
                    "secret_access_key": "SECRET",
                    "access_key_id": "ACCESS"
                  },
                  "summary": "S3 Connector"
                },
                "cassandra": {
                  "value": {
                    "name": "cassandra_connector",
                    "type": "cassandra",
                    "description": "My example cassandra connector",
                    "pool_size": 8,
                    "password": "******",
                    "username": "root",
                    "servers": "127.0.0.1:9042",
                    "keyspace": "mqtt"
                  },
                  "summary": "Cassandra Connector"
                },
                "gcp_pubsub_consumer": {
                  "value": {
                    "name": "my_connector",
                    "type": "gcp_pubsub_producer",
                    "description": "my connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Consumer Connector"
                },
                "clickhouse": {
                  "value": {
                    "name": "clickhouse_connector",
                    "type": "clickhouse",
                    "description": "My example clickhouse connector",
                    "pool_size": 8,
                    "password": "******",
                    "url": "http://localhost:8123",
                    "username": "default",
                    "database": "mqtt"
                  },
                  "summary": "ClickHouse Connector"
                },
                "sqlserver": {
                  "value": {
                    "driver": "ms-sql",
                    "name": "sqlserver_connector",
                    "type": "sqlserver",
                    "description": "My example sqlserver connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  "summary": "Microsoft SQL Server Connector"
                },
                "redis_cluster_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "redis",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis cluster connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "redis_type": "cluster"
                    }
                  },
                  "summary": "Redis Cluster Producer Connector"
                },
                "matrix": {
                  "value": {
                    "name": "my_matrix_connector",
                    "type": "matrix",
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "Matrix Connector"
                },
                "kafka_consumer": {
                  "value": {
                    "name": "my_connector",
                    "type": "kafka_consumer",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "bootstrap_hosts": "kafka.emqx.net:9092"
                  },
                  "summary": "Kafka Consumer Connector"
                },
                "rocketmq": {
                  "value": {
                    "name": "rocketmq_connector",
                    "type": "rocketmq",
                    "description": "My example rocketmq connector",
                    "enable": true,
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_after_created": true,
                      "start_timeout": "5s"
                    },
                    "servers": "127.0.0.1:9876"
                  },
                  "summary": "RocketMQ Connector"
                },
                "pulsar": {
                  "value": {
                    "name": "pulsar_connector",
                    "type": "pulsar",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": "none",
                    "description": "My example pulsar connector",
                    "connect_timeout": "5s",
                    "enable": true,
                    "servers": "pulsar://127.0.0.1:6650"
                  },
                  "summary": "Pulsar Connector"
                },
                "syskeeper_forwarder": {
                  "value": {
                    "name": "syskeeper_forwarder",
                    "type": "syskeeper_forwarder",
                    "pool_size": 16,
                    "server": "127.0.0.1:9092",
                    "enable": true,
                    "ack_timeout": "10s",
                    "ack_mode": "no_ack"
                  },
                  "summary": "Syskeeper Forwarder Connector"
                },
                "elasticsearch": {
                  "value": {
                    "name": "elasticsearch_connector",
                    "type": "elasticsearch",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example elasticsearch connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "server": "127.0.0.1:9200",
                    "enable": true,
                    "pool_type": "random",
                    "enable_pipelining": 100
                  },
                  "summary": "Elastic Search Connector"
                },
                "gcp_pubsub_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "gcp_pubsub_producer",
                    "connect_timeout": "10s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "resource_opts": {
                      "request_ttl": "60s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Producer Connector"
                },
                "timescale": {
                  "value": {
                    "name": "my_timescale_connector",
                    "type": "timescale",
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "Timescale Connector"
                },
                "redis_sentinel_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "redis",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis sentinel connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "sentinel": "myredismaster",
                      "redis_type": "sentinel"
                    }
                  },
                  "summary": "Redis Sentinel Producer Connector"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_timescale.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_producer.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/elasticsearch.post"
                  },
                  {
                    "$ref": "#/components/schemas/connector_azure_blob_storage.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/syskeeper_forwarder.post"
                  },
                  {
                    "$ref": "#/components/schemas/pulsar.post"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/kafka_consumer.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_consumer.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_snowflake.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/opents_connector.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_s3.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/tdengine_connector.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/redis.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/rabbitmq.post"
                  },
                  {
                    "$ref": "#/components/schemas/connector_mqtt.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_postgres.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_syskeeper_proxy.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_datalayers.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_couchbase.post_connector"
                  },
                  {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/iotdb.post_thrift"
                      },
                      {
                        "$ref": "#/components/schemas/iotdb.post_restapi"
                      }
                    ]
                  },
                  {
                    "$ref": "#/components/schemas/confluent.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.post_connector"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication/order": {
      "put": {
        "description": "Reorder all authenticators in global authentication chain.",
        "tags": [
          "Authentication"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Authenticators order updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_authn_api.request_authn_order"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_validations/validation/{name}": {
      "get": {
        "description": "Lookup a validation",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Validation name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_validation"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "avro_check": {
                    "value": {
                      "name": "my_validation",
                      "description": "my validation",
                      "tags": [
                        "validation"
                      ],
                      "strategy": "all_pass",
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "checks": [
                        {
                          "type": "avro",
                          "schema": "my_avro_schema"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      }
                    },
                    "summary": "Using an Avro schema check"
                  },
                  "sql_check": {
                    "value": {
                      "name": "my_validation",
                      "description": "my validation",
                      "tags": [
                        "validation"
                      ],
                      "strategy": "all_pass",
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "checks": [
                        {
                          "type": "sql",
                          "sql": "select payload.temp as t where t > 10"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      }
                    },
                    "summary": "Using a SQL check"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/schema_validation.validation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Lookup a validation",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a validation",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Validation name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_validation"
          }
        ],
        "responses": {
          "204": {
            "description": "Validation deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete a validation",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/trace/{name}": {
      "delete": {
        "description": "Delete specified trace",
        "tags": [
          "Trace"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/trace.name"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Trace Name Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes/{node}/actions/{id}/{operation}": {
      "post": {
        "description": "Start bridge on a specific node.",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "The node name, e.g. 'emqx@127.0.0.1'.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "in": "path",
            "name": "id",
            "description": "The bridge id. Must be of format {type}:{name}.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "Operation can be one of: 'start'.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start"
              ]
            },
            "example": "start"
          }
        ],
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service or bridge not enabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge or node not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Manually start a bridge on a given node",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/trace/{name}/stop": {
      "put": {
        "description": "Stop trace by name",
        "tags": [
          "Trace"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/trace.name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/trace.trace"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Trace Name Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/opentelemetry": {
      "get": {
        "description": "Get opentelmetry configuration",
        "tags": [
          "Monitor"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "metrics": {
                    "enable": true
                  },
                  "exporter": {
                    "ssl_options": {},
                    "endpoint": "http://localhost:4317"
                  },
                  "traces": {
                    "filter": {
                      "trace_all": false
                    },
                    "enable": true
                  },
                  "logs": {
                    "level": "warning",
                    "enable": true
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/opentelemetry.opentelemetry"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update opentelmetry configuration",
        "tags": [
          "Monitor"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "metrics": {
                    "enable": true
                  },
                  "exporter": {
                    "ssl_options": {},
                    "endpoint": "http://localhost:4317"
                  },
                  "traces": {
                    "filter": {
                      "trace_all": false
                    },
                    "enable": true
                  },
                  "logs": {
                    "level": "warning",
                    "enable": true
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/opentelemetry.opentelemetry"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update Config Failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "metrics": {
                  "enable": true
                },
                "exporter": {
                  "ssl_options": {},
                  "endpoint": "http://localhost:4317"
                },
                "traces": {
                  "filter": {
                    "trace_all": false
                  },
                  "enable": true
                },
                "logs": {
                  "level": "warning",
                  "enable": true
                }
              },
              "schema": {
                "$ref": "#/components/schemas/opentelemetry.opentelemetry"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sso/{backend}": {
      "get": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ldap",
                "oidc",
                "saml"
              ]
            },
            "example": "ldap"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/dashboard.saml"
                    },
                    {
                      "$ref": "#/components/schemas/sso.oidc"
                    },
                    {
                      "$ref": "#/components/schemas/sso.ldap"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BACKEND_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ldap",
                "oidc",
                "saml"
              ]
            },
            "example": "ldap"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/dashboard.saml"
                    },
                    {
                      "$ref": "#/components/schemas/sso.oidc"
                    },
                    {
                      "$ref": "#/components/schemas/sso.ldap"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BACKEND_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/dashboard.saml"
                  },
                  {
                    "$ref": "#/components/schemas/sso.oidc"
                  },
                  {
                    "$ref": "#/components/schemas/sso.ldap"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ldap",
                "oidc",
                "saml"
              ]
            },
            "example": "ldap"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BACKEND_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/listeners/{id}/restart": {
      "post": {
        "description": "Restart listeners on all nodes.",
        "tags": [
          "Listeners"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST",
                        "BAD_LISTENER_ID"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/links/link/{name}": {
      "get": {
        "description": "Get a cluster link configuration",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_link"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "enable": true,
                  "name": "emqxcl_b",
                  "node_status": [
                    {
                      "node": "emqx1@emqx.net",
                      "status": "connected"
                    }
                  ],
                  "pool_size": 10,
                  "server": "emqxcl_b.host:1883",
                  "ssl": {
                    "enable": false
                  },
                  "status": "connected",
                  "topics": [
                    "t/topic-example",
                    "t/topic-filter-example/1/#"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/cluster_link.link_config_response"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cluster link not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update a cluster link configuration",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_link"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "enable": true,
                  "name": "emqxcl_b",
                  "node_status": [
                    {
                      "node": "emqx1@emqx.net",
                      "status": "connected"
                    }
                  ],
                  "pool_size": 10,
                  "server": "emqxcl_b.host:1883",
                  "ssl": {
                    "enable": false
                  },
                  "status": "connected",
                  "topics": [
                    "t/topic-example",
                    "t/topic-filter-example/1/#"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/cluster_link.link_config_response"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update Config Failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cluster link not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "server",
                  "topics"
                ],
                "properties": {
                  "enable": {
                    "default": true,
                    "type": "boolean",
                    "description": "Enable or disable a cluster link. The link is enabled by default, disabling it allows stopping the link without removing its configuration. The link must be enabled on both sides to be operational. Disabling the link should also be done on both clusters in order to free up all associated resources."
                  },
                  "server": {
                    "type": "string",
                    "description": "MQTT host and port of the remote EMQX broker."
                  },
                  "clientid": {
                    "type": "string",
                    "description": "Optional Base MQTT client ID for connecting to the remote EMQX cluster. If omitted, local `cluster.name` is used. EMQX maintains several connections between linked clusters, so distinct suffixes are automatically appended to the base client ID."
                  },
                  "username": {
                    "type": "string",
                    "description": "Optional MQTT username for connecting to the remote EMQX cluster."
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "Optional MQTT username for connecting to the remote EMQX cluster.",
                    "example": "R4ND0M/S∃CЯ∃T"
                  },
                  "ssl": {
                    "default": {
                      "enable": false
                    },
                    "description": "SSL configuration for connecting to the remote EMQX cluster.",
                    "$ref": "#/components/schemas/emqx.ssl_client_opts"
                  },
                  "topics": {
                    "type": "array",
                    "description": "MQTT topics to be forwarded by the linked remote EMQX broker to the local broker. Messages are only forwarded if the local EMQX broker has matching subscriber(s).<br/>Wildcards are supported. Setting empty topics list on one side of the link can be used to establish unidirectional links: the side with the empty topics won't receive remote messages, but it can forward relevant messages to its linked counterpart (according to the topics configured on that side of the link).",
                    "items": {
                      "type": "string"
                    }
                  },
                  "pool_size": {
                    "default": 8,
                    "type": "integer",
                    "description": "Size of the pool of MQTT clients that will publish messages to the linked EMQX broker.",
                    "minimum": 1
                  },
                  "retry_interval": {
                    "default": "15s",
                    "type": "string",
                    "description": "MQTT Message retry interval. Delay for the link to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
                  },
                  "max_inflight": {
                    "default": 32,
                    "type": "integer",
                    "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
                    "minimum": 0
                  },
                  "resource_opts": {
                    "default": {},
                    "description": "Resource options.",
                    "$ref": "#/components/schemas/cluster.creation_opts"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a cluster link",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_link"
          }
        ],
        "responses": {
          "204": {
            "description": "Link deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cluster link not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/retainer/message/{topic}": {
      "get": {
        "description": "Lookup a message by a topic without wildcards.",
        "tags": [
          "Retainer"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "topic",
            "description": "Topic.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/retainer.message"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Unsupported backend."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Viewed message doesn't exist."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete matching messages.",
        "tags": [
          "Retainer"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "topic",
            "description": "Topic.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Unsupported backend."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Viewed message doesn't exist."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/rule_events": {
      "get": {
        "description": "List all events can be used in rules",
        "tags": [
          "Rules"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule_engine.rule_events"
                }
              }
            }
          }
        },
        "summary": "List rule events",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/file_transfer/files/{clientid}/{fileid}": {
      "get": {
        "description": "List a file uploaded during specified transfer, identified by client id and file id.",
        "tags": [
          "File Transfer"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/file_transfer.client_id"
          },
          {
            "$ref": "#/components/parameters/file_transfer.file_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "FILES_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Files requested for this transfer could not be found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "List files uploaded in a specific transfer",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/audit": {
      "get": {
        "description": "Get audit logs with filtering parameters. This feature enables users to efficiently<br/>access the desired audit trail data and facilitates auditing, compliance,<br/>troubleshooting, and security analysis.",
        "tags": [
          "Audit"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "node",
            "description": "Filter logs by the node name where the logs were generated.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "in": "query",
            "name": "from",
            "description": "Filter logs by source type. Possible values are:<br/><br/>- `dashboard`: Dashboard request logs.<br/>- `rest_api`: API KEY request logs.<br/>- `cli`: The emqx command line logs.<br/>- `erlang_console`: The emqx remote_console run function logs.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dashboard",
                "rest_api",
                "cli",
                "erlang_console"
              ]
            },
            "example": "dashboard"
          },
          {
            "in": "query",
            "name": "source",
            "description": "Filter logs by source. Possible values are:<br/><br/>- The login username to filter logs generated from Dashboard for this specific user.<br/>- The API Key to filter logs generated from the REST API for this specific API key.<br/>- An empty string to filter logs generated from CLI or Erlang console.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "admin"
          },
          {
            "in": "query",
            "name": "source_ip",
            "description": "Filter logs by source IP when logs, applicable for logs generated from Dashboard or REST API operations.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "127.0.0.1"
          },
          {
            "in": "query",
            "name": "operation_id",
            "description": "Filter logs by swagger's operation_id, applicable for logs generated from Dashboard or REST API operations.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "/rules/{id}"
          },
          {
            "in": "query",
            "name": "operation_type",
            "description": "Filter logs by operation type.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "rules"
          },
          {
            "in": "query",
            "name": "operation_result",
            "description": "Filter logs by operation result.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "success",
                "failure"
              ]
            },
            "example": "failure"
          },
          {
            "in": "query",
            "name": "http_status_code",
            "description": "Filter The HTTP API logs by response code, applicable for logs generated from Dashboard or REST API operations.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 200
          },
          {
            "in": "query",
            "name": "http_method",
            "description": "Filter The HTTP API logs by method, applicable for logs generated from Dashboard or REST API operations.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "post",
                "put",
                "delete"
              ]
            },
            "example": "post"
          },
          {
            "in": "query",
            "name": "gte_duration_ms",
            "description": "Filter logs by age duration, selecting those created no earlier than then given duration time ago.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 0
          },
          {
            "in": "query",
            "name": "lte_duration_ms",
            "description": "Filter logs by age duration, selecting those created no later than then given duration time ago.",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "in": "query",
            "name": "gte_created_at",
            "description": "Filter logs by creation time, selecting logs created no earlier than the given timestamp.<br/>The timestamp can be provided either in rfc3339 string format or as a millisecond epoch timestamp.",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-microsecond",
                  "example": 1640995200000000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000000Z"
                }
              ]
            },
            "example": "2023-10-15T00:00:00.820384+08:00"
          },
          {
            "in": "query",
            "name": "lte_created_at",
            "description": "Filter logs by creation time, selecting logs created no later than the given timestamp.<br/>The timestamp can be provided either in rfc3339 string format or as a millisecond epoch timestamp.",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-microsecond",
                  "example": 1640995200000000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000000Z"
                }
              ]
            },
            "example": "2023-10-16T00:00:00.820384+08:00"
          },
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "args": [],
                      "created_at": "2023-10-17T10:41:20.383993+08:00",
                      "duration_ms": 0,
                      "failure": [],
                      "from": "dashboard",
                      "http_method": "post",
                      "http_request": {
                        "bindings": {},
                        "body": {
                          "password": "******",
                          "username": "admin"
                        },
                        "headers": {
                          "accept": "*/*",
                          "authorization": "******",
                          "connection": "keep-alive",
                          "content-length": "45",
                          "content-type": "application/json"
                        },
                        "method": "post"
                      },
                      "http_status_code": 200,
                      "node": "emqx@127.0.0.1",
                      "operation_id": "/login",
                      "operation_result": "success",
                      "operation_type": "login",
                      "source": "admin",
                      "source_ip": "127.0.0.1"
                    },
                    {
                      "args": [
                        "show",
                        "log"
                      ],
                      "created_at": "2023-10-17T10:45:13.100426+08:00",
                      "duration_ms": 7,
                      "failure": [],
                      "from": "cli",
                      "http_method": [],
                      "http_request": [],
                      "http_status_code": [],
                      "node": "emqx@127.0.0.1",
                      "operation_id": [],
                      "operation_result": [],
                      "operation_type": "conf",
                      "source": [],
                      "source_ip": []
                    }
                  ],
                  "meta": {
                    "count": 2,
                    "hasnext": false,
                    "limit": 50,
                    "page": 1
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/audit.audit_list"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Audit is disabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "List audit logs",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}/unsubscribe": {
      "post": {
        "description": "Unsubscribe",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Unsubscribe OK"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_mgmt_api_clients.unsubscribe"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/plugins/install": {
      "post": {
        "description": "Upload a plugin tarball (plugin-vsn.tar.gz).Follow [emqx-plugin-template](https://github.com/emqx/emqx-plugin-template) to develop plugin.",
        "tags": [
          "Plugins"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Install plugin successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UNEXPECTED_ERROR",
                        "ALREADY_INSTALLED",
                        "BAD_PLUGIN_INFO"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Install a new plugin",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "encoding": {
                "plugin": {
                  "contentType": "application/gzip"
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "plugin": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/lwm2m/clients/{clientid}/read": {
      "post": {
        "description": "Send a read command to a resource",
        "tags": [
          "LwM2M Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "urn:oma:lwm2m:oma:2"
          },
          {
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "/3/0/7"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENT_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "clientid not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Read Value from a Resource Path",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/banned/{as}/{who}": {
      "delete": {
        "description": "Remove a client ID, username or IP address from the blacklist.",
        "tags": [
          "Banned"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "as",
            "description": "Ban method, which can be exact client ID, client ID regular expression, exact username, username regular expression,<br/>IP address or an IP address range.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "clientid",
                "username",
                "peerhost",
                "clientid_re",
                "username_re",
                "peerhost_net"
              ]
            },
            "example": "username"
          },
          {
            "in": "path",
            "name": "who",
            "description": "Ban object, specific client ID, username or IP address.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Badass"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete banned success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "The banned object was not found in the blacklist."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_validations": {
      "get": {
        "description": "List validations",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "list": {
                    "value": [
                      {
                        "name": "my_validation",
                        "description": "my validation",
                        "tags": [
                          "validation"
                        ],
                        "strategy": "all_pass",
                        "enable": true,
                        "topics": [
                          "t/+"
                        ],
                        "checks": [
                          {
                            "type": "sql",
                            "sql": "select payload.temp as t where t > 10"
                          }
                        ],
                        "failure_action": "drop",
                        "log_failure": {
                          "level": "info"
                        }
                      },
                      {
                        "name": "other_validation",
                        "description": "my validation",
                        "tags": [
                          "validation"
                        ],
                        "strategy": "all_pass",
                        "enable": true,
                        "topics": [
                          "t/+"
                        ],
                        "checks": [
                          {
                            "type": "avro",
                            "schema": "my_avro_schema"
                          }
                        ],
                        "failure_action": "drop",
                        "log_failure": {
                          "level": "info"
                        }
                      }
                    ],
                    "summary": "List"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/schema_validation.validation"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "List validations",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update a validation",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "update": {
                    "value": {
                      "name": "my_validation",
                      "description": "my validation",
                      "tags": [
                        "validation"
                      ],
                      "strategy": "all_pass",
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "checks": [
                        {
                          "type": "sql",
                          "sql": "select payload.temp as t where t > 10"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      }
                    },
                    "summary": "Update"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/schema_validation.validation"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad params"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update a validation",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "update": {
                  "value": {
                    "name": "my_validation",
                    "description": "my validation",
                    "tags": [
                      "validation"
                    ],
                    "strategy": "all_pass",
                    "enable": true,
                    "topics": [
                      "t/+"
                    ],
                    "checks": [
                      {
                        "type": "sql",
                        "sql": "select payload.temp as t where t > 10"
                      }
                    ],
                    "failure_action": "drop",
                    "log_failure": {
                      "level": "info"
                    }
                  },
                  "summary": "Update"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/schema_validation.validation"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Append a new validation to the list of validations",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "avro_check": {
                    "value": {
                      "name": "my_validation",
                      "description": "my validation",
                      "tags": [
                        "validation"
                      ],
                      "strategy": "all_pass",
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "checks": [
                        {
                          "type": "avro",
                          "schema": "my_avro_schema"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      }
                    },
                    "summary": "Using an Avro schema check"
                  },
                  "sql_check": {
                    "value": {
                      "name": "my_validation",
                      "description": "my validation",
                      "tags": [
                        "validation"
                      ],
                      "strategy": "all_pass",
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "checks": [
                        {
                          "type": "sql",
                          "sql": "select payload.temp as t where t > 10"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      }
                    },
                    "summary": "Using a SQL check"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/schema_validation.validation"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Append a new validation",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "avro_check": {
                  "value": {
                    "name": "my_validation",
                    "description": "my validation",
                    "tags": [
                      "validation"
                    ],
                    "strategy": "all_pass",
                    "enable": true,
                    "topics": [
                      "t/+"
                    ],
                    "checks": [
                      {
                        "type": "avro",
                        "schema": "my_avro_schema"
                      }
                    ],
                    "failure_action": "drop",
                    "log_failure": {
                      "level": "info"
                    }
                  },
                  "summary": "Using an Avro schema check"
                },
                "sql_check": {
                  "value": {
                    "name": "my_validation",
                    "description": "my validation",
                    "tags": [
                      "validation"
                    ],
                    "strategy": "all_pass",
                    "enable": true,
                    "topics": [
                      "t/+"
                    ],
                    "checks": [
                      {
                        "type": "sql",
                        "sql": "select payload.temp as t where t > 10"
                      }
                    ],
                    "failure_action": "drop",
                    "log_failure": {
                      "level": "info"
                    }
                  },
                  "summary": "Using a SQL check"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/schema_validation.validation"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs_reset/{rootname}": {
      "post": {
        "description": "Reset the config entry specified by the query string parameter `conf_path`.<br/><br/>- For a config entry that has default value, this resets it to the default value;<br/>- For a config entry that has no default value, an error 400 will be returned",
        "tags": [
          "Configs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "rootname",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "file_transfer",
                "broker",
                "log",
                "sysmon",
                "sys_topics",
                "alarm",
                "dashboard"
              ]
            },
            "example": "sysmon"
          },
          {
            "in": "query",
            "name": "conf_path",
            "description": "The config path separated by '.' character",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "os.sysmem_high_watermark"
          }
        ],
        "responses": {
          "200": {
            "description": "Rest config successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NO_DEFAULT_VALUE",
                        "REST_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "REST_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/retainer": {
      "get": {
        "description": "View config",
        "tags": [
          "Retainer"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The config content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/retainer.retainer"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Config not found."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update retainer config.",
        "tags": [
          "Retainer"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Update configs successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/retainer.retainer"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update config failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/retainer.retainer"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_registry_external": {
      "get": {
        "description": "List external schema registries",
        "tags": [
          "Schema Registry"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "sample": {
                    "value": {
                      "my_registry": {
                        "type": "confluent",
                        "auth": {
                          "mechanism": "basic",
                          "password": "******",
                          "username": "cpsruser"
                        },
                        "url": "http://confluent_schema_registry:8081"
                      }
                    }
                  }
                },
                "schema": {
                  "properties": {
                    "$name": {
                      "properties": {
                        "$name": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/schema_registry.confluent_schema_registry"
                            }
                          ]
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "List external registries",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create external schema registry",
        "tags": [
          "Schema Registry"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "avro_schema": {
                    "value": {
                      "name": "my_avro_schema",
                      "type": "avro",
                      "description": "My Avro Schema",
                      "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                    },
                    "summary": "Avro"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/schema_registry.confluent_schema_registry"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Schema already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Add a new external registry",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "avro_schema": {
                  "value": {
                    "name": "my_avro_schema",
                    "type": "avro",
                    "description": "My Avro Schema",
                    "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                  },
                  "summary": "Avro"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/schema_registry.external_registry_api_create_confluent_schema_registry"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/cache": {
      "delete": {
        "description": "Clean all authorization cache in the cluster.",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api_key/{name}": {
      "get": {
        "description": "Return the specific api_key. This API can only be requested using a bearer token.",
        "tags": [
          "API Keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/api_key.name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Unique and format by [a-zA-Z0-9-_]",
                      "example": "EMQX-API-KEY-1"
                    },
                    "api_key": {
                      "type": "string",
                      "description": "TODO:uses HMAC-SHA256 for signing.",
                      "example": "a4697a5c75a769f6"
                    },
                    "expired_at": {
                      "default": "infinity",
                      "description": "No longer valid datetime",
                      "example": "2021-12-05T02:01:34.186Z",
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "type": "integer",
                              "description": "epoch-second",
                              "example": 1640995200
                            },
                            {
                              "type": "string",
                              "format": "date-time",
                              "example": "2022-01-01T00:00:00.000Z"
                            }
                          ]
                        },
                        {
                          "type": "string",
                          "enum": [
                            "infinity"
                          ]
                        }
                      ]
                    },
                    "created_at": {
                      "description": "ApiKey create datetime",
                      "example": "2021-12-01T00:00:00.000Z",
                      "oneOf": [
                        {
                          "type": "integer",
                          "description": "epoch-second",
                          "example": 1640995200
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2022-01-01T00:00:00.000Z"
                        }
                      ]
                    },
                    "desc": {
                      "type": "string",
                      "example": "Note"
                    },
                    "enable": {
                      "type": "boolean",
                      "description": "Enable/Disable"
                    },
                    "expired": {
                      "type": "boolean",
                      "description": "Expired"
                    },
                    "role": {
                      "default": "administrator",
                      "type": "string",
                      "description": "Role for this API",
                      "example": "administrator"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the specific api_key. This API can only be requested using a bearer token.",
        "tags": [
          "API Keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/api_key.name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Unique and format by [a-zA-Z0-9-_]",
                      "example": "EMQX-API-KEY-1"
                    },
                    "api_key": {
                      "type": "string",
                      "description": "TODO:uses HMAC-SHA256 for signing.",
                      "example": "a4697a5c75a769f6"
                    },
                    "expired_at": {
                      "default": "infinity",
                      "description": "No longer valid datetime",
                      "example": "2021-12-05T02:01:34.186Z",
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "type": "integer",
                              "description": "epoch-second",
                              "example": 1640995200
                            },
                            {
                              "type": "string",
                              "format": "date-time",
                              "example": "2022-01-01T00:00:00.000Z"
                            }
                          ]
                        },
                        {
                          "type": "string",
                          "enum": [
                            "infinity"
                          ]
                        }
                      ]
                    },
                    "created_at": {
                      "description": "ApiKey create datetime",
                      "example": "2021-12-01T00:00:00.000Z",
                      "oneOf": [
                        {
                          "type": "integer",
                          "description": "epoch-second",
                          "example": 1640995200
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2022-01-01T00:00:00.000Z"
                        }
                      ]
                    },
                    "desc": {
                      "type": "string",
                      "example": "Note"
                    },
                    "enable": {
                      "type": "boolean",
                      "description": "Enable/Disable"
                    },
                    "expired": {
                      "type": "boolean",
                      "description": "Expired"
                    },
                    "role": {
                      "default": "administrator",
                      "type": "string",
                      "description": "Role for this API",
                      "example": "administrator"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "expired_at": {
                    "default": "infinity",
                    "description": "No longer valid datetime",
                    "example": "2021-12-05T02:01:34.186Z",
                    "oneOf": [
                      {
                        "oneOf": [
                          {
                            "type": "integer",
                            "description": "epoch-second",
                            "example": 1640995200
                          },
                          {
                            "type": "string",
                            "format": "date-time",
                            "example": "2022-01-01T00:00:00.000Z"
                          }
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "infinity"
                        ]
                      }
                    ]
                  },
                  "desc": {
                    "type": "string",
                    "example": "Note"
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Enable/Disable"
                  },
                  "expired": {
                    "type": "boolean",
                    "description": "Expired"
                  },
                  "role": {
                    "default": "administrator",
                    "type": "string",
                    "description": "Role for this API",
                    "example": "administrator"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the specific api_key. This API can only be requested using a bearer token.",
        "tags": [
          "API Keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/api_key.name"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}/subscriptions": {
      "get": {
        "description": "Get client subscriptions",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_subscriptions.subscription"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/invitation": {
      "get": {
        "description": "Get the execution status of all asynchronous invite status per node",
        "tags": [
          "Cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get invitation progress created by async operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cluster.invitation_status"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs": {
      "get": {
        "description": "Get all the configurations of the specified keys, including hot and non-hot updatable items.",
        "tags": [
          "Configs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "actions",
                "alarm",
                "api_key",
                "authentication",
                "authorization",
                "auto_subscribe",
                "banned",
                "bridges",
                "cluster",
                "conn_congestion",
                "connectors",
                "crl_cache",
                "dashboard",
                "delayed",
                "durable_queues",
                "durable_sessions",
                "durable_storage",
                "exhook",
                "file_transfer",
                "flapping_detect",
                "force_gc",
                "force_shutdown",
                "gateway",
                "license",
                "limiter",
                "listeners",
                "log",
                "message_transformation",
                "mqtt",
                "node",
                "opentelemetry",
                "overload_protection",
                "prometheus",
                "psk_authentication",
                "retainer",
                "rewrite",
                "rpc",
                "rule_engine",
                "schema_registry",
                "schema_validation",
                "slow_subs",
                "sources",
                "sys_topics",
                "sysmon",
                "topic_metrics"
              ]
            },
            "example": "sysmon"
          },
          {
            "in": "query",
            "name": "node",
            "description": "Node's name. Will deprecated in 5.2.0.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "\n    sysmon {\n      os {\n        cpu_check_interval = 60s\n        cpu_high_watermark = 80%\n        cpu_low_watermark = 60%\n        mem_check_interval = 60s\n        procmem_high_watermark = 5%\n        sysmem_high_watermark = 70%\n        }\n        vm {\n        busy_dist_port = true\n        busy_port = true\n        large_heap = 32MB\n        long_gc = disabled\n        long_schedule = 240ms\n        process_check_interval = 30s\n        process_high_watermark = 80%\n        process_low_watermark = 60%\n        }\n    }\n    "
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "deprecated": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_ACCEPT"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_NODE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the configurations of the specified keys.",
        "tags": [
          "Configs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "schema": {
              "default": "merge",
              "type": "string",
              "enum": [
                "replace",
                "merge"
              ]
            }
          },
          {
            "in": "query",
            "name": "ignore_readonly",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configurations updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "example": "\n    sysmon {\n      os {\n        cpu_check_interval = 60s\n        cpu_high_watermark = 80%\n        cpu_low_watermark = 60%\n        mem_check_interval = 60s\n        procmem_high_watermark = 5%\n        sysmem_high_watermark = 70%\n        }\n        vm {\n        busy_dist_port = true\n        busy_port = true\n        large_heap = 32MB\n        long_gc = disabled\n        long_schedule = 240ms\n        process_check_interval = 30s\n        process_high_watermark = 80%\n        process_low_watermark = 60%\n        }\n    }\n    "
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients": {
      "get": {
        "description": "List clients",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "in": "query",
            "name": "node",
            "description": "Node name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "in": "query",
            "name": "username",
            "description": "User name, multiple values can be specified by repeating the parameter: username=u1&username=u2",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "ip_address",
            "description": "Client's IP address",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "127.0.0.1"
          },
          {
            "in": "query",
            "name": "conn_state",
            "description": "The current connection status of the client, the possible values are connected,idle,disconnected",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "connected",
                "idle",
                "disconnected"
              ]
            }
          },
          {
            "in": "query",
            "name": "clean_start",
            "description": "Whether the client uses a new session",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "proto_ver",
            "description": "Client protocol version",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "like_clientid",
            "description": "Fuzzy search `clientid` as substring",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "like_username",
            "description": "Fuzzy search `username` as substring",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "gte_created_at",
            "description": "Search client session creation time by greater than or equal method, rfc3339 or timestamp(millisecond)",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "lte_created_at",
            "description": "Search client session creation time by less than or equal method, rfc3339 or timestamp(millisecond)",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "gte_connected_at",
            "description": "Search client connection creation time by greater than or equal method, rfc3339 or timestamp(epoch millisecond)",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "lte_connected_at",
            "description": "Search client connection creation time by less than or equal method, rfc3339 or timestamp(millisecond)",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "clientid",
            "description": "Client ID, multiple values can be specified by repeating the parameter: clientid=c1&clientid=c2",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/parameters/emqx_mgmt_api_clients.requested_client_fields"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "heap_size": 610,
                      "send_msg.dropped.expired": 0,
                      "send_oct": 31,
                      "recv_msg.qos1": 0,
                      "is_persistent": false,
                      "send_pkt": 4,
                      "clean_start": true,
                      "inflight_cnt": 0,
                      "node": "emqx@127.0.0.1",
                      "send_msg.dropped.queue_full": 0,
                      "awaiting_rel_cnt": 0,
                      "inflight_max": 32,
                      "created_at": "2024-01-01T12:34:56.789+08:00",
                      "subscriptions_cnt": 1,
                      "mailbox_len": 0,
                      "send_cnt": 4,
                      "connected": true,
                      "ip_address": "127.0.0.1",
                      "awaiting_rel_max": 100,
                      "recv_msg.qos2": 0,
                      "proto_ver": 5,
                      "mountpoint": "null",
                      "proto_name": "MQTT",
                      "durable": false,
                      "port": 52571,
                      "connected_at": "2024-01-01T12:34:56.789+08:00",
                      "enable_authn": true,
                      "expiry_interval": 0,
                      "username": null,
                      "recv_msg": 0,
                      "recv_oct": 49,
                      "send_msg.dropped.too_large": 0,
                      "keepalive": 60,
                      "send_msg.qos1": 0,
                      "send_msg.qos2": 0,
                      "recv_msg.qos0": 0,
                      "send_msg.qos0": 0,
                      "subscriptions_max": "infinity",
                      "mqueue_max": 1000,
                      "mqueue_dropped": 0,
                      "clientid": "01",
                      "is_bridge": false,
                      "peerport": 52571,
                      "send_msg": 0,
                      "listener": "tcp:default",
                      "recv_cnt": 4,
                      "recv_pkt": 4,
                      "recv_msg.dropped": 0,
                      "send_msg.dropped": 0,
                      "recv_msg.dropped.await_pubrel_timeout": 0,
                      "reductions": 6836,
                      "mqueue_len": 0
                    }
                  ],
                  "meta": {
                    "count": 1,
                    "hasnext": false,
                    "limit": 50,
                    "page": 1
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.clients"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_PARAMETER"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/authentication/users": {
      "get": {
        "description": "Get the users for the authenticator (only supported by <code>built_in_database</code>).",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of the results to fetch.",
            "schema": {
              "default": 1,
              "type": "integer",
              "minimum": 1
            },
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Results per page(max 10000)",
            "schema": {
              "default": 100,
              "maximum": 10000,
              "type": "integer",
              "minimum": 1
            },
            "example": 50
          },
          {
            "in": "query",
            "name": "like_user_id",
            "description": "Fuzzy search using user ID (username or clientid), only supports search by substring.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "test_"
          },
          {
            "in": "query",
            "name": "is_superuser",
            "description": "Is superuser",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "user_id": "user1"
                    },
                    {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  ],
                  "meta": {
                    "count": 300,
                    "limit": 20,
                    "page": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_users"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "List users for gateway authenticator",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Add user for the authenticator (only supports built_in_database).",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Add user for gateway authenticator",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "value": {
                    "password": "******",
                    "user_id": "user1"
                  },
                  "summary": "Regular user"
                },
                "super_user": {
                  "value": {
                    "password": "******",
                    "is_superuser": true,
                    "user_id": "user2"
                  },
                  "summary": "Superuser"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_create"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/listeners/{id}": {
      "get": {
        "description": "List all running node's listeners for the specified id.",
        "tags": [
          "Listeners"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "id": "tcp:demo",
                  "running": true,
                  "type": "tcp",
                  "bind": "0.0.0.0:1884",
                  "tcp_options": {
                    "buffer": "4KB",
                    "high_watermark": "1MB",
                    "nodelay": false,
                    "reuseaddr": true,
                    "send_timeout": "15s",
                    "send_timeout_close": true,
                    "backlog": 1024,
                    "active_n": 100
                  },
                  "max_connections": 204800,
                  "acceptors": 16,
                  "proxy_protocol": false,
                  "access_rules": [
                    "allow all"
                  ],
                  "proxy_protocol_timeout": "3s",
                  "zone": "default",
                  "mountpoint": "/",
                  "current_connections": 10240
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/listeners.wss_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ws_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.tcp_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ssl_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.quic_required_bind"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_LISTENER_ID",
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Listener id not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the specified listener on all nodes.",
        "tags": [
          "Listeners"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "id": "tcp:demo",
                  "running": true,
                  "type": "tcp",
                  "bind": "0.0.0.0:1884",
                  "tcp_options": {
                    "buffer": "4KB",
                    "high_watermark": "1MB",
                    "nodelay": false,
                    "reuseaddr": true,
                    "send_timeout": "15s",
                    "send_timeout_close": true,
                    "backlog": 1024,
                    "active_n": 100
                  },
                  "max_connections": 204800,
                  "acceptors": 16,
                  "proxy_protocol": false,
                  "access_rules": [
                    "allow all"
                  ],
                  "proxy_protocol_timeout": "3s",
                  "zone": "default",
                  "mountpoint": "/",
                  "current_connections": 10240
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/listeners.wss_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ws_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.tcp_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ssl_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.quic_required_bind"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_LISTENER_ID",
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Listener id not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "id": "tcp:demo",
                "running": true,
                "type": "tcp",
                "bind": "0.0.0.0:1884",
                "tcp_options": {
                  "buffer": "4KB",
                  "high_watermark": "1MB",
                  "nodelay": false,
                  "reuseaddr": true,
                  "send_timeout": "15s",
                  "send_timeout_close": true,
                  "backlog": 1024,
                  "active_n": 100
                },
                "max_connections": 204800,
                "acceptors": 16,
                "proxy_protocol": false,
                "access_rules": [
                  "allow all"
                ],
                "proxy_protocol_timeout": "3s",
                "zone": "default",
                "mountpoint": "/",
                "current_connections": 10240
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/listeners.wss_not_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.ws_not_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.tcp_not_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.ssl_not_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.quic_not_required_bind"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the specified listener on all nodes.",
        "tags": [
          "Listeners"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Listener deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_LISTENER_ID"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/{username}/change_pwd": {
      "post": {
        "description": "Change dashboard user password",
        "tags": [
          "Dashboard"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "Dashboard Username",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "admin"
          }
        ],
        "responses": {
          "204": {
            "description": "Update user password successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST",
                        "ERROR_PWD_NOT_MATCH"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Login failed. Bad username or password"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "USER_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Dashboard user not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "old_pwd": {
                    "type": "string",
                    "description": "Old password"
                  },
                  "new_pwd": {
                    "type": "string",
                    "description": "New password"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/clients": {
      "get": {
        "description": "Get the gateway client list",
        "tags": [
          "Gateway Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            }
          },
          {
            "in": "query",
            "name": "node",
            "description": "Match the client's node name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "clientid",
            "description": "Match the client's ID",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "username",
            "description": "Match the client's Username",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "ip_address",
            "description": "Match the client's ip address",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "conn_state",
            "description": "Match the client's connection state",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "proto_ver",
            "description": "Match the client's protocol version",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "clean_start",
            "description": "Match the client's clean start flag",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "like_clientid",
            "description": "Use sub-string to match client's ID",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "like_username",
            "description": "Use sub-string to match client's username",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "gte_created_at",
            "description": "Match the session created datetime greater than a certain value",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "lte_created_at",
            "description": "Match the session created datetime less than a certain value",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "gte_connected_at",
            "description": "Match the client socket connected datetime greater than a certain value",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "lte_connected_at",
            "description": "Match the client socket connected datatime less than a certain value",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "endpoint_name",
            "description": "Match the lwm2m client's endpoint name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "like_endpoint_name",
            "description": "Use sub-string to match lwm2m client's endpoint name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "gte_lifetime",
            "description": "Match the lwm2m client registered lifetime greater than a certain value",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "lte_lifetime",
            "description": "Match the lwm2m client registered lifetime less than a certain value",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of the results to fetch.",
            "schema": {
              "default": 1,
              "type": "integer",
              "minimum": 1
            },
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Results per page(max 10000)",
            "schema": {
              "default": 100,
              "maximum": 10000,
              "type": "integer",
              "minimum": 1
            },
            "example": 50
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/emqx_gateway_api_clients.exproto_client"
                          }
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/emqx_gateway_api_clients.lwm2m_client"
                          }
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/emqx_gateway_api_clients.coap_client"
                          }
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/emqx_gateway_api_clients.mqttsn_client"
                          }
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/emqx_gateway_api_clients.stomp_client"
                          }
                        }
                      ]
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "List gateway's clients",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_validations/validation/{name}/enable/{enable}": {
      "post": {
        "description": "Enable or disable a particular validation",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Validation name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_validation"
          },
          {
            "in": "path",
            "name": "enable",
            "description": "Enable or disable validation",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad params"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Enable or disable validation",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/authentication/users/{uid}": {
      "get": {
        "description": "Get user info from the gateway authenticator (only supports built_in_database)",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "uid",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "test_username"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get user info for gateway authenticator",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the user info for the gateway authenticator (only supports built_in_database)",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "uid",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "test_username"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update user info for gateway authenticator",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "value": {
                    "password": "******"
                  },
                  "summary": "Update regular user"
                },
                "super_user": {
                  "value": {
                    "password": "******",
                    "is_superuser": true
                  },
                  "summary": "Update user and promote to superuser"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_update"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the user for the gateway authenticator (only supports built_in_database)",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "uid",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "test_username"
          }
        ],
        "responses": {
          "204": {
            "description": "User Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete user for gateway authenticator",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/listeners/{id}/authentication/import_users": {
      "post": {
        "description": "Import users into the gateway authenticator (only supports built_in_database)",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Listener ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "stomp:tcp:def"
          }
        ],
        "responses": {
          "204": {
            "description": "Imported"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Import users",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/rules/{id}/metrics/reset": {
      "put": {
        "description": "Reset a rule metrics",
        "tags": [
          "Rules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_rule_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Reset Success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Rule not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Reset rule metrics",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/listeners/{id}/authentication/users": {
      "get": {
        "description": "Get the users for the authenticator (only supported by <code>built_in_database</code>)",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Listener ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of the results to fetch.",
            "schema": {
              "default": 1,
              "type": "integer",
              "minimum": 1
            },
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Results per page(max 10000)",
            "schema": {
              "default": 100,
              "maximum": 10000,
              "type": "integer",
              "minimum": 1
            },
            "example": 50
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "List authenticator's users",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Add user for the authenticator (only supports built_in_database)",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Gateway Name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Listener ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Add user for an authenticator",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "value": {
                    "password": "******",
                    "user_id": "user1"
                  },
                  "summary": "Regular user"
                },
                "super_user": {
                  "value": {
                    "password": "******",
                    "is_superuser": true,
                    "user_id": "user2"
                  },
                  "summary": "Superuser"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_create"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/license": {
      "get": {
        "description": "Get license info",
        "tags": [
          "License"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "sample_license_info": {
                    "value": {
                      "type": "trial",
                      "max_connections": 10,
                      "email": "contact@foo.com",
                      "start_at": "2022-01-11",
                      "expiry": false,
                      "customer": "Foo",
                      "customer_type": 10,
                      "deployment": "bar-deployment",
                      "expiry_at": "2295-10-27"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          }
        },
        "summary": "Get license info",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Update a license key",
        "tags": [
          "License"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "sample_license_info": {
                    "value": {
                      "type": "trial",
                      "max_connections": 10,
                      "email": "contact@foo.com",
                      "start_at": "2022-01-11",
                      "expiry": false,
                      "customer": "Foo",
                      "customer_type": 10,
                      "deployment": "bar-deployment",
                      "expiry_at": "2295-10-27"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad license key"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update license key",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "license_key": {
                  "value": {
                    "key": "xxx"
                  },
                  "summary": "License key string"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/license_http_api.key_license"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schemas/{name}": {
      "get": {
        "description": "Get the schema JSON of the specified name. NOTE: only intended for EMQX Dashboard.",
        "tags": [
          "Dashboard"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "hotconf",
                "bridges",
                "actions",
                "connectors"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The JSON schema of the specified name.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/authorization/settings": {
      "get": {
        "description": "Get authorization settings",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "deny_action",
                    "no_match"
                  ],
                  "properties": {
                    "no_match": {
                      "default": "allow",
                      "type": "string",
                      "enum": [
                        "allow",
                        "deny"
                      ],
                      "description": "Default access control action if the user or client matches no ACL rules,<br/>or if no such user or client is found by the configurable authorization<br/>sources such as built_in_database, an HTTP API, or a query against PostgreSQL.<br/>Find more details in 'authorization.sources' config."
                    },
                    "deny_action": {
                      "default": "ignore",
                      "type": "string",
                      "enum": [
                        "ignore",
                        "disconnect"
                      ],
                      "description": "The action when the authorization check rejects an operation."
                    },
                    "cache": {
                      "$ref": "#/components/schemas/emqx.authz_cache"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update authorization settings",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "deny_action",
                    "no_match"
                  ],
                  "properties": {
                    "no_match": {
                      "default": "allow",
                      "type": "string",
                      "enum": [
                        "allow",
                        "deny"
                      ],
                      "description": "Default access control action if the user or client matches no ACL rules,<br/>or if no such user or client is found by the configurable authorization<br/>sources such as built_in_database, an HTTP API, or a query against PostgreSQL.<br/>Find more details in 'authorization.sources' config."
                    },
                    "deny_action": {
                      "default": "ignore",
                      "type": "string",
                      "enum": [
                        "ignore",
                        "disconnect"
                      ],
                      "description": "The action when the authorization check rejects an operation."
                    },
                    "cache": {
                      "$ref": "#/components/schemas/emqx.authz_cache"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "deny_action",
                  "no_match"
                ],
                "properties": {
                  "no_match": {
                    "default": "allow",
                    "type": "string",
                    "enum": [
                      "allow",
                      "deny"
                    ],
                    "description": "Default access control action if the user or client matches no ACL rules,<br/>or if no such user or client is found by the configurable authorization<br/>sources such as built_in_database, an HTTP API, or a query against PostgreSQL.<br/>Find more details in 'authorization.sources' config."
                  },
                  "deny_action": {
                    "default": "ignore",
                    "type": "string",
                    "enum": [
                      "ignore",
                      "disconnect"
                    ],
                    "description": "The action when the authorization check rejects an operation."
                  },
                  "cache": {
                    "$ref": "#/components/schemas/emqx.authz_cache"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/lwm2m/clients/{clientid}/write": {
      "post": {
        "description": "Send a write command to a resource",
        "tags": [
          "LwM2M Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "urn:oma:lwm2m:oma:2"
          },
          {
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "/3/0/7"
          },
          {
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Integer",
                "Float",
                "Time",
                "String",
                "Boolean",
                "Opaque",
                "Objlnk"
              ]
            },
            "example": "Integer"
          },
          {
            "in": "query",
            "name": "value",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 123
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENT_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Clientid not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Write a Value to Resource Path",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/log": {
      "get": {
        "description": "Get the sub-configurations under *log*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "EMQX provides support for two primary log handlers: `file` and `console`, with an additional `audit` handler specifically designed to always direct logs to files.<br/>The system's default log handling behavior can be configured via the environment variable `EMQX_DEFAULT_LOG_HANDLER`, which accepts the following settings:<br/><br/>- `file`: Directs log output exclusively to files.<br/>- `console`: Channels log output solely to the console.<br/><br/>It's noteworthy that `EMQX_DEFAULT_LOG_HANDLER` is set to `file` when EMQX is initiated via systemd's `emqx.service` file.<br/>In scenarios outside systemd initiation, `console` serves as the default log handler.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.log"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "config not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get the sub-configurations under *log*",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *log*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "EMQX provides support for two primary log handlers: `file` and `console`, with an additional `audit` handler specifically designed to always direct logs to files.<br/>The system's default log handling behavior can be configured via the environment variable `EMQX_DEFAULT_LOG_HANDLER`, which accepts the following settings:<br/><br/>- `file`: Directs log output exclusively to files.<br/>- `console`: Channels log output solely to the console.<br/><br/>It's noteworthy that `EMQX_DEFAULT_LOG_HANDLER` is set to `file` when EMQX is initiated via systemd's `emqx.service` file.<br/>In scenarios outside systemd initiation, `console` serves as the default log handler.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.log"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update the sub-configurations under *log*",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx.log"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/rules/{id}": {
      "get": {
        "description": "Get a rule by given Id",
        "tags": [
          "Rules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_rule_id"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule_engine.rule_info"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Rule not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get rule",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update a rule by given Id to all nodes in the cluster",
        "tags": [
          "Rules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_rule_id"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule_engine.rule_info"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid Parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update rule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rule_engine.rule_creation"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a rule by given Id from all nodes in the cluster",
        "tags": [
          "Rules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_rule_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete rule successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Rule not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Delete rule",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/exhooks/{name}/hooks": {
      "get": {
        "description": "Get the hooks information of server",
        "tags": [
          "ExHook"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "The Exhook server name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "default"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/exhook.list_hook_info"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/bridges": {
      "get": {
        "description": "List all created bridges",
        "tags": [
          "Bridges"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "name": "demo",
                    "type": "influxdb_api_v2",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "org": "examlpe_org",
                    "token": "example_token",
                    "bucket": "example_bucket",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v2"
                  },
                  {
                    "name": "My IoTDB Bridge",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "*****",
                      "username": "root"
                    },
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "base_url": "http://iotdb.local:18080/",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "health_check_interval": "15s"
                    },
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.1.x",
                    "device_id": "my_device",
                    "is_aligned": false
                  },
                  {
                    "name": "my_azure_event_hub_producer",
                    "status": "connected",
                    "type": "azure_event_hub_producer",
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${.pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "local_topic": "mqtt/local/topic",
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  {
                    "name": "my_kafka_producer_action",
                    "status": "connected",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "kafka": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "10MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partitions_limit": "all_partitions",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "local_topic": "mqtt/local/topic",
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  {
                    "name": "redis_bridge",
                    "type": "redis_sentinel",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "servers": [
                      "127.0.0.1:26379"
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "sentinel": "mymaster",
                    "redis_type": "sentinel",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  {
                    "authentication": "none",
                    "batch_size": 1,
                    "buffer": {
                      "memory_overload_protection": true,
                      "mode": "memory",
                      "per_partition_limit": "10MB",
                      "segment_bytes": "5MB"
                    },
                    "compression": "no_compression",
                    "enable": true,
                    "local_topic": "mqtt/topic/-576460752303423482",
                    "max_batch_bytes": "900KB",
                    "message": {
                      "key": "${.clientid}",
                      "value": "${.}"
                    },
                    "name": "pulsar_example_name",
                    "pulsar_topic": "pulsar_example_topic",
                    "retention_period": "infinity",
                    "send_buffer": "1MB",
                    "servers": "pulsar://127.0.0.1:6650",
                    "ssl": {
                      "enable": false,
                      "server_name_indication": "auto",
                      "verify": "verify_none"
                    },
                    "strategy": "key_dispatch",
                    "sync_timeout": "5s",
                    "type": "pulsar_producer"
                  },
                  {
                    "name": "foo",
                    "status": "connected",
                    "type": "pgsql",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  {
                    "name": "redis_bridge",
                    "type": "redis_cluster",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "servers": [
                      "127.0.0.1:6379"
                    ],
                    "resource_opts": {},
                    "redis_type": "cluster",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  {
                    "name": "foo",
                    "type": "mysql",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  {
                    "name": "foo",
                    "type": "kinesis_producer",
                    "enable": true,
                    "max_retries": 3,
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "endpoint": "https://kinesis.us-east-1.amazonaws.com",
                    "partition_key": "key",
                    "aws_access_key_id": "aws_access_key_id",
                    "stream_name": "stream_name"
                  },
                  {
                    "name": "http_example",
                    "type": "http",
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "15s",
                    "pool_size": 4,
                    "enable": true,
                    "body": "${payload}",
                    "url": "http://localhost:9901/messages/${topic}",
                    "method": "post",
                    "max_retries": 3,
                    "request_timeout": "15s",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "enable_pipelining": 100,
                    "local_topic": "emqx_http/#"
                  },
                  {
                    "timeout": 5,
                    "name": "foo",
                    "port": 5672,
                    "type": "rabbitmq",
                    "exchange": "messages",
                    "pool_size": 8,
                    "server": "localhost",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "heartbeat": "30s",
                    "durable": false,
                    "auto_reconnect": "2s",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "payload_template": "",
                    "routing_key": "my_routing_key",
                    "virtual_host": "/",
                    "exchange_type": "topic"
                  },
                  {
                    "name": "foo",
                    "table": "mqtt",
                    "type": "dynamo",
                    "pool_size": 8,
                    "template": "",
                    "enable": true,
                    "url": "http://127.0.0.1:8000",
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "aws_access_key_id": "root"
                  },
                  {
                    "name": "foo",
                    "type": "tdengine",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  {
                    "name": "mongodb_single_demo",
                    "type": "mongodb_single",
                    "pool_size": 8,
                    "server": "localhost:27017",
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "single"
                  },
                  {
                    "name": "demo",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                  },
                  {
                    "name": "foo",
                    "type": "opents",
                    "pool_size": 8,
                    "server": "http://127.0.0.1:4242",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "enabledb": true
                  },
                  {
                    "name": "mongodb_sharded_demo",
                    "type": "mongodb_sharded",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "sharded"
                  },
                  {
                    "name": "mongodb_rs_demo",
                    "type": "mongodb_rs",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "r_mode": "safe",
                    "w_mode": "safe",
                    "replica_set_name": "rs",
                    "srv_record": false,
                    "mongo_type": "rs"
                  },
                  {
                    "name": "foo",
                    "type": "oracle",
                    "pool_size": 8,
                    "server": "127.0.0.1:1521",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "service_name": "ORCL",
                    "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "sid": "ORCL"
                  },
                  {
                    "name": "demo",
                    "stream": "stream",
                    "type": "hstreamdb",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "direction": "egress",
                    "url": "http://127.0.0.1:6570",
                    "resource_opts": {
                      "batch_size": 100,
                      "query_mode": "sync",
                      "batch_time": "20ms"
                    },
                    "record_template": "{ \"temperature\": ${payload.temperature}, \"humidity\": ${payload.humidity} }"
                  },
                  {
                    "name": "demo",
                    "type": "influxdb_api_v1",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "database": "example_database",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v1"
                  },
                  {
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    },
                    "pubsub_topic": "mytopic"
                  },
                  {
                    "name": "redis_bridge",
                    "type": "redis_single",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "server": "127.0.0.1:6379",
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "redis_type": "single",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  {
                    "name": "mqtt_example",
                    "type": "mqtt",
                    "keepalive": "300s",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:1883",
                    "enable": true,
                    "password": "******",
                    "username": "foo",
                    "proto_ver": "v4",
                    "clean_start": true,
                    "retry_interval": "15s",
                    "max_inflight": 100,
                    "resource_opts": {
                      "query_mode": "sync",
                      "max_buffer_bytes": 104857600,
                      "health_check_interval": "15s"
                    },
                    "ingress": {
                      "local": {
                        "retain": "${retain}",
                        "payload": "${payload}",
                        "topic": "from_aws/${topic}",
                        "qos": "${qos}"
                      },
                      "remote": {
                        "topic": "aws/#",
                        "qos": 1
                      }
                    },
                    "egress": {
                      "local": {
                        "topic": "emqx/#"
                      },
                      "remote": {
                        "retain": false,
                        "payload": "${payload}",
                        "topic": "from_emqx/${topic}",
                        "qos": "${qos}"
                      }
                    }
                  },
                  {
                    "name": "foo",
                    "type": "cassandra",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
                    "servers": "127.0.0.1:9042",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "keyspace": "mqtt"
                  },
                  {
                    "connect_timeout": "15s",
                    "consumer": {
                      "topic_mapping": [
                        {
                          "qos": 1,
                          "mqtt_topic": "mqtt/topic/1",
                          "payload_template": "${.}",
                          "pubsub_topic": "pubsub-topic-1"
                        },
                        {
                          "qos": 2,
                          "mqtt_topic": "mqtt/topic/2",
                          "payload_template": "v = ${.value}, a = ${.attributes}, o = ${.ordering_key}",
                          "pubsub_topic": "pubsub-topic-2"
                        }
                      ],
                      "pull_max_messages": 100
                    },
                    "resource_opts": {
                      "request_ttl": "20s"
                    },
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  {
                    "name": "foo",
                    "type": "clickhouse",
                    "pool_size": 8,
                    "server": "127.0.0.1:8123",
                    "enable": true,
                    "password": "******",
                    "username": "default",
                    "database": "mqtt",
                    "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "batch_value_separator": ", "
                  },
                  {
                    "driver": "ms-sql",
                    "name": "bar",
                    "type": "sqlserver",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "enable": true,
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  {
                    "name": "foo",
                    "status": "connected",
                    "type": "matrix",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  {
                    "name": "my_kafka_producer_action",
                    "status": "connected",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "kafka": {
                      "max_batch_bytes": "896KB",
                      "offset_reset_policy": "latest",
                      "offset_commit_interval_seconds": 5
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s",
                    "topic_mapping": [
                      {
                        "qos": 1,
                        "mqtt_topic": "mqtt/topic/${.offset}",
                        "kafka_topic": "kafka-topic-1",
                        "payload_template": "${.}"
                      },
                      {
                        "qos": 2,
                        "mqtt_topic": "mqtt/topic/2",
                        "kafka_topic": "kafka-topic-2",
                        "payload_template": "v = ${.value}"
                      }
                    ],
                    "value_encoding_mode": "none",
                    "key_encoding_mode": "none"
                  },
                  {
                    "name": "foo",
                    "type": "rocketmq",
                    "server": "127.0.0.1:9876",
                    "template": "",
                    "enable": true,
                    "topic": "TopicTest",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  {
                    "name": "foo",
                    "status": "connected",
                    "type": "timescale",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/bridge_kafka.get_producer"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_timescale.get"
                      },
                      {
                        "$ref": "#/components/schemas/rocketmq.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_kafka.get_consumer"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_matrix.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_sqlserver.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_clickhouse.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_gcp_pubsub.get_consumer"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_cassa.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_redis.get_single"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_gcp_pubsub.get_producer"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_influxdb.get_api_v1"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_hstreamdb.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_oracle.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mongodb.get_rs"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mongodb.get_sharded"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_opents.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_greptimedb.get_grpc_v1"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mongodb.get_single"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_tdengine.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_dynamo.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_rabbitmq.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mqtt.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_kinesis.get_producer"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mysql.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_redis.get_cluster"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_pgsql.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_pulsar.get_producer"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_redis.get_sentinel"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_azure_event_hub.get_producer"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_http.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_iotdb.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_influxdb.get_api_v2"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "summary": "List bridges",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create a new bridge by type and name",
        "tags": [
          "Bridges"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "influxdb_api_v2": {
                    "value": {
                      "name": "demo",
                      "type": "influxdb_api_v2",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "precision": "ms",
                      "org": "examlpe_org",
                      "token": "example_token",
                      "bucket": "example_bucket",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}",
                      "influxdb_type": "influxdb_api_v2"
                    },
                    "summary": "InfluxDB HTTP API V2 Bridge"
                  },
                  "iotdb": {
                    "value": {
                      "name": "My IoTDB Bridge",
                      "type": "iotdb",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "*****",
                        "username": "root"
                      },
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "base_url": "http://iotdb.local:18080/",
                      "pool_type": "random",
                      "resource_opts": {
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "health_check_interval": "15s"
                      },
                      "enable_pipelining": 100,
                      "iotdb_version": "v1.1.x",
                      "device_id": "my_device",
                      "is_aligned": false
                    },
                    "summary": "Apache IoTDB Bridge"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB",
                          "memory_overload_protection": true
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_linger_bytes": "10MB",
                        "max_batch_bytes": "896KB",
                        "kafka_headers": "${.pub_props}",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_header_value_encode_mode": "none",
                        "partition_strategy": "random",
                        "partition_count_refresh_interval": "60s",
                        "max_linger_time": "5ms"
                      },
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic",
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Azure Event Hub Producer Bridge"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "kafka": {
                        "message": {
                          "timestamp": "${.timestamp}",
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "segment_bytes": "10MB",
                          "per_partition_limit": "2GB",
                          "memory_overload_protection": true
                        },
                        "compression": "no_compression",
                        "topic": "kafka-topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_linger_bytes": "10MB",
                        "max_batch_bytes": "896KB",
                        "kafka_headers": "${pub_props}",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_header_value_encode_mode": "none",
                        "partitions_limit": "all_partitions",
                        "partition_strategy": "random",
                        "partition_count_refresh_interval": "60s",
                        "max_linger_time": "5ms"
                      },
                      "local_topic": "mqtt/local/topic",
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "localhost:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Kafka Producer Bridge"
                  },
                  "redis_sentinel": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_sentinel",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "database": 1,
                      "servers": [
                        "127.0.0.1:26379"
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "batch_time": "20ms"
                      },
                      "sentinel": "mymaster",
                      "redis_type": "sentinel",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Sentinel Bridge"
                  },
                  "pulsar_producer": {
                    "value": {
                      "authentication": "none",
                      "batch_size": 1,
                      "buffer": {
                        "memory_overload_protection": true,
                        "mode": "memory",
                        "per_partition_limit": "10MB",
                        "segment_bytes": "5MB"
                      },
                      "compression": "no_compression",
                      "enable": true,
                      "local_topic": "mqtt/topic/-576460752303423482",
                      "max_batch_bytes": "900KB",
                      "message": {
                        "key": "${.clientid}",
                        "value": "${.}"
                      },
                      "name": "pulsar_example_name",
                      "pulsar_topic": "pulsar_example_topic",
                      "retention_period": "infinity",
                      "send_buffer": "1MB",
                      "servers": "pulsar://127.0.0.1:6650",
                      "ssl": {
                        "enable": false,
                        "server_name_indication": "auto",
                        "verify": "verify_none"
                      },
                      "strategy": "key_dispatch",
                      "sync_timeout": "5s",
                      "type": "pulsar_producer"
                    },
                    "summary": "Pulsar Producer Bridge"
                  },
                  "pgsql": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "pgsql",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "PostgreSQL Bridge"
                  },
                  "redis_cluster": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_cluster",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "servers": [
                        "127.0.0.1:6379"
                      ],
                      "resource_opts": {},
                      "redis_type": "cluster",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Cluster Bridge"
                  },
                  "mysql": {
                    "value": {
                      "name": "foo",
                      "type": "mysql",
                      "pool_size": 8,
                      "server": "127.0.0.1:3306",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "test",
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "MySQL Bridge"
                  },
                  "kinesis_producer": {
                    "value": {
                      "name": "foo",
                      "type": "kinesis_producer",
                      "enable": true,
                      "max_retries": 3,
                      "aws_secret_access_key": "******",
                      "resource_opts": {
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 104857600,
                        "inflight_window": 100,
                        "health_check_interval": 15000
                      },
                      "endpoint": "https://kinesis.us-east-1.amazonaws.com",
                      "partition_key": "key",
                      "aws_access_key_id": "aws_access_key_id",
                      "stream_name": "stream_name"
                    },
                    "summary": "Amazon Kinesis Producer Bridge"
                  },
                  "http_example": {
                    "value": {
                      "name": "http_example",
                      "type": "http",
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "15s",
                      "pool_size": 4,
                      "enable": true,
                      "body": "${payload}",
                      "url": "http://localhost:9901/messages/${topic}",
                      "method": "post",
                      "max_retries": 3,
                      "request_timeout": "15s",
                      "pool_type": "random",
                      "resource_opts": {
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 104857600,
                        "inflight_window": 100,
                        "health_check_interval": 15000
                      },
                      "enable_pipelining": 100,
                      "local_topic": "emqx_http/#"
                    },
                    "summary": "HTTP"
                  },
                  "rabbitmq": {
                    "value": {
                      "timeout": 5,
                      "name": "foo",
                      "port": 5672,
                      "type": "rabbitmq",
                      "exchange": "messages",
                      "pool_size": 8,
                      "server": "localhost",
                      "enable": true,
                      "password": "******",
                      "username": "guest",
                      "heartbeat": "30s",
                      "durable": false,
                      "auto_reconnect": "2s",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "payload_template": "",
                      "routing_key": "my_routing_key",
                      "virtual_host": "/",
                      "exchange_type": "topic"
                    },
                    "summary": "RabbitMQ Bridge"
                  },
                  "dynamo": {
                    "value": {
                      "name": "foo",
                      "table": "mqtt",
                      "type": "dynamo",
                      "pool_size": 8,
                      "template": "",
                      "enable": true,
                      "url": "http://127.0.0.1:8000",
                      "aws_secret_access_key": "******",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "aws_access_key_id": "root"
                    },
                    "summary": "DynamoDB Bridge"
                  },
                  "tdengine": {
                    "value": {
                      "name": "foo",
                      "type": "tdengine",
                      "pool_size": 8,
                      "server": "127.0.0.1:6041",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "TDengine Bridge"
                  },
                  "mongodb_single": {
                    "value": {
                      "name": "mongodb_single_demo",
                      "type": "mongodb_single",
                      "pool_size": 8,
                      "server": "localhost:27017",
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "collection": "mycol",
                      "w_mode": "safe",
                      "srv_record": false,
                      "mongo_type": "single"
                    },
                    "summary": "MongoDB (Standalone) Bridge"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "demo",
                      "type": "greptimedb",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:4001",
                      "enable": true,
                      "precision": "ms",
                      "password": "******",
                      "username": "example_username",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "dbname": "example_db",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                    },
                    "summary": "Greptimedb HTTP API V2 Bridge"
                  },
                  "opents": {
                    "value": {
                      "name": "foo",
                      "type": "opents",
                      "pool_size": 8,
                      "server": "http://127.0.0.1:4242",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "enabledb": true
                    },
                    "summary": "OpenTSDB Bridge"
                  },
                  "mongodb_sharded": {
                    "value": {
                      "name": "mongodb_sharded_demo",
                      "type": "mongodb_sharded",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "servers": "localhost:27017, localhost:27018",
                      "collection": "mycol",
                      "w_mode": "safe",
                      "srv_record": false,
                      "mongo_type": "sharded"
                    },
                    "summary": "MongoDB (Sharded) Bridge"
                  },
                  "mongodb_rs": {
                    "value": {
                      "name": "mongodb_rs_demo",
                      "type": "mongodb_rs",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "servers": "localhost:27017, localhost:27018",
                      "collection": "mycol",
                      "r_mode": "safe",
                      "w_mode": "safe",
                      "replica_set_name": "rs",
                      "srv_record": false,
                      "mongo_type": "rs"
                    },
                    "summary": "MongoDB (Replica Set) Bridge"
                  },
                  "oracle": {
                    "value": {
                      "name": "foo",
                      "type": "oracle",
                      "pool_size": 8,
                      "server": "127.0.0.1:1521",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "service_name": "ORCL",
                      "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "sid": "ORCL"
                    },
                    "summary": "Oracle Database Bridge"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "demo",
                      "stream": "stream",
                      "type": "hstreamdb",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "direction": "egress",
                      "url": "http://127.0.0.1:6570",
                      "resource_opts": {
                        "batch_size": 100,
                        "query_mode": "sync",
                        "batch_time": "20ms"
                      },
                      "record_template": "{ \"temperature\": ${payload.temperature}, \"humidity\": ${payload.humidity} }"
                    },
                    "summary": "HStreamDB Bridge"
                  },
                  "influxdb_api_v1": {
                    "value": {
                      "name": "demo",
                      "type": "influxdb_api_v1",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "precision": "ms",
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}",
                      "influxdb_type": "influxdb_api_v1"
                    },
                    "summary": "InfluxDB HTTP API V1 Bridge"
                  },
                  "gcp_pubsub": {
                    "value": {
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      },
                      "pubsub_topic": "mytopic"
                    },
                    "summary": "GCP PubSub Producer Bridge"
                  },
                  "redis_single": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_single",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "server": "127.0.0.1:6379",
                      "enable": true,
                      "password": "******",
                      "database": 1,
                      "resource_opts": {
                        "batch_size": 1,
                        "batch_time": "20ms"
                      },
                      "redis_type": "single",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Single Node Bridge"
                  },
                  "mqtt_example": {
                    "value": {
                      "name": "mqtt_example",
                      "type": "mqtt",
                      "keepalive": "300s",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:1883",
                      "enable": true,
                      "password": "******",
                      "username": "foo",
                      "proto_ver": "v4",
                      "clean_start": true,
                      "retry_interval": "15s",
                      "max_inflight": 100,
                      "resource_opts": {
                        "query_mode": "sync",
                        "max_buffer_bytes": 104857600,
                        "health_check_interval": "15s"
                      },
                      "ingress": {
                        "local": {
                          "retain": "${retain}",
                          "payload": "${payload}",
                          "topic": "from_aws/${topic}",
                          "qos": "${qos}"
                        },
                        "remote": {
                          "topic": "aws/#",
                          "qos": 1
                        }
                      },
                      "egress": {
                        "local": {
                          "topic": "emqx/#"
                        },
                        "remote": {
                          "retain": false,
                          "payload": "${payload}",
                          "topic": "from_emqx/${topic}",
                          "qos": "${qos}"
                        }
                      }
                    },
                    "summary": "MQTT Bridge"
                  },
                  "cassandra": {
                    "value": {
                      "name": "foo",
                      "type": "cassandra",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
                      "servers": "127.0.0.1:9042",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "keyspace": "mqtt"
                    },
                    "summary": "Cassandra Bridge"
                  },
                  "gcp_pubsub_consumer": {
                    "value": {
                      "connect_timeout": "15s",
                      "consumer": {
                        "topic_mapping": [
                          {
                            "qos": 1,
                            "mqtt_topic": "mqtt/topic/1",
                            "payload_template": "${.}",
                            "pubsub_topic": "pubsub-topic-1"
                          },
                          {
                            "qos": 2,
                            "mqtt_topic": "mqtt/topic/2",
                            "payload_template": "v = ${.value}, a = ${.attributes}, o = ${.ordering_key}",
                            "pubsub_topic": "pubsub-topic-2"
                          }
                        ],
                        "pull_max_messages": 100
                      },
                      "resource_opts": {
                        "request_ttl": "20s"
                      },
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Consumer Bridge"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "foo",
                      "type": "clickhouse",
                      "pool_size": 8,
                      "server": "127.0.0.1:8123",
                      "enable": true,
                      "password": "******",
                      "username": "default",
                      "database": "mqtt",
                      "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "batch_value_separator": ", "
                    },
                    "summary": "Clickhouse Bridge"
                  },
                  "sqlserver": {
                    "value": {
                      "driver": "ms-sql",
                      "name": "bar",
                      "type": "sqlserver",
                      "pool_size": 8,
                      "server": "127.0.0.1:1433",
                      "enable": true,
                      "password": "******",
                      "username": "sa",
                      "database": "test",
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Microsoft SQL Server Bridge"
                  },
                  "matrix": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "matrix",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Matrix Bridge"
                  },
                  "kafka_consumer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "kafka": {
                        "max_batch_bytes": "896KB",
                        "offset_reset_policy": "latest",
                        "offset_commit_interval_seconds": 5
                      },
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "localhost:9092",
                      "metadata_request_timeout": "4s",
                      "topic_mapping": [
                        {
                          "qos": 1,
                          "mqtt_topic": "mqtt/topic/${.offset}",
                          "kafka_topic": "kafka-topic-1",
                          "payload_template": "${.}"
                        },
                        {
                          "qos": 2,
                          "mqtt_topic": "mqtt/topic/2",
                          "kafka_topic": "kafka-topic-2",
                          "payload_template": "v = ${.value}"
                        }
                      ],
                      "value_encoding_mode": "none",
                      "key_encoding_mode": "none"
                    },
                    "summary": "Kafka Consumer Bridge"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "foo",
                      "type": "rocketmq",
                      "server": "127.0.0.1:9876",
                      "template": "",
                      "enable": true,
                      "topic": "TopicTest",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "RocketMQ Bridge"
                  },
                  "timescale": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "timescale",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Timescale Bridge"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_consumer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_gcp_pubsub.get_consumer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_single"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_gcp_pubsub.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_api_v1"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_rs"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_opents.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_grpc_v1"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_single"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_tdengine.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pgsql.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pulsar.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_iotdb.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_api_v2"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Create bridge",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "influxdb_api_v2": {
                  "value": {
                    "name": "demo",
                    "type": "influxdb_api_v2",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "org": "examlpe_org",
                    "token": "example_token",
                    "bucket": "example_bucket",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v2"
                  },
                  "summary": "InfluxDB HTTP API V2 Bridge"
                },
                "iotdb": {
                  "value": {
                    "name": "My IoTDB Bridge",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "*****",
                      "username": "root"
                    },
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "base_url": "http://iotdb.local:18080/",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "health_check_interval": "15s"
                    },
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.1.x",
                    "device_id": "my_device",
                    "is_aligned": false
                  },
                  "summary": "Apache IoTDB Bridge"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "name": "my_azure_event_hub_producer",
                    "type": "azure_event_hub_producer",
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${.pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "local_topic": "mqtt/local/topic",
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Azure Event Hub Producer Bridge"
                },
                "kafka_producer": {
                  "value": {
                    "name": "my_kafka_producer_action",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "kafka": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "segment_bytes": "10MB",
                        "per_partition_limit": "2GB",
                        "memory_overload_protection": true
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_linger_bytes": "10MB",
                      "max_batch_bytes": "896KB",
                      "kafka_headers": "${pub_props}",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_header_value_encode_mode": "none",
                      "partitions_limit": "all_partitions",
                      "partition_strategy": "random",
                      "partition_count_refresh_interval": "60s",
                      "max_linger_time": "5ms"
                    },
                    "local_topic": "mqtt/local/topic",
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Kafka Producer Bridge"
                },
                "redis_sentinel": {
                  "value": {
                    "name": "redis_bridge",
                    "type": "redis_sentinel",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "servers": [
                      "127.0.0.1:26379"
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "sentinel": "mymaster",
                    "redis_type": "sentinel",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Sentinel Bridge"
                },
                "pulsar_producer": {
                  "value": {
                    "authentication": "none",
                    "batch_size": 1,
                    "buffer": {
                      "memory_overload_protection": true,
                      "mode": "memory",
                      "per_partition_limit": "10MB",
                      "segment_bytes": "5MB"
                    },
                    "compression": "no_compression",
                    "enable": true,
                    "local_topic": "mqtt/topic/-576460752303423482",
                    "max_batch_bytes": "900KB",
                    "message": {
                      "key": "${.clientid}",
                      "value": "${.}"
                    },
                    "name": "pulsar_example_name",
                    "pulsar_topic": "pulsar_example_topic",
                    "retention_period": "infinity",
                    "send_buffer": "1MB",
                    "servers": "pulsar://127.0.0.1:6650",
                    "ssl": {
                      "enable": false,
                      "server_name_indication": "auto",
                      "verify": "verify_none"
                    },
                    "strategy": "key_dispatch",
                    "sync_timeout": "5s",
                    "type": "pulsar_producer"
                  },
                  "summary": "Pulsar Producer Bridge"
                },
                "pgsql": {
                  "value": {
                    "name": "foo",
                    "type": "pgsql",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "PostgreSQL Bridge"
                },
                "redis_cluster": {
                  "value": {
                    "name": "redis_bridge",
                    "type": "redis_cluster",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "servers": [
                      "127.0.0.1:6379"
                    ],
                    "resource_opts": {},
                    "redis_type": "cluster",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Cluster Bridge"
                },
                "mysql": {
                  "value": {
                    "name": "foo",
                    "type": "mysql",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "MySQL Bridge"
                },
                "kinesis_producer": {
                  "value": {
                    "name": "foo",
                    "type": "kinesis_producer",
                    "enable": true,
                    "max_retries": 3,
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "endpoint": "https://kinesis.us-east-1.amazonaws.com",
                    "partition_key": "key",
                    "aws_access_key_id": "aws_access_key_id",
                    "stream_name": "stream_name"
                  },
                  "summary": "Amazon Kinesis Producer Bridge"
                },
                "http_example": {
                  "value": {
                    "name": "http_example",
                    "type": "http",
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "15s",
                    "pool_size": 4,
                    "enable": true,
                    "body": "${payload}",
                    "url": "http://localhost:9901/messages/${topic}",
                    "method": "post",
                    "max_retries": 3,
                    "request_timeout": "15s",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "enable_pipelining": 100,
                    "local_topic": "emqx_http/#"
                  },
                  "summary": "HTTP"
                },
                "rabbitmq": {
                  "value": {
                    "timeout": 5,
                    "name": "foo",
                    "port": 5672,
                    "type": "rabbitmq",
                    "exchange": "messages",
                    "pool_size": 8,
                    "server": "localhost",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "heartbeat": "30s",
                    "durable": false,
                    "auto_reconnect": "2s",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "payload_template": "",
                    "routing_key": "my_routing_key",
                    "virtual_host": "/",
                    "exchange_type": "topic"
                  },
                  "summary": "RabbitMQ Bridge"
                },
                "dynamo": {
                  "value": {
                    "name": "foo",
                    "table": "mqtt",
                    "type": "dynamo",
                    "pool_size": 8,
                    "template": "",
                    "enable": true,
                    "url": "http://127.0.0.1:8000",
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "aws_access_key_id": "root"
                  },
                  "summary": "DynamoDB Bridge"
                },
                "tdengine": {
                  "value": {
                    "name": "foo",
                    "type": "tdengine",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "TDengine Bridge"
                },
                "mongodb_single": {
                  "value": {
                    "name": "mongodb_single_demo",
                    "type": "mongodb_single",
                    "pool_size": 8,
                    "server": "localhost:27017",
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "single"
                  },
                  "summary": "MongoDB (Standalone) Bridge"
                },
                "greptimedb": {
                  "value": {
                    "name": "demo",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                  },
                  "summary": "Greptimedb HTTP API V2 Bridge"
                },
                "opents": {
                  "value": {
                    "name": "foo",
                    "type": "opents",
                    "pool_size": 8,
                    "server": "http://127.0.0.1:4242",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "enabledb": true
                  },
                  "summary": "OpenTSDB Bridge"
                },
                "mongodb_sharded": {
                  "value": {
                    "name": "mongodb_sharded_demo",
                    "type": "mongodb_sharded",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "sharded"
                  },
                  "summary": "MongoDB (Sharded) Bridge"
                },
                "mongodb_rs": {
                  "value": {
                    "name": "mongodb_rs_demo",
                    "type": "mongodb_rs",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "r_mode": "safe",
                    "w_mode": "safe",
                    "replica_set_name": "rs",
                    "srv_record": false,
                    "mongo_type": "rs"
                  },
                  "summary": "MongoDB (Replica Set) Bridge"
                },
                "oracle": {
                  "value": {
                    "name": "foo",
                    "type": "oracle",
                    "pool_size": 8,
                    "server": "127.0.0.1:1521",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "service_name": "ORCL",
                    "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "sid": "ORCL"
                  },
                  "summary": "Oracle Database Bridge"
                },
                "hstreamdb": {
                  "value": {
                    "name": "demo",
                    "stream": "stream",
                    "type": "hstreamdb",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "direction": "egress",
                    "url": "http://127.0.0.1:6570",
                    "resource_opts": {
                      "batch_size": 100,
                      "query_mode": "sync",
                      "batch_time": "20ms"
                    },
                    "record_template": "{ \"temperature\": ${payload.temperature}, \"humidity\": ${payload.humidity} }"
                  },
                  "summary": "HStreamDB Bridge"
                },
                "influxdb_api_v1": {
                  "value": {
                    "name": "demo",
                    "type": "influxdb_api_v1",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "database": "example_database",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v1"
                  },
                  "summary": "InfluxDB HTTP API V1 Bridge"
                },
                "gcp_pubsub": {
                  "value": {
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    },
                    "pubsub_topic": "mytopic"
                  },
                  "summary": "GCP PubSub Producer Bridge"
                },
                "redis_single": {
                  "value": {
                    "name": "redis_bridge",
                    "type": "redis_single",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "server": "127.0.0.1:6379",
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "redis_type": "single",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Single Node Bridge"
                },
                "mqtt_example": {
                  "value": {
                    "name": "mqtt_example",
                    "type": "mqtt",
                    "keepalive": "300s",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:1883",
                    "enable": true,
                    "password": "******",
                    "username": "foo",
                    "proto_ver": "v4",
                    "clean_start": true,
                    "retry_interval": "15s",
                    "max_inflight": 100,
                    "resource_opts": {
                      "query_mode": "sync",
                      "max_buffer_bytes": 104857600,
                      "health_check_interval": "15s"
                    },
                    "ingress": {
                      "local": {
                        "retain": "${retain}",
                        "payload": "${payload}",
                        "topic": "from_aws/${topic}",
                        "qos": "${qos}"
                      },
                      "remote": {
                        "topic": "aws/#",
                        "qos": 1
                      }
                    },
                    "egress": {
                      "local": {
                        "topic": "emqx/#"
                      },
                      "remote": {
                        "retain": false,
                        "payload": "${payload}",
                        "topic": "from_emqx/${topic}",
                        "qos": "${qos}"
                      }
                    }
                  },
                  "summary": "MQTT Bridge"
                },
                "cassandra": {
                  "value": {
                    "name": "foo",
                    "type": "cassandra",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
                    "servers": "127.0.0.1:9042",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "keyspace": "mqtt"
                  },
                  "summary": "Cassandra Bridge"
                },
                "gcp_pubsub_consumer": {
                  "value": {
                    "connect_timeout": "15s",
                    "consumer": {
                      "topic_mapping": [
                        {
                          "qos": 1,
                          "mqtt_topic": "mqtt/topic/1",
                          "payload_template": "${.}",
                          "pubsub_topic": "pubsub-topic-1"
                        },
                        {
                          "qos": 2,
                          "mqtt_topic": "mqtt/topic/2",
                          "payload_template": "v = ${.value}, a = ${.attributes}, o = ${.ordering_key}",
                          "pubsub_topic": "pubsub-topic-2"
                        }
                      ],
                      "pull_max_messages": 100
                    },
                    "resource_opts": {
                      "request_ttl": "20s"
                    },
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Consumer Bridge"
                },
                "clickhouse": {
                  "value": {
                    "name": "foo",
                    "type": "clickhouse",
                    "pool_size": 8,
                    "server": "127.0.0.1:8123",
                    "enable": true,
                    "password": "******",
                    "username": "default",
                    "database": "mqtt",
                    "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "batch_value_separator": ", "
                  },
                  "summary": "Clickhouse Bridge"
                },
                "sqlserver": {
                  "value": {
                    "driver": "ms-sql",
                    "name": "bar",
                    "type": "sqlserver",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "enable": true,
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Microsoft SQL Server Bridge"
                },
                "matrix": {
                  "value": {
                    "name": "foo",
                    "type": "matrix",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Matrix Bridge"
                },
                "kafka_consumer": {
                  "value": {
                    "name": "my_kafka_producer_action",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "kafka": {
                      "max_batch_bytes": "896KB",
                      "offset_reset_policy": "latest",
                      "offset_commit_interval_seconds": 5
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s",
                    "topic_mapping": [
                      {
                        "qos": 1,
                        "mqtt_topic": "mqtt/topic/${.offset}",
                        "kafka_topic": "kafka-topic-1",
                        "payload_template": "${.}"
                      },
                      {
                        "qos": 2,
                        "mqtt_topic": "mqtt/topic/2",
                        "kafka_topic": "kafka-topic-2",
                        "payload_template": "v = ${.value}"
                      }
                    ],
                    "value_encoding_mode": "none",
                    "key_encoding_mode": "none"
                  },
                  "summary": "Kafka Consumer Bridge"
                },
                "rocketmq": {
                  "value": {
                    "name": "foo",
                    "type": "rocketmq",
                    "server": "127.0.0.1:9876",
                    "template": "",
                    "enable": true,
                    "topic": "TopicTest",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "RocketMQ Bridge"
                },
                "timescale": {
                  "value": {
                    "name": "foo",
                    "type": "timescale",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Timescale Bridge"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_timescale.post"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_consumer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_gcp_pubsub.post_consumer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.post_single"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_gcp_pubsub.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_api_v1"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_rs"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_opents.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.post_grpc_v1"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_single"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_tdengine.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.post_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pgsql.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pulsar.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.post_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_iotdb.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_api_v2"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/node_eviction/status": {
      "get": {
        "description": "Get the node eviction status",
        "tags": [
          "Node Eviction"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/node_eviction.status_disabled"
                    },
                    {
                      "$ref": "#/components/schemas/node_eviction.status_enabled"
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get node eviction status",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/listeners_status": {
      "get": {
        "description": "List all running node's listeners live status. group by listener type",
        "tags": [
          "Listeners"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "status": {
                      "running": true,
                      "max_connections": 2048000,
                      "current_connections": 21
                    },
                    "type": "tcp",
                    "enable": false,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 11
                        }
                      },
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "ids": [
                      "tcp:demo"
                    ]
                  },
                  {
                    "status": {
                      "running": true,
                      "max_connections": "infinity",
                      "current_connections": 71
                    },
                    "type": "ssl",
                    "enable": false,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": "infinity",
                          "current_connections": 31
                        }
                      },
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": "infinity",
                          "current_connections": 40
                        }
                      }
                    ],
                    "ids": [
                      "ssl:default"
                    ]
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/listeners.listener_type_status"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/monitor": {
      "get": {
        "description": "List monitor (statistics) data for the whole cluster.",
        "tags": [
          "Metrics"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "latest",
            "description": "The latest N seconds data. Like 300 for 5 min.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "example": 300
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_dashboard_monitor_api.sampler"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_RPC"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad RPC"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/relup/package": {
      "get": {
        "description": "Get information of the installed hot upgrade package.<br/>",
        "tags": [
          "Relup"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relup.package"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "No relup package is installed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Get the installed hot upgrade package",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the installed hot upgrade package.<br/>",
        "tags": [
          "Relup"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Packages are deleted successfully"
          }
        },
        "summary": "Delete the installed hot upgrade package",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/logout": {
      "post": {
        "description": "Dashboard user logout.<br/>This endpoint is only for the Dashboard, not the `API Key`.<br/>The token from the `/login` endpoint must be a bearer authorization in the headers.",
        "tags": [
          "Dashboard"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "backend",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "local",
                "ldap",
                "oidc",
                "saml"
              ]
            },
            "example": "local"
          }
        ],
        "responses": {
          "204": {
            "description": "Dashboard logout successfully"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_USERNAME_OR_PWD"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Login failed. Bad username or password"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Dashboard Username",
                    "maxLength": 100,
                    "example": "admin"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/built_in_database/rules/all": {
      "get": {
        "description": "Show the list of rules for 'all'",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "password_based:built_in_database": {
                    "value": {
                      "rules": [
                        {
                          "action": "publish",
                          "permission": "allow",
                          "topic": "test/topic/1"
                        },
                        {
                          "action": "subscribe",
                          "permission": "allow",
                          "topic": "test/topic/2"
                        },
                        {
                          "action": "all",
                          "permission": "deny",
                          "topic": "eq test/#"
                        },
                        {
                          "action": "publish",
                          "retain": "true",
                          "permission": "allow",
                          "topic": "test/topic/3",
                          "qos": [
                            "1"
                          ]
                        },
                        {
                          "action": "publish",
                          "retain": "all",
                          "permission": "allow",
                          "topic": "test/topic/4",
                          "qos": [
                            "0",
                            "1",
                            "2"
                          ]
                        }
                      ]
                    },
                    "summary": "All"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete rules for 'all'",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create/Update the list of rules for 'all'.",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad rule schema"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "password_based:built_in_database": {
                  "value": {
                    "rules": [
                      {
                        "action": "publish",
                        "permission": "allow",
                        "topic": "test/topic/1"
                      },
                      {
                        "action": "subscribe",
                        "permission": "allow",
                        "topic": "test/topic/2"
                      },
                      {
                        "action": "all",
                        "permission": "deny",
                        "topic": "eq test/#"
                      },
                      {
                        "action": "publish",
                        "retain": "true",
                        "permission": "allow",
                        "topic": "test/topic/3",
                        "qos": [
                          "1"
                        ]
                      },
                      {
                        "action": "publish",
                        "retain": "all",
                        "permission": "allow",
                        "topic": "test/topic/4",
                        "qos": [
                          "0",
                          "1",
                          "2"
                        ]
                      }
                    ]
                  },
                  "summary": "All"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ds/storages/{ds}": {
      "get": {
        "description": "Get durable storage",
        "tags": [
          "Durable storage"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ds",
            "description": "Durable storage ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "messages"
          }
        ],
        "responses": {
          "200": {
            "description": "Get information about a durable storage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_ds.db"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Durable storage not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Durable storage is disabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/relup/status/{node}": {
      "get": {
        "description": "Get the hot upgrade status of a specified node",
        "tags": [
          "Relup"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/relup.node_name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relup.running_status"
                }
              }
            }
          }
        },
        "summary": "Get the hot upgrade status of a specified node",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/load_rebalance/availability_check": {
      "get": {
        "description": "Check if the node is being evacuated or rebalanced",
        "tags": [
          "Load Rebalance"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The response is empty",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NODE_EVACUATING"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node Evacuating"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Node rebalance availability check",
        "security": []
      }
    },
    "/rule_engine": {
      "get": {
        "description": "Get rule engine configuration.",
        "tags": [
          "Rules"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule_engine.rule_engine"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update rule engine configuration.",
        "tags": [
          "Rules"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule_engine.rule_engine"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rule_engine.rule_engine"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/load_rebalance/global_status": {
      "get": {
        "description": "Get status of all rebalance/evacuation processes across the cluster",
        "tags": [
          "Load Rebalance"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/load_rebalance.global_status"
                }
              }
            }
          }
        },
        "summary": "Get global rebalance status",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_registry_external/registry/{name}": {
      "get": {
        "description": "Lookup external schema registry",
        "tags": [
          "Schema Registry"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "External registry name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_registry"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "avro_schema": {
                    "value": {
                      "name": "my_avro_schema",
                      "type": "avro",
                      "description": "My Avro Schema",
                      "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                    },
                    "summary": "Avro"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/schema_registry.get_json"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.get_protobuf"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.get_avro"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Schema not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Lookup external registry",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update external schema registry",
        "tags": [
          "Schema Registry"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "External registry name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_registry"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "avro_schema": {
                    "value": {
                      "name": "my_avro_schema",
                      "type": "avro",
                      "description": "My Avro Schema",
                      "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                    },
                    "summary": "Avro"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/schema_registry.json"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.protobuf"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.avro"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Schema not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "summary": "Update external registry",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "confluent": {
                  "value": {},
                  "summary": "Confluent"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/schema_registry.confluent_schema_registry"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete external schema registry",
        "tags": [
          "Schema Registry"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "External registry name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_registry"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "summary": "Delete external registry",
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "/api/v5"
    }
  ],
  "openapi": "3.0.0"
}
