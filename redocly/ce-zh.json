{
  "components": {
    "parameters": {
      "api_key.name": {
        "description": "^[A-Za-z]+[A-Za-z0-9-_]*$",
        "example": "EMQX-API-KEY-1",
        "in": "path",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "cluster.node": {
        "description": "node name",
        "example": "emqx2@127.0.0.1",
        "in": "path",
        "name": "node",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "emqx_authz_api_mnesia.clientid": {
        "description": "客户端标识符",
        "example": "client1",
        "in": "path",
        "name": "clientid",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "emqx_authz_api_mnesia.username": {
        "description": "用户名",
        "example": "user1",
        "in": "path",
        "name": "username",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "emqx_mgmt_api_nodes.node_name": {
        "description": "Node name",
        "example": "emqx@127.0.0.1",
        "in": "path",
        "name": "node",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "emqx_mgmt_api_stats.aggregate": {
        "description": "Calculation aggregate for all nodes",
        "example": false,
        "in": "query",
        "name": "aggregate",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "listeners.listener_id": {
        "description": "Listener id",
        "example": "tcp:demo",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "plugins.name": {
        "description": "^[A-Za-z]+[A-Za-z0-9-_.]*$",
        "example": "emqx_plugin_template-5.0-rc.1",
        "in": "path",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "public.limit": {
        "description": "Results per page(max 1000)",
        "example": 50,
        "in": "query",
        "name": "limit",
        "schema": {
          "default": 100,
          "maximum": 1000,
          "minimum": 1,
          "type": "integer"
        }
      },
      "public.page": {
        "description": "Page number of the results to fetch.",
        "example": 1,
        "in": "query",
        "name": "page",
        "schema": {
          "default": 1,
          "minimum": 1,
          "type": "integer"
        }
      },
      "trace.bytes": {
        "description": "单个 HTTP 相应中包含 trace 日志的字节数。",
        "in": "query",
        "name": "bytes",
        "required": false,
        "schema": {
          "default": 1000,
          "maximum": 2147483647,
          "minimum": 0,
          "type": "integer"
        }
      },
      "trace.name": {
        "description": "[a-zA-Z0-9-_]",
        "example": "EMQX-TRACE-1",
        "in": "path",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "trace.node": {
        "description": "指定从哪个节点获取 trace 文件内容。",
        "example": "emqx@127.0.0.1",
        "in": "query",
        "name": "node",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "trace.position": {
        "description": "指定从该偏移量开始读取指定的 trace 日志文件。",
        "in": "query",
        "name": "position",
        "required": false,
        "schema": {
          "default": 0,
          "type": "integer"
        }
      }
    },
    "schemas": {
      "emqx_gateway_api.gateway_listener_overview": {
        "properties": {
          "id": {
            "description": "监听器 ID",
            "type": "string"
          },
          "running": {
            "description": "监听器运行状态",
            "type": "boolean"
          },
          "type": {
            "description": "监听器类型",
            "enum": [
              "tcp",
              "ssl",
              "udp",
              "dtls"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.ctx_unsub": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "description": "事件类型",
            "enum": [
              "session_unsubscribed"
            ],
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "username": {
            "description": "用户名",
            "type": "string"
          },
          "payload": {
            "description": "消息负载",
            "type": "string"
          },
          "peerhost": {
            "description": "对等客户端的 IP 地址",
            "type": "string"
          },
          "topic": {
            "description": "消息主题",
            "type": "string"
          },
          "publish_received_at": {
            "description": "消息被接受的时间",
            "type": "integer"
          },
          "qos": {
            "description": "消息的 QoS",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "modules.rewrite": {
        "required": [
          "action",
          "dest_topic",
          "re",
          "source_topic"
        ],
        "properties": {
          "action": {
            "description": "主题重写在哪种操作上生效：<br/>  - `subscribe`：订阅时重写主题；<br/>  - `publish`：发布时重写主题；<br/>  -`all`：全部重写主题",
            "enum": [
              "subscribe",
              "publish",
              "all"
            ],
            "example": "publish",
            "type": "string"
          },
          "source_topic": {
            "description": "源主题，客户端业务指定的主题",
            "example": "x/#",
            "type": "string"
          },
          "dest_topic": {
            "description": "目标主题。",
            "example": "z/y/$1",
            "type": "string"
          },
          "re": {
            "description": "正则表达式",
            "example": "^x/y/(.+)$",
            "type": "string"
          }
        },
        "type": "object"
      },
      "authz.node_status": {
        "properties": {
          "node": {
            "description": "节点名称。",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "status": {
            "description": "每个节点上资源的状态。",
            "enum": [
              "connected",
              "disconnected",
              "connecting"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_publish.publish_ok": {
        "properties": {
          "id": {
            "description": "全局唯一的一个消息 ID，方便用于关联和追踪。",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_exproto_schema.exproto_grpc_server": {
        "required": [
          "bind"
        ],
        "properties": {
          "bind": {
            "description": "服务监听地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "ssl_options": {
            "description": "服务 SSL 配置。",
            "$ref": "#/components/schemas/emqx_exproto_schema.ssl_server_opts"
          }
        },
        "type": "object"
      },
      "broker.listener_wss_opts": {
        "properties": {
          "cacertfile": {
            "default": "${EMQX_ETC_DIR}/certs/cacert.pem",
            "description": "受信任的PEM格式 CA  证书捆绑文件<br/><br/>此文件中的证书用于验证TLS对等方的证书。<br/>如果要信任新 CA，请将新证书附加到文件中。<br/>无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/><br/>注意：从文件中失效（删除）证书不会影响已建立的连接。",
            "type": "string"
          },
          "cacerts": {
            "default": false,
            "deprecated": true,
            "type": "boolean"
          },
          "certfile": {
            "default": "${EMQX_ETC_DIR}/certs/cert.pem",
            "description": "PEM格式证书链文件<br/><br/>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，<br/>然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。<br/>根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
            "type": "string"
          },
          "keyfile": {
            "default": "${EMQX_ETC_DIR}/certs/key.pem",
            "description": "PEM格式的私钥文件。",
            "type": "string"
          },
          "verify": {
            "default": "verify_none",
            "description": "启用或禁用对等验证。",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "type": "string"
          },
          "reuse_sessions": {
            "default": true,
            "description": "启用 TLS 会话重用。",
            "type": "boolean"
          },
          "depth": {
            "default": 10,
            "description": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。<br/>因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/><br/>如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/><br/>如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
            "minimum": 0,
            "type": "integer"
          },
          "password": {
            "description": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
            "example": "",
            "format": "password",
            "type": "string"
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "description": "支持所有TLS/DTLS版本<br/><br/>注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ciphers": {
            "default": [],
            "description": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。<br/><br/><br/>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。<br/>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。<br/><br/>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。<br/>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/><br/>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。<br/>不兼容的密码套件将被自动删除。<br/><br/>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。<br/><br/><br/><br/>注：PSK 的 Ciphers 不支持 tlsv1.3<br/><br/>如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。<br/><br/><br/><br/>PSK 密码套件：<br/><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "secure_renegotiate": {
            "default": true,
            "description": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。<br/>RFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
            "type": "boolean"
          },
          "log_level": {
            "default": "notice",
            "description": "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "type": "string"
          },
          "hibernate_after": {
            "default": "5s",
            "description": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
            "example": "12m",
            "type": "string"
          },
          "dhfile": {
            "description": "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/><br/>注意：TLS 1.3不支持<code>dhfile</code>选项。",
            "type": "string"
          },
          "fail_if_no_peer_cert": {
            "default": false,
            "description": "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。<br/>如果设置为true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。<br/>如果设置为false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
            "type": "boolean"
          },
          "honor_cipher_order": {
            "default": true,
            "description": "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
            "type": "boolean"
          },
          "client_renegotiation": {
            "default": true,
            "description": "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。<br/>这可能会成为拒绝服务攻击的载体。<br/>SSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。<br/>默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
            "type": "boolean"
          },
          "handshake_timeout": {
            "default": "15s",
            "description": "握手完成所允许的最长时间",
            "example": "12m",
            "type": "string"
          }
        },
        "type": "object"
      },
      "broker.sysmon_os": {
        "properties": {
          "cpu_check_interval": {
            "default": "60s",
            "description": "定期 CPU 检查的时间间隔。",
            "example": "12m",
            "type": "string"
          },
          "cpu_high_watermark": {
            "default": "80%",
            "description": "在发出相应警报之前可以使用多少系统 CPU 的阈值，以系统CPU负载的百分比表示。",
            "example": "12%",
            "type": "number"
          },
          "cpu_low_watermark": {
            "default": "60%",
            "description": "在解除相应警报之前可以使用多少系统 CPU 的阈值，以系统CPU负载的百分比表示。",
            "example": "12%",
            "type": "number"
          },
          "mem_check_interval": {
            "default": "disabled",
            "description": "定期内存检查的时间间隔。",
            "oneOf": [
              {
                "example": "12m",
                "type": "string"
              },
              {
                "enum": [
                  "disabled"
                ],
                "type": "string"
              }
            ]
          },
          "sysmem_high_watermark": {
            "default": "70%",
            "description": "在发出相应报警之前可以分配多少系统内存的阈值，以系统内存的百分比表示。",
            "example": "12%",
            "type": "number"
          },
          "procmem_high_watermark": {
            "default": "5%",
            "description": "在发出相应警报之前，一个Erlang进程可以分配多少系统内存的阈值，以系统内存的百分比表示。",
            "example": "12%",
            "type": "number"
          }
        },
        "type": "object"
      },
      "rule_engine.builtin_action_republish": {
        "properties": {
          "function": {
            "description": "将消息重新发布为新的 MQTT 消息",
            "enum": [
              "republish"
            ],
            "type": "string"
          },
          "args": {
            "default": {},
            "$ref": "#/components/schemas/rule_engine.republish_args"
          }
        },
        "type": "object"
      },
      "emqx_authn_schema.metrics": {
        "properties": {
          "nomatch": {
            "description": "在当前实例中没有找到需要的认证信息，实例被忽略的次数。",
            "type": "integer"
          },
          "total": {
            "description": "当前实例被触发的总次数。",
            "type": "integer"
          },
          "success": {
            "description": "在当前实例中找到需要的认证信息，并且实例返回认证成功的次数。",
            "type": "integer"
          },
          "failed": {
            "description": "在当前实例中找到需要的认证信息，并且实例返回认证失败的次数。",
            "type": "integer"
          },
          "rate": {
            "description": "实例被触发的速率。触发速率等于匹配速率 + 忽略速率，单位：次/秒。",
            "type": "number"
          },
          "rate_max": {
            "description": "实例曾经达到的最高触发速率，单位：次/秒。",
            "type": "number"
          },
          "rate_last5m": {
            "description": "实例5分钟内平均触发速率，单位：次/秒。",
            "type": "number"
          }
        },
        "type": "object"
      },
      "broker.sysmon": {
        "properties": {
          "vm": {
            "$ref": "#/components/schemas/broker.sysmon_vm"
          },
          "os": {
            "$ref": "#/components/schemas/broker.sysmon_os"
          }
        },
        "type": "object"
      },
      "dashboard.http": {
        "properties": {
          "bind": {
            "default": 0,
            "description": "监听地址和端口，热更新此配置时，会重启 Dashboard 服务。",
            "example": "0.0.0.0:18083",
            "type": "string"
          },
          "num_acceptors": {
            "default": 8,
            "description": "TCP协议的Socket acceptor池大小, 默认设置在线的调度器数量（通常为 CPU 核数）",
            "type": "integer"
          },
          "max_connections": {
            "default": 512,
            "description": "同时处理的最大连接数。",
            "type": "integer"
          },
          "backlog": {
            "default": 1024,
            "description": "排队等待连接的队列的最大长度。",
            "type": "integer"
          },
          "send_timeout": {
            "default": "10s",
            "description": "Socket发送超时时间。",
            "example": "12m",
            "type": "string"
          },
          "inet6": {
            "default": false,
            "description": "启用IPv6， 如果机器不支持IPv6，请关闭此选项，否则会导致 Dashboard 无法使用。",
            "type": "boolean"
          },
          "ipv6_v6only": {
            "default": false,
            "description": "当开启 inet6 功能的同时禁用 IPv4-to-IPv6 映射。该配置仅在 inet6 功能开启时有效。",
            "type": "boolean"
          },
          "proxy_header": {
            "default": false,
            "description": "开启对  `HAProxy` 的支持，注意：一旦开启了这个功能，就无法再处理普通的 HTTP 请求了。",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.update_exproto": {
        "required": [
          "handler",
          "server"
        ],
        "properties": {
          "server": {
            "description": "配置 ExProto 网关需要启动的 <code>ConnectionAdapter</code> 服务。<br/>该服务用于提供客户端的认证、发布、订阅和数据下行等功能。",
            "$ref": "#/components/schemas/emqx_exproto_schema.exproto_grpc_server"
          },
          "handler": {
            "description": "配置 ExProto 网关需要请求的 <code>ConnectionHandler</code> 服务地址。<br/>该服务用于给 ExProto 提供客户端的 Socket 事件处理、字节解码、订阅消息接收等功能。",
            "$ref": "#/components/schemas/emqx_exproto_schema.exproto_grpc_handler"
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "是否启用该网关",
            "type": "boolean"
          },
          "enable_stats": {
            "default": true,
            "description": "是否开启客户端统计",
            "type": "boolean"
          },
          "idle_timeout": {
            "default": "30s",
            "description": "客户端连接过程的空闲时间。该配置用于：<br/>  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。<br/>  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
            "example": "12m",
            "type": "string"
          },
          "clientinfo_override": {
            "description": "ClientInfo 重写。",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          }
        },
        "type": "object"
      },
      "emqx_authn_api.request_user_create": {
        "required": [
          "password",
          "user_id"
        ],
        "properties": {
          "user_id": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "is_superuser": {
            "default": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.update_mqttsn": {
        "required": [
          "gateway_id"
        ],
        "properties": {
          "gateway_id": {
            "default": 1,
            "description": "MQTT-SN 网关 ID。<br/>当 <code>broadcast</code> 打开时，MQTT-SN 网关会使用该 ID 来广播 ADVERTISE 消息",
            "type": "integer"
          },
          "broadcast": {
            "default": false,
            "description": "是否周期性广播 ADVERTISE 消息",
            "type": "boolean"
          },
          "enable_qos3": {
            "default": true,
            "description": "是否允许无连接的客户端发送 QoS 等于 -1 的消息。<br/>该功能主要用于支持轻量的 MQTT-SN 客户端实现，它不会向网关建立连接，注册主题，也不会发起订阅；它只使用 QoS 为 -1 来发布消息",
            "type": "boolean"
          },
          "subs_resume": {
            "default": false,
            "description": "在会话被重用后，网关是否主动向客户端注册对已订阅主题名称",
            "type": "boolean"
          },
          "predefined": {
            "default": [],
            "description": "预定义主题列表。<br/>预定义的主题列表，是一组 主题 ID 和 主题名称 的映射关系。使用预先定义的主题列表，可以减少 MQTT-SN 客户端和网关对于固定主题的注册请求",
            "items": {
              "$ref": "#/components/schemas/emqx_mqttsn_schema.mqttsn_predefined"
            },
            "type": "array"
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "是否启用该网关",
            "type": "boolean"
          },
          "enable_stats": {
            "default": true,
            "description": "是否开启客户端统计",
            "type": "boolean"
          },
          "idle_timeout": {
            "default": "30s",
            "description": "客户端连接过程的空闲时间。该配置用于：<br/>  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。<br/>  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
            "example": "12m",
            "type": "string"
          },
          "clientinfo_override": {
            "description": "ClientInfo 重写。",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          }
        },
        "type": "object"
      },
      "authn-hash.simple": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Simple password hashing algorithm.",
            "enum": [
              "plain",
              "md5",
              "sha",
              "sha256",
              "sha512"
            ],
            "type": "string"
          },
          "salt_position": {
            "default": "prefix",
            "description": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
            "enum": [
              "disable",
              "prefix",
              "suffix"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.stomp": {
        "properties": {
          "name": {
            "description": "网关名称",
            "enum": [
              "stomp"
            ],
            "type": "string"
          },
          "frame": {
            "$ref": "#/components/schemas/emqx_stomp_schema.stomp_frame"
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "是否启用该网关",
            "type": "boolean"
          },
          "enable_stats": {
            "default": true,
            "description": "是否开启客户端统计",
            "type": "boolean"
          },
          "idle_timeout": {
            "default": "30s",
            "description": "客户端连接过程的空闲时间。该配置用于：<br/>  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。<br/>  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
            "example": "12m",
            "type": "string"
          },
          "clientinfo_override": {
            "description": "ClientInfo 重写。",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          },
          "listeners": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                }
              ]
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_mnesia.rules_for_username": {
        "required": [
          "username"
        ],
        "properties": {
          "rules": {
            "items": {
              "$ref": "#/components/schemas/emqx_authz_api_mnesia.rule_item"
            },
            "type": "array"
          },
          "username": {
            "description": "用户名",
            "example": "user1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "opentelemetry.exporter": {
        "required": [
          "interval"
        ],
        "properties": {
          "endpoint": {
            "default": "http://localhost:4317",
            "description": "Open Telemetry Exporter Endpoint",
            "example": "http://127.0.0.1",
            "type": "string"
          },
          "interval": {
            "default": "10s",
            "description": "The interval of sending metrics to Open Telemetry Endpoint",
            "example": "32s",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_clients.exproto_client": {
        "properties": {
          "node": {
            "description": "客户端连接到的节点名称",
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "username": {
            "description": "客户端连接的用户名",
            "type": "string"
          },
          "mountpoint": {
            "description": "主题固定前缀",
            "type": "string"
          },
          "proto_name": {
            "description": "客户端使用的协议名称",
            "type": "string"
          },
          "proto_ver": {
            "description": "客户端使用的协议版本",
            "type": "string"
          },
          "ip_address": {
            "description": "客户端 IP 地址",
            "type": "string"
          },
          "port": {
            "description": "客户端端口",
            "type": "integer"
          },
          "is_bridge": {
            "description": "标识客户端是否通过 is_bridge 标志连接",
            "type": "boolean"
          },
          "connected_at": {
            "description": "客户端连接时间",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "disconnected_at": {
            "description": "客户端连接断开时间",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "connected": {
            "description": "标识客户端是否已连接到网关",
            "type": "boolean"
          },
          "keepalive": {
            "description": "Keepalive 时间，单位：秒",
            "type": "integer"
          },
          "clean_start": {
            "description": "标识客户端是否以 clean_start 的标志连接到网关",
            "type": "boolean"
          },
          "expiry_interval": {
            "description": "会话超期时间，单位：秒",
            "type": "integer"
          },
          "created_at": {
            "description": "会话创建时间",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "subscriptions_cnt": {
            "description": "客户端已订阅主题数",
            "type": "integer"
          },
          "subscriptions_max": {
            "description": "客户端允许订阅的最大主题数",
            "type": "integer"
          },
          "inflight_cnt": {
            "description": "客户端当前飞行窗口大小",
            "type": "integer"
          },
          "inflight_max": {
            "description": "客户端允许的飞行窗口最大值",
            "type": "integer"
          },
          "mqueue_len": {
            "description": "客户端当前消息队列长度",
            "type": "integer"
          },
          "mqueue_max": {
            "description": "客户端允许的最大消息队列长度",
            "type": "integer"
          },
          "mqueue_dropped": {
            "description": "由于消息队列过程，客户端消息队列丢弃消息条数",
            "type": "integer"
          },
          "awaiting_rel_cnt": {
            "description": "客户端当前等待 PUBREL 确认的 PUBREC 消息的条数",
            "type": "integer"
          },
          "awaiting_rel_max": {
            "description": "客户端允许的最大 PUBREC 等待队列长度",
            "type": "integer"
          },
          "recv_oct": {
            "description": "已接收的字节数",
            "type": "integer"
          },
          "recv_cnt": {
            "description": "已接收 Socket 报文次数",
            "type": "integer"
          },
          "recv_pkt": {
            "description": "已接收应用层协议控制报文数",
            "type": "integer"
          },
          "recv_msg": {
            "description": "已接收上行的消息条数",
            "type": "integer"
          },
          "send_oct": {
            "description": "已发送字节数",
            "type": "integer"
          },
          "send_cnt": {
            "description": "已发送 Socket 报文次数",
            "type": "integer"
          },
          "send_pkt": {
            "description": "已发送应用层协议控制报文数",
            "type": "integer"
          },
          "send_msg": {
            "description": "已发送下行消息数条数",
            "type": "integer"
          },
          "mailbox_len": {
            "description": "进程邮箱大小",
            "type": "integer"
          },
          "heap_size": {
            "description": "进程堆内存大小，单位：字节",
            "type": "integer"
          },
          "reductions": {
            "description": "进程已消耗 Reduction 数",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_lwm2m_schema.translator": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "description": "主题名称",
            "type": "string"
          },
          "qos": {
            "default": 0,
            "description": "QoS 等级",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "connector-mqtt.ingress": {
        "properties": {
          "pool_size": {
            "default": 8,
            "description": "Size of the pool of MQTT clients that will ingest messages from the remote broker.<br/><br/>This value will be respected only if 'remote.topic' is a shared subscription topic or topic-filter<br/>(for example `$share/name1/topic1` or `$share/name2/topic2/#`), otherwise only a single MQTT client will be used.<br/>Each MQTT client will be assigned 'clientid' of the form '${clientid_prefix}:${bridge_name}:ingress:${node}:${n}'<br/>where 'n' is the number of a client inside the pool.<br/>NOTE: Non-shared subscription will not work well when EMQX is clustered.",
            "minimum": 1,
            "type": "integer"
          },
          "remote": {
            "description": "The configs about subscribing to the remote broker.",
            "$ref": "#/components/schemas/connector-mqtt.ingress_remote"
          },
          "local": {
            "description": "The configs about sending message to the local broker.",
            "$ref": "#/components/schemas/connector-mqtt.ingress_local"
          }
        },
        "type": "object"
      },
      "connector-mqtt.egress_local": {
        "properties": {
          "topic": {
            "description": "The local topic to be forwarded to the remote broker",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_schema.mongo_sharded": {
        "required": [
          "collection",
          "database",
          "servers",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源。",
            "type": "boolean"
          },
          "type": {
            "default": "mongodb",
            "description": "数据后端类型。",
            "enum": [
              "mongodb"
            ],
            "type": "string"
          },
          "collection": {
            "description": "`MongoDB` 授权数据集。",
            "type": "string"
          },
          "filter": {
            "default": {},
            "description": "在查询中定义过滤条件的条件表达式。<br/>过滤器支持如下占位符：<br/>- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名<br/>- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符",
            "example": {},
            "type": "object"
          },
          "mongo_type": {
            "default": "sharded",
            "description": "Sharded cluster模式。当 MongoDB 服务运行在 sharded 模式下，该配置必须设置为 'sharded'。",
            "enum": [
              "sharded"
            ],
            "type": "string"
          },
          "servers": {
            "description": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`<br/>每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机名具有以下形式：`Host[:Port]`。<br/>如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
            "type": "string"
          },
          "w_mode": {
            "default": "unsafe",
            "description": "写模式。",
            "enum": [
              "unsafe",
              "safe"
            ],
            "type": "string"
          },
          "srv_record": {
            "default": false,
            "description": "使用 DNS SRV 记录。",
            "type": "boolean"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "username": {
            "description": "内部数据库的用户名。",
            "type": "string"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported.",
            "enum": [
              "auto",
              true,
              false
            ],
            "type": "string"
          },
          "auth_source": {
            "description": "与用户证书关联的数据库名称。",
            "type": "string"
          },
          "database": {
            "description": "数据库名字。",
            "type": "string"
          },
          "topology": {
            "$ref": "#/components/schemas/emqx_mongodb.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "authn.builtin_db": {
        "required": [
          "backend",
          "mechanism",
          "user_id_type"
        ],
        "properties": {
          "mechanism": {
            "description": "认证机制。",
            "enum": [
              "password_based"
            ],
            "type": "string"
          },
          "backend": {
            "description": "后端类型。",
            "enum": [
              "built_in_database"
            ],
            "type": "string"
          },
          "user_id_type": {
            "default": "username",
            "description": "指定使用客户端ID `clientid` 还是用户名 `username` 进行认证。",
            "enum": [
              "clientid",
              "username"
            ],
            "type": "string"
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash creation and verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn-hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn-hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn-hash.bcrypt_rw"
              }
            ]
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "listeners.wss_required_bind": {
        "required": [
          "bind",
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "wss"
            ],
            "type": "string"
          },
          "running": {
            "description": "Listener status",
            "type": "boolean"
          },
          "id": {
            "description": "Listener id",
            "type": "string"
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          },
          "enable": {
            "default": true,
            "description": "启停监听器。",
            "type": "boolean"
          },
          "bind": {
            "default": 8084,
            "description": "监听套接字的 IP 地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "acceptors": {
            "default": 16,
            "description": "监听器接收池的大小。",
            "minimum": 1,
            "type": "integer"
          },
          "max_connections": {
            "default": "infinity",
            "description": "监听器允许的最大并发连接数。",
            "oneOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。<br/><br/>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。<br/><br/>例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/><br/>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/><br/><br/>设置为<code>\"\"</code> 以禁用该功能<br/><br/><br/>mountpoint 字符串中的变量：<br/>- <code>${clientid}</code>: clientid<br/>- <code>${username}</code>: username",
            "type": "string"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。<br/>配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。<br/>配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名<br/>客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "type": "string"
          },
          "max_conn_rate": {
            "description": "Maximum connection rate.<br/><br/>This is used to limit the connection rate for this listener,<br/>once the limit is reached, new connections will be deferred or refused",
            "example": "1000/s",
            "type": "string"
          },
          "messages_rate": {
            "description": "Messages publish rate.<br/><br/>This is used to limit the inbound message numbers for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "1000/s",
            "type": "string"
          },
          "bytes_rate": {
            "description": "Data publish rate.<br/><br/>This is used to limit the inbound bytes rate for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "100MB/s",
            "type": "string"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "description": "此监听器的访问控制规则。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "proxy_protocol": {
            "default": false,
            "description": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/><br/>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "description": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
            "example": "12m",
            "type": "string"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/broker.tcp_opts"
          },
          "ssl_options": {
            "$ref": "#/components/schemas/broker.listener_wss_opts"
          },
          "websocket": {
            "$ref": "#/components/schemas/broker.ws_opts"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_schema.built_in_database": {
        "required": [
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源。",
            "type": "boolean"
          },
          "type": {
            "default": "built_in_database",
            "description": "数据后端类型。",
            "enum": [
              "built_in_database"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "cluster.core_replicants": {
        "properties": {
          "core_node": {
            "description": "Core node name",
            "example": "emqx-core@127.0.0.1",
            "type": "string"
          },
          "replicant_nodes": {
            "items": {
              "$ref": "#/components/schemas/cluster.replicant_info"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_stats.node_stats_data": {
        "properties": {
          "channels.count": {
            "description": "sessions.count",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "channels.max": {
            "description": "session.max",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "connections.count": {
            "description": "Number of current connections",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "connections.max": {
            "description": "Historical maximum number of connections",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "delayed.count": {
            "description": "Number of delayed messages",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "delayed.max": {
            "description": "Historical maximum number of delayed messages",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "live_connections.count": {
            "description": "Number of current live connections",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "live_connections.max": {
            "description": "Historical maximum number of live connections",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "retained.count": {
            "description": "Number of currently retained messages",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "retained.max": {
            "description": "Historical maximum number of retained messages",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "sessions.count": {
            "description": "Number of current sessions",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "sessions.max": {
            "description": "Historical maximum number of sessions",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "suboptions.count": {
            "description": "subscriptions.count",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "suboptions.max": {
            "description": "subscriptions.max",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "subscribers.count": {
            "description": "Number of current subscribers",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "subscribers.max": {
            "description": "Historical maximum number of subscribers",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "subscriptions.count": {
            "description": "Number of current subscriptions, including shared subscriptions",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "subscriptions.max": {
            "description": "Historical maximum number of subscriptions",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "subscriptions.shared.count": {
            "description": "Number of current shared subscriptions",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "subscriptions.shared.max": {
            "description": "Historical maximum number of shared subscriptions",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "topics.count": {
            "description": "Number of current topics",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "topics.max": {
            "description": "Historical maximum number of topics",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.rule_info": {
        "required": [
          "id",
          "sql"
        ],
        "properties": {
          "id": {
            "description": "规则的 ID",
            "example": "293fb66f",
            "type": "string"
          },
          "from": {
            "description": "规则指定的主题",
            "example": "t/#",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "created_at": {
            "description": "规则创建时间",
            "example": "2021-12-01T15:00:43.153+08:00",
            "type": "string"
          },
          "name": {
            "default": "",
            "description": "规则名字",
            "example": "foo",
            "type": "string"
          },
          "sql": {
            "description": "用于处理消息的 SQL 。<br/>示例：<code>SELECT * FROM \"test/topic\" WHERE payload.x = 1</code>",
            "example": "SELECT * FROM \"test/topic\" WHERE payload.x = 1",
            "type": "string"
          },
          "actions": {
            "default": [],
            "description": "规则的动作列表。<br/>动作可以是指向 EMQX bridge 的引用，也可以是一个指向函数的对象。<br/>我们支持一些内置函数，如“republish”和“console”，我们还支持用户提供的函数，它的格式为：“{module}:{function}”。<br/>列表中的动作按顺序执行。这意味着如果其中一个动作执行缓慢，则以下所有动作都不会被执行直到它返回。<br/>如果其中一个动作崩溃，在它之后的所有动作仍然会被按照原始顺序执行。<br/>如果运行动作时出现任何错误，则会出现错误消息，并且相应的计数器会增加。",
            "example": [
              "webhook:my_webhook",
              {
                "args": {
                  "payload": "${payload}",
                  "topic": "t/1"
                },
                "function": "republish"
              },
              {
                "function": "console"
              }
            ],
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/rule_engine.user_provided_function"
                },
                {
                  "$ref": "#/components/schemas/rule_engine.builtin_action_console"
                },
                {
                  "$ref": "#/components/schemas/rule_engine.builtin_action_republish"
                },
                {
                  "type": "string"
                }
              ]
            },
            "type": "array"
          },
          "enable": {
            "default": true,
            "description": "启用或禁用规则引擎",
            "type": "boolean"
          },
          "description": {
            "default": "",
            "description": "规则的描述",
            "example": "Some description",
            "type": "string"
          },
          "metadata": {
            "description": "规则的元数据，不要手动修改",
            "example": {},
            "type": "object"
          }
        },
        "type": "object"
      },
      "rule_engine.republish_args": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "description": "重新发布消息的目标主题。<br/>允许使用带有变量的模板，请参阅“republish_args”的描述。",
            "example": "a/1",
            "type": "string"
          },
          "qos": {
            "default": "${qos}",
            "description": "要重新发布的消息的 qos。允许使用带有变量的模板，请参阅“republish_args”的描述。<br/>默认为 ${qos}。 如果从规则的选择结果中没有找到变量 ${qos}，则使用 0。",
            "example": "${qos}",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "example": 0,
                "maximum": 2,
                "minimum": 0,
                "type": "integer"
              }
            ]
          },
          "retain": {
            "default": "${retain}",
            "description": "要重新发布的消息的“保留”标志。允许使用带有变量的模板，请参阅“republish_args”的描述。<br/>默认为 ${retain}。 如果从所选结果中未找到变量 ${retain}，则使用 false。",
            "example": "${retain}",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "payload": {
            "default": "${payload}",
            "description": "要重新发布的消息的有效负载。允许使用带有变量的模板，请参阅“republish_args”的描述。<br/>默认为 ${payload}。 如果从所选结果中未找到变量 ${payload}，则使用字符串 \"undefined\"。",
            "example": "${payload}",
            "type": "string"
          },
          "user_properties": {
            "default": "${user_properties}",
            "description": "指定使用哪个变量来填充 MQTT 消息的 User-Property 列表。这个变量的值必须是一个 map 类型。<br/>可以设置成 <code>${pub_props.'User-Property'}</code> 或者<br/>使用 <code>SELECT *,pub_props.'User-Property' as user_properties</code> 来把源 MQTT 消息<br/>的 User-Property 列表用于填充。<br/>也可以使用 <code>map_put</code> 函数来添加新的 User-Property，<br/><code>map_put('my-prop-name', 'my-prop-value', user_properties) as user_properties</code><br/>注意：MQTT 协议允许一个消息中出现多次同一个 property 名，但是 EMQX 的规则引擎不允许。",
            "example": "${pub_props.'User-Property'}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "authz.node_metrics": {
        "properties": {
          "node": {
            "description": "节点名称。",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "metrics": {
            "description": "资源统计指标。",
            "$ref": "#/components/schemas/authz.metrics"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.metrics": {
        "properties": {
          "matched": {
            "description": "SQL 的 FROM 子句匹配的次数。",
            "minimum": 0,
            "type": "integer"
          },
          "matched.rate": {
            "description": "命中速率，次/秒",
            "type": "number"
          },
          "matched.rate.max": {
            "description": "最大命中速率，次/秒",
            "type": "number"
          },
          "matched.rate.last5m": {
            "description": "5分钟平均命中速率，次/秒",
            "type": "number"
          },
          "passed": {
            "description": "SQL 通过的次数",
            "minimum": 0,
            "type": "integer"
          },
          "failed": {
            "description": "SQL 失败的次数",
            "minimum": 0,
            "type": "integer"
          },
          "failed.exception": {
            "description": "SQL 由于执行异常而失败的次数。 这可能是因为调用 SQL 函数时崩溃，或者试图对未定义的变量进行算术运算",
            "minimum": 0,
            "type": "integer"
          },
          "failed.unknown": {
            "description": "由于未知错误导致 SQL 失败的次数。",
            "minimum": 0,
            "type": "integer"
          },
          "actions.total": {
            "description": "规则调用输出的次数。 该值可能是“sql.matched”的几倍，具体取决于规则输出的数量。",
            "minimum": 0,
            "type": "integer"
          },
          "actions.success": {
            "description": "规则成功调用输出的次数。",
            "minimum": 0,
            "type": "integer"
          },
          "actions.failed": {
            "description": "规则调用输出失败的次数。",
            "minimum": 0,
            "type": "integer"
          },
          "actions.failed.out_of_service": {
            "description": "由于输出停止服务而导致规则调用输出失败的次数。 例如，桥接被禁用或停止。",
            "minimum": 0,
            "type": "integer"
          },
          "actions.failed.unknown": {
            "description": "由于未知错误，规则调用输出失败的次数。",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "authn.mysql": {
        "required": [
          "backend",
          "database",
          "mechanism",
          "query",
          "server"
        ],
        "properties": {
          "mechanism": {
            "description": "认证机制。",
            "enum": [
              "password_based"
            ],
            "type": "string"
          },
          "backend": {
            "description": "后端类型。",
            "enum": [
              "mysql"
            ],
            "type": "string"
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn-hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn-hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn-hash.bcrypt"
              }
            ]
          },
          "query": {
            "description": "用于查询密码散列等用于认证的数据的 SQL 语句。",
            "type": "string"
          },
          "query_timeout": {
            "default": "5s",
            "description": "SQL 查询的超时时间。",
            "example": "32s",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
            "type": "boolean"
          },
          "server": {
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MySQL default port 3306 is used if `[:Port]` is not specified.",
            "type": "string"
          },
          "database": {
            "description": "数据库名字。",
            "type": "string"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "username": {
            "default": "root",
            "description": "内部数据库的用户名。",
            "type": "string"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "auto_reconnect": {
            "default": true,
            "deprecated": true,
            "description": "已弃用。自动重连数据库。",
            "type": "boolean"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge.metrics": {
        "properties": {
          "dropped": {
            "description": "被丢弃的消息个数。",
            "type": "integer"
          },
          "dropped.other": {
            "description": "因为其他原因被丢弃的消息个数。",
            "type": "integer"
          },
          "dropped.queue_full": {
            "description": "因为队列已满被丢弃的消息个数。",
            "type": "integer"
          },
          "dropped.resource_not_found": {
            "description": "因为资源不存在被丢弃的消息个数。",
            "type": "integer"
          },
          "dropped.resource_stopped": {
            "description": "因为资源已停用被丢弃的消息个数。",
            "type": "integer"
          },
          "matched": {
            "description": "Bridge 被匹配到（被请求）的次数。",
            "type": "integer"
          },
          "queuing": {
            "description": "当前被缓存到磁盘队列的消息个数。",
            "type": "integer"
          },
          "retried": {
            "description": "重试的次数。",
            "type": "integer"
          },
          "failed": {
            "description": "发送失败的消息个数。",
            "type": "integer"
          },
          "inflight": {
            "description": "已异步地发送但没有收到 ACK 的消息个数。",
            "type": "integer"
          },
          "success": {
            "description": "已经发送成功的消息个数。",
            "type": "integer"
          },
          "rate": {
            "description": "执行操作的速率，次/秒",
            "type": "number"
          },
          "rate_max": {
            "description": "执行操作的最大速率，次/秒",
            "type": "number"
          },
          "rate_last5m": {
            "description": "5 分钟平均速率，次/秒",
            "type": "number"
          },
          "received": {
            "description": "从远程系统收到的消息个数。",
            "type": "number"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.ctx_acked": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "description": "事件类型",
            "enum": [
              "message_acked"
            ],
            "type": "string"
          },
          "id": {
            "description": "消息 ID",
            "type": "string"
          },
          "from_clientid": {
            "description": "事件来源客户端的 ID",
            "type": "string"
          },
          "from_username": {
            "description": "事件来源客户端的用户名",
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "username": {
            "description": "用户名",
            "type": "string"
          },
          "payload": {
            "description": "消息负载",
            "type": "string"
          },
          "peerhost": {
            "description": "对等客户端的 IP 地址",
            "type": "string"
          },
          "topic": {
            "description": "消息主题",
            "type": "string"
          },
          "publish_received_at": {
            "description": "消息被接受的时间",
            "type": "integer"
          },
          "qos": {
            "description": "消息的 QoS",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "dashboard.error_code": {
        "properties": {
          "code": {
            "description": "Code Name",
            "type": "string"
          },
          "description": {
            "description": "Description",
            "type": "string"
          }
        },
        "type": "object"
      },
      "listeners.wss_not_required_bind": {
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "wss"
            ],
            "type": "string"
          },
          "running": {
            "description": "Listener status",
            "type": "boolean"
          },
          "id": {
            "description": "Listener id",
            "type": "string"
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          },
          "bind": {
            "default": 8084,
            "description": "监听套接字的 IP 地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "启停监听器。",
            "type": "boolean"
          },
          "acceptors": {
            "default": 16,
            "description": "监听器接收池的大小。",
            "minimum": 1,
            "type": "integer"
          },
          "max_connections": {
            "default": "infinity",
            "description": "监听器允许的最大并发连接数。",
            "oneOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。<br/><br/>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。<br/><br/>例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/><br/>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/><br/><br/>设置为<code>\"\"</code> 以禁用该功能<br/><br/><br/>mountpoint 字符串中的变量：<br/>- <code>${clientid}</code>: clientid<br/>- <code>${username}</code>: username",
            "type": "string"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。<br/>配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。<br/>配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名<br/>客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "type": "string"
          },
          "max_conn_rate": {
            "description": "Maximum connection rate.<br/><br/>This is used to limit the connection rate for this listener,<br/>once the limit is reached, new connections will be deferred or refused",
            "example": "1000/s",
            "type": "string"
          },
          "messages_rate": {
            "description": "Messages publish rate.<br/><br/>This is used to limit the inbound message numbers for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "1000/s",
            "type": "string"
          },
          "bytes_rate": {
            "description": "Data publish rate.<br/><br/>This is used to limit the inbound bytes rate for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "100MB/s",
            "type": "string"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "description": "此监听器的访问控制规则。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "proxy_protocol": {
            "default": false,
            "description": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/><br/>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "description": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
            "example": "12m",
            "type": "string"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/broker.tcp_opts"
          },
          "ssl_options": {
            "$ref": "#/components/schemas/broker.listener_wss_opts"
          },
          "websocket": {
            "$ref": "#/components/schemas/broker.ws_opts"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_schema.postgresql": {
        "required": [
          "database",
          "query",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源。",
            "type": "boolean"
          },
          "type": {
            "default": "postgresql",
            "description": "数据后端类型。",
            "enum": [
              "postgresql"
            ],
            "type": "string"
          },
          "query": {
            "description": "访问控制数据查询语句。",
            "type": "string"
          },
          "server": {
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 PostgreSQL 默认端口 5432。",
            "type": "string"
          },
          "database": {
            "description": "数据库名字。",
            "type": "string"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "username": {
            "description": "内部数据库的用户名。",
            "type": "string"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "auto_reconnect": {
            "default": true,
            "deprecated": true,
            "description": "已弃用。自动重连数据库。",
            "type": "boolean"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_metrics.aggregated_metrics": {
        "properties": {
          "actions.failure": {
            "description": "Number of failure executions of the rule engine action",
            "minimum": 0,
            "type": "integer"
          },
          "actions.success": {
            "description": "Number of successful executions of the rule engine action",
            "minimum": 0,
            "type": "integer"
          },
          "bytes.received": {
            "description": "Number of bytes received ",
            "minimum": 0,
            "type": "integer"
          },
          "bytes.sent": {
            "description": "Number of bytes sent on this connection",
            "minimum": 0,
            "type": "integer"
          },
          "client.auth.anonymous": {
            "description": "Number of clients who log in anonymously",
            "minimum": 0,
            "type": "integer"
          },
          "client.authenticate": {
            "description": "Number of client authentications",
            "minimum": 0,
            "type": "integer"
          },
          "client.check_authz": {
            "description": "Number of Authorization rule checks",
            "minimum": 0,
            "type": "integer"
          },
          "client.connack": {
            "description": "Number of CONNACK packet sent",
            "minimum": 0,
            "type": "integer"
          },
          "client.connect": {
            "description": "Number of client connections",
            "minimum": 0,
            "type": "integer"
          },
          "client.connected": {
            "description": "Number of successful client connections",
            "minimum": 0,
            "type": "integer"
          },
          "client.disconnected": {
            "description": "Number of client disconnects",
            "minimum": 0,
            "type": "integer"
          },
          "client.subscribe": {
            "description": "Number of client subscriptions",
            "minimum": 0,
            "type": "integer"
          },
          "client.unsubscribe": {
            "description": "Number of client unsubscriptions",
            "minimum": 0,
            "type": "integer"
          },
          "delivery.dropped": {
            "description": "Total number of discarded messages when sending",
            "minimum": 0,
            "type": "integer"
          },
          "delivery.dropped.expired": {
            "description": "Number of messages dropped due to message expiration on sending",
            "minimum": 0,
            "type": "integer"
          },
          "delivery.dropped.no_local": {
            "description": "Number of messages that were dropped due to the No Local subscription option when sending",
            "minimum": 0,
            "type": "integer"
          },
          "delivery.dropped.qos0_msg": {
            "description": "Number of messages with QoS 0 that were dropped because the message queue was full when sending",
            "minimum": 0,
            "type": "integer"
          },
          "delivery.dropped.queue_full": {
            "description": "Number of messages with a non-zero QoS that were dropped because the message queue was full when sending",
            "minimum": 0,
            "type": "integer"
          },
          "delivery.dropped.too_large": {
            "description": "The number of messages that were dropped because the length exceeded the limit when sending",
            "minimum": 0,
            "type": "integer"
          },
          "messages.acked": {
            "description": "Number of received PUBACK and PUBREC packet",
            "minimum": 0,
            "type": "integer"
          },
          "messages.delayed": {
            "description": "Number of delay-published messages",
            "minimum": 0,
            "type": "integer"
          },
          "messages.delivered": {
            "description": "Number of messages forwarded to the subscription process internally",
            "minimum": 0,
            "type": "integer"
          },
          "messages.dropped": {
            "description": "Total number of messages dropped before forwarding to the subscription process",
            "minimum": 0,
            "type": "integer"
          },
          "messages.dropped.await_pubrel_timeout": {
            "description": "Number of messages dropped due to waiting PUBREL timeout",
            "minimum": 0,
            "type": "integer"
          },
          "messages.dropped.no_subscribers": {
            "description": "Number of messages dropped due to no subscribers",
            "minimum": 0,
            "type": "integer"
          },
          "messages.forward": {
            "description": "Number of messages forwarded to other nodes",
            "minimum": 0,
            "type": "integer"
          },
          "messages.publish": {
            "description": "Number of messages published in addition to system messages",
            "minimum": 0,
            "type": "integer"
          },
          "messages.qos0.received": {
            "description": "Number of QoS 0 messages received from clients",
            "minimum": 0,
            "type": "integer"
          },
          "messages.qos0.sent": {
            "description": "Number of QoS 0 messages sent to clients",
            "minimum": 0,
            "type": "integer"
          },
          "messages.qos1.received": {
            "description": "Number of QoS 1 messages received from clients",
            "minimum": 0,
            "type": "integer"
          },
          "messages.qos1.sent": {
            "description": "Number of QoS 1 messages sent to clients",
            "minimum": 0,
            "type": "integer"
          },
          "messages.qos2.received": {
            "description": "Number of QoS 2 messages received from clients",
            "minimum": 0,
            "type": "integer"
          },
          "messages.qos2.sent": {
            "description": "Number of QoS 2 messages sent to clients",
            "minimum": 0,
            "type": "integer"
          },
          "messages.received": {
            "description": "Number of messages received from the client, equal to the sum of messages.qos0.received\fmessages.qos1.received and messages.qos2.received",
            "minimum": 0,
            "type": "integer"
          },
          "messages.retained": {
            "description": "Number of retained messages",
            "minimum": 0,
            "type": "integer"
          },
          "messages.sent": {
            "description": "Number of messages sent to the client, equal to the sum of messages.qos0.sent\fmessages.qos1.sent and messages.qos2.sent",
            "minimum": 0,
            "type": "integer"
          },
          "packets.auth.received": {
            "description": "Number of received AUTH packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.auth.sent": {
            "description": "Number of sent AUTH packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.connack.auth_error": {
            "description": "Number of received CONNECT packet with failed authentication",
            "minimum": 0,
            "type": "integer"
          },
          "packets.connack.error": {
            "description": "Number of received CONNECT packet with unsuccessful connections",
            "minimum": 0,
            "type": "integer"
          },
          "packets.connack.sent": {
            "description": "Number of sent CONNACK packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.connect.received": {
            "description": "Number of received CONNECT packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.disconnect.received": {
            "description": "Number of received DISCONNECT packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.disconnect.sent": {
            "description": "Number of sent DISCONNECT packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pingreq.received": {
            "description": "Number of received PINGREQ packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pingresp.sent": {
            "description": "Number of sent PUBRESP packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.puback.inuse": {
            "description": "Number of received PUBACK packet with occupied identifiers",
            "minimum": 0,
            "type": "integer"
          },
          "packets.puback.missed": {
            "description": "Number of received packet with identifiers.",
            "minimum": 0,
            "type": "integer"
          },
          "packets.puback.received": {
            "description": "Number of received PUBACK packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.puback.sent": {
            "description": "Number of sent PUBACK packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubcomp.inuse": {
            "description": "Number of received PUBCOMP packet with occupied identifiers",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubcomp.missed": {
            "description": "Number of missed PUBCOMP packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubcomp.received": {
            "description": "Number of received PUBCOMP packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubcomp.sent": {
            "description": "Number of sent PUBCOMP packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.publish.auth_error": {
            "description": "Number of received PUBLISH packets with failed the Authorization check",
            "minimum": 0,
            "type": "integer"
          },
          "packets.publish.dropped": {
            "description": "Number of messages discarded due to the receiving limit",
            "minimum": 0,
            "type": "integer"
          },
          "packets.publish.error": {
            "description": "Number of received PUBLISH packet that cannot be published",
            "minimum": 0,
            "type": "integer"
          },
          "packets.publish.inuse": {
            "description": "Number of received PUBLISH packet with occupied identifiers",
            "minimum": 0,
            "type": "integer"
          },
          "packets.publish.received": {
            "description": "Number of received PUBLISH packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.publish.sent": {
            "description": "Number of sent PUBLISH packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubrec.inuse": {
            "description": "Number of received PUBREC packet with occupied identifiers",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubrec.missed": {
            "description": "Number of received PUBREC packet with unknown identifiers",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubrec.received": {
            "description": "Number of received PUBREC packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubrec.sent": {
            "description": "Number of sent PUBREC packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubrel.missed": {
            "description": "Number of received PUBREC packet with unknown identifiers",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubrel.received": {
            "description": "Number of received PUBREL packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubrel.sent": {
            "description": "Number of sent PUBREL packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.received": {
            "description": "Number of received packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.sent": {
            "description": "Number of sent packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.suback.sent": {
            "description": "Number of sent SUBACK packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.subscribe.auth_error": {
            "description": "Number of received SUBACK packet with failed Authorization check",
            "minimum": 0,
            "type": "integer"
          },
          "packets.subscribe.error": {
            "description": "Number of received SUBSCRIBE packet with failed subscriptions",
            "minimum": 0,
            "type": "integer"
          },
          "packets.subscribe.received": {
            "description": "Number of received SUBSCRIBE packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.unsuback.sent": {
            "description": "Number of sent UNSUBACK packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.unsubscribe.error": {
            "description": "Number of received UNSUBSCRIBE packet with failed unsubscriptions",
            "minimum": 0,
            "type": "integer"
          },
          "packets.unsubscribe.received": {
            "description": "Number of received UNSUBSCRIBE packet",
            "minimum": 0,
            "type": "integer"
          },
          "rules.matched": {
            "description": "Number of rule matched",
            "minimum": 0,
            "type": "integer"
          },
          "session.created": {
            "description": "Number of sessions created",
            "minimum": 0,
            "type": "integer"
          },
          "session.discarded": {
            "description": "Number of sessions dropped because Clean Session or Clean Start is true",
            "minimum": 0,
            "type": "integer"
          },
          "session.resumed": {
            "description": "Number of sessions resumed because Clean Session or Clean Start is false",
            "minimum": 0,
            "type": "integer"
          },
          "session.takenover": {
            "description": "Number of sessions takenover because Clean Session or Clean Start is false",
            "minimum": 0,
            "type": "integer"
          },
          "session.terminated": {
            "description": "Number of terminated sessions",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_schema.redis_cluster": {
        "required": [
          "cmd",
          "servers",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源。",
            "type": "boolean"
          },
          "type": {
            "default": "redis",
            "description": "数据后端类型。",
            "enum": [
              "redis"
            ],
            "type": "string"
          },
          "cmd": {
            "description": "访问控制数据查询命令。",
            "example": "HGETALL mqtt_authz",
            "type": "string"
          },
          "servers": {
            "description": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`<br/>每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机名具有以下形式：`Host[:Port]`。<br/>如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
            "type": "string"
          },
          "redis_type": {
            "default": "cluster",
            "description": "集群模式。当 Redis 服务运行在集群模式下，该配置必须设置为 'cluster'。",
            "enum": [
              "cluster"
            ],
            "type": "string"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "auto_reconnect": {
            "default": true,
            "deprecated": true,
            "description": "已弃用。自动重连数据库。",
            "type": "boolean"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "connector-http.request": {
        "properties": {
          "method": {
            "description": "HTTP method.",
            "type": "string"
          },
          "path": {
            "description": "URL path.",
            "type": "string"
          },
          "body": {
            "description": "HTTP request body.",
            "type": "string"
          },
          "headers": {
            "description": "List of HTTP headers.",
            "example": {},
            "type": "object"
          },
          "max_retries": {
            "description": "Max retry times if error on sending request.",
            "minimum": 0,
            "type": "integer"
          },
          "request_timeout": {
            "description": "HTTP request timeout.",
            "example": "32s",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_banned.ban": {
        "required": [
          "as",
          "who"
        ],
        "properties": {
          "as": {
            "description": "封禁方式，可以通过客户端 ID、用户名或者 IP 地址等方式进行封禁。",
            "enum": [
              "clientid",
              "username",
              "peerhost"
            ],
            "example": "username",
            "type": "string"
          },
          "who": {
            "description": "封禁对象，具体的客户端 ID、用户名或者 IP 地址。",
            "example": "Banned name",
            "type": "string"
          },
          "by": {
            "description": "封禁的发起者。",
            "example": "mgmt_api",
            "type": "string"
          },
          "reason": {
            "description": "封禁原因，记录当前对象被封禁的原因。",
            "example": "Too many requests",
            "type": "string"
          },
          "at": {
            "description": "封禁的起始时间，格式为 rfc3339，默认为发起操作的时间。",
            "example": "2021-10-25T21:48:47+08:00",
            "oneOf": [
              {
                "description": "epoch-second",
                "example": 1640995200,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "until": {
            "description": "封禁的结束时间，格式为 rfc3339，默认值为发起操作的时间 + 1 年。",
            "example": "2021-10-25T21:53:47+08:00",
            "oneOf": [
              {
                "description": "epoch-second",
                "example": 1640995200,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge.node_status": {
        "properties": {
          "node": {
            "description": "节点的名字",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "status": {
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "type": "string"
          },
          "status_reason": {
            "description": "桥接连接失败的原因。",
            "example": "Connection refused",
            "type": "string"
          }
        },
        "type": "object"
      },
      "authz.node_error": {
        "properties": {
          "node": {
            "description": "节点名称。",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "error": {
            "description": "节点上产生的错误。",
            "type": "string"
          }
        },
        "type": "object"
      },
      "api_key.app": {
        "properties": {
          "name": {
            "description": "Unique and format by [a-zA-Z0-9-_]",
            "example": "EMQX-API-KEY-1",
            "type": "string"
          },
          "api_key": {
            "description": "TODO:uses HMAC-SHA256 for signing.",
            "example": "a4697a5c75a769f6",
            "type": "string"
          },
          "api_secret": {
            "description": "An API secret is a simple encrypted string that identifiesan application without any principal.They are useful for accessing public data anonymously,and are used to associate API requests.",
            "example": "MzAyMjk3ODMwMDk0NjIzOTUxNjcwNzQ0NzQ3MTE2NDYyMDI",
            "type": "string"
          },
          "expired_at": {
            "default": "infinity",
            "description": "No longer valid datetime",
            "example": "2021-12-05T02:01:34.186Z",
            "oneOf": [
              {
                "oneOf": [
                  {
                    "description": "epoch-second",
                    "example": 1640995200,
                    "type": "integer"
                  },
                  {
                    "example": "2022-01-01T00:00:00.000Z",
                    "format": "date-time",
                    "type": "string"
                  }
                ]
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "created_at": {
            "description": "ApiKey create datetime",
            "example": "2021-12-01T00:00:00.000Z",
            "oneOf": [
              {
                "description": "epoch-second",
                "example": 1640995200,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "desc": {
            "example": "Note",
            "type": "string"
          },
          "enable": {
            "description": "Enable/Disable",
            "type": "boolean"
          },
          "expired": {
            "description": "Expired",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_publish.publish_error": {
        "properties": {
          "reason_code": {
            "description": "MQTT 消息发布的错误码，这些错误码也是 MQTT 规范中 PUBACK 消息可能携带的错误码。<br/><br/>当前支持如下错误码：<br/><br/><br/>16(0x10)：没能匹配到任何订阅；<br/><br/>131(0x81)：消息转发时发生错误，例如 EMQX 服务重启；<br/><br/>144(0x90)：主题名称非法；<br/><br/>151(0x97)：受到了速率限制，或者消息尺寸过大。全局消息大小限制可以通过配置项 <code>mqtt.max_packet_size</code> 来进行修改。<br/><br/>注意：消息尺寸的是通过主题和消息体的字节数进行估算的。具体发布时所占用的字节数可能会稍大于这个估算的值。",
            "example": 16,
            "type": "integer"
          },
          "message": {
            "description": "失败的详细原因。",
            "example": "no_matching_subscribers",
            "type": "string"
          }
        },
        "type": "object"
      },
      "authn.jwt_hmac": {
        "required": [
          "algorithm",
          "mechanism",
          "secret"
        ],
        "properties": {
          "algorithm": {
            "description": "JWT 签名算法，支持 HMAC (配置为 <code>hmac-based</code>）和 RSA、ECDSA (配置为 <code>public-key</code>)。",
            "enum": [
              "hmac-based"
            ],
            "type": "string"
          },
          "secret": {
            "description": "使用 HMAC 算法时用于验证 JWT 的密钥",
            "type": "string"
          },
          "secret_base64_encoded": {
            "default": false,
            "description": "密钥是否为 Base64 编码。",
            "type": "boolean"
          },
          "mechanism": {
            "description": "认证机制。",
            "enum": [
              "jwt"
            ],
            "type": "string"
          },
          "acl_claim_name": {
            "default": "acl",
            "description": "JWT claim name to use for getting ACL rules.",
            "type": "string"
          },
          "verify_claims": {
            "default": [],
            "description": "需要验证的自定义声明列表，它是一个名称/值对列表。<br/>值可以使用以下占位符：<br/>- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名<br/>- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符<br/>认证时将验证 JWT（取自 Password 字段）中 claims 的值是否与 <code>verify_claims</code> 中要求的相匹配。",
            "items": {
              "example": "any",
              "type": "string"
            },
            "type": "array"
          },
          "from": {
            "default": "password",
            "description": "指定客户端连接请求中 JWT 的位置；可选值： password、 username（分别对应于 MQTT 客户端 CONNECT 报文中的 Password 和 Username 字段）",
            "enum": [
              "username",
              "password"
            ],
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "authn.mongo_rs": {
        "required": [
          "backend",
          "collection",
          "database",
          "mechanism",
          "replica_set_name",
          "servers"
        ],
        "properties": {
          "mechanism": {
            "description": "认证机制。",
            "enum": [
              "password_based"
            ],
            "type": "string"
          },
          "backend": {
            "description": "后端类型。",
            "enum": [
              "mongodb"
            ],
            "type": "string"
          },
          "collection": {
            "description": "存储认证数据的集合。",
            "type": "string"
          },
          "filter": {
            "default": {},
            "description": "在查询中定义过滤条件的条件表达式。<br/>过滤器支持如下占位符：<br/>- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名<br/>- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符",
            "example": {},
            "type": "object"
          },
          "password_hash_field": {
            "default": "password_hash",
            "description": "文档中用于存放密码散列的字段。",
            "type": "string"
          },
          "salt_field": {
            "default": "salt",
            "description": "文档中用于存放盐值的字段。",
            "type": "string"
          },
          "is_superuser_field": {
            "default": "is_superuser",
            "description": "文档中用于定义用户是否具有超级用户权限的字段。",
            "type": "string"
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn-hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn-hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn-hash.bcrypt"
              }
            ]
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
            "type": "boolean"
          },
          "mongo_type": {
            "default": "rs",
            "description": "Replica set模式。当 MongoDB 服务运行在 replica-set 模式下，该配置必须设置为 'rs'。",
            "enum": [
              "rs"
            ],
            "type": "string"
          },
          "servers": {
            "description": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`<br/>每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机名具有以下形式：`Host[:Port]`。<br/>如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
            "type": "string"
          },
          "w_mode": {
            "default": "unsafe",
            "description": "写模式。",
            "enum": [
              "unsafe",
              "safe"
            ],
            "type": "string"
          },
          "r_mode": {
            "default": "master",
            "description": "读模式。",
            "enum": [
              "master",
              "slave_ok"
            ],
            "type": "string"
          },
          "replica_set_name": {
            "description": "副本集的名称。",
            "type": "string"
          },
          "srv_record": {
            "default": false,
            "description": "使用 DNS SRV 记录。",
            "type": "boolean"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "username": {
            "description": "内部数据库的用户名。",
            "type": "string"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported.",
            "enum": [
              "auto",
              true,
              false
            ],
            "type": "string"
          },
          "auth_source": {
            "description": "与用户证书关联的数据库名称。",
            "type": "string"
          },
          "database": {
            "description": "数据库名字。",
            "type": "string"
          },
          "topology": {
            "$ref": "#/components/schemas/emqx_mongodb.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "broker.deflate_opts": {
        "properties": {
          "level": {
            "description": "压缩级别",
            "enum": [
              "none",
              "default",
              "best_compression",
              "best_speed"
            ],
            "type": "string"
          },
          "mem_level": {
            "default": 8,
            "description": "指定压缩状态的大小<br/><br/>较低的值会减少每个连接的内存使用。",
            "maximum": 9,
            "minimum": 1,
            "type": "integer"
          },
          "strategy": {
            "default": "default",
            "description": "指定压缩策略。",
            "enum": [
              "default",
              "filtered",
              "huffman_only",
              "rle"
            ],
            "type": "string"
          },
          "server_context_takeover": {
            "default": "takeover",
            "description": "接管意味着在服务器消息之间保留压缩状态。",
            "enum": [
              "takeover",
              "no_takeover"
            ],
            "type": "string"
          },
          "client_context_takeover": {
            "default": "takeover",
            "description": "接管意味着在客户端消息之间保留压缩状态。",
            "enum": [
              "takeover",
              "no_takeover"
            ],
            "type": "string"
          },
          "server_max_window_bits": {
            "default": 15,
            "description": "指定服务器压缩上下文的大小。",
            "maximum": 15,
            "minimum": 8,
            "type": "integer"
          },
          "client_max_window_bits": {
            "default": 15,
            "description": "指定客户端压缩上下文的大小。",
            "maximum": 15,
            "minimum": 8,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "broker.authz_cache": {
        "required": [
          "enable"
        ],
        "properties": {
          "enable": {
            "default": true,
            "description": "启用或禁用授权缓存。",
            "type": "boolean"
          },
          "max_size": {
            "default": 32,
            "description": "缓存项的最大数量。",
            "maximum": 1048576,
            "minimum": 1,
            "type": "integer"
          },
          "ttl": {
            "default": "1m",
            "description": "缓存数据的生存时间。",
            "example": "12m",
            "type": "string"
          }
        },
        "type": "object"
      },
      "broker.tcp_opts": {
        "properties": {
          "active_n": {
            "default": 100,
            "description": "为此套接字指定{active，N}选项<br/><br/>See: https://erlang.org/doc/man/inet.html#setopts-2",
            "type": "integer"
          },
          "backlog": {
            "default": 1024,
            "description": "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
            "minimum": 1,
            "type": "integer"
          },
          "send_timeout": {
            "default": "15s",
            "description": "连接的 TCP 发送超时。",
            "example": "12m",
            "type": "string"
          },
          "send_timeout_close": {
            "default": true,
            "description": "如果发送超时，则关闭连接。",
            "type": "boolean"
          },
          "recbuf": {
            "description": "连接的 TCP 接收缓冲区（OS 内核）。",
            "example": "2KB",
            "type": "string"
          },
          "sndbuf": {
            "description": "连接的 TCP 发送缓冲区（OS 内核）。",
            "example": "4KB",
            "type": "string"
          },
          "buffer": {
            "default": "4KB",
            "description": "驱动程序使用的用户空间缓冲区的大小。",
            "example": "4KB",
            "type": "string"
          },
          "high_watermark": {
            "default": "1MB",
            "description": "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。",
            "example": "32MB",
            "type": "string"
          },
          "nodelay": {
            "default": true,
            "description": "连接的 TCP_NODELAY 标识",
            "type": "boolean"
          },
          "reuseaddr": {
            "default": true,
            "description": "连接的 SO_REUSEADDR 标识。",
            "type": "boolean"
          },
          "keepalive": {
            "default": "none",
            "description": "Enable TCP keepalive for MQTT connections over TCP or SSL.<br/>The value is three comma separated numbers in the format of 'Idle,Interval,Probes'<br/> - Idle: The number of seconds a connection needs to be idle before the server begins to send out keep-alive probes (Linux default 7200).<br/> - Interval: The number of seconds between TCP keep-alive probes (Linux default 75).<br/> - Probes: The maximum number of TCP keep-alive probes to send before giving up and killing the connection if no response is obtained from the other end (Linux default 9).<br/>For example \"240,30,5\" means: EMQX should start sending TCP keepalive probes after the connection is in idle for 240 seconds, and the probes are sent every 30 seconds until a response is received from the MQTT client, if it misses 5 consecutive responses, EMQX should close the connection.<br/>Default: 'none'",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_topic_metrics_api.reset": {
        "required": [
          "action"
        ],
        "properties": {
          "topic": {
            "description": "主题名称。如果此参数不存在，则所有创建的主题监控数据都将重置。",
            "example": "testtopic/1",
            "type": "string"
          },
          "action": {
            "description": "操作，仅支持 reset",
            "example": "reset",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.rule_metrics": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "规则的 ID",
            "example": "293fb66f",
            "type": "string"
          },
          "metrics": {
            "description": "规则的计数器",
            "$ref": "#/components/schemas/emqx_rule_api_schema.metrics"
          },
          "node_metrics": {
            "description": "每个节点的规则计数器",
            "items": {
              "$ref": "#/components/schemas/emqx_rule_api_schema.node_metrics"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.update_stomp": {
        "properties": {
          "frame": {
            "$ref": "#/components/schemas/emqx_stomp_schema.stomp_frame"
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "是否启用该网关",
            "type": "boolean"
          },
          "enable_stats": {
            "default": true,
            "description": "是否开启客户端统计",
            "type": "boolean"
          },
          "idle_timeout": {
            "default": "30s",
            "description": "客户端连接过程的空闲时间。该配置用于：<br/>  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。<br/>  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
            "example": "12m",
            "type": "string"
          },
          "clientinfo_override": {
            "description": "ClientInfo 重写。",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          }
        },
        "type": "object"
      },
      "connector-mqtt.egress_remote": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "description": "Forward to which topic of the remote broker.<br/><br/>Template with variables is allowed.",
            "type": "string"
          },
          "qos": {
            "default": 1,
            "description": "The QoS of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "example": 0,
                "maximum": 2,
                "minimum": 0,
                "type": "integer"
              }
            ]
          },
          "retain": {
            "default": false,
            "description": "The 'retain' flag of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "payload": {
            "description": "The payload of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "plugins.position": {
        "properties": {
          "position": {
            "description": "<br/>             Enable auto-boot at position in the boot list, where Position could be<br/>             'front', 'rear', or 'before:other-vsn', 'after:other-vsn'<br/>             to specify a relative position.<br/>            ",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "enum": [
                  "rear"
                ],
                "type": "string"
              },
              {
                "enum": [
                  "front"
                ],
                "type": "string"
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge.node_metrics": {
        "properties": {
          "node": {
            "description": "节点的名字",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "metrics": {
            "$ref": "#/components/schemas/bridge.metrics"
          }
        },
        "type": "object"
      },
      "emqx_exproto_schema.ssl_server_opts": {
        "properties": {
          "cacertfile": {
            "default": "${EMQX_ETC_DIR}/certs/cacert.pem",
            "description": "受信任的PEM格式 CA  证书捆绑文件<br/><br/>此文件中的证书用于验证TLS对等方的证书。<br/>如果要信任新 CA，请将新证书附加到文件中。<br/>无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/><br/>注意：从文件中失效（删除）证书不会影响已建立的连接。",
            "type": "string"
          },
          "cacerts": {
            "default": false,
            "deprecated": true,
            "type": "boolean"
          },
          "certfile": {
            "default": "${EMQX_ETC_DIR}/certs/cert.pem",
            "description": "PEM格式证书链文件<br/><br/>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，<br/>然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。<br/>根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
            "type": "string"
          },
          "keyfile": {
            "default": "${EMQX_ETC_DIR}/certs/key.pem",
            "description": "PEM格式的私钥文件。",
            "type": "string"
          },
          "verify": {
            "default": "verify_none",
            "description": "启用或禁用对等验证。",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "type": "string"
          },
          "reuse_sessions": {
            "default": true,
            "description": "启用 TLS 会话重用。",
            "type": "boolean"
          },
          "depth": {
            "default": 10,
            "description": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。<br/>因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/><br/>如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/><br/>如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
            "minimum": 0,
            "type": "integer"
          },
          "password": {
            "description": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
            "example": "",
            "format": "password",
            "type": "string"
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "description": "支持所有TLS/DTLS版本<br/><br/>注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ciphers": {
            "default": [],
            "description": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。<br/><br/><br/>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。<br/>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。<br/><br/>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。<br/>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/><br/>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。<br/>不兼容的密码套件将被自动删除。<br/><br/>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。<br/><br/><br/><br/>注：PSK 的 Ciphers 不支持 tlsv1.3<br/><br/>如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。<br/><br/><br/><br/>PSK 密码套件：<br/><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "secure_renegotiate": {
            "default": true,
            "description": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。<br/>RFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
            "type": "boolean"
          },
          "log_level": {
            "default": "notice",
            "description": "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "type": "string"
          },
          "hibernate_after": {
            "default": "5s",
            "description": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
            "example": "12m",
            "type": "string"
          },
          "dhfile": {
            "description": "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/><br/>注意：TLS 1.3不支持<code>dhfile</code>选项。",
            "type": "string"
          },
          "fail_if_no_peer_cert": {
            "default": false,
            "description": "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。<br/>如果设置为true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。<br/>如果设置为false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
            "type": "boolean"
          },
          "honor_cipher_order": {
            "default": true,
            "description": "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
            "type": "boolean"
          },
          "client_renegotiation": {
            "default": true,
            "description": "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。<br/>这可能会成为拒绝服务攻击的载体。<br/>SSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。<br/>默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
            "type": "boolean"
          },
          "handshake_timeout": {
            "default": "15s",
            "description": "握手完成所允许的最长时间",
            "example": "12m",
            "type": "string"
          }
        },
        "type": "object"
      },
      "plugins.running_status": {
        "properties": {
          "node": {
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "status": {
            "description": "Install plugin status at runtime<br/>1. running: plugin is running.<br/>2. stopped: plugin is stopped.<br/>",
            "enum": [
              "running",
              "stopped"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_mqtt.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "maximum": 1024,
            "minimum": 1,
            "type": "integer"
          },
          "health_check_interval": {
            "default": "15s",
            "description": "健康检查间隔。",
            "example": "32s",
            "type": "string"
          },
          "start_after_created": {
            "default": true,
            "description": "是否在创建资源后立即启动资源。",
            "type": "boolean"
          },
          "start_timeout": {
            "default": "5s",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s",
            "type": "string"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "example": "32s",
                "type": "string"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
            "enum": [
              "sync",
              "async"
            ],
            "type": "string"
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              },
              {
                "example": "32s",
                "type": "string"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1,
            "type": "integer"
          },
          "enable_queue": {
            "default": false,
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。",
            "type": "boolean"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.update_coap": {
        "properties": {
          "heartbeat": {
            "default": "30s",
            "description": "CoAP 网关要求客户端的最小心跳间隔时间。<br/>当 <code>connection_required</code> 开启后，该参数用于检查客户端连接是否存活",
            "example": "12m",
            "type": "string"
          },
          "connection_required": {
            "default": false,
            "description": "是否开启连接模式。<br/>连接模式是非标准协议的功能。它维护 CoAP 客户端上线、认证、和连接状态的保持",
            "type": "boolean"
          },
          "notify_type": {
            "default": "qos",
            "description": "投递给 CoAP 客户端的通知消息类型。当客户端 Observe 一个资源（或订阅某个主题）时，网关会向客户端推送新产生的消息。其消息类型可设置为：<br/><br/>  - non: 不需要客户端返回确认消息;<br/><br/>  - con: 需要客户端返回一个确认消息;<br/><br/>  - qos: 取决于消息的 QoS 等级; QoS 0 会以 `non` 类型下发，QoS 1/2 会以 `con` 类型下发",
            "enum": [
              "non",
              "con",
              "qos"
            ],
            "type": "string"
          },
          "subscribe_qos": {
            "default": "coap",
            "description": "客户端订阅请求的默认 QoS 等级。<br/>当 CoAP 客户端发起订阅请求时，如果未携带 `qos` 参数则会使用该默认值。默认值可设置为：<br/><br/>  - qos0、 qos1、qos2: 设置为固定的 QoS 等级<br/><br/>  - coap: 依据订阅操作的 CoAP 报文类型来动态决定<br/><br/>    * 当订阅请求为 `non-confirmable` 类型时，取值为 qos0<br/><br/>    * 当订阅请求为 `confirmable` 类型时，取值为 qos1",
            "enum": [
              "qos0",
              "qos1",
              "qos2",
              "coap"
            ],
            "type": "string"
          },
          "publish_qos": {
            "default": "coap",
            "description": "客户端发布请求的默认 QoS 等级。<br/>当 CoAP 客户端发起发布请求时，如果未携带 `qos` 参数则会使用该默认值。默认值可设置为：<br><br/>  - qos0、qos1、qos2: 设置为固定的 QoS 等级<br/><br/>  - coap: 依据发布操作的 CoAP 报文类型来动态决定<br/><br/>    * 当发布请求为 `non-confirmable` 类型时，取值为 qos0<br/><br/>    * 当发布请求为 `confirmable` 类型时，取值为 qos1",
            "enum": [
              "qos0",
              "qos1",
              "qos2",
              "coap"
            ],
            "type": "string"
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "是否启用该网关",
            "type": "boolean"
          },
          "enable_stats": {
            "default": true,
            "description": "是否开启客户端统计",
            "type": "boolean"
          },
          "idle_timeout": {
            "default": "30s",
            "description": "客户端连接过程的空闲时间。该配置用于：<br/>  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。<br/>  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
            "example": "12m",
            "type": "string"
          },
          "clientinfo_override": {
            "description": "ClientInfo 重写。",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          }
        },
        "type": "object"
      },
      "broker.mqtt": {
        "properties": {
          "idle_timeout": {
            "default": "15s",
            "description": "设置连接被断开或进入休眠状态前的等待时间，空闲超时后，<br/>  - 如暂未收到客户端的 CONNECT 报文，连接将断开；<br/>  - 如已收到客户端的 CONNECT 报文，连接将进入休眠模式以节省系统资源。<br/><br/>注意：请合理设置该参数值，如等待时间设置过长，可能造成系统资源的浪费。",
            "oneOf": [
              {
                "example": "12m",
                "type": "string"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "max_packet_size": {
            "default": "1MB",
            "description": "允许的最大 MQTT 报文大小。",
            "example": "32MB",
            "type": "string"
          },
          "max_clientid_len": {
            "default": 65535,
            "description": "允许的最大 MQTT Client ID 长度。",
            "maximum": 65535,
            "minimum": 23,
            "type": "integer"
          },
          "max_topic_levels": {
            "default": 128,
            "description": "允许的最大主题层级。",
            "maximum": 65535,
            "minimum": 1,
            "type": "integer"
          },
          "max_topic_alias": {
            "default": 65535,
            "description": "允许的最大主题别名数，0 表示不支持主题别名。",
            "maximum": 65535,
            "minimum": 0,
            "type": "integer"
          },
          "retain_available": {
            "default": true,
            "description": "是否启用对 MQTT 保留消息的支持。",
            "type": "boolean"
          },
          "wildcard_subscription": {
            "default": true,
            "description": "是否启用对 MQTT 通配符订阅的支持。",
            "type": "boolean"
          },
          "shared_subscription": {
            "default": true,
            "description": "是否启用对 MQTT 共享订阅的支持。",
            "type": "boolean"
          },
          "shared_subscription_strategy": {
            "default": "round_robin",
            "description": "共享订阅消息派发策略。<br/>  - `random`：随机挑选一个共享订阅者派发；<br/>  - `round_robin`：使用 round-robin 策略派发；<br/>  - `round_robin_per_group`：在共享组内循环选择下一个成员；<br/>  - `local`：选择随机的本地成员，否则选择随机的集群范围内成员;<br/>  - `sticky`：总是使用上次选中的订阅者派发，直到它断开连接；<br/>  - `hash_clientid`：通过对发送者的客户端 ID 进行 Hash 处理来选择订阅者;<br/>  - `hash_topic`：通过对源主题进行 Hash 处理来选择订阅者。",
            "enum": [
              "random",
              "round_robin",
              "round_robin_per_group",
              "sticky",
              "local",
              "hash_topic",
              "hash_clientid"
            ],
            "type": "string"
          },
          "exclusive_subscription": {
            "default": false,
            "description": "是否启用对 MQTT 排它订阅的支持。",
            "type": "boolean"
          },
          "ignore_loop_deliver": {
            "default": false,
            "description": "设置由 MQTT v3.1.1/v3.1.0 客户端发布的消息是否将转发给其本身；类似 MQTT 5.0 协议中的 <code>No Local</code> 选项。",
            "type": "boolean"
          },
          "strict_mode": {
            "default": false,
            "description": "是否以严格模式解析 MQTT 消息。<br/>严格模式下，如客户端 ID、主题名称等中包含无效 utf8 字符串，连接将被断开。",
            "type": "boolean"
          },
          "response_information": {
            "default": "",
            "description": "UTF-8 字符串，用于指定返回给客户端的响应主题，如 <code>reqrsp/</code>，此时请求和应答客户端都需要使用 <code>reqrsp/</code> 前缀的主题来完成通讯。<br/>如希望禁用此功能，请在下方的文字框中输入<code>\"\"</code>；仅适用于 MQTT 5.0 客户端。",
            "type": "string"
          },
          "server_keepalive": {
            "default": "disabled",
            "description": "EMQX 要求的保活时间，如设为 disabled，则将使用客户端指定的保持连接时间；仅适用于 MQTT 5.0 客户端。",
            "oneOf": [
              {
                "enum": [
                  "disabled"
                ],
                "type": "string"
              },
              {
                "minimum": 1,
                "type": "integer"
              }
            ]
          },
          "keepalive_multiplier": {
            "default": 1.5,
            "description": "EMQX 判定客户端保活超时使用的阈值系数。计算公式为：Keep Alive * Backoff * 2",
            "type": "number"
          },
          "retry_interval": {
            "default": "30s",
            "description": "QoS 1/2 消息的重新投递间隔。",
            "example": "12m",
            "type": "string"
          },
          "use_username_as_clientid": {
            "default": false,
            "description": "是否使用用户名作为客户端 ID。<br/>此设置的作用时间晚于 <code>对端证书作为用户名</code> 和 <code>对端证书作为客户端 ID</code>。",
            "type": "boolean"
          },
          "peer_cert_as_username": {
            "default": "disabled",
            "description": "使用对端证书中的 CN、DN 字段或整个证书内容来作为用户名；仅适用于 TLS 连接。<br/>目前支持：<br/>- <code>cn</code>: 取证书的 CN 字段<br/>- <code>dn</code>: 取证书的 DN 字段<br/>- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 的证书内容<br/>- <code>pem</code>: 将 <code>DER</code> 证书转换为 <code>PEM</code> 格式作为用户名<br/>- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书内容的 MD5 值",
            "enum": [
              "disabled",
              "cn",
              "dn",
              "crt",
              "pem",
              "md5"
            ],
            "type": "string"
          },
          "peer_cert_as_clientid": {
            "default": "disabled",
            "description": "使用对端证书中的 CN、DN 字段或整个证书内容来作为客户端 ID。仅适用于 TLS 连接；<br/>目前支持：<br/>- <code>cn</code>: 取证书的 CN 字段<br/>- <code>dn</code>: 取证书的 DN 字段<br/>- <code>crt</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书的内容<br/>- <code>pem</code>: 将 <code>DER</code> 证书内容转换为 <code>PEM</code> 格式作为客户端 ID<br/>- <code>md5</code>: 取 <code>DER</code> 或 <code>PEM</code> 证书内容的 MD5 值",
            "enum": [
              "disabled",
              "cn",
              "dn",
              "crt",
              "pem",
              "md5"
            ],
            "type": "string"
          },
          "session_expiry_interval": {
            "default": "2h",
            "description": "指定会话将在连接断开后多久过期，仅适用于非 MQTT 5.0 的连接。",
            "example": "12m",
            "type": "string"
          },
          "max_awaiting_rel": {
            "default": 100,
            "description": "每个发布者的会话中，都存在一个队列来处理客户端发送的 QoS 2 消息。该队列会存储 QoS 2 消息的报文 ID 直到收到客户端的 PUBREL 或超时，达到队列长度的限制后，新的 QoS 2 消息发布会被拒绝，并返回 `147(0x93)` 错误。",
            "oneOf": [
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              },
              {
                "minimum": 0,
                "type": "integer"
              }
            ]
          },
          "max_qos_allowed": {
            "default": 2,
            "description": "允许的最大 QoS 等级。",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          },
          "mqueue_priorities": {
            "default": "disabled",
            "description": "主题优先级。取值范围 [1-255]<br/>默认优先级表为空，即所有的主题优先级相同。<br/><br/>注：优先主题名称中不支持使用逗号和等号。<br/>注：不在此列表中的主题，被视为最高/最低优先级，这取决于<code>mqtt.mqueue_default_priority</code> 的配置<br/><br/>示例：<br/>配置 <code>\"topic/1\" > \"topic/2\"</code>:<br/><code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>",
            "oneOf": [
              {
                "example": {},
                "type": "object"
              },
              {
                "enum": [
                  "disabled"
                ],
                "type": "string"
              }
            ]
          },
          "mqueue_default_priority": {
            "default": "lowest",
            "description": "默认的主题优先级，不在 <code>主题优先级</code>（<code>mqueue_priorities</code>） 中的主题将会使用该优先级。",
            "enum": [
              "highest",
              "lowest"
            ],
            "type": "string"
          },
          "mqueue_store_qos0": {
            "default": true,
            "description": "指定在连接断开但会话保持期间，是否需要在消息队列中存储 QoS 0 消息。",
            "type": "boolean"
          },
          "max_mqueue_len": {
            "default": 1000,
            "description": "消息队列最大长度。持久客户端断开连接或飞行窗口已满时排队的消息长度。",
            "oneOf": [
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              },
              {
                "minimum": 0,
                "type": "integer"
              }
            ]
          },
          "max_inflight": {
            "default": 32,
            "description": "允许在完成应答前同时投递的 QoS 1 和 QoS 2 消息的最大数量。",
            "maximum": 65535,
            "minimum": 1,
            "type": "integer"
          },
          "max_subscriptions": {
            "default": "infinity",
            "description": "允许每个客户端建立的最大订阅数量。",
            "oneOf": [
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              },
              {
                "minimum": 1,
                "type": "integer"
              }
            ]
          },
          "upgrade_qos": {
            "default": false,
            "description": "投递消息时，是否根据订阅主题时的 QoS 等级来强制提升派发的消息的 QoS 等级。",
            "type": "boolean"
          },
          "await_rel_timeout": {
            "default": "300s",
            "description": "客户端发布 QoS 2 消息时，服务器等待 `PUBREL` 的最长时延。超过该时长后服务器会放弃等待，该PACKET ID 会被释放，从而允许后续新的 PUBLISH 消息使用。如果超时后收到 PUBREL，服务器将会产生一条告警日志。注意，向订阅客户端转发消息的动作发生在进入等待之前。",
            "example": "12m",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_publish.publish_message": {
        "required": [
          "payload",
          "topic"
        ],
        "properties": {
          "payload_encoding": {
            "default": "plain",
            "description": "MQTT 消息体的编码方式，可以是 <code>base64</code> 或 <code>plain</code>。当设置为 <code>base64</code> 时，消息在发布前会先被解码。",
            "enum": [
              "plain",
              "base64"
            ],
            "type": "string"
          },
          "topic": {
            "description": "主题名称",
            "example": "api/example/topic",
            "type": "string"
          },
          "qos": {
            "default": 0,
            "description": "MQTT 消息的 QoS",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          },
          "clientid": {
            "deprecated": true,
            "type": "string"
          },
          "payload": {
            "description": "MQTT 消息体。",
            "example": "hello emqx api",
            "type": "string"
          },
          "properties": {
            "description": "PUBLISH 消息里的 Property 字段。",
            "$ref": "#/components/schemas/emqx_mgmt_api_publish.message_properties"
          },
          "retain": {
            "default": false,
            "description": "布尔型字段，用于表示该消息是否保留消息。",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_clients.subscribe": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "description": "Topic",
            "example": "testtopic/#",
            "type": "string"
          },
          "qos": {
            "default": 0,
            "description": "QoS",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          },
          "nl": {
            "default": 0,
            "description": "No Local",
            "type": "integer"
          },
          "rap": {
            "default": 0,
            "description": "Retain as Published",
            "type": "integer"
          },
          "rh": {
            "default": 0,
            "description": "Retain Handling",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_authn_api.response_users": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/emqx_authn_api.response_user"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/public.meta"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.tcp_listener": {
        "properties": {
          "id": {
            "description": "监听器 ID",
            "type": "string"
          },
          "type": {
            "description": "监听器类型",
            "enum": [
              "tcp"
            ],
            "type": "string"
          },
          "name": {
            "description": "监听器名称",
            "type": "string"
          },
          "running": {
            "description": "监听器运行状态",
            "type": "boolean"
          },
          "acceptors": {
            "default": 16,
            "description": "Acceptor 进程池大小。",
            "type": "integer"
          },
          "tcp_options": {
            "description": "TCP Socket 配置。",
            "$ref": "#/components/schemas/broker.tcp_opts"
          },
          "proxy_protocol": {
            "default": false,
            "description": "是否开启 Proxy Protocol V1/2。当 EMQX 集群部署在 HAProxy 或 Nginx 后需要获取客户端真实 IP 时常用到该选项。参考：https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "15s",
            "description": "接收 Proxy Protocol 报文头的超时时间。如果在超时内没有收到 Proxy Protocol 包，EMQX 将关闭 TCP 连接。",
            "example": "12m",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "是否启用该监听器。",
            "type": "boolean"
          },
          "bind": {
            "description": "监听器绑定的 IP 地址或端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "max_connections": {
            "default": 1024,
            "description": "监听器支持的最大连接数。",
            "oneOf": [
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              },
              {
                "minimum": 1,
                "type": "integer"
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "description": "监听器支持的最大连接速率。",
            "type": "integer"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证。<br/>配置 <code>false</code> 时，将不对客户端做任何认证。",
            "type": "boolean"
          },
          "mountpoint": {
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "access_rules": {
            "default": [],
            "description": "配置监听器的访问控制规则。<br/>见：https://github.com/emqtt/esockd#allowdeny",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "emqx_conf_schema.log": {
        "properties": {
          "console": {
            "$ref": "#/components/schemas/emqx_conf_schema.console_handler"
          },
          "file": {
            "default": {
              "level": "warning"
            },
            "description": "输出到文件的日志处理进程列表",
            "oneOf": [
              {
                "properties": {
                  "$handler_name": {
                    "$ref": "#/components/schemas/emqx_conf_schema.log_file_handler"
                  }
                },
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/emqx_conf_schema.log_file_handler"
              }
            ]
          }
        },
        "type": "object"
      },
      "emqx_authz_api_schema.http_get": {
        "required": [
          "method",
          "type",
          "url"
        ],
        "properties": {
          "method": {
            "default": "get",
            "description": "HTTP 请求方法。",
            "enum": [
              "get"
            ],
            "type": "string"
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "keep-alive": "timeout=30, max=1000"
            },
            "description": "HTTP Headers 列表（无 <code>content-type</code>）。",
            "example": {},
            "type": "object"
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源。",
            "type": "boolean"
          },
          "type": {
            "default": "http",
            "description": "数据后端类型。",
            "enum": [
              "http"
            ],
            "type": "string"
          },
          "url": {
            "description": "认证服务器 URL。",
            "type": "string"
          },
          "body": {
            "description": "HTTP 请求体。",
            "example": {},
            "type": "object"
          },
          "request_timeout": {
            "default": "30s",
            "description": "请求超时时间。",
            "type": "string"
          },
          "connect_timeout": {
            "default": "15s",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s",
            "type": "string"
          },
          "enable_pipelining": {
            "default": 100,
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1,
            "type": "integer"
          },
          "max_retries": {
            "deprecated": true,
            "minimum": 0,
            "type": "integer"
          },
          "pool_size": {
            "default": 8,
            "description": "The pool size.",
            "minimum": 1,
            "type": "integer"
          },
          "request": {
            "description": "Configure HTTP request parameters.",
            "$ref": "#/components/schemas/connector-http.request"
          },
          "retry_interval": {
            "deprecated": true,
            "example": "12m",
            "type": "string"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_clients.unsubscribe": {
        "properties": {
          "topic": {
            "description": "Topic",
            "example": "testtopic/#",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_metrics.node_metrics": {
        "properties": {
          "node": {
            "description": "Node name",
            "type": "string"
          },
          "actions.failure": {
            "description": "Number of failure executions of the rule engine action",
            "minimum": 0,
            "type": "integer"
          },
          "actions.success": {
            "description": "Number of successful executions of the rule engine action",
            "minimum": 0,
            "type": "integer"
          },
          "bytes.received": {
            "description": "Number of bytes received ",
            "minimum": 0,
            "type": "integer"
          },
          "bytes.sent": {
            "description": "Number of bytes sent on this connection",
            "minimum": 0,
            "type": "integer"
          },
          "client.auth.anonymous": {
            "description": "Number of clients who log in anonymously",
            "minimum": 0,
            "type": "integer"
          },
          "client.authenticate": {
            "description": "Number of client authentications",
            "minimum": 0,
            "type": "integer"
          },
          "client.check_authz": {
            "description": "Number of Authorization rule checks",
            "minimum": 0,
            "type": "integer"
          },
          "client.connack": {
            "description": "Number of CONNACK packet sent",
            "minimum": 0,
            "type": "integer"
          },
          "client.connect": {
            "description": "Number of client connections",
            "minimum": 0,
            "type": "integer"
          },
          "client.connected": {
            "description": "Number of successful client connections",
            "minimum": 0,
            "type": "integer"
          },
          "client.disconnected": {
            "description": "Number of client disconnects",
            "minimum": 0,
            "type": "integer"
          },
          "client.subscribe": {
            "description": "Number of client subscriptions",
            "minimum": 0,
            "type": "integer"
          },
          "client.unsubscribe": {
            "description": "Number of client unsubscriptions",
            "minimum": 0,
            "type": "integer"
          },
          "delivery.dropped": {
            "description": "Total number of discarded messages when sending",
            "minimum": 0,
            "type": "integer"
          },
          "delivery.dropped.expired": {
            "description": "Number of messages dropped due to message expiration on sending",
            "minimum": 0,
            "type": "integer"
          },
          "delivery.dropped.no_local": {
            "description": "Number of messages that were dropped due to the No Local subscription option when sending",
            "minimum": 0,
            "type": "integer"
          },
          "delivery.dropped.qos0_msg": {
            "description": "Number of messages with QoS 0 that were dropped because the message queue was full when sending",
            "minimum": 0,
            "type": "integer"
          },
          "delivery.dropped.queue_full": {
            "description": "Number of messages with a non-zero QoS that were dropped because the message queue was full when sending",
            "minimum": 0,
            "type": "integer"
          },
          "delivery.dropped.too_large": {
            "description": "The number of messages that were dropped because the length exceeded the limit when sending",
            "minimum": 0,
            "type": "integer"
          },
          "messages.acked": {
            "description": "Number of received PUBACK and PUBREC packet",
            "minimum": 0,
            "type": "integer"
          },
          "messages.delayed": {
            "description": "Number of delay-published messages",
            "minimum": 0,
            "type": "integer"
          },
          "messages.delivered": {
            "description": "Number of messages forwarded to the subscription process internally",
            "minimum": 0,
            "type": "integer"
          },
          "messages.dropped": {
            "description": "Total number of messages dropped before forwarding to the subscription process",
            "minimum": 0,
            "type": "integer"
          },
          "messages.dropped.await_pubrel_timeout": {
            "description": "Number of messages dropped due to waiting PUBREL timeout",
            "minimum": 0,
            "type": "integer"
          },
          "messages.dropped.no_subscribers": {
            "description": "Number of messages dropped due to no subscribers",
            "minimum": 0,
            "type": "integer"
          },
          "messages.forward": {
            "description": "Number of messages forwarded to other nodes",
            "minimum": 0,
            "type": "integer"
          },
          "messages.publish": {
            "description": "Number of messages published in addition to system messages",
            "minimum": 0,
            "type": "integer"
          },
          "messages.qos0.received": {
            "description": "Number of QoS 0 messages received from clients",
            "minimum": 0,
            "type": "integer"
          },
          "messages.qos0.sent": {
            "description": "Number of QoS 0 messages sent to clients",
            "minimum": 0,
            "type": "integer"
          },
          "messages.qos1.received": {
            "description": "Number of QoS 1 messages received from clients",
            "minimum": 0,
            "type": "integer"
          },
          "messages.qos1.sent": {
            "description": "Number of QoS 1 messages sent to clients",
            "minimum": 0,
            "type": "integer"
          },
          "messages.qos2.received": {
            "description": "Number of QoS 2 messages received from clients",
            "minimum": 0,
            "type": "integer"
          },
          "messages.qos2.sent": {
            "description": "Number of QoS 2 messages sent to clients",
            "minimum": 0,
            "type": "integer"
          },
          "messages.received": {
            "description": "Number of messages received from the client, equal to the sum of messages.qos0.received\fmessages.qos1.received and messages.qos2.received",
            "minimum": 0,
            "type": "integer"
          },
          "messages.retained": {
            "description": "Number of retained messages",
            "minimum": 0,
            "type": "integer"
          },
          "messages.sent": {
            "description": "Number of messages sent to the client, equal to the sum of messages.qos0.sent\fmessages.qos1.sent and messages.qos2.sent",
            "minimum": 0,
            "type": "integer"
          },
          "packets.auth.received": {
            "description": "Number of received AUTH packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.auth.sent": {
            "description": "Number of sent AUTH packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.connack.auth_error": {
            "description": "Number of received CONNECT packet with failed authentication",
            "minimum": 0,
            "type": "integer"
          },
          "packets.connack.error": {
            "description": "Number of received CONNECT packet with unsuccessful connections",
            "minimum": 0,
            "type": "integer"
          },
          "packets.connack.sent": {
            "description": "Number of sent CONNACK packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.connect.received": {
            "description": "Number of received CONNECT packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.disconnect.received": {
            "description": "Number of received DISCONNECT packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.disconnect.sent": {
            "description": "Number of sent DISCONNECT packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pingreq.received": {
            "description": "Number of received PINGREQ packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pingresp.sent": {
            "description": "Number of sent PUBRESP packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.puback.inuse": {
            "description": "Number of received PUBACK packet with occupied identifiers",
            "minimum": 0,
            "type": "integer"
          },
          "packets.puback.missed": {
            "description": "Number of received packet with identifiers.",
            "minimum": 0,
            "type": "integer"
          },
          "packets.puback.received": {
            "description": "Number of received PUBACK packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.puback.sent": {
            "description": "Number of sent PUBACK packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubcomp.inuse": {
            "description": "Number of received PUBCOMP packet with occupied identifiers",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubcomp.missed": {
            "description": "Number of missed PUBCOMP packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubcomp.received": {
            "description": "Number of received PUBCOMP packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubcomp.sent": {
            "description": "Number of sent PUBCOMP packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.publish.auth_error": {
            "description": "Number of received PUBLISH packets with failed the Authorization check",
            "minimum": 0,
            "type": "integer"
          },
          "packets.publish.dropped": {
            "description": "Number of messages discarded due to the receiving limit",
            "minimum": 0,
            "type": "integer"
          },
          "packets.publish.error": {
            "description": "Number of received PUBLISH packet that cannot be published",
            "minimum": 0,
            "type": "integer"
          },
          "packets.publish.inuse": {
            "description": "Number of received PUBLISH packet with occupied identifiers",
            "minimum": 0,
            "type": "integer"
          },
          "packets.publish.received": {
            "description": "Number of received PUBLISH packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.publish.sent": {
            "description": "Number of sent PUBLISH packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubrec.inuse": {
            "description": "Number of received PUBREC packet with occupied identifiers",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubrec.missed": {
            "description": "Number of received PUBREC packet with unknown identifiers",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubrec.received": {
            "description": "Number of received PUBREC packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubrec.sent": {
            "description": "Number of sent PUBREC packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubrel.missed": {
            "description": "Number of received PUBREC packet with unknown identifiers",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubrel.received": {
            "description": "Number of received PUBREL packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.pubrel.sent": {
            "description": "Number of sent PUBREL packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.received": {
            "description": "Number of received packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.sent": {
            "description": "Number of sent packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.suback.sent": {
            "description": "Number of sent SUBACK packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.subscribe.auth_error": {
            "description": "Number of received SUBACK packet with failed Authorization check",
            "minimum": 0,
            "type": "integer"
          },
          "packets.subscribe.error": {
            "description": "Number of received SUBSCRIBE packet with failed subscriptions",
            "minimum": 0,
            "type": "integer"
          },
          "packets.subscribe.received": {
            "description": "Number of received SUBSCRIBE packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.unsuback.sent": {
            "description": "Number of sent UNSUBACK packet",
            "minimum": 0,
            "type": "integer"
          },
          "packets.unsubscribe.error": {
            "description": "Number of received UNSUBSCRIBE packet with failed unsubscriptions",
            "minimum": 0,
            "type": "integer"
          },
          "packets.unsubscribe.received": {
            "description": "Number of received UNSUBSCRIBE packet",
            "minimum": 0,
            "type": "integer"
          },
          "rules.matched": {
            "description": "Number of rule matched",
            "minimum": 0,
            "type": "integer"
          },
          "session.created": {
            "description": "Number of sessions created",
            "minimum": 0,
            "type": "integer"
          },
          "session.discarded": {
            "description": "Number of sessions dropped because Clean Session or Clean Start is true",
            "minimum": 0,
            "type": "integer"
          },
          "session.resumed": {
            "description": "Number of sessions resumed because Clean Session or Clean Start is false",
            "minimum": 0,
            "type": "integer"
          },
          "session.takenover": {
            "description": "Number of sessions takenover because Clean Session or Clean Start is false",
            "minimum": 0,
            "type": "integer"
          },
          "session.terminated": {
            "description": "Number of terminated sessions",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "listeners.quic_not_required_bind": {
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "quic"
            ],
            "type": "string"
          },
          "running": {
            "description": "Listener status",
            "type": "boolean"
          },
          "id": {
            "description": "Listener id",
            "type": "string"
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          },
          "bind": {
            "default": 14567,
            "description": "监听套接字的 IP 地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "ciphers": {
            "default": [
              "TLS_AES_256_GCM_SHA384",
              "TLS_AES_128_GCM_SHA256",
              "TLS_CHACHA20_POLY1305_SHA256"
            ],
            "description": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。<br/><br/><br/>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。<br/>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。<br/><br/>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。<br/>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/><br/>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。<br/>不兼容的密码套件将被自动删除。<br/><br/>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。<br/><br/><br/><br/>注：PSK 的 Ciphers 不支持 tlsv1.3<br/><br/>如果打算使用PSK密码套件，<code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。<br/><br/><br/><br/>PSK 密码套件：<br/><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/><br/><br/>注：QUIC 监听器不支持 tlsv1.3 的 ciphers",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ssl_options": {
            "description": "QUIC 传输层的 TLS 选项",
            "$ref": "#/components/schemas/broker.listener_quic_ssl_opts"
          },
          "enable": {
            "default": true,
            "description": "启停监听器。",
            "type": "boolean"
          },
          "acceptors": {
            "default": 16,
            "description": "监听器接收池的大小。",
            "minimum": 1,
            "type": "integer"
          },
          "max_connections": {
            "default": "infinity",
            "description": "监听器允许的最大并发连接数。",
            "oneOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。<br/><br/>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。<br/><br/>例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/><br/>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/><br/><br/>设置为<code>\"\"</code> 以禁用该功能<br/><br/><br/>mountpoint 字符串中的变量：<br/>- <code>${clientid}</code>: clientid<br/>- <code>${username}</code>: username",
            "type": "string"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。<br/>配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。<br/>配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名<br/>客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "type": "string"
          },
          "max_conn_rate": {
            "description": "Maximum connection rate.<br/><br/>This is used to limit the connection rate for this listener,<br/>once the limit is reached, new connections will be deferred or refused",
            "example": "1000/s",
            "type": "string"
          },
          "messages_rate": {
            "description": "Messages publish rate.<br/><br/>This is used to limit the inbound message numbers for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "1000/s",
            "type": "string"
          },
          "bytes_rate": {
            "description": "Data publish rate.<br/><br/>This is used to limit the inbound bytes rate for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "100MB/s",
            "type": "string"
          }
        },
        "type": "object"
      },
      "retainer.message": {
        "properties": {
          "payload": {
            "description": "消息内容",
            "type": "string"
          },
          "msgid": {
            "description": "消息 ID",
            "type": "string"
          },
          "topic": {
            "description": "主题",
            "type": "string"
          },
          "qos": {
            "description": "QoS",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          },
          "publish_at": {
            "description": "消息发送时间, RFC 3339 格式",
            "type": "string"
          },
          "from_clientid": {
            "description": "发布者的 ClientID",
            "type": "string"
          },
          "from_username": {
            "description": "发布者的用户名",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_authn_schema.node_status": {
        "properties": {
          "node": {
            "description": "节点名称。",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "status": {
            "description": "每个节点上资源的状态。",
            "enum": [
              "connected",
              "disconnected",
              "connecting"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "exhook.server_config": {
        "required": [
          "name",
          "url"
        ],
        "properties": {
          "name": {
            "description": "ExHook 服务器名称",
            "example": "default",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "开启这个 Exhook 服务器",
            "type": "boolean"
          },
          "url": {
            "description": "gRPC 服务器地址",
            "example": "http://127.0.0.1:9000",
            "type": "string"
          },
          "request_timeout": {
            "default": "5s",
            "description": "gRPC 服务器请求超时时间",
            "example": "12m",
            "type": "string"
          },
          "failed_action": {
            "default": "deny",
            "description": "当 gRPC 请求失败后的操作",
            "enum": [
              "deny",
              "ignore"
            ],
            "type": "string"
          },
          "ssl": {
            "$ref": "#/components/schemas/exhook.ssl_conf"
          },
          "socket_options": {
            "default": {
              "keepalive": true,
              "nodelay": true
            },
            "$ref": "#/components/schemas/exhook.socket_options"
          },
          "auto_reconnect": {
            "default": "60s",
            "description": "自动重连到 gRPC 服务器的设置。<br/>当 gRPC 服务器不可用时，Exhook 将会按照这里设置的间隔时间进行重连，并重新初始化注册的钩子",
            "oneOf": [
              {
                "example": "12m",
                "type": "string"
              },
              {
                "enum": [
                  false
                ],
                "type": "string"
              }
            ]
          },
          "pool_size": {
            "default": 8,
            "description": "gRPC 客户端进程池大小",
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.ctx_sub": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "description": "事件类型",
            "enum": [
              "session_subscribed"
            ],
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "username": {
            "description": "用户名",
            "type": "string"
          },
          "payload": {
            "description": "消息负载",
            "type": "string"
          },
          "peerhost": {
            "description": "对等客户端的 IP 地址",
            "type": "string"
          },
          "topic": {
            "description": "消息主题",
            "type": "string"
          },
          "publish_received_at": {
            "description": "消息被接受的时间",
            "type": "integer"
          },
          "qos": {
            "description": "消息的 QoS",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "gateway.clientinfo_override": {
        "properties": {
          "username": {
            "description": "username 重写模板",
            "type": "string"
          },
          "password": {
            "description": "password 重写模板",
            "format": "password",
            "type": "string"
          },
          "clientid": {
            "description": "clientid 重写模板",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.rule_events": {
        "required": [
          "event"
        ],
        "properties": {
          "event": {
            "description": "事件主题",
            "enum": [
              "$events/client_connected",
              "$events/client_disconnected",
              "$events/client_connack",
              "$events/client_check_authz_complete",
              "$events/session_subscribed",
              "$events/session_unsubscribed",
              "$events/message_delivered",
              "$events/message_acked",
              "$events/message_dropped",
              "$events/delivery_dropped"
            ],
            "type": "string"
          },
          "title": {
            "description": "标题",
            "example": "some title",
            "type": "string"
          },
          "description": {
            "description": "描述",
            "example": "some desc",
            "type": "string"
          },
          "columns": {
            "description": "列",
            "example": {},
            "type": "object"
          },
          "test_columns": {
            "description": "测试列",
            "example": {},
            "type": "object"
          },
          "sql_example": {
            "description": "SQL 例子",
            "type": "string"
          }
        },
        "type": "object"
      },
      "authn.scram": {
        "required": [
          "backend",
          "mechanism"
        ],
        "properties": {
          "mechanism": {
            "description": "认证机制。",
            "enum": [
              "scram"
            ],
            "type": "string"
          },
          "backend": {
            "description": "后端类型。",
            "enum": [
              "built_in_database"
            ],
            "type": "string"
          },
          "algorithm": {
            "default": "sha256",
            "description": "Hashing algorithm.",
            "enum": [
              "sha256",
              "sha512"
            ],
            "type": "string"
          },
          "iteration_count": {
            "default": 4096,
            "description": "Iteration count.",
            "minimum": 0,
            "type": "integer"
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "exhook.socket_options": {
        "properties": {
          "keepalive": {
            "default": true,
            "description": "当没有其他数据交换时，是否向连接的对端套接字定期的发送探测包。如果另一端没有响应，则认为连接断开，并向控制进程发送错误消息",
            "type": "boolean"
          },
          "nodelay": {
            "default": true,
            "description": "如果为 true，则为套接字设置 TCP_NODELAY 选项，这意味着会立即发送数据包",
            "type": "boolean"
          },
          "recbuf": {
            "description": "套接字的最小接收缓冲区大小",
            "example": "64KB",
            "type": "string"
          },
          "sndbuf": {
            "description": "套接字的最小发送缓冲区大小",
            "example": "16KB",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_clients.keepalive": {
        "properties": {
          "interval": {
            "description": "Keepalive time, with the unit of second",
            "maximum": 65535,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "listeners.status": {
        "required": [
          "running"
        ],
        "properties": {
          "running": {
            "description": "Listener running status",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "enum": [
                  "inconsistent"
                ],
                "type": "string"
              }
            ]
          },
          "max_connections": {
            "description": "Max connections",
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "listeners.ws_not_required_bind": {
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "ws"
            ],
            "type": "string"
          },
          "running": {
            "description": "Listener status",
            "type": "boolean"
          },
          "id": {
            "description": "Listener id",
            "type": "string"
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          },
          "bind": {
            "default": 8083,
            "description": "监听套接字的 IP 地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "启停监听器。",
            "type": "boolean"
          },
          "acceptors": {
            "default": 16,
            "description": "监听器接收池的大小。",
            "minimum": 1,
            "type": "integer"
          },
          "max_connections": {
            "default": "infinity",
            "description": "监听器允许的最大并发连接数。",
            "oneOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。<br/><br/>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。<br/><br/>例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/><br/>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/><br/><br/>设置为<code>\"\"</code> 以禁用该功能<br/><br/><br/>mountpoint 字符串中的变量：<br/>- <code>${clientid}</code>: clientid<br/>- <code>${username}</code>: username",
            "type": "string"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。<br/>配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。<br/>配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名<br/>客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "type": "string"
          },
          "max_conn_rate": {
            "description": "Maximum connection rate.<br/><br/>This is used to limit the connection rate for this listener,<br/>once the limit is reached, new connections will be deferred or refused",
            "example": "1000/s",
            "type": "string"
          },
          "messages_rate": {
            "description": "Messages publish rate.<br/><br/>This is used to limit the inbound message numbers for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "1000/s",
            "type": "string"
          },
          "bytes_rate": {
            "description": "Data publish rate.<br/><br/>This is used to limit the inbound bytes rate for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "100MB/s",
            "type": "string"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "description": "此监听器的访问控制规则。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "proxy_protocol": {
            "default": false,
            "description": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/><br/>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "description": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
            "example": "12m",
            "type": "string"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/broker.tcp_opts"
          },
          "websocket": {
            "$ref": "#/components/schemas/broker.ws_opts"
          }
        },
        "type": "object"
      },
      "connector-mqtt.egress": {
        "required": [
          "remote"
        ],
        "properties": {
          "pool_size": {
            "default": 8,
            "description": "Size of the pool of MQTT clients that will publish messages to the remote broker.<br/><br/>Each MQTT client will be assigned 'clientid' of the form '${clientid_prefix}:${bridge_name}:egress:${node}:${n}'<br/>where 'n' is the number of a client inside the pool.",
            "minimum": 1,
            "type": "integer"
          },
          "local": {
            "description": "The configs about receiving messages from local broker.",
            "$ref": "#/components/schemas/connector-mqtt.egress_local"
          },
          "remote": {
            "description": "The configs about sending message to the remote broker.",
            "$ref": "#/components/schemas/connector-mqtt.egress_remote"
          }
        },
        "type": "object"
      },
      "emqx_authn_api.request_user_update": {
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "type": "string"
          },
          "is_superuser": {
            "default": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "broker.force_gc": {
        "properties": {
          "enable": {
            "default": true,
            "description": "启用强制垃圾回收。",
            "type": "boolean"
          },
          "count": {
            "default": 16000,
            "description": "在进程收到多少消息之后，对此进程执行垃圾回收。",
            "minimum": 0,
            "type": "integer"
          },
          "bytes": {
            "default": "16MB",
            "description": "在进程处理过多少个字节之后，对此进程执行垃圾回收。",
            "example": "32MB",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_clients.subscription": {
        "properties": {
          "topic": {
            "description": "主题过滤器或主题名称",
            "type": "string"
          },
          "qos": {
            "description": "QoS 等级，枚举：0，1，2",
            "type": "integer"
          },
          "nl": {
            "description": "No Local 选项，枚举：0，1",
            "type": "integer"
          },
          "rap": {
            "description": "Retain as Published 选项，枚举：0，1",
            "type": "integer"
          },
          "rh": {
            "description": "Retain Handling 选项，枚举：0，1，2",
            "type": "integer"
          },
          "sub_props": {
            "description": "订阅属性",
            "$ref": "#/components/schemas/emqx_gateway_api_clients.extra_sub_props"
          }
        },
        "type": "object"
      },
      "authn.jwt_jwks": {
        "required": [
          "endpoint",
          "mechanism",
          "use_jwks"
        ],
        "properties": {
          "use_jwks": {
            "description": "是否使用 JWKS。",
            "enum": [
              true
            ],
            "type": "string"
          },
          "endpoint": {
            "description": "JWKS 端点， 它是一个以 JWKS 格式返回服务端的公钥集的只读端点。",
            "type": "string"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "refresh_interval": {
            "default": 300,
            "description": "JWKS 刷新间隔。",
            "type": "integer"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL 选项。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          },
          "mechanism": {
            "description": "认证机制。",
            "enum": [
              "jwt"
            ],
            "type": "string"
          },
          "acl_claim_name": {
            "default": "acl",
            "description": "JWT claim name to use for getting ACL rules.",
            "type": "string"
          },
          "verify_claims": {
            "default": [],
            "description": "需要验证的自定义声明列表，它是一个名称/值对列表。<br/>值可以使用以下占位符：<br/>- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名<br/>- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符<br/>认证时将验证 JWT（取自 Password 字段）中 claims 的值是否与 <code>verify_claims</code> 中要求的相匹配。",
            "items": {
              "example": "any",
              "type": "string"
            },
            "type": "array"
          },
          "from": {
            "default": "password",
            "description": "指定客户端连接请求中 JWT 的位置；可选值： password、 username（分别对应于 MQTT 客户端 CONNECT 报文中的 Password 和 Username 字段）",
            "enum": [
              "username",
              "password"
            ],
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.ssl_listener": {
        "properties": {
          "id": {
            "description": "监听器 ID",
            "type": "string"
          },
          "type": {
            "description": "监听器类型",
            "enum": [
              "ssl"
            ],
            "type": "string"
          },
          "name": {
            "description": "监听器名称",
            "type": "string"
          },
          "running": {
            "description": "监听器运行状态",
            "type": "boolean"
          },
          "acceptors": {
            "default": 16,
            "description": "Acceptor 进程池大小。",
            "type": "integer"
          },
          "tcp_options": {
            "description": "TCP Socket 配置。",
            "$ref": "#/components/schemas/broker.tcp_opts"
          },
          "proxy_protocol": {
            "default": false,
            "description": "是否开启 Proxy Protocol V1/2。当 EMQX 集群部署在 HAProxy 或 Nginx 后需要获取客户端真实 IP 时常用到该选项。参考：https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "15s",
            "description": "接收 Proxy Protocol 报文头的超时时间。如果在超时内没有收到 Proxy Protocol 包，EMQX 将关闭 TCP 连接。",
            "example": "12m",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "是否启用该监听器。",
            "type": "boolean"
          },
          "bind": {
            "description": "监听器绑定的 IP 地址或端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "max_connections": {
            "default": 1024,
            "description": "监听器支持的最大连接数。",
            "oneOf": [
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              },
              {
                "minimum": 1,
                "type": "integer"
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "description": "监听器支持的最大连接速率。",
            "type": "integer"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证。<br/>配置 <code>false</code> 时，将不对客户端做任何认证。",
            "type": "boolean"
          },
          "mountpoint": {
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "access_rules": {
            "default": [],
            "description": "配置监听器的访问控制规则。<br/>见：https://github.com/emqtt/esockd#allowdeny",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ssl_options": {
            "description": "SSL Socket 配置。",
            "$ref": "#/components/schemas/broker.listener_ssl_opts"
          }
        },
        "type": "object"
      },
      "authn.mongo_sharded": {
        "required": [
          "backend",
          "collection",
          "database",
          "mechanism",
          "servers"
        ],
        "properties": {
          "mechanism": {
            "description": "认证机制。",
            "enum": [
              "password_based"
            ],
            "type": "string"
          },
          "backend": {
            "description": "后端类型。",
            "enum": [
              "mongodb"
            ],
            "type": "string"
          },
          "collection": {
            "description": "存储认证数据的集合。",
            "type": "string"
          },
          "filter": {
            "default": {},
            "description": "在查询中定义过滤条件的条件表达式。<br/>过滤器支持如下占位符：<br/>- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名<br/>- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符",
            "example": {},
            "type": "object"
          },
          "password_hash_field": {
            "default": "password_hash",
            "description": "文档中用于存放密码散列的字段。",
            "type": "string"
          },
          "salt_field": {
            "default": "salt",
            "description": "文档中用于存放盐值的字段。",
            "type": "string"
          },
          "is_superuser_field": {
            "default": "is_superuser",
            "description": "文档中用于定义用户是否具有超级用户权限的字段。",
            "type": "string"
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn-hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn-hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn-hash.bcrypt"
              }
            ]
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
            "type": "boolean"
          },
          "mongo_type": {
            "default": "sharded",
            "description": "Sharded cluster模式。当 MongoDB 服务运行在 sharded 模式下，该配置必须设置为 'sharded'。",
            "enum": [
              "sharded"
            ],
            "type": "string"
          },
          "servers": {
            "description": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`<br/>每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机名具有以下形式：`Host[:Port]`。<br/>如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
            "type": "string"
          },
          "w_mode": {
            "default": "unsafe",
            "description": "写模式。",
            "enum": [
              "unsafe",
              "safe"
            ],
            "type": "string"
          },
          "srv_record": {
            "default": false,
            "description": "使用 DNS SRV 记录。",
            "type": "boolean"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "username": {
            "description": "内部数据库的用户名。",
            "type": "string"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported.",
            "enum": [
              "auto",
              true,
              false
            ],
            "type": "string"
          },
          "auth_source": {
            "description": "与用户证书关联的数据库名称。",
            "type": "string"
          },
          "database": {
            "description": "数据库名字。",
            "type": "string"
          },
          "topology": {
            "$ref": "#/components/schemas/emqx_mongodb.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_schema.http_post": {
        "required": [
          "method",
          "type",
          "url"
        ],
        "properties": {
          "method": {
            "default": "post",
            "description": "HTTP 请求方法。",
            "enum": [
              "post"
            ],
            "type": "string"
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=30, max=1000"
            },
            "description": "HTTP Headers 列表",
            "example": {},
            "type": "object"
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源。",
            "type": "boolean"
          },
          "type": {
            "default": "http",
            "description": "数据后端类型。",
            "enum": [
              "http"
            ],
            "type": "string"
          },
          "url": {
            "description": "认证服务器 URL。",
            "type": "string"
          },
          "body": {
            "description": "HTTP 请求体。",
            "example": {},
            "type": "object"
          },
          "request_timeout": {
            "default": "30s",
            "description": "请求超时时间。",
            "type": "string"
          },
          "connect_timeout": {
            "default": "15s",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s",
            "type": "string"
          },
          "enable_pipelining": {
            "default": 100,
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1,
            "type": "integer"
          },
          "max_retries": {
            "deprecated": true,
            "minimum": 0,
            "type": "integer"
          },
          "pool_size": {
            "default": 8,
            "description": "The pool size.",
            "minimum": 1,
            "type": "integer"
          },
          "request": {
            "description": "Configure HTTP request parameters.",
            "$ref": "#/components/schemas/connector-http.request"
          },
          "retry_interval": {
            "deprecated": true,
            "example": "12m",
            "type": "string"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "retainer.mnesia_config": {
        "properties": {
          "type": {
            "default": "built_in_database",
            "description": "后端类型",
            "enum": [
              "built_in_database"
            ],
            "type": "string"
          },
          "storage_type": {
            "default": "ram",
            "description": "选择消息是存放在磁盘还是内存中",
            "enum": [
              "ram",
              "disc"
            ],
            "type": "string"
          },
          "max_retained_messages": {
            "default": 0,
            "description": "消息保留的数量上限。0 表示无限",
            "minimum": 0,
            "type": "integer"
          },
          "index_specs": {
            "default": [
              [
                1,
                2,
                3
              ],
              [
                1,
                3
              ],
              [
                2,
                3
              ],
              [
                3
              ]
            ],
            "description": "Retainer index specifications: list of arrays of positive ascending integers. Each array specifies an index. Numbers in an index specification are 1-based word positions in topics. Words from specified positions will be used for indexing.<br/>For example, it is good to have <code>[2, 4]</code> index to optimize <code>+/X/+/Y/...</code> topic wildcard subscriptions.",
            "example": [
              [
                2,
                4
              ],
              [
                1,
                3
              ]
            ],
            "items": {
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "emqx_conf_schema.console_handler": {
        "properties": {
          "level": {
            "default": "warning",
            "description": "当前日志处理进程的日志级别。<br/>默认为 warning 级别。",
            "enum": [
              "debug",
              "info",
              "notice",
              "warning",
              "error",
              "critical",
              "alert",
              "emergency",
              "all"
            ],
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "启用此日志处理进程。",
            "type": "boolean"
          },
          "formatter": {
            "default": "text",
            "description": "选择日志格式类型。 <code>text</code> 用于纯文本，<code>json</code> 用于结构化日志记录。",
            "enum": [
              "text",
              "json"
            ],
            "type": "string"
          },
          "time_offset": {
            "default": "system",
            "description": "日志中的时间戳使用的时间偏移量。<br/>可选值为：<br/>  - <code>system</code>: 本地系统使用的时区偏移量<br/>  - <code>utc</code>: 0 时区的偏移量<br/>  - <code>+-[hh]:[mm]</code>: 自定义偏移量，比如 \"-02:00\" 或者 \"+00:00\"<br/>默认值为本地系统的时区偏移量：<code>system</code>。",
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_webhook.get": {
        "required": [
          "name",
          "type",
          "url"
        ],
        "properties": {
          "status": {
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "type": "string"
          },
          "status_reason": {
            "description": "桥接连接失败的原因。",
            "example": "Connection refused",
            "type": "string"
          },
          "node_status": {
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            },
            "type": "array"
          },
          "type": {
            "description": "The Bridge Type",
            "enum": [
              "webhook"
            ],
            "type": "string"
          },
          "name": {
            "description": "Bridge name, used as a human-readable description of the bridge.",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "Enable or disable this bridge",
            "type": "boolean"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_webhook.creation_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s",
            "type": "string"
          },
          "retry_interval": {
            "deprecated": true,
            "example": "12m",
            "type": "string"
          },
          "pool_type": {
            "default": "random",
            "description": "The type of the pool. Can be one of `random`, `hash`.",
            "enum": [
              "random",
              "hash"
            ],
            "type": "string"
          },
          "pool_size": {
            "default": 8,
            "description": "The pool size.",
            "minimum": 1,
            "type": "integer"
          },
          "enable_pipelining": {
            "default": 100,
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1,
            "type": "integer"
          },
          "request": {
            "description": "Configure HTTP request parameters.",
            "$ref": "#/components/schemas/connector-http.request"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          },
          "url": {
            "description": "The URL of the HTTP Bridge.<br/><br/>Template with variables is allowed in the path, but variables cannot be used in the scheme, host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic} </code> is allowed, but<br/><code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code><br/>is not allowed.",
            "type": "string"
          },
          "direction": {
            "deprecated": true,
            "description": "Deprecated, The direction of this bridge, MUST be 'egress'",
            "enum": [
              "egress"
            ],
            "type": "string"
          },
          "local_topic": {
            "description": "The MQTT topic filter to be forwarded to the HTTP server. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
            "type": "string"
          },
          "method": {
            "default": "post",
            "description": "The method of the HTTP request. All the available methods are: post, put, get, delete.<br/><br/>Template with variables is allowed.",
            "enum": [
              "post",
              "put",
              "get",
              "delete"
            ],
            "type": "string"
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "description": "The headers of the HTTP request.<br/><br/>Template with variables is allowed.",
            "example": {},
            "type": "object"
          },
          "body": {
            "description": "The body of the HTTP request.<br/><br/>If not provided, the body will be a JSON object of all the available fields.<br/><br/>There, 'all the available fields' means the context of a MQTT message when<br/>this webhook is triggered by receiving a MQTT message (the `local_topic` is set),<br/>or the context of the event when this webhook is triggered by a rule (i.e. this<br/>webhook is used as an action of a rule).<br/><br/>Template with variables is allowed.",
            "type": "string"
          },
          "max_retries": {
            "default": 2,
            "description": "HTTP request max retry times if failed.",
            "minimum": 0,
            "type": "integer"
          },
          "request_timeout": {
            "default": "15s",
            "deprecated": true,
            "description": "HTTP request timeout.",
            "example": "32s",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_authn_schema.metrics_status_fields": {
        "properties": {
          "resource_metrics": {
            "description": "资源统计指标。",
            "$ref": "#/components/schemas/emqx_authn_schema.resource_metrics"
          },
          "node_resource_metrics": {
            "description": "每个节点上资源的统计指标。",
            "$ref": "#/components/schemas/emqx_authn_schema.node_resource_metrics"
          },
          "metrics": {
            "description": "资源统计指标。",
            "$ref": "#/components/schemas/emqx_authn_schema.metrics"
          },
          "node_metrics": {
            "description": "每个节点上资源的统计指标。",
            "$ref": "#/components/schemas/emqx_authn_schema.node_metrics"
          },
          "status": {
            "description": "资源状态。",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "type": "string"
          },
          "node_status": {
            "description": "每个节点上资源的状态。",
            "$ref": "#/components/schemas/emqx_authn_schema.node_status"
          },
          "node_error": {
            "description": "节点上产生的错误。",
            "$ref": "#/components/schemas/emqx_authn_schema.node_error"
          }
        },
        "type": "object"
      },
      "listeners.tcp_not_required_bind": {
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "tcp"
            ],
            "type": "string"
          },
          "running": {
            "description": "Listener status",
            "type": "boolean"
          },
          "id": {
            "description": "Listener id",
            "type": "string"
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          },
          "bind": {
            "default": 1883,
            "description": "监听套接字的 IP 地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "启停监听器。",
            "type": "boolean"
          },
          "acceptors": {
            "default": 16,
            "description": "监听器接收池的大小。",
            "minimum": 1,
            "type": "integer"
          },
          "max_connections": {
            "default": "infinity",
            "description": "监听器允许的最大并发连接数。",
            "oneOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。<br/><br/>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。<br/><br/>例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/><br/>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/><br/><br/>设置为<code>\"\"</code> 以禁用该功能<br/><br/><br/>mountpoint 字符串中的变量：<br/>- <code>${clientid}</code>: clientid<br/>- <code>${username}</code>: username",
            "type": "string"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。<br/>配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。<br/>配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名<br/>客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "type": "string"
          },
          "max_conn_rate": {
            "description": "Maximum connection rate.<br/><br/>This is used to limit the connection rate for this listener,<br/>once the limit is reached, new connections will be deferred or refused",
            "example": "1000/s",
            "type": "string"
          },
          "messages_rate": {
            "description": "Messages publish rate.<br/><br/>This is used to limit the inbound message numbers for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "1000/s",
            "type": "string"
          },
          "bytes_rate": {
            "description": "Data publish rate.<br/><br/>This is used to limit the inbound bytes rate for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "100MB/s",
            "type": "string"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "description": "此监听器的访问控制规则。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "proxy_protocol": {
            "default": false,
            "description": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/><br/>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "description": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
            "example": "12m",
            "type": "string"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/broker.tcp_opts"
          }
        },
        "type": "object"
      },
      "public.meta": {
        "required": [
          "hasnext"
        ],
        "properties": {
          "page": {
            "default": 1,
            "description": "Page number of the results to fetch.",
            "example": 1,
            "minimum": 1,
            "type": "integer"
          },
          "limit": {
            "default": 100,
            "description": "Results per page(max 1000)",
            "example": 50,
            "maximum": 1000,
            "minimum": 1,
            "type": "integer"
          },
          "count": {
            "description": "Total number of records matching the query.<br/>Note: this field is present only if the query can be optimized and does not require a full table scan.",
            "minimum": 0,
            "type": "integer"
          },
          "hasnext": {
            "description": "Flag indicating whether there are more results available on next pages.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_clients.extra_sub_props": {
        "properties": {
          "subid": {
            "description": "订阅ID，仅用于 Stomp 网关。用于创建订阅关系时指定订阅 ID。取值范围 1-65535。",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_telemetry_api.status": {
        "properties": {
          "enable": {
            "default": true,
            "description": "启用遥测",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "authn-hash.bcrypt_rw": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "BCRYPT password hashing.",
            "enum": [
              "bcrypt"
            ],
            "type": "string"
          },
          "salt_rounds": {
            "default": 10,
            "description": "Salt rounds for BCRYPT password generation.",
            "example": 10,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_mqttsn_schema.mqttsn_predefined": {
        "required": [
          "id",
          "topic"
        ],
        "properties": {
          "id": {
            "description": "主题 ID。范围：1-65535",
            "maximum": 1024,
            "minimum": 1,
            "type": "integer"
          },
          "topic": {
            "description": "主题名称。注：不支持通配符",
            "type": "string"
          }
        },
        "type": "object"
      },
      "broker.event_names": {
        "properties": {
          "client_connected": {
            "default": true,
            "description": "是否开启客户端已连接事件消息。",
            "type": "boolean"
          },
          "client_disconnected": {
            "default": true,
            "description": "是否开启客户端已断开连接事件消息。",
            "type": "boolean"
          },
          "client_subscribed": {
            "default": false,
            "description": "是否开启客户端已成功订阅主题事件消息。",
            "type": "boolean"
          },
          "client_unsubscribed": {
            "default": false,
            "description": "是否开启客户端已成功取消订阅主题事件消息。",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "gateway.dtls_opts": {
        "properties": {
          "cacertfile": {
            "default": "${EMQX_ETC_DIR}/certs/cacert.pem",
            "description": "受信任的PEM格式 CA  证书捆绑文件<br/><br/>此文件中的证书用于验证TLS对等方的证书。<br/>如果要信任新 CA，请将新证书附加到文件中。<br/>无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/><br/>注意：从文件中失效（删除）证书不会影响已建立的连接。",
            "type": "string"
          },
          "cacerts": {
            "default": false,
            "deprecated": true,
            "type": "boolean"
          },
          "certfile": {
            "default": "${EMQX_ETC_DIR}/certs/cert.pem",
            "description": "PEM格式证书链文件<br/><br/>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，<br/>然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。<br/>根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
            "type": "string"
          },
          "keyfile": {
            "default": "${EMQX_ETC_DIR}/certs/key.pem",
            "description": "PEM格式的私钥文件。",
            "type": "string"
          },
          "verify": {
            "default": "verify_none",
            "description": "启用或禁用对等验证。",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "type": "string"
          },
          "reuse_sessions": {
            "default": true,
            "description": "启用 TLS 会话重用。",
            "type": "boolean"
          },
          "depth": {
            "default": 10,
            "description": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。<br/>因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/><br/>如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/><br/>如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
            "minimum": 0,
            "type": "integer"
          },
          "password": {
            "description": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
            "example": "",
            "format": "password",
            "type": "string"
          },
          "versions": {
            "default": [
              "dtlsv1.2"
            ],
            "description": "支持所有TLS/DTLS版本<br/><br/>注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ciphers": {
            "default": [],
            "description": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。<br/><br/><br/>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。<br/>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。<br/><br/>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。<br/>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/><br/>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。<br/>不兼容的密码套件将被自动删除。<br/><br/>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。<br/><br/><br/><br/>注：PSK 的 Ciphers 不支持 tlsv1.3<br/><br/>如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。<br/><br/><br/><br/>PSK 密码套件：<br/><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "secure_renegotiate": {
            "default": true,
            "description": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。<br/>RFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
            "type": "boolean"
          },
          "log_level": {
            "default": "notice",
            "description": "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "type": "string"
          },
          "hibernate_after": {
            "default": "5s",
            "description": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
            "example": "12m",
            "type": "string"
          },
          "dhfile": {
            "description": "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/><br/>注意：TLS 1.3不支持<code>dhfile</code>选项。",
            "type": "string"
          },
          "fail_if_no_peer_cert": {
            "default": false,
            "description": "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。<br/>如果设置为true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。<br/>如果设置为false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
            "type": "boolean"
          },
          "honor_cipher_order": {
            "default": true,
            "description": "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
            "type": "boolean"
          },
          "client_renegotiation": {
            "default": true,
            "description": "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。<br/>这可能会成为拒绝服务攻击的载体。<br/>SSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。<br/>默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
            "type": "boolean"
          },
          "handshake_timeout": {
            "default": "15s",
            "description": "握手完成所允许的最长时间",
            "example": "12m",
            "type": "string"
          },
          "gc_after_handshake": {
            "default": false,
            "description": "内存使用调优。如果启用，将在TLS/SSL握手完成后立即执行垃圾回收。TLS/SSL握手建立后立即进行GC。",
            "type": "boolean"
          },
          "ocsp": {
            "$ref": "#/components/schemas/broker.ocsp"
          },
          "enable_crl_check": {
            "default": false,
            "description": "是否为该监听器启用 CRL 检查。",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "cluster.replicant_info": {
        "properties": {
          "node": {
            "description": "Replicant node name",
            "example": "emqx-replicant@127.0.0.2",
            "type": "string"
          },
          "streams": {
            "description": "The number of RLOG (replicated log) streams",
            "example": "10",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "broker.force_shutdown": {
        "properties": {
          "enable": {
            "default": true,
            "description": "启用 `force_shutdown` 功能。",
            "type": "boolean"
          },
          "max_mailbox_size": {
            "default": 1000,
            "description": "每个在线客户端在 EMQX 服务器中都是独立的一个进程。该配置可以设为单个进程的邮箱消息队列设置最大长度，当超过该上限时，客户端会被强制下线。",
            "minimum": 0,
            "type": "integer"
          },
          "max_heap_size": {
            "default": "32MB",
            "description": "Heap 的总大小。",
            "example": "1024KB",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_clients.stomp_client": {
        "properties": {
          "node": {
            "description": "客户端连接到的节点名称",
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "username": {
            "description": "客户端连接的用户名",
            "type": "string"
          },
          "mountpoint": {
            "description": "主题固定前缀",
            "type": "string"
          },
          "proto_name": {
            "description": "客户端使用的协议名称",
            "type": "string"
          },
          "proto_ver": {
            "description": "客户端使用的协议版本",
            "type": "string"
          },
          "ip_address": {
            "description": "客户端 IP 地址",
            "type": "string"
          },
          "port": {
            "description": "客户端端口",
            "type": "integer"
          },
          "is_bridge": {
            "description": "标识客户端是否通过 is_bridge 标志连接",
            "type": "boolean"
          },
          "connected_at": {
            "description": "客户端连接时间",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "disconnected_at": {
            "description": "客户端连接断开时间",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "connected": {
            "description": "标识客户端是否已连接到网关",
            "type": "boolean"
          },
          "keepalive": {
            "description": "Keepalive 时间，单位：秒",
            "type": "integer"
          },
          "clean_start": {
            "description": "标识客户端是否以 clean_start 的标志连接到网关",
            "type": "boolean"
          },
          "expiry_interval": {
            "description": "会话超期时间，单位：秒",
            "type": "integer"
          },
          "created_at": {
            "description": "会话创建时间",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "subscriptions_cnt": {
            "description": "客户端已订阅主题数",
            "type": "integer"
          },
          "subscriptions_max": {
            "description": "客户端允许订阅的最大主题数",
            "type": "integer"
          },
          "inflight_cnt": {
            "description": "客户端当前飞行窗口大小",
            "type": "integer"
          },
          "inflight_max": {
            "description": "客户端允许的飞行窗口最大值",
            "type": "integer"
          },
          "mqueue_len": {
            "description": "客户端当前消息队列长度",
            "type": "integer"
          },
          "mqueue_max": {
            "description": "客户端允许的最大消息队列长度",
            "type": "integer"
          },
          "mqueue_dropped": {
            "description": "由于消息队列过程，客户端消息队列丢弃消息条数",
            "type": "integer"
          },
          "awaiting_rel_cnt": {
            "description": "客户端当前等待 PUBREL 确认的 PUBREC 消息的条数",
            "type": "integer"
          },
          "awaiting_rel_max": {
            "description": "客户端允许的最大 PUBREC 等待队列长度",
            "type": "integer"
          },
          "recv_oct": {
            "description": "已接收的字节数",
            "type": "integer"
          },
          "recv_cnt": {
            "description": "已接收 Socket 报文次数",
            "type": "integer"
          },
          "recv_pkt": {
            "description": "已接收应用层协议控制报文数",
            "type": "integer"
          },
          "recv_msg": {
            "description": "已接收上行的消息条数",
            "type": "integer"
          },
          "send_oct": {
            "description": "已发送字节数",
            "type": "integer"
          },
          "send_cnt": {
            "description": "已发送 Socket 报文次数",
            "type": "integer"
          },
          "send_pkt": {
            "description": "已发送应用层协议控制报文数",
            "type": "integer"
          },
          "send_msg": {
            "description": "已发送下行消息数条数",
            "type": "integer"
          },
          "mailbox_len": {
            "description": "进程邮箱大小",
            "type": "integer"
          },
          "heap_size": {
            "description": "进程堆内存大小，单位：字节",
            "type": "integer"
          },
          "reductions": {
            "description": "进程已消耗 Reduction 数",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "authn.redis_sentinel": {
        "required": [
          "backend",
          "cmd",
          "mechanism",
          "sentinel",
          "servers"
        ],
        "properties": {
          "mechanism": {
            "description": "认证机制。",
            "enum": [
              "password_based"
            ],
            "type": "string"
          },
          "backend": {
            "description": "后端类型。",
            "enum": [
              "redis"
            ],
            "type": "string"
          },
          "cmd": {
            "description": "用于查询密码散列等用于认证的数据的 Redis Command，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
            "type": "string"
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn-hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn-hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn-hash.bcrypt"
              }
            ]
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
            "type": "boolean"
          },
          "servers": {
            "description": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`<br/>每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机名具有以下形式：`Host[:Port]`。<br/>如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
            "type": "string"
          },
          "redis_type": {
            "default": "sentinel",
            "description": "哨兵模式。当 Redis 服务运行在哨兵模式下，该配置必须设置为 'sentinel'。",
            "enum": [
              "sentinel"
            ],
            "type": "string"
          },
          "sentinel": {
            "description": "Redis 哨兵模式下的集群名称。",
            "type": "string"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "database": {
            "default": 0,
            "description": "Redis 数据库 ID。",
            "minimum": 0,
            "type": "integer"
          },
          "auto_reconnect": {
            "default": true,
            "deprecated": true,
            "description": "已弃用。自动重连数据库。",
            "type": "boolean"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_mnesia.clientid_response_data": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_clientid"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/public.meta"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_nodes.node_info": {
        "properties": {
          "node": {
            "description": "Node name",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "connections": {
            "description": "Number of clients session in this node",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "live_connections": {
            "description": "Number of clients currently connected to this node",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "load1": {
            "description": "CPU average load in 1 minute",
            "example": 2.66,
            "type": "number"
          },
          "load5": {
            "description": "CPU average load in 5 minute",
            "example": 2.66,
            "type": "number"
          },
          "load15": {
            "description": "CPU average load in 15 minute",
            "example": 2.66,
            "type": "number"
          },
          "max_fds": {
            "description": "File descriptors limit",
            "example": 1024,
            "minimum": 0,
            "type": "integer"
          },
          "memory_total": {
            "description": "Allocated memory",
            "example": "512.00M",
            "type": "string"
          },
          "memory_used": {
            "description": "Used memory",
            "example": "256.00M",
            "type": "string"
          },
          "node_status": {
            "description": "Node status",
            "enum": [
              "running",
              "stopped"
            ],
            "example": "running",
            "type": "string"
          },
          "otp_release": {
            "description": "Erlang/OTP version",
            "example": "24.2/12.2",
            "type": "string"
          },
          "process_available": {
            "description": "Erlang processes limit",
            "example": 2097152,
            "minimum": 0,
            "type": "integer"
          },
          "process_used": {
            "description": "Running Erlang processes",
            "example": 1024,
            "minimum": 0,
            "type": "integer"
          },
          "uptime": {
            "description": "System uptime, milliseconds",
            "example": 5120000,
            "minimum": 0,
            "type": "integer"
          },
          "version": {
            "description": "Release version",
            "example": "5.0.0",
            "type": "string"
          },
          "edition": {
            "description": "Release edition",
            "enum": [
              "Opensource",
              "Enterprise"
            ],
            "example": "Opensource",
            "type": "string"
          },
          "sys_path": {
            "description": "Path to system files",
            "example": "path/to/emqx",
            "type": "string"
          },
          "log_path": {
            "description": "Path to log files",
            "example": "path/to/log | The log path is not yet set",
            "type": "string"
          },
          "role": {
            "description": "Node role",
            "enum": [
              "core",
              "replicant"
            ],
            "example": "core",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_delayed_api.message_without_payload": {
        "properties": {
          "msgid": {
            "description": "延迟消息 ID",
            "type": "integer"
          },
          "node": {
            "description": "消息的来源节点",
            "type": "string"
          },
          "publish_at": {
            "description": "客户端发送时间, RFC 3339 格式",
            "type": "string"
          },
          "delayed_interval": {
            "description": "延迟时间(秒)",
            "minimum": 1,
            "type": "integer"
          },
          "delayed_remaining": {
            "description": "剩余时间(秒)",
            "minimum": 0,
            "type": "integer"
          },
          "expected_at": {
            "description": "期望的发送时间, RFC 3339 格式",
            "type": "string"
          },
          "topic": {
            "description": "主题",
            "example": "/sys/#",
            "type": "string"
          },
          "qos": {
            "description": "QoS",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          },
          "from_clientid": {
            "description": "消息的 ClientID",
            "type": "string"
          },
          "from_username": {
            "description": "消息的 Username",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_mnesia.rules": {
        "properties": {
          "rules": {
            "items": {
              "$ref": "#/components/schemas/emqx_authz_api_mnesia.rule_item"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "slow_subscribers_statistics.record": {
        "properties": {
          "clientid": {
            "description": "消息的客户端 ID",
            "type": "string"
          },
          "node": {
            "description": "消息的节点名称",
            "type": "string"
          },
          "topic": {
            "description": "消息的主题",
            "type": "string"
          },
          "timespan": {
            "description": "消息的传输耗时",
            "type": "integer"
          },
          "last_update_time": {
            "description": "记录的更新时间戳",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_clients.mqttsn_client": {
        "properties": {
          "node": {
            "description": "客户端连接到的节点名称",
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "username": {
            "description": "客户端连接的用户名",
            "type": "string"
          },
          "mountpoint": {
            "description": "主题固定前缀",
            "type": "string"
          },
          "proto_name": {
            "description": "客户端使用的协议名称",
            "type": "string"
          },
          "proto_ver": {
            "description": "客户端使用的协议版本",
            "type": "string"
          },
          "ip_address": {
            "description": "客户端 IP 地址",
            "type": "string"
          },
          "port": {
            "description": "客户端端口",
            "type": "integer"
          },
          "is_bridge": {
            "description": "标识客户端是否通过 is_bridge 标志连接",
            "type": "boolean"
          },
          "connected_at": {
            "description": "客户端连接时间",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "disconnected_at": {
            "description": "客户端连接断开时间",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "connected": {
            "description": "标识客户端是否已连接到网关",
            "type": "boolean"
          },
          "keepalive": {
            "description": "Keepalive 时间，单位：秒",
            "type": "integer"
          },
          "clean_start": {
            "description": "标识客户端是否以 clean_start 的标志连接到网关",
            "type": "boolean"
          },
          "expiry_interval": {
            "description": "会话超期时间，单位：秒",
            "type": "integer"
          },
          "created_at": {
            "description": "会话创建时间",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "subscriptions_cnt": {
            "description": "客户端已订阅主题数",
            "type": "integer"
          },
          "subscriptions_max": {
            "description": "客户端允许订阅的最大主题数",
            "type": "integer"
          },
          "inflight_cnt": {
            "description": "客户端当前飞行窗口大小",
            "type": "integer"
          },
          "inflight_max": {
            "description": "客户端允许的飞行窗口最大值",
            "type": "integer"
          },
          "mqueue_len": {
            "description": "客户端当前消息队列长度",
            "type": "integer"
          },
          "mqueue_max": {
            "description": "客户端允许的最大消息队列长度",
            "type": "integer"
          },
          "mqueue_dropped": {
            "description": "由于消息队列过程，客户端消息队列丢弃消息条数",
            "type": "integer"
          },
          "awaiting_rel_cnt": {
            "description": "客户端当前等待 PUBREL 确认的 PUBREC 消息的条数",
            "type": "integer"
          },
          "awaiting_rel_max": {
            "description": "客户端允许的最大 PUBREC 等待队列长度",
            "type": "integer"
          },
          "recv_oct": {
            "description": "已接收的字节数",
            "type": "integer"
          },
          "recv_cnt": {
            "description": "已接收 Socket 报文次数",
            "type": "integer"
          },
          "recv_pkt": {
            "description": "已接收应用层协议控制报文数",
            "type": "integer"
          },
          "recv_msg": {
            "description": "已接收上行的消息条数",
            "type": "integer"
          },
          "send_oct": {
            "description": "已发送字节数",
            "type": "integer"
          },
          "send_cnt": {
            "description": "已发送 Socket 报文次数",
            "type": "integer"
          },
          "send_pkt": {
            "description": "已发送应用层协议控制报文数",
            "type": "integer"
          },
          "send_msg": {
            "description": "已发送下行消息数条数",
            "type": "integer"
          },
          "mailbox_len": {
            "description": "进程邮箱大小",
            "type": "integer"
          },
          "heap_size": {
            "description": "进程堆内存大小，单位：字节",
            "type": "integer"
          },
          "reductions": {
            "description": "进程已消耗 Reduction 数",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_topic_metrics_api.metrics": {
        "properties": {
          "message.dropped.count": {
            "description": "丢弃消息数量",
            "example": 0,
            "type": "integer"
          },
          "message.in.count": {
            "description": "接收消息数量",
            "example": 0,
            "type": "integer"
          },
          "message.out.count": {
            "description": "发送消息数量",
            "example": 0,
            "type": "integer"
          },
          "message.qos0.in.count": {
            "description": "QoS0 接收消息数量",
            "example": 0,
            "type": "integer"
          },
          "message.qos0.out.count": {
            "description": "QoS0 发送消息数量",
            "example": 0,
            "type": "integer"
          },
          "message.qos1.in.count": {
            "description": "QoS1 接收消息数量",
            "example": 0,
            "type": "integer"
          },
          "message.qos1.out.count": {
            "description": "QoS1 发送消息数量",
            "example": 0,
            "type": "integer"
          },
          "message.qos2.in.count": {
            "description": "QoS2 接收消息数量",
            "example": 0,
            "type": "integer"
          },
          "message.qos2.out.count": {
            "description": "QoS2 发送消息数量",
            "example": 0,
            "type": "integer"
          },
          "message.dropped.rate": {
            "description": "丢弃消息速率",
            "example": 0,
            "type": "number"
          },
          "message.in.rate": {
            "description": "接收消息速率",
            "example": 0,
            "type": "number"
          },
          "message.out.rate": {
            "description": "发送消息速率",
            "example": 0,
            "type": "number"
          },
          "message.qos0.in.rate": {
            "description": "QoS0 接收消息速率",
            "example": 0,
            "type": "number"
          },
          "message.qos0.out.rate": {
            "description": "QoS0 发送消息速率",
            "example": 0,
            "type": "number"
          },
          "message.qos1.in.rate": {
            "description": "QoS1 接收消息速率",
            "example": 0,
            "type": "number"
          },
          "message.qos1.out.rate": {
            "description": "QoS1 发送消息速率",
            "example": 0,
            "type": "number"
          },
          "message.qos2.in.rate": {
            "description": "QoS2 接收消息速率",
            "example": 0,
            "type": "number"
          },
          "message.qos2.out.rate": {
            "description": "QoS2 发送消息速率",
            "example": 0,
            "type": "number"
          }
        },
        "type": "object"
      },
      "listeners.ssl_not_required_bind": {
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "ssl"
            ],
            "type": "string"
          },
          "running": {
            "description": "Listener status",
            "type": "boolean"
          },
          "id": {
            "description": "Listener id",
            "type": "string"
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          },
          "bind": {
            "default": 8883,
            "description": "监听套接字的 IP 地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "启停监听器。",
            "type": "boolean"
          },
          "acceptors": {
            "default": 16,
            "description": "监听器接收池的大小。",
            "minimum": 1,
            "type": "integer"
          },
          "max_connections": {
            "default": "infinity",
            "description": "监听器允许的最大并发连接数。",
            "oneOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。<br/><br/>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。<br/><br/>例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/><br/>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/><br/><br/>设置为<code>\"\"</code> 以禁用该功能<br/><br/><br/>mountpoint 字符串中的变量：<br/>- <code>${clientid}</code>: clientid<br/>- <code>${username}</code>: username",
            "type": "string"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。<br/>配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。<br/>配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名<br/>客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "type": "string"
          },
          "max_conn_rate": {
            "description": "Maximum connection rate.<br/><br/>This is used to limit the connection rate for this listener,<br/>once the limit is reached, new connections will be deferred or refused",
            "example": "1000/s",
            "type": "string"
          },
          "messages_rate": {
            "description": "Messages publish rate.<br/><br/>This is used to limit the inbound message numbers for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "1000/s",
            "type": "string"
          },
          "bytes_rate": {
            "description": "Data publish rate.<br/><br/>This is used to limit the inbound bytes rate for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "100MB/s",
            "type": "string"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "description": "此监听器的访问控制规则。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "proxy_protocol": {
            "default": false,
            "description": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/><br/>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "description": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
            "example": "12m",
            "type": "string"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/broker.tcp_opts"
          },
          "ssl_options": {
            "$ref": "#/components/schemas/broker.listener_ssl_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.update_lwm2m": {
        "required": [
          "translators",
          "xml_dir"
        ],
        "properties": {
          "xml_dir": {
            "description": "LwM2M Resource 定义的 XML 文件目录路径。",
            "example": "/etc/emqx/lwm2m_xml",
            "type": "string"
          },
          "lifetime_min": {
            "default": "15s",
            "description": "允许 LwM2M 客户端允许设置的心跳最小值。",
            "example": "12m",
            "type": "string"
          },
          "lifetime_max": {
            "default": "86400s",
            "description": "允许 LwM2M 客户端允许设置的心跳最大值。",
            "example": "12m",
            "type": "string"
          },
          "qmode_time_window": {
            "default": "22s",
            "description": "在QMode模式下，LwM2M网关认为网络链接有效的时间窗口的值。<br/>例如，在收到客户端的更新信息后，在这个时间窗口内的任何信息都会直接发送到LwM2M客户端，而超过这个时间窗口的所有信息都会暂时储存在内存中。",
            "example": "1h",
            "type": "string"
          },
          "auto_observe": {
            "default": false,
            "description": "自动 Observe REGISTER 数据包的 Object 列表。",
            "type": "boolean"
          },
          "update_msg_publish_condition": {
            "default": "contains_object_list",
            "description": "发布UPDATE事件消息的策略。<br/><br/>  - always: 只要收到 UPDATE 请求，就发送更新事件。<br/><br/>  - contains_object_list: 仅当 UPDATE 请求携带 Object 列表时才发送更新事件。",
            "enum": [
              "always",
              "contains_object_list"
            ],
            "type": "string"
          },
          "translators": {
            "description": "LwM2M 网关订阅/发布消息的主题映射配置。",
            "$ref": "#/components/schemas/emqx_lwm2m_schema.lwm2m_translators"
          },
          "mountpoint": {
            "default": "lwm2m/${endpoint_name}/",
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "是否启用该网关",
            "type": "boolean"
          },
          "enable_stats": {
            "default": true,
            "description": "是否开启客户端统计",
            "type": "boolean"
          },
          "idle_timeout": {
            "default": "30s",
            "description": "客户端连接过程的空闲时间。该配置用于：<br/>  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。<br/>  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
            "example": "12m",
            "type": "string"
          },
          "clientinfo_override": {
            "description": "ClientInfo 重写。",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.ctx_bridge_mqtt": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "description": "事件类型",
            "enum": [
              "$bridges/mqtt:*"
            ],
            "type": "string"
          },
          "id": {
            "description": "消息 ID",
            "type": "string"
          },
          "payload": {
            "description": "消息负载",
            "type": "string"
          },
          "topic": {
            "description": "消息主题",
            "type": "string"
          },
          "server": {
            "description": "MQTT broker的 IP 地址（或主机名）和端口，采用 IP:Port 格式",
            "type": "string"
          },
          "dup": {
            "description": "MQTT 消息的 DUP 标志",
            "type": "string"
          },
          "retain": {
            "description": "是否是保留消息",
            "type": "string"
          },
          "message_received_at": {
            "description": "消息被接受的时间",
            "type": "integer"
          },
          "qos": {
            "description": "消息的 QoS",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.ctx_delivered": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "description": "事件类型",
            "enum": [
              "message_delivered"
            ],
            "type": "string"
          },
          "id": {
            "description": "消息 ID",
            "type": "string"
          },
          "from_clientid": {
            "description": "事件来源客户端的 ID",
            "type": "string"
          },
          "from_username": {
            "description": "事件来源客户端的用户名",
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "username": {
            "description": "用户名",
            "type": "string"
          },
          "payload": {
            "description": "消息负载",
            "type": "string"
          },
          "peerhost": {
            "description": "对等客户端的 IP 地址",
            "type": "string"
          },
          "topic": {
            "description": "消息主题",
            "type": "string"
          },
          "publish_received_at": {
            "description": "消息被接受的时间",
            "type": "integer"
          },
          "qos": {
            "description": "消息的 QoS",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "modules.delayed": {
        "properties": {
          "enable": {
            "default": true,
            "description": "是否开启该功能",
            "type": "boolean"
          },
          "max_delayed_messages": {
            "default": 0,
            "description": "延迟消息的数量上限(0 代表无限)",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "plugins.builder": {
        "properties": {
          "contact": {
            "example": "emqx-support@emqx.io",
            "type": "string"
          },
          "name": {
            "example": "EMQX Team",
            "type": "string"
          },
          "website": {
            "example": "www.emqx.com",
            "type": "string"
          }
        },
        "type": "object"
      },
      "exhook.hook_info": {
        "properties": {
          "name": {
            "description": "钩子的名称",
            "type": "string"
          },
          "params": {
            "description": "钩子注册时使用的参数",
            "properties": {
              "$name": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "emqx_conf_schema.log_file_handler": {
        "properties": {
          "path": {
            "default": "${EMQX_LOG_DIR}/emqx.log",
            "description": "日志文件路径及名字。",
            "example": "/path/to/file",
            "type": "string"
          },
          "rotation_count": {
            "default": 10,
            "description": "轮换的最大日志文件数。",
            "maximum": 128,
            "minimum": 1,
            "type": "integer"
          },
          "rotation_size": {
            "default": "50MB",
            "description": "此参数控制日志文件轮换。 `infinity` 意味着日志文件将无限增长，否则日志文件将在达到 `max_size`（以字节为单位）时进行轮换。<br/>与 rotation count配合使用。如果 counter 为 10，则是10个文件轮换。",
            "oneOf": [
              {
                "example": "32MB",
                "type": "string"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "level": {
            "default": "warning",
            "description": "当前日志处理进程的日志级别。<br/>默认为 warning 级别。",
            "enum": [
              "debug",
              "info",
              "notice",
              "warning",
              "error",
              "critical",
              "alert",
              "emergency",
              "all"
            ],
            "type": "string"
          },
          "enable": {
            "default": false,
            "description": "启用此日志处理进程。",
            "type": "boolean"
          },
          "formatter": {
            "default": "text",
            "description": "选择日志格式类型。 <code>text</code> 用于纯文本，<code>json</code> 用于结构化日志记录。",
            "enum": [
              "text",
              "json"
            ],
            "type": "string"
          },
          "time_offset": {
            "default": "system",
            "description": "日志中的时间戳使用的时间偏移量。<br/>可选值为：<br/>  - <code>system</code>: 本地系统使用的时区偏移量<br/>  - <code>utc</code>: 0 时区的偏移量<br/>  - <code>+-[hh]:[mm]</code>: 自定义偏移量，比如 \"-02:00\" 或者 \"+00:00\"<br/>默认值为本地系统的时区偏移量：<code>system</code>。",
            "type": "string"
          }
        },
        "type": "object"
      },
      "retainer.retainer": {
        "properties": {
          "enable": {
            "default": true,
            "description": "是否开启消息保留功能",
            "type": "boolean"
          },
          "msg_expiry_interval": {
            "default": "0s",
            "description": "消息保留时间。0 代表永久保留",
            "example": "32s",
            "type": "string"
          },
          "msg_clear_interval": {
            "default": "0s",
            "description": "消息清理间隔。0 代表不进行清理",
            "example": "32s",
            "type": "string"
          },
          "max_payload_size": {
            "default": "1MB",
            "description": "消息大小最大值",
            "example": "32MB",
            "type": "string"
          },
          "stop_publish_clear_msg": {
            "default": false,
            "description": "是否不发送保留消息的清理消息，在 MQTT 5.0 中如果一条保留消息的消息体为空，则会清除掉之前存储<br/>的对应的保留消息，通过这个值控制是否停止发送清理消息",
            "type": "boolean"
          },
          "delivery_rate": {
            "description": "The maximum rate of delivering retained messages",
            "example": "1000/s",
            "type": "string"
          },
          "backend": {
            "description": "保留消息的存储后端",
            "$ref": "#/components/schemas/retainer.mnesia_config"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_schema.position": {
        "required": [
          "position"
        ],
        "properties": {
          "position": {
            "description": "认证数据源位置。",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.node_metrics": {
        "properties": {
          "node": {
            "description": "节点名字",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "matched": {
            "description": "SQL 的 FROM 子句匹配的次数。",
            "minimum": 0,
            "type": "integer"
          },
          "matched.rate": {
            "description": "命中速率，次/秒",
            "type": "number"
          },
          "matched.rate.max": {
            "description": "最大命中速率，次/秒",
            "type": "number"
          },
          "matched.rate.last5m": {
            "description": "5分钟平均命中速率，次/秒",
            "type": "number"
          },
          "passed": {
            "description": "SQL 通过的次数",
            "minimum": 0,
            "type": "integer"
          },
          "failed": {
            "description": "SQL 失败的次数",
            "minimum": 0,
            "type": "integer"
          },
          "failed.exception": {
            "description": "SQL 由于执行异常而失败的次数。 这可能是因为调用 SQL 函数时崩溃，或者试图对未定义的变量进行算术运算",
            "minimum": 0,
            "type": "integer"
          },
          "failed.unknown": {
            "description": "由于未知错误导致 SQL 失败的次数。",
            "minimum": 0,
            "type": "integer"
          },
          "actions.total": {
            "description": "规则调用输出的次数。 该值可能是“sql.matched”的几倍，具体取决于规则输出的数量。",
            "minimum": 0,
            "type": "integer"
          },
          "actions.success": {
            "description": "规则成功调用输出的次数。",
            "minimum": 0,
            "type": "integer"
          },
          "actions.failed": {
            "description": "规则调用输出失败的次数。",
            "minimum": 0,
            "type": "integer"
          },
          "actions.failed.out_of_service": {
            "description": "由于输出停止服务而导致规则调用输出失败的次数。 例如，桥接被禁用或停止。",
            "minimum": 0,
            "type": "integer"
          },
          "actions.failed.unknown": {
            "description": "由于未知错误，规则调用输出失败的次数。",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "authn.postgresql": {
        "required": [
          "backend",
          "database",
          "mechanism",
          "query",
          "server",
          "username"
        ],
        "properties": {
          "mechanism": {
            "description": "认证机制。",
            "enum": [
              "password_based"
            ],
            "type": "string"
          },
          "backend": {
            "description": "后端类型。",
            "enum": [
              "postgresql"
            ],
            "type": "string"
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn-hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn-hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn-hash.bcrypt"
              }
            ]
          },
          "query": {
            "description": "用于查询密码散列等用于认证的数据的 SQL 语句。",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
            "type": "boolean"
          },
          "server": {
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 PostgreSQL 默认端口 5432。",
            "type": "string"
          },
          "database": {
            "description": "数据库名字。",
            "type": "string"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "username": {
            "description": "内部数据库的用户名。",
            "type": "string"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "auto_reconnect": {
            "default": true,
            "deprecated": true,
            "description": "已弃用。自动重连数据库。",
            "type": "boolean"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "broker.listener_quic_ssl_opts": {
        "properties": {
          "cacertfile": {
            "default": "${EMQX_ETC_DIR}/certs/cacert.pem",
            "description": "受信任的PEM格式 CA  证书捆绑文件<br/><br/>此文件中的证书用于验证TLS对等方的证书。<br/>如果要信任新 CA，请将新证书附加到文件中。<br/>无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/><br/>注意：从文件中失效（删除）证书不会影响已建立的连接。",
            "type": "string"
          },
          "certfile": {
            "default": "${EMQX_ETC_DIR}/certs/cert.pem",
            "description": "PEM格式证书链文件<br/><br/>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，<br/>然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。<br/>根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
            "type": "string"
          },
          "keyfile": {
            "default": "${EMQX_ETC_DIR}/certs/key.pem",
            "description": "PEM格式的私钥文件。",
            "type": "string"
          },
          "verify": {
            "default": "verify_none",
            "description": "启用或禁用对等验证。",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "type": "string"
          },
          "password": {
            "description": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
            "example": "",
            "format": "password",
            "type": "string"
          }
        },
        "type": "object"
      },
      "exhook.node_metrics": {
        "properties": {
          "node": {
            "description": "节点名称",
            "type": "string"
          },
          "metrics": {
            "description": "指标信息",
            "$ref": "#/components/schemas/exhook.metrics"
          }
        },
        "type": "object"
      },
      "exhook.move_req": {
        "required": [
          "position"
        ],
        "properties": {
          "position": {
            "description": "移动的方向",
            "example": "front",
            "type": "string"
          }
        },
        "type": "object"
      },
      "exhook.node_status": {
        "properties": {
          "node": {
            "description": "节点名称",
            "type": "string"
          },
          "status": {
            "description": "Exhook 服务器的状态。<br/><br/>connected: 连接成功<br/><br/>connecting: 连接失败，重连中<br/><br/>disconnected: 连接失败，且未设置自动重连<br/><br/>disabled: 该服务器未开启<br/><br/>error: 查看该服务器状态时发生错误",
            "enum": [
              "connected",
              "connecting",
              "disconnected",
              "disabled",
              "error"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.rule_creation": {
        "required": [
          "sql"
        ],
        "properties": {
          "name": {
            "default": "",
            "description": "规则名字",
            "example": "foo",
            "type": "string"
          },
          "sql": {
            "description": "用于处理消息的 SQL 。<br/>示例：<code>SELECT * FROM \"test/topic\" WHERE payload.x = 1</code>",
            "example": "SELECT * FROM \"test/topic\" WHERE payload.x = 1",
            "type": "string"
          },
          "actions": {
            "default": [],
            "description": "规则的动作列表。<br/>动作可以是指向 EMQX bridge 的引用，也可以是一个指向函数的对象。<br/>我们支持一些内置函数，如“republish”和“console”，我们还支持用户提供的函数，它的格式为：“{module}:{function}”。<br/>列表中的动作按顺序执行。这意味着如果其中一个动作执行缓慢，则以下所有动作都不会被执行直到它返回。<br/>如果其中一个动作崩溃，在它之后的所有动作仍然会被按照原始顺序执行。<br/>如果运行动作时出现任何错误，则会出现错误消息，并且相应的计数器会增加。",
            "example": [
              "webhook:my_webhook",
              {
                "args": {
                  "payload": "${payload}",
                  "topic": "t/1"
                },
                "function": "republish"
              },
              {
                "function": "console"
              }
            ],
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/rule_engine.user_provided_function"
                },
                {
                  "$ref": "#/components/schemas/rule_engine.builtin_action_console"
                },
                {
                  "$ref": "#/components/schemas/rule_engine.builtin_action_republish"
                },
                {
                  "type": "string"
                }
              ]
            },
            "type": "array"
          },
          "enable": {
            "default": true,
            "description": "启用或禁用规则引擎",
            "type": "boolean"
          },
          "description": {
            "default": "",
            "description": "规则的描述",
            "example": "Some description",
            "type": "string"
          },
          "metadata": {
            "description": "规则的元数据，不要手动修改",
            "example": {},
            "type": "object"
          }
        },
        "type": "object"
      },
      "listeners.ws_required_bind": {
        "required": [
          "bind",
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "ws"
            ],
            "type": "string"
          },
          "running": {
            "description": "Listener status",
            "type": "boolean"
          },
          "id": {
            "description": "Listener id",
            "type": "string"
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          },
          "enable": {
            "default": true,
            "description": "启停监听器。",
            "type": "boolean"
          },
          "bind": {
            "default": 8083,
            "description": "监听套接字的 IP 地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "acceptors": {
            "default": 16,
            "description": "监听器接收池的大小。",
            "minimum": 1,
            "type": "integer"
          },
          "max_connections": {
            "default": "infinity",
            "description": "监听器允许的最大并发连接数。",
            "oneOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。<br/><br/>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。<br/><br/>例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/><br/>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/><br/><br/>设置为<code>\"\"</code> 以禁用该功能<br/><br/><br/>mountpoint 字符串中的变量：<br/>- <code>${clientid}</code>: clientid<br/>- <code>${username}</code>: username",
            "type": "string"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。<br/>配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。<br/>配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名<br/>客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "type": "string"
          },
          "max_conn_rate": {
            "description": "Maximum connection rate.<br/><br/>This is used to limit the connection rate for this listener,<br/>once the limit is reached, new connections will be deferred or refused",
            "example": "1000/s",
            "type": "string"
          },
          "messages_rate": {
            "description": "Messages publish rate.<br/><br/>This is used to limit the inbound message numbers for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "1000/s",
            "type": "string"
          },
          "bytes_rate": {
            "description": "Data publish rate.<br/><br/>This is used to limit the inbound bytes rate for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "100MB/s",
            "type": "string"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "description": "此监听器的访问控制规则。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "proxy_protocol": {
            "default": false,
            "description": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/><br/>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "description": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
            "example": "12m",
            "type": "string"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/broker.tcp_opts"
          },
          "websocket": {
            "$ref": "#/components/schemas/broker.ws_opts"
          }
        },
        "type": "object"
      },
      "authn.redis_single": {
        "required": [
          "backend",
          "cmd",
          "mechanism",
          "server"
        ],
        "properties": {
          "mechanism": {
            "description": "认证机制。",
            "enum": [
              "password_based"
            ],
            "type": "string"
          },
          "backend": {
            "description": "后端类型。",
            "enum": [
              "redis"
            ],
            "type": "string"
          },
          "cmd": {
            "description": "用于查询密码散列等用于认证的数据的 Redis Command，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
            "type": "string"
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn-hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn-hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn-hash.bcrypt"
              }
            ]
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
            "type": "boolean"
          },
          "server": {
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
            "type": "string"
          },
          "redis_type": {
            "default": "single",
            "description": "单机模式。当 Redis 服务运行在单机模式下，该配置必须设置为 'single'。",
            "enum": [
              "single"
            ],
            "type": "string"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "database": {
            "default": 0,
            "description": "Redis 数据库 ID。",
            "minimum": 0,
            "type": "integer"
          },
          "auto_reconnect": {
            "default": true,
            "deprecated": true,
            "description": "已弃用。自动重连数据库。",
            "type": "boolean"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "listeners.listener_type_status": {
        "required": [
          "enable",
          "ids",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "tcp",
              "ssl",
              "ws",
              "wss",
              "quic"
            ],
            "type": "string"
          },
          "enable": {
            "description": "Listener enable",
            "type": "boolean"
          },
          "ids": {
            "description": "Listener Ids",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/listeners.status"
          },
          "node_status": {
            "items": {
              "$ref": "#/components/schemas/listeners.node_status"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_schema.redis_sentinel": {
        "required": [
          "cmd",
          "sentinel",
          "servers",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源。",
            "type": "boolean"
          },
          "type": {
            "default": "redis",
            "description": "数据后端类型。",
            "enum": [
              "redis"
            ],
            "type": "string"
          },
          "cmd": {
            "description": "访问控制数据查询命令。",
            "example": "HGETALL mqtt_authz",
            "type": "string"
          },
          "servers": {
            "description": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`<br/>每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机名具有以下形式：`Host[:Port]`。<br/>如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
            "type": "string"
          },
          "redis_type": {
            "default": "sentinel",
            "description": "哨兵模式。当 Redis 服务运行在哨兵模式下，该配置必须设置为 'sentinel'。",
            "enum": [
              "sentinel"
            ],
            "type": "string"
          },
          "sentinel": {
            "description": "Redis 哨兵模式下的集群名称。",
            "type": "string"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "database": {
            "default": 0,
            "description": "Redis 数据库 ID。",
            "minimum": 0,
            "type": "integer"
          },
          "auto_reconnect": {
            "default": true,
            "deprecated": true,
            "description": "已弃用。自动重连数据库。",
            "type": "boolean"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_schema.mysql": {
        "required": [
          "database",
          "query",
          "server",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源。",
            "type": "boolean"
          },
          "type": {
            "default": "mysql",
            "description": "数据后端类型。",
            "enum": [
              "mysql"
            ],
            "type": "string"
          },
          "query": {
            "description": "访问控制数据查询语句。",
            "type": "string"
          },
          "server": {
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The MySQL default port 3306 is used if `[:Port]` is not specified.",
            "type": "string"
          },
          "database": {
            "description": "数据库名字。",
            "type": "string"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "username": {
            "default": "root",
            "description": "内部数据库的用户名。",
            "type": "string"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "auto_reconnect": {
            "default": true,
            "deprecated": true,
            "description": "已弃用。自动重连数据库。",
            "type": "boolean"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_stats.aggergate_data": {
        "properties": {
          "node": {
            "description": "Node name",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "channels.count": {
            "description": "sessions.count",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "channels.max": {
            "description": "session.max",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "connections.count": {
            "description": "Number of current connections",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "connections.max": {
            "description": "Historical maximum number of connections",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "delayed.count": {
            "description": "Number of delayed messages",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "delayed.max": {
            "description": "Historical maximum number of delayed messages",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "live_connections.count": {
            "description": "Number of current live connections",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "live_connections.max": {
            "description": "Historical maximum number of live connections",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "retained.count": {
            "description": "Number of currently retained messages",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "retained.max": {
            "description": "Historical maximum number of retained messages",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "sessions.count": {
            "description": "Number of current sessions",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "sessions.max": {
            "description": "Historical maximum number of sessions",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "suboptions.count": {
            "description": "subscriptions.count",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "suboptions.max": {
            "description": "subscriptions.max",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "subscribers.count": {
            "description": "Number of current subscribers",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "subscribers.max": {
            "description": "Historical maximum number of subscribers",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "subscriptions.count": {
            "description": "Number of current subscriptions, including shared subscriptions",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "subscriptions.max": {
            "description": "Historical maximum number of subscriptions",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "subscriptions.shared.count": {
            "description": "Number of current shared subscriptions",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "subscriptions.shared.max": {
            "description": "Historical maximum number of shared subscriptions",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "topics.count": {
            "description": "Number of current topics",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          },
          "topics.max": {
            "description": "Historical maximum number of topics",
            "example": 0,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "listeners.ws_required_bind-with_name": {
        "required": [
          "bind",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "ws"
            ],
            "type": "string"
          },
          "running": {
            "description": "Listener status",
            "type": "boolean"
          },
          "name": {
            "description": "Listener name",
            "type": "string"
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          },
          "enable": {
            "default": true,
            "description": "启停监听器。",
            "type": "boolean"
          },
          "bind": {
            "default": 8083,
            "description": "监听套接字的 IP 地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "acceptors": {
            "default": 16,
            "description": "监听器接收池的大小。",
            "minimum": 1,
            "type": "integer"
          },
          "max_connections": {
            "default": "infinity",
            "description": "监听器允许的最大并发连接数。",
            "oneOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。<br/><br/>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。<br/><br/>例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/><br/>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/><br/><br/>设置为<code>\"\"</code> 以禁用该功能<br/><br/><br/>mountpoint 字符串中的变量：<br/>- <code>${clientid}</code>: clientid<br/>- <code>${username}</code>: username",
            "type": "string"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。<br/>配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。<br/>配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名<br/>客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "type": "string"
          },
          "max_conn_rate": {
            "description": "Maximum connection rate.<br/><br/>This is used to limit the connection rate for this listener,<br/>once the limit is reached, new connections will be deferred or refused",
            "example": "1000/s",
            "type": "string"
          },
          "messages_rate": {
            "description": "Messages publish rate.<br/><br/>This is used to limit the inbound message numbers for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "1000/s",
            "type": "string"
          },
          "bytes_rate": {
            "description": "Data publish rate.<br/><br/>This is used to limit the inbound bytes rate for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "100MB/s",
            "type": "string"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "description": "此监听器的访问控制规则。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "proxy_protocol": {
            "default": false,
            "description": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/><br/>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "description": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
            "example": "12m",
            "type": "string"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/broker.tcp_opts"
          },
          "websocket": {
            "$ref": "#/components/schemas/broker.ws_opts"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.ctx_delivery_dropped": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "description": "事件类型",
            "enum": [
              "delivery_dropped"
            ],
            "type": "string"
          },
          "id": {
            "description": "消息 ID",
            "type": "string"
          },
          "reason": {
            "description": "消息被丢弃的原因",
            "type": "string"
          },
          "from_clientid": {
            "description": "事件来源客户端的 ID",
            "type": "string"
          },
          "from_username": {
            "description": "事件来源客户端的用户名",
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "username": {
            "description": "用户名",
            "type": "string"
          },
          "payload": {
            "description": "消息负载",
            "type": "string"
          },
          "peerhost": {
            "description": "对等客户端的 IP 地址",
            "type": "string"
          },
          "topic": {
            "description": "消息主题",
            "type": "string"
          },
          "publish_received_at": {
            "description": "消息被接受的时间",
            "type": "integer"
          },
          "qos": {
            "description": "消息的 QoS",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "connector-mqtt.ingress_remote": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "description": "Receive messages from which topic of the remote broker",
            "type": "string"
          },
          "qos": {
            "default": 1,
            "description": "The QoS level to be used when subscribing to the remote broker",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_sources.sources": {
        "properties": {
          "sources": {
            "description": "授权数据源列表",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/emqx_authz_api_schema.file"
                },
                {
                  "$ref": "#/components/schemas/emqx_authz_api_schema.postgresql"
                },
                {
                  "$ref": "#/components/schemas/emqx_authz_api_schema.mysql"
                },
                {
                  "$ref": "#/components/schemas/emqx_authz_api_schema.built_in_database"
                },
                {
                  "$ref": "#/components/schemas/emqx_authz_api_schema.redis_cluster"
                },
                {
                  "$ref": "#/components/schemas/emqx_authz_api_schema.redis_sentinel"
                },
                {
                  "$ref": "#/components/schemas/emqx_authz_api_schema.redis_single"
                },
                {
                  "$ref": "#/components/schemas/emqx_authz_api_schema.mongo_sharded"
                },
                {
                  "$ref": "#/components/schemas/emqx_authz_api_schema.mongo_rs"
                },
                {
                  "$ref": "#/components/schemas/emqx_authz_api_schema.mongo_single"
                },
                {
                  "$ref": "#/components/schemas/emqx_authz_api_schema.http_post"
                },
                {
                  "$ref": "#/components/schemas/emqx_authz_api_schema.http_get"
                }
              ]
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_alarms.alarm": {
        "properties": {
          "node": {
            "description": "触发此告警的节点名称。",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "name": {
            "description": "触发此告警的节点名称。",
            "example": "high_system_memory_usage",
            "type": "string"
          },
          "message": {
            "description": "告警消息，以人类可读的方式描述告警内容。",
            "example": "System memory usage is higher than 70%",
            "type": "string"
          },
          "details": {
            "description": "告警详情，提供了更多的告警信息，主要提供给程序处理。",
            "example": {
              "high_watermark": 70
            },
            "type": "object"
          },
          "duration": {
            "description": "表明告警已经持续了多久，单位：毫秒。",
            "example": 297056,
            "type": "integer"
          },
          "activate_at": {
            "description": "告警开始时间，使用 rfc3339 标准时间格式。",
            "example": "2021-10-25T11:52:52.548+08:00",
            "type": "string"
          },
          "deactivate_at": {
            "description": "告警结束时间，使用 rfc3339 标准时间格式。",
            "example": "2021-10-31T10:52:52.548+08:00",
            "type": "string"
          }
        },
        "type": "object"
      },
      "broker.ssl_client_opts": {
        "properties": {
          "cacertfile": {
            "description": "受信任的PEM格式 CA  证书捆绑文件<br/><br/>此文件中的证书用于验证TLS对等方的证书。<br/>如果要信任新 CA，请将新证书附加到文件中。<br/>无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/><br/>注意：从文件中失效（删除）证书不会影响已建立的连接。",
            "type": "string"
          },
          "cacerts": {
            "default": false,
            "deprecated": true,
            "type": "boolean"
          },
          "certfile": {
            "description": "PEM格式证书链文件<br/><br/>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，<br/>然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。<br/>根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
            "type": "string"
          },
          "keyfile": {
            "description": "PEM格式的私钥文件。",
            "type": "string"
          },
          "verify": {
            "default": "verify_none",
            "description": "启用或禁用对等验证。",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "type": "string"
          },
          "reuse_sessions": {
            "default": true,
            "description": "启用 TLS 会话重用。",
            "type": "boolean"
          },
          "depth": {
            "default": 10,
            "description": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。<br/>因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/><br/>如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/><br/>如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
            "minimum": 0,
            "type": "integer"
          },
          "password": {
            "description": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
            "example": "",
            "format": "password",
            "type": "string"
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "description": "支持所有TLS/DTLS版本<br/><br/>注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ciphers": {
            "default": [],
            "description": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。<br/><br/><br/>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。<br/>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。<br/><br/>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。<br/>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/><br/>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。<br/>不兼容的密码套件将被自动删除。<br/><br/>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。<br/><br/><br/><br/>注：PSK 的 Ciphers 不支持 tlsv1.3<br/><br/>如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。<br/><br/><br/><br/>PSK 密码套件：<br/><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "secure_renegotiate": {
            "default": true,
            "description": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。<br/>RFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
            "type": "boolean"
          },
          "log_level": {
            "default": "notice",
            "description": "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "type": "string"
          },
          "hibernate_after": {
            "default": "5s",
            "description": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
            "example": "12m",
            "type": "string"
          },
          "enable": {
            "default": false,
            "description": "启用 TLS。",
            "type": "boolean"
          },
          "server_name_indication": {
            "description": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/><br/>例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，<br/>例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/><br/>如果未指定，它将默认为使用的主机名字符串<br/>建立连接，除非使用 IP 地址<br/><br/>然后，主机名也用于对等机的主机名验证证书<br/><br/>特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
            "example": "disable",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "enum": [
                  "disable"
                ],
                "type": "string"
              }
            ]
          }
        },
        "type": "object"
      },
      "emqx_stomp_schema.stomp_frame": {
        "properties": {
          "max_headers": {
            "default": 10,
            "description": "允许的 Header 最大数量",
            "minimum": 0,
            "type": "integer"
          },
          "max_headers_length": {
            "default": 1024,
            "description": "允许的 Header 字符串的最大长度",
            "minimum": 0,
            "type": "integer"
          },
          "max_body_length": {
            "default": 65536,
            "description": "允许的 Stomp 报文 Body 的最大字节数",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_exproto_schema.exproto_grpc_handler": {
        "required": [
          "address",
          "service_name"
        ],
        "properties": {
          "address": {
            "description": "对端 gRPC 服务器地址。",
            "type": "string"
          },
          "service_name": {
            "default": "ConnectionUnaryHandler",
            "description": "The service name to handle the connection events.<br/>In the initial version, we expected to use streams to improve the efficiency<br/>of requests in `ConnectionHandler`. But unfortunately, events between different<br/>streams are out of order. It causes the `OnSocketCreated` event to may arrive<br/>later than `OnReceivedBytes`.<br/>So we added the `ConnectionUnaryHandler` service since v5.0.25 and forced<br/>the use of Unary in it to avoid ordering problems.",
            "oneOf": [
              {
                "enum": [
                  "ConnectionUnaryHandler"
                ],
                "type": "string"
              },
              {
                "enum": [
                  "ConnectionHandler"
                ],
                "type": "string"
              }
            ]
          },
          "ssl_options": {
            "description": "gRPC 客户端的 SSL 配置。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "authn.mongo_single": {
        "required": [
          "backend",
          "collection",
          "database",
          "mechanism",
          "server"
        ],
        "properties": {
          "mechanism": {
            "description": "认证机制。",
            "enum": [
              "password_based"
            ],
            "type": "string"
          },
          "backend": {
            "description": "后端类型。",
            "enum": [
              "mongodb"
            ],
            "type": "string"
          },
          "collection": {
            "description": "存储认证数据的集合。",
            "type": "string"
          },
          "filter": {
            "default": {},
            "description": "在查询中定义过滤条件的条件表达式。<br/>过滤器支持如下占位符：<br/>- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名<br/>- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符",
            "example": {},
            "type": "object"
          },
          "password_hash_field": {
            "default": "password_hash",
            "description": "文档中用于存放密码散列的字段。",
            "type": "string"
          },
          "salt_field": {
            "default": "salt",
            "description": "文档中用于存放盐值的字段。",
            "type": "string"
          },
          "is_superuser_field": {
            "default": "is_superuser",
            "description": "文档中用于定义用户是否具有超级用户权限的字段。",
            "type": "string"
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn-hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn-hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn-hash.bcrypt"
              }
            ]
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
            "type": "boolean"
          },
          "mongo_type": {
            "default": "single",
            "description": "Standalone 模式。当 MongoDB 服务运行在 standalone 模式下，该配置必须设置为 'single'。",
            "enum": [
              "single"
            ],
            "type": "string"
          },
          "server": {
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
            "type": "string"
          },
          "w_mode": {
            "default": "unsafe",
            "description": "写模式。",
            "enum": [
              "unsafe",
              "safe"
            ],
            "type": "string"
          },
          "srv_record": {
            "default": false,
            "description": "使用 DNS SRV 记录。",
            "type": "boolean"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "username": {
            "description": "内部数据库的用户名。",
            "type": "string"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported.",
            "enum": [
              "auto",
              true,
              false
            ],
            "type": "string"
          },
          "auth_source": {
            "description": "与用户证书关联的数据库名称。",
            "type": "string"
          },
          "database": {
            "description": "数据库名字。",
            "type": "string"
          },
          "topology": {
            "$ref": "#/components/schemas/emqx_mongodb.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_schema.file": {
        "required": [
          "rules",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源。",
            "type": "boolean"
          },
          "type": {
            "default": "file",
            "description": "数据后端类型。",
            "enum": [
              "file"
            ],
            "type": "string"
          },
          "rules": {
            "description": "静态授权文件规则。",
            "example": "{allow,{username,{re,\"^dashboard$\"}},subscribe,[\"$SYS/#\"]}.\n{allow,{ipaddr,\"127.0.0.1\"},all,[\"$SYS/#\",\"#\"]}.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "exhook.detail_server_info": {
        "required": [
          "name",
          "url"
        ],
        "properties": {
          "metrics": {
            "description": "当前节点中该服务器的指标信息",
            "$ref": "#/components/schemas/exhook.metrics"
          },
          "node_metrics": {
            "description": "所有节点中该服务器的指标信息",
            "items": {
              "$ref": "#/components/schemas/exhook.node_metrics"
            },
            "type": "array"
          },
          "node_status": {
            "description": "所有节点中该服务器的状态信息",
            "items": {
              "$ref": "#/components/schemas/exhook.node_status"
            },
            "type": "array"
          },
          "hooks": {
            "items": {
              "$ref": "#/components/schemas/exhook.hook_info"
            },
            "type": "array"
          },
          "name": {
            "description": "ExHook 服务器名称",
            "example": "default",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "开启这个 Exhook 服务器",
            "type": "boolean"
          },
          "url": {
            "description": "gRPC 服务器地址",
            "example": "http://127.0.0.1:9000",
            "type": "string"
          },
          "request_timeout": {
            "default": "5s",
            "description": "gRPC 服务器请求超时时间",
            "example": "12m",
            "type": "string"
          },
          "failed_action": {
            "default": "deny",
            "description": "当 gRPC 请求失败后的操作",
            "enum": [
              "deny",
              "ignore"
            ],
            "type": "string"
          },
          "ssl": {
            "$ref": "#/components/schemas/exhook.ssl_conf"
          },
          "socket_options": {
            "default": {
              "keepalive": true,
              "nodelay": true
            },
            "$ref": "#/components/schemas/exhook.socket_options"
          },
          "auto_reconnect": {
            "default": "60s",
            "description": "自动重连到 gRPC 服务器的设置。<br/>当 gRPC 服务器不可用时，Exhook 将会按照这里设置的间隔时间进行重连，并重新初始化注册的钩子",
            "oneOf": [
              {
                "example": "12m",
                "type": "string"
              },
              {
                "enum": [
                  false
                ],
                "type": "string"
              }
            ]
          },
          "pool_size": {
            "default": 8,
            "description": "gRPC 客户端进程池大小",
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_dashboard_monitor_api.sampler": {
        "properties": {
          "time_stamp": {
            "description": "Timestamp",
            "minimum": 0,
            "type": "integer"
          },
          "subscriptions": {
            "description": "Subscriptions at the time of sampling. Can only represent the approximate state",
            "type": "integer"
          },
          "topics": {
            "description": "Count topics at the time of sampling. Can only represent the approximate state",
            "type": "integer"
          },
          "connections": {
            "description": "Sessions at the time of sampling. Can only represent the approximate state",
            "type": "integer"
          },
          "live_connections": {
            "description": "Connections at the time of sampling. Can only represent the approximate state",
            "type": "integer"
          },
          "received": {
            "description": "Received messages last 10 seconds",
            "type": "integer"
          },
          "sent": {
            "description": "Sent messages last 10 seconds",
            "type": "integer"
          },
          "dropped": {
            "description": "Dropped messages last 10 seconds",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.ctx_check_authz_complete": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "description": "事件类型",
            "enum": [
              "client_check_authz_complete"
            ],
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "username": {
            "description": "用户名",
            "type": "string"
          },
          "peerhost": {
            "description": "对等客户端的 IP 地址",
            "type": "string"
          },
          "topic": {
            "description": "消息主题",
            "type": "string"
          },
          "action": {
            "description": "订阅或发布",
            "type": "string"
          },
          "authz_source": {
            "description": "缓存，插件或者默认值",
            "type": "string"
          },
          "result": {
            "description": "允许或禁止",
            "type": "string"
          }
        },
        "type": "object"
      },
      "broker.ocsp": {
        "properties": {
          "enable_ocsp_stapling": {
            "default": false,
            "description": "是否为监听器启用 OCSP Stapling 功能。 如果设置为 true，需要定义 OCSP Responder 的 URL 和证书签发者的 PEM 文件路径。",
            "type": "boolean"
          },
          "responder_url": {
            "description": "用于检查服务器证书的 OCSP Responder 的 URL。",
            "example": "http://127.0.0.1",
            "type": "string"
          },
          "issuer_pem": {
            "description": "服务器证书的 OCSP 签发者的 PEM 编码证书。",
            "type": "string"
          },
          "refresh_interval": {
            "default": "5m",
            "description": "为服务器刷新OCSP响应的周期。",
            "example": "12m",
            "type": "string"
          },
          "refresh_http_timeout": {
            "default": "15s",
            "description": "检查 OCSP 响应时，HTTP 请求的超时。",
            "example": "12m",
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_webhook.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "maximum": 1024,
            "minimum": 1,
            "type": "integer"
          },
          "health_check_interval": {
            "default": "15s",
            "description": "健康检查间隔。",
            "example": "32s",
            "type": "string"
          },
          "start_after_created": {
            "default": true,
            "description": "是否在创建资源后立即启动资源。",
            "type": "boolean"
          },
          "start_timeout": {
            "default": "5s",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s",
            "type": "string"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "example": "32s",
                "type": "string"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。",
            "enum": [
              "sync",
              "async"
            ],
            "type": "string"
          },
          "request_ttl": {
            "default": "45s",
            "description": "Starting from the moment when the request enters the buffer, if the request remains in the buffer for the specified time or is sent but does not receive a response or acknowledgement in time, the request is considered expired.",
            "oneOf": [
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              },
              {
                "example": "32s",
                "type": "string"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1,
            "type": "integer"
          },
          "enable_queue": {
            "default": false,
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。",
            "type": "boolean"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB",
            "type": "string"
          }
        },
        "type": "object"
      },
      "authn.jwt_public_key": {
        "required": [
          "algorithm",
          "mechanism"
        ],
        "properties": {
          "algorithm": {
            "description": "JWT 签名算法，支持 HMAC (配置为 <code>hmac-based</code>）和 RSA、ECDSA (配置为 <code>public-key</code>)。",
            "enum": [
              "public-key"
            ],
            "type": "string"
          },
          "public_key": {
            "description": "用于验证 JWT 的公钥。",
            "type": "string"
          },
          "mechanism": {
            "description": "认证机制。",
            "enum": [
              "jwt"
            ],
            "type": "string"
          },
          "acl_claim_name": {
            "default": "acl",
            "description": "JWT claim name to use for getting ACL rules.",
            "type": "string"
          },
          "verify_claims": {
            "default": [],
            "description": "需要验证的自定义声明列表，它是一个名称/值对列表。<br/>值可以使用以下占位符：<br/>- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名<br/>- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符<br/>认证时将验证 JWT（取自 Password 字段）中 claims 的值是否与 <code>verify_claims</code> 中要求的相匹配。",
            "items": {
              "example": "any",
              "type": "string"
            },
            "type": "array"
          },
          "from": {
            "default": "password",
            "description": "指定客户端连接请求中 JWT 的位置；可选值： password、 username（分别对应于 MQTT 客户端 CONNECT 报文中的 Password 和 Username 字段）",
            "enum": [
              "username",
              "password"
            ],
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "authz.metrics_status_fields": {
        "properties": {
          "resource_metrics": {
            "description": "资源统计指标。",
            "$ref": "#/components/schemas/authz.resource_metrics"
          },
          "node_resource_metrics": {
            "description": "每个节点上资源的统计指标。",
            "items": {
              "$ref": "#/components/schemas/authz.node_resource_metrics"
            },
            "type": "array"
          },
          "metrics": {
            "description": "资源统计指标。",
            "$ref": "#/components/schemas/authz.metrics"
          },
          "node_metrics": {
            "description": "每个节点上资源的统计指标。",
            "items": {
              "$ref": "#/components/schemas/authz.node_metrics"
            },
            "type": "array"
          },
          "status": {
            "description": "资源状态。",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "type": "string"
          },
          "node_status": {
            "description": "每个节点上资源的状态。",
            "items": {
              "$ref": "#/components/schemas/authz.node_status"
            },
            "type": "array"
          },
          "node_error": {
            "description": "节点上产生的错误。",
            "items": {
              "$ref": "#/components/schemas/authz.node_error"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "emqx_authn_api.response_user": {
        "required": [
          "user_id"
        ],
        "properties": {
          "user_id": {
            "type": "string"
          },
          "is_superuser": {
            "default": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "broker.sysmon_vm": {
        "properties": {
          "process_check_interval": {
            "default": "30s",
            "description": "定期进程限制检查的时间间隔。",
            "example": "12m",
            "type": "string"
          },
          "process_high_watermark": {
            "default": "80%",
            "description": "在发出相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
            "example": "12%",
            "type": "number"
          },
          "process_low_watermark": {
            "default": "60%",
            "description": "在清除相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
            "example": "12%",
            "type": "number"
          },
          "long_gc": {
            "default": "disabled",
            "description": "当系统检测到某个 Erlang 进程垃圾回收占用过长时间，会触发一条带有 <code>long_gc</code> 关键字的日志。<br/>同时还会发布一条主题为 <code>$SYS/sysmon/long_gc</code> 的 MQTT 系统消息。",
            "oneOf": [
              {
                "example": "12m",
                "type": "string"
              },
              {
                "enum": [
                  "disabled"
                ],
                "type": "string"
              }
            ]
          },
          "long_schedule": {
            "default": "240ms",
            "description": "启用后，如果 Erlang VM 调度器出现某个任务占用时间过长时，会触发一条带有 'long_schedule' 关键字的日志。<br/>同时还会发布一条主题为 <code>$SYS/sysmon/long_schedule</code> 的 MQTT 系统消息。",
            "oneOf": [
              {
                "example": "12m",
                "type": "string"
              },
              {
                "enum": [
                  "disabled"
                ],
                "type": "string"
              }
            ]
          },
          "large_heap": {
            "default": "32MB",
            "description": "启用后，当一个 Erlang 进程申请了大量内存，系统会触发一条带有 <code>large_heap</code> 关键字的<br/>warning 级别日志。同时还会发布一条主题为 <code>$SYS/sysmon/busy_dist_port</code> 的 MQTT 系统消息。",
            "oneOf": [
              {
                "example": "32MB",
                "type": "string"
              },
              {
                "enum": [
                  "disabled"
                ],
                "type": "string"
              }
            ]
          },
          "busy_dist_port": {
            "default": true,
            "description": "启用后，当用于集群接点之间 RPC 的连接过忙时，会触发一条带有 <code>busy_dist_port</code> 关键字的 warning 级别日志。<br/>同时还会发布一条主题为 <code>$SYS/sysmon/busy_dist_port</code> 的 MQTT 系统消息。",
            "type": "boolean"
          },
          "busy_port": {
            "default": true,
            "description": "当一个系统接口（例如 TCP socket）过忙，会触发一条带有 <code>busy_port</code> 关键字的 warning 级别的日志。<br/>同时还会发布一条主题为 <code>$SYS/sysmon/busy_port</code> 的 MQTT 系统消息。",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "exhook.metrics": {
        "properties": {
          "succeed": {
            "description": "钩子执行成功的次数",
            "type": "integer"
          },
          "failed": {
            "description": "钩子执行失败的次数",
            "type": "integer"
          },
          "rate": {
            "description": "钩子的调用速率",
            "type": "integer"
          },
          "max_rate": {
            "description": "钩子的最大调用速率",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.ctx_disconnected": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "description": "事件类型",
            "enum": [
              "client_disconnected"
            ],
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "username": {
            "description": "用户名",
            "type": "string"
          },
          "reason": {
            "description": "断开连接的原因",
            "type": "string"
          },
          "peername": {
            "description": "对等客户端的 IP 地址和端口",
            "type": "string"
          },
          "sockname": {
            "description": "本地监听的 IP 地址和端口",
            "type": "string"
          },
          "disconnected_at": {
            "description": "客户端断开连接的时刻",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "dashboard.listeners": {
        "properties": {
          "http": {
            "description": "TCP listeners",
            "$ref": "#/components/schemas/dashboard.http"
          },
          "https": {
            "description": "SSL listeners",
            "$ref": "#/components/schemas/dashboard.https"
          }
        },
        "type": "object"
      },
      "listeners.tcp_required_bind": {
        "required": [
          "bind",
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "tcp"
            ],
            "type": "string"
          },
          "running": {
            "description": "Listener status",
            "type": "boolean"
          },
          "id": {
            "description": "Listener id",
            "type": "string"
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          },
          "enable": {
            "default": true,
            "description": "启停监听器。",
            "type": "boolean"
          },
          "bind": {
            "default": 1883,
            "description": "监听套接字的 IP 地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "acceptors": {
            "default": 16,
            "description": "监听器接收池的大小。",
            "minimum": 1,
            "type": "integer"
          },
          "max_connections": {
            "default": "infinity",
            "description": "监听器允许的最大并发连接数。",
            "oneOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。<br/><br/>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。<br/><br/>例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/><br/>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/><br/><br/>设置为<code>\"\"</code> 以禁用该功能<br/><br/><br/>mountpoint 字符串中的变量：<br/>- <code>${clientid}</code>: clientid<br/>- <code>${username}</code>: username",
            "type": "string"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。<br/>配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。<br/>配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名<br/>客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "type": "string"
          },
          "max_conn_rate": {
            "description": "Maximum connection rate.<br/><br/>This is used to limit the connection rate for this listener,<br/>once the limit is reached, new connections will be deferred or refused",
            "example": "1000/s",
            "type": "string"
          },
          "messages_rate": {
            "description": "Messages publish rate.<br/><br/>This is used to limit the inbound message numbers for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "1000/s",
            "type": "string"
          },
          "bytes_rate": {
            "description": "Data publish rate.<br/><br/>This is used to limit the inbound bytes rate for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "100MB/s",
            "type": "string"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "description": "此监听器的访问控制规则。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "proxy_protocol": {
            "default": false,
            "description": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/><br/>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "description": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
            "example": "12m",
            "type": "string"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/broker.tcp_opts"
          }
        },
        "type": "object"
      },
      "broker.flapping_detect": {
        "properties": {
          "enable": {
            "default": false,
            "description": "启用抖动检测功能。",
            "type": "boolean"
          },
          "window_time": {
            "default": "1m",
            "description": "抖动检测的时间窗口。",
            "example": "12m",
            "type": "string"
          },
          "max_count": {
            "default": 15,
            "description": "MQTT 客户端在“窗口”时间内允许的最大断开次数。",
            "minimum": 0,
            "type": "integer"
          },
          "ban_time": {
            "default": "5m",
            "description": "抖动的客户端将会被禁止登录多长时间。",
            "example": "12m",
            "type": "string"
          }
        },
        "type": "object"
      },
      "broker.alarm": {
        "properties": {
          "actions": {
            "default": [
              "log",
              "publish"
            ],
            "description": "警报激活时触发的动作。<br/>目前，支持以下操作：<code>log</code> 和 <code>publish</code>.<br/><code>log</code> 将告警写入日志 (控制台或者文件).<br/><code>publish</code> 将告警作为 MQTT 消息发布到系统主题:<br/><code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate</code> and<br/><code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate</code>",
            "example": [
              "log",
              "publish"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "size_limit": {
            "default": 1000,
            "description": "要保留为历史记录的已停用报警的最大总数。当超过此限制时，将删除最旧的停用报警，以限制总数。",
            "example": 1000,
            "maximum": 3000,
            "minimum": 1,
            "type": "integer"
          },
          "validity_period": {
            "default": "24h",
            "description": "停用报警的保留时间。报警在停用时不会立即删除，而是在保留时间之后删除。",
            "example": "24h",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_schema.mongo_rs": {
        "required": [
          "collection",
          "database",
          "replica_set_name",
          "servers",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源。",
            "type": "boolean"
          },
          "type": {
            "default": "mongodb",
            "description": "数据后端类型。",
            "enum": [
              "mongodb"
            ],
            "type": "string"
          },
          "collection": {
            "description": "`MongoDB` 授权数据集。",
            "type": "string"
          },
          "filter": {
            "default": {},
            "description": "在查询中定义过滤条件的条件表达式。<br/>过滤器支持如下占位符：<br/>- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名<br/>- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符",
            "example": {},
            "type": "object"
          },
          "mongo_type": {
            "default": "rs",
            "description": "Replica set模式。当 MongoDB 服务运行在 replica-set 模式下，该配置必须设置为 'rs'。",
            "enum": [
              "rs"
            ],
            "type": "string"
          },
          "servers": {
            "description": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`<br/>每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机名具有以下形式：`Host[:Port]`。<br/>如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
            "type": "string"
          },
          "w_mode": {
            "default": "unsafe",
            "description": "写模式。",
            "enum": [
              "unsafe",
              "safe"
            ],
            "type": "string"
          },
          "r_mode": {
            "default": "master",
            "description": "读模式。",
            "enum": [
              "master",
              "slave_ok"
            ],
            "type": "string"
          },
          "replica_set_name": {
            "description": "副本集的名称。",
            "type": "string"
          },
          "srv_record": {
            "default": false,
            "description": "使用 DNS SRV 记录。",
            "type": "boolean"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "username": {
            "description": "内部数据库的用户名。",
            "type": "string"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported.",
            "enum": [
              "auto",
              true,
              false
            ],
            "type": "string"
          },
          "auth_source": {
            "description": "与用户证书关联的数据库名称。",
            "type": "string"
          },
          "database": {
            "description": "数据库名字。",
            "type": "string"
          },
          "topology": {
            "$ref": "#/components/schemas/emqx_mongodb.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_publish.bad_request": {
        "properties": {
          "code": {
            "description": "BAD_REQUEST",
            "type": "string"
          },
          "message": {
            "description": "失败的详细原因。",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_authn_schema.resource_metrics": {
        "properties": {
          "matched": {
            "description": "请求命中次数。",
            "type": "integer"
          },
          "success": {
            "description": "请求成功次数。",
            "type": "integer"
          },
          "failed": {
            "description": "请求失败次数。",
            "type": "integer"
          },
          "rate": {
            "description": "命中速率，单位：次/秒。",
            "type": "number"
          },
          "rate_max": {
            "description": "最大命中速率，单位：次/秒。",
            "type": "number"
          },
          "rate_last5m": {
            "description": "5分钟内平均命中速率，单位：次/秒。",
            "type": "number"
          }
        },
        "type": "object"
      },
      "exhook.list_hook_info": {
        "properties": {
          "name": {
            "description": "钩子的名称",
            "type": "string"
          },
          "params": {
            "description": "钩子注册时使用的参数",
            "properties": {
              "$name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "metrics": {
            "description": "当前节点中该钩子的指标信息",
            "$ref": "#/components/schemas/exhook.metrics"
          },
          "node_metrics": {
            "description": "所有节点中该钩子的指标信息",
            "items": {
              "$ref": "#/components/schemas/exhook.node_metrics"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.rule_engine": {
        "properties": {
          "ignore_sys_message": {
            "default": true,
            "description": "当设置为“true”（默认）时，规则引擎将忽略发布到 $SYS 主题的消息。",
            "type": "boolean"
          },
          "jq_function_default_timeout": {
            "default": "10s",
            "description": "规则引擎内建函数 `jq` 默认时间限制",
            "example": "32s",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_listeners.udp_listener": {
        "properties": {
          "id": {
            "description": "监听器 ID",
            "type": "string"
          },
          "type": {
            "description": "监听器类型",
            "enum": [
              "udp"
            ],
            "type": "string"
          },
          "name": {
            "description": "监听器名称",
            "type": "string"
          },
          "running": {
            "description": "监听器运行状态",
            "type": "boolean"
          },
          "udp_options": {
            "$ref": "#/components/schemas/gateway.udp_opts"
          },
          "enable": {
            "default": true,
            "description": "是否启用该监听器。",
            "type": "boolean"
          },
          "bind": {
            "description": "监听器绑定的 IP 地址或端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "max_connections": {
            "default": 1024,
            "description": "监听器支持的最大连接数。",
            "oneOf": [
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              },
              {
                "minimum": 1,
                "type": "integer"
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "description": "监听器支持的最大连接速率。",
            "type": "integer"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证。<br/>配置 <code>false</code> 时，将不对客户端做任何认证。",
            "type": "boolean"
          },
          "mountpoint": {
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "access_rules": {
            "default": [],
            "description": "配置监听器的访问控制规则。<br/>见：https://github.com/emqtt/esockd#allowdeny",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "description": "监听器状态",
            "$ref": "#/components/schemas/listeners.status"
          },
          "node_status": {
            "description": "监听器在集群中每个节点上的状态",
            "items": {
              "$ref": "#/components/schemas/listeners.node_status"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_mnesia.rule_item": {
        "required": [
          "action",
          "permission",
          "topic"
        ],
        "properties": {
          "topic": {
            "description": "在指定主题上的规则",
            "example": "test/topic/1",
            "type": "string"
          },
          "permission": {
            "description": "权限",
            "enum": [
              "allow",
              "deny"
            ],
            "example": "allow",
            "type": "string"
          },
          "action": {
            "description": "被授权的行为 (发布/订阅/所有)",
            "enum": [
              "publish",
              "subscribe",
              "all"
            ],
            "example": "publish",
            "type": "string"
          },
          "qos": {
            "default": [
              0,
              1,
              2
            ],
            "description": "QoS of authorized action",
            "items": {
              "example": 0,
              "maximum": 2,
              "minimum": 0,
              "type": "integer"
            },
            "type": "array"
          },
          "retain": {
            "default": "all",
            "description": "Retain flag of authorized action",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "enum": [
                  "all"
                ],
                "type": "string"
              }
            ]
          }
        },
        "type": "object"
      },
      "trace.trace": {
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "description": "Unique name of the trace. Only ascii letters in a-z, A-Z, 0-9 and underscore '_' are allowed.",
            "example": "EMQX-TRACE-1",
            "type": "string"
          },
          "type": {
            "description": "过滤器类型",
            "enum": [
              "clientid",
              "topic",
              "ip_address"
            ],
            "example": "clientid",
            "type": "string"
          },
          "topic": {
            "description": "如果过滤器类型为 'topic' 则该字段可以指定用于匹配的 MQTT 主题或主题过滤器。",
            "example": "/dev/#",
            "type": "string"
          },
          "clientid": {
            "description": "如果过滤器类型为 'clientid' 则该字段可以指定用于匹配的 MQTT 客户端 ID。",
            "example": "dev-001",
            "type": "string"
          },
          "ip_address": {
            "description": "如果过滤器类型为 'ip_address' 则该字段可以指定用于匹配的客户端 IP 地址。",
            "example": "127.0.0.1",
            "type": "string"
          },
          "status": {
            "description": "Trace 状态",
            "enum": [
              "running",
              "stopped",
              "waiting"
            ],
            "example": "running",
            "type": "string"
          },
          "payload_encode": {
            "default": "text",
            "description": "Determine the format of the payload format in the trace file.<br/><br/>`text`: Text-based protocol or plain text protocol.<br/> It is recommended when payload is JSON encoded.<br/><br/>`hex`: Binary hexadecimal encode.It is recommended when payload is a custom binary protocol.<br/><br/>`hidden`: payload is obfuscated as `******`",
            "enum": [
              "hex",
              "text",
              "hidden"
            ],
            "type": "string"
          },
          "start_at": {
            "description": "时间戳格式，rfc3339 或者 epoch second",
            "example": "2021-11-04T18:17:38+08:00",
            "oneOf": [
              {
                "description": "epoch-second",
                "example": 1640995200,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "end_at": {
            "description": "时间戳格式，rfc3339 或者 epoch second",
            "example": "2021-11-05T18:17:38+08:00",
            "oneOf": [
              {
                "description": "epoch-second",
                "example": 1640995200,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "log_size": {
            "description": "日志文件大小",
            "example": [
              {
                "node": "emqx@127.0.0.1",
                "size": 1024
              }
            ],
            "items": {
              "example": {},
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "gateway.udp_opts": {
        "properties": {
          "active_n": {
            "default": 100,
            "description": "为 Socket 指定 {active, N} 选项。<br/>参见：https://erlang.org/doc/man/inet.html#setopts-2",
            "type": "integer"
          },
          "recbuf": {
            "description": "Socket 在内核空间接收缓冲区的大小。",
            "example": "32MB",
            "type": "string"
          },
          "sndbuf": {
            "description": "Socket 在内核空间发送缓冲区的大小。",
            "example": "32MB",
            "type": "string"
          },
          "buffer": {
            "description": "Socket 在用户空间的缓冲区大小。",
            "example": "32MB",
            "type": "string"
          },
          "reuseaddr": {
            "default": true,
            "description": "允许重用本地处于 TIME_WAIT 的端口号。",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.coap": {
        "properties": {
          "name": {
            "description": "网关名称",
            "enum": [
              "coap"
            ],
            "type": "string"
          },
          "heartbeat": {
            "default": "30s",
            "description": "CoAP 网关要求客户端的最小心跳间隔时间。<br/>当 <code>connection_required</code> 开启后，该参数用于检查客户端连接是否存活",
            "example": "12m",
            "type": "string"
          },
          "connection_required": {
            "default": false,
            "description": "是否开启连接模式。<br/>连接模式是非标准协议的功能。它维护 CoAP 客户端上线、认证、和连接状态的保持",
            "type": "boolean"
          },
          "notify_type": {
            "default": "qos",
            "description": "投递给 CoAP 客户端的通知消息类型。当客户端 Observe 一个资源（或订阅某个主题）时，网关会向客户端推送新产生的消息。其消息类型可设置为：<br/><br/>  - non: 不需要客户端返回确认消息;<br/><br/>  - con: 需要客户端返回一个确认消息;<br/><br/>  - qos: 取决于消息的 QoS 等级; QoS 0 会以 `non` 类型下发，QoS 1/2 会以 `con` 类型下发",
            "enum": [
              "non",
              "con",
              "qos"
            ],
            "type": "string"
          },
          "subscribe_qos": {
            "default": "coap",
            "description": "客户端订阅请求的默认 QoS 等级。<br/>当 CoAP 客户端发起订阅请求时，如果未携带 `qos` 参数则会使用该默认值。默认值可设置为：<br/><br/>  - qos0、 qos1、qos2: 设置为固定的 QoS 等级<br/><br/>  - coap: 依据订阅操作的 CoAP 报文类型来动态决定<br/><br/>    * 当订阅请求为 `non-confirmable` 类型时，取值为 qos0<br/><br/>    * 当订阅请求为 `confirmable` 类型时，取值为 qos1",
            "enum": [
              "qos0",
              "qos1",
              "qos2",
              "coap"
            ],
            "type": "string"
          },
          "publish_qos": {
            "default": "coap",
            "description": "客户端发布请求的默认 QoS 等级。<br/>当 CoAP 客户端发起发布请求时，如果未携带 `qos` 参数则会使用该默认值。默认值可设置为：<br><br/>  - qos0、qos1、qos2: 设置为固定的 QoS 等级<br/><br/>  - coap: 依据发布操作的 CoAP 报文类型来动态决定<br/><br/>    * 当发布请求为 `non-confirmable` 类型时，取值为 qos0<br/><br/>    * 当发布请求为 `confirmable` 类型时，取值为 qos1",
            "enum": [
              "qos0",
              "qos1",
              "qos2",
              "coap"
            ],
            "type": "string"
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "是否启用该网关",
            "type": "boolean"
          },
          "enable_stats": {
            "default": true,
            "description": "是否开启客户端统计",
            "type": "boolean"
          },
          "idle_timeout": {
            "default": "30s",
            "description": "客户端连接过程的空闲时间。该配置用于：<br/>  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。<br/>  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
            "example": "12m",
            "type": "string"
          },
          "clientinfo_override": {
            "description": "ClientInfo 重写。",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          },
          "listeners": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                }
              ]
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "emqx_authn_schema.node_error": {
        "properties": {
          "node": {
            "description": "节点名称。",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "error": {
            "description": "节点上产生的错误。",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_listeners.dtls_listener": {
        "properties": {
          "id": {
            "description": "监听器 ID",
            "type": "string"
          },
          "type": {
            "description": "监听器类型",
            "enum": [
              "dtls"
            ],
            "type": "string"
          },
          "name": {
            "description": "监听器名称",
            "type": "string"
          },
          "running": {
            "description": "监听器运行状态",
            "type": "boolean"
          },
          "acceptors": {
            "default": 16,
            "description": "Acceptor 进程池大小。",
            "type": "integer"
          },
          "udp_options": {
            "$ref": "#/components/schemas/gateway.udp_opts"
          },
          "enable": {
            "default": true,
            "description": "是否启用该监听器。",
            "type": "boolean"
          },
          "bind": {
            "description": "监听器绑定的 IP 地址或端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "max_connections": {
            "default": 1024,
            "description": "监听器支持的最大连接数。",
            "oneOf": [
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              },
              {
                "minimum": 1,
                "type": "integer"
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "description": "监听器支持的最大连接速率。",
            "type": "integer"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证。<br/>配置 <code>false</code> 时，将不对客户端做任何认证。",
            "type": "boolean"
          },
          "mountpoint": {
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "access_rules": {
            "default": [],
            "description": "配置监听器的访问控制规则。<br/>见：https://github.com/emqtt/esockd#allowdeny",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dtls_options": {
            "description": "DTLS Socket 配置",
            "$ref": "#/components/schemas/gateway.dtls_opts"
          },
          "status": {
            "description": "监听器状态",
            "$ref": "#/components/schemas/listeners.status"
          },
          "node_status": {
            "description": "监听器在集群中每个节点上的状态",
            "items": {
              "$ref": "#/components/schemas/listeners.node_status"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.ctx_connack": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "description": "事件类型",
            "enum": [
              "client_connack"
            ],
            "type": "string"
          },
          "reason_code": {
            "description": "错误码",
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "clean_start": {
            "default": true,
            "description": "清除会话",
            "type": "boolean"
          },
          "username": {
            "description": "用户名",
            "type": "string"
          },
          "peername": {
            "description": "对等客户端的 IP 地址和端口",
            "type": "string"
          },
          "sockname": {
            "description": "本地监听的 IP 地址和端口",
            "type": "string"
          },
          "proto_name": {
            "description": "协议名称",
            "type": "string"
          },
          "proto_ver": {
            "description": "协议版本",
            "type": "string"
          },
          "keepalive": {
            "description": "保持连接",
            "type": "integer"
          },
          "expiry_interval": {
            "description": "到期间隔",
            "type": "integer"
          },
          "connected_at": {
            "description": "客户端连接完成时的时刻",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_schema.redis_single": {
        "required": [
          "cmd",
          "server",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源。",
            "type": "boolean"
          },
          "type": {
            "default": "redis",
            "description": "数据后端类型。",
            "enum": [
              "redis"
            ],
            "type": "string"
          },
          "cmd": {
            "description": "访问控制数据查询命令。",
            "example": "HGETALL mqtt_authz",
            "type": "string"
          },
          "server": {
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
            "type": "string"
          },
          "redis_type": {
            "default": "single",
            "description": "单机模式。当 Redis 服务运行在单机模式下，该配置必须设置为 'single'。",
            "enum": [
              "single"
            ],
            "type": "string"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "database": {
            "default": 0,
            "description": "Redis 数据库 ID。",
            "minimum": 0,
            "type": "integer"
          },
          "auto_reconnect": {
            "default": true,
            "deprecated": true,
            "description": "已弃用。自动重连数据库。",
            "type": "boolean"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "listeners.tcp_required_bind-with_name": {
        "required": [
          "bind",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "tcp"
            ],
            "type": "string"
          },
          "running": {
            "description": "Listener status",
            "type": "boolean"
          },
          "name": {
            "description": "Listener name",
            "type": "string"
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          },
          "enable": {
            "default": true,
            "description": "启停监听器。",
            "type": "boolean"
          },
          "bind": {
            "default": 1883,
            "description": "监听套接字的 IP 地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "acceptors": {
            "default": 16,
            "description": "监听器接收池的大小。",
            "minimum": 1,
            "type": "integer"
          },
          "max_connections": {
            "default": "infinity",
            "description": "监听器允许的最大并发连接数。",
            "oneOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。<br/><br/>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。<br/><br/>例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/><br/>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/><br/><br/>设置为<code>\"\"</code> 以禁用该功能<br/><br/><br/>mountpoint 字符串中的变量：<br/>- <code>${clientid}</code>: clientid<br/>- <code>${username}</code>: username",
            "type": "string"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。<br/>配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。<br/>配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名<br/>客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "type": "string"
          },
          "max_conn_rate": {
            "description": "Maximum connection rate.<br/><br/>This is used to limit the connection rate for this listener,<br/>once the limit is reached, new connections will be deferred or refused",
            "example": "1000/s",
            "type": "string"
          },
          "messages_rate": {
            "description": "Messages publish rate.<br/><br/>This is used to limit the inbound message numbers for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "1000/s",
            "type": "string"
          },
          "bytes_rate": {
            "description": "Data publish rate.<br/><br/>This is used to limit the inbound bytes rate for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "100MB/s",
            "type": "string"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "description": "此监听器的访问控制规则。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "proxy_protocol": {
            "default": false,
            "description": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/><br/>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "description": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
            "example": "12m",
            "type": "string"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/broker.tcp_opts"
          }
        },
        "type": "object"
      },
      "prometheus.prometheus": {
        "required": [
          "enable",
          "interval",
          "job_name",
          "mnesia_collector",
          "push_gateway_server",
          "vm_dist_collector",
          "vm_memory_collector",
          "vm_msacc_collector",
          "vm_statistics_collector",
          "vm_system_info_collector"
        ],
        "properties": {
          "push_gateway_server": {
            "default": "http://127.0.0.1:9091",
            "description": "Prometheus 服务器地址",
            "type": "string"
          },
          "interval": {
            "default": "15s",
            "description": "数据推送间隔",
            "example": "32s",
            "type": "string"
          },
          "headers": {
            "default": {},
            "description": "推送到 Push Gateway 的 HTTP Headers 列表。<br/><br/>例如，<code> { Authorization = \"some-authz-tokens\"}</code>",
            "items": {
              "example": {},
              "type": "object"
            },
            "type": "array"
          },
          "job_name": {
            "default": "${name}/instance/${name}~${host}",
            "description": "推送到 Push Gateway 的 Job 名称。可用变量为：<br/><br/>- ${name}: EMQX 节点的名称。<br/>- ${host}: EMQX 节点主机名。<br/>例如，当 EMQX 节点名为 <code>emqx@127.0.0.1</code> 则 name 变量的值为 <code>emqx</code>，host 变量的值为 <code>127.0.0.1</code>。<br/><br/>默认值为: <code>${name}/instance/${name}~${host}</code>",
            "type": "string"
          },
          "enable": {
            "default": false,
            "description": "开启或关闭 Prometheus 数据推送",
            "type": "boolean"
          },
          "vm_dist_collector": {
            "default": "disabled",
            "description": "开启或关闭 VM 分布采集器，收集 Erlang 分布机制中涉及的套接字和进程的信息。",
            "enum": [
              "disabled",
              "enabled"
            ],
            "type": "string"
          },
          "mnesia_collector": {
            "default": "enabled",
            "description": "开启或关闭 Mnesia 采集器, 使用 mnesia:system_info/1 收集 Mnesia 相关指标",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "vm_statistics_collector": {
            "default": "enabled",
            "description": "开启或关闭 VM 统计采集器, 使用 erlang:statistics/1 收集 Erlang VM 相关指标",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "vm_system_info_collector": {
            "default": "enabled",
            "description": "开启或关闭 VM 系统信息采集器, 使用 erlang:system_info/1 收集 Erlang VM 相关指标",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "vm_memory_collector": {
            "default": "enabled",
            "description": "开启或关闭 VM 内存采集器, 使用 erlang:memory/0 收集 Erlang 虚拟机动态分配的内存信息，同时提供基本的 (D)ETS 统计信息",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          },
          "vm_msacc_collector": {
            "default": "enabled",
            "description": "开启或关闭 VM msacc 采集器, 使用 erlang:statistics(microstate_accounting) 收集微状态计数指标",
            "enum": [
              "enabled",
              "disabled"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "authz.metrics": {
        "properties": {
          "total": {
            "description": "授权实例被触发的总次数。",
            "type": "integer"
          },
          "allow": {
            "description": "授权成功的次数。",
            "type": "integer"
          },
          "deny": {
            "description": "授权失败的次数。",
            "type": "integer"
          },
          "nomatch": {
            "description": "没有匹配到任何授权规则的次数。",
            "type": "number"
          },
          "rate": {
            "description": "命中速率，单位：次/秒。",
            "type": "number"
          },
          "rate_max": {
            "description": "最大命中速率，单位：次/秒。",
            "type": "number"
          },
          "rate_last5m": {
            "description": "5分钟内平均命中速率，单位：次/秒。",
            "type": "number"
          }
        },
        "type": "object"
      },
      "listeners.ssl_required_bind-with_name": {
        "required": [
          "bind",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "ssl"
            ],
            "type": "string"
          },
          "running": {
            "description": "Listener status",
            "type": "boolean"
          },
          "name": {
            "description": "Listener name",
            "type": "string"
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          },
          "enable": {
            "default": true,
            "description": "启停监听器。",
            "type": "boolean"
          },
          "bind": {
            "default": 8883,
            "description": "监听套接字的 IP 地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "acceptors": {
            "default": 16,
            "description": "监听器接收池的大小。",
            "minimum": 1,
            "type": "integer"
          },
          "max_connections": {
            "default": "infinity",
            "description": "监听器允许的最大并发连接数。",
            "oneOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。<br/><br/>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。<br/><br/>例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/><br/>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/><br/><br/>设置为<code>\"\"</code> 以禁用该功能<br/><br/><br/>mountpoint 字符串中的变量：<br/>- <code>${clientid}</code>: clientid<br/>- <code>${username}</code>: username",
            "type": "string"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。<br/>配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。<br/>配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名<br/>客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "type": "string"
          },
          "max_conn_rate": {
            "description": "Maximum connection rate.<br/><br/>This is used to limit the connection rate for this listener,<br/>once the limit is reached, new connections will be deferred or refused",
            "example": "1000/s",
            "type": "string"
          },
          "messages_rate": {
            "description": "Messages publish rate.<br/><br/>This is used to limit the inbound message numbers for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "1000/s",
            "type": "string"
          },
          "bytes_rate": {
            "description": "Data publish rate.<br/><br/>This is used to limit the inbound bytes rate for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "100MB/s",
            "type": "string"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "description": "此监听器的访问控制规则。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "proxy_protocol": {
            "default": false,
            "description": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/><br/>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "description": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
            "example": "12m",
            "type": "string"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/broker.tcp_opts"
          },
          "ssl_options": {
            "$ref": "#/components/schemas/broker.listener_ssl_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.mqttsn": {
        "required": [
          "gateway_id"
        ],
        "properties": {
          "name": {
            "description": "网关名称",
            "enum": [
              "mqttsn"
            ],
            "type": "string"
          },
          "gateway_id": {
            "default": 1,
            "description": "MQTT-SN 网关 ID。<br/>当 <code>broadcast</code> 打开时，MQTT-SN 网关会使用该 ID 来广播 ADVERTISE 消息",
            "type": "integer"
          },
          "broadcast": {
            "default": false,
            "description": "是否周期性广播 ADVERTISE 消息",
            "type": "boolean"
          },
          "enable_qos3": {
            "default": true,
            "description": "是否允许无连接的客户端发送 QoS 等于 -1 的消息。<br/>该功能主要用于支持轻量的 MQTT-SN 客户端实现，它不会向网关建立连接，注册主题，也不会发起订阅；它只使用 QoS 为 -1 来发布消息",
            "type": "boolean"
          },
          "subs_resume": {
            "default": false,
            "description": "在会话被重用后，网关是否主动向客户端注册对已订阅主题名称",
            "type": "boolean"
          },
          "predefined": {
            "default": [],
            "description": "预定义主题列表。<br/>预定义的主题列表，是一组 主题 ID 和 主题名称 的映射关系。使用预先定义的主题列表，可以减少 MQTT-SN 客户端和网关对于固定主题的注册请求",
            "items": {
              "$ref": "#/components/schemas/emqx_mqttsn_schema.mqttsn_predefined"
            },
            "type": "array"
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "是否启用该网关",
            "type": "boolean"
          },
          "enable_stats": {
            "default": true,
            "description": "是否开启客户端统计",
            "type": "boolean"
          },
          "idle_timeout": {
            "default": "30s",
            "description": "客户端连接过程的空闲时间。该配置用于：<br/>  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。<br/>  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
            "example": "12m",
            "type": "string"
          },
          "clientinfo_override": {
            "description": "ClientInfo 重写。",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          },
          "listeners": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                }
              ]
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "rule_engine.builtin_action_console": {
        "properties": {
          "function": {
            "description": "将输出打印到控制台",
            "enum": [
              "console"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_mqtt.put": {
        "required": [
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "description": "启用/禁用 Bridge",
            "type": "boolean"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mqtt.creation_opts"
          },
          "mode": {
            "default": "cluster_shareload",
            "deprecated": true,
            "description": "The mode of the MQTT Bridge.<br/><br/>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/><br/>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid' is suffixed by the node name, this is to avoid<br/>clientid conflicts between different nodes. And we can only use shared subscription<br/>topic filters for <code>remote.topic</code> of ingress connections.",
            "enum": [
              "cluster_shareload"
            ],
            "type": "string"
          },
          "server": {
            "description": "The host and port of the remote MQTT broker",
            "type": "string"
          },
          "clientid_prefix": {
            "description": "Optional prefix to prepend to the clientid used by egress bridges.",
            "type": "string"
          },
          "reconnect_interval": {
            "deprecated": true,
            "type": "string"
          },
          "proto_ver": {
            "default": "v4",
            "description": "The MQTT protocol version",
            "enum": [
              "v3",
              "v4",
              "v5"
            ],
            "type": "string"
          },
          "bridge_mode": {
            "default": false,
            "description": "If enable bridge mode.<br/>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT<br/>broker MUST support this feature.<br/>If bridge_mode is set to true, the bridge will indicate to the remote broker that it is a bridge not an ordinary client.<br/>This means that loop detection will be more effective and that retained messages will be propagated correctly.",
            "type": "boolean"
          },
          "username": {
            "description": "The username of the MQTT protocol",
            "type": "string"
          },
          "password": {
            "description": "The password of the MQTT protocol",
            "format": "password",
            "type": "string"
          },
          "clean_start": {
            "default": true,
            "description": "Whether to start a clean session when reconnecting a remote broker for ingress bridge",
            "type": "boolean"
          },
          "keepalive": {
            "default": "300s",
            "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`",
            "type": "string"
          },
          "retry_interval": {
            "default": "15s",
            "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`",
            "type": "string"
          },
          "max_inflight": {
            "default": 32,
            "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
            "minimum": 0,
            "type": "integer"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          },
          "ingress": {
            "description": "The ingress config defines how this bridge receive messages from the remote MQTT broker, and then<br/>        send them to the local broker.<br/><br/>        Template with variables is allowed in 'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>        NOTE: if this bridge is used as the input of a rule, and also 'local.topic' is<br/>        configured, then messages got from the remote broker will be sent to both the 'local.topic' and<br/>        the rule.",
            "$ref": "#/components/schemas/connector-mqtt.ingress"
          },
          "egress": {
            "description": "The egress config defines how this bridge forwards messages from the local broker to the remote broker.<br/><br/>Template with variables is allowed in 'remote.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>NOTE: if this bridge is used as the action of a rule, and also 'local.topic'<br/>is configured, then both the data got from the rule and the MQTT messages that matches<br/>'local.topic' will be forwarded.",
            "$ref": "#/components/schemas/connector-mqtt.egress"
          }
        },
        "type": "object"
      },
      "authn-hash.bcrypt": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "BCRYPT password hashing.",
            "enum": [
              "bcrypt"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "exhook.ssl_conf": {
        "properties": {
          "cacertfile": {
            "description": "受信任的PEM格式 CA  证书捆绑文件<br/><br/>此文件中的证书用于验证TLS对等方的证书。<br/>如果要信任新 CA，请将新证书附加到文件中。<br/>无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/><br/>注意：从文件中失效（删除）证书不会影响已建立的连接。",
            "type": "string"
          },
          "cacerts": {
            "default": false,
            "deprecated": true,
            "type": "boolean"
          },
          "certfile": {
            "description": "PEM格式证书链文件<br/><br/>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，<br/>然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。<br/>根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
            "type": "string"
          },
          "keyfile": {
            "description": "PEM格式的私钥文件。",
            "type": "string"
          },
          "verify": {
            "default": "verify_none",
            "description": "启用或禁用对等验证。",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "type": "string"
          },
          "reuse_sessions": {
            "default": true,
            "description": "启用 TLS 会话重用。",
            "type": "boolean"
          },
          "depth": {
            "default": 10,
            "description": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。<br/>因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/><br/>如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/><br/>如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
            "minimum": 0,
            "type": "integer"
          },
          "password": {
            "description": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
            "example": "",
            "format": "password",
            "type": "string"
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "description": "支持所有TLS/DTLS版本<br/><br/>注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ciphers": {
            "default": [],
            "description": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。<br/><br/><br/>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。<br/>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。<br/><br/>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。<br/>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/><br/>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。<br/>不兼容的密码套件将被自动删除。<br/><br/>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。<br/><br/><br/><br/>注：PSK 的 Ciphers 不支持 tlsv1.3<br/><br/>如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。<br/><br/><br/><br/>PSK 密码套件：<br/><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "secure_renegotiate": {
            "default": true,
            "description": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。<br/>RFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
            "type": "boolean"
          },
          "log_level": {
            "default": "notice",
            "description": "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "type": "string"
          },
          "hibernate_after": {
            "default": "5s",
            "description": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
            "example": "12m",
            "type": "string"
          },
          "enable": {
            "default": false,
            "description": "启用 TLS。",
            "type": "boolean"
          },
          "server_name_indication": {
            "description": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/><br/>例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，<br/>例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/><br/>如果未指定，它将默认为使用的主机名字符串<br/>建立连接，除非使用 IP 地址<br/><br/>然后，主机名也用于对等机的主机名验证证书<br/><br/>特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
            "example": "disable",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "enum": [
                  "disable"
                ],
                "type": "string"
              }
            ]
          }
        },
        "type": "object"
      },
      "lwm2m.resource": {
        "properties": {
          "operations": {
            "description": "资源可用操作列表",
            "example": "E",
            "type": "string"
          },
          "dataType": {
            "description": "数据类型",
            "enum": [
              "Integer",
              "Float",
              "Time",
              "String",
              "Boolean",
              "Opaque",
              "Objlnk"
            ],
            "example": "Integer",
            "type": "string"
          },
          "path": {
            "description": "资源路径",
            "example": "urn:oma:lwm2m:oma:2",
            "type": "string"
          },
          "name": {
            "description": "资源名称",
            "example": "lwm2m-test",
            "type": "string"
          }
        },
        "type": "object"
      },
      "listeners.ssl_required_bind": {
        "required": [
          "bind",
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "ssl"
            ],
            "type": "string"
          },
          "running": {
            "description": "Listener status",
            "type": "boolean"
          },
          "id": {
            "description": "Listener id",
            "type": "string"
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          },
          "enable": {
            "default": true,
            "description": "启停监听器。",
            "type": "boolean"
          },
          "bind": {
            "default": 8883,
            "description": "监听套接字的 IP 地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "acceptors": {
            "default": 16,
            "description": "监听器接收池的大小。",
            "minimum": 1,
            "type": "integer"
          },
          "max_connections": {
            "default": "infinity",
            "description": "监听器允许的最大并发连接数。",
            "oneOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。<br/><br/>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。<br/><br/>例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/><br/>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/><br/><br/>设置为<code>\"\"</code> 以禁用该功能<br/><br/><br/>mountpoint 字符串中的变量：<br/>- <code>${clientid}</code>: clientid<br/>- <code>${username}</code>: username",
            "type": "string"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。<br/>配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。<br/>配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名<br/>客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "type": "string"
          },
          "max_conn_rate": {
            "description": "Maximum connection rate.<br/><br/>This is used to limit the connection rate for this listener,<br/>once the limit is reached, new connections will be deferred or refused",
            "example": "1000/s",
            "type": "string"
          },
          "messages_rate": {
            "description": "Messages publish rate.<br/><br/>This is used to limit the inbound message numbers for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "1000/s",
            "type": "string"
          },
          "bytes_rate": {
            "description": "Data publish rate.<br/><br/>This is used to limit the inbound bytes rate for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "100MB/s",
            "type": "string"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "description": "此监听器的访问控制规则。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "proxy_protocol": {
            "default": false,
            "description": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/><br/>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "description": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
            "example": "12m",
            "type": "string"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/broker.tcp_opts"
          },
          "ssl_options": {
            "$ref": "#/components/schemas/broker.listener_ssl_opts"
          }
        },
        "type": "object"
      },
      "retainer.message_summary": {
        "properties": {
          "msgid": {
            "description": "消息 ID",
            "type": "string"
          },
          "topic": {
            "description": "主题",
            "type": "string"
          },
          "qos": {
            "description": "QoS",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          },
          "publish_at": {
            "description": "消息发送时间, RFC 3339 格式",
            "type": "string"
          },
          "from_clientid": {
            "description": "发布者的 ClientID",
            "type": "string"
          },
          "from_username": {
            "description": "发布者的用户名",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_topics.topic": {
        "required": [
          "node",
          "topic"
        ],
        "properties": {
          "topic": {
            "description": "Topic Name",
            "type": "string"
          },
          "node": {
            "description": "Node",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.ctx_connected": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "description": "事件类型",
            "enum": [
              "client_connected"
            ],
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "username": {
            "description": "用户名",
            "type": "string"
          },
          "mountpoint": {
            "description": "挂载点",
            "type": "string"
          },
          "peername": {
            "description": "对等客户端的 IP 地址和端口",
            "type": "string"
          },
          "sockname": {
            "description": "本地监听的 IP 地址和端口",
            "type": "string"
          },
          "proto_name": {
            "description": "协议名称",
            "type": "string"
          },
          "proto_ver": {
            "description": "协议版本",
            "type": "string"
          },
          "keepalive": {
            "description": "保持连接",
            "type": "integer"
          },
          "clean_start": {
            "default": true,
            "description": "清除会话",
            "type": "boolean"
          },
          "expiry_interval": {
            "description": "到期间隔",
            "type": "integer"
          },
          "is_bridge": {
            "default": false,
            "description": "是否桥接",
            "type": "boolean"
          },
          "connected_at": {
            "description": "客户端连接完成时的时刻",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "listeners.listener_id_status": {
        "required": [
          "bind",
          "enable",
          "id",
          "name",
          "type"
        ],
        "properties": {
          "id": {
            "description": "Listener id",
            "example": "tcp:demo",
            "type": "string"
          },
          "type": {
            "description": "Listener type",
            "enum": [
              "tcp",
              "ssl",
              "ws",
              "wss",
              "quic"
            ],
            "type": "string"
          },
          "name": {
            "description": "Listener name",
            "type": "string"
          },
          "enable": {
            "description": "Listener enable",
            "type": "boolean"
          },
          "number": {
            "description": "ListenerId counter",
            "minimum": 1,
            "type": "integer"
          },
          "bind": {
            "description": "Listener bind addr",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "acceptors": {
            "description": "ListenerId acceptors",
            "minimum": 1,
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/listeners.status"
          },
          "node_status": {
            "items": {
              "$ref": "#/components/schemas/listeners.node_status"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "emqx_dashboard_monitor_api.sampler_current": {
        "properties": {
          "dropped_msg_rate": {
            "description": "Dropped messages per 10 seconds",
            "type": "integer"
          },
          "received_msg_rate": {
            "description": "Dropped messages per 10 seconds",
            "type": "integer"
          },
          "sent_msg_rate": {
            "description": "Sent messages per 10 seconds",
            "type": "integer"
          },
          "subscriptions": {
            "description": "Subscriptions at the time of sampling. Can only represent the approximate state",
            "type": "integer"
          },
          "topics": {
            "description": "Count topics at the time of sampling. Can only represent the approximate state",
            "type": "integer"
          },
          "connections": {
            "description": "Sessions at the time of sampling. Can only represent the approximate state",
            "type": "integer"
          },
          "live_connections": {
            "description": "Connections at the time of sampling. Can only represent the approximate state",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "authn.http_get": {
        "required": [
          "backend",
          "mechanism",
          "method",
          "url"
        ],
        "properties": {
          "method": {
            "description": "HTTP 请求方法。",
            "enum": [
              "get"
            ],
            "type": "string"
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "keep-alive": "timeout=30, max=1000"
            },
            "description": "HTTP Headers 列表 (无 <code>content-type</code>) 。",
            "example": {},
            "type": "object"
          },
          "mechanism": {
            "description": "认证机制。",
            "enum": [
              "password_based"
            ],
            "type": "string"
          },
          "backend": {
            "description": "后端类型。",
            "enum": [
              "http"
            ],
            "type": "string"
          },
          "url": {
            "description": "认证 HTTP 服务器地址。",
            "type": "string"
          },
          "body": {
            "description": "HTTP request body，JSON 字符模板，支持使用占位符。<br/>使用 GET 请求时，将被转换为 URL Query。<br/>使用 POST 请求时，转换格式将取决于 content-type 头被设置为 application/json 还是 application/x-www-form-urlencoded。<br/>",
            "example": {},
            "type": "object"
          },
          "request_timeout": {
            "default": "5s",
            "description": "HTTP 请求超时时长。",
            "example": "32s",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
            "type": "boolean"
          },
          "connect_timeout": {
            "default": "15s",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s",
            "type": "string"
          },
          "enable_pipelining": {
            "default": 100,
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1,
            "type": "integer"
          },
          "max_retries": {
            "deprecated": true,
            "minimum": 0,
            "type": "integer"
          },
          "pool_size": {
            "default": 8,
            "description": "The pool size.",
            "minimum": 1,
            "type": "integer"
          },
          "request": {
            "description": "Configure HTTP request parameters.",
            "$ref": "#/components/schemas/connector-http.request"
          },
          "retry_interval": {
            "deprecated": true,
            "example": "12m",
            "type": "string"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "dashboard.ssl_options": {
        "properties": {
          "cacertfile": {
            "default": "${EMQX_ETC_DIR}/certs/cacert.pem",
            "description": "受信任的PEM格式 CA  证书捆绑文件<br/><br/>此文件中的证书用于验证TLS对等方的证书。<br/>如果要信任新 CA，请将新证书附加到文件中。<br/>无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/><br/>注意：从文件中失效（删除）证书不会影响已建立的连接。",
            "type": "string"
          },
          "cacerts": {
            "default": false,
            "deprecated": true,
            "type": "boolean"
          },
          "certfile": {
            "default": "${EMQX_ETC_DIR}/certs/cert.pem",
            "description": "PEM格式证书链文件<br/><br/>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，<br/>然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。<br/>根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
            "type": "string"
          },
          "keyfile": {
            "default": "${EMQX_ETC_DIR}/certs/key.pem",
            "description": "PEM格式的私钥文件。",
            "type": "string"
          },
          "verify": {
            "default": "verify_none",
            "description": "启用或禁用对等验证。",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "type": "string"
          },
          "reuse_sessions": {
            "default": true,
            "description": "启用 TLS 会话重用。",
            "type": "boolean"
          },
          "depth": {
            "default": 10,
            "description": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。<br/>因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/><br/>如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/><br/>如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
            "minimum": 0,
            "type": "integer"
          },
          "password": {
            "description": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
            "example": "",
            "format": "password",
            "type": "string"
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "description": "支持所有TLS/DTLS版本<br/><br/>注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ciphers": {
            "default": [],
            "description": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。<br/><br/><br/>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。<br/>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。<br/><br/>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。<br/>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/><br/>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。<br/>不兼容的密码套件将被自动删除。<br/><br/>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。<br/><br/><br/><br/>注：PSK 的 Ciphers 不支持 tlsv1.3<br/><br/>如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。<br/><br/><br/><br/>PSK 密码套件：<br/><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "secure_renegotiate": {
            "default": true,
            "description": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。<br/>RFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
            "type": "boolean"
          },
          "log_level": {
            "default": "notice",
            "description": "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "type": "string"
          },
          "hibernate_after": {
            "default": "5s",
            "description": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
            "example": "12m",
            "type": "string"
          },
          "dhfile": {
            "description": "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/><br/>注意：TLS 1.3不支持<code>dhfile</code>选项。",
            "type": "string"
          },
          "honor_cipher_order": {
            "default": true,
            "description": "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
            "type": "boolean"
          },
          "client_renegotiation": {
            "default": true,
            "description": "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。<br/>这可能会成为拒绝服务攻击的载体。<br/>SSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。<br/>默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
            "type": "boolean"
          },
          "handshake_timeout": {
            "default": "15s",
            "description": "握手完成所允许的最长时间",
            "example": "12m",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_telemetry_api.telemetry": {
        "properties": {
          "emqx_version": {
            "description": "获取 emqx 版本",
            "example": "5.0.0-beta.3-32d1547c",
            "type": "string"
          },
          "license": {
            "description": "获取 license 信息",
            "example": {
              "edition": "opensource"
            },
            "type": "object"
          },
          "os_name": {
            "description": "获取操作系统名称",
            "example": "Linux",
            "type": "string"
          },
          "os_version": {
            "description": "获取操作系统版本",
            "example": "20.04",
            "type": "string"
          },
          "otp_version": {
            "description": "获取 OTP 版本",
            "example": "24",
            "type": "string"
          },
          "up_time": {
            "description": "获取运行时间",
            "example": 20220113,
            "type": "integer"
          },
          "uuid": {
            "description": "获取 UUID",
            "example": "AAAAAAAA-BBBB-CCCC-2022-DDDDEEEEFFF",
            "type": "string"
          },
          "nodes_uuid": {
            "description": "获取节点 UUID",
            "example": [
              "AAAAAAAA-BBBB-CCCC-2022-DDDDEEEEFFF",
              "ZZZZZZZZ-CCCC-BBBB-2022-DDDDEEEEFFF"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "active_plugins": {
            "description": "获取活跃插件",
            "example": [
              "Plugin A",
              "Plugin B"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "active_modules": {
            "description": "获取活跃模块",
            "example": [
              "Module A",
              "Module B"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "num_clients": {
            "description": "获取客户端数量",
            "example": 20220113,
            "type": "integer"
          },
          "messages_received": {
            "description": "获取接收到的消息数量",
            "example": 2022,
            "type": "integer"
          },
          "messages_sent": {
            "description": "获取发送的消息数量",
            "example": 2022,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "listeners.node_status": {
        "properties": {
          "node": {
            "description": "Node name",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/listeners.status"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_clients.client": {
        "properties": {
          "awaiting_rel_cnt": {
            "description": "v4 api name [awaiting_rel] Number of awaiting PUBREC packet",
            "type": "integer"
          },
          "awaiting_rel_max": {
            "description": "v4 api name [max_awaiting_rel]. Maximum allowed number of awaiting PUBREC packet",
            "type": "integer"
          },
          "clean_start": {
            "description": "Indicate whether the client is using a brand new session",
            "type": "boolean"
          },
          "clientid": {
            "description": "Client identifier",
            "type": "string"
          },
          "connected": {
            "description": "Whether the client is connected",
            "type": "boolean"
          },
          "connected_at": {
            "description": "Client connection time, rfc3339 or timestamp(millisecond)",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "created_at": {
            "description": "Session creation time, rfc3339 or timestamp(millisecond)",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "disconnected_at": {
            "description": "Client offline time. It's Only valid and returned when connected is false, rfc3339 or timestamp(millisecond)",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "expiry_interval": {
            "description": "Session expiration interval, with the unit of second",
            "type": "integer"
          },
          "heap_size": {
            "description": "Process heap size with the unit of byte",
            "type": "integer"
          },
          "inflight_cnt": {
            "description": "Current length of inflight",
            "type": "integer"
          },
          "inflight_max": {
            "description": "v4 api name [max_inflight]. Maximum length of inflight",
            "type": "integer"
          },
          "ip_address": {
            "description": "Client's IP address",
            "type": "string"
          },
          "is_bridge": {
            "description": "Indicates whether the client is connectedvia bridge",
            "type": "boolean"
          },
          "keepalive": {
            "description": "keepalive time, with the unit of second",
            "type": "integer"
          },
          "mailbox_len": {
            "description": "Process mailbox size",
            "type": "integer"
          },
          "mqueue_dropped": {
            "description": "Number of messages dropped by the message queue due to exceeding the length",
            "type": "integer"
          },
          "mqueue_len": {
            "description": "Current length of message queue",
            "type": "integer"
          },
          "mqueue_max": {
            "description": "v4 api name [max_mqueue]. Maximum length of message queue",
            "type": "integer"
          },
          "node": {
            "description": "Name of the node to which the client is connected",
            "type": "string"
          },
          "port": {
            "description": "Client's port",
            "type": "integer"
          },
          "proto_name": {
            "description": "Client protocol name",
            "type": "string"
          },
          "proto_ver": {
            "description": "Protocol version used by the client",
            "type": "integer"
          },
          "recv_cnt": {
            "description": "Number of TCP packets received",
            "type": "integer"
          },
          "recv_msg": {
            "description": "Number of PUBLISH packets received",
            "type": "integer"
          },
          "recv_msg.dropped": {
            "description": "Number of dropped PUBLISH packets",
            "type": "integer"
          },
          "recv_msg.dropped.await_pubrel_timeout": {
            "description": "Number of dropped PUBLISH packets due to expired",
            "type": "integer"
          },
          "recv_msg.qos0": {
            "description": "Number of PUBLISH QoS0 packets received",
            "type": "integer"
          },
          "recv_msg.qos1": {
            "description": "Number of PUBLISH QoS1 packets received",
            "type": "integer"
          },
          "recv_msg.qos2": {
            "description": "Number of PUBLISH QoS2 packets received",
            "type": "integer"
          },
          "recv_oct": {
            "description": "Number of bytes received",
            "type": "integer"
          },
          "recv_pkt": {
            "description": "Number of MQTT packets received",
            "type": "integer"
          },
          "reductions": {
            "description": "Erlang reduction",
            "type": "integer"
          },
          "send_cnt": {
            "description": "Number of TCP packets sent",
            "type": "integer"
          },
          "send_msg": {
            "description": "Number of PUBLISH packets sent",
            "type": "integer"
          },
          "send_msg.dropped": {
            "description": "Number of dropped PUBLISH packets",
            "type": "integer"
          },
          "send_msg.dropped.expired": {
            "description": "Number of dropped PUBLISH packets due to expired",
            "type": "integer"
          },
          "send_msg.dropped.queue_full": {
            "description": "Number of dropped PUBLISH packets due to queue full",
            "type": "integer"
          },
          "send_msg.dropped.too_large": {
            "description": "Number of dropped PUBLISH packets due to packet length too large",
            "type": "integer"
          },
          "send_msg.qos0": {
            "description": "Number of PUBLISH QoS0 packets sent",
            "type": "integer"
          },
          "send_msg.qos1": {
            "description": "Number of PUBLISH QoS1 packets sent",
            "type": "integer"
          },
          "send_msg.qos2": {
            "description": "Number of PUBLISH QoS2 packets sent",
            "type": "integer"
          },
          "send_oct": {
            "description": "Number of bytes sent",
            "type": "integer"
          },
          "send_pkt": {
            "description": "Number of MQTT packets sent",
            "type": "integer"
          },
          "subscriptions_cnt": {
            "description": "Number of subscriptions established by this client.",
            "type": "integer"
          },
          "subscriptions_max": {
            "description": "v4 api name [max_subscriptions] Maximum number of subscriptions allowed by this client",
            "type": "integer"
          },
          "username": {
            "description": "User name of client when connecting",
            "type": "string"
          },
          "mountpoint": {
            "description": "Topic mountpoint",
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_mqtt.get": {
        "required": [
          "server"
        ],
        "properties": {
          "status": {
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "type": "string"
          },
          "status_reason": {
            "description": "桥接连接失败的原因。",
            "example": "Connection refused",
            "type": "string"
          },
          "node_status": {
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            },
            "type": "array"
          },
          "enable": {
            "default": true,
            "description": "启用/禁用 Bridge",
            "type": "boolean"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mqtt.creation_opts"
          },
          "mode": {
            "default": "cluster_shareload",
            "deprecated": true,
            "description": "The mode of the MQTT Bridge.<br/><br/>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/><br/>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid' is suffixed by the node name, this is to avoid<br/>clientid conflicts between different nodes. And we can only use shared subscription<br/>topic filters for <code>remote.topic</code> of ingress connections.",
            "enum": [
              "cluster_shareload"
            ],
            "type": "string"
          },
          "server": {
            "description": "The host and port of the remote MQTT broker",
            "type": "string"
          },
          "clientid_prefix": {
            "description": "Optional prefix to prepend to the clientid used by egress bridges.",
            "type": "string"
          },
          "reconnect_interval": {
            "deprecated": true,
            "type": "string"
          },
          "proto_ver": {
            "default": "v4",
            "description": "The MQTT protocol version",
            "enum": [
              "v3",
              "v4",
              "v5"
            ],
            "type": "string"
          },
          "bridge_mode": {
            "default": false,
            "description": "If enable bridge mode.<br/>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT<br/>broker MUST support this feature.<br/>If bridge_mode is set to true, the bridge will indicate to the remote broker that it is a bridge not an ordinary client.<br/>This means that loop detection will be more effective and that retained messages will be propagated correctly.",
            "type": "boolean"
          },
          "username": {
            "description": "The username of the MQTT protocol",
            "type": "string"
          },
          "password": {
            "description": "The password of the MQTT protocol",
            "format": "password",
            "type": "string"
          },
          "clean_start": {
            "default": true,
            "description": "Whether to start a clean session when reconnecting a remote broker for ingress bridge",
            "type": "boolean"
          },
          "keepalive": {
            "default": "300s",
            "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`",
            "type": "string"
          },
          "retry_interval": {
            "default": "15s",
            "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`",
            "type": "string"
          },
          "max_inflight": {
            "default": 32,
            "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
            "minimum": 0,
            "type": "integer"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          },
          "ingress": {
            "description": "The ingress config defines how this bridge receive messages from the remote MQTT broker, and then<br/>        send them to the local broker.<br/><br/>        Template with variables is allowed in 'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>        NOTE: if this bridge is used as the input of a rule, and also 'local.topic' is<br/>        configured, then messages got from the remote broker will be sent to both the 'local.topic' and<br/>        the rule.",
            "$ref": "#/components/schemas/connector-mqtt.ingress"
          },
          "egress": {
            "description": "The egress config defines how this bridge forwards messages from the local broker to the remote broker.<br/><br/>Template with variables is allowed in 'remote.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>NOTE: if this bridge is used as the action of a rule, and also 'local.topic'<br/>is configured, then both the data got from the rule and the MQTT messages that matches<br/>'local.topic' will be forwarded.",
            "$ref": "#/components/schemas/connector-mqtt.egress"
          }
        },
        "type": "object"
      },
      "authz.resource_metrics": {
        "properties": {
          "matched": {
            "description": "请求命中次数。",
            "type": "integer"
          },
          "success": {
            "description": "请求成功次数。",
            "type": "integer"
          },
          "failed": {
            "description": "请求失败次数。",
            "type": "integer"
          },
          "rate": {
            "description": "命中速率，单位：次/秒。",
            "type": "number"
          },
          "rate_max": {
            "description": "最大命中速率，单位：次/秒。",
            "type": "number"
          },
          "rate_last5m": {
            "description": "5分钟内平均命中速率，单位：次/秒。",
            "type": "number"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_subscriptions.subscription": {
        "properties": {
          "node": {
            "description": "Access type",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "topic": {
            "description": "Topic name",
            "example": "testtopic/1",
            "type": "string"
          },
          "clientid": {
            "description": "Client identifier",
            "example": "emqx_clientid_xx128cdhfc",
            "type": "string"
          },
          "qos": {
            "description": "QoS",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          },
          "nl": {
            "description": "No Local",
            "example": 0,
            "type": "integer"
          },
          "rap": {
            "description": "Retain as Published",
            "example": 0,
            "type": "integer"
          },
          "rh": {
            "description": "Retain Handling",
            "example": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_listeners.ssl_listener": {
        "properties": {
          "id": {
            "description": "监听器 ID",
            "type": "string"
          },
          "type": {
            "description": "监听器类型",
            "enum": [
              "ssl"
            ],
            "type": "string"
          },
          "name": {
            "description": "监听器名称",
            "type": "string"
          },
          "running": {
            "description": "监听器运行状态",
            "type": "boolean"
          },
          "acceptors": {
            "default": 16,
            "description": "Acceptor 进程池大小。",
            "type": "integer"
          },
          "tcp_options": {
            "description": "TCP Socket 配置。",
            "$ref": "#/components/schemas/broker.tcp_opts"
          },
          "proxy_protocol": {
            "default": false,
            "description": "是否开启 Proxy Protocol V1/2。当 EMQX 集群部署在 HAProxy 或 Nginx 后需要获取客户端真实 IP 时常用到该选项。参考：https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "15s",
            "description": "接收 Proxy Protocol 报文头的超时时间。如果在超时内没有收到 Proxy Protocol 包，EMQX 将关闭 TCP 连接。",
            "example": "12m",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "是否启用该监听器。",
            "type": "boolean"
          },
          "bind": {
            "description": "监听器绑定的 IP 地址或端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "max_connections": {
            "default": 1024,
            "description": "监听器支持的最大连接数。",
            "oneOf": [
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              },
              {
                "minimum": 1,
                "type": "integer"
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "description": "监听器支持的最大连接速率。",
            "type": "integer"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证。<br/>配置 <code>false</code> 时，将不对客户端做任何认证。",
            "type": "boolean"
          },
          "mountpoint": {
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "access_rules": {
            "default": [],
            "description": "配置监听器的访问控制规则。<br/>见：https://github.com/emqtt/esockd#allowdeny",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ssl_options": {
            "description": "SSL Socket 配置。",
            "$ref": "#/components/schemas/broker.listener_ssl_opts"
          },
          "status": {
            "description": "监听器状态",
            "$ref": "#/components/schemas/listeners.status"
          },
          "node_status": {
            "description": "监听器在集群中每个节点上的状态",
            "items": {
              "$ref": "#/components/schemas/listeners.node_status"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "emqx_mongodb.topology": {
        "properties": {
          "max_overflow": {
            "default": 0,
            "description": "最大溢出。",
            "minimum": 0,
            "type": "integer"
          },
          "overflow_ttl": {
            "description": "当池内工人太多时，等待多久清除多余工人。",
            "example": "32s",
            "type": "string"
          },
          "overflow_check_period": {
            "description": "检查是否有超过配置的工人的周期（\"溢出\"）。",
            "example": "32s",
            "type": "string"
          },
          "local_threshold_ms": {
            "description": "在多个合适的MongoDB实例中进行选择的延迟窗口的大小。",
            "example": "32s",
            "type": "string"
          },
          "connect_timeout_ms": {
            "description": "超时重连的等待时间。",
            "example": "32s",
            "type": "string"
          },
          "socket_timeout_ms": {
            "description": "在尝试超时之前，在套接字上尝试发送或接收的持续时间。",
            "example": "32s",
            "type": "string"
          },
          "server_selection_timeout_ms": {
            "description": "指定在抛出异常之前为服务器选择阻断多长时间。",
            "example": "32s",
            "type": "string"
          },
          "wait_queue_timeout_ms": {
            "description": "工作者等待连接可用的最长时间。",
            "example": "32s",
            "type": "string"
          },
          "heartbeat_frequency_ms": {
            "default": "200s",
            "description": "控制驱动程序何时检查MongoDB部署的状态。指定检查的间隔时间，从上一次检查结束到下一次检查开始计算。如果连接数增加（例如，如果你增加池子的大小，就会发生这种情况），你可能也需要增加这个周期，以避免在MongoDB日志文件中创建太多的日志条目。",
            "example": "32s",
            "type": "string"
          },
          "min_heartbeat_frequency_ms": {
            "description": "心跳间的最小间隙",
            "example": "32s",
            "type": "string"
          }
        },
        "type": "object"
      },
      "listeners.quic_required_bind-with_name": {
        "required": [
          "bind",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "quic"
            ],
            "type": "string"
          },
          "running": {
            "description": "Listener status",
            "type": "boolean"
          },
          "name": {
            "description": "Listener name",
            "type": "string"
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          },
          "ciphers": {
            "default": [
              "TLS_AES_256_GCM_SHA384",
              "TLS_AES_128_GCM_SHA256",
              "TLS_CHACHA20_POLY1305_SHA256"
            ],
            "description": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。<br/><br/><br/>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。<br/>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。<br/><br/>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。<br/>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/><br/>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。<br/>不兼容的密码套件将被自动删除。<br/><br/>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。<br/><br/><br/><br/>注：PSK 的 Ciphers 不支持 tlsv1.3<br/><br/>如果打算使用PSK密码套件，<code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。<br/><br/><br/><br/>PSK 密码套件：<br/><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/><br/><br/>注：QUIC 监听器不支持 tlsv1.3 的 ciphers",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ssl_options": {
            "description": "QUIC 传输层的 TLS 选项",
            "$ref": "#/components/schemas/broker.listener_quic_ssl_opts"
          },
          "enable": {
            "default": true,
            "description": "启停监听器。",
            "type": "boolean"
          },
          "bind": {
            "default": 14567,
            "description": "监听套接字的 IP 地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "acceptors": {
            "default": 16,
            "description": "监听器接收池的大小。",
            "minimum": 1,
            "type": "integer"
          },
          "max_connections": {
            "default": "infinity",
            "description": "监听器允许的最大并发连接数。",
            "oneOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。<br/><br/>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。<br/><br/>例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/><br/>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/><br/><br/>设置为<code>\"\"</code> 以禁用该功能<br/><br/><br/>mountpoint 字符串中的变量：<br/>- <code>${clientid}</code>: clientid<br/>- <code>${username}</code>: username",
            "type": "string"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。<br/>配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。<br/>配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名<br/>客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "type": "string"
          },
          "max_conn_rate": {
            "description": "Maximum connection rate.<br/><br/>This is used to limit the connection rate for this listener,<br/>once the limit is reached, new connections will be deferred or refused",
            "example": "1000/s",
            "type": "string"
          },
          "messages_rate": {
            "description": "Messages publish rate.<br/><br/>This is used to limit the inbound message numbers for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "1000/s",
            "type": "string"
          },
          "bytes_rate": {
            "description": "Data publish rate.<br/><br/>This is used to limit the inbound bytes rate for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "100MB/s",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_topic_metrics_api.topic_metrics": {
        "required": [
          "create_time",
          "metrics",
          "topic"
        ],
        "properties": {
          "topic": {
            "description": "主题",
            "example": "testtopic/1",
            "type": "string"
          },
          "create_time": {
            "description": "创建时间。标准 rfc3339 时间格式，例如：2018-01-01T12:00:00Z",
            "example": "2022-01-14T21:48:47+08:00",
            "oneOf": [
              {
                "description": "epoch-second",
                "example": 1640995200,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "reset_time": {
            "description": "重置时间。标准 rfc3339 时间格式，例如：2018-01-01T12:00:00Z。如果从未重置则为空",
            "example": "2022-01-14T21:48:47+08:00",
            "oneOf": [
              {
                "description": "epoch-second",
                "example": 1640995200,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "metrics": {
            "description": "监控数据",
            "$ref": "#/components/schemas/emqx_topic_metrics_api.metrics"
          }
        },
        "type": "object"
      },
      "listeners.quic_required_bind": {
        "required": [
          "bind",
          "id",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "quic"
            ],
            "type": "string"
          },
          "running": {
            "description": "Listener status",
            "type": "boolean"
          },
          "id": {
            "description": "Listener id",
            "type": "string"
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          },
          "ciphers": {
            "default": [
              "TLS_AES_256_GCM_SHA384",
              "TLS_AES_128_GCM_SHA256",
              "TLS_CHACHA20_POLY1305_SHA256"
            ],
            "description": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。<br/><br/><br/>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。<br/>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。<br/><br/>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。<br/>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/><br/>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。<br/>不兼容的密码套件将被自动删除。<br/><br/>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。<br/><br/><br/><br/>注：PSK 的 Ciphers 不支持 tlsv1.3<br/><br/>如果打算使用PSK密码套件，<code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。<br/><br/><br/><br/>PSK 密码套件：<br/><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/><br/><br/>注：QUIC 监听器不支持 tlsv1.3 的 ciphers",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ssl_options": {
            "description": "QUIC 传输层的 TLS 选项",
            "$ref": "#/components/schemas/broker.listener_quic_ssl_opts"
          },
          "enable": {
            "default": true,
            "description": "启停监听器。",
            "type": "boolean"
          },
          "bind": {
            "default": 14567,
            "description": "监听套接字的 IP 地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "acceptors": {
            "default": 16,
            "description": "监听器接收池的大小。",
            "minimum": 1,
            "type": "integer"
          },
          "max_connections": {
            "default": "infinity",
            "description": "监听器允许的最大并发连接数。",
            "oneOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。<br/><br/>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。<br/><br/>例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/><br/>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/><br/><br/>设置为<code>\"\"</code> 以禁用该功能<br/><br/><br/>mountpoint 字符串中的变量：<br/>- <code>${clientid}</code>: clientid<br/>- <code>${username}</code>: username",
            "type": "string"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。<br/>配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。<br/>配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名<br/>客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "type": "string"
          },
          "max_conn_rate": {
            "description": "Maximum connection rate.<br/><br/>This is used to limit the connection rate for this listener,<br/>once the limit is reached, new connections will be deferred or refused",
            "example": "1000/s",
            "type": "string"
          },
          "messages_rate": {
            "description": "Messages publish rate.<br/><br/>This is used to limit the inbound message numbers for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "1000/s",
            "type": "string"
          },
          "bytes_rate": {
            "description": "Data publish rate.<br/><br/>This is used to limit the inbound bytes rate for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "100MB/s",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_mnesia.username_response_data": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_username"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/public.meta"
          }
        },
        "type": "object"
      },
      "emqx_lwm2m_schema.lwm2m_translators": {
        "required": [
          "command",
          "notify",
          "register",
          "response",
          "update"
        ],
        "properties": {
          "command": {
            "description": "下行命令主题。<br/>对于每个成功上线的新 LwM2M 客户端，网关会创建一个订阅关系来接收下行消息并将其发送给客户端。",
            "$ref": "#/components/schemas/emqx_lwm2m_schema.translator"
          },
          "response": {
            "description": "用于网关发布来自 LwM2M 客户端的确认事件的主题。",
            "$ref": "#/components/schemas/emqx_lwm2m_schema.translator"
          },
          "notify": {
            "description": "用于发布来自 LwM2M 客户端的通知事件的主题。<br/>在成功 Observe 到 LwM2M 客户端的资源后，如果客户端报告任何资源状态的变化，网关将通过该主题发送通知事件。",
            "$ref": "#/components/schemas/emqx_lwm2m_schema.translator"
          },
          "register": {
            "description": "用于发布来自 LwM2M 客户端的注册事件的主题。",
            "$ref": "#/components/schemas/emqx_lwm2m_schema.translator"
          },
          "update": {
            "description": "用于发布来自LwM2M客户端的更新事件的主题。",
            "$ref": "#/components/schemas/emqx_lwm2m_schema.translator"
          }
        },
        "type": "object"
      },
      "authn.http_post": {
        "required": [
          "backend",
          "mechanism",
          "method",
          "url"
        ],
        "properties": {
          "method": {
            "description": "HTTP 请求方法。",
            "enum": [
              "post"
            ],
            "type": "string"
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=30, max=1000"
            },
            "description": "HTTP Headers 列表",
            "example": {},
            "type": "object"
          },
          "mechanism": {
            "description": "认证机制。",
            "enum": [
              "password_based"
            ],
            "type": "string"
          },
          "backend": {
            "description": "后端类型。",
            "enum": [
              "http"
            ],
            "type": "string"
          },
          "url": {
            "description": "认证 HTTP 服务器地址。",
            "type": "string"
          },
          "body": {
            "description": "HTTP request body，JSON 字符模板，支持使用占位符。<br/>使用 GET 请求时，将被转换为 URL Query。<br/>使用 POST 请求时，转换格式将取决于 content-type 头被设置为 application/json 还是 application/x-www-form-urlencoded。<br/>",
            "example": {},
            "type": "object"
          },
          "request_timeout": {
            "default": "5s",
            "description": "HTTP 请求超时时长。",
            "example": "32s",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
            "type": "boolean"
          },
          "connect_timeout": {
            "default": "15s",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s",
            "type": "string"
          },
          "enable_pipelining": {
            "default": 100,
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1,
            "type": "integer"
          },
          "max_retries": {
            "deprecated": true,
            "minimum": 0,
            "type": "integer"
          },
          "pool_size": {
            "default": 8,
            "description": "The pool size.",
            "minimum": 1,
            "type": "integer"
          },
          "request": {
            "description": "Configure HTTP request parameters.",
            "$ref": "#/components/schemas/connector-http.request"
          },
          "retry_interval": {
            "deprecated": true,
            "example": "12m",
            "type": "string"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_mqtt.post": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Bridge 的类型",
            "enum": [
              "mqtt"
            ],
            "type": "string"
          },
          "name": {
            "description": "Bridge 名字，Bridge 的可读描述",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "启用/禁用 Bridge",
            "type": "boolean"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mqtt.creation_opts"
          },
          "mode": {
            "default": "cluster_shareload",
            "deprecated": true,
            "description": "The mode of the MQTT Bridge.<br/><br/>- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/><br/>In 'cluster_shareload' mode, the incoming load from the remote broker is shared by<br/>using shared subscription.<br/><br/>Note that the 'clientid' is suffixed by the node name, this is to avoid<br/>clientid conflicts between different nodes. And we can only use shared subscription<br/>topic filters for <code>remote.topic</code> of ingress connections.",
            "enum": [
              "cluster_shareload"
            ],
            "type": "string"
          },
          "server": {
            "description": "The host and port of the remote MQTT broker",
            "type": "string"
          },
          "clientid_prefix": {
            "description": "Optional prefix to prepend to the clientid used by egress bridges.",
            "type": "string"
          },
          "reconnect_interval": {
            "deprecated": true,
            "type": "string"
          },
          "proto_ver": {
            "default": "v4",
            "description": "The MQTT protocol version",
            "enum": [
              "v3",
              "v4",
              "v5"
            ],
            "type": "string"
          },
          "bridge_mode": {
            "default": false,
            "description": "If enable bridge mode.<br/>NOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT<br/>broker MUST support this feature.<br/>If bridge_mode is set to true, the bridge will indicate to the remote broker that it is a bridge not an ordinary client.<br/>This means that loop detection will be more effective and that retained messages will be propagated correctly.",
            "type": "boolean"
          },
          "username": {
            "description": "The username of the MQTT protocol",
            "type": "string"
          },
          "password": {
            "description": "The password of the MQTT protocol",
            "format": "password",
            "type": "string"
          },
          "clean_start": {
            "default": true,
            "description": "Whether to start a clean session when reconnecting a remote broker for ingress bridge",
            "type": "boolean"
          },
          "keepalive": {
            "default": "300s",
            "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`",
            "type": "string"
          },
          "retry_interval": {
            "default": "15s",
            "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`",
            "type": "string"
          },
          "max_inflight": {
            "default": 32,
            "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
            "minimum": 0,
            "type": "integer"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          },
          "ingress": {
            "description": "The ingress config defines how this bridge receive messages from the remote MQTT broker, and then<br/>        send them to the local broker.<br/><br/>        Template with variables is allowed in 'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>        NOTE: if this bridge is used as the input of a rule, and also 'local.topic' is<br/>        configured, then messages got from the remote broker will be sent to both the 'local.topic' and<br/>        the rule.",
            "$ref": "#/components/schemas/connector-mqtt.ingress"
          },
          "egress": {
            "description": "The egress config defines how this bridge forwards messages from the local broker to the remote broker.<br/><br/>Template with variables is allowed in 'remote.topic', 'local.qos', 'local.retain', 'local.payload'.<br/><br/>NOTE: if this bridge is used as the action of a rule, and also 'local.topic'<br/>is configured, then both the data got from the rule and the MQTT messages that matches<br/>'local.topic' will be forwarded.",
            "$ref": "#/components/schemas/connector-mqtt.egress"
          }
        },
        "type": "object"
      },
      "plugins.plugin": {
        "required": [
          "description",
          "name",
          "rel_apps",
          "rel_vsn",
          "running_status"
        ],
        "properties": {
          "name": {
            "description": "Name-Vsn: without .tar.gz",
            "example": "emqx_plugin_template-5.0-rc.1",
            "type": "string"
          },
          "author": {
            "example": [
              "EMQX Team"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "builder": {
            "$ref": "#/components/schemas/plugins.builder"
          },
          "built_on_otp_release": {
            "example": "24",
            "type": "string"
          },
          "compatibility": {
            "example": {
              "emqx": "~>5.0"
            },
            "type": "object"
          },
          "git_commit_or_build_date": {
            "description": "Last git commit date by `git log -1 --pretty=format:'%cd' --date=format:'%Y-%m-%d`.<br/> If the last commit date is not available, the build date will be presented.",
            "example": "2021-12-25",
            "type": "string"
          },
          "functionality": {
            "example": [
              "Demo"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "git_ref": {
            "example": "ddab50fafeed6b1faea70fc9ffd8c700d7e26ec1",
            "type": "string"
          },
          "metadata_vsn": {
            "example": "0.1.0",
            "type": "string"
          },
          "rel_vsn": {
            "description": "Plugins release version",
            "example": "5.0-rc.1",
            "type": "string"
          },
          "rel_apps": {
            "description": "Aplications in plugin.",
            "example": [
              "emqx_plugin_template-5.0.0",
              "map_sets-1.1.0"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "repo": {
            "example": "https://github.com/emqx/emqx-plugin-template",
            "type": "string"
          },
          "description": {
            "description": "Plugin description.",
            "example": "This is an demo plugin description",
            "type": "string"
          },
          "running_status": {
            "items": {
              "$ref": "#/components/schemas/plugins.running_status"
            },
            "type": "array"
          },
          "readme": {
            "description": "only return when `GET /plugins/{name}`.",
            "example": "This is an demo plugin.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_mnesia.rules_for_clientid": {
        "required": [
          "clientid"
        ],
        "properties": {
          "rules": {
            "items": {
              "$ref": "#/components/schemas/emqx_authz_api_mnesia.rule_item"
            },
            "type": "array"
          },
          "clientid": {
            "description": "客户端标识符",
            "example": "client1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.ctx_pub": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "description": "事件类型",
            "enum": [
              "message_publish"
            ],
            "type": "string"
          },
          "id": {
            "description": "消息 ID",
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "username": {
            "description": "用户名",
            "type": "string"
          },
          "payload": {
            "description": "消息负载",
            "type": "string"
          },
          "peerhost": {
            "description": "对等客户端的 IP 地址",
            "type": "string"
          },
          "topic": {
            "description": "消息主题",
            "type": "string"
          },
          "publish_received_at": {
            "description": "消息被接受的时间",
            "type": "integer"
          },
          "qos": {
            "description": "消息的 QoS",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_clients.coap_client": {
        "properties": {
          "node": {
            "description": "客户端连接到的节点名称",
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "username": {
            "description": "客户端连接的用户名",
            "type": "string"
          },
          "mountpoint": {
            "description": "主题固定前缀",
            "type": "string"
          },
          "proto_name": {
            "description": "客户端使用的协议名称",
            "type": "string"
          },
          "proto_ver": {
            "description": "客户端使用的协议版本",
            "type": "string"
          },
          "ip_address": {
            "description": "客户端 IP 地址",
            "type": "string"
          },
          "port": {
            "description": "客户端端口",
            "type": "integer"
          },
          "is_bridge": {
            "description": "标识客户端是否通过 is_bridge 标志连接",
            "type": "boolean"
          },
          "connected_at": {
            "description": "客户端连接时间",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "disconnected_at": {
            "description": "客户端连接断开时间",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "connected": {
            "description": "标识客户端是否已连接到网关",
            "type": "boolean"
          },
          "keepalive": {
            "description": "Keepalive 时间，单位：秒",
            "type": "integer"
          },
          "clean_start": {
            "description": "标识客户端是否以 clean_start 的标志连接到网关",
            "type": "boolean"
          },
          "expiry_interval": {
            "description": "会话超期时间，单位：秒",
            "type": "integer"
          },
          "created_at": {
            "description": "会话创建时间",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "subscriptions_cnt": {
            "description": "客户端已订阅主题数",
            "type": "integer"
          },
          "subscriptions_max": {
            "description": "客户端允许订阅的最大主题数",
            "type": "integer"
          },
          "inflight_cnt": {
            "description": "客户端当前飞行窗口大小",
            "type": "integer"
          },
          "inflight_max": {
            "description": "客户端允许的飞行窗口最大值",
            "type": "integer"
          },
          "mqueue_len": {
            "description": "客户端当前消息队列长度",
            "type": "integer"
          },
          "mqueue_max": {
            "description": "客户端允许的最大消息队列长度",
            "type": "integer"
          },
          "mqueue_dropped": {
            "description": "由于消息队列过程，客户端消息队列丢弃消息条数",
            "type": "integer"
          },
          "awaiting_rel_cnt": {
            "description": "客户端当前等待 PUBREL 确认的 PUBREC 消息的条数",
            "type": "integer"
          },
          "awaiting_rel_max": {
            "description": "客户端允许的最大 PUBREC 等待队列长度",
            "type": "integer"
          },
          "recv_oct": {
            "description": "已接收的字节数",
            "type": "integer"
          },
          "recv_cnt": {
            "description": "已接收 Socket 报文次数",
            "type": "integer"
          },
          "recv_pkt": {
            "description": "已接收应用层协议控制报文数",
            "type": "integer"
          },
          "recv_msg": {
            "description": "已接收上行的消息条数",
            "type": "integer"
          },
          "send_oct": {
            "description": "已发送字节数",
            "type": "integer"
          },
          "send_cnt": {
            "description": "已发送 Socket 报文次数",
            "type": "integer"
          },
          "send_pkt": {
            "description": "已发送应用层协议控制报文数",
            "type": "integer"
          },
          "send_msg": {
            "description": "已发送下行消息数条数",
            "type": "integer"
          },
          "mailbox_len": {
            "description": "进程邮箱大小",
            "type": "integer"
          },
          "heap_size": {
            "description": "进程堆内存大小，单位：字节",
            "type": "integer"
          },
          "reductions": {
            "description": "进程已消耗 Reduction 数",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_clients.authz_cache": {
        "properties": {
          "access": {
            "description": "Access type",
            "example": "publish",
            "type": "string"
          },
          "result": {
            "description": "Allow or deny",
            "enum": [
              "allow",
              "denny"
            ],
            "example": "allow",
            "type": "string"
          },
          "topic": {
            "description": "Topic name",
            "example": "testtopic/1",
            "type": "string"
          },
          "updated_time": {
            "description": "Update time",
            "example": 1687850712989,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.rule_test": {
        "required": [
          "sql"
        ],
        "properties": {
          "context": {
            "default": {},
            "description": "测试事件的上下文",
            "oneOf": [
              {
                "$ref": "#/components/schemas/emqx_rule_api_schema.ctx_delivery_dropped"
              },
              {
                "$ref": "#/components/schemas/emqx_rule_api_schema.ctx_bridge_mqtt"
              },
              {
                "$ref": "#/components/schemas/emqx_rule_api_schema.ctx_check_authz_complete"
              },
              {
                "$ref": "#/components/schemas/emqx_rule_api_schema.ctx_connack"
              },
              {
                "$ref": "#/components/schemas/emqx_rule_api_schema.ctx_disconnected"
              },
              {
                "$ref": "#/components/schemas/emqx_rule_api_schema.ctx_connected"
              },
              {
                "$ref": "#/components/schemas/emqx_rule_api_schema.ctx_dropped"
              },
              {
                "$ref": "#/components/schemas/emqx_rule_api_schema.ctx_acked"
              },
              {
                "$ref": "#/components/schemas/emqx_rule_api_schema.ctx_delivered"
              },
              {
                "$ref": "#/components/schemas/emqx_rule_api_schema.ctx_unsub"
              },
              {
                "$ref": "#/components/schemas/emqx_rule_api_schema.ctx_sub"
              },
              {
                "$ref": "#/components/schemas/emqx_rule_api_schema.ctx_pub"
              }
            ]
          },
          "sql": {
            "description": "测试的 SQL",
            "type": "string"
          }
        },
        "type": "object"
      },
      "slow_subs.slow_subs": {
        "properties": {
          "enable": {
            "default": false,
            "description": "开启慢订阅",
            "type": "boolean"
          },
          "threshold": {
            "default": "500ms",
            "description": "慢订阅统计的阈值",
            "example": "32s",
            "type": "string"
          },
          "expire_interval": {
            "default": "300s",
            "description": "慢订阅记录的有效时间",
            "example": "32s",
            "type": "string"
          },
          "top_k_num": {
            "default": 10,
            "description": "慢订阅统计表的记录数量上限",
            "minimum": 1,
            "type": "integer"
          },
          "stats_type": {
            "default": "whole",
            "description": "慢订阅的统计类型",
            "enum": [
              "whole",
              "internal",
              "response"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_rule_api_schema.ctx_dropped": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "description": "事件类型",
            "enum": [
              "message_dropped"
            ],
            "type": "string"
          },
          "id": {
            "description": "消息 ID",
            "type": "string"
          },
          "reason": {
            "description": "消息被丢弃的原因",
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "username": {
            "description": "用户名",
            "type": "string"
          },
          "payload": {
            "description": "消息负载",
            "type": "string"
          },
          "peerhost": {
            "description": "对等客户端的 IP 地址",
            "type": "string"
          },
          "topic": {
            "description": "消息主题",
            "type": "string"
          },
          "publish_received_at": {
            "description": "消息被接受的时间",
            "type": "integer"
          },
          "qos": {
            "description": "消息的 QoS",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "limiter.limiter": {
        "properties": {},
        "type": "object"
      },
      "broker.ws_opts": {
        "properties": {
          "mqtt_path": {
            "default": "/mqtt",
            "description": "WebSocket 的 MQTT 协议路径。因此，EMQX Broker的WebSocket地址为：<br/><code>ws://{ip}:{port}/mqtt</code>",
            "type": "string"
          },
          "mqtt_piggyback": {
            "default": "multiple",
            "description": "WebSocket消息是否允许包含多个 MQTT 数据包。",
            "enum": [
              "single",
              "multiple"
            ],
            "type": "string"
          },
          "compress": {
            "default": false,
            "description": "如果 <code>true</code>，则使用<code>zlib</code> 压缩 WebSocket 消息<br/><br/><code>deflate_opts</code> 下的配置项属于压缩相关参数配置。",
            "type": "boolean"
          },
          "idle_timeout": {
            "default": "7200s",
            "description": "关闭在此间隔内未发送 MQTT CONNECT 消息的客户端的传输层连接。",
            "example": "12m",
            "type": "string"
          },
          "max_frame_size": {
            "default": "infinity",
            "description": "单个 MQTT 数据包的最大长度。",
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "fail_if_no_subprotocol": {
            "default": true,
            "description": "如果<code>true</code>，当客户端未携带<code>Sec WebSocket Protocol</code>字段时，服务器将返回一个错误。<br/><br/>注意：微信小程序需要禁用此验证。",
            "type": "boolean"
          },
          "supported_subprotocols": {
            "default": "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5",
            "description": "逗号分隔的 subprotocols 支持列表。",
            "example": "item1,item2",
            "type": "string"
          },
          "check_origin_enable": {
            "default": false,
            "description": "如果<code>true</code>，<code>origin</code>HTTP 头将根据<code>check_origins</code>参数中配置的允许来源列表进行验证。",
            "type": "boolean"
          },
          "allow_origin_absence": {
            "default": true,
            "description": "If <code>false</code> and <code>check_origin_enable</code> is <code>true</code>, the server will reject requests that don't have <code>origin</code> HTTP header.",
            "type": "boolean"
          },
          "check_origins": {
            "default": "http://localhost:18083, http://127.0.0.1:18083",
            "description": "允许的 origins 列表",
            "example": "item1,item2",
            "type": "string"
          },
          "proxy_address_header": {
            "default": "x-forwarded-for",
            "description": "HTTP 头，用于传递有关客户端 IP 地址的信息。<br/>当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
            "type": "string"
          },
          "proxy_port_header": {
            "default": "x-forwarded-port",
            "description": "HTTP 头，用于传递有关客户端端口的信息。当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
            "type": "string"
          },
          "deflate_opts": {
            "$ref": "#/components/schemas/broker.deflate_opts"
          }
        },
        "type": "object"
      },
      "dashboard.https": {
        "required": [
          "ssl_options"
        ],
        "properties": {
          "bind": {
            "default": 0,
            "description": "监听地址和端口，热更新此配置时，会重启 Dashboard 服务。",
            "example": "0.0.0.0:18084",
            "type": "string"
          },
          "ssl_options": {
            "description": "SSL/TLS options for the dashboard listener.",
            "$ref": "#/components/schemas/dashboard.ssl_options"
          },
          "num_acceptors": {
            "default": 8,
            "description": "TCP协议的Socket acceptor池大小, 默认设置在线的调度器数量（通常为 CPU 核数）",
            "type": "integer"
          },
          "max_connections": {
            "default": 512,
            "description": "同时处理的最大连接数。",
            "type": "integer"
          },
          "backlog": {
            "default": 1024,
            "description": "排队等待连接的队列的最大长度。",
            "type": "integer"
          },
          "send_timeout": {
            "default": "10s",
            "description": "Socket发送超时时间。",
            "example": "12m",
            "type": "string"
          },
          "inet6": {
            "default": false,
            "description": "启用IPv6， 如果机器不支持IPv6，请关闭此选项，否则会导致 Dashboard 无法使用。",
            "type": "boolean"
          },
          "ipv6_v6only": {
            "default": false,
            "description": "当开启 inet6 功能的同时禁用 IPv4-to-IPv6 映射。该配置仅在 inet6 功能开启时有效。",
            "type": "boolean"
          },
          "proxy_header": {
            "default": false,
            "description": "开启对  `HAProxy` 的支持，注意：一旦开启了这个功能，就无法再处理普通的 HTTP 请求了。",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "trace.log_file_detail": {
        "properties": {
          "node": {
            "description": "指定从哪个节点获取 trace 文件内容。",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "size": {
            "description": "文件大小",
            "type": "integer"
          },
          "mtime": {
            "description": "The last time this file is modified.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_authz_api_schema.mongo_single": {
        "required": [
          "collection",
          "database",
          "server",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此访问控制数据源。",
            "type": "boolean"
          },
          "type": {
            "default": "mongodb",
            "description": "数据后端类型。",
            "enum": [
              "mongodb"
            ],
            "type": "string"
          },
          "collection": {
            "description": "`MongoDB` 授权数据集。",
            "type": "string"
          },
          "filter": {
            "default": {},
            "description": "在查询中定义过滤条件的条件表达式。<br/>过滤器支持如下占位符：<br/>- <code>${username}</code>: 将在运行时被替换为客户端连接时使用的用户名<br/>- <code>${clientid}</code>: 将在运行时被替换为客户端连接时使用的客户端标识符",
            "example": {},
            "type": "object"
          },
          "mongo_type": {
            "default": "single",
            "description": "Standalone 模式。当 MongoDB 服务运行在 standalone 模式下，该配置必须设置为 'single'。",
            "enum": [
              "single"
            ],
            "type": "string"
          },
          "server": {
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
            "type": "string"
          },
          "w_mode": {
            "default": "unsafe",
            "description": "写模式。",
            "enum": [
              "unsafe",
              "safe"
            ],
            "type": "string"
          },
          "srv_record": {
            "default": false,
            "description": "使用 DNS SRV 记录。",
            "type": "boolean"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "username": {
            "description": "内部数据库的用户名。",
            "type": "string"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "description": "Whether to use MongoDB's legacy protocol for communicating with the database.  The default is to attempt to automatically determine if the newer protocol is supported.",
            "enum": [
              "auto",
              true,
              false
            ],
            "type": "string"
          },
          "auth_source": {
            "description": "与用户证书关联的数据库名称。",
            "type": "string"
          },
          "database": {
            "description": "数据库名字。",
            "type": "string"
          },
          "topology": {
            "$ref": "#/components/schemas/emqx_mongodb.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "emqx_authn_schema.node_metrics": {
        "properties": {
          "node": {
            "description": "节点名称。",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "metrics": {
            "description": "资源统计指标。",
            "$ref": "#/components/schemas/emqx_authn_schema.metrics"
          }
        },
        "type": "object"
      },
      "connector-mqtt.ingress_local": {
        "properties": {
          "topic": {
            "description": "Send messages to which topic of the local broker.<br/><br/>Template with variables is allowed.",
            "type": "string"
          },
          "qos": {
            "default": "${qos}",
            "description": "The QoS of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "example": 0,
                "maximum": 2,
                "minimum": 0,
                "type": "integer"
              }
            ]
          },
          "retain": {
            "default": "${retain}",
            "description": "The 'retain' flag of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "payload": {
            "description": "The payload of the MQTT message to be sent.<br/><br/>Template with variables is allowed.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.dtls_listener": {
        "properties": {
          "id": {
            "description": "监听器 ID",
            "type": "string"
          },
          "type": {
            "description": "监听器类型",
            "enum": [
              "dtls"
            ],
            "type": "string"
          },
          "name": {
            "description": "监听器名称",
            "type": "string"
          },
          "running": {
            "description": "监听器运行状态",
            "type": "boolean"
          },
          "acceptors": {
            "default": 16,
            "description": "Acceptor 进程池大小。",
            "type": "integer"
          },
          "udp_options": {
            "$ref": "#/components/schemas/gateway.udp_opts"
          },
          "enable": {
            "default": true,
            "description": "是否启用该监听器。",
            "type": "boolean"
          },
          "bind": {
            "description": "监听器绑定的 IP 地址或端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "max_connections": {
            "default": 1024,
            "description": "监听器支持的最大连接数。",
            "oneOf": [
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              },
              {
                "minimum": 1,
                "type": "integer"
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "description": "监听器支持的最大连接速率。",
            "type": "integer"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证。<br/>配置 <code>false</code> 时，将不对客户端做任何认证。",
            "type": "boolean"
          },
          "mountpoint": {
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "access_rules": {
            "default": [],
            "description": "配置监听器的访问控制规则。<br/>见：https://github.com/emqtt/esockd#allowdeny",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dtls_options": {
            "description": "DTLS Socket 配置",
            "$ref": "#/components/schemas/gateway.dtls_opts"
          }
        },
        "type": "object"
      },
      "bridge_webhook.post": {
        "required": [
          "name",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "description": "The Bridge Type",
            "enum": [
              "webhook"
            ],
            "type": "string"
          },
          "name": {
            "description": "Bridge name, used as a human-readable description of the bridge.",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "Enable or disable this bridge",
            "type": "boolean"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_webhook.creation_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s",
            "type": "string"
          },
          "retry_interval": {
            "deprecated": true,
            "example": "12m",
            "type": "string"
          },
          "pool_type": {
            "default": "random",
            "description": "The type of the pool. Can be one of `random`, `hash`.",
            "enum": [
              "random",
              "hash"
            ],
            "type": "string"
          },
          "pool_size": {
            "default": 8,
            "description": "The pool size.",
            "minimum": 1,
            "type": "integer"
          },
          "enable_pipelining": {
            "default": 100,
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1,
            "type": "integer"
          },
          "request": {
            "description": "Configure HTTP request parameters.",
            "$ref": "#/components/schemas/connector-http.request"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          },
          "url": {
            "description": "The URL of the HTTP Bridge.<br/><br/>Template with variables is allowed in the path, but variables cannot be used in the scheme, host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic} </code> is allowed, but<br/><code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code><br/>is not allowed.",
            "type": "string"
          },
          "direction": {
            "deprecated": true,
            "description": "Deprecated, The direction of this bridge, MUST be 'egress'",
            "enum": [
              "egress"
            ],
            "type": "string"
          },
          "local_topic": {
            "description": "The MQTT topic filter to be forwarded to the HTTP server. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
            "type": "string"
          },
          "method": {
            "default": "post",
            "description": "The method of the HTTP request. All the available methods are: post, put, get, delete.<br/><br/>Template with variables is allowed.",
            "enum": [
              "post",
              "put",
              "get",
              "delete"
            ],
            "type": "string"
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "description": "The headers of the HTTP request.<br/><br/>Template with variables is allowed.",
            "example": {},
            "type": "object"
          },
          "body": {
            "description": "The body of the HTTP request.<br/><br/>If not provided, the body will be a JSON object of all the available fields.<br/><br/>There, 'all the available fields' means the context of a MQTT message when<br/>this webhook is triggered by receiving a MQTT message (the `local_topic` is set),<br/>or the context of the event when this webhook is triggered by a rule (i.e. this<br/>webhook is used as an action of a rule).<br/><br/>Template with variables is allowed.",
            "type": "string"
          },
          "max_retries": {
            "default": 2,
            "description": "HTTP request max retry times if failed.",
            "minimum": 0,
            "type": "integer"
          },
          "request_timeout": {
            "default": "15s",
            "deprecated": true,
            "description": "HTTP request timeout.",
            "example": "32s",
            "type": "string"
          }
        },
        "type": "object"
      },
      "dashboard.user": {
        "properties": {
          "username": {
            "description": "Dashboard 用户名",
            "example": "admin",
            "maxLength": 100,
            "type": "string"
          },
          "description": {
            "description": "Dashboard 用户描述",
            "example": "administrator",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_clients.lwm2m_client": {
        "properties": {
          "endpoint_name": {
            "description": "LwM2M 客户端 Endpoint Name",
            "type": "string"
          },
          "lifetime": {
            "description": "LwM2M 客户端心跳周期",
            "type": "integer"
          },
          "node": {
            "description": "客户端连接到的节点名称",
            "type": "string"
          },
          "clientid": {
            "description": "客户端 ID",
            "type": "string"
          },
          "username": {
            "description": "客户端连接的用户名",
            "type": "string"
          },
          "mountpoint": {
            "description": "主题固定前缀",
            "type": "string"
          },
          "proto_name": {
            "description": "客户端使用的协议名称",
            "type": "string"
          },
          "proto_ver": {
            "description": "客户端使用的协议版本",
            "type": "string"
          },
          "ip_address": {
            "description": "客户端 IP 地址",
            "type": "string"
          },
          "port": {
            "description": "客户端端口",
            "type": "integer"
          },
          "is_bridge": {
            "description": "标识客户端是否通过 is_bridge 标志连接",
            "type": "boolean"
          },
          "connected_at": {
            "description": "客户端连接时间",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "disconnected_at": {
            "description": "客户端连接断开时间",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "connected": {
            "description": "标识客户端是否已连接到网关",
            "type": "boolean"
          },
          "keepalive": {
            "description": "Keepalive 时间，单位：秒",
            "type": "integer"
          },
          "clean_start": {
            "description": "标识客户端是否以 clean_start 的标志连接到网关",
            "type": "boolean"
          },
          "expiry_interval": {
            "description": "会话超期时间，单位：秒",
            "type": "integer"
          },
          "created_at": {
            "description": "会话创建时间",
            "oneOf": [
              {
                "description": "epoch-millisecond",
                "example": 1640995200000,
                "type": "integer"
              },
              {
                "example": "2022-01-01T00:00:00.000Z",
                "format": "date-time",
                "type": "string"
              }
            ]
          },
          "subscriptions_cnt": {
            "description": "客户端已订阅主题数",
            "type": "integer"
          },
          "subscriptions_max": {
            "description": "客户端允许订阅的最大主题数",
            "type": "integer"
          },
          "inflight_cnt": {
            "description": "客户端当前飞行窗口大小",
            "type": "integer"
          },
          "inflight_max": {
            "description": "客户端允许的飞行窗口最大值",
            "type": "integer"
          },
          "mqueue_len": {
            "description": "客户端当前消息队列长度",
            "type": "integer"
          },
          "mqueue_max": {
            "description": "客户端允许的最大消息队列长度",
            "type": "integer"
          },
          "mqueue_dropped": {
            "description": "由于消息队列过程，客户端消息队列丢弃消息条数",
            "type": "integer"
          },
          "awaiting_rel_cnt": {
            "description": "客户端当前等待 PUBREL 确认的 PUBREC 消息的条数",
            "type": "integer"
          },
          "awaiting_rel_max": {
            "description": "客户端允许的最大 PUBREC 等待队列长度",
            "type": "integer"
          },
          "recv_oct": {
            "description": "已接收的字节数",
            "type": "integer"
          },
          "recv_cnt": {
            "description": "已接收 Socket 报文次数",
            "type": "integer"
          },
          "recv_pkt": {
            "description": "已接收应用层协议控制报文数",
            "type": "integer"
          },
          "recv_msg": {
            "description": "已接收上行的消息条数",
            "type": "integer"
          },
          "send_oct": {
            "description": "已发送字节数",
            "type": "integer"
          },
          "send_cnt": {
            "description": "已发送 Socket 报文次数",
            "type": "integer"
          },
          "send_pkt": {
            "description": "已发送应用层协议控制报文数",
            "type": "integer"
          },
          "send_msg": {
            "description": "已发送下行消息数条数",
            "type": "integer"
          },
          "mailbox_len": {
            "description": "进程邮箱大小",
            "type": "integer"
          },
          "heap_size": {
            "description": "进程堆内存大小，单位：字节",
            "type": "integer"
          },
          "reductions": {
            "description": "进程已消耗 Reduction 数",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "bridge_webhook.put": {
        "required": [
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "description": "Enable or disable this bridge",
            "type": "boolean"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_webhook.creation_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s",
            "type": "string"
          },
          "retry_interval": {
            "deprecated": true,
            "example": "12m",
            "type": "string"
          },
          "pool_type": {
            "default": "random",
            "description": "The type of the pool. Can be one of `random`, `hash`.",
            "enum": [
              "random",
              "hash"
            ],
            "type": "string"
          },
          "pool_size": {
            "default": 8,
            "description": "The pool size.",
            "minimum": 1,
            "type": "integer"
          },
          "enable_pipelining": {
            "default": 100,
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1,
            "type": "integer"
          },
          "request": {
            "description": "Configure HTTP request parameters.",
            "$ref": "#/components/schemas/connector-http.request"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          },
          "url": {
            "description": "The URL of the HTTP Bridge.<br/><br/>Template with variables is allowed in the path, but variables cannot be used in the scheme, host,<br/>or port part.<br/><br/>For example, <code> http://localhost:9901/${topic} </code> is allowed, but<br/><code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code><br/>is not allowed.",
            "type": "string"
          },
          "direction": {
            "deprecated": true,
            "description": "Deprecated, The direction of this bridge, MUST be 'egress'",
            "enum": [
              "egress"
            ],
            "type": "string"
          },
          "local_topic": {
            "description": "The MQTT topic filter to be forwarded to the HTTP server. All MQTT 'PUBLISH' messages with the topic<br/>matching the local_topic will be forwarded.<br/><br/>NOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is<br/>configured, then both the data got from the rule and the MQTT messages that match local_topic<br/>will be forwarded.",
            "type": "string"
          },
          "method": {
            "default": "post",
            "description": "The method of the HTTP request. All the available methods are: post, put, get, delete.<br/><br/>Template with variables is allowed.",
            "enum": [
              "post",
              "put",
              "get",
              "delete"
            ],
            "type": "string"
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "description": "The headers of the HTTP request.<br/><br/>Template with variables is allowed.",
            "example": {},
            "type": "object"
          },
          "body": {
            "description": "The body of the HTTP request.<br/><br/>If not provided, the body will be a JSON object of all the available fields.<br/><br/>There, 'all the available fields' means the context of a MQTT message when<br/>this webhook is triggered by receiving a MQTT message (the `local_topic` is set),<br/>or the context of the event when this webhook is triggered by a rule (i.e. this<br/>webhook is used as an action of a rule).<br/><br/>Template with variables is allowed.",
            "type": "string"
          },
          "max_retries": {
            "default": 2,
            "description": "HTTP request max retry times if failed.",
            "minimum": 0,
            "type": "integer"
          },
          "request_timeout": {
            "default": "15s",
            "deprecated": true,
            "description": "HTTP request timeout.",
            "example": "32s",
            "type": "string"
          }
        },
        "type": "object"
      },
      "auto_subscribe.topic": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "description": "订阅标识符，支持使用占位符，例如 client/${clientid}/username/${username}/host/${host}/port/${port}<br/>必填，且不可为空字符串",
            "example": "/clientid/${clientid}/username/${username}/host/${host}/port/${port}",
            "type": "string"
          },
          "qos": {
            "default": 0,
            "description": "缺省值为 0，服务质量，<br/>QoS 0：消息最多传递一次，如果当时客户端不可用，则会丢失该消息。<br/>QoS 1：消息传递至少 1 次。<br/>QoS 2：消息仅传送一次。",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          },
          "rh": {
            "default": 0,
            "description": "指定订阅建立时服务端是否向客户端发送保留消息，<br/>可选值 0：只要客户端订阅成功，服务端就发送保留消息。<br/>可选值 1：客户端订阅成功且该订阅此前不存在，服务端才发送保留消息。毕竟有些时候客户端重新发起订阅可能只是为了改变一下 QoS，并不意味着它想再次接收保留消息。<br/>可选值 2：即便客户订阅成功，服务端也不会发送保留消息。",
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          },
          "rap": {
            "default": 0,
            "description": "缺省值为 0，这一选项用来指定服务端向客户端转发消息时是否要保留其中的 RETAIN 标识，注意这一选项不会影响保留消息中的 RETAIN 标识。因此当 Retain As Publish 选项被设置为 0 时，客户端直接依靠消息中的 RETAIN 标识来区分这是一个正常的转发消息还是一个保留消息，而不是去判断消息是否是自己订阅后收到的第一个消息（转发消息甚至可能会先于保留消息被发送，视不同 Broker 的具体实现而定）。",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "nl": {
            "default": 0,
            "description": "缺省值为0，<br/>MQTT v3.1.1：如果设备订阅了自己发布消息的主题，那么将收到自己发布的所有消息。<br/>MQTT v5：如果设备在订阅时将此选项设置为 1，那么服务端将不会向设备转发自己发布的消息",
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "authn.redis_cluster": {
        "required": [
          "backend",
          "cmd",
          "mechanism",
          "servers"
        ],
        "properties": {
          "mechanism": {
            "description": "认证机制。",
            "enum": [
              "password_based"
            ],
            "type": "string"
          },
          "backend": {
            "description": "后端类型。",
            "enum": [
              "redis"
            ],
            "type": "string"
          },
          "cmd": {
            "description": "用于查询密码散列等用于认证的数据的 Redis Command，目前仅支持 <code>HGET</code> 与 <code>HMGET</code>。",
            "type": "string"
          },
          "password_hash_algorithm": {
            "default": {
              "name": "sha256",
              "salt_position": "prefix"
            },
            "description": "Options for password hash verification.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/authn-hash.simple"
              },
              {
                "$ref": "#/components/schemas/authn-hash.pbkdf2"
              },
              {
                "$ref": "#/components/schemas/authn-hash.bcrypt"
              }
            ]
          },
          "enable": {
            "default": true,
            "description": "设为 <code>true</code> 或 <code>false</code> 以启用或禁用此认证数据源。",
            "type": "boolean"
          },
          "servers": {
            "description": "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`<br/>每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机名具有以下形式：`Host[:Port]`。<br/>如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
            "type": "string"
          },
          "redis_type": {
            "default": "cluster",
            "description": "集群模式。当 Redis 服务运行在集群模式下，该配置必须设置为 'cluster'。",
            "enum": [
              "cluster"
            ],
            "type": "string"
          },
          "pool_size": {
            "default": 8,
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1,
            "type": "integer"
          },
          "password": {
            "description": "内部数据库密码。",
            "format": "password",
            "type": "string"
          },
          "auto_reconnect": {
            "default": true,
            "deprecated": true,
            "description": "已弃用。自动重连数据库。",
            "type": "boolean"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/broker.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "broker.listener_ssl_opts": {
        "properties": {
          "cacertfile": {
            "default": "${EMQX_ETC_DIR}/certs/cacert.pem",
            "description": "受信任的PEM格式 CA  证书捆绑文件<br/><br/>此文件中的证书用于验证TLS对等方的证书。<br/>如果要信任新 CA，请将新证书附加到文件中。<br/>无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/><br/>注意：从文件中失效（删除）证书不会影响已建立的连接。",
            "type": "string"
          },
          "cacerts": {
            "default": false,
            "deprecated": true,
            "type": "boolean"
          },
          "certfile": {
            "default": "${EMQX_ETC_DIR}/certs/cert.pem",
            "description": "PEM格式证书链文件<br/><br/>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，<br/>然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。<br/>根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
            "type": "string"
          },
          "keyfile": {
            "default": "${EMQX_ETC_DIR}/certs/key.pem",
            "description": "PEM格式的私钥文件。",
            "type": "string"
          },
          "verify": {
            "default": "verify_none",
            "description": "启用或禁用对等验证。",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "type": "string"
          },
          "reuse_sessions": {
            "default": true,
            "description": "启用 TLS 会话重用。",
            "type": "boolean"
          },
          "depth": {
            "default": 10,
            "description": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。<br/>因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/><br/>如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/><br/>如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
            "minimum": 0,
            "type": "integer"
          },
          "password": {
            "description": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
            "example": "",
            "format": "password",
            "type": "string"
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "description": "支持所有TLS/DTLS版本<br/><br/>注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ciphers": {
            "default": [],
            "description": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。<br/><br/><br/>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。<br/>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。<br/><br/>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。<br/>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/><br/>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。<br/>不兼容的密码套件将被自动删除。<br/><br/>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。<br/><br/><br/><br/>注：PSK 的 Ciphers 不支持 tlsv1.3<br/><br/>如果打算使用PSK密码套件 <code>tlsv1.3</code>。应在<code>ssl.versions</code>中禁用。<br/><br/><br/><br/>PSK 密码套件：<br/><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "secure_renegotiate": {
            "default": true,
            "description": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。<br/>RFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
            "type": "boolean"
          },
          "log_level": {
            "default": "notice",
            "description": "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "type": "string"
          },
          "hibernate_after": {
            "default": "5s",
            "description": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
            "example": "12m",
            "type": "string"
          },
          "dhfile": {
            "description": "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/><br/>注意：TLS 1.3不支持<code>dhfile</code>选项。",
            "type": "string"
          },
          "fail_if_no_peer_cert": {
            "default": false,
            "description": "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。<br/>如果设置为true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。<br/>如果设置为false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
            "type": "boolean"
          },
          "honor_cipher_order": {
            "default": true,
            "description": "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
            "type": "boolean"
          },
          "client_renegotiation": {
            "default": true,
            "description": "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。<br/>这可能会成为拒绝服务攻击的载体。<br/>SSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。<br/>默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
            "type": "boolean"
          },
          "handshake_timeout": {
            "default": "15s",
            "description": "握手完成所允许的最长时间",
            "example": "12m",
            "type": "string"
          },
          "gc_after_handshake": {
            "default": false,
            "description": "内存使用调优。如果启用，将在TLS/SSL握手完成后立即执行垃圾回收。TLS/SSL握手建立后立即进行GC。",
            "type": "boolean"
          },
          "ocsp": {
            "$ref": "#/components/schemas/broker.ocsp"
          },
          "enable_crl_check": {
            "default": false,
            "description": "是否为该监听器启用 CRL 检查。",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "opentelemetry.opentelemetry": {
        "required": [
          "enable"
        ],
        "properties": {
          "exporter": {
            "description": "Open Telemetry Exporter",
            "$ref": "#/components/schemas/opentelemetry.exporter"
          },
          "enable": {
            "default": false,
            "description": "Enable or disable open telemetry metrics",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.exproto": {
        "required": [
          "handler",
          "server"
        ],
        "properties": {
          "name": {
            "description": "网关名称",
            "enum": [
              "exproto"
            ],
            "type": "string"
          },
          "server": {
            "description": "配置 ExProto 网关需要启动的 <code>ConnectionAdapter</code> 服务。<br/>该服务用于提供客户端的认证、发布、订阅和数据下行等功能。",
            "$ref": "#/components/schemas/emqx_exproto_schema.exproto_grpc_server"
          },
          "handler": {
            "description": "配置 ExProto 网关需要请求的 <code>ConnectionHandler</code> 服务地址。<br/>该服务用于给 ExProto 提供客户端的 Socket 事件处理、字节解码、订阅消息接收等功能。",
            "$ref": "#/components/schemas/emqx_exproto_schema.exproto_grpc_handler"
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "是否启用该网关",
            "type": "boolean"
          },
          "enable_stats": {
            "default": true,
            "description": "是否开启客户端统计",
            "type": "boolean"
          },
          "idle_timeout": {
            "default": "30s",
            "description": "客户端连接过程的空闲时间。该配置用于：<br/>  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。<br/>  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
            "example": "12m",
            "type": "string"
          },
          "clientinfo_override": {
            "description": "ClientInfo 重写。",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          },
          "listeners": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                }
              ]
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "rule_engine.user_provided_function": {
        "required": [
          "function"
        ],
        "properties": {
          "function": {
            "description": "用户提供的函数。 格式应为：'{module}:{function}'。<br/>其中 {module} 是 Erlang 回调模块， {function} 是 Erlang 函数。<br/>要编写自己的函数，请检查源文件：<code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code> 中的示例函数 <code>console</code> 和<code>republish</code> 。",
            "example": "module:function",
            "type": "string"
          },
          "args": {
            "default": {},
            "description": "用户提供的参数将作为函数 module:function/3 的第三个参数，<br/>请检查源文件：<code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code> 中的示例函数 <code>console</code> 和<code>republish</code> 。",
            "example": {},
            "type": "object"
          }
        },
        "type": "object"
      },
      "emqx_authn_schema.node_resource_metrics": {
        "properties": {
          "node": {
            "description": "节点名称。",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "metrics": {
            "description": "资源统计指标。",
            "$ref": "#/components/schemas/emqx_authn_schema.resource_metrics"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.udp_listener": {
        "properties": {
          "id": {
            "description": "监听器 ID",
            "type": "string"
          },
          "type": {
            "description": "监听器类型",
            "enum": [
              "udp"
            ],
            "type": "string"
          },
          "name": {
            "description": "监听器名称",
            "type": "string"
          },
          "running": {
            "description": "监听器运行状态",
            "type": "boolean"
          },
          "udp_options": {
            "$ref": "#/components/schemas/gateway.udp_opts"
          },
          "enable": {
            "default": true,
            "description": "是否启用该监听器。",
            "type": "boolean"
          },
          "bind": {
            "description": "监听器绑定的 IP 地址或端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "max_connections": {
            "default": 1024,
            "description": "监听器支持的最大连接数。",
            "oneOf": [
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              },
              {
                "minimum": 1,
                "type": "integer"
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "description": "监听器支持的最大连接速率。",
            "type": "integer"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证。<br/>配置 <code>false</code> 时，将不对客户端做任何认证。",
            "type": "boolean"
          },
          "mountpoint": {
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "access_rules": {
            "default": [],
            "description": "配置监听器的访问控制规则。<br/>见：https://github.com/emqtt/esockd#allowdeny",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "listeners.wss_required_bind-with_name": {
        "required": [
          "bind",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "description": "Listener type",
            "enum": [
              "wss"
            ],
            "type": "string"
          },
          "running": {
            "description": "Listener status",
            "type": "boolean"
          },
          "name": {
            "description": "Listener name",
            "type": "string"
          },
          "current_connections": {
            "description": "Current connections",
            "minimum": 0,
            "type": "integer"
          },
          "enable": {
            "default": true,
            "description": "启停监听器。",
            "type": "boolean"
          },
          "bind": {
            "default": 8084,
            "description": "监听套接字的 IP 地址和端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "acceptors": {
            "default": 16,
            "description": "监听器接收池的大小。",
            "minimum": 1,
            "type": "integer"
          },
          "max_connections": {
            "default": "infinity",
            "description": "监听器允许的最大并发连接数。",
            "oneOf": [
              {
                "minimum": 1,
                "type": "integer"
              },
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              }
            ]
          },
          "mountpoint": {
            "default": "",
            "description": "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。<br/><br/>将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。<br/><br/>例如，如果客户机 A 使用 <code>listeners.tcp.\\<name>.mountpoint</code> 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/><br/>类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/><br/><br/>设置为<code>\"\"</code> 以禁用该功能<br/><br/><br/>mountpoint 字符串中的变量：<br/>- <code>${clientid}</code>: clientid<br/>- <code>${username}</code>: username",
            "type": "string"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。<br/>配置 <code>false</code> 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。<br/>配置 <code>quick_deny_anonymous</code> 时，行为跟 <code>true</code> 类似，但是会对匿名<br/>客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
            "enum": [
              true,
              false,
              "quick_deny_anonymous"
            ],
            "type": "string"
          },
          "max_conn_rate": {
            "description": "Maximum connection rate.<br/><br/>This is used to limit the connection rate for this listener,<br/>once the limit is reached, new connections will be deferred or refused",
            "example": "1000/s",
            "type": "string"
          },
          "messages_rate": {
            "description": "Messages publish rate.<br/><br/>This is used to limit the inbound message numbers for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "1000/s",
            "type": "string"
          },
          "bytes_rate": {
            "description": "Data publish rate.<br/><br/>This is used to limit the inbound bytes rate for each client connected to this listener,<br/>once the limit is reached, the restricted client will slow down and even be hung for a while.",
            "example": "100MB/s",
            "type": "string"
          },
          "access_rules": {
            "default": [
              "allow all"
            ],
            "description": "此监听器的访问控制规则。",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "proxy_protocol": {
            "default": false,
            "description": "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/><br/>详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "3s",
            "description": "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
            "example": "12m",
            "type": "string"
          },
          "tcp_options": {
            "$ref": "#/components/schemas/broker.tcp_opts"
          },
          "ssl_options": {
            "$ref": "#/components/schemas/broker.listener_wss_opts"
          },
          "websocket": {
            "$ref": "#/components/schemas/broker.ws_opts"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api_listeners.tcp_listener": {
        "properties": {
          "id": {
            "description": "监听器 ID",
            "type": "string"
          },
          "type": {
            "description": "监听器类型",
            "enum": [
              "tcp"
            ],
            "type": "string"
          },
          "name": {
            "description": "监听器名称",
            "type": "string"
          },
          "running": {
            "description": "监听器运行状态",
            "type": "boolean"
          },
          "acceptors": {
            "default": 16,
            "description": "Acceptor 进程池大小。",
            "type": "integer"
          },
          "tcp_options": {
            "description": "TCP Socket 配置。",
            "$ref": "#/components/schemas/broker.tcp_opts"
          },
          "proxy_protocol": {
            "default": false,
            "description": "是否开启 Proxy Protocol V1/2。当 EMQX 集群部署在 HAProxy 或 Nginx 后需要获取客户端真实 IP 时常用到该选项。参考：https://www.haproxy.com/blog/haproxy/proxy-protocol/",
            "type": "boolean"
          },
          "proxy_protocol_timeout": {
            "default": "15s",
            "description": "接收 Proxy Protocol 报文头的超时时间。如果在超时内没有收到 Proxy Protocol 包，EMQX 将关闭 TCP 连接。",
            "example": "12m",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "是否启用该监听器。",
            "type": "boolean"
          },
          "bind": {
            "description": "监听器绑定的 IP 地址或端口。",
            "example": "127.0.0.1:80",
            "type": "string"
          },
          "max_connections": {
            "default": 1024,
            "description": "监听器支持的最大连接数。",
            "oneOf": [
              {
                "enum": [
                  "infinity"
                ],
                "type": "string"
              },
              {
                "minimum": 1,
                "type": "integer"
              }
            ]
          },
          "max_conn_rate": {
            "default": 1000,
            "description": "监听器支持的最大连接速率。",
            "type": "integer"
          },
          "enable_authn": {
            "default": true,
            "description": "配置 <code>true</code> （默认值）启用客户端进行身份认证。<br/>配置 <code>false</code> 时，将不对客户端做任何认证。",
            "type": "boolean"
          },
          "mountpoint": {
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "access_rules": {
            "default": [],
            "description": "配置监听器的访问控制规则。<br/>见：https://github.com/emqtt/esockd#allowdeny",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "description": "监听器状态",
            "$ref": "#/components/schemas/listeners.status"
          },
          "node_status": {
            "description": "监听器在集群中每个节点上的状态",
            "items": {
              "$ref": "#/components/schemas/listeners.node_status"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "emqx_delayed_api.message": {
        "properties": {
          "msgid": {
            "description": "延迟消息 ID",
            "type": "integer"
          },
          "node": {
            "description": "消息的来源节点",
            "type": "string"
          },
          "publish_at": {
            "description": "客户端发送时间, RFC 3339 格式",
            "type": "string"
          },
          "delayed_interval": {
            "description": "延迟时间(秒)",
            "minimum": 1,
            "type": "integer"
          },
          "delayed_remaining": {
            "description": "剩余时间(秒)",
            "minimum": 0,
            "type": "integer"
          },
          "expected_at": {
            "description": "期望的发送时间, RFC 3339 格式",
            "type": "string"
          },
          "topic": {
            "description": "主题",
            "example": "/sys/#",
            "type": "string"
          },
          "qos": {
            "description": "QoS",
            "example": 0,
            "maximum": 2,
            "minimum": 0,
            "type": "integer"
          },
          "from_clientid": {
            "description": "消息的 ClientID",
            "type": "string"
          },
          "from_username": {
            "description": "消息的 Username",
            "type": "string"
          },
          "payload": {
            "description": "消息内容, base64 格式。如果消息的大小超过 2048 字节，则消息内容会被设置为 'PAYLOAD_TO_LARGE'",
            "type": "string"
          }
        },
        "type": "object"
      },
      "authn-hash.pbkdf2": {
        "required": [
          "iterations",
          "mac_fun",
          "name"
        ],
        "properties": {
          "name": {
            "description": "PBKDF2 password hashing.",
            "enum": [
              "pbkdf2"
            ],
            "type": "string"
          },
          "mac_fun": {
            "description": "Specifies mac_fun for PBKDF2 hashing algorithm.",
            "enum": [
              "md4",
              "md5",
              "ripemd160",
              "sha",
              "sha224",
              "sha256",
              "sha384",
              "sha512"
            ],
            "type": "string"
          },
          "iterations": {
            "description": "Iteration count for PBKDF2 hashing algorithm.",
            "type": "integer"
          },
          "dk_length": {
            "description": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_mgmt_api_publish.message_properties": {
        "properties": {
          "payload_format_indicator": {
            "description": "载荷格式指示标识符，0 表示载荷是未指定格式的数据，相当于没有发送载荷格式指示；1 表示载荷是 UTF-8 编码的字符数据，载荷中的 UTF-8 数据必须是按照 Unicode 的规范和 RFC 3629 的标准要求进行编码的。",
            "example": 0,
            "maximum": 1,
            "minimum": 0,
            "type": "integer"
          },
          "message_expiry_interval": {
            "description": "消息过期间隔标识符，以秒为单位。当消失已经过期时，如果服务端还没有开始向匹配的订阅者投递该消息，则服务端会删除该订阅者的消息副本。如果不设置，则消息永远不会过期",
            "type": "integer"
          },
          "response_topic": {
            "description": "响应主题标识符， UTF-8 编码的字符串，用作响应消息的主题名。响应主题不能包含通配符，也不能包含多个主题，否则将造成协议错误。当存在响应主题时，消息将被视作请求报文。服务端在收到应用消息时必须将响应主题原封不动的发送给所有的订阅者。",
            "example": "some_other_topic",
            "type": "string"
          },
          "correlation_data": {
            "description": "对比数据标识符，服务端在收到应用消息时必须原封不动的把对比数据发送给所有的订阅者。对比数据只对请求消息(Request Message)的发送端和响应消息(Response Message)的接收端有意义。",
            "type": "string"
          },
          "user_properties": {
            "description": "指定 MQTT 消息的 User Property 键值对。注意，如果出现重复的键，只有最后一个会保留。",
            "example": {
              "foo": "bar"
            },
            "type": "object"
          },
          "content_type": {
            "description": "内容类型标识符，以 UTF-8 格式编码的字符串，用来描述应用消息的内容，服务端必须把收到的应用消息中的内容类型原封不动的发送给所有的订阅者。",
            "example": "text/plain",
            "type": "string"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.gateway_overview": {
        "properties": {
          "name": {
            "description": "网关名称",
            "type": "string"
          },
          "status": {
            "description": "网关启用状态",
            "enum": [
              "running",
              "stopped",
              "unloaded"
            ],
            "type": "string"
          },
          "created_at": {
            "description": "网关创建时间",
            "type": "string"
          },
          "started_at": {
            "description": "网关启用时间",
            "type": "string"
          },
          "stopped_at": {
            "description": "网关停用时间",
            "type": "string"
          },
          "max_connections": {
            "description": "最大连接数",
            "minimum": 1,
            "type": "integer"
          },
          "current_connections": {
            "description": "当前连接数",
            "minimum": 0,
            "type": "integer"
          },
          "listeners": {
            "description": "网关监听器列表",
            "items": {
              "$ref": "#/components/schemas/emqx_gateway_api.gateway_listener_overview"
            },
            "type": "array"
          },
          "node_status": {
            "description": "网关在集群中每个节点上的状态",
            "items": {
              "$ref": "#/components/schemas/emqx_gateway_api.gateway_node_status"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "dashboard.dashboard": {
        "properties": {
          "listeners": {
            "description": "Dashboard 监听器设置。监听器必须有唯一的端口号和IP地址的组合。<br/>例如，可以通过指定IP地址 0.0.0.0 来监听机器上给定端口上的所有配置的IP地址。<br/>或者，可以为每个监听器指定唯一的IP地址，但使用相同的端口。",
            "$ref": "#/components/schemas/dashboard.listeners"
          },
          "token_expired_time": {
            "default": "60m",
            "description": "JWT token 过期时间。默认设置为 60 分钟。",
            "example": "12m",
            "type": "string"
          },
          "cors": {
            "default": false,
            "description": "支持跨域资源共享(CORS)，<br/>允许服务器指示任何来源(域名、协议或端口)，除了本服务器之外的任何浏览器应允许加载资源。",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "broker.sys_topics": {
        "properties": {
          "sys_msg_interval": {
            "default": "1m",
            "description": "发送 `$SYS` 主题的间隔时间。",
            "oneOf": [
              {
                "example": "12m",
                "type": "string"
              },
              {
                "enum": [
                  "disabled"
                ],
                "type": "string"
              }
            ]
          },
          "sys_heartbeat_interval": {
            "default": "30s",
            "description": "发送心跳系统消息的间隔时间，它包括：<br/>  - `$SYS/brokers/<node>/uptime`<br/>  - `$SYS/brokers/<node>/datetime`",
            "oneOf": [
              {
                "example": "12m",
                "type": "string"
              },
              {
                "enum": [
                  "disabled"
                ],
                "type": "string"
              }
            ]
          },
          "sys_event_messages": {
            "description": "客户端事件消息。",
            "$ref": "#/components/schemas/broker.event_names"
          }
        },
        "type": "object"
      },
      "authz.node_resource_metrics": {
        "properties": {
          "node": {
            "description": "节点名称。",
            "example": "emqx@127.0.0.1",
            "type": "string"
          },
          "metrics": {
            "description": "资源统计指标。",
            "$ref": "#/components/schemas/authz.resource_metrics"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.gateway_node_status": {
        "properties": {
          "node": {
            "description": "节点名称",
            "enum": [
              "emqx@127.0.0.1"
            ],
            "type": "string"
          },
          "status": {
            "description": "网关启用状态",
            "enum": [
              "running",
              "stopped",
              "unloaded"
            ],
            "type": "string"
          },
          "max_connections": {
            "description": "最大连接数",
            "minimum": 1,
            "type": "integer"
          },
          "current_connections": {
            "description": "当前连接数",
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "emqx_gateway_api.lwm2m": {
        "required": [
          "translators",
          "xml_dir"
        ],
        "properties": {
          "name": {
            "description": "网关名称",
            "enum": [
              "lwm2m"
            ],
            "type": "string"
          },
          "xml_dir": {
            "description": "LwM2M Resource 定义的 XML 文件目录路径。",
            "example": "/etc/emqx/lwm2m_xml",
            "type": "string"
          },
          "lifetime_min": {
            "default": "15s",
            "description": "允许 LwM2M 客户端允许设置的心跳最小值。",
            "example": "12m",
            "type": "string"
          },
          "lifetime_max": {
            "default": "86400s",
            "description": "允许 LwM2M 客户端允许设置的心跳最大值。",
            "example": "12m",
            "type": "string"
          },
          "qmode_time_window": {
            "default": "22s",
            "description": "在QMode模式下，LwM2M网关认为网络链接有效的时间窗口的值。<br/>例如，在收到客户端的更新信息后，在这个时间窗口内的任何信息都会直接发送到LwM2M客户端，而超过这个时间窗口的所有信息都会暂时储存在内存中。",
            "example": "1h",
            "type": "string"
          },
          "auto_observe": {
            "default": false,
            "description": "自动 Observe REGISTER 数据包的 Object 列表。",
            "type": "boolean"
          },
          "update_msg_publish_condition": {
            "default": "contains_object_list",
            "description": "发布UPDATE事件消息的策略。<br/><br/>  - always: 只要收到 UPDATE 请求，就发送更新事件。<br/><br/>  - contains_object_list: 仅当 UPDATE 请求携带 Object 列表时才发送更新事件。",
            "enum": [
              "always",
              "contains_object_list"
            ],
            "type": "string"
          },
          "translators": {
            "description": "LwM2M 网关订阅/发布消息的主题映射配置。",
            "$ref": "#/components/schemas/emqx_lwm2m_schema.lwm2m_translators"
          },
          "mountpoint": {
            "default": "lwm2m/${endpoint_name}/",
            "description": "发布或订阅时，在所有主题前增加前缀字符串。<br/>当消息投递给订阅者时，前缀字符串将从主题名称中删除。挂载点是用户可以用来实现不同监听器之间的消息路由隔离的一种方式。<br/>例如，如果客户端 A 在 `listeners.tcp.\\<name>.mountpoint` 设置为 `some_tenant` 的情况下订阅 `t`，<br/>则客户端实际上订阅了 `some_tenant/t` 主题。<br/>类似地，如果另一个客户端 B（连接到与客户端 A 相同的侦听器）向主题 `t` 发送消息，<br/>则该消息被路由到所有订阅了 `some_tenant/t` 的客户端，因此客户端 A 将收到该消息，带有 主题名称`t`。 设置为 `\"\"` 以禁用该功能。<br/>挂载点字符串中可用的变量：<br/><br/>   - <code>${clientid}</code>：clientid<br/><br/>   - <code>${username}</code>：用户名",
            "type": "string"
          },
          "enable": {
            "default": true,
            "description": "是否启用该网关",
            "type": "boolean"
          },
          "enable_stats": {
            "default": true,
            "description": "是否开启客户端统计",
            "type": "boolean"
          },
          "idle_timeout": {
            "default": "30s",
            "description": "客户端连接过程的空闲时间。该配置用于：<br/>  1. 一个新创建的客户端进程如果在该时间间隔内没有收到任何客户端请求，将被直接关闭。<br/>  2. 一个正在运行的客户进程如果在这段时间后没有收到任何客户请求，将进入休眠状态以节省资源。",
            "example": "12m",
            "type": "string"
          },
          "clientinfo_override": {
            "description": "ClientInfo 重写。",
            "$ref": "#/components/schemas/gateway.clientinfo_override"
          },
          "listeners": {
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                },
                {
                  "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                }
              ]
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "description": "Authorize with [API Keys](https://www.emqx.io/docs/en/v5.0/admin/api.html#api-keys)",
        "scheme": "basic",
        "type": "http"
      },
      "bearerAuth": {
        "description": "Authorize with Bearer Token",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "title": "EMQX API",
    "version": "5.1.6"
  },
  "openapi": "3.0.0",
  "paths": {
    "/authentication/{id}/position/{position}": {
      "put": {
        "description": "调整全局认证链上指定认证器的顺序。",
        "parameters": [
          {
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "认证器在链中的位置。可能的值是 'front', 'rear', 'before:{other_authenticator_id}', 'after:{other_authenticator_id}'",
            "example": "before:password_based:built_in_database",
            "in": "path",
            "name": "position",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Authenticator moved"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/metrics": {
      "get": {
        "description": "EMQX 监控指标信息",
        "parameters": [
          {
            "description": "Whether to aggregate all nodes Metrics",
            "in": "query",
            "name": "aggregate",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_metrics.node_metrics"
                      },
                      "type": "array"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_mgmt_api_metrics.aggregated_metrics"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Metrics"
        ]
      }
    },
    "/authentication/{id}/users/{user_id}": {
      "delete": {
        "description": "删除全局认证链上指定认证器中的指定用户数据。",
        "parameters": [
          {
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "用户 ID，根据设置的账号类型不同，可以是 username 或 clientid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authentication"
        ]
      },
      "get": {
        "description": "获取全局认证链上指定认证器中的指定用户数据。",
        "parameters": [
          {
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "用户 ID，根据设置的账号类型不同，可以是 username 或 clientid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "regular_user": {
                    "summary": "Regular user",
                    "value": {
                      "user_id": "user1"
                    }
                  },
                  "super_user": {
                    "summary": "Superuser",
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authentication"
        ]
      },
      "put": {
        "description": "更新全局认证链上指定认证器中的指定用户数据。",
        "parameters": [
          {
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "用户 ID，根据设置的账号类型不同，可以是 username 或 clientid",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "summary": "Update regular user",
                  "value": {
                    "password": "******"
                  }
                },
                "super_user": {
                  "summary": "Update user and promote to superuser",
                  "value": {
                    "is_superuser": true,
                    "password": "******"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "summary": "Regular user",
                    "value": {
                      "user_id": "user1"
                    }
                  },
                  "super_user": {
                    "summary": "Superuser",
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/authentication/{id}/import_users": {
      "post": {
        "description": "为全局认证链上的指定认证器导入用户数据。",
        "parameters": [
          {
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "filename": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Users imported"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/mqtt/delayed": {
      "get": {
        "description": "查看慢订阅状态",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/modules.delayed"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MQTT"
        ]
      },
      "put": {
        "description": "开启或者关闭功能，或者设置延迟消息数量上限",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/modules.delayed"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "配置更新请求执行成功",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/modules.delayed"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "数量上限不合法",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MQTT"
        ]
      }
    },
    "/gateways/lwm2m/clients/{clientid}/observe": {
      "post": {
        "description": "Observe/Un-Observe 指定资源",
        "parameters": [
          {
            "example": "urn:oma:lwm2m:oma:2",
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "/3/0/7",
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": true,
            "in": "query",
            "name": "enable",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "CLIENT_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Clientid not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Observe a Resource",
        "tags": [
          "LwM2M Gateways"
        ]
      }
    },
    "/plugins/{name}": {
      "delete": {
        "description": "Uninstalls a previously uploaded plugin package.",
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          }
        ],
        "responses": {
          "204": {
            "description": "Uninstall successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "PARAM_ERROR"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad parameter",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Plugin Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete a plugin",
        "tags": [
          "Plugins"
        ]
      },
      "get": {
        "description": "Describs plugin according to its `release.json` and `README.md`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plugins.plugin"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Plugin Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get a plugin description",
        "tags": [
          "Plugins"
        ]
      }
    },
    "/bridges/{id}/metrics/reset": {
      "put": {
        "description": "通过 ID 重置 Bridge 的计数",
        "parameters": [
          {
            "description": "Bridge ID ， 格式为 {type}:{name}",
            "example": "webhook:webhook_example",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Reset success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bridge not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Reset bridge metrics",
        "tags": [
          "Bridges"
        ]
      }
    },
    "/status": {
      "get": {
        "description": "节点的健康检查。 返回节点状态的描述信息。<br/><br/>如果 EMQX 应用程序已经启动并运行，返回状态代码 200，否则返回 503。<br/><br/>这个API是在v5.0.10中引入的。<br/>GET `/status`端点（没有`/api/...`前缀）也是这个端点的一个别名，工作方式相同。 这个别名从v5.0.0开始就有了。<br/>自 v5.0.25 和 e5.0.4 开始，可以通过指定 'format' 参数来得到 JSON 格式的信息。",
        "parameters": [
          {
            "description": "指定返回的内容格式。使用 'text'（默认）则返回自由格式的字符串； 'json' 则返回 JSON 格式。",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "text",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "如果 'format' 参数为 'json'，则返回如下JSON：<br/><br/>{<br/>  \"rel_vsn\": \"v5.0.23\",<br/>  \"node_name\": \"emqx@127.0.0.1\",<br/>  \"broker_status\": \"started\",<br/>  \"app_status\": \"running\"<br/>}<br/><br/><br/>否则返回2行自由格式的文本，第一行描述节点的状态，第二行描述 EMQX 应用运行状态。例如：<br/><br/>Node emqx@127.0.0.1 is started<br/>emqx is running"
          },
          "503": {
            "description": "如果 EMQX 应用暂时没有启动，或正在重启，则可能返回 'emqx is not_running'"
          }
        },
        "security": [],
        "tags": [
          "Status"
        ]
      }
    },
    "/topics/{topic}": {
      "get": {
        "description": "获取主题到节点名称的路由映射",
        "parameters": [
          {
            "description": "Topic Name",
            "example": "",
            "in": "path",
            "name": "topic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_topics.topic"
                  },
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "TOPIC_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Topic not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Topics"
        ]
      }
    },
    "/stats": {
      "get": {
        "description": "EMQX stats",
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_mgmt_api_stats.aggregate"
          }
        ],
        "responses": {
          "200": {
            "description": "List stats ok",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_stats.aggergate_data"
                      },
                      "type": "array"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_mgmt_api_stats.node_stats_data"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Metrics"
        ]
      }
    },
    "/monitor_current": {
      "get": {
        "description": "Current monitor (statistics) data, e.g. number of connections and connection rate in the whole cluster.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_dashboard_monitor_api.sampler_current"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Metrics"
        ]
      }
    },
    "/authorization/sources/built_in_database/rules/users": {
      "get": {
        "description": "根据用户名查询内置数据库中相关的授权规则。",
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "description": "使用字串匹配模糊搜索用户名",
            "in": "query",
            "name": "like_username",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "password_based:built_in_database": {
                    "summary": "Username",
                    "value": {
                      "data": [
                        {
                          "rules": [
                            {
                              "action": "publish",
                              "permission": "allow",
                              "topic": "test/topic/1"
                            },
                            {
                              "action": "subscribe",
                              "permission": "allow",
                              "topic": "test/topic/2"
                            },
                            {
                              "action": "all",
                              "permission": "deny",
                              "topic": "eq test/#"
                            },
                            {
                              "action": "publish",
                              "permission": "allow",
                              "qos": [
                                "1"
                              ],
                              "retain": "true",
                              "topic": "test/topic/3"
                            },
                            {
                              "action": "publish",
                              "permission": "allow",
                              "qos": [
                                "0",
                                "1",
                                "2"
                              ],
                              "retain": "all",
                              "topic": "test/topic/4"
                            }
                          ],
                          "username": "user1"
                        }
                      ],
                      "meta": {
                        "count": 1,
                        "limit": 100,
                        "page": 1
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.username_response_data"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "post": {
        "description": "为指定的用户在内置数据库中添加授权规则。",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "password_based:built_in_database": {
                  "summary": "Username",
                  "value": [
                    {
                      "rules": [
                        {
                          "action": "publish",
                          "permission": "allow",
                          "topic": "test/topic/1"
                        },
                        {
                          "action": "subscribe",
                          "permission": "allow",
                          "topic": "test/topic/2"
                        },
                        {
                          "action": "all",
                          "permission": "deny",
                          "topic": "eq test/#"
                        },
                        {
                          "action": "publish",
                          "permission": "allow",
                          "qos": [
                            "1"
                          ],
                          "retain": "true",
                          "topic": "test/topic/3"
                        },
                        {
                          "action": "publish",
                          "permission": "allow",
                          "qos": [
                            "0",
                            "1",
                            "2"
                          ],
                          "retain": "all",
                          "topic": "test/topic/4"
                        }
                      ],
                      "username": "user1"
                    }
                  ]
                }
              },
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_username"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Created"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad username or bad rule schema",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "ALREADY_EXISTS"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "ALREADY_EXISTS",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/nodes/{node}/stats": {
      "get": {
        "description": "获取节点上的统计信息，例如主题数量，连接数量等。",
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_mgmt_api_nodes.node_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Get node stats successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_stats.node_stats_data"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Node not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Nodes"
        ]
      }
    },
    "/exhooks/{name}": {
      "delete": {
        "description": "删除 Exhook 服务器",
        "parameters": [
          {
            "description": "Exhook 服务器的名称",
            "example": "default",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Server not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_RPC"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad RPC",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "ExHook"
        ]
      },
      "get": {
        "description": "查看 Exhook 服务器详细信息",
        "parameters": [
          {
            "description": "Exhook 服务器的名称",
            "example": "default",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exhook.detail_server_info"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Server not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "ExHook"
        ]
      },
      "put": {
        "description": "更新 Exhook 服务器",
        "parameters": [
          {
            "description": "Exhook 服务器的名称",
            "example": "default",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "auto_reconnect": "60s",
                "enable": true,
                "failed_action": "deny",
                "name": "default",
                "pool_size": 8,
                "request_timeout": "5s",
                "ssl": {
                  "cacertfile": "/etc/emqx/certs/cacert.pem",
                  "certfile": "/etc/emqx/certs/cert.pem",
                  "enable": false,
                  "keyfile": "/etc/emqx/certs/key.pem"
                },
                "url": "http://127.0.0.1:8081"
              },
              "schema": {
                "$ref": "#/components/schemas/exhook.server_config"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exhook.detail_server_info"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Server not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_RPC"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad RPC",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "ExHook"
        ]
      }
    },
    "/prometheus": {
      "get": {
        "description": "Get Prometheus config info",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "enable": true,
                  "headers": {
                    "header-name": "header-value"
                  },
                  "interval": "15s",
                  "job_name": "${name}/instance/${name}~${host}",
                  "push_gateway_server": "http://127.0.0.1:9091"
                },
                "schema": {
                  "$ref": "#/components/schemas/prometheus.prometheus"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Monitor"
        ]
      },
      "put": {
        "description": "Update Prometheus config",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "enable": true,
                "headers": {
                  "header-name": "header-value"
                },
                "interval": "15s",
                "job_name": "${name}/instance/${name}~${host}",
                "push_gateway_server": "http://127.0.0.1:9091"
              },
              "schema": {
                "$ref": "#/components/schemas/prometheus.prometheus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "enable": true,
                  "headers": {
                    "header-name": "header-value"
                  },
                  "interval": "15s",
                  "job_name": "${name}/instance/${name}~${host}",
                  "push_gateway_server": "http://127.0.0.1:9091"
                },
                "schema": {
                  "$ref": "#/components/schemas/prometheus.prometheus"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Monitor"
        ]
      }
    },
    "/mqtt/auto_subscribe": {
      "get": {
        "description": "获取自动订阅主题列表",
        "parameters": [],
        "responses": {
          "200": {
            "description": "设备登录成功之后，通过预设的订阅表示符，为设备自动完成订阅。支持使用占位符。",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/auto_subscribe.topic"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Auto Subscribe"
        ]
      },
      "put": {
        "description": "更新自动订阅主题列表",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/auto_subscribe.topic"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "设备登录成功之后，通过预设的订阅表示符，为设备自动完成订阅。支持使用占位符。",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/auto_subscribe.topic"
                  },
                  "type": "array"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "EXCEED_LIMIT"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "超出自定订阅主题列表长度限制",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Auto Subscribe"
        ]
      }
    },
    "/gateways/{name}/listeners/{id}/authentication": {
      "delete": {
        "description": "移除指定监听器的认证器。",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "监听器 ID",
            "example": "",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete the listener's authenticator",
        "tags": [
          "Gateway Listeners"
        ]
      },
      "get": {
        "description": "获取监听器的认证器配置。",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "监听器 ID",
            "example": "",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "summary": "JWT authentication",
                    "value": {
                      "algorithm": "hmac-based",
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    }
                  },
                  "password_based:built_in_database": {
                    "summary": "Built-in password_based authentication",
                    "value": {
                      "backend": "built_in_database",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    }
                  },
                  "password_based:http": {
                    "summary": "password_based authentication through external HTTP API",
                    "value": {
                      "backend": "http",
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "connect_timeout": "5s",
                      "enable_pipelining": 100,
                      "headers": {
                        "content-type": "application/json"
                      },
                      "mechanism": "password_based",
                      "method": "post",
                      "pool_size": 8,
                      "request_timeout": "5s",
                      "ssl": {
                        "enable": false
                      },
                      "url": "http://127.0.0.1:18083"
                    }
                  },
                  "password_based:mongodb": {
                    "summary": "password_based authentication with MongoDB backend",
                    "value": {
                      "backend": "mongodb",
                      "collection": "users",
                      "database": "example",
                      "filter": {
                        "username": "${username}"
                      },
                      "is_superuser_field": "is_superuser",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "password_hash_field": "password_hash",
                      "salt_field": "salt",
                      "server": "127.0.0.1:27017"
                    }
                  },
                  "password_based:redis": {
                    "summary": "password_based authentication with Redis backend",
                    "value": {
                      "backend": "redis",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single",
                      "server": "127.0.0.1:6379"
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Authentication or listener does not existed"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get the listener's authenticator",
        "tags": [
          "Gateway Listeners"
        ]
      },
      "post": {
        "description": "为指定监听器开启认证器以实现客户端认证的能力。<br/><br/>当某一监听器开启认证后，所有连接到该监听器的客户端会使用该认证器进行认证。",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "监听器 ID",
            "example": "",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "summary": "JWT authentication",
                  "value": {
                    "algorithm": "hmac-based",
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  }
                },
                "password_based:built_in_database": {
                  "summary": "Built-in password_based authentication",
                  "value": {
                    "backend": "built_in_database",
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  }
                },
                "password_based:http": {
                  "summary": "password_based authentication through external HTTP API",
                  "value": {
                    "backend": "http",
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "connect_timeout": "5s",
                    "enable_pipelining": 100,
                    "headers": {
                      "content-type": "application/json"
                    },
                    "mechanism": "password_based",
                    "method": "post",
                    "pool_size": 8,
                    "request_timeout": "5s",
                    "ssl": {
                      "enable": false
                    },
                    "url": "http://127.0.0.1:18083"
                  }
                },
                "password_based:mongodb": {
                  "summary": "password_based authentication with MongoDB backend",
                  "value": {
                    "backend": "mongodb",
                    "collection": "users",
                    "database": "example",
                    "filter": {
                      "username": "${username}"
                    },
                    "is_superuser_field": "is_superuser",
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "password_hash_field": "password_hash",
                    "salt_field": "salt",
                    "server": "127.0.0.1:27017"
                  }
                },
                "password_based:redis": {
                  "summary": "password_based authentication with Redis backend",
                  "value": {
                    "backend": "redis",
                    "cmd": "HMGET ${username} password_hash salt",
                    "database": 0,
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single",
                    "server": "127.0.0.1:6379"
                  }
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "summary": "JWT authentication",
                    "value": {
                      "algorithm": "hmac-based",
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    }
                  },
                  "password_based:built_in_database": {
                    "summary": "Built-in password_based authentication",
                    "value": {
                      "backend": "built_in_database",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    }
                  },
                  "password_based:http": {
                    "summary": "password_based authentication through external HTTP API",
                    "value": {
                      "backend": "http",
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "connect_timeout": "5s",
                      "enable_pipelining": 100,
                      "headers": {
                        "content-type": "application/json"
                      },
                      "mechanism": "password_based",
                      "method": "post",
                      "pool_size": 8,
                      "request_timeout": "5s",
                      "ssl": {
                        "enable": false
                      },
                      "url": "http://127.0.0.1:18083"
                    }
                  },
                  "password_based:mongodb": {
                    "summary": "password_based authentication with MongoDB backend",
                    "value": {
                      "backend": "mongodb",
                      "collection": "users",
                      "database": "example",
                      "filter": {
                        "username": "${username}"
                      },
                      "is_superuser_field": "is_superuser",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "password_hash_field": "password_hash",
                      "salt_field": "salt",
                      "server": "127.0.0.1:27017"
                    }
                  },
                  "password_based:redis": {
                    "summary": "password_based authentication with Redis backend",
                    "value": {
                      "backend": "redis",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single",
                      "server": "127.0.0.1:6379"
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create authenticator for listener",
        "tags": [
          "Gateway Listeners"
        ]
      },
      "put": {
        "description": "更新指定监听器的认证器配置，或停用/启用该认证器。",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "监听器 ID",
            "example": "",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "summary": "JWT authentication",
                  "value": {
                    "algorithm": "hmac-based",
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  }
                },
                "password_based:built_in_database": {
                  "summary": "Built-in password_based authentication",
                  "value": {
                    "backend": "built_in_database",
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  }
                },
                "password_based:http": {
                  "summary": "password_based authentication through external HTTP API",
                  "value": {
                    "backend": "http",
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "connect_timeout": "5s",
                    "enable_pipelining": 100,
                    "headers": {
                      "content-type": "application/json"
                    },
                    "mechanism": "password_based",
                    "method": "post",
                    "pool_size": 8,
                    "request_timeout": "5s",
                    "ssl": {
                      "enable": false
                    },
                    "url": "http://127.0.0.1:18083"
                  }
                },
                "password_based:mongodb": {
                  "summary": "password_based authentication with MongoDB backend",
                  "value": {
                    "backend": "mongodb",
                    "collection": "users",
                    "database": "example",
                    "filter": {
                      "username": "${username}"
                    },
                    "is_superuser_field": "is_superuser",
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "password_hash_field": "password_hash",
                    "salt_field": "salt",
                    "server": "127.0.0.1:27017"
                  }
                },
                "password_based:redis": {
                  "summary": "password_based authentication with Redis backend",
                  "value": {
                    "backend": "redis",
                    "cmd": "HMGET ${username} password_hash salt",
                    "database": 0,
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single",
                    "server": "127.0.0.1:6379"
                  }
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "summary": "JWT authentication",
                    "value": {
                      "algorithm": "hmac-based",
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    }
                  },
                  "password_based:built_in_database": {
                    "summary": "Built-in password_based authentication",
                    "value": {
                      "backend": "built_in_database",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    }
                  },
                  "password_based:http": {
                    "summary": "password_based authentication through external HTTP API",
                    "value": {
                      "backend": "http",
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "connect_timeout": "5s",
                      "enable_pipelining": 100,
                      "headers": {
                        "content-type": "application/json"
                      },
                      "mechanism": "password_based",
                      "method": "post",
                      "pool_size": 8,
                      "request_timeout": "5s",
                      "ssl": {
                        "enable": false
                      },
                      "url": "http://127.0.0.1:18083"
                    }
                  },
                  "password_based:mongodb": {
                    "summary": "password_based authentication with MongoDB backend",
                    "value": {
                      "backend": "mongodb",
                      "collection": "users",
                      "database": "example",
                      "filter": {
                        "username": "${username}"
                      },
                      "is_superuser_field": "is_superuser",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "password_hash_field": "password_hash",
                      "salt_field": "salt",
                      "server": "127.0.0.1:27017"
                    }
                  },
                  "password_based:redis": {
                    "summary": "password_based authentication with Redis backend",
                    "value": {
                      "backend": "redis",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single",
                      "server": "127.0.0.1:6379"
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update config of authenticator for listener",
        "tags": [
          "Gateway Listeners"
        ]
      }
    },
    "/gateways/{name}/listeners": {
      "get": {
        "description": "获取网关监听器列表。该接口会返回监听器所有的配置（包括该监听器上的认证器），同时也会返回该监听器在集群中运行的状态。",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "acceptors": 16,
                    "access_rules": [
                      "allow all"
                    ],
                    "bind": "22213",
                    "dtls_options": {
                      "cacertfile": "/etc/emqx/certs/cacert.pem",
                      "certfile": "/etc/emqx/certs/cert.pem",
                      "fail_if_no_peer_cert": false,
                      "keyfile": "/etc/emqx/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ]
                    },
                    "max_conn_rate": 1000,
                    "max_connections": 1024000,
                    "name": "dtls-def",
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "current_connections": 10,
                          "max_connections": 1024000,
                          "running": true
                        }
                      }
                    ],
                    "status": {
                      "current_connections": 10,
                      "max_connections": 1024000,
                      "running": true
                    },
                    "type": "dtls",
                    "udp_options": {
                      "active_n": 100,
                      "backlog": 1024
                    }
                  },
                  {
                    "acceptors": 16,
                    "bind": "22214",
                    "dtls_options": {
                      "cacertfile": "/etc/emqx/certs/cacert.pem",
                      "certfile": "/etc/emqx/certs/cert.pem",
                      "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                      "fail_if_no_peer_cert": false,
                      "keyfile": "/etc/emqx/certs/key.pem",
                      "user_lookup_fun": "emqx_tls_psk:lookup",
                      "verify": "verify_none",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ]
                    },
                    "max_conn_rate": 1000,
                    "max_connections": 1024000,
                    "name": "dtls-psk",
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "current_connections": 10,
                          "max_connections": 1024000,
                          "running": true
                        }
                      }
                    ],
                    "status": {
                      "current_connections": 10,
                      "max_connections": 1024000,
                      "running": true
                    },
                    "type": "dtls"
                  },
                  {
                    "acceptors": 16,
                    "authentication": {
                      "backend": "built_in_database",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256"
                      },
                      "user_id_type": "username"
                    },
                    "bind": "22215",
                    "max_conn_rate": 1000,
                    "max_connections": 1024000,
                    "name": "tcp-with-authn",
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "current_connections": 10,
                          "max_connections": 1024000,
                          "running": true
                        }
                      }
                    ],
                    "status": {
                      "current_connections": 10,
                      "max_connections": 1024000,
                      "running": true
                    },
                    "type": "tcp"
                  },
                  {
                    "acceptors": 16,
                    "access_rules": [
                      "allow all"
                    ],
                    "bind": "22211",
                    "max_conn_rate": 1000,
                    "max_connections": 1024000,
                    "name": "ssl-def",
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "current_connections": 10,
                          "max_connections": 1024000,
                          "running": true
                        }
                      }
                    ],
                    "ssl_options": {
                      "cacertfile": "/etc/emqx/certs/cacert.pem",
                      "certfile": "/etc/emqx/certs/cert.pem",
                      "fail_if_no_peer_cert": false,
                      "keyfile": "/etc/emqx/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2",
                        "tlsv1.1",
                        "tlsv1"
                      ]
                    },
                    "status": {
                      "current_connections": 10,
                      "max_connections": 1024000,
                      "running": true
                    },
                    "tcp_options": {
                      "active_n": 100,
                      "backlog": 1024
                    },
                    "type": "ssl"
                  },
                  {
                    "acceptors": 16,
                    "bind": "22210",
                    "max_conn_rate": 1000,
                    "max_connections": 1024000,
                    "name": "tcp-def",
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "current_connections": 10,
                          "max_connections": 1024000,
                          "running": true
                        }
                      }
                    ],
                    "status": {
                      "current_connections": 10,
                      "max_connections": 1024000,
                      "running": true
                    },
                    "tcp_options": {
                      "active_n": 100,
                      "backlog": 1024,
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB"
                    },
                    "type": "tcp"
                  },
                  {
                    "bind": "22212",
                    "name": "udp-def",
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "current_connections": 10,
                          "max_connections": 1024000,
                          "running": true
                        }
                      }
                    ],
                    "status": {
                      "current_connections": 10,
                      "max_connections": 1024000,
                      "running": true
                    },
                    "type": "udp",
                    "udp_options": {
                      "active_n": 100,
                      "buffer": "10KB",
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "sndbuf": "10KB"
                    }
                  }
                ],
                "schema": {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/emqx_gateway_api_listeners.dtls_listener"
                      },
                      {
                        "$ref": "#/components/schemas/emqx_gateway_api_listeners.udp_listener"
                      },
                      {
                        "$ref": "#/components/schemas/emqx_gateway_api_listeners.ssl_listener"
                      },
                      {
                        "$ref": "#/components/schemas/emqx_gateway_api_listeners.tcp_listener"
                      }
                    ]
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all listeners",
        "tags": [
          "Gateway Listeners"
        ]
      },
      "post": {
        "description": "为指定网关添加监听器。<br/><br/>注：对于某网关不支持的监听器类型，该接口会返回 `400: BAD_REQUEST`。",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "dtls_listener": {
                  "summary": "A simple DTLS listener example",
                  "value": {
                    "acceptors": 16,
                    "access_rules": [
                      "allow all"
                    ],
                    "bind": "22213",
                    "dtls_options": {
                      "cacertfile": "/etc/emqx/certs/cacert.pem",
                      "certfile": "/etc/emqx/certs/cert.pem",
                      "fail_if_no_peer_cert": false,
                      "keyfile": "/etc/emqx/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ]
                    },
                    "max_conn_rate": 1000,
                    "max_connections": 1024000,
                    "name": "dtls-def",
                    "type": "dtls",
                    "udp_options": {
                      "active_n": 100,
                      "backlog": 1024
                    }
                  }
                },
                "dtls_listener_with_psk_ciphers": {
                  "summary": "A DTLS listener with PSK example",
                  "value": {
                    "acceptors": 16,
                    "bind": "22214",
                    "dtls_options": {
                      "cacertfile": "/etc/emqx/certs/cacert.pem",
                      "certfile": "/etc/emqx/certs/cert.pem",
                      "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                      "fail_if_no_peer_cert": false,
                      "keyfile": "/etc/emqx/certs/key.pem",
                      "user_lookup_fun": "emqx_tls_psk:lookup",
                      "verify": "verify_none",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ]
                    },
                    "max_conn_rate": 1000,
                    "max_connections": 1024000,
                    "name": "dtls-psk",
                    "type": "dtls"
                  }
                },
                "lisetner_with_authn": {
                  "summary": "A TCP listener with authentication example",
                  "value": {
                    "acceptors": 16,
                    "authentication": {
                      "backend": "built_in_database",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256"
                      },
                      "user_id_type": "username"
                    },
                    "bind": "22215",
                    "max_conn_rate": 1000,
                    "max_connections": 1024000,
                    "name": "tcp-with-authn",
                    "type": "tcp"
                  }
                },
                "ssl_listener": {
                  "summary": "A simple SSL listener example",
                  "value": {
                    "acceptors": 16,
                    "access_rules": [
                      "allow all"
                    ],
                    "bind": "22211",
                    "max_conn_rate": 1000,
                    "max_connections": 1024000,
                    "name": "ssl-def",
                    "ssl_options": {
                      "cacertfile": "/etc/emqx/certs/cacert.pem",
                      "certfile": "/etc/emqx/certs/cert.pem",
                      "fail_if_no_peer_cert": false,
                      "keyfile": "/etc/emqx/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2",
                        "tlsv1.1",
                        "tlsv1"
                      ]
                    },
                    "tcp_options": {
                      "active_n": 100,
                      "backlog": 1024
                    },
                    "type": "ssl"
                  }
                },
                "tcp_listener": {
                  "summary": "A simple TCP listener example",
                  "value": {
                    "acceptors": 16,
                    "bind": "22210",
                    "max_conn_rate": 1000,
                    "max_connections": 1024000,
                    "name": "tcp-def",
                    "tcp_options": {
                      "active_n": 100,
                      "backlog": 1024,
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB"
                    },
                    "type": "tcp"
                  }
                },
                "udp_listener": {
                  "summary": "A simple UDP listener example",
                  "value": {
                    "bind": "22212",
                    "name": "udp-def",
                    "type": "udp",
                    "udp_options": {
                      "active_n": 100,
                      "buffer": "10KB",
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "sndbuf": "10KB"
                    }
                  }
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "dtls_listener": {
                    "summary": "A simple DTLS listener example",
                    "value": {
                      "acceptors": 16,
                      "access_rules": [
                        "allow all"
                      ],
                      "bind": "22213",
                      "dtls_options": {
                        "cacertfile": "/etc/emqx/certs/cacert.pem",
                        "certfile": "/etc/emqx/certs/cert.pem",
                        "fail_if_no_peer_cert": false,
                        "keyfile": "/etc/emqx/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ]
                      },
                      "max_conn_rate": 1000,
                      "max_connections": 1024000,
                      "name": "dtls-def",
                      "type": "dtls",
                      "udp_options": {
                        "active_n": 100,
                        "backlog": 1024
                      }
                    }
                  },
                  "dtls_listener_with_psk_ciphers": {
                    "summary": "A DTLS listener with PSK example",
                    "value": {
                      "acceptors": 16,
                      "bind": "22214",
                      "dtls_options": {
                        "cacertfile": "/etc/emqx/certs/cacert.pem",
                        "certfile": "/etc/emqx/certs/cert.pem",
                        "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                        "fail_if_no_peer_cert": false,
                        "keyfile": "/etc/emqx/certs/key.pem",
                        "user_lookup_fun": "emqx_tls_psk:lookup",
                        "verify": "verify_none",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ]
                      },
                      "max_conn_rate": 1000,
                      "max_connections": 1024000,
                      "name": "dtls-psk",
                      "type": "dtls"
                    }
                  },
                  "lisetner_with_authn": {
                    "summary": "A TCP listener with authentication example",
                    "value": {
                      "acceptors": 16,
                      "authentication": {
                        "backend": "built_in_database",
                        "mechanism": "password_based",
                        "password_hash_algorithm": {
                          "name": "sha256"
                        },
                        "user_id_type": "username"
                      },
                      "bind": "22215",
                      "max_conn_rate": 1000,
                      "max_connections": 1024000,
                      "name": "tcp-with-authn",
                      "type": "tcp"
                    }
                  },
                  "ssl_listener": {
                    "summary": "A simple SSL listener example",
                    "value": {
                      "acceptors": 16,
                      "access_rules": [
                        "allow all"
                      ],
                      "bind": "22211",
                      "max_conn_rate": 1000,
                      "max_connections": 1024000,
                      "name": "ssl-def",
                      "ssl_options": {
                        "cacertfile": "/etc/emqx/certs/cacert.pem",
                        "certfile": "/etc/emqx/certs/cert.pem",
                        "fail_if_no_peer_cert": false,
                        "keyfile": "/etc/emqx/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2",
                          "tlsv1.1",
                          "tlsv1"
                        ]
                      },
                      "tcp_options": {
                        "active_n": 100,
                        "backlog": 1024
                      },
                      "type": "ssl"
                    }
                  },
                  "tcp_listener": {
                    "summary": "A simple TCP listener example",
                    "value": {
                      "acceptors": 16,
                      "bind": "22210",
                      "max_conn_rate": 1000,
                      "max_connections": 1024000,
                      "name": "tcp-def",
                      "tcp_options": {
                        "active_n": 100,
                        "backlog": 1024,
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB"
                      },
                      "type": "tcp"
                    }
                  },
                  "udp_listener": {
                    "summary": "A simple UDP listener example",
                    "value": {
                      "bind": "22212",
                      "name": "udp-def",
                      "type": "udp",
                      "udp_options": {
                        "active_n": 100,
                        "buffer": "10KB",
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "sndbuf": "10KB"
                      }
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add listener",
        "tags": [
          "Gateway Listeners"
        ]
      }
    },
    "/configs/sys_topics": {
      "get": {
        "description": "Get the sub-configurations under *sys_topics*",
        "parameters": [],
        "responses": {
          "200": {
            "description": "系统主题配置。",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/broker.sys_topics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "config not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get the sub-configurations under *sys_topics*",
        "tags": [
          "Configs"
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *sys_topics*",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/broker.sys_topics"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "系统主题配置。",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/broker.sys_topics"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "UPDATE_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "UPDATE_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update the sub-configurations under *sys_topics*",
        "tags": [
          "Configs"
        ]
      }
    },
    "/clients/kickout/bulk": {
      "post": {
        "description": "Kick out a batch of client by client IDs",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "example": [
                "emqx_clienid_985bb09d",
                "emqx_clientid_211cc01c"
              ],
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Kick out clients successfully"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Clients"
        ]
      }
    },
    "/authorization/sources/built_in_database/rules/clients": {
      "get": {
        "description": "根据客户端ID查询内置数据库中的授权规则。",
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "description": "使用字串匹配模糊搜索客户端标识符",
            "in": "query",
            "name": "like_clientid",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "password_based:built_in_database": {
                    "summary": "ClientID",
                    "value": {
                      "data": [
                        {
                          "clientid": "client1",
                          "rules": [
                            {
                              "action": "publish",
                              "permission": "allow",
                              "topic": "test/topic/1"
                            },
                            {
                              "action": "subscribe",
                              "permission": "allow",
                              "topic": "test/topic/2"
                            },
                            {
                              "action": "all",
                              "permission": "deny",
                              "topic": "eq test/#"
                            },
                            {
                              "action": "publish",
                              "permission": "allow",
                              "qos": [
                                "1"
                              ],
                              "retain": "true",
                              "topic": "test/topic/3"
                            },
                            {
                              "action": "publish",
                              "permission": "allow",
                              "qos": [
                                "0",
                                "1",
                                "2"
                              ],
                              "retain": "all",
                              "topic": "test/topic/4"
                            }
                          ]
                        }
                      ],
                      "meta": {
                        "count": 1,
                        "limit": 100,
                        "page": 1
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.clientid_response_data"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "post": {
        "description": "为指定客户端添加内置数据库中客户端的规则。",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "password_based:built_in_database": {
                  "summary": "ClientID",
                  "value": [
                    {
                      "clientid": "client1",
                      "rules": [
                        {
                          "action": "publish",
                          "permission": "allow",
                          "topic": "test/topic/1"
                        },
                        {
                          "action": "subscribe",
                          "permission": "allow",
                          "topic": "test/topic/2"
                        },
                        {
                          "action": "all",
                          "permission": "deny",
                          "topic": "eq test/#"
                        },
                        {
                          "action": "publish",
                          "permission": "allow",
                          "qos": [
                            "1"
                          ],
                          "retain": "true",
                          "topic": "test/topic/3"
                        },
                        {
                          "action": "publish",
                          "permission": "allow",
                          "qos": [
                            "0",
                            "1",
                            "2"
                          ],
                          "retain": "all",
                          "topic": "test/topic/4"
                        }
                      ]
                    }
                  ]
                }
              },
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_clientid"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Created"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad clientid or bad rule schema",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/mqtt/delayed/messages/{node}/{msgid}": {
      "delete": {
        "description": "删除延迟消息",
        "parameters": [
          {
            "description": "消息的来源节点",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "延迟消息 ID",
            "in": "path",
            "name": "msgid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete delayed message success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "MESSAGE_ID_SCHEMA_ERROR",
                        "INVALID_NODE"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "消息 ID 格式错误",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "MESSAGE_ID_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "未找到对应消息",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MQTT"
        ]
      },
      "get": {
        "description": "查看延迟消息",
        "parameters": [
          {
            "description": "消息的来源节点",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "延迟消息 ID",
            "in": "path",
            "name": "msgid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_delayed_api.message_without_payload"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "MESSAGE_ID_SCHEMA_ERROR",
                        "INVALID_NODE"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "消息 ID 格式错误",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "MESSAGE_ID_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "未找到对应消息",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MQTT"
        ]
      }
    },
    "/monitor_current/nodes/{node}": {
      "get": {
        "description": "Node monitor (statistics) data, e.g. number of connections and connection rate on the specified node.",
        "parameters": [
          {
            "description": "EMQX node name.",
            "example": "emqx@127.0.0.1",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_dashboard_monitor_api.sampler_current"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Node not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Metrics"
        ]
      }
    },
    "/telemetry/status": {
      "get": {
        "description": "获取遥测状态",
        "parameters": [],
        "responses": {
          "200": {
            "description": "获取遥测状态",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_telemetry_api.status"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Telemetry"
        ]
      },
      "put": {
        "description": "更新遥测状态",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_telemetry_api.status"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "更新遥测状态",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_telemetry_api.status"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Telemetry"
        ]
      }
    },
    "/authentication/{id}/users": {
      "get": {
        "description": "获取全局认证链上指定认证器中的用户列表。",
        "parameters": [
          {
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "description": "使用用户 ID （username 或 clientid）模糊查询。",
            "in": "query",
            "name": "like_user_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "是否是超级用户。",
            "in": "query",
            "name": "is_superuser",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "user_id": "user1"
                    },
                    {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  ],
                  "meta": {
                    "count": 300,
                    "limit": 20,
                    "page": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_users"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authentication"
        ]
      },
      "post": {
        "description": "向全局认证链上的指定认证器添加用户数据，仅使用内置数据库作为数据源的认证器支持。",
        "parameters": [
          {
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "summary": "Regular user",
                  "value": {
                    "password": "******",
                    "user_id": "user1"
                  }
                },
                "super_user": {
                  "summary": "Superuser",
                  "value": {
                    "is_superuser": true,
                    "password": "******",
                    "user_id": "user2"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_create"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "regular_user": {
                    "summary": "Regular user",
                    "value": {
                      "user_id": "user1"
                    }
                  },
                  "super_user": {
                    "summary": "Superuser",
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/cluster": {
      "get": {
        "description": "获取集群信息",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "description": "Cluster name",
                      "type": "string"
                    },
                    "nodes": {
                      "description": "Node name",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "self": {
                      "description": "Self node name",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/plugins/{name}/{action}": {
      "put": {
        "description": "start/stop a installed plugin.<br/>- **start**: start the plugin.<br/>- **stop**: stop the plugin.<br/>",
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          },
          {
            "description": "Action",
            "in": "path",
            "name": "action",
            "required": true,
            "schema": {
              "enum": [
                "start",
                "stop"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Plugin Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Trigger action on an installed plugin",
        "tags": [
          "Plugins"
        ]
      }
    },
    "/gateways/{name}/clients/{clientid}": {
      "delete": {
        "description": "踢出指定客户端",
        "parameters": [
          {
            "description": "客户端 ID",
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "网关名称",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Kicked"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Kick out client",
        "tags": [
          "Gateway Clients"
        ]
      },
      "get": {
        "description": "获取客户端信息",
        "parameters": [
          {
            "description": "客户端 ID",
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "网关名称",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "general_client": {
                    "summary": "General client info",
                    "value": {
                      "inflight_cnt": 0,
                      "reductions": 72022,
                      "send_pkt": 1,
                      "proto_ver": "1.0",
                      "heap_size": 4185,
                      "clean_start": true,
                      "mqueue_len": 0,
                      "recv_oct": 56,
                      "recv_msg": 0,
                      "disconnected_at": null,
                      "subscriptions_max": "infinity",
                      "node": "emqx@127.0.0.1",
                      "created_at": "2021-12-07T10:44:02.721+08:00",
                      "recv_cnt": 1,
                      "connected": true,
                      "connected_at": "2021-12-07T10:44:02.721+08:00",
                      "username": "guest",
                      "awaiting_rel_max": "infinity",
                      "recv_pkt": 1,
                      "is_bridge": false,
                      "port": 50675,
                      "mqueue_dropped": 0,
                      "mqueue_max": "infinity",
                      "mailbox_len": 0,
                      "expiry_interval": 0,
                      "ip_address": "127.0.0.1",
                      "proto_name": "STOMP",
                      "send_oct": 61,
                      "inflight_max": "infinity",
                      "subscriptions_cnt": 0,
                      "send_msg": 0,
                      "awaiting_rel_cnt": 0,
                      "clientid": "MzAyMzEzNTUwNzk1NDA1MzYyMzIwNzUxNjQwMTY1NzQ0NjE",
                      "send_cnt": 1,
                      "keepalive": 0
                    }
                  },
                  "lwm2m_client": {
                    "summary": "LwM2M client info",
                    "value": {
                      "inflight_cnt": 0,
                      "reductions": 72022,
                      "send_pkt": 1,
                      "proto_ver": "1.0",
                      "heap_size": 4185,
                      "clean_start": true,
                      "endpoint_name": "urn:imei:154928475237123",
                      "mqueue_len": 0,
                      "recv_oct": 56,
                      "recv_msg": 0,
                      "disconnected_at": null,
                      "subscriptions_max": "infinity",
                      "node": "emqx@127.0.0.1",
                      "created_at": "2021-12-07T10:44:02.721+08:00",
                      "recv_cnt": 1,
                      "connected": true,
                      "connected_at": "2021-12-07T10:44:02.721+08:00",
                      "username": "guest",
                      "awaiting_rel_max": "infinity",
                      "recv_pkt": 1,
                      "is_bridge": false,
                      "port": 50675,
                      "mqueue_dropped": 0,
                      "mqueue_max": "infinity",
                      "mailbox_len": 0,
                      "expiry_interval": 0,
                      "ip_address": "127.0.0.1",
                      "proto_name": "LwM2M",
                      "send_oct": 61,
                      "inflight_max": "infinity",
                      "subscriptions_cnt": 0,
                      "send_msg": 0,
                      "lifetime": 86400,
                      "awaiting_rel_cnt": 0,
                      "clientid": "MzAyMzEzNTUwNzk1NDA1MzYyMzIwNzUxNjQwMTY1NzQ0NjE",
                      "send_cnt": 1,
                      "keepalive": 0
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api_clients.exproto_client"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api_clients.lwm2m_client"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api_clients.coap_client"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api_clients.mqttsn_client"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api_clients.stomp_client"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get client info",
        "tags": [
          "Gateway Clients"
        ]
      }
    },
    "/publish/bulk": {
      "post": {
        "description": "批量发布一组消息。<br/><br/>可能的 HTTP 状态码如下：<br/><br/>200: 所有的消息都被成功发送到至少一个订阅。<br/><br/>202: 至少有一个消息没有匹配到任何订阅。<br/><br/>400: 至少有一个消息编码错误，如非法主题，或 QoS 超出范围等。<br/><br/>503: 至少有一个小因为服务重启的原因导致转发失败。<br/><br/><br/>请求的 Body 或者 Body 中包含的某个消息无法通过 API 规范的类型检查时，HTTP 响应的消息与发布单个消息的 API<br/> <code>/publish</code> 是一样的。<br/>如果所有的消息都是合法的，那么 HTTP 返回的内容是一个 JSON 数组，每个元素代表了该消息转发的状态。",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_message"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_ok"
                  },
                  "type": "array"
                }
              }
            }
          },
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                      },
                      "type": "array"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_mgmt_api_publish.bad_request"
                    }
                  ]
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Publish a batch of messages",
        "tags": [
          "Publish"
        ]
      }
    },
    "/nodes/{node}/bridges/{id}/{operation}": {
      "post": {
        "description": "在某个节点上停止/重新启动 Bridge。",
        "parameters": [
          {
            "description": "节点名，比如 emqx@127.0.0.1",
            "example": "emqx@127.0.0.1",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Bridge ID ， 格式为 {type}:{name}",
            "example": "webhook:webhook_example",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "节点可用操作：停止、重新启动",
            "example": "start",
            "in": "path",
            "name": "operation",
            "required": true,
            "schema": {
              "enum": [
                "start",
                "stop",
                "restart"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Problem with configuration of external service or bridge not enabled",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bridge or node not found or invalid operation",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Implemented",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Service unavailable",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Stop/restart bridge",
        "tags": [
          "Bridges"
        ]
      }
    },
    "/rule_test": {
      "post": {
        "description": "测试一个规则",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_rule_api_schema.rule_test"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rule Test Pass"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Invalid Parameters",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "412": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_MATCH"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "SQL Not Match",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Test a rule",
        "tags": [
          "Rules"
        ]
      }
    },
    "/authorization/sources/built_in_database/rules/clients/{clientid}": {
      "delete": {
        "description": "删除内置数据库中指定客户端的授权规则",
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.clientid"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad clientid",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "ClientID Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "get": {
        "description": "获取内置数据库中指定客户端的授权规则",
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.clientid"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "password_based:built_in_database": {
                    "summary": "ClientID",
                    "value": {
                      "clientid": "client1",
                      "rules": [
                        {
                          "action": "publish",
                          "permission": "allow",
                          "topic": "test/topic/1"
                        },
                        {
                          "action": "subscribe",
                          "permission": "allow",
                          "topic": "test/topic/2"
                        },
                        {
                          "action": "all",
                          "permission": "deny",
                          "topic": "eq test/#"
                        },
                        {
                          "action": "publish",
                          "permission": "allow",
                          "qos": [
                            "1"
                          ],
                          "retain": "true",
                          "topic": "test/topic/3"
                        },
                        {
                          "action": "publish",
                          "permission": "allow",
                          "qos": [
                            "0",
                            "1",
                            "2"
                          ],
                          "retain": "all",
                          "topic": "test/topic/4"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_clientid"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "put": {
        "description": "更新内置数据库中指定客户端的授权规则",
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.clientid"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "password_based:built_in_database": {
                  "summary": "ClientID",
                  "value": {
                    "clientid": "client1",
                    "rules": [
                      {
                        "action": "publish",
                        "permission": "allow",
                        "topic": "test/topic/1"
                      },
                      {
                        "action": "subscribe",
                        "permission": "allow",
                        "topic": "test/topic/2"
                      },
                      {
                        "action": "all",
                        "permission": "deny",
                        "topic": "eq test/#"
                      },
                      {
                        "action": "publish",
                        "permission": "allow",
                        "qos": [
                          "1"
                        ],
                        "retain": "true",
                        "topic": "test/topic/3"
                      },
                      {
                        "action": "publish",
                        "permission": "allow",
                        "qos": [
                          "0",
                          "1",
                          "2"
                        ],
                        "retain": "all",
                        "topic": "test/topic/4"
                      }
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_clientid"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad clientid or bad rule schema",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/configs/sysmon": {
      "get": {
        "description": "Get the sub-configurations under *sysmon*",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/broker.sysmon"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "config not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get the sub-configurations under *sysmon*",
        "tags": [
          "Configs"
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *sysmon*",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/broker.sysmon"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/broker.sysmon"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "UPDATE_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "UPDATE_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update the sub-configurations under *sysmon*",
        "tags": [
          "Configs"
        ]
      }
    },
    "/clients/{clientid}/authorization/cache": {
      "delete": {
        "description": "清除指定客户端的授权缓存",
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Clean client authz cache successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Client ID not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Clients"
        ]
      },
      "get": {
        "description": "获取指定客户端的授权缓存",
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.authz_cache"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Client ID not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Clients"
        ]
      }
    },
    "/cluster/{node}/force_leave": {
      "delete": {
        "description": "强制节点离开集群",
        "parameters": [
          {
            "$ref": "#/components/parameters/cluster.node"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/gateways/{name}/listeners/{id}": {
      "delete": {
        "description": "删除指定监听器。被删除的监听器下所有已连接的客户端都会离线。",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "监听器 ID",
            "example": "",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete listener",
        "tags": [
          "Gateway Listeners"
        ]
      },
      "get": {
        "description": "获取指定网关监听器的配置。",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "监听器 ID",
            "example": "",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "dtls_listener": {
                    "summary": "A simple DTLS listener example",
                    "value": {
                      "acceptors": 16,
                      "access_rules": [
                        "allow all"
                      ],
                      "bind": "22213",
                      "dtls_options": {
                        "cacertfile": "/etc/emqx/certs/cacert.pem",
                        "certfile": "/etc/emqx/certs/cert.pem",
                        "fail_if_no_peer_cert": false,
                        "keyfile": "/etc/emqx/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ]
                      },
                      "max_conn_rate": 1000,
                      "max_connections": 1024000,
                      "name": "dtls-def",
                      "type": "dtls",
                      "udp_options": {
                        "active_n": 100,
                        "backlog": 1024
                      }
                    }
                  },
                  "dtls_listener_with_psk_ciphers": {
                    "summary": "A DTLS listener with PSK example",
                    "value": {
                      "acceptors": 16,
                      "bind": "22214",
                      "dtls_options": {
                        "cacertfile": "/etc/emqx/certs/cacert.pem",
                        "certfile": "/etc/emqx/certs/cert.pem",
                        "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                        "fail_if_no_peer_cert": false,
                        "keyfile": "/etc/emqx/certs/key.pem",
                        "user_lookup_fun": "emqx_tls_psk:lookup",
                        "verify": "verify_none",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ]
                      },
                      "max_conn_rate": 1000,
                      "max_connections": 1024000,
                      "name": "dtls-psk",
                      "type": "dtls"
                    }
                  },
                  "lisetner_with_authn": {
                    "summary": "A TCP listener with authentication example",
                    "value": {
                      "acceptors": 16,
                      "authentication": {
                        "backend": "built_in_database",
                        "mechanism": "password_based",
                        "password_hash_algorithm": {
                          "name": "sha256"
                        },
                        "user_id_type": "username"
                      },
                      "bind": "22215",
                      "max_conn_rate": 1000,
                      "max_connections": 1024000,
                      "name": "tcp-with-authn",
                      "type": "tcp"
                    }
                  },
                  "ssl_listener": {
                    "summary": "A simple SSL listener example",
                    "value": {
                      "acceptors": 16,
                      "access_rules": [
                        "allow all"
                      ],
                      "bind": "22211",
                      "max_conn_rate": 1000,
                      "max_connections": 1024000,
                      "name": "ssl-def",
                      "ssl_options": {
                        "cacertfile": "/etc/emqx/certs/cacert.pem",
                        "certfile": "/etc/emqx/certs/cert.pem",
                        "fail_if_no_peer_cert": false,
                        "keyfile": "/etc/emqx/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2",
                          "tlsv1.1",
                          "tlsv1"
                        ]
                      },
                      "tcp_options": {
                        "active_n": 100,
                        "backlog": 1024
                      },
                      "type": "ssl"
                    }
                  },
                  "tcp_listener": {
                    "summary": "A simple TCP listener example",
                    "value": {
                      "acceptors": 16,
                      "bind": "22210",
                      "max_conn_rate": 1000,
                      "max_connections": 1024000,
                      "name": "tcp-def",
                      "tcp_options": {
                        "active_n": 100,
                        "backlog": 1024,
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB"
                      },
                      "type": "tcp"
                    }
                  },
                  "udp_listener": {
                    "summary": "A simple UDP listener example",
                    "value": {
                      "bind": "22212",
                      "name": "udp-def",
                      "type": "udp",
                      "udp_options": {
                        "active_n": 100,
                        "buffer": "10KB",
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "sndbuf": "10KB"
                      }
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get listener config",
        "tags": [
          "Gateway Listeners"
        ]
      },
      "put": {
        "description": "更新某网关监听器的配置。被更新的监听器会执行重启，所有已连接到该监听器上的客户端都会被断开。",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "监听器 ID",
            "example": "",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "dtls_listener": {
                  "summary": "A simple DTLS listener example",
                  "value": {
                    "acceptors": 16,
                    "access_rules": [
                      "allow all"
                    ],
                    "bind": "22213",
                    "dtls_options": {
                      "cacertfile": "/etc/emqx/certs/cacert.pem",
                      "certfile": "/etc/emqx/certs/cert.pem",
                      "fail_if_no_peer_cert": false,
                      "keyfile": "/etc/emqx/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ]
                    },
                    "max_conn_rate": 1000,
                    "max_connections": 1024000,
                    "name": "dtls-def",
                    "type": "dtls",
                    "udp_options": {
                      "active_n": 100,
                      "backlog": 1024
                    }
                  }
                },
                "dtls_listener_with_psk_ciphers": {
                  "summary": "A DTLS listener with PSK example",
                  "value": {
                    "acceptors": 16,
                    "bind": "22214",
                    "dtls_options": {
                      "cacertfile": "/etc/emqx/certs/cacert.pem",
                      "certfile": "/etc/emqx/certs/cert.pem",
                      "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                      "fail_if_no_peer_cert": false,
                      "keyfile": "/etc/emqx/certs/key.pem",
                      "user_lookup_fun": "emqx_tls_psk:lookup",
                      "verify": "verify_none",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ]
                    },
                    "max_conn_rate": 1000,
                    "max_connections": 1024000,
                    "name": "dtls-psk",
                    "type": "dtls"
                  }
                },
                "lisetner_with_authn": {
                  "summary": "A TCP listener with authentication example",
                  "value": {
                    "acceptors": 16,
                    "authentication": {
                      "backend": "built_in_database",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256"
                      },
                      "user_id_type": "username"
                    },
                    "bind": "22215",
                    "max_conn_rate": 1000,
                    "max_connections": 1024000,
                    "name": "tcp-with-authn",
                    "type": "tcp"
                  }
                },
                "ssl_listener": {
                  "summary": "A simple SSL listener example",
                  "value": {
                    "acceptors": 16,
                    "access_rules": [
                      "allow all"
                    ],
                    "bind": "22211",
                    "max_conn_rate": 1000,
                    "max_connections": 1024000,
                    "name": "ssl-def",
                    "ssl_options": {
                      "cacertfile": "/etc/emqx/certs/cacert.pem",
                      "certfile": "/etc/emqx/certs/cert.pem",
                      "fail_if_no_peer_cert": false,
                      "keyfile": "/etc/emqx/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2",
                        "tlsv1.1",
                        "tlsv1"
                      ]
                    },
                    "tcp_options": {
                      "active_n": 100,
                      "backlog": 1024
                    },
                    "type": "ssl"
                  }
                },
                "tcp_listener": {
                  "summary": "A simple TCP listener example",
                  "value": {
                    "acceptors": 16,
                    "bind": "22210",
                    "max_conn_rate": 1000,
                    "max_connections": 1024000,
                    "name": "tcp-def",
                    "tcp_options": {
                      "active_n": 100,
                      "backlog": 1024,
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB"
                    },
                    "type": "tcp"
                  }
                },
                "udp_listener": {
                  "summary": "A simple UDP listener example",
                  "value": {
                    "bind": "22212",
                    "name": "udp-def",
                    "type": "udp",
                    "udp_options": {
                      "active_n": 100,
                      "buffer": "10KB",
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "sndbuf": "10KB"
                    }
                  }
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "dtls_listener": {
                    "summary": "A simple DTLS listener example",
                    "value": {
                      "acceptors": 16,
                      "access_rules": [
                        "allow all"
                      ],
                      "bind": "22213",
                      "dtls_options": {
                        "cacertfile": "/etc/emqx/certs/cacert.pem",
                        "certfile": "/etc/emqx/certs/cert.pem",
                        "fail_if_no_peer_cert": false,
                        "keyfile": "/etc/emqx/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ]
                      },
                      "max_conn_rate": 1000,
                      "max_connections": 1024000,
                      "name": "dtls-def",
                      "type": "dtls",
                      "udp_options": {
                        "active_n": 100,
                        "backlog": 1024
                      }
                    }
                  },
                  "dtls_listener_with_psk_ciphers": {
                    "summary": "A DTLS listener with PSK example",
                    "value": {
                      "acceptors": 16,
                      "bind": "22214",
                      "dtls_options": {
                        "cacertfile": "/etc/emqx/certs/cacert.pem",
                        "certfile": "/etc/emqx/certs/cert.pem",
                        "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                        "fail_if_no_peer_cert": false,
                        "keyfile": "/etc/emqx/certs/key.pem",
                        "user_lookup_fun": "emqx_tls_psk:lookup",
                        "verify": "verify_none",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ]
                      },
                      "max_conn_rate": 1000,
                      "max_connections": 1024000,
                      "name": "dtls-psk",
                      "type": "dtls"
                    }
                  },
                  "lisetner_with_authn": {
                    "summary": "A TCP listener with authentication example",
                    "value": {
                      "acceptors": 16,
                      "authentication": {
                        "backend": "built_in_database",
                        "mechanism": "password_based",
                        "password_hash_algorithm": {
                          "name": "sha256"
                        },
                        "user_id_type": "username"
                      },
                      "bind": "22215",
                      "max_conn_rate": 1000,
                      "max_connections": 1024000,
                      "name": "tcp-with-authn",
                      "type": "tcp"
                    }
                  },
                  "ssl_listener": {
                    "summary": "A simple SSL listener example",
                    "value": {
                      "acceptors": 16,
                      "access_rules": [
                        "allow all"
                      ],
                      "bind": "22211",
                      "max_conn_rate": 1000,
                      "max_connections": 1024000,
                      "name": "ssl-def",
                      "ssl_options": {
                        "cacertfile": "/etc/emqx/certs/cacert.pem",
                        "certfile": "/etc/emqx/certs/cert.pem",
                        "fail_if_no_peer_cert": false,
                        "keyfile": "/etc/emqx/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2",
                          "tlsv1.1",
                          "tlsv1"
                        ]
                      },
                      "tcp_options": {
                        "active_n": 100,
                        "backlog": 1024
                      },
                      "type": "ssl"
                    }
                  },
                  "tcp_listener": {
                    "summary": "A simple TCP listener example",
                    "value": {
                      "acceptors": 16,
                      "bind": "22210",
                      "max_conn_rate": 1000,
                      "max_connections": 1024000,
                      "name": "tcp-def",
                      "tcp_options": {
                        "active_n": 100,
                        "backlog": 1024,
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB"
                      },
                      "type": "tcp"
                    }
                  },
                  "udp_listener": {
                    "summary": "A simple UDP listener example",
                    "value": {
                      "bind": "22212",
                      "name": "udp-def",
                      "type": "udp",
                      "udp_options": {
                        "active_n": 100,
                        "buffer": "10KB",
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "sndbuf": "10KB"
                      }
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update listener config",
        "tags": [
          "Gateway Listeners"
        ]
      }
    },
    "/gateways/{name}/enable/{enable}": {
      "put": {
        "description": "更新指定网关的基础配置、和启用的状态。<br/><br/>注：认证、和监听器的配置更新需参考对应的 API 接口。",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "是否开启此网关",
            "example": true,
            "in": "path",
            "name": "enable",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Gateway configuration updated"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Enable or disable gateway",
        "tags": [
          "Gateways"
        ]
      }
    },
    "/rules": {
      "get": {
        "description": "列出所有规则",
        "parameters": [
          {
            "description": "根据规则是否开启条件过滤",
            "in": "query",
            "name": "enable",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "根据规则来源 Topic 过滤, 需要完全匹配",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "根据规则 id 过滤, 使用子串模糊匹配",
            "in": "query",
            "name": "like_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "根据规则来源 Topic 过滤, 使用子串模糊匹配",
            "in": "query",
            "name": "like_from",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "根据规则描述过滤, 使用子串模糊匹配",
            "in": "query",
            "name": "like_description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "根据规则来源 Topic 过滤, 使用 MQTT Topic 匹配",
            "in": "query",
            "name": "match_from",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "规则列表",
                      "items": {
                        "$ref": "#/components/schemas/emqx_rule_api_schema.rule_info"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Invalid Parameters",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List rules",
        "tags": [
          "Rules"
        ]
      },
      "post": {
        "description": "通过指定 ID 创建规则",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_rule_api_schema.rule_creation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_rule_api_schema.rule_info"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Invalid Parameters",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create a rule",
        "tags": [
          "Rules"
        ]
      }
    },
    "/authentication/{id}/status": {
      "get": {
        "description": "获取全局认证链上指定认证器的指标与状态。",
        "parameters": [
          {
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "status_metrics": {
                    "summary": "Authn status metrics",
                    "value": {
                      "metrics": {
                        "failed": 0,
                        "nomatch": 0,
                        "rate": 0,
                        "rate_last5m": 0,
                        "rate_max": 0,
                        "success": 0,
                        "total": 0
                      },
                      "node_error": [],
                      "node_metrics": [
                        {
                          "metrics": {
                            "failed": 0,
                            "matched": 0,
                            "nomatch": 0,
                            "rate": 0,
                            "rate_last5m": 0,
                            "rate_max": 0,
                            "total": 0
                          },
                          "node": "emqx@127.0.0.1"
                        }
                      ],
                      "node_resource_metrics": [
                        {
                          "metrics": {
                            "failed": 0,
                            "matched": 0,
                            "rate": 0,
                            "rate_last5m": 0,
                            "rate_max": 0,
                            "success": 0
                          },
                          "node": "emqx@127.0.0.1"
                        }
                      ],
                      "node_status": [
                        {
                          "node": "emqx@127.0.0.1",
                          "status": "connected"
                        }
                      ],
                      "resource_metrics": {
                        "failed": 0,
                        "matched": 0,
                        "rate": 0,
                        "rate_last5m": 0,
                        "rate_max": 0,
                        "success": 0
                      },
                      "status": "connected"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_schema.metrics_status_fields"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "INTERNAL_ERROR"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Internal Service Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/mqtt/topic_rewrite": {
      "get": {
        "description": "列出全部主题重写规则",
        "parameters": [],
        "responses": {
          "200": {
            "description": "列出全部主题重写规则",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/modules.rewrite"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MQTT"
        ]
      },
      "put": {
        "description": "更新全部主题重写规则",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/modules.rewrite"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "更新全部主题重写规则",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/modules.rewrite"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "EXCEED_LIMIT"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "超出主题重写规则数量上限",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MQTT"
        ]
      }
    },
    "/gateways": {
      "get": {
        "description": "该接口会返回指定或所有网关的概览状态，<br/>包括当前状态、连接数、监听器状态等。",
        "parameters": [
          {
            "description": "通过网关状态筛选<br/><br/>可选值为 `running`、`stopped`、`unloaded`",
            "example": "running",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "running",
                "stopped",
                "unloaded"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "name": "coap",
                    "status": "unloaded"
                  },
                  {
                    "name": "exproto",
                    "status": "unloaded"
                  },
                  {
                    "created_at": "2021-12-08T14:41:26.171+08:00",
                    "current_connections": 0,
                    "listeners": [
                      {
                        "id": "lwm2m:udp:default",
                        "name": "default",
                        "running": true,
                        "type": "udp"
                      }
                    ],
                    "max_connections": 1024000,
                    "name": "lwm2m",
                    "node_status": [
                      {
                        "current_connections": 0,
                        "max_connections": 1024000,
                        "node": "node@127.0.0.1",
                        "status": "running"
                      }
                    ],
                    "started_at": "2021-12-08T14:41:26.202+08:00",
                    "status": "running"
                  },
                  {
                    "created_at": "2021-12-08T14:41:45.071+08:00",
                    "current_connections": 0,
                    "listeners": [
                      {
                        "id": "mqttsn:udp:default",
                        "name": "default",
                        "running": false,
                        "type": "udp"
                      }
                    ],
                    "max_connections": 1024000,
                    "name": "mqttsn",
                    "node_status": [
                      {
                        "current_connections": 0,
                        "max_connections": 1024000,
                        "node": "node@127.0.0.1",
                        "status": "running"
                      }
                    ],
                    "status": "stopped",
                    "stopped_at": "2021-12-08T14:56:35.576+08:00"
                  },
                  {
                    "created_at": "2021-12-08T14:42:15.272+08:00",
                    "current_connections": 0,
                    "listeners": [
                      {
                        "id": "stomp:tcp:default",
                        "name": "default",
                        "running": true,
                        "type": "tcp"
                      }
                    ],
                    "max_connections": 1024000,
                    "name": "stomp",
                    "node_status": [
                      {
                        "current_connections": 0,
                        "max_connections": 1024000,
                        "node": "node@127.0.0.1",
                        "status": "running"
                      }
                    ],
                    "started_at": "2021-12-08T14:42:15.274+08:00",
                    "status": "running"
                  }
                ],
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/emqx_gateway_api.gateway_overview"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all gateways",
        "tags": [
          "Gateways"
        ]
      }
    },
    "/mqtt/topic_metrics/{topic}": {
      "delete": {
        "description": "删除主题监控数据",
        "parameters": [
          {
            "description": "主题字符串。注意：主题字符串在url路径中必须编码",
            "example": "testtopic/1",
            "in": "path",
            "name": "topic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "删除主题监控数据"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "TOPIC_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "未找到。主题监控数据未找到",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MQTT"
        ]
      },
      "get": {
        "description": "获取主题监控数据",
        "parameters": [
          {
            "description": "主题字符串。注意：主题字符串在url路径中必须编码",
            "example": "testtopic/1",
            "in": "path",
            "name": "topic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "主题",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_topic_metrics_api.topic_metrics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "TOPIC_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "未找到。主题监控数据未找到",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MQTT"
        ]
      }
    },
    "/bridges_probe": {
      "post": {
        "description": "通过给定的 ID 测试创建一个新的桥接。 </br><br/>ID 的格式必须为 ’{type}:{name}”",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "mqtt_example": {
                  "summary": "MQTT Bridge",
                  "value": {
                    "clean_start": true,
                    "egress": {
                      "local": {
                        "topic": "emqx/#"
                      },
                      "remote": {
                        "payload": "${payload}",
                        "qos": "${qos}",
                        "retain": false,
                        "topic": "from_emqx/${topic}"
                      }
                    },
                    "enable": true,
                    "ingress": {
                      "local": {
                        "payload": "${payload}",
                        "qos": "${qos}",
                        "retain": "${retain}",
                        "topic": "from_aws/${topic}"
                      },
                      "remote": {
                        "qos": 1,
                        "topic": "aws/#"
                      }
                    },
                    "keepalive": "300s",
                    "max_inflight": 100,
                    "name": "mqtt_example",
                    "password": "******",
                    "proto_ver": "v4",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "max_buffer_bytes": 104857600,
                      "query_mode": "sync"
                    },
                    "retry_interval": "15s",
                    "server": "127.0.0.1:1883",
                    "ssl": {
                      "enable": false
                    },
                    "type": "mqtt",
                    "username": "foo"
                  }
                },
                "webhook_example": {
                  "summary": "WebHook",
                  "value": {
                    "body": "${payload}",
                    "connect_timeout": "15s",
                    "enable": true,
                    "enable_pipelining": 100,
                    "local_topic": "emqx_webhook/#",
                    "max_retries": 3,
                    "method": "post",
                    "name": "webhook_example",
                    "pool_size": 4,
                    "pool_type": "random",
                    "request_timeout": "15s",
                    "resource_opts": {
                      "health_check_interval": 15000,
                      "inflight_window": 100,
                      "max_buffer_bytes": 104857600,
                      "query_mode": "async",
                      "worker_pool_size": 1
                    },
                    "ssl": {
                      "enable": false
                    },
                    "type": "webhook",
                    "url": "http://localhost:9901/messages/${topic}"
                  }
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_webhook.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt.post"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Test bridge OK"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "TEST_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "bridge test failed",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Test creating bridge",
        "tags": [
          "Bridges"
        ]
      }
    },
    "/monitor/nodes/{node}": {
      "get": {
        "description": "列出指定节点的监控数据",
        "parameters": [
          {
            "description": "EMQX node name.",
            "example": "emqx@127.0.0.1",
            "in": "path",
            "name": "node",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The latest N seconds data. Like 300 for 5 min.",
            "example": 300,
            "in": "query",
            "name": "latest",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/emqx_dashboard_monitor_api.sampler"
                  },
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Node not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Metrics"
        ]
      }
    },
    "/prometheus/stats": {
      "get": {
        "description": "Get Prometheus Data",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Get Prometheus Data. Note that support for JSON output is deprecated and will be removed in v5.2."
          }
        },
        "security": [],
        "tags": [
          "Monitor"
        ]
      }
    },
    "/trace/{name}/log_detail": {
      "get": {
        "description": "获取 trace 日志文件的元数据, 例如文件大小和修改时间",
        "parameters": [
          {
            "$ref": "#/components/parameters/trace.name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/trace.log_file_detail"
                  },
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Trace Name Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Trace"
        ]
      }
    },
    "/authentication/{id}": {
      "delete": {
        "description": "删除全局认证链上的指定认证器。",
        "parameters": [
          {
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Authenticator deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authentication"
        ]
      },
      "get": {
        "description": "获取全局认证链上的指定认证器。emqx_dashboard_error_code_apiemqx_dashboard_error_code_api",
        "parameters": [
          {
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "summary": "JWT authentication",
                    "value": {
                      "algorithm": "hmac-based",
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    }
                  },
                  "password_based:built_in_database": {
                    "summary": "Built-in password_based authentication",
                    "value": {
                      "backend": "built_in_database",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    }
                  },
                  "password_based:http": {
                    "summary": "password_based authentication through external HTTP API",
                    "value": {
                      "backend": "http",
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "connect_timeout": "5s",
                      "enable_pipelining": 100,
                      "headers": {
                        "content-type": "application/json"
                      },
                      "mechanism": "password_based",
                      "method": "post",
                      "pool_size": 8,
                      "request_timeout": "5s",
                      "ssl": {
                        "enable": false
                      },
                      "url": "http://127.0.0.1:18083"
                    }
                  },
                  "password_based:mongodb": {
                    "summary": "password_based authentication with MongoDB backend",
                    "value": {
                      "backend": "mongodb",
                      "collection": "users",
                      "database": "example",
                      "filter": {
                        "username": "${username}"
                      },
                      "is_superuser_field": "is_superuser",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "password_hash_field": "password_hash",
                      "salt_field": "salt",
                      "server": "127.0.0.1:27017"
                    }
                  },
                  "password_based:redis": {
                    "summary": "password_based authentication with Redis backend",
                    "value": {
                      "backend": "redis",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single",
                      "server": "127.0.0.1:6379"
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.scram"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authentication"
        ]
      },
      "put": {
        "description": "更新全局认证链上的指定认证器。",
        "parameters": [
          {
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "summary": "JWT authentication",
                  "value": {
                    "algorithm": "hmac-based",
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  }
                },
                "password_based:built_in_database": {
                  "summary": "Built-in password_based authentication",
                  "value": {
                    "backend": "built_in_database",
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  }
                },
                "password_based:http": {
                  "summary": "password_based authentication through external HTTP API",
                  "value": {
                    "backend": "http",
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "connect_timeout": "5s",
                    "enable_pipelining": 100,
                    "headers": {
                      "content-type": "application/json"
                    },
                    "mechanism": "password_based",
                    "method": "post",
                    "pool_size": 8,
                    "request_timeout": "5s",
                    "ssl": {
                      "enable": false
                    },
                    "url": "http://127.0.0.1:18083"
                  }
                },
                "password_based:mongodb": {
                  "summary": "password_based authentication with MongoDB backend",
                  "value": {
                    "backend": "mongodb",
                    "collection": "users",
                    "database": "example",
                    "filter": {
                      "username": "${username}"
                    },
                    "is_superuser_field": "is_superuser",
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "password_hash_field": "password_hash",
                    "salt_field": "salt",
                    "server": "127.0.0.1:27017"
                  }
                },
                "password_based:redis": {
                  "summary": "password_based authentication with Redis backend",
                  "value": {
                    "backend": "redis",
                    "cmd": "HMGET ${username} password_hash salt",
                    "database": 0,
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single",
                    "server": "127.0.0.1:6379"
                  }
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.scram"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Authenticator updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "ALREADY_EXISTS"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "ALREADY_EXISTS",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/publish": {
      "post": {
        "description": "发布一个消息。<br/><br/>可能的 HTTP 状态码如下：<br/><br/>200: 消息被成功发送到至少一个订阅。<br/><br/>202: 没有匹配到任何订阅。<br/><br/>400: 消息编码错误，如非法主题，或 QoS 超出范围等。<br/><br/>503: 服务重启等过程中导致转发失败。",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_message"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_ok"
                }
              }
            }
          },
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                      },
                      "type": "array"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_mgmt_api_publish.bad_request"
                    }
                  ]
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Publish a message",
        "tags": [
          "Publish"
        ]
      }
    },
    "/nodes/{node}/metrics": {
      "get": {
        "description": "获取节节点上的运行计数信息，例如消息发送数量，收到或发送字节数，认证和授权成功失败次数等。",
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_mgmt_api_nodes.node_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Get node metrics successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_metrics.node_metrics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Node not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Nodes"
        ]
      }
    },
    "/configs/global_zone": {
      "get": {
        "description": "获取全局默认 zone 的配置",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "mqtt": {
                      "$ref": "#/components/schemas/broker.mqtt"
                    },
                    "flapping_detect": {
                      "$ref": "#/components/schemas/broker.flapping_detect"
                    },
                    "force_shutdown": {
                      "$ref": "#/components/schemas/broker.force_shutdown"
                    },
                    "force_gc": {
                      "$ref": "#/components/schemas/broker.force_gc"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Configs"
        ]
      },
      "put": {
        "description": "更新全局默认 zone 的配置",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "mqtt": {
                    "$ref": "#/components/schemas/broker.mqtt"
                  },
                  "flapping_detect": {
                    "$ref": "#/components/schemas/broker.flapping_detect"
                  },
                  "force_shutdown": {
                    "$ref": "#/components/schemas/broker.force_shutdown"
                  },
                  "force_gc": {
                    "$ref": "#/components/schemas/broker.force_gc"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "mqtt": {
                      "$ref": "#/components/schemas/broker.mqtt"
                    },
                    "flapping_detect": {
                      "$ref": "#/components/schemas/broker.flapping_detect"
                    },
                    "force_shutdown": {
                      "$ref": "#/components/schemas/broker.force_shutdown"
                    },
                    "force_gc": {
                      "$ref": "#/components/schemas/broker.force_gc"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "UPDATE_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "UPDATE_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Configs"
        ]
      }
    },
    "/bridges/{id}/enable/{enable}": {
      "put": {
        "description": "启用或禁用所有节点上的桥接",
        "parameters": [
          {
            "description": "Bridge ID ， 格式为 {type}:{name}",
            "example": "webhook:webhook_example",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "是否启用桥接",
            "example": true,
            "in": "path",
            "name": "enable",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bridge not found or invalid operation",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Service unavailable",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Enable or disable bridge",
        "tags": [
          "Bridges"
        ]
      }
    },
    "/bridges/{id}/metrics": {
      "get": {
        "description": "通过 Id 来获取桥接的指标信息",
        "parameters": [
          {
            "description": "Bridge ID ， 格式为 {type}:{name}",
            "example": "webhook:webhook_example",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "metrics": {
                      "description": "Bridge 计数",
                      "$ref": "#/components/schemas/bridge.metrics"
                    },
                    "node_metrics": {
                      "description": "节点的计数器",
                      "items": {
                        "$ref": "#/components/schemas/bridge.node_metrics"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bridge not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get bridge metrics",
        "tags": [
          "Bridges"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "Dashboard 用户列表",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Dashboard 用户列表",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/dashboard.user"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Dashboard"
        ]
      },
      "post": {
        "description": "创建 Dashboard 用户",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "description": "Dashboard 用户名",
                    "example": "admin",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "password": {
                    "description": "Dashboard 密码",
                    "example": "public",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "description": {
                    "description": "Dashboard 用户描述",
                    "example": "administrator",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "username": {
                      "description": "Dashboard 用户名",
                      "example": "admin",
                      "maxLength": 100,
                      "type": "string"
                    },
                    "description": {
                      "description": "Dashboard 用户描述",
                      "example": "administrator",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/authorization/sources/{type}/status": {
      "get": {
        "description": "获取指定授权数据源的状态",
        "parameters": [
          {
            "description": "数据源类型",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "http",
                "mongodb",
                "redis",
                "built_in_database",
                "mysql",
                "postgresql",
                "file"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "metrics_example": {
                    "summary": "Showing a typical metrics example",
                    "value": {
                      "metrics": {
                        "allow": 0,
                        "deny": 0,
                        "nomatch": 0,
                        "rate": 0,
                        "rate_last5m": 0,
                        "rate_max": 0,
                        "total": 0
                      },
                      "node_metrics": [
                        {
                          "metrics": {
                            "allow": 0,
                            "deny": 0,
                            "nomatch": 0,
                            "rate": 0,
                            "rate_last5m": 0,
                            "rate_max": 0,
                            "total": 0
                          },
                          "node": "emqx@127.0.0.1"
                        }
                      ],
                      "node_resource_metrics": [
                        {
                          "metrics": {
                            "failed": 0,
                            "matched": 0,
                            "rate": 0,
                            "rate_last5m": 0,
                            "rate_max": 0,
                            "success": 0
                          },
                          "node": "emqx@127.0.0.1"
                        }
                      ],
                      "node_status": [
                        {
                          "node": "emqx@127.0.0.1",
                          "status": "connected"
                        }
                      ],
                      "resource_metrics": {
                        "failed": 0,
                        "matched": 0,
                        "rate": 0,
                        "rate_last5m": 0,
                        "rate_max": 0,
                        "success": 0
                      },
                      "status": "connected"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/authz.metrics_status_fields"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/listeners": {
      "get": {
        "description": "列出所有节点上的指定类型的监听器",
        "parameters": [
          {
            "description": "Listener type",
            "example": "tcp",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "tcp",
                "ssl",
                "ws",
                "wss",
                "quic"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "acceptors": 16,
                    "bind": "0.0.0.0:1884",
                    "enable": true,
                    "id": "tcp:demo",
                    "name": "demo",
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "current_connections": 100,
                          "max_connections": 1024000,
                          "running": true
                        }
                      },
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "current_connections": 101,
                          "max_connections": 1024000,
                          "running": true
                        }
                      }
                    ],
                    "number": 2,
                    "status": {
                      "current_connections": 201,
                      "max_connections": 2048000,
                      "running": true
                    },
                    "type": "tcp"
                  },
                  {
                    "acceptors": 32,
                    "bind": "0.0.0.0:1883",
                    "enable": true,
                    "id": "tcp:default",
                    "name": "default",
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "current_connections": 200,
                          "max_connections": "infinity",
                          "running": true
                        }
                      },
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "current_connections": 301,
                          "max_connections": "infinity",
                          "running": true
                        }
                      }
                    ],
                    "number": 2,
                    "status": {
                      "current_connections": 501,
                      "max_connections": "infinity",
                      "running": true
                    },
                    "type": "tcp"
                  }
                ],
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/listeners.listener_id_status"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Listeners"
        ]
      },
      "post": {
        "description": "在所有节点上创建指定的监听器",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "acceptors": 16,
                "access_rules": [
                  "allow all"
                ],
                "bind": "0.0.0.0:1884",
                "current_connections": 10240,
                "max_connections": 204800,
                "mountpoint": "/",
                "name": "demo",
                "proxy_protocol": false,
                "proxy_protocol_timeout": "3s",
                "running": true,
                "tcp_options": {
                  "active_n": 100,
                  "backlog": 1024,
                  "buffer": "4KB",
                  "high_watermark": "1MB",
                  "nodelay": false,
                  "reuseaddr": true,
                  "send_timeout": "15s",
                  "send_timeout_close": true
                },
                "type": "tcp"
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/listeners.quic_required_bind-with_name"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.wss_required_bind-with_name"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.ws_required_bind-with_name"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.ssl_required_bind-with_name"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.tcp_required_bind-with_name"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "acceptors": 16,
                  "access_rules": [
                    "allow all"
                  ],
                  "bind": "0.0.0.0:1884",
                  "current_connections": 10240,
                  "id": "tcp:demo",
                  "max_connections": 204800,
                  "mountpoint": "/",
                  "proxy_protocol": false,
                  "proxy_protocol_timeout": "3s",
                  "running": true,
                  "tcp_options": {
                    "active_n": 100,
                    "backlog": 1024,
                    "buffer": "4KB",
                    "high_watermark": "1MB",
                    "nodelay": false,
                    "reuseaddr": true,
                    "send_timeout": "15s",
                    "send_timeout_close": true
                  },
                  "type": "tcp"
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/listeners.wss_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ws_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.tcp_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ssl_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.quic_required_bind"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_LISTENER_ID",
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Listeners"
        ]
      }
    },
    "/trace/{name}/download": {
      "get": {
        "description": "下载指定 trace 的日志文件",
        "parameters": [
          {
            "$ref": "#/components/parameters/trace.name"
          },
          {
            "$ref": "#/components/parameters/trace.node"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "A trace zip file"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "NODE_ERROR"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Trace Name or Node Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Trace"
        ]
      }
    },
    "/clients/{clientid}": {
      "delete": {
        "description": "踢出指定客户端",
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Kick out client successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Client ID not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Clients"
        ]
      },
      "get": {
        "description": "获取指定客户端的详细信息",
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.client"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Client ID not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Clients"
        ]
      }
    },
    "/gateways/{name}/authentication": {
      "delete": {
        "description": "删除指定网关的认证器。",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete gateway authenticator",
        "tags": [
          "Gateway Authentication"
        ]
      },
      "get": {
        "description": "获取指定网关认证器的配置<br/>当网关或认证未启用时，返回 404。",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "summary": "JWT authentication",
                    "value": {
                      "algorithm": "hmac-based",
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    }
                  },
                  "password_based:built_in_database": {
                    "summary": "Built-in password_based authentication",
                    "value": {
                      "backend": "built_in_database",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    }
                  },
                  "password_based:http": {
                    "summary": "password_based authentication through external HTTP API",
                    "value": {
                      "backend": "http",
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "connect_timeout": "5s",
                      "enable_pipelining": 100,
                      "headers": {
                        "content-type": "application/json"
                      },
                      "mechanism": "password_based",
                      "method": "post",
                      "pool_size": 8,
                      "request_timeout": "5s",
                      "ssl": {
                        "enable": false
                      },
                      "url": "http://127.0.0.1:18083"
                    }
                  },
                  "password_based:mongodb": {
                    "summary": "password_based authentication with MongoDB backend",
                    "value": {
                      "backend": "mongodb",
                      "collection": "users",
                      "database": "example",
                      "filter": {
                        "username": "${username}"
                      },
                      "is_superuser_field": "is_superuser",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "password_hash_field": "password_hash",
                      "salt_field": "salt",
                      "server": "127.0.0.1:27017"
                    }
                  },
                  "password_based:redis": {
                    "summary": "password_based authentication with Redis backend",
                    "value": {
                      "backend": "redis",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single",
                      "server": "127.0.0.1:6379"
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Authenticator not initialized"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get authenticator configuration",
        "tags": [
          "Gateway Authentication"
        ]
      },
      "post": {
        "description": "为指定网关开启认证器实现客户端认证的功能。<br/><br/>当未配置认证器或关闭认证器时，则认为允许所有客户端的连接。<br/><br/>注：在网关中仅支持添加一个认证器，而不是像 MQTT 一样允许配置多个认证器构成认证链。",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "summary": "JWT authentication",
                  "value": {
                    "algorithm": "hmac-based",
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  }
                },
                "password_based:built_in_database": {
                  "summary": "Built-in password_based authentication",
                  "value": {
                    "backend": "built_in_database",
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  }
                },
                "password_based:http": {
                  "summary": "password_based authentication through external HTTP API",
                  "value": {
                    "backend": "http",
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "connect_timeout": "5s",
                    "enable_pipelining": 100,
                    "headers": {
                      "content-type": "application/json"
                    },
                    "mechanism": "password_based",
                    "method": "post",
                    "pool_size": 8,
                    "request_timeout": "5s",
                    "ssl": {
                      "enable": false
                    },
                    "url": "http://127.0.0.1:18083"
                  }
                },
                "password_based:mongodb": {
                  "summary": "password_based authentication with MongoDB backend",
                  "value": {
                    "backend": "mongodb",
                    "collection": "users",
                    "database": "example",
                    "filter": {
                      "username": "${username}"
                    },
                    "is_superuser_field": "is_superuser",
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "password_hash_field": "password_hash",
                    "salt_field": "salt",
                    "server": "127.0.0.1:27017"
                  }
                },
                "password_based:redis": {
                  "summary": "password_based authentication with Redis backend",
                  "value": {
                    "backend": "redis",
                    "cmd": "HMGET ${username} password_hash salt",
                    "database": 0,
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single",
                    "server": "127.0.0.1:6379"
                  }
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "summary": "JWT authentication",
                    "value": {
                      "algorithm": "hmac-based",
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    }
                  },
                  "password_based:built_in_database": {
                    "summary": "Built-in password_based authentication",
                    "value": {
                      "backend": "built_in_database",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    }
                  },
                  "password_based:http": {
                    "summary": "password_based authentication through external HTTP API",
                    "value": {
                      "backend": "http",
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "connect_timeout": "5s",
                      "enable_pipelining": 100,
                      "headers": {
                        "content-type": "application/json"
                      },
                      "mechanism": "password_based",
                      "method": "post",
                      "pool_size": 8,
                      "request_timeout": "5s",
                      "ssl": {
                        "enable": false
                      },
                      "url": "http://127.0.0.1:18083"
                    }
                  },
                  "password_based:mongodb": {
                    "summary": "password_based authentication with MongoDB backend",
                    "value": {
                      "backend": "mongodb",
                      "collection": "users",
                      "database": "example",
                      "filter": {
                        "username": "${username}"
                      },
                      "is_superuser_field": "is_superuser",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "password_hash_field": "password_hash",
                      "salt_field": "salt",
                      "server": "127.0.0.1:27017"
                    }
                  },
                  "password_based:redis": {
                    "summary": "password_based authentication with Redis backend",
                    "value": {
                      "backend": "redis",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single",
                      "server": "127.0.0.1:6379"
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create authenticator for gateway",
        "tags": [
          "Gateway Authentication"
        ]
      },
      "put": {
        "description": "更新指定网关认证器的配置，或停用认证器。",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "summary": "JWT authentication",
                  "value": {
                    "algorithm": "hmac-based",
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  }
                },
                "password_based:built_in_database": {
                  "summary": "Built-in password_based authentication",
                  "value": {
                    "backend": "built_in_database",
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  }
                },
                "password_based:http": {
                  "summary": "password_based authentication through external HTTP API",
                  "value": {
                    "backend": "http",
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "connect_timeout": "5s",
                    "enable_pipelining": 100,
                    "headers": {
                      "content-type": "application/json"
                    },
                    "mechanism": "password_based",
                    "method": "post",
                    "pool_size": 8,
                    "request_timeout": "5s",
                    "ssl": {
                      "enable": false
                    },
                    "url": "http://127.0.0.1:18083"
                  }
                },
                "password_based:mongodb": {
                  "summary": "password_based authentication with MongoDB backend",
                  "value": {
                    "backend": "mongodb",
                    "collection": "users",
                    "database": "example",
                    "filter": {
                      "username": "${username}"
                    },
                    "is_superuser_field": "is_superuser",
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "password_hash_field": "password_hash",
                    "salt_field": "salt",
                    "server": "127.0.0.1:27017"
                  }
                },
                "password_based:redis": {
                  "summary": "password_based authentication with Redis backend",
                  "value": {
                    "backend": "redis",
                    "cmd": "HMGET ${username} password_hash salt",
                    "database": 0,
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single",
                    "server": "127.0.0.1:6379"
                  }
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "summary": "JWT authentication",
                    "value": {
                      "algorithm": "hmac-based",
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    }
                  },
                  "password_based:built_in_database": {
                    "summary": "Built-in password_based authentication",
                    "value": {
                      "backend": "built_in_database",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    }
                  },
                  "password_based:http": {
                    "summary": "password_based authentication through external HTTP API",
                    "value": {
                      "backend": "http",
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "connect_timeout": "5s",
                      "enable_pipelining": 100,
                      "headers": {
                        "content-type": "application/json"
                      },
                      "mechanism": "password_based",
                      "method": "post",
                      "pool_size": 8,
                      "request_timeout": "5s",
                      "ssl": {
                        "enable": false
                      },
                      "url": "http://127.0.0.1:18083"
                    }
                  },
                  "password_based:mongodb": {
                    "summary": "password_based authentication with MongoDB backend",
                    "value": {
                      "backend": "mongodb",
                      "collection": "users",
                      "database": "example",
                      "filter": {
                        "username": "${username}"
                      },
                      "is_superuser_field": "is_superuser",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "password_hash_field": "password_hash",
                      "salt_field": "salt",
                      "server": "127.0.0.1:27017"
                    }
                  },
                  "password_based:redis": {
                    "summary": "password_based authentication with Redis backend",
                    "value": {
                      "backend": "redis",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single",
                      "server": "127.0.0.1:6379"
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update authenticator configuration",
        "tags": [
          "Gateway Authentication"
        ]
      }
    },
    "/clients/{clientid}/unsubscribe/bulk": {
      "post": {
        "description": "批量取消订阅",
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.unsubscribe"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Unsubscribe OK"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Client ID not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Clients"
        ]
      }
    },
    "/clients/{clientid}/subscribe/bulk": {
      "post": {
        "description": "批量订阅",
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.subscribe"
                },
                "type": "array"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_subscriptions.subscription"
                  },
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Client ID not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Clients"
        ]
      }
    },
    "/configs/alarm": {
      "get": {
        "description": "Get the sub-configurations under *alarm*",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/broker.alarm"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "config not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get the sub-configurations under *alarm*",
        "tags": [
          "Configs"
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *alarm*",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/broker.alarm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/broker.alarm"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "UPDATE_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "UPDATE_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update the sub-configurations under *alarm*",
        "tags": [
          "Configs"
        ]
      }
    },
    "/nodes/{node}": {
      "get": {
        "description": "获取节点信息",
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_mgmt_api_nodes.node_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Get node info successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_nodes.node_info"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Node not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Nodes"
        ]
      }
    },
    "/gateways/coap/clients/{clientid}/request": {
      "post": {
        "description": "发送 CoAP 消息到指定客户端",
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "token": {
                    "description": "消息 Token, 可以为空",
                    "type": "string"
                  },
                  "method": {
                    "description": "请求 Method 类型",
                    "enum": [
                      "get",
                      "put",
                      "post",
                      "delete"
                    ],
                    "type": "string"
                  },
                  "timeout": {
                    "description": "请求超时时间",
                    "example": "32s",
                    "type": "string"
                  },
                  "content_type": {
                    "description": "Payload 类型",
                    "enum": [
                      "text/plain",
                      "application/json",
                      "application/octet-stream"
                    ],
                    "type": "string"
                  },
                  "payload": {
                    "description": "Payload 内容",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "description": "消息 ID",
                      "type": "integer"
                    },
                    "token": {
                      "description": "消息 Token, 可以为空",
                      "type": "string"
                    },
                    "method": {
                      "description": "应答码",
                      "type": "string"
                    },
                    "payload": {
                      "description": "Payload 内容",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "CLIENT_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Client not found error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "CLIENT_NOT_RESPONSE"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Waiting for client response timeout",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Send a Request to a Client",
        "tags": [
          "CoAP Gateways"
        ]
      }
    },
    "/listeners/{id}/stop": {
      "post": {
        "description": "在所有节点上停止指定ID的监听器",
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST",
                        "BAD_LISTENER_ID"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Listeners"
        ]
      }
    },
    "/topics": {
      "get": {
        "description": "列出主题",
        "parameters": [
          {
            "description": "Topic Name",
            "example": "",
            "in": "query",
            "name": "topic",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Node Name",
            "example": "emqx@127.0.0.1",
            "in": "query",
            "name": "node",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_topics.topic"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Topics"
        ]
      }
    },
    "/authorization/sources": {
      "get": {
        "description": "列出所有授权数据源。",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_sources.sources"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "post": {
        "description": "添加授权数据源",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.file"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.built_in_database"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.http_get"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Authorization source created successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/plugins": {
      "get": {
        "description": "Plugins are launched in top-down order.<br/>Use `POST /plugins/{name}/move` to change the boot order.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/plugins.plugin"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List all installed plugins",
        "tags": [
          "Plugins"
        ]
      }
    },
    "/login": {
      "post": {
        "description": "获取 Dashboard 认证 Token。",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "description": "Dashboard 用户名",
                    "example": "admin",
                    "maxLength": 100,
                    "type": "string"
                  },
                  "password": {
                    "description": "Dashboard 密码",
                    "example": "public",
                    "maxLength": 100,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "description": "Dashboard 认证 Token",
                      "type": "string"
                    },
                    "version": {
                      "description": "EMQX 版本",
                      "example": "5.0.0",
                      "type": "string"
                    },
                    "license": {
                      "properties": {
                        "edition": {
                          "description": "EMQX 许可类型。可为 opensource 或 enterprise",
                          "enum": [
                            "opensource",
                            "enterprise"
                          ],
                          "example": "opensource",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_USERNAME_OR_PWD"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "登录失败。用户名或密码错误",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [],
        "summary": "Dashboard authentication",
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/bridges/{id}": {
      "delete": {
        "description": "通过 ID 删除 Bridge",
        "parameters": [
          {
            "description": "Bridge ID ， 格式为 {type}:{name}",
            "example": "webhook:webhook_example",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Bridge deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Cannot delete bridge while active rules are defined for this bridge",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bridge not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Service unavailable",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete bridge",
        "tags": [
          "Bridges"
        ]
      },
      "get": {
        "description": "通过 ID 获取 Bridge",
        "parameters": [
          {
            "description": "Bridge ID ， 格式为 {type}:{name}",
            "example": "webhook:webhook_example",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "mqtt_example": {
                    "summary": "MQTT Bridge",
                    "value": {
                      "clean_start": true,
                      "egress": {
                        "local": {
                          "topic": "emqx/#"
                        },
                        "remote": {
                          "payload": "${payload}",
                          "qos": "${qos}",
                          "retain": false,
                          "topic": "from_emqx/${topic}"
                        }
                      },
                      "enable": true,
                      "ingress": {
                        "local": {
                          "payload": "${payload}",
                          "qos": "${qos}",
                          "retain": "${retain}",
                          "topic": "from_aws/${topic}"
                        },
                        "remote": {
                          "qos": 1,
                          "topic": "aws/#"
                        }
                      },
                      "keepalive": "300s",
                      "max_inflight": 100,
                      "name": "mqtt_example",
                      "password": "******",
                      "proto_ver": "v4",
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "max_buffer_bytes": 104857600,
                        "query_mode": "sync"
                      },
                      "retry_interval": "15s",
                      "server": "127.0.0.1:1883",
                      "ssl": {
                        "enable": false
                      },
                      "type": "mqtt",
                      "username": "foo"
                    }
                  },
                  "webhook_example": {
                    "summary": "WebHook",
                    "value": {
                      "body": "${payload}",
                      "connect_timeout": "15s",
                      "enable": true,
                      "enable_pipelining": 100,
                      "local_topic": "emqx_webhook/#",
                      "max_retries": 3,
                      "method": "post",
                      "name": "webhook_example",
                      "pool_size": 4,
                      "pool_type": "random",
                      "request_timeout": "15s",
                      "resource_opts": {
                        "health_check_interval": 15000,
                        "inflight_window": 100,
                        "max_buffer_bytes": 104857600,
                        "query_mode": "async",
                        "worker_pool_size": 1
                      },
                      "ssl": {
                        "enable": false
                      },
                      "type": "webhook",
                      "url": "http://localhost:9901/messages/${topic}"
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_webhook.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt.get"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bridge not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get bridge",
        "tags": [
          "Bridges"
        ]
      },
      "put": {
        "description": "通过 ID 更新 Bridge",
        "parameters": [
          {
            "description": "Bridge ID ， 格式为 {type}:{name}",
            "example": "webhook:webhook_example",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "mqtt_example": {
                  "summary": "MQTT Bridge",
                  "value": {
                    "clean_start": true,
                    "egress": {
                      "local": {
                        "topic": "emqx/#"
                      },
                      "remote": {
                        "payload": "${payload}",
                        "qos": "${qos}",
                        "retain": false,
                        "topic": "from_emqx/${topic}"
                      }
                    },
                    "enable": true,
                    "ingress": {
                      "local": {
                        "payload": "${payload}",
                        "qos": "${qos}",
                        "retain": "${retain}",
                        "topic": "from_aws/${topic}"
                      },
                      "remote": {
                        "qos": 1,
                        "topic": "aws/#"
                      }
                    },
                    "keepalive": "300s",
                    "max_inflight": 100,
                    "password": "******",
                    "proto_ver": "v4",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "max_buffer_bytes": 104857600,
                      "query_mode": "sync"
                    },
                    "retry_interval": "15s",
                    "server": "127.0.0.1:1883",
                    "ssl": {
                      "enable": false
                    },
                    "username": "foo"
                  }
                },
                "webhook_example": {
                  "summary": "WebHook",
                  "value": {
                    "body": "${payload}",
                    "connect_timeout": "15s",
                    "enable": true,
                    "enable_pipelining": 100,
                    "local_topic": "emqx_webhook/#",
                    "max_retries": 3,
                    "method": "post",
                    "pool_size": 4,
                    "pool_type": "random",
                    "request_timeout": "15s",
                    "resource_opts": {
                      "health_check_interval": 15000,
                      "inflight_window": 100,
                      "max_buffer_bytes": 104857600,
                      "query_mode": "async",
                      "worker_pool_size": 1
                    },
                    "ssl": {
                      "enable": false
                    },
                    "url": "http://localhost:9901/messages/${topic}"
                  }
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_webhook.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt.put"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "mqtt_example": {
                    "summary": "MQTT Bridge",
                    "value": {
                      "clean_start": true,
                      "egress": {
                        "local": {
                          "topic": "emqx/#"
                        },
                        "remote": {
                          "payload": "${payload}",
                          "qos": "${qos}",
                          "retain": false,
                          "topic": "from_emqx/${topic}"
                        }
                      },
                      "enable": true,
                      "ingress": {
                        "local": {
                          "payload": "${payload}",
                          "qos": "${qos}",
                          "retain": "${retain}",
                          "topic": "from_aws/${topic}"
                        },
                        "remote": {
                          "qos": 1,
                          "topic": "aws/#"
                        }
                      },
                      "keepalive": "300s",
                      "max_inflight": 100,
                      "name": "mqtt_example",
                      "password": "******",
                      "proto_ver": "v4",
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "max_buffer_bytes": 104857600,
                        "query_mode": "sync"
                      },
                      "retry_interval": "15s",
                      "server": "127.0.0.1:1883",
                      "ssl": {
                        "enable": false
                      },
                      "type": "mqtt",
                      "username": "foo"
                    }
                  },
                  "webhook_example": {
                    "summary": "WebHook",
                    "value": {
                      "body": "${payload}",
                      "connect_timeout": "15s",
                      "enable": true,
                      "enable_pipelining": 100,
                      "local_topic": "emqx_webhook/#",
                      "max_retries": 3,
                      "method": "post",
                      "name": "webhook_example",
                      "pool_size": 4,
                      "pool_type": "random",
                      "request_timeout": "15s",
                      "resource_opts": {
                        "health_check_interval": 15000,
                        "inflight_window": 100,
                        "max_buffer_bytes": 104857600,
                        "query_mode": "async",
                        "worker_pool_size": 1
                      },
                      "ssl": {
                        "enable": false
                      },
                      "type": "webhook",
                      "url": "http://localhost:9901/messages/${topic}"
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_webhook.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt.get"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Update bridge failed",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bridge not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update bridge",
        "tags": [
          "Bridges"
        ]
      }
    },
    "/configs/dashboard": {
      "get": {
        "description": "Get the sub-configurations under *dashboard*",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dashboard.dashboard"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "config not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get the sub-configurations under *dashboard*",
        "tags": [
          "Configs"
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *dashboard*",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dashboard.dashboard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dashboard.dashboard"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "UPDATE_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "UPDATE_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update the sub-configurations under *dashboard*",
        "tags": [
          "Configs"
        ]
      }
    },
    "/gateways/{name}/clients/{clientid}/subscriptions": {
      "get": {
        "description": "获取某客户端的主题订阅列表",
        "parameters": [
          {
            "description": "客户端 ID",
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "网关名称",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "general_subscription_list": {
                    "summary": "A general subscription list",
                    "value": [
                      {
                        "nl": 0,
                        "qos": 1,
                        "rap": 0,
                        "rh": 0,
                        "topic": "test/topic"
                      }
                    ]
                  },
                  "stomp_subscription_list": {
                    "summary": "The STOMP subscription list",
                    "value": [
                      "example_stomp_subscription"
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/emqx_gateway_api_clients.subscription"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List client's subscription",
        "tags": [
          "Gateway Clients"
        ]
      },
      "post": {
        "description": "为某客户端新增订阅关系",
        "parameters": [
          {
            "description": "客户端 ID",
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "网关名称",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "general_subscription": {
                  "summary": "A general subscription",
                  "value": {
                    "nl": 0,
                    "qos": 1,
                    "rap": 0,
                    "rh": 0,
                    "topic": "test/topic"
                  }
                },
                "stomp_subscription": {
                  "summary": "A STOMP subscription",
                  "value": {
                    "nl": 0,
                    "qos": 1,
                    "rap": 0,
                    "rh": 0,
                    "sub_props": {
                      "subid": "10"
                    },
                    "topic": "stomp/topic"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_gateway_api_clients.subscription"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "general_subscription": {
                    "summary": "A general subscription",
                    "value": {
                      "nl": 0,
                      "qos": 1,
                      "rap": 0,
                      "rh": 0,
                      "topic": "test/topic"
                    }
                  },
                  "stomp_subscription": {
                    "summary": "A STOMP subscription",
                    "value": {
                      "nl": 0,
                      "qos": 1,
                      "rap": 0,
                      "rh": 0,
                      "sub_props": {
                        "subid": "10"
                      },
                      "topic": "stomp/topic"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_gateway_api_clients.subscription"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add subscription for client",
        "tags": [
          "Gateway Clients"
        ]
      }
    },
    "/cluster/{node}/invite": {
      "put": {
        "description": "邀请节点加入集群",
        "parameters": [
          {
            "$ref": "#/components/parameters/cluster.node"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/cluster/topology": {
      "get": {
        "description": "Get RLOG cluster topology: connections between core and replicant nodes.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cluster topology",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/cluster.core_replicants"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/mqtt/retainer/messages": {
      "get": {
        "description": "查看保留消息列表",
        "parameters": [
          {
            "description": "Page number of the results to fetch.",
            "example": 1,
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Results per page(max 1000)",
            "example": 50,
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "description": "保留消息列表",
                      "items": {
                        "$ref": "#/components/schemas/retainer.message_summary"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "不支持的后端",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Retainer"
        ]
      }
    },
    "/plugins/{name}/move": {
      "post": {
        "description": "Setting the boot order of plugins.",
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "move_to_after": {
                  "summary": "move plugin after other plugins",
                  "value": {
                    "position": "after:emqx_plugin_demo-5.1-rc.2"
                  }
                },
                "move_to_before": {
                  "summary": "move plugin before other plugins",
                  "value": {
                    "position": "before:emqx_plugin_demo-5.1-rc.2"
                  }
                },
                "move_to_front": {
                  "summary": "move plugin on the front",
                  "value": {
                    "position": "front"
                  }
                },
                "move_to_rear": {
                  "summary": "move plugin on the rear",
                  "value": {
                    "position": "rear"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/plugins.position"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Move plugin within plugin hiearchy",
        "tags": [
          "Plugins"
        ]
      }
    },
    "/alarms": {
      "delete": {
        "description": "删除所有历史告警。",
        "parameters": [],
        "responses": {
          "204": {
            "description": "历史告警已成功清除。"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Alarms"
        ]
      },
      "get": {
        "description": "列出当前激活的告警或历史告警，由查询参数决定。",
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "description": "用于指定查询的告警类型，<br/>为 true 时返回当前激活的告警，为 false 时返回历史告警，默认为 false。",
            "in": "query",
            "name": "activated",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_alarms.alarm"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Alarms"
        ]
      }
    },
    "/authorization/sources/built_in_database/rules/users/{username}": {
      "delete": {
        "description": "删除内置数据库中指定用户名的授权规则",
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.username"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad username",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Username Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "get": {
        "description": "获取内置数据库中指定用户名授权规则",
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.username"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "password_based:built_in_database": {
                    "summary": "Username",
                    "value": {
                      "rules": [
                        {
                          "action": "publish",
                          "permission": "allow",
                          "topic": "test/topic/1"
                        },
                        {
                          "action": "subscribe",
                          "permission": "allow",
                          "topic": "test/topic/2"
                        },
                        {
                          "action": "all",
                          "permission": "deny",
                          "topic": "eq test/#"
                        },
                        {
                          "action": "publish",
                          "permission": "allow",
                          "qos": [
                            "1"
                          ],
                          "retain": "true",
                          "topic": "test/topic/3"
                        },
                        {
                          "action": "publish",
                          "permission": "allow",
                          "qos": [
                            "0",
                            "1",
                            "2"
                          ],
                          "retain": "all",
                          "topic": "test/topic/4"
                        }
                      ],
                      "username": "user1"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_username"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "put": {
        "description": "更新内置数据库中指定用户名的授权规则",
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.username"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "password_based:built_in_database": {
                  "summary": "Username",
                  "value": {
                    "rules": [
                      {
                        "action": "publish",
                        "permission": "allow",
                        "topic": "test/topic/1"
                      },
                      {
                        "action": "subscribe",
                        "permission": "allow",
                        "topic": "test/topic/2"
                      },
                      {
                        "action": "all",
                        "permission": "deny",
                        "topic": "eq test/#"
                      },
                      {
                        "action": "publish",
                        "permission": "allow",
                        "qos": [
                          "1"
                        ],
                        "retain": "true",
                        "topic": "test/topic/3"
                      },
                      {
                        "action": "publish",
                        "permission": "allow",
                        "qos": [
                          "0",
                          "1",
                          "2"
                        ],
                        "retain": "all",
                        "topic": "test/topic/4"
                      }
                    ],
                    "username": "user1"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_username"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad username or bad rule schema",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/subscriptions": {
      "get": {
        "description": "列出订阅",
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "description": "Node name",
            "example": "emqx@127.0.0.1",
            "in": "query",
            "name": "node",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Client ID",
            "in": "query",
            "name": "clientid",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "QoS",
            "in": "query",
            "name": "qos",
            "required": false,
            "schema": {
              "example": 0,
              "maximum": 2,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "Topic, url encoding",
            "in": "query",
            "name": "topic",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Match topic string, url encoding",
            "in": "query",
            "name": "match_topic",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Shared subscription group name",
            "in": "query",
            "name": "share_group",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_subscriptions.subscription"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "INVALID_PARAMETER"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Invalid parameter",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NODE_DOWN"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad RPC",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/error_codes": {
      "get": {
        "description": "API 错误码",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/dashboard.error_code"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [],
        "tags": [
          "Error Codes"
        ]
      }
    },
    "/authorization/sources/built_in_database/rules": {
      "delete": {
        "description": "清除内置数据库中的所有类型（'users' 、'clients' 、'all'）的所有规则",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/authorization/sources/{type}/move": {
      "post": {
        "description": "更新授权数据源的优先执行顺序",
        "parameters": [
          {
            "description": "数据源类型",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "http",
                "mongodb",
                "redis",
                "built_in_database",
                "mysql",
                "postgresql",
                "file"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "front": {
                  "summary": "front example",
                  "value": {
                    "position": "front"
                  }
                },
                "rear": {
                  "summary": "rear example",
                  "value": {
                    "position": "rear"
                  }
                },
                "relative_after": {
                  "summary": "relative example",
                  "value": {
                    "position": "after:file"
                  }
                },
                "relative_before": {
                  "summary": "relative example",
                  "value": {
                    "position": "before:file"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authz_api_schema.position"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/telemetry/data": {
      "get": {
        "description": "获取遥测数据",
        "parameters": [],
        "responses": {
          "200": {
            "description": "获取遥测数据",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_telemetry_api.telemetry"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Telemetry is not enabled",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Telemetry"
        ]
      }
    },
    "/gateways/{name}/listeners/{id}/authentication/users/{uid}": {
      "delete": {
        "description": "删除用户（仅支持 built_in_database 类型的认证器）",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "监听器 ID",
            "example": "",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "用户 ID",
            "example": "",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete user",
        "tags": [
          "Gateway Listeners"
        ]
      },
      "get": {
        "description": "获取用户信息（仅支持 built_in_database 类型的认证器）",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "监听器 ID",
            "example": "",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "用户 ID",
            "example": "",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "summary": "Regular user",
                    "value": {
                      "user_id": "user1"
                    }
                  },
                  "super_user": {
                    "summary": "Superuser",
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user info",
        "tags": [
          "Gateway Listeners"
        ]
      },
      "put": {
        "description": "更新用户信息（仅支持 built_in_database 类型的认证器）",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "监听器 ID",
            "example": "",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "用户 ID",
            "example": "",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "summary": "Update regular user",
                  "value": {
                    "password": "******"
                  }
                },
                "super_user": {
                  "summary": "Update user and promote to superuser",
                  "value": {
                    "is_superuser": true,
                    "password": "******"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "summary": "Regular user",
                    "value": {
                      "user_id": "user1"
                    }
                  },
                  "super_user": {
                    "summary": "Superuser",
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update user info",
        "tags": [
          "Gateway Listeners"
        ]
      }
    },
    "/authentication": {
      "get": {
        "description": "列出全局认证链上的认证器。",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "algorithm": "hmac-based",
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  },
                  {
                    "backend": "built_in_database",
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  },
                  {
                    "backend": "http",
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "connect_timeout": "5s",
                    "enable_pipelining": 100,
                    "headers": {
                      "content-type": "application/json"
                    },
                    "mechanism": "password_based",
                    "method": "post",
                    "pool_size": 8,
                    "request_timeout": "5s",
                    "ssl": {
                      "enable": false
                    },
                    "url": "http://127.0.0.1:18083"
                  },
                  {
                    "backend": "mongodb",
                    "collection": "users",
                    "database": "example",
                    "filter": {
                      "username": "${username}"
                    },
                    "is_superuser_field": "is_superuser",
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "password_hash_field": "password_hash",
                    "salt_field": "salt",
                    "server": "127.0.0.1:27017"
                  },
                  {
                    "backend": "redis",
                    "cmd": "HMGET ${username} password_hash salt",
                    "database": 0,
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single",
                    "server": "127.0.0.1:6379"
                  }
                ],
                "schema": {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/authn.scram"
                      },
                      {
                        "$ref": "#/components/schemas/authn.jwt_jwks"
                      },
                      {
                        "$ref": "#/components/schemas/authn.jwt_public_key"
                      },
                      {
                        "$ref": "#/components/schemas/authn.jwt_hmac"
                      },
                      {
                        "$ref": "#/components/schemas/authn.http_post"
                      },
                      {
                        "$ref": "#/components/schemas/authn.http_get"
                      },
                      {
                        "$ref": "#/components/schemas/authn.redis_sentinel"
                      },
                      {
                        "$ref": "#/components/schemas/authn.redis_cluster"
                      },
                      {
                        "$ref": "#/components/schemas/authn.redis_single"
                      },
                      {
                        "$ref": "#/components/schemas/authn.mongo_sharded"
                      },
                      {
                        "$ref": "#/components/schemas/authn.mongo_rs"
                      },
                      {
                        "$ref": "#/components/schemas/authn.mongo_single"
                      },
                      {
                        "$ref": "#/components/schemas/authn.postgresql"
                      },
                      {
                        "$ref": "#/components/schemas/authn.mysql"
                      },
                      {
                        "$ref": "#/components/schemas/authn.builtin_db"
                      }
                    ]
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authentication"
        ]
      },
      "post": {
        "description": "为全局认证链创建认证器。",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "summary": "JWT authentication",
                  "value": {
                    "algorithm": "hmac-based",
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  }
                },
                "password_based:built_in_database": {
                  "summary": "Built-in password_based authentication",
                  "value": {
                    "backend": "built_in_database",
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  }
                },
                "password_based:http": {
                  "summary": "password_based authentication through external HTTP API",
                  "value": {
                    "backend": "http",
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "connect_timeout": "5s",
                    "enable_pipelining": 100,
                    "headers": {
                      "content-type": "application/json"
                    },
                    "mechanism": "password_based",
                    "method": "post",
                    "pool_size": 8,
                    "request_timeout": "5s",
                    "ssl": {
                      "enable": false
                    },
                    "url": "http://127.0.0.1:18083"
                  }
                },
                "password_based:mongodb": {
                  "summary": "password_based authentication with MongoDB backend",
                  "value": {
                    "backend": "mongodb",
                    "collection": "users",
                    "database": "example",
                    "filter": {
                      "username": "${username}"
                    },
                    "is_superuser_field": "is_superuser",
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "password_hash_field": "password_hash",
                    "salt_field": "salt",
                    "server": "127.0.0.1:27017"
                  }
                },
                "password_based:redis": {
                  "summary": "password_based authentication with Redis backend",
                  "value": {
                    "backend": "redis",
                    "cmd": "HMGET ${username} password_hash salt",
                    "database": 0,
                    "mechanism": "password_based",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single",
                    "server": "127.0.0.1:6379"
                  }
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.scram"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "summary": "JWT authentication",
                    "value": {
                      "algorithm": "hmac-based",
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    }
                  },
                  "password_based:built_in_database": {
                    "summary": "Built-in password_based authentication",
                    "value": {
                      "backend": "built_in_database",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    }
                  },
                  "password_based:http": {
                    "summary": "password_based authentication through external HTTP API",
                    "value": {
                      "backend": "http",
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "connect_timeout": "5s",
                      "enable_pipelining": 100,
                      "headers": {
                        "content-type": "application/json"
                      },
                      "mechanism": "password_based",
                      "method": "post",
                      "pool_size": 8,
                      "request_timeout": "5s",
                      "ssl": {
                        "enable": false
                      },
                      "url": "http://127.0.0.1:18083"
                    }
                  },
                  "password_based:mongodb": {
                    "summary": "password_based authentication with MongoDB backend",
                    "value": {
                      "backend": "mongodb",
                      "collection": "users",
                      "database": "example",
                      "filter": {
                        "username": "${username}"
                      },
                      "is_superuser_field": "is_superuser",
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "password_hash_field": "password_hash",
                      "salt_field": "salt",
                      "server": "127.0.0.1:27017"
                    }
                  },
                  "password_based:redis": {
                    "summary": "password_based authentication with Redis backend",
                    "value": {
                      "backend": "redis",
                      "cmd": "HMGET ${username} password_hash salt",
                      "database": 0,
                      "mechanism": "password_based",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single",
                      "server": "127.0.0.1:6379"
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.scram"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "ALREADY_EXISTS"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "ALREADY_EXISTS",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/clients/{clientid}/subscribe": {
      "post": {
        "description": "订阅",
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_mgmt_api_clients.subscribe"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_subscriptions.subscription"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Client ID not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Clients"
        ]
      }
    },
    "/trace": {
      "delete": {
        "description": "清除所有 trace",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Trace"
        ]
      },
      "get": {
        "description": "列出所有 trace",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/trace.trace"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Trace"
        ]
      },
      "post": {
        "description": "创建 trace",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "type"
                ],
                "properties": {
                  "name": {
                    "description": "Unique name of the trace. Only ascii letters in a-z, A-Z, 0-9 and underscore '_' are allowed.",
                    "example": "EMQX-TRACE-1",
                    "type": "string"
                  },
                  "type": {
                    "description": "过滤器类型",
                    "enum": [
                      "clientid",
                      "topic",
                      "ip_address"
                    ],
                    "example": "clientid",
                    "type": "string"
                  },
                  "topic": {
                    "description": "如果过滤器类型为 'topic' 则该字段可以指定用于匹配的 MQTT 主题或主题过滤器。",
                    "example": "/dev/#",
                    "type": "string"
                  },
                  "clientid": {
                    "description": "如果过滤器类型为 'clientid' 则该字段可以指定用于匹配的 MQTT 客户端 ID。",
                    "example": "dev-001",
                    "type": "string"
                  },
                  "ip_address": {
                    "description": "如果过滤器类型为 'ip_address' 则该字段可以指定用于匹配的客户端 IP 地址。",
                    "example": "127.0.0.1",
                    "type": "string"
                  },
                  "payload_encode": {
                    "default": "text",
                    "description": "Determine the format of the payload format in the trace file.<br/><br/>`text`: Text-based protocol or plain text protocol.<br/> It is recommended when payload is JSON encoded.<br/><br/>`hex`: Binary hexadecimal encode.It is recommended when payload is a custom binary protocol.<br/><br/>`hidden`: payload is obfuscated as `******`",
                    "enum": [
                      "hex",
                      "text",
                      "hidden"
                    ],
                    "type": "string"
                  },
                  "start_at": {
                    "description": "时间戳格式，rfc3339 或者 epoch second",
                    "example": "2021-11-04T18:17:38+08:00",
                    "oneOf": [
                      {
                        "description": "epoch-second",
                        "example": 1640995200,
                        "type": "integer"
                      },
                      {
                        "example": "2022-01-01T00:00:00.000Z",
                        "format": "date-time",
                        "type": "string"
                      }
                    ]
                  },
                  "end_at": {
                    "description": "时间戳格式，rfc3339 或者 epoch second",
                    "example": "2021-11-05T18:17:38+08:00",
                    "oneOf": [
                      {
                        "description": "epoch-second",
                        "example": 1640995200,
                        "type": "integer"
                      },
                      {
                        "example": "2022-01-01T00:00:00.000Z",
                        "format": "date-time",
                        "type": "string"
                      }
                    ]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/trace.trace"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "INVALID_PARAMS"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "invalid trace params",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "ALREADY_EXISTS",
                        "DUPLICATE_CONDITION",
                        "BAD_TYPE"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "trace already exists",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Trace"
        ]
      }
    },
    "/exhooks/{name}/move": {
      "post": {
        "description": "移动 Exhook 服务器顺序。<br/>注意: 移动的参数只能是：front | rear | before:{name} | after:{name}",
        "parameters": [
          {
            "description": "Exhook 服务器的名称",
            "example": "default",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "front": {
                  "summary": "absolute position 'front'",
                  "value": {
                    "position": "front"
                  }
                },
                "rear": {
                  "summary": "absolute position 'rear'",
                  "value": {
                    "position": "rear"
                  }
                },
                "related_after": {
                  "summary": "relative position 'after'",
                  "value": {
                    "position": "after:default"
                  }
                },
                "related_before": {
                  "summary": "relative position 'before'",
                  "value": {
                    "position": "before:default"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/exhook.move_req"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_RPC"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad RPC",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "ExHook"
        ]
      }
    },
    "/slow_subscriptions/settings": {
      "get": {
        "description": "查看配置",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/slow_subs.slow_subs"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Slow Subscriptions"
        ]
      },
      "put": {
        "description": "更新配置",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/slow_subs.slow_subs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/slow_subs.slow_subs"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Slow Subscriptions"
        ]
      }
    },
    "/mqtt/topic_metrics": {
      "get": {
        "description": "获取主题监控数据",
        "parameters": [],
        "responses": {
          "200": {
            "description": "获取主题监控数据",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/emqx_topic_metrics_api.topic_metrics"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MQTT"
        ]
      },
      "post": {
        "description": "创建主题监控数据",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "topic"
                ],
                "properties": {
                  "topic": {
                    "description": "主题字符串",
                    "example": "testtopic/1",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "创建主题监控数据"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST",
                        "BAD_TOPIC"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "错误请求。已存在或错误的主题名称",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "EXCEED_LIMIT"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "冲突。主题监控数据超过最大限制512",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MQTT"
        ]
      },
      "put": {
        "description": "重置主题监控状态",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "reset_all_topic_metrics": {
                  "summary": "reset_all_topic_metrics",
                  "value": {
                    "action": "reset"
                  }
                },
                "reset_specific_one_topic_metrics": {
                  "summary": "reset_specific_one_topic_metrics",
                  "value": {
                    "action": "reset",
                    "topic": "testtopic/1"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_topic_metrics_api.reset"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "重置主题监控状态"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "TOPIC_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "未找到。主题监控数据未找到",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MQTT"
        ]
      }
    },
    "/error_codes/{code}": {
      "get": {
        "description": "API 错误码",
        "parameters": [
          {
            "description": "API Error Codes",
            "example": "BAD_USERNAME_OR_PWD",
            "in": "path",
            "name": "code",
            "required": true,
            "schema": {
              "enum": [
                "BAD_USERNAME_OR_PWD",
                "BAD_API_KEY_OR_SECRET",
                "BAD_REQUEST",
                "NOT_MATCH",
                "ALREADY_EXISTS",
                "BAD_CONFIG_SCHEMA",
                "BAD_LISTENER_ID",
                "BAD_NODE_NAME",
                "BAD_RPC",
                "BAD_TOPIC",
                "EXCEED_LIMIT",
                "INVALID_PARAMETER",
                "CONFLICT",
                "NO_DEFAULT_VALUE",
                "DEPENDENCY_EXISTS",
                "MESSAGE_ID_SCHEMA_ERROR",
                "INVALID_ID",
                "MESSAGE_ID_NOT_FOUND",
                "NOT_FOUND",
                "CLIENTID_NOT_FOUND",
                "CLIENT_NOT_FOUND",
                "RESOURCE_NOT_FOUND",
                "TOPIC_NOT_FOUND",
                "USER_NOT_FOUND",
                "INTERNAL_ERROR",
                "SERVICE_UNAVAILABLE",
                "SOURCE_ERROR",
                "UPDATE_FAILED",
                "REST_FAILED",
                "CLIENT_NOT_RESPONSE"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dashboard.error_code"
                }
              }
            }
          }
        },
        "security": [],
        "tags": [
          "Error Codes"
        ]
      }
    },
    "/bridges/{id}/{operation}": {
      "post": {
        "description": "停止或启用所有节点上的桥接",
        "parameters": [
          {
            "description": "Bridge ID ， 格式为 {type}:{name}",
            "example": "webhook:webhook_example",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "集群可用操作：停止、重新启动",
            "example": "start",
            "in": "path",
            "name": "operation",
            "required": true,
            "schema": {
              "enum": [
                "start",
                "stop",
                "restart"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Problem with configuration of external service",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bridge not found or invalid operation",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Implemented",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Service unavailable",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Stop or restart bridge",
        "tags": [
          "Bridges"
        ]
      }
    },
    "/gateways/{name}/clients/{clientid}/subscriptions/{topic}": {
      "delete": {
        "description": "为某客户端删除某订阅关系",
        "parameters": [
          {
            "description": "主题过滤器或主题名称",
            "in": "path",
            "name": "topic",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "客户端 ID",
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "网关名称",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Unsubscribed"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete client's subscription",
        "tags": [
          "Gateway Clients"
        ]
      }
    },
    "/mqtt/delayed/messages": {
      "get": {
        "description": "查看延迟消息列表",
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/emqx_delayed_api.message"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "properties": {
                        "page": {
                          "description": "查看的页数",
                          "minimum": 1,
                          "type": "integer"
                        },
                        "limit": {
                          "description": "每页数量",
                          "minimum": 1,
                          "type": "integer"
                        },
                        "count": {
                          "description": "延迟消息总数",
                          "minimum": 0,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "MQTT"
        ]
      }
    },
    "/users/{username}": {
      "delete": {
        "description": "删除 Dashboard 用户",
        "parameters": [
          {
            "description": "Dashboard 用户名",
            "example": "admin",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete User successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST",
                        "NOT_ALLOWED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "登录失败。用户名或密码错误",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "USER_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Dashboard 用户不存在",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Dashboard"
        ]
      },
      "put": {
        "description": "更新 Dashboard 用户描述",
        "parameters": [
          {
            "description": "Dashboard 用户名",
            "example": "admin",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "description": "Dashboard 用户描述",
                    "example": "administrator",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "username": {
                      "description": "Dashboard 用户名",
                      "example": "admin",
                      "maxLength": 100,
                      "type": "string"
                    },
                    "description": {
                      "description": "Dashboard 用户描述",
                      "example": "administrator",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "USER_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Dashboard 用户不存在",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/exhooks": {
      "get": {
        "description": "查看ExHook 服务器列表",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/exhook.detail_server_info"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "ExHook"
        ]
      },
      "post": {
        "description": "添加 ExHook 服务器",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "auto_reconnect": "60s",
                "enable": true,
                "failed_action": "deny",
                "name": "default",
                "pool_size": 8,
                "request_timeout": "5s",
                "ssl": {
                  "cacertfile": "/etc/emqx/certs/cacert.pem",
                  "certfile": "/etc/emqx/certs/cert.pem",
                  "enable": false,
                  "keyfile": "/etc/emqx/certs/key.pem"
                },
                "url": "http://127.0.0.1:8081"
              },
              "schema": {
                "$ref": "#/components/schemas/exhook.server_config"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exhook.detail_server_info"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Already exists",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_RPC"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad RPC",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "ExHook"
        ]
      }
    },
    "/gateways/lwm2m/clients/{clientid}/lookup": {
      "get": {
        "description": "查看指定资源状态",
        "parameters": [
          {
            "example": "urn:oma:lwm2m:oma:2",
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "/3/0/7",
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "discover",
            "in": "query",
            "name": "action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "clientid": {
                      "example": "urn:oma:lwm2m:oma:2",
                      "type": "string"
                    },
                    "path": {
                      "example": "/3/0/7",
                      "type": "string"
                    },
                    "action": {
                      "example": "discover",
                      "type": "string"
                    },
                    "codeMsg": {
                      "example": "reply_not_received",
                      "type": "string"
                    },
                    "content": {
                      "items": {
                        "$ref": "#/components/schemas/lwm2m.resource"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "CLIENT_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Client not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List Client's Resources",
        "tags": [
          "LwM2M Gateways"
        ]
      }
    },
    "/rules/{id}/metrics": {
      "get": {
        "description": "通过给定的 Id 获得规则的指标数据",
        "parameters": [
          {
            "example": "my_rule_id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_rule_api_schema.rule_metrics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Rule not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get rule metrics",
        "tags": [
          "Rules"
        ]
      }
    },
    "/slow_subscriptions": {
      "delete": {
        "description": "清除当前记录，然后重新开始统计",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Slow Subscriptions"
        ]
      },
      "get": {
        "description": "查看慢订阅的统计数据",
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/slow_subscribers_statistics.record"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Slow Subscriptions"
        ]
      }
    },
    "/gateways/{name}": {
      "get": {
        "description": "获取网关配置详情",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "coap_gateway": {
                    "summary": "A simple CoAP gateway config",
                    "value": {
                      "connection_required": false,
                      "enable": true,
                      "enable_stats": true,
                      "heartbeat": "30s",
                      "idle_timeout": "30s",
                      "listeners": [
                        {
                          "bind": "5683",
                          "max_conn_rate": 1000,
                          "max_connections": 1024000,
                          "name": "default",
                          "type": "udp"
                        }
                      ],
                      "mountpoint": "coap/",
                      "name": "coap",
                      "notify_type": "qos",
                      "publish_qos": "coap",
                      "subscribe_qos": "coap"
                    }
                  },
                  "exproto_gateway": {
                    "summary": "A simple ExProto gateway config",
                    "value": {
                      "enable": true,
                      "enable_stats": true,
                      "handler": {
                        "address": "http://127.0.0.1:9001"
                      },
                      "idle_timeout": "30s",
                      "listeners": [
                        {
                          "bind": "7993",
                          "max_conn_rate": 1000,
                          "max_connections": 1024000,
                          "name": "default",
                          "type": "tcp"
                        }
                      ],
                      "mountpoint": "exproto/",
                      "name": "exproto",
                      "server": {
                        "bind": "9100"
                      }
                    }
                  },
                  "lwm2m_gateway": {
                    "summary": "A simple LwM2M gateway config",
                    "value": {
                      "auto_observe": false,
                      "enable": true,
                      "enable_stats": true,
                      "idle_timeout": "30s",
                      "lifetime_max": "86400s",
                      "lifetime_min": "1s",
                      "listeners": [
                        {
                          "bind": "5783",
                          "max_conn_rate": 1000,
                          "max_connections": 1024000,
                          "name": "default",
                          "type": "udp"
                        }
                      ],
                      "mountpoint": "lwm2m/",
                      "name": "lwm2m",
                      "qmode_time_window": "22s",
                      "translators": {
                        "command": {
                          "topic": "dn/#"
                        },
                        "notify": {
                          "topic": "up/notify"
                        },
                        "register": {
                          "topic": "up/resp"
                        },
                        "response": {
                          "topic": "up/resp"
                        },
                        "update": {
                          "topic": "up/resp"
                        }
                      },
                      "update_msg_publish_condition": "always",
                      "xml_dir": "/etc/emqx/lwm2m_xml"
                    }
                  },
                  "mqttsn_gateway": {
                    "summary": "A simple MQTT-SN gateway config",
                    "value": {
                      "broadcast": true,
                      "enable": true,
                      "enable_qos3": true,
                      "enable_stats": true,
                      "gateway_id": 1,
                      "idle_timeout": "30s",
                      "listeners": [
                        {
                          "bind": "1884",
                          "max_conn_rate": 1000,
                          "max_connections": 1024000,
                          "name": "default",
                          "type": "udp"
                        }
                      ],
                      "mountpoint": "mqttsn/",
                      "name": "mqttsn",
                      "predefined": [
                        {
                          "id": "1001",
                          "topic": "pred/1001"
                        },
                        {
                          "id": "1002",
                          "topic": "pred/1002"
                        }
                      ]
                    }
                  },
                  "stomp_gateway": {
                    "summary": "A simple STOMP gateway config",
                    "value": {
                      "enable": true,
                      "enable_stats": true,
                      "frame": {
                        "max_body_length": 65535,
                        "max_headers": 10,
                        "max_headers_length": 1024
                      },
                      "idle_timeout": "30s",
                      "listeners": [
                        {
                          "bind": "61613",
                          "max_conn_rate": 1000,
                          "max_connections": 1024000,
                          "name": "default",
                          "type": "tcp"
                        }
                      ],
                      "mountpoint": "stomp/",
                      "name": "stomp"
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.exproto"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.lwm2m"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.coap"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.mqttsn"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.stomp"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get gateway",
        "tags": [
          "Gateways"
        ]
      },
      "put": {
        "description": "更新指定网关的基础配置、和启用的状态。<br/><br/>注：认证、和监听器的配置更新需参考对应的 API 接口。",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "coap_gateway": {
                  "summary": "A simple CoAP gateway config",
                  "value": {
                    "connection_required": false,
                    "enable": true,
                    "enable_stats": true,
                    "heartbeat": "30s",
                    "idle_timeout": "30s",
                    "mountpoint": "coap2/",
                    "notify_type": "qos",
                    "publish_qos": "coap",
                    "subscribe_qos": "coap"
                  }
                },
                "exproto_gateway": {
                  "summary": "A simple ExProto gateway config",
                  "value": {
                    "enable": true,
                    "enable_stats": true,
                    "handler": {
                      "address": "http://127.0.0.1:9001"
                    },
                    "idle_timeout": "30s",
                    "mountpoint": "exproto2/",
                    "server": {
                      "bind": "9100"
                    }
                  }
                },
                "lwm2m_gateway": {
                  "summary": "A simple LwM2M gateway config",
                  "value": {
                    "auto_observe": false,
                    "enable": true,
                    "enable_stats": true,
                    "idle_timeout": "30s",
                    "lifetime_max": "86400s",
                    "lifetime_min": "1s",
                    "mountpoint": "lwm2m2/",
                    "qmode_time_window": "22s",
                    "translators": {
                      "command": {
                        "topic": "dn/#"
                      },
                      "notify": {
                        "topic": "up/notify"
                      },
                      "register": {
                        "topic": "up/resp"
                      },
                      "response": {
                        "topic": "up/resp"
                      },
                      "update": {
                        "topic": "up/resp"
                      }
                    },
                    "update_msg_publish_condition": "always",
                    "xml_dir": "/etc/emqx/lwm2m_xml"
                  }
                },
                "mqttsn_gateway": {
                  "summary": "A simple MQTT-SN gateway config",
                  "value": {
                    "broadcast": true,
                    "enable": true,
                    "enable_qos3": false,
                    "enable_stats": true,
                    "gateway_id": 1,
                    "idle_timeout": "30s",
                    "mountpoint": "mqttsn2/",
                    "predefined": [
                      {
                        "id": "1003",
                        "topic": "pred/1003"
                      }
                    ]
                  }
                },
                "stomp_gateway": {
                  "summary": "A simple STOMP gateway config",
                  "value": {
                    "enable": true,
                    "enable_stats": true,
                    "frame": {
                      "max_body_length": 655350,
                      "max_headers": 100,
                      "max_headers_length": 10240
                    },
                    "idle_timeout": "30s",
                    "mountpoint": "stomp2/"
                  }
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_exproto"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_lwm2m"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_coap"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_mqttsn"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_stomp"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.exproto"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.lwm2m"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.coap"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.mqttsn"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.stomp"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Gateway configuration updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Load or update the gateway confs",
        "tags": [
          "Gateways"
        ]
      }
    },
    "/nodes": {
      "get": {
        "description": "列出所有 EMQX 节点",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List all EMQX nodes",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_nodes.node_info"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Nodes"
        ]
      }
    },
    "/authorization/sources/{type}": {
      "delete": {
        "description": "删除指定类型的授权数据源",
        "parameters": [
          {
            "description": "数据源类型",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "http",
                "mongodb",
                "redis",
                "built_in_database",
                "mysql",
                "postgresql",
                "file"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "get": {
        "description": "获取指定类型的授权数据源",
        "parameters": [
          {
            "description": "数据源类型",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "http",
                "mongodb",
                "redis",
                "built_in_database",
                "mysql",
                "postgresql",
                "file"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "授权数据源",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_authz_api_schema.file"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_authz_api_schema.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_authz_api_schema.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_authz_api_schema.built_in_database"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_authz_api_schema.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_authz_api_schema.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_authz_api_schema.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_authz_api_schema.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_authz_api_schema.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_authz_api_schema.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_authz_api_schema.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_authz_api_schema.http_get"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "put": {
        "description": "更新指定类型的授权数据源",
        "parameters": [
          {
            "description": "数据源类型",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "http",
                "mongodb",
                "redis",
                "built_in_database",
                "mysql",
                "postgresql",
                "file"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.file"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.built_in_database"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_authz_api_schema.http_get"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Authorization source updated successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/gateways/{name}/authentication/import_users": {
      "post": {
        "description": "导入用户（仅支持 built_in_database 类型的认证器）",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "filename": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Imported"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Import users",
        "tags": [
          "Gateway Authentication"
        ]
      }
    },
    "/api_key": {
      "get": {
        "description": "Return api_key list",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "description": "Unique and format by [a-zA-Z0-9-_]",
                      "example": "EMQX-API-KEY-1",
                      "type": "string"
                    },
                    "api_key": {
                      "description": "TODO:uses HMAC-SHA256 for signing.",
                      "example": "a4697a5c75a769f6",
                      "type": "string"
                    },
                    "expired_at": {
                      "default": "infinity",
                      "description": "No longer valid datetime",
                      "example": "2021-12-05T02:01:34.186Z",
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "description": "epoch-second",
                              "example": 1640995200,
                              "type": "integer"
                            },
                            {
                              "example": "2022-01-01T00:00:00.000Z",
                              "format": "date-time",
                              "type": "string"
                            }
                          ]
                        },
                        {
                          "enum": [
                            "infinity"
                          ],
                          "type": "string"
                        }
                      ]
                    },
                    "created_at": {
                      "description": "ApiKey create datetime",
                      "example": "2021-12-01T00:00:00.000Z",
                      "oneOf": [
                        {
                          "description": "epoch-second",
                          "example": 1640995200,
                          "type": "integer"
                        },
                        {
                          "example": "2022-01-01T00:00:00.000Z",
                          "format": "date-time",
                          "type": "string"
                        }
                      ]
                    },
                    "desc": {
                      "example": "Note",
                      "type": "string"
                    },
                    "enable": {
                      "description": "Enable/Disable",
                      "type": "boolean"
                    },
                    "expired": {
                      "description": "Expired",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "API Keys"
        ]
      },
      "post": {
        "description": "Create new api_key",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "description": "Unique and format by [a-zA-Z0-9-_]",
                    "example": "EMQX-API-KEY-1",
                    "type": "string"
                  },
                  "expired_at": {
                    "default": "infinity",
                    "description": "No longer valid datetime",
                    "example": "2021-12-05T02:01:34.186Z",
                    "oneOf": [
                      {
                        "oneOf": [
                          {
                            "description": "epoch-second",
                            "example": 1640995200,
                            "type": "integer"
                          },
                          {
                            "example": "2022-01-01T00:00:00.000Z",
                            "format": "date-time",
                            "type": "string"
                          }
                        ]
                      },
                      {
                        "enum": [
                          "infinity"
                        ],
                        "type": "string"
                      }
                    ]
                  },
                  "desc": {
                    "example": "Note",
                    "type": "string"
                  },
                  "enable": {
                    "description": "Enable/Disable",
                    "type": "boolean"
                  },
                  "expired": {
                    "description": "Expired",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api_key.app"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "API Keys"
        ]
      }
    },
    "/listeners/{id}/start": {
      "post": {
        "description": "在所有节点上启动指定ID的监听器",
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST",
                        "BAD_LISTENER_ID"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Listeners"
        ]
      }
    },
    "/banned": {
      "delete": {
        "description": "Clear all banned data.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Banned"
        ]
      },
      "get": {
        "description": "列出目前所有被封禁的客户端 ID、用户名和 IP 地址。",
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_banned.ban"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Banned"
        ]
      },
      "post": {
        "description": "添加一个客户端 ID、用户名或者 IP 地址到黑名单。",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_mgmt_api_banned.ban"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_banned.ban"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "ALREADY_EXISTS",
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "错误的请求，可能是参数错误或封禁对象已存在等原因。",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Banned"
        ]
      }
    },
    "/trace/{name}/log": {
      "get": {
        "description": "查看 trace",
        "parameters": [
          {
            "$ref": "#/components/parameters/trace.name"
          },
          {
            "$ref": "#/components/parameters/trace.bytes"
          },
          {
            "$ref": "#/components/parameters/trace.position"
          },
          {
            "$ref": "#/components/parameters/trace.node"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "example": "TEXT-LOG-ITEMS",
                      "type": "string"
                    },
                    "meta": {
                      "properties": {
                        "bytes": {
                          "default": 1000,
                          "description": "单个 HTTP 相应中包含 trace 日志的字节数。",
                          "maximum": 2147483647,
                          "minimum": 0,
                          "type": "integer"
                        },
                        "position": {
                          "default": 0,
                          "description": "指定从该偏移量开始读取指定的 trace 日志文件。",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad input parameter",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "NODE_ERROR"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Trace Name or Node Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Requested chunk size too big",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Trace"
        ]
      }
    },
    "/trace/{name}": {
      "delete": {
        "description": "删除指定的 trace",
        "parameters": [
          {
            "$ref": "#/components/parameters/trace.name"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Trace Name Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Trace"
        ]
      }
    },
    "/trace/{name}/stop": {
      "put": {
        "description": "停止指定的 trace",
        "parameters": [
          {
            "$ref": "#/components/parameters/trace.name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/trace.trace"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Trace Name Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Trace"
        ]
      }
    },
    "/opentelemetry": {
      "get": {
        "description": "Get opentelmetry configuration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "enable": true,
                  "exporter": {
                    "endpoint": "http://localhost:4317",
                    "interval": "10s"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/opentelemetry.opentelemetry"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Monitor"
        ]
      },
      "put": {
        "description": "Update opentelmetry configuration",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "enable": true,
                "exporter": {
                  "endpoint": "http://localhost:4317",
                  "interval": "10s"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/opentelemetry.opentelemetry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "enable": true,
                  "exporter": {
                    "endpoint": "http://localhost:4317",
                    "interval": "10s"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/opentelemetry.opentelemetry"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Update Config Failed",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Monitor"
        ]
      }
    },
    "/listeners/{id}/restart": {
      "post": {
        "description": "在所有节点上重启指定ID的监听器",
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST",
                        "BAD_LISTENER_ID"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Listeners"
        ]
      }
    },
    "/mqtt/retainer/message/{topic}": {
      "delete": {
        "description": "删除对应的消息",
        "parameters": [
          {
            "description": "主题",
            "in": "path",
            "name": "topic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "不支持的后端",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "消息不存在",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Retainer"
        ]
      },
      "get": {
        "description": "通过不带通配符的主题查看对应的保留消息",
        "parameters": [
          {
            "description": "主题",
            "in": "path",
            "name": "topic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "消息详情",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/retainer.message"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "不支持的后端",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "消息不存在",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Retainer"
        ]
      }
    },
    "/rule_events": {
      "get": {
        "description": "列出所有能被规则使用的事件",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_rule_api_schema.rule_events"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List rule events",
        "tags": [
          "Rules"
        ]
      }
    },
    "/clients/{clientid}/unsubscribe": {
      "post": {
        "description": "取消订阅",
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_mgmt_api_clients.unsubscribe"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Unsubscribe OK"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Client ID not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Clients"
        ]
      }
    },
    "/plugins/install": {
      "post": {
        "description": "Upload a plugin tarball (plugin-vsn.tar.gz).Follow [emqx-plugin-template](https://github.com/emqx/emqx-plugin-template) to develop plugin.",
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "encoding": {
                "plugin": {
                  "contentType": "application/gzip"
                }
              },
              "schema": {
                "properties": {
                  "plugin": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "UNEXPECTED_ERROR",
                        "ALREADY_INSTALLED",
                        "BAD_PLUGIN_INFO"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Install a new plugin",
        "tags": [
          "Plugins"
        ]
      }
    },
    "/gateways/lwm2m/clients/{clientid}/read": {
      "post": {
        "description": "发送读指令到某资源",
        "parameters": [
          {
            "example": "urn:oma:lwm2m:oma:2",
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "/3/0/7",
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "CLIENT_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "clientid not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Read Value from a Resource Path",
        "tags": [
          "LwM2M Gateways"
        ]
      }
    },
    "/banned/{as}/{who}": {
      "delete": {
        "description": "将一个客户端 ID、用户名或者 IP 地址从黑名单中删除。",
        "parameters": [
          {
            "description": "封禁方式，可以通过客户端 ID、用户名或者 IP 地址等方式进行封禁。",
            "example": "username",
            "in": "path",
            "name": "as",
            "required": true,
            "schema": {
              "enum": [
                "clientid",
                "username",
                "peerhost"
              ],
              "type": "string"
            }
          },
          {
            "description": "封禁对象，具体的客户端 ID、用户名或者 IP 地址。",
            "example": "Badass",
            "in": "path",
            "name": "who",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete banned success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "未在黑名单中找到该封禁对象。",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Banned"
        ]
      }
    },
    "/configs_reset/{rootname}": {
      "post": {
        "description": "重置（使用 `conf_path` 参数）指定的配置路径下的值<br/><br/>- 若指定路径的配置有默认值，则使用默认值；<br/>- 若指定路径的配置没有默认值，则返回 HTTP 状态码 400。",
        "parameters": [
          {
            "example": "sysmon",
            "in": "path",
            "name": "rootname",
            "required": true,
            "schema": {
              "enum": [
                "log",
                "sysmon",
                "sys_topics",
                "alarm",
                "dashboard"
              ],
              "type": "string"
            }
          },
          {
            "description": "The config path separated by '.' character",
            "example": "os.sysmem_high_watermark",
            "in": "query",
            "name": "conf_path",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rest config successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NO_DEFAULT_VALUE",
                        "REST_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "REST_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Configs"
        ]
      }
    },
    "/mqtt/retainer": {
      "get": {
        "description": "查看配置内容",
        "parameters": [],
        "responses": {
          "200": {
            "description": "配置内容",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/retainer.retainer"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "配置不存在",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Retainer"
        ]
      },
      "put": {
        "description": "更新配置",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/retainer.retainer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "配置更新成功",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/retainer.retainer"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "UPDATE_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "配置更新失败",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Retainer"
        ]
      }
    },
    "/authorization/cache": {
      "delete": {
        "description": "清除集群中所有授权数据缓存。",
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/api_key/{name}": {
      "delete": {
        "description": "Delete the specific api_key",
        "parameters": [
          {
            "$ref": "#/components/parameters/api_key.name"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "API Keys"
        ]
      },
      "get": {
        "description": "Return the specific api_key",
        "parameters": [
          {
            "$ref": "#/components/parameters/api_key.name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "description": "Unique and format by [a-zA-Z0-9-_]",
                      "example": "EMQX-API-KEY-1",
                      "type": "string"
                    },
                    "api_key": {
                      "description": "TODO:uses HMAC-SHA256 for signing.",
                      "example": "a4697a5c75a769f6",
                      "type": "string"
                    },
                    "expired_at": {
                      "default": "infinity",
                      "description": "No longer valid datetime",
                      "example": "2021-12-05T02:01:34.186Z",
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "description": "epoch-second",
                              "example": 1640995200,
                              "type": "integer"
                            },
                            {
                              "example": "2022-01-01T00:00:00.000Z",
                              "format": "date-time",
                              "type": "string"
                            }
                          ]
                        },
                        {
                          "enum": [
                            "infinity"
                          ],
                          "type": "string"
                        }
                      ]
                    },
                    "created_at": {
                      "description": "ApiKey create datetime",
                      "example": "2021-12-01T00:00:00.000Z",
                      "oneOf": [
                        {
                          "description": "epoch-second",
                          "example": 1640995200,
                          "type": "integer"
                        },
                        {
                          "example": "2022-01-01T00:00:00.000Z",
                          "format": "date-time",
                          "type": "string"
                        }
                      ]
                    },
                    "desc": {
                      "example": "Note",
                      "type": "string"
                    },
                    "enable": {
                      "description": "Enable/Disable",
                      "type": "boolean"
                    },
                    "expired": {
                      "description": "Expired",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "API Keys"
        ]
      },
      "put": {
        "description": "Update the specific api_key",
        "parameters": [
          {
            "$ref": "#/components/parameters/api_key.name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "expired_at": {
                    "default": "infinity",
                    "description": "No longer valid datetime",
                    "example": "2021-12-05T02:01:34.186Z",
                    "oneOf": [
                      {
                        "oneOf": [
                          {
                            "description": "epoch-second",
                            "example": 1640995200,
                            "type": "integer"
                          },
                          {
                            "example": "2022-01-01T00:00:00.000Z",
                            "format": "date-time",
                            "type": "string"
                          }
                        ]
                      },
                      {
                        "enum": [
                          "infinity"
                        ],
                        "type": "string"
                      }
                    ]
                  },
                  "desc": {
                    "example": "Note",
                    "type": "string"
                  },
                  "enable": {
                    "description": "Enable/Disable",
                    "type": "boolean"
                  },
                  "expired": {
                    "description": "Expired",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "description": "Unique and format by [a-zA-Z0-9-_]",
                      "example": "EMQX-API-KEY-1",
                      "type": "string"
                    },
                    "api_key": {
                      "description": "TODO:uses HMAC-SHA256 for signing.",
                      "example": "a4697a5c75a769f6",
                      "type": "string"
                    },
                    "expired_at": {
                      "default": "infinity",
                      "description": "No longer valid datetime",
                      "example": "2021-12-05T02:01:34.186Z",
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "description": "epoch-second",
                              "example": 1640995200,
                              "type": "integer"
                            },
                            {
                              "example": "2022-01-01T00:00:00.000Z",
                              "format": "date-time",
                              "type": "string"
                            }
                          ]
                        },
                        {
                          "enum": [
                            "infinity"
                          ],
                          "type": "string"
                        }
                      ]
                    },
                    "created_at": {
                      "description": "ApiKey create datetime",
                      "example": "2021-12-01T00:00:00.000Z",
                      "oneOf": [
                        {
                          "description": "epoch-second",
                          "example": 1640995200,
                          "type": "integer"
                        },
                        {
                          "example": "2022-01-01T00:00:00.000Z",
                          "format": "date-time",
                          "type": "string"
                        }
                      ]
                    },
                    "desc": {
                      "example": "Note",
                      "type": "string"
                    },
                    "enable": {
                      "description": "Enable/Disable",
                      "type": "boolean"
                    },
                    "expired": {
                      "description": "Expired",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "API Keys"
        ]
      }
    },
    "/clients/{clientid}/subscriptions": {
      "get": {
        "description": "获取指定客户端的订阅信息",
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_subscriptions.subscription"
                  },
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Client ID not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Clients"
        ]
      }
    },
    "/configs": {
      "get": {
        "description": "Get all the configurations of the specified keys, including hot and non-hot updatable items.",
        "parameters": [
          {
            "example": "sysmon",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "enum": [
                "alarm",
                "api_key",
                "authentication",
                "authorization",
                "auto_subscribe",
                "bridges",
                "cluster",
                "conn_congestion",
                "crl_cache",
                "dashboard",
                "delayed",
                "exhook",
                "flapping_detect",
                "force_gc",
                "force_shutdown",
                "gateway",
                "limiter",
                "listeners",
                "log",
                "mqtt",
                "node",
                "opentelemetry",
                "overload_protection",
                "prometheus",
                "psk_authentication",
                "retainer",
                "rewrite",
                "rpc",
                "rule_engine",
                "slow_subs",
                "sys_topics",
                "sysmon",
                "telemetry",
                "topic_metrics"
              ],
              "type": "string"
            }
          },
          {
            "description": "指定节点名称。如果未指定，则返回收到这个HTTP请求的节点的配置。",
            "in": "query",
            "name": "node",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/plain": {
                "schema": {
                  "example": "\n    sysmon {\n      os {\n        cpu_check_interval = 60s\n        cpu_high_watermark = 80%\n        cpu_low_watermark = 60%\n        mem_check_interval = 60s\n        procmem_high_watermark = 5%\n        sysmem_high_watermark = 70%\n        }\n        vm {\n        busy_dist_port = true\n        busy_port = true\n        large_heap = 32MB\n        long_gc = disabled\n        long_schedule = 240ms\n        process_check_interval = 30s\n        process_high_watermark = 80%\n        process_low_watermark = 60%\n        }\n    }\n    ",
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "example": {
                    "deprecated": true
                  },
                  "type": "object"
                }
              }
            },
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "INVALID_ACCEPT"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_NODE"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Configs"
        ]
      },
      "put": {
        "description": "Update the configurations of the specified keys.",
        "parameters": [
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "schema": {
              "default": "merge",
              "enum": [
                "replace",
                "merge"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "example": "\n    sysmon {\n      os {\n        cpu_check_interval = 60s\n        cpu_high_watermark = 80%\n        cpu_low_watermark = 60%\n        mem_check_interval = 60s\n        procmem_high_watermark = 5%\n        sysmem_high_watermark = 70%\n        }\n        vm {\n        busy_dist_port = true\n        busy_port = true\n        large_heap = 32MB\n        long_gc = disabled\n        long_schedule = 240ms\n        process_check_interval = 30s\n        process_high_watermark = 80%\n        process_low_watermark = 60%\n        }\n    }\n    ",
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Configurations updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "UPDATE_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Configs"
        ]
      }
    },
    "/clients": {
      "get": {
        "description": "列出客户端",
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "description": "Node name",
            "example": "emqx@127.0.0.1",
            "in": "query",
            "name": "node",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User name",
            "in": "query",
            "name": "username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Client's IP address",
            "example": "127.0.0.1",
            "in": "query",
            "name": "ip_address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The current connection status of the client, the possible values are connected,idle,disconnected",
            "in": "query",
            "name": "conn_state",
            "required": false,
            "schema": {
              "enum": [
                "connected",
                "idle",
                "disconnected"
              ],
              "type": "string"
            }
          },
          {
            "description": "Whether the client uses a new session",
            "in": "query",
            "name": "clean_start",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Client protocol version",
            "in": "query",
            "name": "proto_ver",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Fuzzy search `clientid` as substring",
            "in": "query",
            "name": "like_clientid",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Fuzzy search `username` as substring",
            "in": "query",
            "name": "like_username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search client session creation time by greater than or equal method, rfc3339 or timestamp(millisecond)",
            "in": "query",
            "name": "gte_created_at",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "description": "epoch-millisecond",
                  "example": 1640995200000,
                  "type": "integer"
                },
                {
                  "example": "2022-01-01T00:00:00.000Z",
                  "format": "date-time",
                  "type": "string"
                }
              ]
            }
          },
          {
            "description": "Search client session creation time by less than or equal method, rfc3339 or timestamp(millisecond)",
            "in": "query",
            "name": "lte_created_at",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "description": "epoch-millisecond",
                  "example": 1640995200000,
                  "type": "integer"
                },
                {
                  "example": "2022-01-01T00:00:00.000Z",
                  "format": "date-time",
                  "type": "string"
                }
              ]
            }
          },
          {
            "description": "Search client connection creation time by greater than or equal method, rfc3339 or timestamp(epoch millisecond)",
            "in": "query",
            "name": "gte_connected_at",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "description": "epoch-millisecond",
                  "example": 1640995200000,
                  "type": "integer"
                },
                {
                  "example": "2022-01-01T00:00:00.000Z",
                  "format": "date-time",
                  "type": "string"
                }
              ]
            }
          },
          {
            "description": "Search client connection creation time by less than or equal method, rfc3339 or timestamp(millisecond)",
            "in": "query",
            "name": "lte_connected_at",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "description": "epoch-millisecond",
                  "example": 1640995200000,
                  "type": "integer"
                },
                {
                  "example": "2022-01-01T00:00:00.000Z",
                  "format": "date-time",
                  "type": "string"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_clients.client"
                      },
                      "type": "array"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "INVALID_PARAMETER"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Invalid parameters",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Clients"
        ]
      }
    },
    "/gateways/{name}/authentication/users": {
      "get": {
        "description": "获取用户列表（仅支持 built_in_database 类型的认证器）",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number of the results to fetch.",
            "example": 1,
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Results per page(max 1000)",
            "example": 50,
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "使用用户 ID （username 或 clientid）模糊搜索，仅支持按子串的方式进行搜索。",
            "example": "test_",
            "in": "query",
            "name": "like_user_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "是否是超级用户",
            "in": "query",
            "name": "is_superuser",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "user_id": "user1"
                    },
                    {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  ],
                  "meta": {
                    "count": 300,
                    "limit": 20,
                    "page": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_users"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List users for gateway authenticator",
        "tags": [
          "Gateway Authentication"
        ]
      },
      "post": {
        "description": "添加用户（仅支持 built_in_database 类型的认证器）",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "summary": "Regular user",
                  "value": {
                    "password": "******",
                    "user_id": "user1"
                  }
                },
                "super_user": {
                  "summary": "Superuser",
                  "value": {
                    "is_superuser": true,
                    "password": "******",
                    "user_id": "user2"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_create"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "summary": "Regular user",
                    "value": {
                      "user_id": "user1"
                    }
                  },
                  "super_user": {
                    "summary": "Superuser",
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add user for gateway authenticator",
        "tags": [
          "Gateway Authentication"
        ]
      }
    },
    "/listeners/{id}": {
      "delete": {
        "description": "删除所有节点上指定ID的监听器",
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Listener deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_LISTENER_ID"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Listeners"
        ]
      },
      "get": {
        "description": "获取指定ID的监听器",
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "acceptors": 16,
                  "access_rules": [
                    "allow all"
                  ],
                  "bind": "0.0.0.0:1884",
                  "current_connections": 10240,
                  "id": "tcp:demo",
                  "max_connections": 204800,
                  "mountpoint": "/",
                  "proxy_protocol": false,
                  "proxy_protocol_timeout": "3s",
                  "running": true,
                  "tcp_options": {
                    "active_n": 100,
                    "backlog": 1024,
                    "buffer": "4KB",
                    "high_watermark": "1MB",
                    "nodelay": false,
                    "reuseaddr": true,
                    "send_timeout": "15s",
                    "send_timeout_close": true
                  },
                  "type": "tcp"
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/listeners.wss_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ws_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.tcp_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ssl_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.quic_required_bind"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_LISTENER_ID",
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Listener id not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Listeners"
        ]
      },
      "put": {
        "description": "为集群中所有的节点更新指定ID的监听器",
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "acceptors": 16,
                "access_rules": [
                  "allow all"
                ],
                "bind": "0.0.0.0:1884",
                "current_connections": 10240,
                "id": "tcp:demo",
                "max_connections": 204800,
                "mountpoint": "/",
                "proxy_protocol": false,
                "proxy_protocol_timeout": "3s",
                "running": true,
                "tcp_options": {
                  "active_n": 100,
                  "backlog": 1024,
                  "buffer": "4KB",
                  "high_watermark": "1MB",
                  "nodelay": false,
                  "reuseaddr": true,
                  "send_timeout": "15s",
                  "send_timeout_close": true
                },
                "type": "tcp"
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/listeners.wss_not_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.ws_not_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.tcp_not_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.ssl_not_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.quic_not_required_bind"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "acceptors": 16,
                  "access_rules": [
                    "allow all"
                  ],
                  "bind": "0.0.0.0:1884",
                  "current_connections": 10240,
                  "id": "tcp:demo",
                  "max_connections": 204800,
                  "mountpoint": "/",
                  "proxy_protocol": false,
                  "proxy_protocol_timeout": "3s",
                  "running": true,
                  "tcp_options": {
                    "active_n": 100,
                    "backlog": 1024,
                    "buffer": "4KB",
                    "high_watermark": "1MB",
                    "nodelay": false,
                    "reuseaddr": true,
                    "send_timeout": "15s",
                    "send_timeout_close": true
                  },
                  "type": "tcp"
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/listeners.wss_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ws_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.tcp_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ssl_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.quic_required_bind"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_LISTENER_ID",
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Listener id not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Listeners"
        ]
      }
    },
    "/users/{username}/change_pwd": {
      "post": {
        "description": "更改 Dashboard 用户密码",
        "parameters": [
          {
            "description": "Dashboard 用户名",
            "example": "admin",
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "old_pwd": {
                    "description": "旧密码",
                    "type": "string"
                  },
                  "new_pwd": {
                    "description": "新密码",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Update user password successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST",
                        "ERROR_PWD_NOT_MATCH"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "登录失败。用户名或密码错误",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "USER_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Dashboard 用户不存在",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/gateways/{name}/clients": {
      "get": {
        "description": "获取指定网关的客户端列表",
        "parameters": [
          {
            "description": "网关名称",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "匹配客户端的节点名称",
            "example": "",
            "in": "query",
            "name": "node",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "匹配客户端 ID",
            "example": "",
            "in": "query",
            "name": "clientid",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "匹配客户端 Username",
            "example": "",
            "in": "query",
            "name": "username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "匹配客户端 IP 地址",
            "example": "",
            "in": "query",
            "name": "ip_address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "匹配客户端连接状态",
            "example": "",
            "in": "query",
            "name": "conn_state",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "匹配客户端协议版本",
            "example": "",
            "in": "query",
            "name": "proto_ver",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "匹配客户端 `clean_start` 标记",
            "example": "",
            "in": "query",
            "name": "clean_start",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "子串匹配客户端 ID",
            "example": "",
            "in": "query",
            "name": "like_clientid",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "子串匹配 客户端 Username",
            "example": "",
            "in": "query",
            "name": "like_username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "匹配会话创建时间大于等于指定值的客户端",
            "example": "",
            "in": "query",
            "name": "gte_created_at",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "description": "epoch-millisecond",
                  "example": 1640995200000,
                  "type": "integer"
                },
                {
                  "example": "2022-01-01T00:00:00.000Z",
                  "format": "date-time",
                  "type": "string"
                }
              ]
            }
          },
          {
            "description": "匹配会话创建时间小于等于指定值的客户端",
            "example": "",
            "in": "query",
            "name": "lte_created_at",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "description": "epoch-millisecond",
                  "example": 1640995200000,
                  "type": "integer"
                },
                {
                  "example": "2022-01-01T00:00:00.000Z",
                  "format": "date-time",
                  "type": "string"
                }
              ]
            }
          },
          {
            "description": "匹配连接创建时间大于等于指定值的客户端",
            "example": "",
            "in": "query",
            "name": "gte_connected_at",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "description": "epoch-millisecond",
                  "example": 1640995200000,
                  "type": "integer"
                },
                {
                  "example": "2022-01-01T00:00:00.000Z",
                  "format": "date-time",
                  "type": "string"
                }
              ]
            }
          },
          {
            "description": "匹配连接创建时间小于等于指定值的客户端",
            "example": "",
            "in": "query",
            "name": "lte_connected_at",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "description": "epoch-millisecond",
                  "example": 1640995200000,
                  "type": "integer"
                },
                {
                  "example": "2022-01-01T00:00:00.000Z",
                  "format": "date-time",
                  "type": "string"
                }
              ]
            }
          },
          {
            "description": "匹配 LwM2M 客户端 Endpoint Name",
            "example": "",
            "in": "query",
            "name": "endpoint_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "子串匹配 LwM2M 客户端 Endpoint Name",
            "example": "",
            "in": "query",
            "name": "like_endpoint_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "匹配心跳时间大于等于指定值的 LwM2M 客户端",
            "example": "",
            "in": "query",
            "name": "gte_lifetime",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "匹配心跳时间小于等于指定值的 LwM2M 客户端",
            "example": "",
            "in": "query",
            "name": "lte_lifetime",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number of the results to fetch.",
            "example": 1,
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Results per page(max 1000)",
            "example": 50,
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "oneOf": [
                        {
                          "items": {
                            "$ref": "#/components/schemas/emqx_gateway_api_clients.exproto_client"
                          },
                          "type": "array"
                        },
                        {
                          "items": {
                            "$ref": "#/components/schemas/emqx_gateway_api_clients.lwm2m_client"
                          },
                          "type": "array"
                        },
                        {
                          "items": {
                            "$ref": "#/components/schemas/emqx_gateway_api_clients.coap_client"
                          },
                          "type": "array"
                        },
                        {
                          "items": {
                            "$ref": "#/components/schemas/emqx_gateway_api_clients.mqttsn_client"
                          },
                          "type": "array"
                        },
                        {
                          "items": {
                            "$ref": "#/components/schemas/emqx_gateway_api_clients.stomp_client"
                          },
                          "type": "array"
                        }
                      ]
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List gateway's clients",
        "tags": [
          "Gateway Clients"
        ]
      }
    },
    "/gateways/{name}/authentication/users/{uid}": {
      "delete": {
        "description": "删除用户（仅支持 built_in_database 类型的认证器）",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "用户 ID",
            "example": "test_username",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete user for gateway authenticator",
        "tags": [
          "Gateway Authentication"
        ]
      },
      "get": {
        "description": "获取用户信息（仅支持 built_in_database 类型的认证器）",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "用户 ID",
            "example": "test_username",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "summary": "Regular user",
                    "value": {
                      "user_id": "user1"
                    }
                  },
                  "super_user": {
                    "summary": "Superuser",
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get user info for gateway authenticator",
        "tags": [
          "Gateway Authentication"
        ]
      },
      "put": {
        "description": "更新用户信息（仅支持 built_in_database 类型的认证器）",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "用户 ID",
            "example": "test_username",
            "in": "path",
            "name": "uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "summary": "Update regular user",
                  "value": {
                    "password": "******"
                  }
                },
                "super_user": {
                  "summary": "Update user and promote to superuser",
                  "value": {
                    "is_superuser": true,
                    "password": "******"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "summary": "Regular user",
                    "value": {
                      "user_id": "user1"
                    }
                  },
                  "super_user": {
                    "summary": "Superuser",
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update user info for gateway authenticator",
        "tags": [
          "Gateway Authentication"
        ]
      }
    },
    "/gateways/{name}/listeners/{id}/authentication/import_users": {
      "post": {
        "description": "导入用户（仅支持 built_in_database 类型的认证器）",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "监听器 ID",
            "example": "stomp:tcp:def",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "filename": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Imported"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Import users",
        "tags": [
          "Gateway Authentication"
        ]
      }
    },
    "/rules/{id}/metrics/reset": {
      "put": {
        "description": "重置规则计数",
        "parameters": [
          {
            "example": "my_rule_id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Reset Success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Rule not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Reset rule metrics",
        "tags": [
          "Rules"
        ]
      }
    },
    "/gateways/{name}/listeners/{id}/authentication/users": {
      "get": {
        "description": "获取用户列表（仅支持 built_in_database 类型的认证器）",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "监听器 ID",
            "example": "",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page number of the results to fetch.",
            "example": 1,
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Results per page(max 1000)",
            "example": 50,
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "summary": "Regular user",
                    "value": {
                      "user_id": "user1"
                    }
                  },
                  "super_user": {
                    "summary": "Superuser",
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List authenticator's users",
        "tags": [
          "Gateway Listeners"
        ]
      },
      "post": {
        "description": "添加用户（仅支持 built_in_database 类型的认证器）",
        "parameters": [
          {
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "example": "stomp",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "监听器 ID",
            "example": "",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "summary": "Regular user",
                  "value": {
                    "password": "******",
                    "user_id": "user1"
                  }
                },
                "super_user": {
                  "summary": "Superuser",
                  "value": {
                    "is_superuser": true,
                    "password": "******",
                    "user_id": "user2"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_create"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "summary": "Regular user",
                    "value": {
                      "user_id": "user1"
                    }
                  },
                  "super_user": {
                    "summary": "Superuser",
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Not Found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Add user for an authenticator",
        "tags": [
          "Gateway Listeners"
        ]
      }
    },
    "/schemas/{name}": {
      "get": {
        "description": "Get the schema JSON of the specified name. NOTE: only intended for EMQX Dashboard.",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "enum": [
                "hotconf",
                "bridges"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The JSON schema of the specified name.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [],
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/authorization/settings": {
      "get": {
        "description": "获取授权配置",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "deny_action",
                    "no_match"
                  ],
                  "properties": {
                    "no_match": {
                      "default": "allow",
                      "description": "如果用户或客户端不匹配ACL规则，或者从可配置授权源(比如内置数据库、HTTP API 或 PostgreSQL 等。)内未找<br/>到此类用户或客户端时，模式的认访问控制操作。<br/>在“授权”中查找更多详细信息。",
                      "enum": [
                        "allow",
                        "deny"
                      ],
                      "type": "string"
                    },
                    "deny_action": {
                      "default": "ignore",
                      "description": "授权检查拒绝操作时的操作。",
                      "enum": [
                        "ignore",
                        "disconnect"
                      ],
                      "type": "string"
                    },
                    "cache": {
                      "$ref": "#/components/schemas/broker.authz_cache"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "put": {
        "description": "更新授权配置",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "deny_action",
                  "no_match"
                ],
                "properties": {
                  "no_match": {
                    "default": "allow",
                    "description": "如果用户或客户端不匹配ACL规则，或者从可配置授权源(比如内置数据库、HTTP API 或 PostgreSQL 等。)内未找<br/>到此类用户或客户端时，模式的认访问控制操作。<br/>在“授权”中查找更多详细信息。",
                    "enum": [
                      "allow",
                      "deny"
                    ],
                    "type": "string"
                  },
                  "deny_action": {
                    "default": "ignore",
                    "description": "授权检查拒绝操作时的操作。",
                    "enum": [
                      "ignore",
                      "disconnect"
                    ],
                    "type": "string"
                  },
                  "cache": {
                    "$ref": "#/components/schemas/broker.authz_cache"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "deny_action",
                    "no_match"
                  ],
                  "properties": {
                    "no_match": {
                      "default": "allow",
                      "description": "如果用户或客户端不匹配ACL规则，或者从可配置授权源(比如内置数据库、HTTP API 或 PostgreSQL 等。)内未找<br/>到此类用户或客户端时，模式的认访问控制操作。<br/>在“授权”中查找更多详细信息。",
                      "enum": [
                        "allow",
                        "deny"
                      ],
                      "type": "string"
                    },
                    "deny_action": {
                      "default": "ignore",
                      "description": "授权检查拒绝操作时的操作。",
                      "enum": [
                        "ignore",
                        "disconnect"
                      ],
                      "type": "string"
                    },
                    "cache": {
                      "$ref": "#/components/schemas/broker.authz_cache"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/gateways/lwm2m/clients/{clientid}/write": {
      "post": {
        "description": "发送写指令到某资源",
        "parameters": [
          {
            "example": "urn:oma:lwm2m:oma:2",
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "/3/0/7",
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "Integer",
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "Integer",
                "Float",
                "Time",
                "String",
                "Boolean",
                "Opaque",
                "Objlnk"
              ],
              "type": "string"
            }
          },
          {
            "example": 123,
            "in": "query",
            "name": "value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "CLIENT_NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Clientid not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Write a Value to Resource Path",
        "tags": [
          "LwM2M Gateways"
        ]
      }
    },
    "/configs/log": {
      "get": {
        "description": "Get the sub-configurations under *log*",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_conf_schema.log"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "config not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get the sub-configurations under *log*",
        "tags": [
          "Configs"
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *log*",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_conf_schema.log"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_conf_schema.log"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "UPDATE_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "UPDATE_FAILED"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Error code to troubleshoot problems.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update the sub-configurations under *log*",
        "tags": [
          "Configs"
        ]
      }
    },
    "/rules/{id}": {
      "delete": {
        "description": "通过 ID 删除集群里所有节点上的规则",
        "parameters": [
          {
            "example": "my_rule_id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete rule successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Rule not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete rule",
        "tags": [
          "Rules"
        ]
      },
      "get": {
        "description": "通过 ID 查询规则",
        "parameters": [
          {
            "example": "my_rule_id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_rule_api_schema.rule_info"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "NOT_FOUND"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Rule not found",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get rule",
        "tags": [
          "Rules"
        ]
      },
      "put": {
        "description": "通过 ID 更新集群里所有节点上的规则",
        "parameters": [
          {
            "example": "my_rule_id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_rule_api_schema.rule_creation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_rule_api_schema.rule_info"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Invalid Parameters",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update rule",
        "tags": [
          "Rules"
        ]
      }
    },
    "/exhooks/{name}/hooks": {
      "get": {
        "description": "获取 Exhook 服务器的钩子信息",
        "parameters": [
          {
            "description": "Exhook 服务器的名称",
            "example": "default",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/exhook.list_hook_info"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad Request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "ExHook"
        ]
      }
    },
    "/bridges": {
      "get": {
        "description": "列出所有 Bridge",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "clean_start": true,
                    "egress": {
                      "local": {
                        "topic": "emqx/#"
                      },
                      "remote": {
                        "payload": "${payload}",
                        "qos": "${qos}",
                        "retain": false,
                        "topic": "from_emqx/${topic}"
                      }
                    },
                    "enable": true,
                    "ingress": {
                      "local": {
                        "payload": "${payload}",
                        "qos": "${qos}",
                        "retain": "${retain}",
                        "topic": "from_aws/${topic}"
                      },
                      "remote": {
                        "qos": 1,
                        "topic": "aws/#"
                      }
                    },
                    "keepalive": "300s",
                    "max_inflight": 100,
                    "name": "mqtt_example",
                    "password": "******",
                    "proto_ver": "v4",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "max_buffer_bytes": 104857600,
                      "query_mode": "sync"
                    },
                    "retry_interval": "15s",
                    "server": "127.0.0.1:1883",
                    "ssl": {
                      "enable": false
                    },
                    "type": "mqtt",
                    "username": "foo"
                  },
                  {
                    "body": "${payload}",
                    "connect_timeout": "15s",
                    "enable": true,
                    "enable_pipelining": 100,
                    "local_topic": "emqx_webhook/#",
                    "max_retries": 3,
                    "method": "post",
                    "name": "webhook_example",
                    "pool_size": 4,
                    "pool_type": "random",
                    "request_timeout": "15s",
                    "resource_opts": {
                      "health_check_interval": 15000,
                      "inflight_window": 100,
                      "max_buffer_bytes": 104857600,
                      "query_mode": "async",
                      "worker_pool_size": 1
                    },
                    "ssl": {
                      "enable": false
                    },
                    "type": "webhook",
                    "url": "http://localhost:9901/messages/${topic}"
                  }
                ],
                "schema": {
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/bridge_webhook.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mqtt.get"
                      }
                    ]
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "List bridges",
        "tags": [
          "Bridges"
        ]
      },
      "post": {
        "description": "通过类型和名字创建 Bridge",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "mqtt_example": {
                  "summary": "MQTT Bridge",
                  "value": {
                    "clean_start": true,
                    "egress": {
                      "local": {
                        "topic": "emqx/#"
                      },
                      "remote": {
                        "payload": "${payload}",
                        "qos": "${qos}",
                        "retain": false,
                        "topic": "from_emqx/${topic}"
                      }
                    },
                    "enable": true,
                    "ingress": {
                      "local": {
                        "payload": "${payload}",
                        "qos": "${qos}",
                        "retain": "${retain}",
                        "topic": "from_aws/${topic}"
                      },
                      "remote": {
                        "qos": 1,
                        "topic": "aws/#"
                      }
                    },
                    "keepalive": "300s",
                    "max_inflight": 100,
                    "name": "mqtt_example",
                    "password": "******",
                    "proto_ver": "v4",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "max_buffer_bytes": 104857600,
                      "query_mode": "sync"
                    },
                    "retry_interval": "15s",
                    "server": "127.0.0.1:1883",
                    "ssl": {
                      "enable": false
                    },
                    "type": "mqtt",
                    "username": "foo"
                  }
                },
                "webhook_example": {
                  "summary": "WebHook",
                  "value": {
                    "body": "${payload}",
                    "connect_timeout": "15s",
                    "enable": true,
                    "enable_pipelining": 100,
                    "local_topic": "emqx_webhook/#",
                    "max_retries": 3,
                    "method": "post",
                    "name": "webhook_example",
                    "pool_size": 4,
                    "pool_type": "random",
                    "request_timeout": "15s",
                    "resource_opts": {
                      "health_check_interval": 15000,
                      "inflight_window": 100,
                      "max_buffer_bytes": 104857600,
                      "query_mode": "async",
                      "worker_pool_size": 1
                    },
                    "ssl": {
                      "enable": false
                    },
                    "type": "webhook",
                    "url": "http://localhost:9901/messages/${topic}"
                  }
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_webhook.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt.post"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "mqtt_example": {
                    "summary": "MQTT Bridge",
                    "value": {
                      "clean_start": true,
                      "egress": {
                        "local": {
                          "topic": "emqx/#"
                        },
                        "remote": {
                          "payload": "${payload}",
                          "qos": "${qos}",
                          "retain": false,
                          "topic": "from_emqx/${topic}"
                        }
                      },
                      "enable": true,
                      "ingress": {
                        "local": {
                          "payload": "${payload}",
                          "qos": "${qos}",
                          "retain": "${retain}",
                          "topic": "from_aws/${topic}"
                        },
                        "remote": {
                          "qos": 1,
                          "topic": "aws/#"
                        }
                      },
                      "keepalive": "300s",
                      "max_inflight": 100,
                      "name": "mqtt_example",
                      "password": "******",
                      "proto_ver": "v4",
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "max_buffer_bytes": 104857600,
                        "query_mode": "sync"
                      },
                      "retry_interval": "15s",
                      "server": "127.0.0.1:1883",
                      "ssl": {
                        "enable": false
                      },
                      "type": "mqtt",
                      "username": "foo"
                    }
                  },
                  "webhook_example": {
                    "summary": "WebHook",
                    "value": {
                      "body": "${payload}",
                      "connect_timeout": "15s",
                      "enable": true,
                      "enable_pipelining": 100,
                      "local_topic": "emqx_webhook/#",
                      "max_retries": 3,
                      "method": "post",
                      "name": "webhook_example",
                      "pool_size": 4,
                      "pool_type": "random",
                      "request_timeout": "15s",
                      "resource_opts": {
                        "health_check_interval": 15000,
                        "inflight_window": 100,
                        "max_buffer_bytes": 104857600,
                        "query_mode": "async",
                        "worker_pool_size": 1
                      },
                      "ssl": {
                        "enable": false
                      },
                      "type": "webhook",
                      "url": "http://localhost:9901/messages/${topic}"
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_webhook.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt.get"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "ALREADY_EXISTS"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bridge already exists",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create bridge",
        "tags": [
          "Bridges"
        ]
      }
    },
    "/listeners_status": {
      "get": {
        "description": "列出所有节点上的监听器状态。按监听器类型分组",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "enable": false,
                    "ids": [
                      "tcp:demo"
                    ],
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "current_connections": 11,
                          "max_connections": 1024000,
                          "running": true
                        }
                      },
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "current_connections": 10,
                          "max_connections": 1024000,
                          "running": true
                        }
                      }
                    ],
                    "status": {
                      "current_connections": 21,
                      "max_connections": 2048000,
                      "running": true
                    },
                    "type": "tcp"
                  },
                  {
                    "enable": false,
                    "ids": [
                      "ssl:default"
                    ],
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "current_connections": 31,
                          "max_connections": "infinity",
                          "running": true
                        }
                      },
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "current_connections": 40,
                          "max_connections": "infinity",
                          "running": true
                        }
                      }
                    ],
                    "status": {
                      "current_connections": 71,
                      "max_connections": "infinity",
                      "running": true
                    },
                    "type": "ssl"
                  }
                ],
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/listeners.listener_type_status"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Listeners"
        ]
      }
    },
    "/monitor": {
      "get": {
        "description": "列出集群所有节点的监控数据",
        "parameters": [
          {
            "description": "The latest N seconds data. Like 300 for 5 min.",
            "example": 300,
            "in": "query",
            "name": "latest",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/emqx_dashboard_monitor_api.sampler"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_RPC"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad RPC",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Metrics"
        ]
      }
    },
    "/logout": {
      "post": {
        "description": "Dashboard 用户登出",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "description": "Dashboard 用户名",
                    "example": "admin",
                    "maxLength": 100,
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Dashboard logout successfully"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_USERNAME_OR_PWD"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "登录失败。用户名或密码错误",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Dashboard"
        ]
      }
    },
    "/authorization/sources/built_in_database/rules/all": {
      "delete": {
        "description": "删除 'all' 规则",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "get": {
        "description": "列出适用于所有客户端规则 （即 'all' 规则）。",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "password_based:built_in_database": {
                    "summary": "All",
                    "value": {
                      "rules": [
                        {
                          "action": "publish",
                          "permission": "allow",
                          "topic": "test/topic/1"
                        },
                        {
                          "action": "subscribe",
                          "permission": "allow",
                          "topic": "test/topic/2"
                        },
                        {
                          "action": "all",
                          "permission": "deny",
                          "topic": "eq test/#"
                        },
                        {
                          "action": "publish",
                          "permission": "allow",
                          "qos": [
                            "1"
                          ],
                          "retain": "true",
                          "topic": "test/topic/3"
                        },
                        {
                          "action": "publish",
                          "permission": "allow",
                          "qos": [
                            "0",
                            "1",
                            "2"
                          ],
                          "retain": "all",
                          "topic": "test/topic/4"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      },
      "post": {
        "description": "创建或更新适用于所有客户端的规则（即 'all' 规则）。",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "password_based:built_in_database": {
                  "summary": "All",
                  "value": {
                    "rules": [
                      {
                        "action": "publish",
                        "permission": "allow",
                        "topic": "test/topic/1"
                      },
                      {
                        "action": "subscribe",
                        "permission": "allow",
                        "topic": "test/topic/2"
                      },
                      {
                        "action": "all",
                        "permission": "deny",
                        "topic": "eq test/#"
                      },
                      {
                        "action": "publish",
                        "permission": "allow",
                        "qos": [
                          "1"
                        ],
                        "retain": "true",
                        "topic": "test/topic/3"
                      },
                      {
                        "action": "publish",
                        "permission": "allow",
                        "qos": [
                          "0",
                          "1",
                          "2"
                        ],
                        "retain": "all",
                        "topic": "test/topic/4"
                      }
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Bad rule schema",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Authorization"
        ]
      }
    },
    "/rule_engine": {
      "get": {
        "description": "获取规则引擎配置。",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_rule_api_schema.rule_engine"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Rules"
        ]
      },
      "put": {
        "description": "更新规则引擎配置。",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_rule_api_schema.rule_engine"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_rule_api_schema.rule_engine"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "enum": [
                        "BAD_REQUEST"
                      ],
                      "type": "string"
                    },
                    "message": {
                      "description": "Invalid request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Rules"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "/api/v5"
    }
  ]
}
