{
  "info": {
    "version": "5.8.0",
    "title": "EMQX Enterprise API"
  },
  "components": {
    "parameters": {
      "file_transfer.client_id": {
        "in": "path",
        "name": "clientid",
        "description": "MQTT Client ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "file_transfer.file_id": {
        "in": "path",
        "name": "fileid",
        "description": "File ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "file_transfer.file_node": {
        "in": "query",
        "name": "node",
        "description": "Node under which the file is located",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "emqx@127.0.0.1"
      },
      "file_transfer.file_ref": {
        "in": "query",
        "name": "fileref",
        "description": "File reference",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "file1"
      },
      "file_transfer.following": {
        "in": "query",
        "name": "following",
        "description": "Cursor to start listing files from",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "public.limit": {
        "in": "query",
        "name": "limit",
        "description": "Results per page(max 10000)",
        "schema": {
          "default": 100,
          "maximum": 10000,
          "type": "integer",
          "minimum": 1
        },
        "example": 50
      },
      "public.page": {
        "in": "query",
        "name": "page",
        "description": "Page number of the results to fetch.",
        "schema": {
          "default": 1,
          "type": "integer",
          "minimum": 1
        },
        "example": 1
      }
    },
    "schemas": {
      "redis.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "动作的参数。",
            "$ref": "#/components/schemas/bridge_redis.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/redis.action_resource_opts"
          }
        },
        "type": "object"
      },
      "pulsar.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pulsar"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/pulsar.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/pulsar.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.post_connector": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "endpoint",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kinesis"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "连接到 Amazon Kinesis 的访问密钥 ID。"
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "连接到 Amazon Kinesis 的 AWS 秘密访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "endpoint": {
            "type": "string",
            "description": "Amazon Kinesis 终端节点的 URL。",
            "example": "https://kinesis.us-east-1.amazonaws.com"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "发送请求时发生错误的最大重试次数。",
            "minimum": 0
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小",
            "minimum": 1
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kinesis.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_http.get_connector": {
        "required": [
          "name",
          "type",
          "url"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "http"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作动作的可读描述。"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "url": {
            "type": "string",
            "description": "HTTP 动作的 URL。<br/><br/>此路径允许使用带有变量的模板，但变量不能用于方案、主机或端口部分。<br/><br/>例如，<code> http://localhost:9901/${topic} </code> 是允许的，但<br/><code> http://${host}:9901/message </code> 或 <code> http://localhost:${port}/message </code><br/>是不允许的。"
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "type": "object",
            "description": "HTTP 请求头。<br/><br/>允许使用带有变量的模板。",
            "example": {},
            "is_template": true
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接到 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "连接池类型。可以是random、hash之一。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
            "minimum": 1
          },
          "request": {
            "type": "object",
            "deprecated": true,
            "description": "This field is never used, so we deprecated it since 5.3.2.",
            "example": {}
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_http.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "action_couchbase.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "couchbase"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "Set of parameters for the action.",
            "$ref": "#/components/schemas/action_couchbase.parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/action_couchbase.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.auth_basic": {
        "required": [
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Basic auth 用户名。类似 IoTDB REST 接口中的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Basic auth 密码。类似 IoTDB REST 接口中的密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "greptimedb"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对这个动作类型的更多参数。",
            "$ref": "#/components/schemas/bridge_greptimedb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "schema_validation_http_api.metrics": {
        "properties": {
          "matched": {
            "type": "integer",
            "minimum": 0
          },
          "succeeded": {
            "type": "integer",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "bridge_cassa.get": {
        "required": [
          "keyspace",
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "cassandra"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "cql": {
            "default": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "CQL 模板"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 Cassandra。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "servers": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port][,Host2:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 Cassandra 默认端口 9042。"
          },
          "keyspace": {
            "type": "string",
            "description": "要连接到的 Keyspace 名称。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_redis.post_sentinel": {
        "required": [
          "command_template",
          "name",
          "sentinel",
          "servers",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 Redis 的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果此动作用作规则的动作（EMQX 规则引擎），并且还配置了 local_topic，则规则中获取的数据和与 local_topic 匹配的 MQTT 消息都将被转发。"
          },
          "command_template": {
            "type": "array",
            "description": "用于导出消息的 Redis 命令模板。每个列表元素代表一个命令名称或其参数。<br/>例如，要将有效负载推送到 Redis 列表中的键 msgs，元素应该如下所示：<br/>rpush，msgs，${payload}。",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_sentinel"
          },
          "servers": {
            "type": "string",
            "description": "集群将要连接的节点列表。 节点之间用逗号分隔，如：Node[,Node]。每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。"
          },
          "redis_type": {
            "default": "sentinel",
            "type": "string",
            "enum": [
              "sentinel"
            ],
            "description": "Sentinel 模式。 当 Redis 服务器在 Senitel 模式下运行时必须设置为 'sentinel' 。"
          },
          "sentinel": {
            "type": "string",
            "description": "Redis sentinel 模式下的集群名称。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis 数据库 ID。",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "redis_sentinel"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作对动作的用户可读描述"
          }
        },
        "type": "object"
      },
      "bridge_kafka.producer_buffer": {
        "properties": {
          "mode": {
            "default": "memory",
            "type": "string",
            "enum": [
              "memory",
              "disk",
              "hybrid"
            ],
            "description": "消息缓存模式。<br/><code>memory</code>: 所有的消息都缓存在内存里。如果 EMQX 服务重启，缓存的消息会丢失。<br/><code>disk</code>: 缓存到磁盘上。EMQX 重启后会继续发送重启前未发送完成的消息。<br/><code>hybrid</code>: 先将消息缓存在内存中，当内存中的消息堆积超过一定限制（配置项 <code>segment_bytes</code> 描述了该限制）后，后续的消息会缓存到磁盘上。与 <code>memory</code> 模式一样，如果 EMQX 服务重启，缓存的消息会丢失。"
          },
          "per_partition_limit": {
            "default": "2GB",
            "type": "string",
            "description": "为每个 Kafka 分区设置的最大缓存字节数。当超过这个上限之后，老的消息会被丢弃，为新的消息腾出空间。",
            "example": "32MB"
          },
          "segment_bytes": {
            "default": "100MB",
            "type": "string",
            "description": "当缓存模式是 <code>disk</code> 或 <code>hybrid</code> 时适用。该配置用于指定缓存到磁盘上的文件的大小。",
            "example": "32MB"
          },
          "memory_overload_protection": {
            "default": false,
            "type": "boolean",
            "description": "缓存模式是 <code>memory</code> 或 <code>hybrid</code> 时适用。当系统处于高内存压力时，从队列中丢弃旧的消息以减缓内存增长。内存压力值由配置项 <code>sysmon.os.sysmem_high_watermark</code> 决定。注意，该配置仅在 Linux 系统中有效。"
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_pub": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "message_publish"
            ],
            "description": "事件类型"
          },
          "id": {
            "type": "string",
            "description": "消息 ID"
          },
          "clientid": {
            "type": "string",
            "description": "客户端 ID"
          },
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "payload": {
            "type": "string",
            "description": "消息负载"
          },
          "peerhost": {
            "type": "string",
            "description": "对等客户端的 IP 地址"
          },
          "topic": {
            "type": "string",
            "description": "消息主题"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "消息被接受的时间"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "消息的 QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "rule_engine.builtin_action_republish": {
        "properties": {
          "function": {
            "type": "string",
            "enum": [
              "republish"
            ],
            "description": "将消息重新发布为新的 MQTT 消息"
          },
          "args": {
            "default": {},
            "$ref": "#/components/schemas/rule_engine.republish_args"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.action_parameters": {
        "required": [
          "partition_key",
          "stream_name"
        ],
        "properties": {
          "payload_template": {
            "default": "${.}",
            "type": "string",
            "description": "用于格式化传出消息的模板。如果未定义，将以 JSON 格式发送所有可用的上下文。"
          },
          "stream_name": {
            "type": "string",
            "description": "消息将要被发布到的 Amazon Kinesis 流。"
          },
          "partition_key": {
            "type": "string",
            "description": "与发布消息关联的 Amazon Kinesis 分区键。支持格式为 ${var} 的占位符。"
          }
        },
        "type": "object"
      },
      "bridge_tdengine.post": {
        "required": [
          "database",
          "name",
          "password",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "tdengine"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 TDengine。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 TDengine 默认端口 6041。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.post_api_v1": {
        "required": [
          "database",
          "name",
          "type",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 InfluxDB。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 InfluxDB。"
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "使用 InfluxDB API Line Protocol 写入 InfluxDB 的数据，支持占位符<br/><br/>参考 [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) 及<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR: <br/><br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>注意，整形数值占位符后需要添加一个字符 `i` 类型标识。例如 `${payload.int_value}i`"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 InfluxDB 默认端口 8086。"
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "InfluxDB 时间精度。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "database": {
            "type": "string",
            "description": "InfluxDB 数据库。"
          },
          "username": {
            "type": "string",
            "description": "InfluxDB 用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB 密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "type": {
            "type": "string",
            "enum": [
              "influxdb_api_v1"
            ],
            "description": "桥接类型。"
          },
          "name": {
            "type": "string",
            "description": "桥接名称。"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.action_parameters": {
        "properties": {
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_event_hub_producer"
            ],
            "description": "动作的类型。"
          },
          "name": {
            "type": "string",
            "description": "桥接名称，作为桥接的一个可读描述。"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "将 MQTT 主题或主题过滤器作为数据源（动作输入）。如果使用规则动作作为数据源，则应将此配置保留为空，否则消息将在 Azure Event Hubs 中重复。"
          },
          "parameters": {
            "description": "Azure Event Hubs 生产者配置",
            "$ref": "#/components/schemas/bridge_azure_event_hub.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "message_transformation_http_api.metrics": {
        "properties": {
          "matched": {
            "type": "integer",
            "minimum": 0
          },
          "succeeded": {
            "type": "integer",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "bridge_tdengine.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "tdengine"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "TDengine 动作的参数。",
            "$ref": "#/components/schemas/bridge_tdengine.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_mqtt.put_connector": {
        "required": [
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "将发布消息到远程代理的 MQTT 客户端池的大小。<br/><br/>每个 MQTT 客户端都将分配'clientid'，格式为'${clientid_prefix}:${bridge_name}:egress:${node}:${n}'<br/>其中'n'是池中客户端的编号。",
            "minimum": 1
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_mqtt.resource_opts"
          },
          "mode": {
            "default": "cluster_shareload",
            "type": "string",
            "enum": [
              "cluster_shareload"
            ],
            "deprecated": true,
            "description": "MQTT 动作的模式。<br/><br/>- cluster_shareload：在 emqx 集群中的每个节点上创建一个 MQTT 连接。<br/><br/>在'cluster_shareload'模式下，来自远程代理的传入负载通过<br/>使用共享订阅进行共享。<br/><br/>请注意，'clientid'将以节点名称作为后缀，以避免<br/>不同节点之间的 clientid 冲突。并且我们只能使用共享订阅<br/>作为入口连接的'remote.topic'的主题过滤器。"
          },
          "server": {
            "type": "string",
            "description": "远程 MQTT 代理的主机和端口"
          },
          "clientid_prefix": {
            "type": "string",
            "description": "附加到 egress 动作使用的 clientid 前缀（可选）。"
          },
          "reconnect_interval": {
            "type": "string",
            "deprecated": true
          },
          "proto_ver": {
            "default": "v4",
            "type": "string",
            "enum": [
              "v3",
              "v4",
              "v5"
            ],
            "description": "MQTT协议版本"
          },
          "bridge_mode": {
            "default": false,
            "type": "boolean",
            "description": "如果启用桥接模式。<br/>注意：此设置仅适用于 MQTT 协议版本早于5.0的情况，远程 MQTT<br/>代理必须支持此功能。<br/>如果将 bridge_mode 设置为true，则桥接将指示远程代理它是一个桥接而不是普通客户端。<br/>这意味着循环检测将更加有效，并且保留的消息将被正确传递。"
          },
          "username": {
            "type": "string",
            "description": "MQTT 协议的用户名"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "MQTT 协议的密码",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "在重新连接到入口动作时是否启动新会话"
          },
          "keepalive": {
            "default": "300s",
            "type": "string",
            "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "MQTT 协议的最大 inflight（已发送但未确认）消息数",
            "minimum": 0
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_opents.action_parameters_data": {
        "required": [
          "metric",
          "tags",
          "value"
        ],
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "秒级或毫秒级时间戳，支持 ${var} 格式的占位符。"
          },
          "metric": {
            "type": "string",
            "description": "度量的名称，应为时间序列数据的唯一标识符，支持 ${var} 格式的占位符。"
          },
          "tags": {
            "description": "标签。仅支持使用占位符从变量或标签映射中提取标签。",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "example": {}
              }
            ]
          },
          "value": {
            "description": "数据点的值，支持 ${var} 格式的占位符。它代表实际的测量或观察值。",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "type": "object"
      },
      "connector_mqtt.ingress_local": {
        "properties": {
          "topic": {
            "type": "string",
            "description": "要发送到本地代理的主题。<br/><br/>允许使用带有变量的模板。"
          },
          "qos": {
            "default": "${qos}",
            "description": "要发送的 MQTT 消息的 QoS 级别。<br/><br/>允许使用带有变量的模板。",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "maximum": 2,
                "type": "integer",
                "minimum": 0,
                "example": 0
              }
            ]
          },
          "retain": {
            "default": "${retain}",
            "description": "要发送的 MQTT 消息的'retain'标志。<br/><br/>允许使用带有变量的模板。",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "payload": {
            "type": "string",
            "description": "要发送的 MQTT 消息的有效载荷。<br/><br/>允许使用带有变量的模板。"
          }
        },
        "type": "object"
      },
      "bridge_oracle.get": {
        "required": [
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "oracle"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板。模板字符串可以包含消息元数据和有效载荷字段的占位符。占位符的插入不需要任何检查和特殊格式化，因此必须确保插入的数值格式化和转义正确。模板字符串可以包含占位符模板字符串可以包含消息元数据和有效载荷字段的占位符。这些占位符被插入所以必须确保插入的值的格式正确。因此，确保插入的值格式化和转义正确是非常重要的。模板字符串可以包含占位符模板字符串可以包含消息元数据和有效载荷字段的占位符。这些占位符被插入所以必须确保插入的值的格式正确。确保插入的值被正确地格式化和转义。"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 Oracle Database。 <br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>主机名具有以下形式：`Host[:Port]`。<br/>如果未指定 `[:Port]`，则使用 Oracle Database 默认端口 1521。"
          },
          "sid": {
            "type": "string",
            "description": "Oracle Database Sid 名称"
          },
          "service_name": {
            "type": "string",
            "description": "Oracle Database 服务名称。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "file_transfer.file_transfer": {
        "properties": {
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "启用文件传输（File Transfer）服务。<br/><br/>文件传输服务允许客户端使用 `$file` 主题将分片上传到 EMQX。<br/>启用文件传输服务表示 `$file` 主题前缀已被预留，用于提供文件传输服务。<br/><br/>这个开关也会影响文件传输 REST API 的可用性，以及依赖存储的后台任务（例如垃圾回收）。"
          },
          "init_timeout": {
            "default": "10s",
            "type": "string",
            "description": "指定文件传输初始化的时间限制。在<br/><br/>EMQX 服务器过载时可能发生初始化超时。超时后给 `init` 的 PUBACK 中包含一个错误码 （0x80）。",
            "example": "32s"
          },
          "store_segment_timeout": {
            "default": "5m",
            "type": "string",
            "description": "文件片段保存超时。<br/><br/>EMQX 收到文件分片后，会对它进行保存，如果发生超时（例如系统过载），则会给这个发布消息的 PUBACK 中包含一个错误码（0x80）。",
            "example": "32s"
          },
          "assemble_timeout": {
            "default": "5m",
            "type": "string",
            "description": "文件拼接超时。<br/><br/>在收到 'fin' 消息后 EMQX 会对文件进行拼接，如果发生超时（例如系统过载），则会给 'fin' 的 PUBACK 中包含一个错误码（0x80）。",
            "example": "32s"
          },
          "storage": {
            "default": {
              "local": {}
            },
            "description": "文件后端存储配置",
            "$ref": "#/components/schemas/file_transfer.storage_backend"
          }
        },
        "type": "object"
      },
      "bridge_mysql.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mysql"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "特定于此动作类型的附加参数",
            "$ref": "#/components/schemas/bridge_mysql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pulsar.producer_buffer": {
        "properties": {
          "mode": {
            "default": "memory",
            "type": "string",
            "enum": [
              "memory",
              "disk",
              "hybrid"
            ],
            "description": "消息缓存模式。<br/><code>memory</code>: 所有的消息都缓存在内存里。如果 EMQX 服务重启，缓存的消息会丢失。<br/><code>disk</code>: 缓存到磁盘上。EMQX 重启后会继续发送重启前未发送完成的消息。<br/><code>hybrid</code>: 先将消息缓存在内存中，当内存中的消息堆积超过一定限制（配置项 <code>segment_bytes</code> 描述了该限制）后，后续的消息会缓存到磁盘上。与 <code>memory</code> 模式一样，如果 EMQX 服务重启，缓存的消息会丢失。"
          },
          "per_partition_limit": {
            "default": "2GB",
            "type": "string",
            "description": "为每个 Pulsar 分区设置的最大缓存字节数。当超过这个上限之后，老的消息会被丢弃，为新的消息腾出空间。",
            "example": "32MB"
          },
          "segment_bytes": {
            "default": "100MB",
            "type": "string",
            "description": "当缓存模式是 <code>disk</code> 或 <code>hybrid</code> 时适用。该配置用于指定缓存到磁盘上的文件的大小。",
            "example": "32MB"
          },
          "memory_overload_protection": {
            "default": false,
            "type": "boolean",
            "description": "缓存模式是 <code>memory</code> 或 <code>hybrid</code> 时适用。当系统处于高内存压力时，从队列中丢弃旧的消息以减缓内存增长。内存压力值由配置项 <code>sysmon.os.sysmem_high_watermark</code> 决定。注意，该配置仅在 Linux 系统中有效。"
          }
        },
        "type": "object"
      },
      "bridge_http.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "http"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作动作的可读描述。"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "parameters": {
            "description": "HTTP 动作的参数",
            "$ref": "#/components/schemas/bridge_http.parameters_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_http.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.post_connector": {
        "required": [
          "database",
          "name",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "clickhouse"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "url": {
            "type": "string",
            "description": "你想连接到的 Clickhouse 服务器的 HTTP URL（例如 http://myhostname:8123）。",
            "example": "http://127.0.0.1"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_clickhouse.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_http.post": {
        "required": [
          "name",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "webhook",
              "http"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作动作的可读描述。"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或停用动作"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接到 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "连接池类型。可以是random、hash之一。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
            "minimum": 1
          },
          "request": {
            "type": "object",
            "deprecated": true,
            "description": "This field is never used, so we deprecated it since 5.3.2.",
            "example": {}
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "url": {
            "type": "string",
            "description": "HTTP 动作的 URL。<br/><br/>此路径允许使用带有变量的模板，但变量不能用于方案、主机或端口部分。<br/><br/>例如，<code> http://localhost:9901/${topic} </code> 是允许的，但<br/><code> http://${host}:9901/message </code> 或 <code> http://localhost:${port}/message </code><br/>是不允许的。"
          },
          "direction": {
            "type": "string",
            "enum": [
              "egress"
            ],
            "deprecated": true
          },
          "local_topic": {
            "type": "string",
            "description": "将要转发到 HTTP 服务器的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果将此动作用作规则的操作（EMQX 规则引擎），并且同时配置了 local_topic，那么将同时转发从规则获取的数据和与 local_topic 匹配的 MQTT 消息。"
          },
          "method": {
            "default": "post",
            "type": "string",
            "enum": [
              "post",
              "put",
              "get",
              "delete"
            ],
            "description": "HTTP 请求的方法。所有可用的方法包括：post、put、get、delete。<br/><br/>允许使用带有变量的模板。"
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "type": "object",
            "description": "HTTP 请求头。<br/><br/>允许使用带有变量的模板。",
            "example": {},
            "is_template": true
          },
          "body": {
            "type": "string",
            "description": "HTTP 请求的主体。<br/><br/>如果未提供，主体将是所有可用字段的 JSON 对象。<br/><br/>这里的“所有可用字段”是指在触发此 Webhook 时的 MQTT 消息的上下文（当 local_topic 已设置并接收到 MQTT 消息时触发），<br/>或者当此 Webhook 用作规则的动作时，在触发此 Webhook 时的事件上下文。<br/>允许使用带有变量的模板。"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "如果发送请求时出错，最大的重试次数。",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "description": "HTTP 请求超时时间",
            "example": "32s"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_http.v1_resource_opts"
          }
        },
        "type": "object"
      },
      "message_transformation_http_api.dryrun_transformation": {
        "required": [
          "message",
          "transformation"
        ],
        "properties": {
          "transformation": {
            "$ref": "#/components/schemas/message_transformation.transformation"
          },
          "message": {
            "$ref": "#/components/schemas/message_transformation_http_api.dryrun_input_message"
          }
        },
        "type": "object"
      },
      "schema_validation_http_api.reorder": {
        "required": [
          "order"
        ],
        "properties": {
          "order": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "bridge_influxdb.get_api_v2": {
        "required": [
          "bucket",
          "name",
          "org",
          "token",
          "type",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 InfluxDB。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 InfluxDB。"
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "使用 InfluxDB API Line Protocol 写入 InfluxDB 的数据，支持占位符<br/><br/>参考 [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) 及<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR: <br/><br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>注意，整形数值占位符后需要添加一个字符 `i` 类型标识。例如 `${payload.int_value}i`"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 InfluxDB 默认端口 8086。"
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "InfluxDB 时间精度。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "bucket": {
            "type": "string",
            "description": "InfluxDB bucket 名称。"
          },
          "org": {
            "type": "string",
            "description": "InfluxDB 组织名称。"
          },
          "token": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB 令牌。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "type": {
            "type": "string",
            "enum": [
              "influxdb_api_v2"
            ],
            "description": "桥接类型。"
          },
          "name": {
            "type": "string",
            "description": "桥接名称。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          }
        },
        "type": "object"
      },
      "bridge_influxdb.put_api_v2": {
        "required": [
          "bucket",
          "org",
          "token",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 InfluxDB。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 InfluxDB。"
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "使用 InfluxDB API Line Protocol 写入 InfluxDB 的数据，支持占位符<br/><br/>参考 [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) 及<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR: <br/><br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>注意，整形数值占位符后需要添加一个字符 `i` 类型标识。例如 `${payload.int_value}i`"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 InfluxDB 默认端口 8086。"
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "InfluxDB 时间精度。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "bucket": {
            "type": "string",
            "description": "InfluxDB bucket 名称。"
          },
          "org": {
            "type": "string",
            "description": "InfluxDB 组织名称。"
          },
          "token": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB 令牌。",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "bridge_redis.creation_opts_redis_single": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.consumer_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "30s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge_mongodb.post_rs": {
        "required": [
          "database",
          "mongo_type",
          "name",
          "replica_set_name",
          "resource_opts",
          "servers",
          "type"
        ],
        "properties": {
          "mongo_type": {
            "default": "rs",
            "type": "string",
            "enum": [
              "rs"
            ],
            "description": "副本集。当MongoDB服务器以`副本集`模式运行时，必须设置为`rs`。"
          },
          "servers": {
            "type": "string",
            "description": "集群连接的节点列表。节点应使用逗号分隔，例如：节点[,节点]。<br/>对于每个节点，应该是要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机条目具有以下形式：主机[:端口]。<br/>如果未指定[:端口]，则使用 MongoDB 的默认端口27017。"
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "写入模式"
          },
          "r_mode": {
            "default": "master",
            "type": "string",
            "enum": [
              "master",
              "slave_ok"
            ],
            "description": "读取模式。"
          },
          "replica_set_name": {
            "type": "string",
            "description": "副本集的名称。"
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "使用 DNS SRV 记录。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。"
          },
          "auth_source": {
            "type": "string",
            "description": "与用户认证信息关联的数据库名称。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或停用该 MongoDB 动作"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "数据将存储在其中的集合"
          },
          "payload_template": {
            "type": "string",
            "description": "用于格式化发送消息的模板。如果未定义，规则引擎将使用 JSON 格式序列化所有可见输入，例如 clientid、主题、有效载荷等。"
          },
          "resource_opts": {
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "mongodb_rs"
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_http.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "parameters": {
            "description": "HTTP 动作的参数",
            "$ref": "#/components/schemas/bridge_http.parameters_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_http.action_resource_opts"
          }
        },
        "type": "object"
      },
      "emqx.ssl_client_opts": {
        "properties": {
          "cacertfile": {
            "type": "string",
            "description": "受信任的 PEM 格式 CA  证书捆绑文件<br/><br/>此文件中的证书用于验证 TLS 对等方的证书。<br/>如果要信任新 CA，请将新证书附加到文件中。<br/>无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/><br/>注意：从文件中失效（删除）证书不会影响已建立的连接。"
          },
          "cacerts": {
            "default": false,
            "type": "boolean",
            "deprecated": true
          },
          "certfile": {
            "type": "string",
            "description": "PEM 格式证书链文件<br/><br/>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，<br/>然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。<br/>根 CA 证书是可选的，如果想要添加，应加到文件到最末端。"
          },
          "keyfile": {
            "type": "string",
            "description": "PEM 格式的私钥文件。"
          },
          "verify": {
            "default": "verify_none",
            "type": "string",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "description": "启用或禁用对等验证。"
          },
          "reuse_sessions": {
            "default": true,
            "type": "boolean",
            "description": "启用 TLS 会话重用。"
          },
          "depth": {
            "default": 10,
            "type": "integer",
            "description": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。<br/>因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/><br/>如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/><br/>如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
            "minimum": 0
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
            "example": ""
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "type": "array",
            "description": "支持所有 TLS/DTLS 版本<br/><br/>注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
            "items": {
              "type": "string"
            }
          },
          "ciphers": {
            "default": [],
            "type": "array",
            "description": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。<br/><br/><br/>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。<br/>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。<br/><br/>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。<br/>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/><br/>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。<br/>不兼容的密码套件将被自动删除。<br/><br/>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。<br/><br/><br/><br/>注：PSK 的 Ciphers 不支持 tlsv1.3<br/><br/>如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。<br/><br/><br/><br/>PSK 密码套件：<br/><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            }
          },
          "secure_renegotiate": {
            "default": true,
            "type": "boolean",
            "description": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。<br/>RFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。"
          },
          "log_level": {
            "default": "notice",
            "type": "string",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "description": "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。"
          },
          "hibernate_after": {
            "default": "5s",
            "type": "string",
            "description": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
            "example": "12m"
          },
          "partial_chain": {
            "type": "string",
            "enum": [
              true,
              false,
              "two_cacerts_from_cacertfile",
              "cacert_from_cacertfile"
            ],
            "description": "启用或禁用带有 partial_chain 的对等证书验证。<br/>当本地在 x509 路径验证过程中验证对等证书时<br/>它会构建一个从对等证书开始<br/>并以信任锚结束的证书链。<br/>默认情况下，如果设置为 `false`，信任锚是根 CA，<br/>证书链必须是完整的。<br/>然而，如果设置为 `true` 或 `cacert_from_cacertfile`，<br/>则 `cacertfile` 中的最后一个证书将被用作信任锚证书（中间 CA），<br/>这将在路径验证中创建一个部分链。<br/>或者，如果配置为 `two_cacerts_from_cacertfile`，`cacertfile` 中的<br/>最后两个证书中的一个将被用作信任锚证书，<br/>形成一个部分链。<br/>此选项特别适用于中间 CA 证书的轮换。<br/>然而，请注意这会带来一些额外的开销，<br/>因此应仅用于证书轮换目的。"
          },
          "verify_peer_ext_key_usage": {
            "type": "string",
            "description": "验证对等证书中的扩展密钥用途。<br/>为了额外的对等证书验证，这里定义的值必须出现在对等证书的 `Extended Key Usage` 中，<br/>对等证书的 'Extended Key Usage' 定义在<br/>[rfc5280](https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.12) 中。<br/><br/>允许的值包括<br/>- `clientAuth`<br/>- `serverAuth`<br/>- `codeSigning`<br/>- `emailProtection`<br/>- `timeStamping`<br/>- `ocspSigning`<br/>- 原始 OID，例如： \"OID:1.3.6.1.5.5.7.3.2\" 表示 `id-pk 2`，等同于 `clientAuth`<br/><br/>也支持逗号分隔的字符串，用于验证多个密钥用途。<br/><br/>例如： `\"serverAuth,OID:1.3.6.1.5.5.7.3.2\"`"
          },
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "启用 TLS。"
          },
          "server_name_indication": {
            "description": "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/><br/>例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，<br/>例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/><br/>如果未指定，它将默认为使用的主机名字符串<br/>建立连接，除非使用 IP 地址<br/><br/>然后，主机名也用于对等机的主机名验证证书<br/><br/>特殊值 <code>disable</code> 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
            "example": "disable",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "disable"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge_mysql.get_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mysql"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "type": "string",
            "description": "用于连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>主机条目的格式如下：主机[:端口]。<br/><br/>如果未指定[:端口]，将使用 MySQL 的默认端口3306。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mysql.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.put": {
        "required": [
          "database",
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "可以使用 ${field} 占位符来引用消息与客户端上下文中的变量，请确保对应字段存在且数据格式符合预期。此处不支持 [SQL 预处理](https://docs.emqx.com/zh/enterprise/v5.0/data-integration/data-bridges.html#sql-预处理)。"
          },
          "batch_value_separator": {
            "default": ", ",
            "type": "string",
            "description": "默认为逗号 ','，适用于 VALUE 格式。您也可以使用其他分隔符， 请参考 [INSERT INTO 语句](https://clickhouse.com/docs/en/sql-reference/statements/insert-into)。"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 Clickhouse。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_clickhouse.creation_opts"
          },
          "url": {
            "type": "string",
            "description": "你想连接到的 Clickhouse 服务器的 HTTP URL（例如 http://myhostname:8123）。",
            "example": "http://127.0.0.1"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "rule_engine.rule_engine": {
        "properties": {
          "ignore_sys_message": {
            "default": true,
            "type": "boolean",
            "description": "当设置为“true”（默认）时，规则引擎将忽略发布到 $SYS 主题的消息。"
          },
          "jq_function_default_timeout": {
            "default": "10s",
            "type": "string",
            "description": "规则引擎内建函数 `jq` 默认时间限制",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_mysql.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mysql"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "特定于此动作类型的附加参数",
            "$ref": "#/components/schemas/bridge_mysql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_s3.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "s3"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "将传入事件上传到 S3 API 兼容服务的操作。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_s3.s3_direct_upload_parameters"
              },
              {
                "$ref": "#/components/schemas/bridge_s3.s3_aggregated_upload_parameters"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_s3.s3_upload_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rabbitmq"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "动作配置定义了此动作输出如何将消息发送到远程 RabbitMQ 代理。",
            "$ref": "#/components/schemas/bridge_rabbitmq.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_rabbitmq.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_tdengine.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "tdengine"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "TDengine 动作的参数。",
            "$ref": "#/components/schemas/bridge_tdengine.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.put_connector": {
        "required": [
          "database",
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "url": {
            "type": "string",
            "description": "你想连接到的 Clickhouse 服务器的 HTTP URL（例如 http://myhostname:8123）。",
            "example": "http://127.0.0.1"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_clickhouse.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "message_transformation_http_api.reorder": {
        "required": [
          "order"
        ],
        "properties": {
          "order": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.get_connector": {
        "required": [
          "name",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "hstreamdb"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "url": {
            "default": "http://127.0.0.1:6570",
            "type": "string",
            "description": "HStreamDB 服务器 URL。使用 gRPC http 服务器地址。"
          },
          "grpc_timeout": {
            "default": "30s",
            "type": "string",
            "description": "HStreamDB gRPC 连接超时时间。",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_hstreamdb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.put_rs": {
        "required": [
          "database",
          "mongo_type",
          "replica_set_name",
          "resource_opts",
          "servers"
        ],
        "properties": {
          "mongo_type": {
            "default": "rs",
            "type": "string",
            "enum": [
              "rs"
            ],
            "description": "副本集。当MongoDB服务器以`副本集`模式运行时，必须设置为`rs`。"
          },
          "servers": {
            "type": "string",
            "description": "集群连接的节点列表。节点应使用逗号分隔，例如：节点[,节点]。<br/>对于每个节点，应该是要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机条目具有以下形式：主机[:端口]。<br/>如果未指定[:端口]，则使用 MongoDB 的默认端口27017。"
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "写入模式"
          },
          "r_mode": {
            "default": "master",
            "type": "string",
            "enum": [
              "master",
              "slave_ok"
            ],
            "description": "读取模式。"
          },
          "replica_set_name": {
            "type": "string",
            "description": "副本集的名称。"
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "使用 DNS SRV 记录。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。"
          },
          "auth_source": {
            "type": "string",
            "description": "与用户认证信息关联的数据库名称。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或停用该 MongoDB 动作"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "数据将存储在其中的集合"
          },
          "payload_template": {
            "type": "string",
            "description": "用于格式化发送消息的模板。如果未定义，规则引擎将使用 JSON 格式序列化所有可见输入，例如 clientid、主题、有效载荷等。"
          },
          "resource_opts": {
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题数据源由桥接指定，或留空由规则动作指定。"
          },
          "parameters": {
            "description": "Kafka 生产者参数。",
            "$ref": "#/components/schemas/bridge_kafka.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_oracle.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "oracle"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_oracle.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.get_connector": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "name",
          "region",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "dynamo"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "url": {
            "type": "string",
            "description": "DynamoDB 的地址。"
          },
          "region": {
            "type": "string",
            "description": "AWS Dynamo 的区域"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "DynamoDB 的访问 ID。"
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "DynamoDB 的访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_dynamo.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.put_source": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "parameters": {
            "description": "Source 配置定义了此数据输入如何从远程 RabbitMQ 代理接收消息。",
            "$ref": "#/components/schemas/bridge_rabbitmq.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.source_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.consumer": {
        "required": [
          "topic_mapping"
        ],
        "properties": {
          "pull_max_messages": {
            "default": 100,
            "type": "integer",
            "description": "从 GCP PubSub 中在一个拉取请求里检索的最大消息数。 实际数量可能小于指定的值。",
            "minimum": 1
          },
          "topic_mapping": {
            "type": "array",
            "description": "定义 GCP PubSub 主题和 MQTT 主题之间的映射。必须包含至少一项。",
            "items": {
              "$ref": "#/components/schemas/bridge_gcp_pubsub.consumer_topic_mapping"
            }
          }
        },
        "type": "object"
      },
      "bridge_kinesis.put_producer": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "endpoint",
          "partition_key",
          "stream_name"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_kinesis.creation_opts"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "连接到 Amazon Kinesis 的访问密钥 ID。"
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "连接到 Amazon Kinesis 的 AWS 秘密访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "endpoint": {
            "type": "string",
            "description": "Amazon Kinesis 终端节点的 URL。",
            "example": "https://kinesis.us-east-1.amazonaws.com"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "发送请求时发生错误的最大重试次数。",
            "minimum": 0
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小",
            "minimum": 1
          },
          "payload_template": {
            "default": "${.}",
            "type": "string",
            "description": "用于格式化传出消息的模板。如果未定义，将以 JSON 格式发送所有可用的上下文。"
          },
          "stream_name": {
            "type": "string",
            "description": "消息将要被发布到的 Amazon Kinesis 流。"
          },
          "partition_key": {
            "type": "string",
            "description": "与发布消息关联的 Amazon Kinesis 分区键。支持格式为 ${var} 的占位符。"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 Amazon Kinesis 的 MQTT 主题过滤器。所有与主题匹配的 MQTT 'PUBLISH' 消息<br/>都将被转发。<br/><br/>注意：如果此动作用作规则的操作（EMQX 规则引擎），并且还配置了 'local_topic'，则将转发从规则获取的数据以及与 'local_topic' 匹配的 MQTT 消息。<br/>"
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "hstreamdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_hstreamdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_http.put_connector": {
        "required": [
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "url": {
            "type": "string",
            "description": "HTTP 动作的 URL。<br/><br/>此路径允许使用带有变量的模板，但变量不能用于方案、主机或端口部分。<br/><br/>例如，<code> http://localhost:9901/${topic} </code> 是允许的，但<br/><code> http://${host}:9901/message </code> 或 <code> http://localhost:${port}/message </code><br/>是不允许的。"
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "type": "object",
            "description": "HTTP 请求头。<br/><br/>允许使用带有变量的模板。",
            "example": {},
            "is_template": true
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接到 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "连接池类型。可以是random、hash之一。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
            "minimum": 1
          },
          "request": {
            "type": "object",
            "deprecated": true,
            "description": "This field is never used, so we deprecated it since 5.3.2.",
            "example": {}
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_http.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.action_parameters": {
        "required": [
          "hash_key",
          "table"
        ],
        "properties": {
          "template": {
            "default": "",
            "type": "string",
            "description": "模板, 默认为空，为空时将会将整个消息存入数据库"
          },
          "hash_key": {
            "type": "string",
            "description": "DynamoDB 哈希键"
          },
          "range_key": {
            "type": "string",
            "description": "DynamoDB 范围健"
          },
          "table": {
            "type": "string",
            "description": "DynamoDB 的表。"
          }
        },
        "type": "object"
      },
      "rocketmq.get": {
        "required": [
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "rocketmq"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "template": {
            "default": "",
            "type": "string",
            "description": "模板, 默认为空，为空时将会将整个消息转发给 RocketMQ。 <br/><br/>            模板可以是任意带有占位符的合法字符串, 例如:<br/>            ${id}, ${username}, ${clientid}, ${timestamp}<br/><br/>            {\"id\" : ${id}, \"username\" : ${username}}"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 RocketMQ。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "strategy": {
            "default": "roundrobin",
            "description": "生产者键派发策略，默认为 `roundrobin`，也支持占位符，如：`clientid`、`messageid`、`username`。",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "roundrobin"
                ]
              }
            ]
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "servers": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 RocketMQ 默认端口 9876。"
          },
          "namespace": {
            "type": "string",
            "description": "如果你正在使用阿里云的 RocketMQ 服务并且启用了命名空间，或者您在自己的 RocketMQ 服务器中配置了命名空间，则必须配置命名空间字段。对于阿里云中的 RocketMQ 服务，命名空间就是实例 ID。"
          },
          "topic": {
            "default": "TopicTest",
            "type": "string",
            "description": "RocketMQ 主题"
          },
          "access_key": {
            "default": "",
            "type": "string",
            "description": "RocketMQ 服务器的 `accessKey`。"
          },
          "secret_key": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ 服务器的 `secretKey`。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "security_token": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ 服务器安全令牌",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "RocketMQ 驱动同步调用的超时时间。",
            "example": "12m"
          },
          "refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "RocketMQ 主题路由更新间隔。",
            "example": "12m"
          },
          "send_buffer": {
            "default": "1024KB",
            "type": "string",
            "description": "RocketMQ 驱动的套字节发送消息的缓冲区大小",
            "example": "32MB"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_elasticsearch.action_update": {
        "required": [
          "action",
          "id",
          "index"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "update"
            ],
            "description": "update"
          },
          "index": {
            "type": "string",
            "description": "执行操作的索引名称或索引别名。<br/>此参数是必需的。",
            "example": "${payload.index}"
          },
          "id": {
            "type": "string",
            "description": "文档 ID。如果没有指定 ID，将自动生成。",
            "example": "${payload.id}"
          },
          "doc": {
            "type": "string",
            "description": "JSON 文档模板，如果留空则为包含所有可用字段的 JSON 文本，如 clientid、topic、payload 等。",
            "example": "${payload.doc}"
          },
          "doc_as_upsert": {
            "default": false,
            "type": "boolean",
            "description": "你可以将 doc_as_upsert 设置为 true，使用 doc 的内容作为 upsert 值，而不是发送一个不完整的文件加上一个 upsert 文件。"
          },
          "routing": {
            "type": "string",
            "description": "用于将操作路由到特定分片的自定义值。",
            "example": "${payload.routing}"
          },
          "require_alias": {
            "type": "boolean",
            "description": "如果为 true, 则请求的操作必须针对一个索引别名。默认为 false。"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "如果发送请求时出错，最大的重试次数。",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "rule_engine.republish_args": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "重新发布消息的目标主题。<br/>允许使用带有变量的模板，请参阅“republish_args”的描述。",
            "example": "a/1"
          },
          "qos": {
            "default": "${qos}",
            "description": "要重新发布的消息的 qos。允许使用带有变量的模板，请参阅“republish_args”的描述。<br/>默认为 ${qos}。 如果从规则的选择结果中没有找到变量 ${qos}，则使用 0。",
            "example": "${qos}",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "maximum": 2,
                "type": "integer",
                "minimum": 0,
                "example": 0
              }
            ]
          },
          "retain": {
            "default": "${retain}",
            "description": "要重新发布的消息的“保留”标志。允许使用带有变量的模板，请参阅“republish_args”的描述。<br/>默认为 ${retain}。 如果从所选结果中未找到变量 ${retain}，则使用 false。",
            "example": "${retain}",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "payload": {
            "default": "${payload}",
            "type": "string",
            "description": "要重新发布的消息的有效负载。允许使用带有变量的模板，请参阅“republish_args”的描述。<br/>默认为 ${payload}。 如果从所选结果中未找到变量 ${payload}，则使用字符串 \"undefined\"。",
            "example": "${payload}"
          },
          "mqtt_properties": {
            "default": {},
            "description": "从消息中应该获取哪个变量作为消息的 MQTT 发布属性。<br/>可以使用像<code>${.payload.content_type}</code>这样的占位符。",
            "$ref": "#/components/schemas/rule_engine.republish_mqtt_properties"
          },
          "user_properties": {
            "default": "${user_properties}",
            "type": "string",
            "description": "指定使用哪个变量来填充 MQTT 消息的 User-Property 列表。这个变量的值必须是一个 map 类型。<br/>可以设置成 <code>${pub_props.'User-Property'}</code> 或者<br/>使用 <code>SELECT *,pub_props.'User-Property' as user_properties</code> 来把源 MQTT 消息<br/>的 User-Property 列表用于填充。<br/>也可以使用 <code>map_put</code> 函数来添加新的 User-Property，<br/><code>map_put('my-prop-name', 'my-prop-value', user_properties) as user_properties</code><br/>注意：MQTT 协议允许一个消息中出现多次同一个 property 名，但是 EMQX 的规则引擎不允许。",
            "example": "${pub_props.'User-Property'}"
          },
          "direct_dispatch": {
            "default": false,
            "description": "Enable direct dispatch to subscribers without initiating a new message publish event.<br/>When set to `true`, this prevents the recursive processing of a message by the same action<br/>and is used when the output message does not require further processing.<br/><br/>However, enabling this feature has several limitations:<br/><br/>- The output message from this action is not retained.<br/>- It does not trigger other rules that operate based on the output topic of this action.<br/>- It does not activate rules that select from the `$events/message_publish`.<br/>- It does not trigger plugins that use the `'message.publish'` hook.<br/>- Topic metrics are not collected for the output message of this action.<br/>- Message schema validation is not applied (feature of EMQX Enterprise).<br/>- Message transformation processes are not applied (feature of EMQX Enterprise).",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "type": "object"
      },
      "pulsar.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pulsar"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/pulsar.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/pulsar.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mysql.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "特定于此动作类型的附加参数",
            "$ref": "#/components/schemas/bridge_mysql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "redis.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "redis"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作对动作的用户可读描述"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "动作的参数。",
            "$ref": "#/components/schemas/bridge_redis.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/redis.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_opents.action_parameters": {
        "properties": {
          "data": {
            "default": [],
            "type": "array",
            "description": "OpenTSDB 动作参数数据。",
            "items": {
              "$ref": "#/components/schemas/bridge_opents.action_parameters_data"
            }
          }
        },
        "type": "object"
      },
      "syskeeper.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "syskeeper_forwarder"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作的名称"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "Syskeeper 动作的参数",
            "$ref": "#/components/schemas/syskeeper.parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/syskeeper.creation_opts"
          }
        },
        "type": "object"
      },
      "bridge.metrics": {
        "properties": {
          "dropped": {
            "type": "integer",
            "description": "被丢弃的消息个数。"
          },
          "dropped.other": {
            "type": "integer",
            "description": "因为其他原因被丢弃的消息个数。"
          },
          "dropped.queue_full": {
            "type": "integer",
            "description": "因为队列已满被丢弃的消息个数。"
          },
          "dropped.resource_not_found": {
            "type": "integer",
            "description": "因为资源不存在被丢弃的消息个数。"
          },
          "dropped.resource_stopped": {
            "type": "integer",
            "description": "因为资源已停用被丢弃的消息个数。"
          },
          "matched": {
            "type": "integer",
            "description": "Bridge 被匹配到（被请求）的次数。"
          },
          "queuing": {
            "type": "integer",
            "description": "当前被缓存到磁盘队列的消息个数。"
          },
          "retried": {
            "type": "integer",
            "description": "重试的次数。"
          },
          "failed": {
            "type": "integer",
            "description": "发送失败的消息个数。"
          },
          "inflight": {
            "type": "integer",
            "description": "已异步地发送但没有收到 ACK 的消息个数。"
          },
          "success": {
            "type": "integer",
            "description": "已经发送成功的消息个数。"
          },
          "rate": {
            "type": "number",
            "description": "执行操作的速率，次/秒"
          },
          "rate_max": {
            "type": "number",
            "description": "执行操作的最大速率，次/秒"
          },
          "rate_last5m": {
            "type": "number",
            "description": "5 分钟平均速率，次/秒"
          },
          "received": {
            "type": "number",
            "description": "从远程系统收到的消息个数。"
          }
        },
        "type": "object"
      },
      "audit.audit_list": {
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/audit.audit"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/public.meta"
          }
        },
        "type": "object"
      },
      "bridge_kafka.get_connector": {
        "required": [
          "bootstrap_hosts",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka_producer"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "用逗号分隔的 <code>host[:port]</code> 主机列表。默认端口号为 9092。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "建立 TCP 连接时的最大等待时长（若启用认证，这个等待时长也包含完成认证所需时间）。",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "刷新 Kafka broker 和 Kafka 主题元数据段最短时间间隔。设置太小可能会增加 Kafka 压力。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "刷新元数据时最大等待时长。",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "认证参数。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "更多 Socket 参数设置。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.get_api_v1": {
        "required": [
          "database",
          "name",
          "type",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 InfluxDB。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 InfluxDB。"
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "使用 InfluxDB API Line Protocol 写入 InfluxDB 的数据，支持占位符<br/><br/>参考 [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) 及<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR: <br/><br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>注意，整形数值占位符后需要添加一个字符 `i` 类型标识。例如 `${payload.int_value}i`"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 InfluxDB 默认端口 8086。"
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "InfluxDB 时间精度。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "database": {
            "type": "string",
            "description": "InfluxDB 数据库。"
          },
          "username": {
            "type": "string",
            "description": "InfluxDB 用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB 密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "type": {
            "type": "string",
            "enum": [
              "influxdb_api_v1"
            ],
            "description": "桥接类型。"
          },
          "name": {
            "type": "string",
            "description": "桥接名称。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_bridge_mqtt": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "$bridges/mqtt:*"
            ],
            "description": "事件类型"
          },
          "id": {
            "type": "string",
            "description": "消息 ID"
          },
          "payload": {
            "type": "string",
            "description": "消息负载"
          },
          "topic": {
            "type": "string",
            "description": "消息主题"
          },
          "server": {
            "type": "string",
            "description": "MQTT broker 的 IP 地址（或主机名）和端口，采用 IP:Port 格式"
          },
          "dup": {
            "type": "string",
            "description": "MQTT 消息的 DUP 标志"
          },
          "retain": {
            "type": "string",
            "description": "是否是保留消息"
          },
          "message_received_at": {
            "type": "integer",
            "description": "消息被接受的时间"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "消息的 QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "bridge_cassa.action_parameters": {
        "properties": {
          "cql": {
            "default": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "CQL 模板"
          }
        },
        "type": "object"
      },
      "connector_aggregator.container_csv": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "csv"
            ],
            "description": "Records (events) will be aggregated and uploaded as a CSV file."
          },
          "column_order": {
            "default": [],
            "type": "array",
            "description": "Event fields that will be ordered first as columns in the resulting CSV file.<br/><br/>Regardless of this setting, resulting CSV will contain all the fields of aggregated events, but all the columns not explicitly mentioned here will be ordered after the ones listed here in the lexicographical order.",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "bridge_mysql.put": {
        "required": [
          "database",
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或停用该动作"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL 模版"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 MySQL 的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果此动作用作规则的操作（EMQX 规则引擎），并且还配置了 local_topic，则规则中获取的数据和与 local_topic 匹配的 MQTT 消息都将被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "用于连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>主机条目的格式如下：主机[:端口]。<br/><br/>如果未指定[:端口]，将使用 MySQL 的默认端口3306。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.post_sharded": {
        "required": [
          "database",
          "mongo_type",
          "name",
          "resource_opts",
          "servers",
          "type"
        ],
        "properties": {
          "mongo_type": {
            "default": "sharded",
            "type": "string",
            "enum": [
              "sharded"
            ],
            "description": "分片集群。当 MongoDB 服务器以`分片`模式运行时，必须设置为`sharded`。"
          },
          "servers": {
            "type": "string",
            "description": "集群连接的节点列表。节点应使用逗号分隔，例如：节点[,节点]。<br/>对于每个节点，应该是要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机条目具有以下形式：主机[:端口]。<br/>如果未指定[:端口]，则使用 MongoDB 的默认端口27017。"
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "写入模式"
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "使用 DNS SRV 记录。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。"
          },
          "auth_source": {
            "type": "string",
            "description": "与用户认证信息关联的数据库名称。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或停用该 MongoDB 动作"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "数据将存储在其中的集合"
          },
          "payload_template": {
            "type": "string",
            "description": "用于格式化发送消息的模板。如果未定义，规则引擎将使用 JSON 格式序列化所有可见输入，例如 clientid、主题、有效载荷等。"
          },
          "resource_opts": {
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "mongodb_sharded"
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "connector_mqtt.post_connector": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mqtt"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "将发布消息到远程代理的 MQTT 客户端池的大小。<br/><br/>每个 MQTT 客户端都将分配'clientid'，格式为'${clientid_prefix}:${bridge_name}:egress:${node}:${n}'<br/>其中'n'是池中客户端的编号。",
            "minimum": 1
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_mqtt.resource_opts"
          },
          "mode": {
            "default": "cluster_shareload",
            "type": "string",
            "enum": [
              "cluster_shareload"
            ],
            "deprecated": true,
            "description": "MQTT 动作的模式。<br/><br/>- cluster_shareload：在 emqx 集群中的每个节点上创建一个 MQTT 连接。<br/><br/>在'cluster_shareload'模式下，来自远程代理的传入负载通过<br/>使用共享订阅进行共享。<br/><br/>请注意，'clientid'将以节点名称作为后缀，以避免<br/>不同节点之间的 clientid 冲突。并且我们只能使用共享订阅<br/>作为入口连接的'remote.topic'的主题过滤器。"
          },
          "server": {
            "type": "string",
            "description": "远程 MQTT 代理的主机和端口"
          },
          "clientid_prefix": {
            "type": "string",
            "description": "附加到 egress 动作使用的 clientid 前缀（可选）。"
          },
          "reconnect_interval": {
            "type": "string",
            "deprecated": true
          },
          "proto_ver": {
            "default": "v4",
            "type": "string",
            "enum": [
              "v3",
              "v4",
              "v5"
            ],
            "description": "MQTT协议版本"
          },
          "bridge_mode": {
            "default": false,
            "type": "boolean",
            "description": "如果启用桥接模式。<br/>注意：此设置仅适用于 MQTT 协议版本早于5.0的情况，远程 MQTT<br/>代理必须支持此功能。<br/>如果将 bridge_mode 设置为true，则桥接将指示远程代理它是一个桥接而不是普通客户端。<br/>这意味着循环检测将更加有效，并且保留的消息将被正确传递。"
          },
          "username": {
            "type": "string",
            "description": "MQTT 协议的用户名"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "MQTT 协议的密码",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "在重新连接到入口动作时是否启动新会话"
          },
          "keepalive": {
            "default": "300s",
            "type": "string",
            "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "MQTT 协议的最大 inflight（已发送但未确认）消息数",
            "minimum": 0
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "clickhouse"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_clickhouse.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge.node_status": {
        "properties": {
          "node": {
            "type": "string",
            "description": "节点的名字",
            "example": "emqx@127.0.0.1"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ]
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.post": {
        "required": [
          "base_url",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "iotdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或禁用该桥接"
          },
          "authentication": {
            "default": "auth_basic",
            "description": "认证信息",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_iotdb.auth_basic"
              }
            ]
          },
          "is_aligned": {
            "default": false,
            "type": "boolean",
            "description": "是否对齐时间序列。"
          },
          "device_id": {
            "type": "string",
            "description": "IoTDB 的设备 ID（DeviceID）。可以使用一个占位符。如果留空则 MQTT 消息体中必须有一个 `device_id` 字段，<br/>或者 EMQX 规则引擎的 SQL 必须输出一个 `device_id` 字段。"
          },
          "iotdb_version": {
            "default": "v1.3.x",
            "type": "string",
            "enum": [
              "v1.3.x",
              "v1.1.x",
              "v1.0.x",
              "v0.13.x"
            ],
            "description": "IoTDB 版本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_iotdb.creation_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接到 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "连接池类型。可以是random、hash之一。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "base_url": {
            "type": "string",
            "description": "IoTDB REST 服务的 URL。",
            "example": "http://127.0.0.1"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "HTTP 请求的最大重试次数。",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "bridge_mysql.action_parameters": {
        "properties": {
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL 模版"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.put_connector": {
        "required": [
          "dbname"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "default": "127.0.0.1:4001",
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>主机条目的格式如下：主机名[:端口]。<br/><br/>如果未指定 [:端口]，则使用 GreptimeDB 的默认端口 8086。"
          },
          "dbname": {
            "type": "string",
            "description": "GreptimeDB 数据库"
          },
          "username": {
            "type": "string",
            "description": "GreptimeDB 用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "GreptimeDB 密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_greptimedb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.action_parameters": {
        "required": [
          "stream"
        ],
        "properties": {
          "stream": {
            "type": "string",
            "description": "HStreamDB 流名称"
          },
          "partition_key": {
            "type": "string",
            "description": "HStreamDB 分区键。支持占位符。"
          },
          "grpc_flush_timeout": {
            "default": "10s",
            "type": "string",
            "description": "将 gRPC 调用刷新到 HStreamDB 服务器的时间间隔。",
            "example": "32s"
          },
          "record_template": {
            "default": "${payload}",
            "type": "string",
            "description": "要转发到 HStreamDB 的 HStream 记录模板。支持占位符。<br><br/>注意：当您使用'原始记录'模板（这意味着数据不是有效的 JSON）时，您应该在 HStream 中使用 'read' 或 'subscription' 来获取数据。"
          },
          "aggregation_pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Record 聚合池的大小。更大的聚合池可以提升并行处理能力，但可能会因为批处理变小而导致效率降低。",
            "minimum": 1
          },
          "max_batches": {
            "default": 500,
            "type": "integer",
            "description": "刷新队列中未确认批次的最大数量。",
            "minimum": 1
          },
          "writer_pool_size": {
            "default": 8,
            "type": "integer",
            "description": "写入池大小。更大的池规模可能增加并行化和并发写入操作，可能提升吞吐量。但需权衡内存消耗和资源竞争。",
            "minimum": 1
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "单个请求中可以发送的最大插入数据子句数量。",
            "minimum": 1
          },
          "batch_interval": {
            "default": "500ms",
            "type": "string",
            "description": "两次连续（批处理）请求之间允许的最大间隔。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_timescale.post_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "timescale"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "type": "string",
            "description": "用于连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目具有以下格式：Host[:Port]。<br/><br/>如果未指定 [:Port]，将使用 PostgreSQL 默认端口5432。"
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "在连接中禁用预处理语句的使用。<br/>某些端点，如 PGBouncer 或 Transaction 模式下的 Supabase，<br/>不支持像处理语句这样的会话功能。 <br/> 对于此类连接，应启用此选项。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.get_connector": {
        "required": [
          "dbname",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "greptimedb"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "default": "127.0.0.1:4001",
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>主机条目的格式如下：主机名[:端口]。<br/><br/>如果未指定 [:端口]，则使用 GreptimeDB 的默认端口 8086。"
          },
          "dbname": {
            "type": "string",
            "description": "GreptimeDB 数据库"
          },
          "username": {
            "type": "string",
            "description": "GreptimeDB 用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "GreptimeDB 密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_greptimedb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_opents.post": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "opents"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "服务器的地址。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "summary": {
            "default": true,
            "type": "boolean",
            "description": "是否返回摘要信息。"
          },
          "details": {
            "default": false,
            "type": "boolean",
            "description": "是否返回详细信息。"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.post_producer": {
        "required": [
          "authentication",
          "bootstrap_hosts",
          "kafka",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_event_hub_producer"
            ],
            "description": "动作的类型。"
          },
          "name": {
            "type": "string",
            "description": "桥接名称，作为桥接的一个可读描述。"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "逗号分隔的 Azure Event Hubs Kafka 命名空间主机名 <code>host[:port]</code> ，用于引导客户端。  默认端口号为 9093。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "TCP 连接建立的最大等待时间（包括如果已启用身份认证则包括身份认证时间）",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "客户端在刷新 Azure Event Hubs Kafka 代理和主题元数据之前必须等待的最小时间间隔。设置太小的值可能会给 Azure Event Hubs 增加额外的负载。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "从 Azure Event Hubs 获取元数据时的最大等待时间。",
            "example": "32s"
          },
          "authentication": {
            "default": {},
            "description": "认证配置",
            "$ref": "#/components/schemas/bridge_azure_event_hub.auth_username_password"
          },
          "socket_opts": {
            "description": "额外的套接字选项。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "default": {
              "enable": true
            },
            "$ref": "#/components/schemas/bridge_azure_event_hub.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "local_topic": {
            "type": "string",
            "description": "将 MQTT 主题或主题过滤器作为数据源（动作输入）。如果使用规则动作作为数据源，则应将此配置保留为空，否则消息将在 Azure Event Hubs 中重复。"
          },
          "kafka": {
            "description": "Azure Event Hubs 生产者配置",
            "$ref": "#/components/schemas/bridge_azure_event_hub.producer_kafka_opts"
          }
        },
        "type": "object"
      },
      "action_couchbase.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "couchbase"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "Set of parameters for the action.",
            "$ref": "#/components/schemas/action_couchbase.parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/action_couchbase.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mysql.put_connector": {
        "required": [
          "database",
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "type": "string",
            "description": "用于连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>主机条目的格式如下：主机[:端口]。<br/><br/>如果未指定[:端口]，将使用 MySQL 的默认端口3306。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mysql.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.action_parameters": {
        "properties": {
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "数据将存储在其中的集合"
          },
          "payload_template": {
            "type": "string",
            "description": "用于格式化发送消息的模板。如果未定义，规则引擎将使用 JSON 格式序列化所有可见输入，例如 clientid、主题、有效载荷等。"
          }
        },
        "type": "object"
      },
      "bridge_kafka.post_connector": {
        "required": [
          "bootstrap_hosts",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka_producer"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "用逗号分隔的 <code>host[:port]</code> 主机列表。默认端口号为 9092。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "建立 TCP 连接时的最大等待时长（若启用认证，这个等待时长也包含完成认证所需时间）。",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "刷新 Kafka broker 和 Kafka 主题元数据段最短时间间隔。设置太小可能会增加 Kafka 压力。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "刷新元数据时最大等待时长。",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "认证参数。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "更多 Socket 参数设置。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sqlserver"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_sqlserver.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "influxdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "此动作类型特定的额外参数",
            "$ref": "#/components/schemas/bridge_influxdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "action_couchbase.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "file_transfer.storage_backend": {
        "properties": {
          "local": {
            "description": "EMQX 节点本地用文件系统于存储文件分片的相关配置。",
            "$ref": "#/components/schemas/file_transfer.local_storage"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.get_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mqtt"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "parameters": {
            "$ref": "#/components/schemas/bridge_mqtt_publisher.ingress_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.source_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_s3.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "将传入事件上传到 S3 API 兼容服务的操作。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_s3.s3_direct_upload_parameters"
              },
              {
                "$ref": "#/components/schemas/bridge_s3.s3_aggregated_upload_parameters"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_s3.s3_upload_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.get_connector": {
        "required": [
          "database",
          "name",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "clickhouse"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "url": {
            "type": "string",
            "description": "你想连接到的 Clickhouse 服务器的 HTTP URL（例如 http://myhostname:8123）。",
            "example": "http://127.0.0.1"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_clickhouse.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_cassa.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cassandra"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "动作的具体配置",
            "$ref": "#/components/schemas/bridge_cassa.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.post": {
        "required": [
          "name",
          "stream",
          "type",
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "direction": {
            "default": "egress",
            "type": "string",
            "enum": [
              "egress"
            ],
            "description": "此桥接的方向，必须为'egress'"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 HStreamDB 的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果此动作用作规则的操作（EMQX 规则引擎），并且还配置了 local_topic，则将同时转发从规则获取的数据和与 local_topic 匹配的 MQTT 消息。"
          },
          "record_template": {
            "default": "${payload}",
            "type": "string",
            "description": "要转发到 HStreamDB 的 HStream 记录模板。支持占位符。<br><br/>注意：当您使用'原始记录'模板（这意味着数据不是有效的 JSON）时，您应该在 HStream 中使用 'read' 或 'subscription' 来获取数据。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "url": {
            "default": "http://127.0.0.1:6570",
            "type": "string",
            "description": "HStreamDB 服务器 URL。使用 gRPC http 服务器地址。"
          },
          "stream": {
            "type": "string",
            "description": "HStreamDB 流名称"
          },
          "partition_key": {
            "type": "string",
            "description": "HStreamDB 分区键。支持占位符。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "grpc_timeout": {
            "default": "30s",
            "type": "string",
            "description": "HStreamDB gRPC 连接超时时间。",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "hstreamdb"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作对动作的用户可读描述。"
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_connack": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "client_connack"
            ],
            "description": "事件类型"
          },
          "reason_code": {
            "type": "string",
            "description": "错误码"
          },
          "clientid": {
            "type": "string",
            "description": "客户端 ID"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "清除会话"
          },
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "peername": {
            "type": "string",
            "description": "对等客户端的 IP 地址和端口"
          },
          "sockname": {
            "type": "string",
            "description": "本地监听的 IP 地址和端口"
          },
          "proto_name": {
            "type": "string",
            "description": "协议名称"
          },
          "proto_ver": {
            "type": "string",
            "description": "协议版本"
          },
          "keepalive": {
            "type": "integer",
            "description": "保持连接"
          },
          "expiry_interval": {
            "type": "integer",
            "description": "到期间隔"
          },
          "connected_at": {
            "type": "integer",
            "description": "客户端连接完成时的时刻"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.post_connector": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "name",
          "region",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "dynamo"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "url": {
            "type": "string",
            "description": "DynamoDB 的地址。"
          },
          "region": {
            "type": "string",
            "description": "AWS Dynamo 的区域"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "DynamoDB 的访问 ID。"
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "DynamoDB 的访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_dynamo.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_delivered": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "message_delivered"
            ],
            "description": "事件类型"
          },
          "id": {
            "type": "string",
            "description": "消息 ID"
          },
          "from_clientid": {
            "type": "string",
            "description": "事件来源客户端的 ID"
          },
          "from_username": {
            "type": "string",
            "description": "事件来源客户端的用户名"
          },
          "clientid": {
            "type": "string",
            "description": "客户端 ID"
          },
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "payload": {
            "type": "string",
            "description": "消息负载"
          },
          "peerhost": {
            "type": "string",
            "description": "对等客户端的 IP 地址"
          },
          "topic": {
            "type": "string",
            "description": "消息主题"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "消息被接受的时间"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "消息的 QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "bridge_redis.get_sentinel": {
        "required": [
          "command_template",
          "name",
          "sentinel",
          "servers",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 Redis 的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果此动作用作规则的动作（EMQX 规则引擎），并且还配置了 local_topic，则规则中获取的数据和与 local_topic 匹配的 MQTT 消息都将被转发。"
          },
          "command_template": {
            "type": "array",
            "description": "用于导出消息的 Redis 命令模板。每个列表元素代表一个命令名称或其参数。<br/>例如，要将有效负载推送到 Redis 列表中的键 msgs，元素应该如下所示：<br/>rpush，msgs，${payload}。",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_sentinel"
          },
          "servers": {
            "type": "string",
            "description": "集群将要连接的节点列表。 节点之间用逗号分隔，如：Node[,Node]。每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。"
          },
          "redis_type": {
            "default": "sentinel",
            "type": "string",
            "enum": [
              "sentinel"
            ],
            "description": "Sentinel 模式。 当 Redis 服务器在 Senitel 模式下运行时必须设置为 'sentinel' 。"
          },
          "sentinel": {
            "type": "string",
            "description": "Redis sentinel 模式下的集群名称。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis 数据库 ID。",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "redis_sentinel"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作对动作的用户可读描述"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          }
        },
        "type": "object"
      },
      "bridge.node_metrics": {
        "properties": {
          "node": {
            "type": "string",
            "description": "节点的名字",
            "example": "emqx@127.0.0.1"
          },
          "metrics": {
            "$ref": "#/components/schemas/bridge.metrics"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "IoTDB 动作参数",
            "$ref": "#/components/schemas/bridge_iotdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_iotdb.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.get": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "sqlserver"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 Microsoft SQL Server。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_sqlserver.creation_opts"
          },
          "driver": {
            "default": "ms-sql",
            "type": "string",
            "description": "SQL Server Driver 名称"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 SQL Server 默认端口 1433。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "default": "sa",
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "bridge_s3.s3_direct_upload_parameters": {
        "required": [
          "bucket",
          "key"
        ],
        "properties": {
          "bucket": {
            "type": "string",
            "description": "S3 桶的名称。"
          },
          "key": {
            "type": "string",
            "description": "S3 对象的键。"
          },
          "acl": {
            "type": "string",
            "enum": [
              "private",
              "public_read",
              "public_read_write",
              "authenticated_read",
              "bucket_owner_read",
              "bucket_owner_full_control"
            ],
            "description": "上传对象使用的 ACL。"
          },
          "headers": {
            "type": "object",
            "description": "包含在 S3 对象上传请求中的 HTTP 请求头，用于指定 S3 对象的内容类型、内容编码以及其他属性。",
            "example": {}
          },
          "mode": {
            "default": "direct",
            "type": "string",
            "enum": [
              "direct"
            ],
            "description": "启用将事件作为单独的对象上传到 S3 服务。"
          },
          "content": {
            "default": "${.}",
            "type": "string",
            "description": "S3 对象的内容。支持模板。"
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_dropped": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "message_dropped"
            ],
            "description": "事件类型"
          },
          "id": {
            "type": "string",
            "description": "消息 ID"
          },
          "reason": {
            "type": "string",
            "description": "消息被丢弃的原因"
          },
          "clientid": {
            "type": "string",
            "description": "客户端 ID"
          },
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "payload": {
            "type": "string",
            "description": "消息负载"
          },
          "peerhost": {
            "type": "string",
            "description": "对等客户端的 IP 地址"
          },
          "topic": {
            "type": "string",
            "description": "消息主题"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "消息被接受的时间"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "消息的 QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "bridge_elasticsearch.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "parameters": {
            "description": "ElasticSearch 动作参数",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_update"
              },
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_delete"
              },
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_create"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_elasticsearch.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mqtt"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "动作的具体配置。",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mqtt.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_matrix.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "特定于 PostgreSQL 动作的参数配置",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.auth_username_password": {
        "required": [
          "mechanism",
          "password",
          "username"
        ],
        "properties": {
          "mechanism": {
            "type": "string",
            "enum": [
              "plain",
              "scram_sha_256",
              "scram_sha_512"
            ],
            "description": "SASL 认证方法名称。"
          },
          "username": {
            "type": "string",
            "description": "SASL 认证的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "SASL 认证的密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "node_eviction.status_disabled": {
        "properties": {
          "status": {
            "default": "disabled",
            "type": "string",
            "enum": [
              "disabled"
            ]
          }
        },
        "type": "object"
      },
      "bridge_dynamo.get": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "hash_key",
          "name",
          "region",
          "table",
          "type",
          "url"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "dynamo"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "template": {
            "default": "",
            "type": "string",
            "description": "模板, 默认为空，为空时将会将整个消息存入数据库"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 DynamoDB。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "hash_key": {
            "type": "string",
            "description": "DynamoDB 哈希键"
          },
          "range_key": {
            "type": "string",
            "description": "DynamoDB 范围健"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_dynamo.creation_opts"
          },
          "url": {
            "type": "string",
            "description": "DynamoDB 的地址。"
          },
          "region": {
            "type": "string",
            "description": "AWS Dynamo 的区域"
          },
          "table": {
            "type": "string",
            "description": "DynamoDB 的表。"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "DynamoDB 的访问 ID。"
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "DynamoDB 的访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_consumer.get_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_consumer"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "parameters": {
            "description": "Source 配置。",
            "$ref": "#/components/schemas/gcp_pubsub_consumer.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/gcp_pubsub_consumer.source_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.v1_producer_kafka_opts": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Kafka 主题名称"
          },
          "message": {
            "description": "用于生成 Kafka 消息的模版。",
            "$ref": "#/components/schemas/bridge_kafka.kafka_message"
          },
          "max_batch_bytes": {
            "default": "896KB",
            "type": "string",
            "description": "最大消息批量字节数。大多数 Kafka 环境的默认最低值是 1 MB，EMQX 的默认值比 1 MB 更小是因为需要补偿 Kafka 消息编码所需要的额外字节（尤其是当每条消息都很小的情况下）。当单个消息的大小超过该限制时，它仍然会被发送，（相当于该批量中只有单个消息）。",
            "example": "32MB"
          },
          "compression": {
            "default": "no_compression",
            "type": "string",
            "enum": [
              "no_compression",
              "snappy",
              "gzip"
            ],
            "description": "压缩方法。"
          },
          "partition_strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "key_dispatch"
            ],
            "description": "设置消息发布时应该如何选择 Kafka 分区。<br/><br/><code>random</code>: 为每个消息随机选择一个分区。<br/><code>key_dispatch</code>: Hash Kafka message key to a partition number"
          },
          "required_acks": {
            "default": "all_isr",
            "type": "string",
            "enum": [
              "all_isr",
              "leader_only",
              "none"
            ],
            "description": "设置 Kafka leader 在返回给 EMQX 确认之前需要等待多少个 follower 的确认。<br/><br/><code>all_isr</code>: 需要所有的在线复制者都确认。<br/><code>leader_only</code>: 仅需要分区 leader 确认。<br/><code>none</code>: 无需 Kafka 回复任何确认。"
          },
          "kafka_headers": {
            "type": "string",
            "description": "请提供要用作 Kafka 头部的占位符<br/><br/>例如：<code>${pub_props}</code><br/><br/>请注意，占位符的值必须是对象形式的：<code>{\"foo\": \"bar\"}</code><br/>或者是键值对的数组形式：<code>[{\"key\": \"foo\", \"value\": \"bar\"}]</code>。"
          },
          "kafka_ext_headers": {
            "type": "array",
            "description": "请提供更多的 Kafka 头部键值对<br/><br/>这里的键值对将与 <code>kafka_headers</code> 字段的值合并，然后发送到 Kafka。",
            "items": {
              "$ref": "#/components/schemas/bridge_kafka.producer_kafka_ext_headers"
            }
          },
          "kafka_header_value_encode_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "json"
            ],
            "description": "Kafka 头部值编码模式<br/><br/> - None: 仅将二进制值添加到 Kafka 头部；<br/><br/> - JSON: 仅将 JSON 值添加到 Kafka 头部，并在发送前对其进行 JSON 字符串编码。"
          },
          "partition_count_refresh_interval": {
            "default": "60s",
            "type": "string",
            "description": "配置 Kafka 刷新分区数量的时间间隔。<br/>EMQX 发现 Kafka 分区数量增加后，会开始按 <code>partition_strategy<code> 配置，把消息发送到新的分区中。",
            "example": "1h"
          },
          "partitions_limit": {
            "default": "all_partitions",
            "description": "限制为给定主题生产数据的分区数量。<br/>特殊值 all_partitions 用于利用该主题的所有分区。<br/>将此设置为大于分区总数的值将不会产生任何效果。",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "all_partitions"
                ]
              }
            ]
          },
          "max_inflight": {
            "default": 10,
            "type": "integer",
            "description": "设置 Kafka 生产者（每个分区一个）在收到 Kafka 的确认前最多发送多少个请求（批量）。调大这个值通常可以增加吞吐量，但是，当该值设置大于 1 时存在消息乱序的风险。",
            "minimum": 1
          },
          "buffer": {
            "description": "配置消息缓存的相关参数。<br/><br/>当 EMQX 需要发送的消息超过 Kafka 处理能力，或者当 Kafka 临时下线时，EMQX 内部会将消息缓存起来。",
            "$ref": "#/components/schemas/bridge_kafka.producer_buffer"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "async",
              "sync"
            ],
            "description": "查询模式。可选 'sync/async'，默认 'async'。"
          },
          "sync_query_timeout": {
            "default": "5s",
            "type": "string",
            "description": "该参数定义同步查询的超时限制。仅当桥接查询模式配置为'sync'时才适用。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.ingress_parameters": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "从远程代理接收消息的主题"
          },
          "qos": {
            "default": 1,
            "maximum": 2,
            "type": "integer",
            "description": "订阅远程代理时要使用的 QoS 级别.",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "kafka_consumer.put_source": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "parameters": {
            "description": "Source 配置。",
            "$ref": "#/components/schemas/kafka_consumer.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.source_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_syskeeper_proxy.get": {
        "required": [
          "listen",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "syskeeper_proxy"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "listen": {
            "type": "string",
            "description": "此 Syskeeper 代理服务器的监听地址"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "接受者的数量",
            "minimum": 0
          },
          "handshake_timeout": {
            "default": "10s",
            "type": "string",
            "description": "在创建连接时等待握手的最长时间",
            "example": "32s"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_syskeeper_proxy.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.source_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_elasticsearch.action_create": {
        "required": [
          "action",
          "index"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "create"
            ],
            "description": "create"
          },
          "index": {
            "type": "string",
            "description": "执行操作的索引名称或索引别名。<br/>此参数是必需的。",
            "example": "${payload.index}"
          },
          "id": {
            "type": "string",
            "description": "文档 ID。如果没有指定 ID，将自动生成。",
            "example": "${payload.id}"
          },
          "doc": {
            "type": "string",
            "description": "JSON 文档模板，如果留空则为包含所有可用字段的 JSON 文本，如 clientid、topic、payload 等。",
            "example": "${payload.doc}"
          },
          "routing": {
            "type": "string",
            "description": "用于将操作路由到特定分片的自定义值。",
            "example": "${payload.routing}"
          },
          "require_alias": {
            "type": "boolean",
            "description": "如果为 true, 则请求的操作必须针对一个索引别名。默认为 false。"
          },
          "overwrite": {
            "default": true,
            "type": "boolean",
            "description": "如果指定 _id 的文档已经存在（冲突），将设置为 false，操作将失败。"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "如果发送请求时出错，最大的重试次数。",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "file_transfer.local_storage_segments_gc": {
        "properties": {
          "interval": {
            "default": "1h",
            "type": "string",
            "description": "运行垃圾回收的时间间隔。",
            "example": "32s"
          },
          "maximum_segments_ttl": {
            "default": "24h",
            "type": "string",
            "description": "分片的临时存储的最大 TTL。<br/><br/>该配置为系统全局上限，所有的分片都不会超过这个 TTL，即使某些文件传输指定了一个更大的 TTL。",
            "example": "1h"
          },
          "minimum_segments_ttl": {
            "default": "5m",
            "type": "string",
            "description": "分片的临时存储的最小 TTL。<br/><br/>分片在超过这个 TTL 之前不被垃圾回收。<br/>该配置为系统全局下限，所有的分片都不会低于这个 TTL，即使某些文件传输指定了一个更小的 TTL。",
            "example": "1h"
          }
        },
        "type": "object"
      },
      "bridge_matrix.post": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "matrix"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 PostgreSQL。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目的格式为：Host[:Port]。<br/><br/>如果没有指定 [:Port]，将使用 PostgreSQL 默认端口 5432。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.put_api_v1": {
        "required": [
          "database",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 InfluxDB。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 InfluxDB。"
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "使用 InfluxDB API Line Protocol 写入 InfluxDB 的数据，支持占位符<br/><br/>参考 [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) 及<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR: <br/><br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>注意，整形数值占位符后需要添加一个字符 `i` 类型标识。例如 `${payload.int_value}i`"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 InfluxDB 默认端口 8086。"
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "InfluxDB 时间精度。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "database": {
            "type": "string",
            "description": "InfluxDB 数据库。"
          },
          "username": {
            "type": "string",
            "description": "InfluxDB 用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB 密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.post": {
        "required": [
          "exchange",
          "name",
          "password",
          "routing_key",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rabbitmq"
            ],
            "description": "桥接类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或禁用桥接"
          },
          "local_topic": {
            "type": "string",
            "description": "转发到 RabbitMQ 的消息 MQTT 主题或主题过滤器。对所有的 'PUBLISH' 消息，如果匹配到该配置的主题或主题过滤器时，<br/>注意：如果此桥接被用作规则的动作，同时又配置了 'local_topic'，那么这两份消息都会被转发到 RabbitMQ，这可能会导致消息重复。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_rabbitmq.creation_opts"
          },
          "server": {
            "default": "localhost",
            "type": "string",
            "description": "您想要连接的 RabbitMQ 服务器地址（例如，localhost）。"
          },
          "port": {
            "default": 5672,
            "maximum": 65535,
            "type": "integer",
            "description": "您想要连接的 RabbitMQ 服务器地址（例如，localhost）。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "用于与 RabbitMQ 服务器进行认证的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池的大小",
            "minimum": 1
          },
          "timeout": {
            "default": "5s",
            "type": "string",
            "description": "等待连接建立的超时时间。",
            "example": "32s"
          },
          "virtual_host": {
            "default": "/",
            "type": "string",
            "description": "连接到 RabbitMQ 服务器时使用的虚拟主机。"
          },
          "heartbeat": {
            "default": "30s",
            "type": "string",
            "description": "向 RabbitMQ 服务器发送心跳消息的间隔。",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "wait_for_publish_confirmations": {
            "default": true,
            "type": "boolean",
            "description": "一个布尔值，指示在使用发布者确认时是否等待 RabbitMQ 确认消息发布。"
          },
          "publish_confirmation_timeout": {
            "default": "30s",
            "type": "string",
            "description": "等待连接建立的超时时间。",
            "example": "32s"
          },
          "exchange": {
            "type": "string",
            "description": "消息将被发送到的 RabbitMQ 交换机的名称。"
          },
          "routing_key": {
            "type": "string",
            "description": "用于将消息路由到 RabbitMQ 交换机中正确队列的路由键。"
          },
          "delivery_mode": {
            "default": "non_persistent",
            "type": "string",
            "enum": [
              "non_persistent",
              "persistent"
            ],
            "description": "发布到 RabbitMQ 的消息的传递模式。非持久化传递模式（1）适用于不需要在 RabbitMQ 重启后保持的消息，而持久化传递模式（2）用于必须在 RabbitMQ 重启后仍然存在的消息。"
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "在发送消息到 RabbitMQ 之前格式化消息 payload 的模板。例如 ${field1.sub_field} 的模板占位符将被相应字段的值替换。如果留空，整个输入消息将被用作 payload，格式化为 JSON 文本。这种行为等同于将 ${.} 指定为 payload 模板。"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_dynamo.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pgsql.put": {
        "required": [
          "database",
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 PostgreSQL。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目的格式为：Host[:Port]。<br/><br/>如果没有指定 [:Port]，将使用 PostgreSQL 默认端口 5432。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.post_connector": {
        "required": [
          "authentication",
          "bootstrap_hosts",
          "name",
          "ssl",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_event_hub_producer"
            ],
            "description": "连接器类型"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "逗号分隔的 Azure Event Hubs Kafka 命名空间主机名 <code>host[:port]</code> ，用于引导客户端。  默认端口号为 9093。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "TCP 连接建立的最大等待时间（包括如果已启用身份认证则包括身份认证时间）",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "客户端在刷新 Azure Event Hubs Kafka 代理和主题元数据之前必须等待的最小时间间隔。设置太小的值可能会给 Azure Event Hubs 增加额外的负载。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "从 Azure Event Hubs 获取元数据时的最大等待时间。",
            "example": "32s"
          },
          "authentication": {
            "default": {},
            "description": "认证配置",
            "$ref": "#/components/schemas/bridge_azure_event_hub.auth_username_password"
          },
          "socket_opts": {
            "description": "额外的套接字选项。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "default": {
              "enable": true
            },
            "$ref": "#/components/schemas/bridge_azure_event_hub.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "confluent.auth_username_password": {
        "required": [
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "Confluent 键。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.get_connector": {
        "required": [
          "authentication",
          "bootstrap_hosts",
          "name",
          "ssl",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_event_hub_producer"
            ],
            "description": "连接器类型"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "逗号分隔的 Azure Event Hubs Kafka 命名空间主机名 <code>host[:port]</code> ，用于引导客户端。  默认端口号为 9093。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "TCP 连接建立的最大等待时间（包括如果已启用身份认证则包括身份认证时间）",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "客户端在刷新 Azure Event Hubs Kafka 代理和主题元数据之前必须等待的最小时间间隔。设置太小的值可能会给 Azure Event Hubs 增加额外的负载。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "从 Azure Event Hubs 获取元数据时的最大等待时间。",
            "example": "32s"
          },
          "authentication": {
            "default": {},
            "description": "认证配置",
            "$ref": "#/components/schemas/bridge_azure_event_hub.auth_username_password"
          },
          "socket_opts": {
            "description": "额外的套接字选项。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "default": {
              "enable": true
            },
            "$ref": "#/components/schemas/bridge_azure_event_hub.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.post_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sqlserver"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "driver": {
            "default": "ms-sql",
            "type": "string",
            "description": "SQL Server Driver 名称"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 SQL Server 默认端口 1433。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "default": "sa",
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_sqlserver.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pgsql.post": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pgsql"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 PostgreSQL。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目的格式为：Host[:Port]。<br/><br/>如果没有指定 [:Port]，将使用 PostgreSQL 默认端口 5432。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.ssl_client_opts": {
        "properties": {
          "cacertfile": {
            "type": "string",
            "description": "受信任的 PEM 格式 CA  证书捆绑文件<br/><br/>此文件中的证书用于验证 TLS 对等方的证书。<br/>如果要信任新 CA，请将新证书附加到文件中。<br/>无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/><br/>注意：从文件中失效（删除）证书不会影响已建立的连接。"
          },
          "cacerts": {
            "default": false,
            "type": "boolean",
            "deprecated": true
          },
          "certfile": {
            "type": "string",
            "description": "PEM 格式证书链文件<br/><br/>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，<br/>然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。<br/>根 CA 证书是可选的，如果想要添加，应加到文件到最末端。"
          },
          "keyfile": {
            "type": "string",
            "description": "PEM 格式的私钥文件。"
          },
          "verify": {
            "default": "verify_none",
            "type": "string",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "description": "启用或禁用对等验证。"
          },
          "reuse_sessions": {
            "default": true,
            "type": "boolean",
            "description": "启用 TLS 会话重用。"
          },
          "depth": {
            "default": 10,
            "type": "integer",
            "description": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。<br/>因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/><br/>如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/><br/>如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
            "minimum": 0
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
            "example": ""
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "type": "array",
            "description": "支持所有 TLS/DTLS 版本<br/><br/>注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
            "items": {
              "type": "string"
            }
          },
          "ciphers": {
            "default": [],
            "type": "array",
            "description": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。<br/><br/><br/>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。<br/>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。<br/><br/>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。<br/>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/><br/>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。<br/>不兼容的密码套件将被自动删除。<br/><br/>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。<br/><br/><br/><br/>注：PSK 的 Ciphers 不支持 tlsv1.3<br/><br/>如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。<br/><br/><br/><br/>PSK 密码套件：<br/><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            }
          },
          "secure_renegotiate": {
            "default": true,
            "type": "boolean",
            "description": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。<br/>RFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。"
          },
          "log_level": {
            "default": "notice",
            "type": "string",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "description": "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。"
          },
          "hibernate_after": {
            "default": "5s",
            "type": "string",
            "description": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
            "example": "12m"
          },
          "partial_chain": {
            "type": "string",
            "enum": [
              true,
              false,
              "two_cacerts_from_cacertfile",
              "cacert_from_cacertfile"
            ],
            "description": "启用或禁用带有 partial_chain 的对等证书验证。<br/>当本地在 x509 路径验证过程中验证对等证书时<br/>它会构建一个从对等证书开始<br/>并以信任锚结束的证书链。<br/>默认情况下，如果设置为 `false`，信任锚是根 CA，<br/>证书链必须是完整的。<br/>然而，如果设置为 `true` 或 `cacert_from_cacertfile`，<br/>则 `cacertfile` 中的最后一个证书将被用作信任锚证书（中间 CA），<br/>这将在路径验证中创建一个部分链。<br/>或者，如果配置为 `two_cacerts_from_cacertfile`，`cacertfile` 中的<br/>最后两个证书中的一个将被用作信任锚证书，<br/>形成一个部分链。<br/>此选项特别适用于中间 CA 证书的轮换。<br/>然而，请注意这会带来一些额外的开销，<br/>因此应仅用于证书轮换目的。"
          },
          "verify_peer_ext_key_usage": {
            "type": "string",
            "description": "验证对等证书中的扩展密钥用途。<br/>为了额外的对等证书验证，这里定义的值必须出现在对等证书的 `Extended Key Usage` 中，<br/>对等证书的 'Extended Key Usage' 定义在<br/>[rfc5280](https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.12) 中。<br/><br/>允许的值包括<br/>- `clientAuth`<br/>- `serverAuth`<br/>- `codeSigning`<br/>- `emailProtection`<br/>- `timeStamping`<br/>- `ocspSigning`<br/>- 原始 OID，例如： \"OID:1.3.6.1.5.5.7.3.2\" 表示 `id-pk 2`，等同于 `clientAuth`<br/><br/>也支持逗号分隔的字符串，用于验证多个密钥用途。<br/><br/>例如： `\"serverAuth,OID:1.3.6.1.5.5.7.3.2\"`"
          },
          "enable": {
            "default": false,
            "type": "boolean",
            "description": "启用 TLS。"
          },
          "server_name_indication": {
            "default": "auto",
            "description": "TLS 握手的 Server Name Indication (SNI) 设置。<br/><br/>- <code>auto</code>：客户端将使用 <code>\"servicebus.windows.net\"</code> 作为 SNI。<br/><br/>- <code>disable</code>：如果您希望阻止客户端发送 SNI。<br/><br/>- 其他字符串值将按原样发送。",
            "example": "auto",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "disable"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "pulsar.action_parameters": {
        "required": [
          "pulsar_topic"
        ],
        "properties": {
          "message": {
            "description": "渲染 Pulsar 消息的模版。",
            "$ref": "#/components/schemas/pulsar.producer_pulsar_message"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "同步发布时等待从 Pulsar 接收回执的最大等待时间。",
            "example": "32s"
          },
          "pulsar_topic": {
            "type": "string",
            "description": "Pulsar 主题名称"
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "在一个 Pulsar 消息中批处理的单个请求的最大数量。",
            "minimum": 1
          },
          "compression": {
            "default": "no_compression",
            "type": "string",
            "enum": [
              "no_compression",
              "snappy",
              "zlib"
            ],
            "description": "压缩方法。"
          },
          "send_buffer": {
            "default": "1MB",
            "type": "string",
            "description": "TCP socket 的发送缓存调优。默认值是针对高吞吐量的一个推荐值。",
            "example": "32MB"
          },
          "retention_period": {
            "default": "infinity",
            "description": "当没有连接到 Pulsar 代理时，信息将被缓冲的时间。 较长的时间意味着将使用更多的内存/磁盘",
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "max_batch_bytes": {
            "default": "900KB",
            "type": "string",
            "description": "最大消息批量字节数。大多数 Pulsar 环境的默认最低值是 5 MB，EMQX 的默认值比 5 MB 更小是因为需要补偿 Pulsar 消息编码所需要的额外字节（尤其是当每条消息都很小的情况下）。当单个消息的大小超过该限制时，它仍然会被发送，（相当于该批量中只有单个消息）。",
            "example": "32MB"
          },
          "strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "roundrobin",
              "key_dispatch"
            ],
            "description": "设置消息发布时应该如何选择 Pulsar 分区。<br/><br/><code>random</code>: 为每个消息随机选择一个分区。<br/><code>roundrobin</code>: 依次为每条信息挑选可用的生产商。<br/><code>key_dispatch</code>: 将一批信息中的第一条信息的 Pulsar 信息密钥哈希到一个分区编号。"
          },
          "buffer": {
            "description": "配置消息缓存的相关参数。<br/><br/>当 EMQX 需要发送的消息超过 Pulsar 处理能力，或者当 Pulsar 临时下线时，EMQX 内部会将消息缓存起来。",
            "$ref": "#/components/schemas/bridge_pulsar.producer_buffer"
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "hstreamdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_hstreamdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_timescale.get_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "特定于 PostgreSQL 动作的参数配置",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.put": {
        "required": [
          "stream",
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "direction": {
            "default": "egress",
            "type": "string",
            "enum": [
              "egress"
            ],
            "description": "此桥接的方向，必须为'egress'"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 HStreamDB 的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果此动作用作规则的操作（EMQX 规则引擎），并且还配置了 local_topic，则将同时转发从规则获取的数据和与 local_topic 匹配的 MQTT 消息。"
          },
          "record_template": {
            "default": "${payload}",
            "type": "string",
            "description": "要转发到 HStreamDB 的 HStream 记录模板。支持占位符。<br><br/>注意：当您使用'原始记录'模板（这意味着数据不是有效的 JSON）时，您应该在 HStream 中使用 'read' 或 'subscription' 来获取数据。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "url": {
            "default": "http://127.0.0.1:6570",
            "type": "string",
            "description": "HStreamDB 服务器 URL。使用 gRPC http 服务器地址。"
          },
          "stream": {
            "type": "string",
            "description": "HStreamDB 流名称"
          },
          "partition_key": {
            "type": "string",
            "description": "HStreamDB 分区键。支持占位符。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "grpc_timeout": {
            "default": "30s",
            "type": "string",
            "description": "HStreamDB gRPC 连接超时时间。",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "maximum": 500,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.key_value_pair": {
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "键"
          },
          "value": {
            "type": "string",
            "description": "值"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.get_producer": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "endpoint",
          "name",
          "partition_key",
          "stream_name",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "kinesis_producer"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_kinesis.creation_opts"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "连接到 Amazon Kinesis 的访问密钥 ID。"
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "连接到 Amazon Kinesis 的 AWS 秘密访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "endpoint": {
            "type": "string",
            "description": "Amazon Kinesis 终端节点的 URL。",
            "example": "https://kinesis.us-east-1.amazonaws.com"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "发送请求时发生错误的最大重试次数。",
            "minimum": 0
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小",
            "minimum": 1
          },
          "payload_template": {
            "default": "${.}",
            "type": "string",
            "description": "用于格式化传出消息的模板。如果未定义，将以 JSON 格式发送所有可用的上下文。"
          },
          "stream_name": {
            "type": "string",
            "description": "消息将要被发布到的 Amazon Kinesis 流。"
          },
          "partition_key": {
            "type": "string",
            "description": "与发布消息关联的 Amazon Kinesis 分区键。支持格式为 ${var} 的占位符。"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 Amazon Kinesis 的 MQTT 主题过滤器。所有与主题匹配的 MQTT 'PUBLISH' 消息<br/>都将被转发。<br/><br/>注意：如果此动作用作规则的操作（EMQX 规则引擎），并且还配置了 'local_topic'，则将转发从规则获取的数据以及与 'local_topic' 匹配的 MQTT 消息。<br/>"
          }
        },
        "type": "object"
      },
      "bridge_http.v1_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_s3.s3_aggregated_container_csv": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "csv"
            ],
            "description": "记录（事件）将被聚合并上传为 CSV 文件。"
          },
          "column_order": {
            "default": [],
            "type": "array",
            "description": "在此指定的事件字段将首先作为列出现在生成的 CSV 文件中。<br/><br/>CSV 文件将包含聚合事件的所有字段；然而，未在此设置中明确提到的列将按字典顺序跟在指定的列之后。",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "bridge_influxdb.action_parameters": {
        "required": [
          "write_syntax"
        ],
        "properties": {
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "使用 InfluxDB API Line Protocol 写入 InfluxDB 的数据，支持占位符<br/><br/>参考 [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) 及<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR: <br/><br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>注意，整形数值占位符后需要添加一个字符 `i` 类型标识。例如 `${payload.int_value}i`"
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "InfluxDB 时间精度。"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.get_sharded": {
        "required": [
          "database",
          "mongo_type",
          "name",
          "resource_opts",
          "servers",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "mongo_type": {
            "default": "sharded",
            "type": "string",
            "enum": [
              "sharded"
            ],
            "description": "分片集群。当 MongoDB 服务器以`分片`模式运行时，必须设置为`sharded`。"
          },
          "servers": {
            "type": "string",
            "description": "集群连接的节点列表。节点应使用逗号分隔，例如：节点[,节点]。<br/>对于每个节点，应该是要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机条目具有以下形式：主机[:端口]。<br/>如果未指定[:端口]，则使用 MongoDB 的默认端口27017。"
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "写入模式"
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "使用 DNS SRV 记录。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。"
          },
          "auth_source": {
            "type": "string",
            "description": "与用户认证信息关联的数据库名称。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或停用该 MongoDB 动作"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "数据将存储在其中的集合"
          },
          "payload_template": {
            "type": "string",
            "description": "用于格式化发送消息的模板。如果未定义，规则引擎将使用 JSON 格式序列化所有可见输入，例如 clientid、主题、有效载荷等。"
          },
          "resource_opts": {
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "mongodb_sharded"
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.post_single": {
        "required": [
          "database",
          "mongo_type",
          "name",
          "resource_opts",
          "server",
          "type"
        ],
        "properties": {
          "mongo_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "独立实例。当MongoDB服务器以独立模式运行时，必须设置为`single`。"
          },
          "server": {
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机条目具有以下形式：主机[:端口]。<br/>如果未指定[:端口]，则使用MongoDB的默认端口27017。"
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "写入模式"
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "使用 DNS SRV 记录。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。"
          },
          "auth_source": {
            "type": "string",
            "description": "与用户认证信息关联的数据库名称。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或停用该 MongoDB 动作"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "数据将存储在其中的集合"
          },
          "payload_template": {
            "type": "string",
            "description": "用于格式化发送消息的模板。如果未定义，规则引擎将使用 JSON 格式序列化所有可见输入，例如 clientid、主题、有效载荷等。"
          },
          "resource_opts": {
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "mongodb_single"
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.post_producer": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "endpoint",
          "name",
          "partition_key",
          "stream_name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kinesis_producer"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_kinesis.creation_opts"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "连接到 Amazon Kinesis 的访问密钥 ID。"
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "连接到 Amazon Kinesis 的 AWS 秘密访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "endpoint": {
            "type": "string",
            "description": "Amazon Kinesis 终端节点的 URL。",
            "example": "https://kinesis.us-east-1.amazonaws.com"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "发送请求时发生错误的最大重试次数。",
            "minimum": 0
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小",
            "minimum": 1
          },
          "payload_template": {
            "default": "${.}",
            "type": "string",
            "description": "用于格式化传出消息的模板。如果未定义，将以 JSON 格式发送所有可用的上下文。"
          },
          "stream_name": {
            "type": "string",
            "description": "消息将要被发布到的 Amazon Kinesis 流。"
          },
          "partition_key": {
            "type": "string",
            "description": "与发布消息关联的 Amazon Kinesis 分区键。支持格式为 ${var} 的占位符。"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 Amazon Kinesis 的 MQTT 主题过滤器。所有与主题匹配的 MQTT 'PUBLISH' 消息<br/>都将被转发。<br/><br/>注意：如果此动作用作规则的操作（EMQX 规则引擎），并且还配置了 'local_topic'，则将转发从规则获取的数据以及与 'local_topic' 匹配的 MQTT 消息。<br/>"
          }
        },
        "type": "object"
      },
      "file_transfer.local_storage_segments": {
        "properties": {
          "root": {
            "type": "string",
            "description": "文件分片存储的根目录。"
          },
          "gc": {
            "description": "文件系统中临时文件的垃圾回收配置。",
            "$ref": "#/components/schemas/file_transfer.local_storage_segments_gc"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.put": {
        "required": [
          "exchange",
          "password",
          "routing_key",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或禁用桥接"
          },
          "local_topic": {
            "type": "string",
            "description": "转发到 RabbitMQ 的消息 MQTT 主题或主题过滤器。对所有的 'PUBLISH' 消息，如果匹配到该配置的主题或主题过滤器时，<br/>注意：如果此桥接被用作规则的动作，同时又配置了 'local_topic'，那么这两份消息都会被转发到 RabbitMQ，这可能会导致消息重复。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_rabbitmq.creation_opts"
          },
          "server": {
            "default": "localhost",
            "type": "string",
            "description": "您想要连接的 RabbitMQ 服务器地址（例如，localhost）。"
          },
          "port": {
            "default": 5672,
            "maximum": 65535,
            "type": "integer",
            "description": "您想要连接的 RabbitMQ 服务器地址（例如，localhost）。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "用于与 RabbitMQ 服务器进行认证的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池的大小",
            "minimum": 1
          },
          "timeout": {
            "default": "5s",
            "type": "string",
            "description": "等待连接建立的超时时间。",
            "example": "32s"
          },
          "virtual_host": {
            "default": "/",
            "type": "string",
            "description": "连接到 RabbitMQ 服务器时使用的虚拟主机。"
          },
          "heartbeat": {
            "default": "30s",
            "type": "string",
            "description": "向 RabbitMQ 服务器发送心跳消息的间隔。",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "wait_for_publish_confirmations": {
            "default": true,
            "type": "boolean",
            "description": "一个布尔值，指示在使用发布者确认时是否等待 RabbitMQ 确认消息发布。"
          },
          "publish_confirmation_timeout": {
            "default": "30s",
            "type": "string",
            "description": "等待连接建立的超时时间。",
            "example": "32s"
          },
          "exchange": {
            "type": "string",
            "description": "消息将被发送到的 RabbitMQ 交换机的名称。"
          },
          "routing_key": {
            "type": "string",
            "description": "用于将消息路由到 RabbitMQ 交换机中正确队列的路由键。"
          },
          "delivery_mode": {
            "default": "non_persistent",
            "type": "string",
            "enum": [
              "non_persistent",
              "persistent"
            ],
            "description": "发布到 RabbitMQ 的消息的传递模式。非持久化传递模式（1）适用于不需要在 RabbitMQ 重启后保持的消息，而持久化传递模式（2）用于必须在 RabbitMQ 重启后仍然存在的消息。"
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "在发送消息到 RabbitMQ 之前格式化消息 payload 的模板。例如 ${field1.sub_field} 的模板占位符将被相应字段的值替换。如果留空，整个输入消息将被用作 payload，格式化为 JSON 文本。这种行为等同于将 ${.} 指定为 payload 模板。"
          }
        },
        "type": "object"
      },
      "bridge_cassa.get_connector": {
        "required": [
          "keyspace",
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cassandra"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "servers": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port][,Host2:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 Cassandra 默认端口 9042。"
          },
          "keyspace": {
            "type": "string",
            "description": "要连接到的 Keyspace 名称。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_cassa.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_message_transformation_failed": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "message_transformation_failed"
            ],
            "description": "事件类型"
          },
          "transformation": {
            "type": "string",
            "description": "Transformation"
          },
          "clientid": {
            "type": "string",
            "description": "客户端 ID"
          },
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "payload": {
            "type": "string",
            "description": "消息负载"
          },
          "peerhost": {
            "type": "string",
            "description": "对等客户端的 IP 地址"
          },
          "topic": {
            "type": "string",
            "description": "消息主题"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "消息被接受的时间"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "消息的 QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "bridge_cassa.put": {
        "required": [
          "keyspace",
          "servers"
        ],
        "properties": {
          "cql": {
            "default": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "CQL 模板"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 Cassandra。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "servers": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port][,Host2:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 Cassandra 默认端口 9042。"
          },
          "keyspace": {
            "type": "string",
            "description": "要连接到的 Keyspace 名称。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_matrix.post_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "matrix"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "type": "string",
            "description": "用于连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目具有以下格式：Host[:Port]。<br/><br/>如果未指定 [:Port]，将使用 PostgreSQL 默认端口5432。"
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "在连接中禁用预处理语句的使用。<br/>某些端点，如 PGBouncer 或 Transaction 模式下的 Supabase，<br/>不支持像处理语句这样的会话功能。 <br/> 对于此类连接，应启用此选项。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.post_connector": {
        "required": [
          "dbname",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "greptimedb"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "default": "127.0.0.1:4001",
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>主机条目的格式如下：主机名[:端口]。<br/><br/>如果未指定 [:端口]，则使用 GreptimeDB 的默认端口 8086。"
          },
          "dbname": {
            "type": "string",
            "description": "GreptimeDB 数据库"
          },
          "username": {
            "type": "string",
            "description": "GreptimeDB 用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "GreptimeDB 密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_greptimedb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "confluent.producer_kafka_opts": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "事件中心名称"
          },
          "message": {
            "description": "呈现 Confluent 消息的模版。",
            "$ref": "#/components/schemas/confluent.kafka_message"
          },
          "max_batch_bytes": {
            "default": "896KB",
            "type": "string",
            "description": "最大 Confluent 消息批量字节数。大多数 Kafka 环境的默认最低值是 1 MB，EMQX 的默认值比 1 MB 更小是因为需要补偿 Kafka 消息编码所需要的额外字节（尤其是当每条消息都很小的情况下）。当单个消息的大小超过该限制时，它仍然会被发送，（相当于该批量中只有单个消息）。",
            "example": "32MB"
          },
          "compression": {
            "default": "no_compression",
            "type": "string",
            "enum": [
              "no_compression",
              "snappy",
              "gzip"
            ],
            "description": "压缩方法。"
          },
          "partition_strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "key_dispatch"
            ],
            "description": "分区策略是用来指导生产者如何将消息分配到 Confluent 的各个分区。<br/><br/><code>random</code>: 为每条消息随机选择一个分区。<br/><code>key_dispatch</code>: 根据 Confluent 消息键的哈希值将消息分配到分区，确保拥有相同键的消息能够一致地被分配到特定分区。"
          },
          "required_acks": {
            "default": "all_isr",
            "type": "string",
            "enum": [
              "all_isr",
              "leader_only",
              "none"
            ],
            "description": "Confluent 分区领导者的确认标准。它确定了在向 EMQX Confluent 生产者回送确认前，需要从追随者分区获得的确认等级。<br/><br/><code>all_isr</code>：要求所有同步副本进行确认。<br/><code>leader_only</code>：仅要求分区领导者的确认。"
          },
          "kafka_headers": {
            "type": "string",
            "description": "提供用作 Confluent 头部的占位符<br/><br/>例如<code>${pub_props}</code><br/><br/>注意，占位符的值必须是对象：<br/><code>{\"foo\": \"bar\"}</code><br/>或键值对数组：<br/><code>[{\"key\": \"foo\", \"value\": \"bar\"}]</code>"
          },
          "kafka_ext_headers": {
            "type": "array",
            "description": "请提供更多的 Confluent 头部键值对<br/><br/>这里的键值对将与<code>kafka_headers</code>字段的值结合后发送给 Confluent。",
            "items": {
              "$ref": "#/components/schemas/bridge_kafka.producer_kafka_ext_headers"
            }
          },
          "kafka_header_value_encode_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "json"
            ],
            "description": "Confluent 头部值编码模式<br/><br/> - None：仅向 Confluent 头部添加二进制值；<br/><br/> - JSON：仅向 Confluent 头部添加 JSON 值，并在发送前将其编码为 JSON 字符串。"
          },
          "partition_count_refresh_interval": {
            "default": "60s",
            "type": "string",
            "description": "Confluent 生产者发现分区数量增加的时间间隔。<br/>在 Confluent 中增加分区数量后，EMQX 将开始根据<code>partition_strategy</code><br/>在分发消息时考虑新发现的分区。",
            "example": "1h"
          },
          "partitions_limit": {
            "default": "all_partitions",
            "description": "限制为给定主题产生数据的分区数量。<br/>特殊值 all_partitions 用于利用主题的所有分区。<br/>设置的值如果大于分区总数则无效。",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "all_partitions"
                ]
              }
            ]
          },
          "max_inflight": {
            "default": 10,
            "type": "integer",
            "description": "Confluent 生产者在接收到 Confluent 的确认之前，每个分区允许发送的批次的最大数量。较高的值通常意味着更好的吞吐量。然而，当这个值大于1时，可能会有消息重新排序的风险。",
            "minimum": 1
          },
          "buffer": {
            "description": "配置生产者消息缓冲区。<br/><br/>在 EMQX 有更多消息需要发送而 Confluent 跟不上时，或者 Confluent 宕机时，告诉 Confluent 生产者如何缓冲消息。",
            "$ref": "#/components/schemas/bridge_kafka.producer_buffer"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "async",
              "sync"
            ],
            "description": "查询模式。可选'sync/async'，默认'async'。"
          },
          "sync_query_timeout": {
            "default": "5s",
            "type": "string",
            "description": "此参数定义同步查询的超时限制。仅在动作查询模式配置为'sync'时适用。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_oracle.post": {
        "required": [
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "oracle"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板。模板字符串可以包含消息元数据和有效载荷字段的占位符。占位符的插入不需要任何检查和特殊格式化，因此必须确保插入的数值格式化和转义正确。模板字符串可以包含占位符模板字符串可以包含消息元数据和有效载荷字段的占位符。这些占位符被插入所以必须确保插入的值的格式正确。因此，确保插入的值格式化和转义正确是非常重要的。模板字符串可以包含占位符模板字符串可以包含消息元数据和有效载荷字段的占位符。这些占位符被插入所以必须确保插入的值的格式正确。确保插入的值被正确地格式化和转义。"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 Oracle Database。 <br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>主机名具有以下形式：`Host[:Port]`。<br/>如果未指定 `[:Port]`，则使用 Oracle Database 默认端口 1521。"
          },
          "sid": {
            "type": "string",
            "description": "Oracle Database Sid 名称"
          },
          "service_name": {
            "type": "string",
            "description": "Oracle Database 服务名称。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "动作配置定义了此动作输出如何将消息发送到远程 RabbitMQ 代理。",
            "$ref": "#/components/schemas/bridge_rabbitmq.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_rabbitmq.action_resource_opts"
          }
        },
        "type": "object"
      },
      "confluent.get_connector": {
        "required": [
          "authentication",
          "bootstrap_hosts",
          "name",
          "ssl",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "confluent_producer"
            ],
            "description": "连接器的类型"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "逗号分隔的 Confluent Kafka 命名空间主机名 <code>host[:port]</code> ，用于引导客户端。  默认端口号为 9092。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "TCP 连接建立的最大等待时间（包括启用认证时的认证时间）。",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "客户端刷新 Confluent Kafka 代理和主题元数据的最短时间间隔。设置过小的值可能会给 Confluent 增加额外的负载。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "从 Confluent 获取元数据的最大等待时间。",
            "example": "32s"
          },
          "authentication": {
            "default": {},
            "description": "认证配置",
            "$ref": "#/components/schemas/confluent.auth_username_password"
          },
          "socket_opts": {
            "description": "额外的套接字选项。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "default": {
              "enable": true
            },
            "$ref": "#/components/schemas/confluent.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "iotdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "IoTDB 动作参数",
            "$ref": "#/components/schemas/bridge_iotdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_iotdb.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.post_consumer": {
        "required": [
          "bootstrap_hosts",
          "name",
          "topic_mapping",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka",
              "kafka_producer",
              "kafka_consumer"
            ],
            "description": "桥接类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字，可读描述"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "用逗号分隔的 <code>host[:port]</code> 主机列表。默认端口号为 9092。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "建立 TCP 连接时的最大等待时长（若启用认证，这个等待时长也包含完成认证所需时间）。",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "刷新 Kafka broker 和 Kafka 主题元数据段最短时间间隔。设置太小可能会增加 Kafka 压力。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "刷新元数据时最大等待时长。",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "认证参数。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "更多 Socket 参数设置。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "kafka": {
            "description": "Kafka 消费者配置。",
            "$ref": "#/components/schemas/bridge_kafka.consumer_kafka_opts"
          },
          "topic_mapping": {
            "type": "array",
            "description": "指定 Kafka 主题和 MQTT 主题之间的映射关系。 应至少包含一项。",
            "items": {
              "$ref": "#/components/schemas/bridge_kafka.consumer_topic_mapping"
            }
          },
          "key_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "通过 MQTT 转发之前，如何处理 Kafka 消息的 Key。<code>none</code> 使用 Kafka 消息中的 Key 原始值，不进行编码。  注意：在这种情况下，Key 必须是一个有效的 UTF-8 字符串。<br/><code>base64</code> 对收到的密钥或值使用 base-64 编码。"
          },
          "value_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "通过 MQTT 转发之前，如何处理 Kafka 消息的 Value。<code>none</code> 使用 Kafka 消息中的 Value 原始值，不进行编码。  注意：在这种情况下，Value 必须是一个有效的 UTF-8 字符串。<br/><code>base64</code> 对收到的 Value 使用 base-64 编码。"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.post": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "hash_key",
          "name",
          "region",
          "table",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "dynamo"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "template": {
            "default": "",
            "type": "string",
            "description": "模板, 默认为空，为空时将会将整个消息存入数据库"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 DynamoDB。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "hash_key": {
            "type": "string",
            "description": "DynamoDB 哈希键"
          },
          "range_key": {
            "type": "string",
            "description": "DynamoDB 范围健"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_dynamo.creation_opts"
          },
          "url": {
            "type": "string",
            "description": "DynamoDB 的地址。"
          },
          "region": {
            "type": "string",
            "description": "AWS Dynamo 的区域"
          },
          "table": {
            "type": "string",
            "description": "DynamoDB 的表。"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "DynamoDB 的访问 ID。"
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "DynamoDB 的访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.get": {
        "required": [
          "database",
          "name",
          "type",
          "url"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "clickhouse"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "可以使用 ${field} 占位符来引用消息与客户端上下文中的变量，请确保对应字段存在且数据格式符合预期。此处不支持 [SQL 预处理](https://docs.emqx.com/zh/enterprise/v5.0/data-integration/data-bridges.html#sql-预处理)。"
          },
          "batch_value_separator": {
            "default": ", ",
            "type": "string",
            "description": "默认为逗号 ','，适用于 VALUE 格式。您也可以使用其他分隔符， 请参考 [INSERT INTO 语句](https://clickhouse.com/docs/en/sql-reference/statements/insert-into)。"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 Clickhouse。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_clickhouse.creation_opts"
          },
          "url": {
            "type": "string",
            "description": "你想连接到的 Clickhouse 服务器的 HTTP URL（例如 http://myhostname:8123）。",
            "example": "http://127.0.0.1"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.producer_kafka_opts": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "----"
          },
          "message": {
            "description": "呈现 Azure Event Hubs 消息的模版。",
            "$ref": "#/components/schemas/bridge_azure_event_hub.kafka_message"
          },
          "max_batch_bytes": {
            "default": "896KB",
            "type": "string",
            "description": "在 Azure Event Hubs 消息批次中收集的最大字节数。",
            "example": "32MB"
          },
          "partition_strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "key_dispatch"
            ],
            "description": "分区策略是用来指导生产者如何将消息分配到Azure Event Hubs的各个分区。<br/><br/><code>random</code>: 为每条消息随机选择一个分区。<br/><code>key_dispatch</code>: 根据 Azure Event Hubs 消息键的哈希值将消息分配到分区，确保拥有相同键的消息能够一致地被分配到特定分区。"
          },
          "required_acks": {
            "default": "all_isr",
            "type": "string",
            "enum": [
              "all_isr",
              "leader_only"
            ],
            "description": "Azure Event Hubs 分区领导者的确认标准。它确定了在向 EMQX Azure Event Hubs 生产者回送确认前，需要从追随者分区获得的确认等级。<br/><br/><code>all_isr</code>：要求所有同步副本进行确认。<br/><code>leader_only</code>：仅要求分区领导者的确认。"
          },
          "kafka_headers": {
            "type": "string",
            "description": "为Azure Event Hubs头部提供一个占位符。例如：<code>${pub_props}</code>。<br/><br/>注意，占位符的值必须是一个对象：<br/><code>{\"foo\": \"bar\"}</code><br/>或者是一组键值对：<br/><code>[{\"key\": \"foo\", \"value\": \"bar\"}]</code>"
          },
          "kafka_ext_headers": {
            "type": "array",
            "description": "请提供更多的 Azure Event Hubs 标头键值对<br/>这里的键值对将与<code>kafka_headers</code>字段的值合并，然后发送到 Azure Event Hubs。",
            "items": {
              "$ref": "#/components/schemas/bridge_kafka.producer_kafka_ext_headers"
            }
          },
          "kafka_header_value_encode_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "json"
            ],
            "description": "Azure Event Hubs 头部值的编码模式。<br/><br/> - None: 仅将二进制值添加到 Azure Event Hubs 头部;<br/><br/> - JSON: 仅将 JSON 值添加到 Azure Event Hubs 头部，并在发送前将其编码为 JSON 字符串。"
          },
          "partition_count_refresh_interval": {
            "default": "60s",
            "type": "string",
            "description": "Azure Event Hubs 生产者发现分区数量增加的时间间隔。<br/>在 Azure Event Hubs 中增加分区数量后，EMQX 将开始根据<code>partition_strategy</code><br/>在分发消息时考虑新发现的分区。",
            "example": "1h"
          },
          "partitions_limit": {
            "default": "all_partitions",
            "description": "限制为给定主题产生数据的分区数量。<br/>特殊值 all_partitions 用于利用主题的所有分区。<br/>设置的值大于分区总数时无效。",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "all_partitions"
                ]
              }
            ]
          },
          "max_inflight": {
            "default": 10,
            "type": "integer",
            "description": "Azure Event Hubs 生产者在接收到 Azure Event Hubs 的确认之前，每个分区允许发送的批次的最大数量。较高的值通常意味着更好的吞吐量。然而，当这个值大于1时，可能会有消息重新排序的风险。",
            "minimum": 1
          },
          "buffer": {
            "description": "配置生产者消息缓冲区。<br/><br/>告诉 Azure Event Hubs 生产者，在 EMQX 需要发送的消息多于 Azure Event Hubs 能够处理的消息时，或者 Azure Event Hubs 宕机时，如何缓冲消息。",
            "$ref": "#/components/schemas/bridge_kafka.producer_buffer"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "async",
              "sync"
            ],
            "description": "查询模式。可选'sync/async'，默认为'async'。"
          },
          "sync_query_timeout": {
            "default": "5s",
            "type": "string",
            "description": "此参数定义同步查询的超时限制。仅当桥接查询模式配置为 'sync' 时适用。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_matrix.put": {
        "required": [
          "database",
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 PostgreSQL。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目的格式为：Host[:Port]。<br/><br/>如果没有指定 [:Port]，将使用 PostgreSQL 默认端口 5432。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "message_transformation_http_api.node_metrics": {
        "properties": {
          "node": {
            "type": "string"
          },
          "matched": {
            "type": "integer",
            "minimum": 0
          },
          "succeeded": {
            "type": "integer",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "bridge_mongodb.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mongodb"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "特定于此动作类型的附加参数",
            "$ref": "#/components/schemas/bridge_mongodb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mongodb.action_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_mqtt.egress_remote": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "要转发到远程代理的主题。<br/><br/>允许使用带有变量的模板。"
          },
          "qos": {
            "default": 1,
            "description": "要发送的 MQTT 消息的 QoS 级别。<br/><br/>允许使用带有变量的模板。",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "maximum": 2,
                "type": "integer",
                "minimum": 0,
                "example": 0
              }
            ]
          },
          "retain": {
            "default": false,
            "description": "要发送的 MQTT 消息的'retain'标志。<br/><br/>允许使用带有变量的模板。",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "payload": {
            "type": "string",
            "description": "要发送的 MQTT 消息的有效载荷。<br/><br/>允许使用带有变量的模板。"
          }
        },
        "type": "object"
      },
      "syskeeper.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "Syskeeper 动作的参数",
            "$ref": "#/components/schemas/syskeeper.parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/syskeeper.creation_opts"
          }
        },
        "type": "object"
      },
      "message_transformation_http_api.dryrun_input_message": {
        "required": [
          "payload",
          "topic"
        ],
        "properties": {
          "client_attrs": {
            "default": {},
            "type": "object",
            "example": {}
          },
          "clientid": {
            "default": "test-clientid",
            "type": "string"
          },
          "payload": {
            "type": "string"
          },
          "peername": {
            "default": "127.0.0.1:19872",
            "type": "string",
            "example": "127.0.0.1:80"
          },
          "pub_props": {
            "default": {},
            "type": "object",
            "example": {}
          },
          "qos": {
            "default": 0,
            "maximum": 2,
            "type": "integer",
            "minimum": 0
          },
          "retain": {
            "default": false,
            "type": "boolean"
          },
          "topic": {
            "type": "string"
          },
          "user_property": {
            "default": {},
            "type": "object",
            "example": {}
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_opents.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "opents"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "OpenTSDB 动作参数。",
            "$ref": "#/components/schemas/bridge_opents.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_couchbase.put_connector": {
        "required": [
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>  A host entry has the following form: `Host[:Port]`.<br/><br/>  The Couchbase default query service port 8093 is used if `[:Port]` is not specified."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "Username for Couchbase service."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Password for Couchbase service.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector.resource_opts"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.get_rs": {
        "required": [
          "database",
          "mongo_type",
          "name",
          "replica_set_name",
          "resource_opts",
          "servers",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "mongo_type": {
            "default": "rs",
            "type": "string",
            "enum": [
              "rs"
            ],
            "description": "副本集。当MongoDB服务器以`副本集`模式运行时，必须设置为`rs`。"
          },
          "servers": {
            "type": "string",
            "description": "集群连接的节点列表。节点应使用逗号分隔，例如：节点[,节点]。<br/>对于每个节点，应该是要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机条目具有以下形式：主机[:端口]。<br/>如果未指定[:端口]，则使用 MongoDB 的默认端口27017。"
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "写入模式"
          },
          "r_mode": {
            "default": "master",
            "type": "string",
            "enum": [
              "master",
              "slave_ok"
            ],
            "description": "读取模式。"
          },
          "replica_set_name": {
            "type": "string",
            "description": "副本集的名称。"
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "使用 DNS SRV 记录。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。"
          },
          "auth_source": {
            "type": "string",
            "description": "与用户认证信息关联的数据库名称。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或停用该 MongoDB 动作"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "数据将存储在其中的集合"
          },
          "payload_template": {
            "type": "string",
            "description": "用于格式化发送消息的模板。如果未定义，规则引擎将使用 JSON 格式序列化所有可见输入，例如 clientid、主题、有效载荷等。"
          },
          "resource_opts": {
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "mongodb_rs"
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "schema_validation.check_protobuf": {
        "required": [
          "message_type",
          "schema"
        ],
        "properties": {
          "type": {
            "default": "protobuf",
            "type": "string",
            "enum": [
              "protobuf"
            ],
            "description": "Protobuf schema 检查。"
          },
          "schema": {
            "type": "string",
            "description": "检查时使用的 Schema 名称。"
          },
          "message_type": {
            "type": "string",
            "description": "检查时使用的消息名称。"
          }
        },
        "type": "object"
      },
      "rule_engine.node_metrics": {
        "properties": {
          "node": {
            "type": "string",
            "description": "节点名字",
            "example": "emqx@127.0.0.1"
          },
          "matched": {
            "type": "integer",
            "description": "SQL 的 FROM 子句匹配的次数。",
            "minimum": 0
          },
          "matched.rate": {
            "type": "number",
            "description": "命中速率，次/秒"
          },
          "matched.rate.max": {
            "type": "number",
            "description": "最大命中速率，次/秒"
          },
          "matched.rate.last5m": {
            "type": "number",
            "description": "5 分钟平均命中速率，次/秒"
          },
          "passed": {
            "type": "integer",
            "description": "SQL 通过的次数",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "description": "SQL 失败的次数",
            "minimum": 0
          },
          "failed.exception": {
            "type": "integer",
            "description": "SQL 由于执行异常而失败的次数。 这可能是因为调用 SQL 函数时崩溃，或者试图对未定义的变量进行算术运算。",
            "minimum": 0
          },
          "failed.unknown": {
            "type": "integer",
            "description": "由于未知错误导致 SQL 失败的次数。",
            "minimum": 0
          },
          "actions.total": {
            "type": "integer",
            "description": "规则调用输出的次数。 该值可能是“sql.matched”的几倍，具体取决于规则输出的数量。",
            "minimum": 0
          },
          "actions.success": {
            "type": "integer",
            "description": "规则成功调用输出的次数。",
            "minimum": 0
          },
          "actions.failed": {
            "type": "integer",
            "description": "规则调用输出失败的次数。",
            "minimum": 0
          },
          "actions.failed.out_of_service": {
            "type": "integer",
            "description": "由于输出停止服务而导致规则调用输出失败的次数。 例如，桥接被禁用或停止。",
            "minimum": 0
          },
          "actions.failed.unknown": {
            "type": "integer",
            "description": "由于未知错误，规则调用输出失败的次数。",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "bridge_kafka.put_consumer": {
        "required": [
          "bootstrap_hosts",
          "topic_mapping"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "用逗号分隔的 <code>host[:port]</code> 主机列表。默认端口号为 9092。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "建立 TCP 连接时的最大等待时长（若启用认证，这个等待时长也包含完成认证所需时间）。",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "刷新 Kafka broker 和 Kafka 主题元数据段最短时间间隔。设置太小可能会增加 Kafka 压力。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "刷新元数据时最大等待时长。",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "认证参数。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "更多 Socket 参数设置。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "kafka": {
            "description": "Kafka 消费者配置。",
            "$ref": "#/components/schemas/bridge_kafka.consumer_kafka_opts"
          },
          "topic_mapping": {
            "type": "array",
            "description": "指定 Kafka 主题和 MQTT 主题之间的映射关系。 应至少包含一项。",
            "items": {
              "$ref": "#/components/schemas/bridge_kafka.consumer_topic_mapping"
            }
          },
          "key_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "通过 MQTT 转发之前，如何处理 Kafka 消息的 Key。<code>none</code> 使用 Kafka 消息中的 Key 原始值，不进行编码。  注意：在这种情况下，Key 必须是一个有效的 UTF-8 字符串。<br/><code>base64</code> 对收到的密钥或值使用 base-64 编码。"
          },
          "value_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "通过 MQTT 转发之前，如何处理 Kafka 消息的 Value。<code>none</code> 使用 Kafka 消息中的 Value 原始值，不进行编码。  注意：在这种情况下，Value 必须是一个有效的 UTF-8 字符串。<br/><code>base64</code> 对收到的 Value 使用 base-64 编码。"
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.put_connector": {
        "required": [
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "url": {
            "default": "http://127.0.0.1:6570",
            "type": "string",
            "description": "HStreamDB 服务器 URL。使用 gRPC http 服务器地址。"
          },
          "grpc_timeout": {
            "default": "30s",
            "type": "string",
            "description": "HStreamDB gRPC 连接超时时间。",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_hstreamdb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.action_parameters": {
        "required": [
          "write_syntax"
        ],
        "properties": {
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "GreptimeDB gRPC 协议写入数据点的配置。写入语法是一种文本格式，提供了数据点的测量、标签集、字段集和时间戳，并支持占位符，与 InfluxDB 行协议相同。<br/>参见 [InfluxDB 2.3 行协议](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) 和<br/>[GreptimeDB 1.8 行协议](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>简而言之:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>请注意，整数值的占位符必须用后缀 `i` 注释。例如 `${payload.int_value}i`。"
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "GreptimeDB 的时间精度。"
          }
        },
        "type": "object"
      },
      "pulsar.action_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge_pgsql.get_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "特定于 PostgreSQL 动作的参数配置",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.put_single": {
        "required": [
          "database",
          "mongo_type",
          "resource_opts",
          "server"
        ],
        "properties": {
          "mongo_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "独立实例。当MongoDB服务器以独立模式运行时，必须设置为`single`。"
          },
          "server": {
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机条目具有以下形式：主机[:端口]。<br/>如果未指定[:端口]，则使用MongoDB的默认端口27017。"
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "写入模式"
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "使用 DNS SRV 记录。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。"
          },
          "auth_source": {
            "type": "string",
            "description": "与用户认证信息关联的数据库名称。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或停用该 MongoDB 动作"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "数据将存储在其中的集合"
          },
          "payload_template": {
            "type": "string",
            "description": "用于格式化发送消息的模板。如果未定义，规则引擎将使用 JSON 格式序列化所有可见输入，例如 clientid、主题、有效载荷等。"
          },
          "resource_opts": {
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          }
        },
        "type": "object"
      },
      "audit.http_request": {
        "properties": {
          "bindings": {
            "type": "object",
            "example": {}
          },
          "body": {
            "type": "object",
            "example": {}
          },
          "headers": {
            "type": "object",
            "example": {}
          },
          "method": {
            "type": "string",
            "enum": [
              "post",
              "put",
              "delete"
            ]
          }
        },
        "type": "object"
      },
      "bridge_s3.get_connector": {
        "required": [
          "host",
          "name",
          "port",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "s3"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "access_key_id": {
            "type": "string",
            "description": "S3 桶的访问密钥 ID。"
          },
          "secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "S3 桶的密钥访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "host": {
            "type": "string",
            "description": "S3 端点的主机。"
          },
          "port": {
            "type": "integer",
            "description": "S3 端点的端口。",
            "minimum": 1
          },
          "transport_options": {
            "description": "S3 客户端使用的 HTTP 传输层选项。",
            "$ref": "#/components/schemas/s3.transport_options"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_s3.s3_connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.get_connector": {
        "required": [
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "datalayers"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "default": "127.0.0.1:8361",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The Datalayers default port 8361 is used if `[:Port]` is not specified."
          },
          "parameters": {
            "description": "Set of parameters specific for the given type of this Datalayers connector.",
            "$ref": "#/components/schemas/connector_datalayers.datalayers_parameters"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_datalayers.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_matrix.put_connector": {
        "required": [
          "database",
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "type": "string",
            "description": "用于连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目具有以下格式：Host[:Port]。<br/><br/>如果未指定 [:Port]，将使用 PostgreSQL 默认端口5432。"
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "在连接中禁用预处理语句的使用。<br/>某些端点，如 PGBouncer 或 Transaction 模式下的 Supabase，<br/>不支持像处理语句这样的会话功能。 <br/> 对于此类连接，应启用此选项。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pgsql.action_parameters": {
        "properties": {
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.put_grpc_v1": {
        "required": [
          "dbname",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 GreptimeDB 的 MQTT 主题过滤器。所有 MQTT 'PUBLISH' 消息中与 local_topic 匹配的主题都将被转发。<br/><br/>注意：如果此动作用作规则引擎 (EMQX 规则引擎) 的动作，并且配置了 local_topic，那么将会转发规则获取的数据以及与 local_topic 匹配的 MQTT 消息。"
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "GreptimeDB gRPC 协议写入数据点的配置。写入语法是一种文本格式，提供了数据点的测量、标签集、字段集和时间戳，并支持占位符，与 InfluxDB 行协议相同。<br/>参见 [InfluxDB 2.3 行协议](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) 和<br/>[GreptimeDB 1.8 行协议](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>简而言之:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>请注意，整数值的占位符必须用后缀 `i` 注释。例如 `${payload.int_value}i`。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:4001",
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>主机条目的格式如下：主机名[:端口]。<br/><br/>如果未指定 [:端口]，则使用 GreptimeDB 的默认端口 8086。"
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "GreptimeDB 的时间精度。"
          },
          "dbname": {
            "type": "string",
            "description": "GreptimeDB 数据库"
          },
          "username": {
            "type": "string",
            "description": "GreptimeDB 用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "GreptimeDB 密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_mysql.post_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mysql"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "type": "string",
            "description": "用于连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>主机条目的格式如下：主机[:端口]。<br/><br/>如果未指定[:端口]，将使用 MySQL 的默认端口3306。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mysql.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_s3.s3_aggregation": {
        "properties": {
          "time_interval": {
            "default": "30m",
            "type": "string",
            "description": "上传前，事件将在单个对象中聚合的时间长度。",
            "example": "1h"
          },
          "max_records": {
            "default": "100000",
            "type": "integer",
            "description": "每个聚合对象可以包含的最大记录（事件）数量。虽然每次上传不会超过这个限制，但可能包含较少的事件。如果事件发生率很高，在同一时间间隔内可能会有多次聚合上传，这些上传将具有不同但连续的序列号，这些序列号将成为 S3 对象键的一部分。",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "connector_postgres.put_connector": {
        "required": [
          "database",
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "type": "string",
            "description": "用于连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目具有以下格式：Host[:Port]。<br/><br/>如果未指定 [:Port]，将使用 PostgreSQL 默认端口5432。"
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "在连接中禁用预处理语句的使用。<br/>某些端点，如 PGBouncer 或 Transaction 模式下的 Supabase，<br/>不支持像处理语句这样的会话功能。 <br/> 对于此类连接，应启用此选项。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "public.meta": {
        "required": [
          "hasnext"
        ],
        "properties": {
          "page": {
            "default": 1,
            "type": "integer",
            "description": "Page number of the results to fetch.",
            "minimum": 1,
            "example": 1
          },
          "limit": {
            "default": 100,
            "maximum": 10000,
            "type": "integer",
            "description": "Results per page(max 10000)",
            "minimum": 1,
            "example": 50
          },
          "count": {
            "type": "integer",
            "description": "Total number of records matching the query.<br/>Note: this field is present only if the query can be optimized and does not require a full table scan.",
            "minimum": 0
          },
          "hasnext": {
            "type": "boolean",
            "description": "Flag indicating whether there are more results available on next pages."
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.put_consumer": {
        "required": [
          "consumer",
          "resource_opts",
          "service_account_json"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_gcp_pubsub.consumer_resource_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "请求出错时的最大重试次数。",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "description": "废弃的。在缓冲区设置中配置请求超时。",
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "包含将与 PubSub 一起使用的 GCP 服务账户凭证的 JSON。<br/>当创建 GCP 服务账户时（如 https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount），可以选择下载 JSON 形式的凭证，然后在该配置项中使用。"
          },
          "consumer": {
            "description": "本地 MQTT 发布和 GCP PubSub 消费者配置。",
            "$ref": "#/components/schemas/bridge_gcp_pubsub.consumer"
          }
        },
        "type": "object"
      },
      "connector_mqtt.ingress": {
        "properties": {
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "将从远程代理接收消息的 MQTT 客户端池的大小。<br/><br/>仅当'remote.topic'是共享订阅主题或主题过滤器时才会尊重此值，<br/>（例如$share/name1/topic1或$share/name2/topic2/#），否则只会使用一个 MQTT 客户端。<br/>每个 MQTT 客户端都将分配'clientid'，格式为'${clientid_prefix}:${bridge_name}:ingress:${node}:${n}'<br/>其中'n'是池中客户端的编号。<br/>注意：当 EMQX 进行集群化时，非共享订阅将无法正常工作。",
            "minimum": 1
          },
          "remote": {
            "description": "关于向远程代理订阅的配置。",
            "$ref": "#/components/schemas/connector_mqtt.ingress_remote"
          },
          "local": {
            "description": "关于向本地代理发送消息的配置。",
            "$ref": "#/components/schemas/connector_mqtt.ingress_local"
          }
        },
        "type": "object"
      },
      "connector_azure_blob_storage.put_connector": {
        "required": [
          "account_name"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "account_name": {
            "type": "string",
            "description": "Account name for Azure Blob Storage service."
          },
          "account_key": {
            "type": "string",
            "format": "password",
            "description": "Account key for Azure Blob Storage service.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_azure_blob_storage.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.auth_username_password": {
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "format": "password",
            "description": "用于连接 Azure Event Hubs 的连接字符串。应为命名空间共享访问策略的 \"连接字符串-主键\"。",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "bridge_http.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "http"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作动作的可读描述。"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "parameters": {
            "description": "HTTP 动作的参数",
            "$ref": "#/components/schemas/bridge_http.parameters_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_http.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_timescale.put_connector": {
        "required": [
          "database",
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "type": "string",
            "description": "用于连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目具有以下格式：Host[:Port]。<br/><br/>如果未指定 [:Port]，将使用 PostgreSQL 默认端口5432。"
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "在连接中禁用预处理语句的使用。<br/>某些端点，如 PGBouncer 或 Transaction 模式下的 Supabase，<br/>不支持像处理语句这样的会话功能。 <br/> 对于此类连接，应启用此选项。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pulsar.get_producer": {
        "required": [
          "name",
          "pulsar_topic",
          "servers",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "pulsar_producer"
            ],
            "description": "桥接类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字，可读描述"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（true）或停用（false）该 Pulsar 数据桥接。"
          },
          "servers": {
            "type": "string",
            "description": "以逗号分隔的 <code>scheme://host[:port]</code> 格式的 Pulsar URL 列表，支持的 scheme 有 <code>pulsar://</code> （默认）和<code>pulsar+ssl://</code>。默认的端口是 6650。"
          },
          "authentication": {
            "default": "none",
            "description": "认证参数。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_token"
              },
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_basic"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "建立 TCP 连接时的最大等待时长（若启用认证，这个等待时长也包含完成认证所需时间）。",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "message": {
            "description": "渲染 Pulsar 消息的模版。",
            "$ref": "#/components/schemas/pulsar.producer_pulsar_message"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "同步发布时等待从 Pulsar 接收回执的最大等待时间。",
            "example": "32s"
          },
          "pulsar_topic": {
            "type": "string",
            "description": "Pulsar 主题名称"
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "在一个 Pulsar 消息中批处理的单个请求的最大数量。",
            "minimum": 1
          },
          "compression": {
            "default": "no_compression",
            "type": "string",
            "enum": [
              "no_compression",
              "snappy",
              "zlib"
            ],
            "description": "压缩方法。"
          },
          "send_buffer": {
            "default": "1MB",
            "type": "string",
            "description": "TCP socket 的发送缓存调优。默认值是针对高吞吐量的一个推荐值。",
            "example": "32MB"
          },
          "retention_period": {
            "default": "infinity",
            "description": "当没有连接到 Pulsar 代理时，信息将被缓冲的时间。 较长的时间意味着将使用更多的内存/磁盘",
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "max_batch_bytes": {
            "default": "900KB",
            "type": "string",
            "description": "最大消息批量字节数。大多数 Pulsar 环境的默认最低值是 5 MB，EMQX 的默认值比 5 MB 更小是因为需要补偿 Pulsar 消息编码所需要的额外字节（尤其是当每条消息都很小的情况下）。当单个消息的大小超过该限制时，它仍然会被发送，（相当于该批量中只有单个消息）。",
            "example": "32MB"
          },
          "strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "roundrobin",
              "key_dispatch"
            ],
            "description": "设置消息发布时应该如何选择 Pulsar 分区。<br/><br/><code>random</code>: 为每个消息随机选择一个分区。<br/><code>roundrobin</code>: 依次为每条信息挑选可用的生产商。<br/><code>key_dispatch</code>: 将一批信息中的第一条信息的 Pulsar 信息密钥哈希到一个分区编号。"
          },
          "buffer": {
            "description": "配置消息缓存的相关参数。<br/><br/>当 EMQX 需要发送的消息超过 Pulsar 处理能力，或者当 Pulsar 临时下线时，EMQX 内部会将消息缓存起来。",
            "$ref": "#/components/schemas/bridge_pulsar.producer_buffer"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题数据源由桥接指定，或留空由规则动作指定。"
          },
          "resource_opts": {
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_pulsar.producer_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.get": {
        "required": [
          "exchange",
          "name",
          "password",
          "routing_key",
          "type",
          "username"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "rabbitmq"
            ],
            "description": "桥接类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或禁用桥接"
          },
          "local_topic": {
            "type": "string",
            "description": "转发到 RabbitMQ 的消息 MQTT 主题或主题过滤器。对所有的 'PUBLISH' 消息，如果匹配到该配置的主题或主题过滤器时，<br/>注意：如果此桥接被用作规则的动作，同时又配置了 'local_topic'，那么这两份消息都会被转发到 RabbitMQ，这可能会导致消息重复。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_rabbitmq.creation_opts"
          },
          "server": {
            "default": "localhost",
            "type": "string",
            "description": "您想要连接的 RabbitMQ 服务器地址（例如，localhost）。"
          },
          "port": {
            "default": 5672,
            "maximum": 65535,
            "type": "integer",
            "description": "您想要连接的 RabbitMQ 服务器地址（例如，localhost）。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "用于与 RabbitMQ 服务器进行认证的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池的大小",
            "minimum": 1
          },
          "timeout": {
            "default": "5s",
            "type": "string",
            "description": "等待连接建立的超时时间。",
            "example": "32s"
          },
          "virtual_host": {
            "default": "/",
            "type": "string",
            "description": "连接到 RabbitMQ 服务器时使用的虚拟主机。"
          },
          "heartbeat": {
            "default": "30s",
            "type": "string",
            "description": "向 RabbitMQ 服务器发送心跳消息的间隔。",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "wait_for_publish_confirmations": {
            "default": true,
            "type": "boolean",
            "description": "一个布尔值，指示在使用发布者确认时是否等待 RabbitMQ 确认消息发布。"
          },
          "publish_confirmation_timeout": {
            "default": "30s",
            "type": "string",
            "description": "等待连接建立的超时时间。",
            "example": "32s"
          },
          "exchange": {
            "type": "string",
            "description": "消息将被发送到的 RabbitMQ 交换机的名称。"
          },
          "routing_key": {
            "type": "string",
            "description": "用于将消息路由到 RabbitMQ 交换机中正确队列的路由键。"
          },
          "delivery_mode": {
            "default": "non_persistent",
            "type": "string",
            "enum": [
              "non_persistent",
              "persistent"
            ],
            "description": "发布到 RabbitMQ 的消息的传递模式。非持久化传递模式（1）适用于不需要在 RabbitMQ 重启后保持的消息，而持久化传递模式（2）用于必须在 RabbitMQ 重启后仍然存在的消息。"
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "在发送消息到 RabbitMQ 之前格式化消息 payload 的模板。例如 ${field1.sub_field} 的模板占位符将被相应字段的值替换。如果留空，整个输入消息将被用作 payload，格式化为 JSON 文本。这种行为等同于将 ${.} 指定为 payload 模板。"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_consumer.source_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "30s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.get_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sqlserver"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "driver": {
            "default": "ms-sql",
            "type": "string",
            "description": "SQL Server Driver 名称"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 SQL Server 默认端口 1433。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "default": "sa",
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_sqlserver.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_cassa.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "confluent.kafka_message": {
        "properties": {
          "key": {
            "default": "${.clientid}",
            "type": "string",
            "description": "用于呈现 Confluent 消息键的模版。如果模板呈现为空值（即在规则引擎上下文中没有此类数据字段），则使用 Confluent 的 NULL（而不是空字符串）。"
          },
          "value": {
            "default": "${.}",
            "type": "string",
            "description": "用于呈现 Confluent 消息键的模版。如果模板呈现为空值（即在规则引擎上下文中没有此类数据字段），则使用 Confluent 的 NULL（而不是空字符串）。"
          }
        },
        "type": "object"
      },
      "bridge_redis.put_cluster": {
        "required": [
          "command_template",
          "servers"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 Redis 的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果此动作用作规则的动作（EMQX 规则引擎），并且还配置了 local_topic，则规则中获取的数据和与 local_topic 匹配的 MQTT 消息都将被转发。"
          },
          "command_template": {
            "type": "array",
            "description": "用于导出消息的 Redis 命令模板。每个列表元素代表一个命令名称或其参数。<br/>例如，要将有效负载推送到 Redis 列表中的键 msgs，元素应该如下所示：<br/>rpush，msgs，${payload}。",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_cluster"
          },
          "servers": {
            "type": "string",
            "description": "集群将要连接的节点列表。 节点之间用逗号分隔，如：Node[,Node]。每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。"
          },
          "redis_type": {
            "default": "cluster",
            "type": "string",
            "enum": [
              "cluster"
            ],
            "description": "Cluster 模式。当 Redis 服务器在集群模式下运行时必须设置为'cluster'。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "schema_validation_http_api.get_metrics": {
        "properties": {
          "metrics": {
            "$ref": "#/components/schemas/schema_validation_http_api.metrics"
          },
          "node_metrics": {
            "$ref": "#/components/schemas/schema_validation_http_api.node_metrics"
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_connected": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "client_connected"
            ],
            "description": "事件类型"
          },
          "clientid": {
            "type": "string",
            "description": "客户端 ID"
          },
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "mountpoint": {
            "type": "string",
            "description": "挂载点"
          },
          "peername": {
            "type": "string",
            "description": "对等客户端的 IP 地址和端口"
          },
          "sockname": {
            "type": "string",
            "description": "本地监听的 IP 地址和端口"
          },
          "proto_name": {
            "type": "string",
            "description": "协议名称"
          },
          "proto_ver": {
            "type": "string",
            "description": "协议版本"
          },
          "keepalive": {
            "type": "integer",
            "description": "保持连接"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "清除会话"
          },
          "expiry_interval": {
            "type": "integer",
            "description": "到期间隔"
          },
          "is_bridge": {
            "default": false,
            "type": "boolean",
            "description": "是否桥接"
          },
          "connected_at": {
            "type": "integer",
            "description": "客户端连接完成时的时刻"
          }
        },
        "type": "object"
      },
      "bridge_oracle.post_connector": {
        "required": [
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "oracle"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>主机名具有以下形式：`Host[:Port]`。<br/>如果未指定 `[:Port]`，则使用 Oracle Database 默认端口 1521。"
          },
          "sid": {
            "type": "string",
            "description": "Oracle Database Sid 名称"
          },
          "service_name": {
            "type": "string",
            "description": "Oracle Database 服务名称。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_oracle.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "kafka_consumer.post_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka_consumer"
            ]
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "description": "Source 配置。",
            "$ref": "#/components/schemas/kafka_consumer.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.source_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_http.put": {
        "required": [
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或停用动作"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接到 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "连接池类型。可以是random、hash之一。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
            "minimum": 1
          },
          "request": {
            "type": "object",
            "deprecated": true,
            "description": "This field is never used, so we deprecated it since 5.3.2.",
            "example": {}
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "url": {
            "type": "string",
            "description": "HTTP 动作的 URL。<br/><br/>此路径允许使用带有变量的模板，但变量不能用于方案、主机或端口部分。<br/><br/>例如，<code> http://localhost:9901/${topic} </code> 是允许的，但<br/><code> http://${host}:9901/message </code> 或 <code> http://localhost:${port}/message </code><br/>是不允许的。"
          },
          "direction": {
            "type": "string",
            "enum": [
              "egress"
            ],
            "deprecated": true
          },
          "local_topic": {
            "type": "string",
            "description": "将要转发到 HTTP 服务器的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果将此动作用作规则的操作（EMQX 规则引擎），并且同时配置了 local_topic，那么将同时转发从规则获取的数据和与 local_topic 匹配的 MQTT 消息。"
          },
          "method": {
            "default": "post",
            "type": "string",
            "enum": [
              "post",
              "put",
              "get",
              "delete"
            ],
            "description": "HTTP 请求的方法。所有可用的方法包括：post、put、get、delete。<br/><br/>允许使用带有变量的模板。"
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "type": "object",
            "description": "HTTP 请求头。<br/><br/>允许使用带有变量的模板。",
            "example": {},
            "is_template": true
          },
          "body": {
            "type": "string",
            "description": "HTTP 请求的主体。<br/><br/>如果未提供，主体将是所有可用字段的 JSON 对象。<br/><br/>这里的“所有可用字段”是指在触发此 Webhook 时的 MQTT 消息的上下文（当 local_topic 已设置并接收到 MQTT 消息时触发），<br/>或者当此 Webhook 用作规则的动作时，在触发此 Webhook 时的事件上下文。<br/>允许使用带有变量的模板。"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "如果发送请求时出错，最大的重试次数。",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "description": "HTTP 请求超时时间",
            "example": "32s"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_http.v1_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pulsar.post_producer": {
        "required": [
          "name",
          "pulsar_topic",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pulsar_producer"
            ],
            "description": "桥接类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字，可读描述"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（true）或停用（false）该 Pulsar 数据桥接。"
          },
          "servers": {
            "type": "string",
            "description": "以逗号分隔的 <code>scheme://host[:port]</code> 格式的 Pulsar URL 列表，支持的 scheme 有 <code>pulsar://</code> （默认）和<code>pulsar+ssl://</code>。默认的端口是 6650。"
          },
          "authentication": {
            "default": "none",
            "description": "认证参数。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_token"
              },
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_basic"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "建立 TCP 连接时的最大等待时长（若启用认证，这个等待时长也包含完成认证所需时间）。",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "message": {
            "description": "渲染 Pulsar 消息的模版。",
            "$ref": "#/components/schemas/pulsar.producer_pulsar_message"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "同步发布时等待从 Pulsar 接收回执的最大等待时间。",
            "example": "32s"
          },
          "pulsar_topic": {
            "type": "string",
            "description": "Pulsar 主题名称"
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "在一个 Pulsar 消息中批处理的单个请求的最大数量。",
            "minimum": 1
          },
          "compression": {
            "default": "no_compression",
            "type": "string",
            "enum": [
              "no_compression",
              "snappy",
              "zlib"
            ],
            "description": "压缩方法。"
          },
          "send_buffer": {
            "default": "1MB",
            "type": "string",
            "description": "TCP socket 的发送缓存调优。默认值是针对高吞吐量的一个推荐值。",
            "example": "32MB"
          },
          "retention_period": {
            "default": "infinity",
            "description": "当没有连接到 Pulsar 代理时，信息将被缓冲的时间。 较长的时间意味着将使用更多的内存/磁盘",
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "max_batch_bytes": {
            "default": "900KB",
            "type": "string",
            "description": "最大消息批量字节数。大多数 Pulsar 环境的默认最低值是 5 MB，EMQX 的默认值比 5 MB 更小是因为需要补偿 Pulsar 消息编码所需要的额外字节（尤其是当每条消息都很小的情况下）。当单个消息的大小超过该限制时，它仍然会被发送，（相当于该批量中只有单个消息）。",
            "example": "32MB"
          },
          "strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "roundrobin",
              "key_dispatch"
            ],
            "description": "设置消息发布时应该如何选择 Pulsar 分区。<br/><br/><code>random</code>: 为每个消息随机选择一个分区。<br/><code>roundrobin</code>: 依次为每条信息挑选可用的生产商。<br/><code>key_dispatch</code>: 将一批信息中的第一条信息的 Pulsar 信息密钥哈希到一个分区编号。"
          },
          "buffer": {
            "description": "配置消息缓存的相关参数。<br/><br/>当 EMQX 需要发送的消息超过 Pulsar 处理能力，或者当 Pulsar 临时下线时，EMQX 内部会将消息缓存起来。",
            "$ref": "#/components/schemas/bridge_pulsar.producer_buffer"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题数据源由桥接指定，或留空由规则动作指定。"
          },
          "resource_opts": {
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_pulsar.producer_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pgsql.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pgsql"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "特定于 PostgreSQL 动作的参数配置",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.post": {
        "required": [
          "database",
          "name",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "clickhouse"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "可以使用 ${field} 占位符来引用消息与客户端上下文中的变量，请确保对应字段存在且数据格式符合预期。此处不支持 [SQL 预处理](https://docs.emqx.com/zh/enterprise/v5.0/data-integration/data-bridges.html#sql-预处理)。"
          },
          "batch_value_separator": {
            "default": ", ",
            "type": "string",
            "description": "默认为逗号 ','，适用于 VALUE 格式。您也可以使用其他分隔符， 请参考 [INSERT INTO 语句](https://clickhouse.com/docs/en/sql-reference/statements/insert-into)。"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 Clickhouse。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_clickhouse.creation_opts"
          },
          "url": {
            "type": "string",
            "description": "你想连接到的 Clickhouse 服务器的 HTTP URL（例如 http://myhostname:8123）。",
            "example": "http://127.0.0.1"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "bridge_cassa.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "动作的具体配置",
            "$ref": "#/components/schemas/bridge_cassa.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "message_transformation.operation": {
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_kafka.put_connector": {
        "required": [
          "bootstrap_hosts"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "用逗号分隔的 <code>host[:port]</code> 主机列表。默认端口号为 9092。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "建立 TCP 连接时的最大等待时长（若启用认证，这个等待时长也包含完成认证所需时间）。",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "刷新 Kafka broker 和 Kafka 主题元数据段最短时间间隔。设置太小可能会增加 Kafka 压力。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "刷新元数据时最大等待时长。",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "认证参数。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "更多 Socket 参数设置。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_hstreamdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_mqtt.egress_local": {
        "properties": {
          "topic": {
            "type": "string",
            "description": "要转发到远程代理的本地主题"
          }
        },
        "type": "object"
      },
      "bridge_opents.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "OpenTSDB 动作参数。",
            "$ref": "#/components/schemas/bridge_opents.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rabbitmq"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "动作配置定义了此动作输出如何将消息发送到远程 RabbitMQ 代理。",
            "$ref": "#/components/schemas/bridge_rabbitmq.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_rabbitmq.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "特定于此动作类型的附加参数",
            "$ref": "#/components/schemas/bridge_mongodb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mongodb.action_resource_opts"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_producer.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_producer"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "动作的配置",
            "$ref": "#/components/schemas/gcp_pubsub_producer.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.consumer_topic_mapping": {
        "required": [
          "kafka_topic",
          "mqtt_topic"
        ],
        "properties": {
          "kafka_topic": {
            "type": "string",
            "description": "指定从哪个 Kafka 主题消费消息。"
          },
          "mqtt_topic": {
            "type": "string",
            "description": "设置 Kafka 消息向哪个本地 MQTT 主题转发消息。"
          },
          "qos": {
            "default": 0,
            "maximum": 2,
            "type": "integer",
            "description": "转发 MQTT 消息时使用的 QoS。",
            "minimum": 0,
            "example": 0
          },
          "payload_template": {
            "default": "${.}",
            "type": "string",
            "description": "用于转换收到的 Kafka 消息的模板。 默认情况下，它将使用 JSON 格式来序列化来自 Kafka 的所有字段。 这些字段包括：<code>headers</code>：一个包含字符串键值对的 JSON 对象。<br/><code>key</code>：Kafka 消息的键（使用选择的编码方式编码）。<br/><code>offset</code>：消息的偏移量。<br/><code>topic</code>：Kafka 主题。<br/><code>ts</code>: 消息的时间戳。<br/><code>ts_type</code>：消息的时间戳类型，值可能是： <code>create</code>， <code>append</code> 或 <code>undefined</code>。<br/><code>value</code>: Kafka 消息值（使用选择的编码方式编码）。"
          }
        },
        "type": "object"
      },
      "schema_validation.check_avro": {
        "required": [
          "schema"
        ],
        "properties": {
          "type": {
            "default": "avro",
            "type": "string",
            "enum": [
              "avro"
            ],
            "description": "Avro schema 检查。"
          },
          "schema": {
            "type": "string",
            "description": "验证时使用的 Schema 的名称。"
          }
        },
        "type": "object"
      },
      "action_couchbase.parameters": {
        "required": [
          "sql"
        ],
        "properties": {
          "sql": {
            "type": "string",
            "description": "SQL Template"
          },
          "max_retries": {
            "default": 3,
            "type": "integer",
            "description": "Max retry times if error on sending request.",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "connector_datalayers.datalayers_parameters": {
        "required": [
          "database"
        ],
        "properties": {
          "database": {
            "type": "string",
            "description": "Datalayers database."
          },
          "username": {
            "type": "string",
            "description": "Datalayers username."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Datalayers password.",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "action_azure_blob_storage.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "10ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "action_couchbase.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "Set of parameters for the action.",
            "$ref": "#/components/schemas/action_couchbase.parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/action_couchbase.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.post_api_v2": {
        "required": [
          "bucket",
          "name",
          "org",
          "token",
          "type",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 InfluxDB。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 InfluxDB。"
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "使用 InfluxDB API Line Protocol 写入 InfluxDB 的数据，支持占位符<br/><br/>参考 [InfluxDB 2.3 Line Protocol](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) 及<br/>[InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR: <br/><br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>注意，整形数值占位符后需要添加一个字符 `i` 类型标识。例如 `${payload.int_value}i`"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 InfluxDB 默认端口 8086。"
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "InfluxDB 时间精度。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "bucket": {
            "type": "string",
            "description": "InfluxDB bucket 名称。"
          },
          "org": {
            "type": "string",
            "description": "InfluxDB 组织名称。"
          },
          "token": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB 令牌。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "type": {
            "type": "string",
            "enum": [
              "influxdb_api_v2"
            ],
            "description": "桥接类型。"
          },
          "name": {
            "type": "string",
            "description": "桥接名称。"
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.post_connector": {
        "required": [
          "name",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "hstreamdb"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "url": {
            "default": "http://127.0.0.1:6570",
            "type": "string",
            "description": "HStreamDB 服务器 URL。使用 gRPC http 服务器地址。"
          },
          "grpc_timeout": {
            "default": "30s",
            "type": "string",
            "description": "HStreamDB gRPC 连接超时时间。",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_hstreamdb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "iotdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "IoTDB 动作参数",
            "$ref": "#/components/schemas/bridge_iotdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_iotdb.action_resource_opts"
          }
        },
        "type": "object"
      },
      "confluent.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "将 MQTT 主题或主题过滤器作为数据源（动作输入）。如果使用规则动作作为数据源，则应将此配置保留为空，否则消息将在 Confluent 中重复。"
          },
          "parameters": {
            "description": "Confluent 生产者配置。",
            "$ref": "#/components/schemas/confluent.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.ssl_client_opts": {
        "properties": {
          "cacertfile": {
            "type": "string",
            "description": "受信任的 PEM 格式 CA  证书捆绑文件<br/><br/>此文件中的证书用于验证 TLS 对等方的证书。<br/>如果要信任新 CA，请将新证书附加到文件中。<br/>无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/><br/>注意：从文件中失效（删除）证书不会影响已建立的连接。"
          },
          "cacerts": {
            "default": false,
            "type": "boolean",
            "deprecated": true
          },
          "certfile": {
            "type": "string",
            "description": "PEM 格式证书链文件<br/><br/>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，<br/>然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。<br/>根 CA 证书是可选的，如果想要添加，应加到文件到最末端。"
          },
          "keyfile": {
            "type": "string",
            "description": "PEM 格式的私钥文件。"
          },
          "verify": {
            "default": "verify_none",
            "type": "string",
            "enum": [
              "verify_peer",
              "verify_none"
            ],
            "description": "启用或禁用对等验证。"
          },
          "reuse_sessions": {
            "default": true,
            "type": "boolean",
            "description": "启用 TLS 会话重用。"
          },
          "depth": {
            "default": 10,
            "type": "integer",
            "description": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。<br/>因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/><br/>如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/><br/>如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
            "minimum": 0
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
            "example": ""
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "type": "array",
            "description": "支持所有 TLS/DTLS 版本<br/><br/>注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
            "items": {
              "type": "string"
            }
          },
          "ciphers": {
            "default": [],
            "type": "array",
            "description": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。<br/><br/><br/>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。<br/>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。<br/><br/>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。<br/>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/><br/>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。<br/>不兼容的密码套件将被自动删除。<br/><br/>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。<br/><br/><br/><br/>注：PSK 的 Ciphers 不支持 tlsv1.3<br/><br/>如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。<br/><br/><br/><br/>PSK 密码套件：<br/><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            }
          },
          "secure_renegotiate": {
            "default": true,
            "type": "boolean",
            "description": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。<br/>RFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。"
          },
          "log_level": {
            "default": "notice",
            "type": "string",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "description": "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。"
          },
          "hibernate_after": {
            "default": "5s",
            "type": "string",
            "description": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
            "example": "12m"
          },
          "partial_chain": {
            "type": "string",
            "enum": [
              true,
              false,
              "two_cacerts_from_cacertfile",
              "cacert_from_cacertfile"
            ],
            "description": "启用或禁用带有 partial_chain 的对等证书验证。<br/>当本地在 x509 路径验证过程中验证对等证书时<br/>它会构建一个从对等证书开始<br/>并以信任锚结束的证书链。<br/>默认情况下，如果设置为 `false`，信任锚是根 CA，<br/>证书链必须是完整的。<br/>然而，如果设置为 `true` 或 `cacert_from_cacertfile`，<br/>则 `cacertfile` 中的最后一个证书将被用作信任锚证书（中间 CA），<br/>这将在路径验证中创建一个部分链。<br/>或者，如果配置为 `two_cacerts_from_cacertfile`，`cacertfile` 中的<br/>最后两个证书中的一个将被用作信任锚证书，<br/>形成一个部分链。<br/>此选项特别适用于中间 CA 证书的轮换。<br/>然而，请注意这会带来一些额外的开销，<br/>因此应仅用于证书轮换目的。"
          },
          "verify_peer_ext_key_usage": {
            "type": "string",
            "description": "验证对等证书中的扩展密钥用途。<br/>为了额外的对等证书验证，这里定义的值必须出现在对等证书的 `Extended Key Usage` 中，<br/>对等证书的 'Extended Key Usage' 定义在<br/>[rfc5280](https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.12) 中。<br/><br/>允许的值包括<br/>- `clientAuth`<br/>- `serverAuth`<br/>- `codeSigning`<br/>- `emailProtection`<br/>- `timeStamping`<br/>- `ocspSigning`<br/>- 原始 OID，例如： \"OID:1.3.6.1.5.5.7.3.2\" 表示 `id-pk 2`，等同于 `clientAuth`<br/><br/>也支持逗号分隔的字符串，用于验证多个密钥用途。<br/><br/>例如： `\"serverAuth,OID:1.3.6.1.5.5.7.3.2\"`"
          },
          "enable": {
            "default": true,
            "type": "string",
            "enum": [
              true
            ],
            "description": "启用 TLS。"
          },
          "server_name_indication": {
            "default": "auto",
            "description": "TLS 握手的服务器名称指示（SNI）设置。<br/><br/>- <code>auto</code>：客户端将使用<code>\"servicebus.windows.net\"</code>作为SNI。<br/><br/>- <code>disable</code>：如果您希望阻止客户端发送SNI。<br/><br/>- 其他字符串值将按原样发送。",
            "example": "auto",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "disable"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.kafka_message": {
        "properties": {
          "key": {
            "default": "${.clientid}",
            "type": "string",
            "description": "用于呈现 Azure Event Hubs 消息键的模版。如果模板呈现为空值（即在规则引擎上下文中没有此类数据字段），则使用 Azure Event Hubs 的 NULL（而不是空字符串）。"
          },
          "value": {
            "default": "${.}",
            "type": "string",
            "description": "用于呈现 Azure Event Hubs 消息值的模版。如果模板呈现为空值（即在规则引擎上下文中没有此类数据字段），则使用 Azure Event Hubs 的 NULL（而不是空字符串）。"
          }
        },
        "type": "object"
      },
      "bridge_pulsar.auth_token": {
        "required": [
          "jwt"
        ],
        "properties": {
          "jwt": {
            "type": "string",
            "format": "password",
            "description": "JWT 认证令牌。",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.put_producer": {
        "required": [
          "pubsub_topic",
          "service_account_json"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "请求出错时的最大重试次数。",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "description": "废弃的。在缓冲区设置中配置请求超时。",
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "包含将与 PubSub 一起使用的 GCP 服务账户凭证的 JSON。<br/>当创建 GCP 服务账户时（如 https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount），可以选择下载 JSON 形式的凭证，然后在该配置项中使用。"
          },
          "attributes_template": {
            "default": [],
            "type": "array",
            "description": "格式化出站消息属性的模板。未定义的值将被呈现为空字符串值。属性映射中的空键将被移除。",
            "items": {
              "$ref": "#/components/schemas/bridge_gcp_pubsub.key_value_pair"
            }
          },
          "ordering_key_template": {
            "default": "",
            "type": "string",
            "description": "格式化出站消息排序键的模板。未定义的值将被呈现为空字符串值。如果此值为空，则不会将其添加到消息中。"
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "用于格式化外发信息的模板。 如果未定义，将以 JSON 格式发送所有可用的上下文。"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 GCP PubSub。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 GCP PubSub。"
          },
          "pubsub_topic": {
            "type": "string",
            "description": "要发布消息的 GCP PubSub 主题。"
          }
        },
        "type": "object"
      },
      "bridge_http.post_connector": {
        "required": [
          "name",
          "type",
          "url"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "http"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作动作的可读描述。"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "url": {
            "type": "string",
            "description": "HTTP 动作的 URL。<br/><br/>此路径允许使用带有变量的模板，但变量不能用于方案、主机或端口部分。<br/><br/>例如，<code> http://localhost:9901/${topic} </code> 是允许的，但<br/><code> http://${host}:9901/message </code> 或 <code> http://localhost:${port}/message </code><br/>是不允许的。"
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "type": "object",
            "description": "HTTP 请求头。<br/><br/>允许使用带有变量的模板。",
            "example": {},
            "is_template": true
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接到 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "连接池类型。可以是random、hash之一。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
            "minimum": 1
          },
          "request": {
            "type": "object",
            "deprecated": true,
            "description": "This field is never used, so we deprecated it since 5.3.2.",
            "example": {}
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_http.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.rule_metrics": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "规则的 ID",
            "example": "293fb66f"
          },
          "metrics": {
            "description": "规则的计数器",
            "$ref": "#/components/schemas/rule_engine.metrics"
          },
          "node_metrics": {
            "type": "array",
            "description": "每个节点的规则计数器",
            "items": {
              "$ref": "#/components/schemas/rule_engine.node_metrics"
            }
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_sub": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "session_subscribed"
            ],
            "description": "事件类型"
          },
          "clientid": {
            "type": "string",
            "description": "客户端 ID"
          },
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "payload": {
            "type": "string",
            "description": "消息负载"
          },
          "peerhost": {
            "type": "string",
            "description": "对等客户端的 IP 地址"
          },
          "topic": {
            "type": "string",
            "description": "消息主题"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "消息被接受的时间"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "消息的 QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "bridge_kafka.post_producer": {
        "required": [
          "bootstrap_hosts",
          "kafka",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka",
              "kafka_producer",
              "kafka_consumer"
            ],
            "description": "桥接类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字，可读描述"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "用逗号分隔的 <code>host[:port]</code> 主机列表。默认端口号为 9092。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "建立 TCP 连接时的最大等待时长（若启用认证，这个等待时长也包含完成认证所需时间）。",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "刷新 Kafka broker 和 Kafka 主题元数据段最短时间间隔。设置太小可能会增加 Kafka 压力。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "刷新元数据时最大等待时长。",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "认证参数。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "更多 Socket 参数设置。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题数据源由桥接指定，或留空由规则动作指定。"
          },
          "kafka": {
            "description": "Kafka 生产者参数。",
            "$ref": "#/components/schemas/bridge_kafka.v1_producer_kafka_opts"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.action_parameters": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "要转发到远程代理的主题。<br/><br/>允许使用带有变量的模板。"
          },
          "qos": {
            "default": 1,
            "description": "要发送的 MQTT 消息的 QoS 级别。<br/><br/>允许使用带有变量的模板。",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "maximum": 2,
                "type": "integer",
                "minimum": 0,
                "example": 0
              }
            ]
          },
          "retain": {
            "default": false,
            "description": "要发送的 MQTT 消息的'retain'标志。<br/><br/>允许使用带有变量的模板。",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "payload": {
            "type": "string",
            "description": "要发送的 MQTT 消息的有效载荷。<br/><br/>允许使用带有变量的模板。"
          }
        },
        "type": "object"
      },
      "schema_validation.check_sql": {
        "required": [
          "sql"
        ],
        "properties": {
          "type": {
            "default": "sql",
            "type": "string",
            "enum": [
              "sql"
            ],
            "description": "使用规则引擎的 SQL 语法验证消息，此语法与规则引擎中的语法一致，但需省略 FROM 子句。任何生成值的 SQL 语句表示验证成功；如果没有返回值，则验证失败。例如，语句 <code>SELECT payload.foo + payload.bar as sum WHERE sum > 0</code> 用于验证字段 foo 和 bar 的和为正数。"
          },
          "sql": {
            "type": "string",
            "description": "使用规则引擎的 SQL 语法验证消息，此语法与规则引擎中的语法一致，但需省略 FROM 子句。任何生成值的 SQL 语句表示验证成功；如果没有返回值，则验证失败。例如，语句 <code>SELECT payload.foo + payload.bar as sum WHERE sum > 0</code> 用于验证字段 foo 和 bar 的和为正数。"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.put_connector": {
        "required": [
          "authentication",
          "bootstrap_hosts",
          "ssl"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "逗号分隔的 Azure Event Hubs Kafka 命名空间主机名 <code>host[:port]</code> ，用于引导客户端。  默认端口号为 9093。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "TCP 连接建立的最大等待时间（包括如果已启用身份认证则包括身份认证时间）",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "客户端在刷新 Azure Event Hubs Kafka 代理和主题元数据之前必须等待的最小时间间隔。设置太小的值可能会给 Azure Event Hubs 增加额外的负载。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "从 Azure Event Hubs 获取元数据时的最大等待时间。",
            "example": "32s"
          },
          "authentication": {
            "default": {},
            "description": "认证配置",
            "$ref": "#/components/schemas/bridge_azure_event_hub.auth_username_password"
          },
          "socket_opts": {
            "description": "额外的套接字选项。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "default": {
              "enable": true
            },
            "$ref": "#/components/schemas/bridge_azure_event_hub.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "file_transfer.local_storage_exporter_backend": {
        "properties": {
          "local": {
            "description": "将文件导出到本地存储。",
            "$ref": "#/components/schemas/file_transfer.local_storage_exporter"
          },
          "s3": {
            "description": "将文件导出到 AWS s3 API 兼容的对象存储服务。",
            "$ref": "#/components/schemas/file_transfer.s3_exporter"
          }
        },
        "type": "object"
      },
      "bridge_kafka.get_producer": {
        "required": [
          "bootstrap_hosts",
          "kafka",
          "name",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "kafka",
              "kafka_producer",
              "kafka_consumer"
            ],
            "description": "桥接类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字，可读描述"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "用逗号分隔的 <code>host[:port]</code> 主机列表。默认端口号为 9092。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "建立 TCP 连接时的最大等待时长（若启用认证，这个等待时长也包含完成认证所需时间）。",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "刷新 Kafka broker 和 Kafka 主题元数据段最短时间间隔。设置太小可能会增加 Kafka 压力。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "刷新元数据时最大等待时长。",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "认证参数。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "更多 Socket 参数设置。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题数据源由桥接指定，或留空由规则动作指定。"
          },
          "kafka": {
            "description": "Kafka 生产者参数。",
            "$ref": "#/components/schemas/bridge_kafka.v1_producer_kafka_opts"
          }
        },
        "type": "object"
      },
      "bridge_oracle.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_http.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "azure_event_hub_producer"
            ],
            "description": "动作的类型。"
          },
          "name": {
            "type": "string",
            "description": "桥接名称，作为桥接的一个可读描述。"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "将 MQTT 主题或主题过滤器作为数据源（动作输入）。如果使用规则动作作为数据源，则应将此配置保留为空，否则消息将在 Azure Event Hubs 中重复。"
          },
          "parameters": {
            "description": "Azure Event Hubs 生产者配置",
            "$ref": "#/components/schemas/bridge_azure_event_hub.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_producer.action_parameters": {
        "required": [
          "pubsub_topic"
        ],
        "properties": {
          "attributes_template": {
            "default": [],
            "type": "array",
            "description": "格式化出站消息属性的模板。未定义的值将被呈现为空字符串值。属性映射中的空键将被移除。",
            "items": {
              "$ref": "#/components/schemas/bridge_gcp_pubsub.key_value_pair"
            }
          },
          "ordering_key_template": {
            "default": "",
            "type": "string",
            "description": "格式化出站消息排序键的模板。未定义的值将被呈现为空字符串值。如果此值为空，则不会将其添加到消息中。"
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "用于格式化外发信息的模板。 如果未定义，将以 JSON 格式发送所有可用的上下文。"
          },
          "pubsub_topic": {
            "type": "string",
            "description": "要发布消息的 GCP PubSub 主题。"
          }
        },
        "type": "object"
      },
      "connector_mqtt.egress": {
        "required": [
          "remote"
        ],
        "properties": {
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "将发布消息到远程代理的 MQTT 客户端池的大小。<br/><br/>每个 MQTT 客户端都将分配'clientid'，格式为'${clientid_prefix}:${bridge_name}:egress:${node}:${n}'<br/>其中'n'是池中客户端的编号。",
            "minimum": 1
          },
          "local": {
            "description": "关于从本地代理接收消息的配置。",
            "$ref": "#/components/schemas/connector_mqtt.egress_local"
          },
          "remote": {
            "description": "关于向远程代理发送消息的配置。",
            "$ref": "#/components/schemas/connector_mqtt.egress_remote"
          }
        },
        "type": "object"
      },
      "bridge_elasticsearch.action_delete": {
        "required": [
          "action",
          "id",
          "index"
        ],
        "properties": {
          "action": {
            "type": "string",
            "enum": [
              "delete"
            ],
            "description": "delete"
          },
          "index": {
            "type": "string",
            "description": "执行操作的索引名称或索引别名。<br/>此参数是必需的。",
            "example": "${payload.index}"
          },
          "id": {
            "type": "string",
            "description": "文档 ID。如果没有指定 ID，将自动生成。",
            "example": "${payload.id}"
          },
          "routing": {
            "type": "string",
            "description": "用于将操作路由到特定分片的自定义值。",
            "example": "${payload.routing}"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "如果发送请求时出错，最大的重试次数。",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "message_transformation.log_failure": {
        "properties": {
          "level": {
            "default": "info",
            "type": "string",
            "enum": [
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none"
            ]
          }
        },
        "type": "object"
      },
      "bridge_s3.put_connector": {
        "required": [
          "host",
          "port"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "access_key_id": {
            "type": "string",
            "description": "S3 桶的访问密钥 ID。"
          },
          "secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "S3 桶的密钥访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "host": {
            "type": "string",
            "description": "S3 端点的主机。"
          },
          "port": {
            "type": "integer",
            "description": "S3 端点的端口。",
            "minimum": 1
          },
          "transport_options": {
            "description": "S3 客户端使用的 HTTP 传输层选项。",
            "$ref": "#/components/schemas/s3.transport_options"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_s3.s3_connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.post_consumer": {
        "required": [
          "consumer",
          "name",
          "resource_opts",
          "service_account_json",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_consumer"
            ],
            "description": "桥接类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字，可读描述"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_gcp_pubsub.consumer_resource_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "请求出错时的最大重试次数。",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "description": "废弃的。在缓冲区设置中配置请求超时。",
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "包含将与 PubSub 一起使用的 GCP 服务账户凭证的 JSON。<br/>当创建 GCP 服务账户时（如 https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount），可以选择下载 JSON 形式的凭证，然后在该配置项中使用。"
          },
          "consumer": {
            "description": "本地 MQTT 发布和 GCP PubSub 消费者配置。",
            "$ref": "#/components/schemas/bridge_gcp_pubsub.consumer"
          }
        },
        "type": "object"
      },
      "bridge_cassa.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cassandra"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "动作的具体配置",
            "$ref": "#/components/schemas/bridge_cassa.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_oracle.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_oracle.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_tdengine.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "TDengine 动作的参数。",
            "$ref": "#/components/schemas/bridge_tdengine.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.post_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rabbitmq"
            ]
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "description": "Source 配置定义了此数据输入如何从远程 RabbitMQ 代理接收消息。",
            "$ref": "#/components/schemas/bridge_rabbitmq.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.source_resource_opts"
          }
        },
        "type": "object"
      },
      "action_azure_blob_storage.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_blob_storage"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "Set of parameters for the action.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/action_azure_blob_storage.direct_parameters"
              },
              {
                "$ref": "#/components/schemas/action_azure_blob_storage.aggreg_parameters"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/action_azure_blob_storage.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_check_authz_complete": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "client_check_authz_complete"
            ],
            "description": "事件类型"
          },
          "clientid": {
            "type": "string",
            "description": "客户端 ID"
          },
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "peerhost": {
            "type": "string",
            "description": "对等客户端的 IP 地址"
          },
          "topic": {
            "type": "string",
            "description": "消息主题"
          },
          "action": {
            "type": "string",
            "description": "订阅或发布"
          },
          "authz_source": {
            "type": "string",
            "description": "缓存，插件或者默认值"
          },
          "result": {
            "type": "string",
            "description": "允许或禁止"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.get_grpc_v1": {
        "required": [
          "dbname",
          "name",
          "type",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 GreptimeDB 的 MQTT 主题过滤器。所有 MQTT 'PUBLISH' 消息中与 local_topic 匹配的主题都将被转发。<br/><br/>注意：如果此动作用作规则引擎 (EMQX 规则引擎) 的动作，并且配置了 local_topic，那么将会转发规则获取的数据以及与 local_topic 匹配的 MQTT 消息。"
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "GreptimeDB gRPC 协议写入数据点的配置。写入语法是一种文本格式，提供了数据点的测量、标签集、字段集和时间戳，并支持占位符，与 InfluxDB 行协议相同。<br/>参见 [InfluxDB 2.3 行协议](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) 和<br/>[GreptimeDB 1.8 行协议](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>简而言之:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>请注意，整数值的占位符必须用后缀 `i` 注释。例如 `${payload.int_value}i`。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:4001",
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>主机条目的格式如下：主机名[:端口]。<br/><br/>如果未指定 [:端口]，则使用 GreptimeDB 的默认端口 8086。"
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "GreptimeDB 的时间精度。"
          },
          "dbname": {
            "type": "string",
            "description": "GreptimeDB 数据库"
          },
          "username": {
            "type": "string",
            "description": "GreptimeDB 用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "GreptimeDB 密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "greptimedb"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作的名称"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_clickhouse.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "datalayers"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_datalayers.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "maximum": 500,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_unsub": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "session_unsubscribed"
            ],
            "description": "事件类型"
          },
          "clientid": {
            "type": "string",
            "description": "客户端 ID"
          },
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "payload": {
            "type": "string",
            "description": "消息负载"
          },
          "peerhost": {
            "type": "string",
            "description": "对等客户端的 IP 地址"
          },
          "topic": {
            "type": "string",
            "description": "消息主题"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "消息被接受的时间"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "消息的 QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "bridge_influxdb.get_connector": {
        "required": [
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "influxdb"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 InfluxDB 默认端口 8086。"
          },
          "parameters": {
            "description": "给定版本的 InfluxDB 连接器的参数集，`influxdb_type` 可以是 `influxdb_api_v1` 或 `influxdb_api_v2`。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/connector_influxdb.connector_influxdb_api_v2"
              },
              {
                "$ref": "#/components/schemas/connector_influxdb.connector_influxdb_api_v1"
              }
            ]
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_influxdb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_redis.creation_opts_redis_cluster": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_elasticsearch.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "elasticsearch"
            ]
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "description": "ElasticSearch 动作参数",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_update"
              },
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_delete"
              },
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_create"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_elasticsearch.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.get_producer": {
        "required": [
          "name",
          "pubsub_topic",
          "service_account_json",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub"
            ],
            "description": "桥接类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字，可读描述"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "请求出错时的最大重试次数。",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "description": "废弃的。在缓冲区设置中配置请求超时。",
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "包含将与 PubSub 一起使用的 GCP 服务账户凭证的 JSON。<br/>当创建 GCP 服务账户时（如 https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount），可以选择下载 JSON 形式的凭证，然后在该配置项中使用。"
          },
          "attributes_template": {
            "default": [],
            "type": "array",
            "description": "格式化出站消息属性的模板。未定义的值将被呈现为空字符串值。属性映射中的空键将被移除。",
            "items": {
              "$ref": "#/components/schemas/bridge_gcp_pubsub.key_value_pair"
            }
          },
          "ordering_key_template": {
            "default": "",
            "type": "string",
            "description": "格式化出站消息排序键的模板。未定义的值将被呈现为空字符串值。如果此值为空，则不会将其添加到消息中。"
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "用于格式化外发信息的模板。 如果未定义，将以 JSON 格式发送所有可用的上下文。"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 GCP PubSub。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 GCP PubSub。"
          },
          "pubsub_topic": {
            "type": "string",
            "description": "要发布消息的 GCP PubSub 主题。"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_matrix.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "matrix"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "特定于 PostgreSQL 动作的参数配置",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.action_parameters": {
        "required": [
          "exchange",
          "routing_key"
        ],
        "properties": {
          "wait_for_publish_confirmations": {
            "default": true,
            "type": "boolean",
            "description": "一个布尔值，指示在使用发布者确认时是否等待 RabbitMQ 确认消息发布。"
          },
          "publish_confirmation_timeout": {
            "default": "30s",
            "type": "string",
            "description": "等待连接建立的超时时间。",
            "example": "32s"
          },
          "exchange": {
            "type": "string",
            "description": "消息将被发送到的 RabbitMQ 交换机的名称。"
          },
          "routing_key": {
            "type": "string",
            "description": "用于将消息路由到 RabbitMQ 交换机中正确队列的路由键。"
          },
          "delivery_mode": {
            "default": "non_persistent",
            "type": "string",
            "enum": [
              "non_persistent",
              "persistent"
            ],
            "description": "发布到 RabbitMQ 的消息的传递模式。非持久化传递模式（1）适用于不需要在 RabbitMQ 重启后保持的消息，而持久化传递模式（2）用于必须在 RabbitMQ 重启后仍然存在的消息。"
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "在发送消息到 RabbitMQ 之前格式化消息 payload 的模板。例如 ${field1.sub_field} 的模板占位符将被相应字段的值替换。如果留空，整个输入消息将被用作 payload，格式化为 JSON 文本。这种行为等同于将 ${.} 指定为 payload 模板。"
          }
        },
        "type": "object"
      },
      "bridge_http.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "connector.node_status": {
        "properties": {
          "node": {
            "type": "string",
            "description": "节点的名称",
            "example": "emqx@127.0.0.1"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ]
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.put_connector": {
        "required": [
          "database",
          "parameters"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "parameters": {
            "description": "特定于此 MongoDB 连接器类型的一组参数，mongo_type 可以是 single（独立）、sharded（分片）或 rs（副本集）之一。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/mongo.connector_rs"
              },
              {
                "$ref": "#/components/schemas/mongo.connector_sharded"
              },
              {
                "$ref": "#/components/schemas/mongo.connector_single"
              }
            ]
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "使用 DNS SRV 记录。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。"
          },
          "auth_source": {
            "type": "string",
            "description": "与用户认证信息关联的数据库名称。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mongodb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_redis.get_single": {
        "required": [
          "command_template",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 Redis 的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果此动作用作规则的动作（EMQX 规则引擎），并且还配置了 local_topic，则规则中获取的数据和与 local_topic 匹配的 MQTT 消息都将被转发。"
          },
          "command_template": {
            "type": "array",
            "description": "用于导出消息的 Redis 命令模板。每个列表元素代表一个命令名称或其参数。<br/>例如，要将有效负载推送到 Redis 列表中的键 msgs，元素应该如下所示：<br/>rpush，msgs，${payload}。",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_single"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。"
          },
          "redis_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "Single 模式。 当 Redis 服务器在 Single 模式下运行时必须设置为 'single' 。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis 数据库 ID。",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "redis_single"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作对动作的用户可读描述"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          }
        },
        "type": "object"
      },
      "bridge_kafka.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_sqlserver.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "schema_validation.validation": {
        "required": [
          "checks",
          "failure_action",
          "name",
          "strategy",
          "topics"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "enable": {
            "default": true,
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "description": "名称"
          },
          "topics": {
            "description": "此验证规则应验证的单个主题过滤器或主题过滤器列表。",
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "strategy": {
            "type": "string",
            "enum": [
              "any_pass",
              "all_pass"
            ],
            "description": "验证策略"
          },
          "failure_action": {
            "type": "string",
            "enum": [
              "drop",
              "disconnect",
              "ignore"
            ],
            "description": "如果验证失败，将如何处理。<br/><br/>  <code>drop</code>：违规消息将被直接丢弃，不进行进一步处理。<br/>  <code>disconnect</code>：消息不会被发布，发布客户端将被断开连接。<br/>  <code>ignore</code>：仅记录和追踪失败，不采取其他行动。"
          },
          "log_failure": {
            "default": {},
            "description": "将以哪种日志级别记录验证失败。",
            "$ref": "#/components/schemas/schema_validation.log_failure"
          },
          "checks": {
            "type": "array",
            "description": "在验证过程中将执行的检查。它们将按照定义的顺序进行评估。",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/schema_validation.check_protobuf"
                },
                {
                  "$ref": "#/components/schemas/schema_validation.check_avro"
                },
                {
                  "$ref": "#/components/schemas/schema_validation.check_json"
                },
                {
                  "$ref": "#/components/schemas/schema_validation.check_sql"
                }
              ]
            }
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.put_source": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "parameters": {
            "$ref": "#/components/schemas/bridge_mqtt_publisher.ingress_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.source_resource_opts"
          }
        },
        "type": "object"
      },
      "node_eviction.stats": {
        "properties": {
          "connections": {
            "type": "integer"
          },
          "sessions": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "bridge_kafka.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka_producer"
            ],
            "description": "桥接类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字，可读描述"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题数据源由桥接指定，或留空由规则动作指定。"
          },
          "parameters": {
            "description": "Kafka 生产者参数。",
            "$ref": "#/components/schemas/bridge_kafka.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.post_producer": {
        "required": [
          "name",
          "pubsub_topic",
          "service_account_json",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub"
            ],
            "description": "桥接类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字，可读描述"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "请求出错时的最大重试次数。",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "description": "废弃的。在缓冲区设置中配置请求超时。",
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "包含将与 PubSub 一起使用的 GCP 服务账户凭证的 JSON。<br/>当创建 GCP 服务账户时（如 https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount），可以选择下载 JSON 形式的凭证，然后在该配置项中使用。"
          },
          "attributes_template": {
            "default": [],
            "type": "array",
            "description": "格式化出站消息属性的模板。未定义的值将被呈现为空字符串值。属性映射中的空键将被移除。",
            "items": {
              "$ref": "#/components/schemas/bridge_gcp_pubsub.key_value_pair"
            }
          },
          "ordering_key_template": {
            "default": "",
            "type": "string",
            "description": "格式化出站消息排序键的模板。未定义的值将被呈现为空字符串值。如果此值为空，则不会将其添加到消息中。"
          },
          "payload_template": {
            "default": "",
            "type": "string",
            "description": "用于格式化外发信息的模板。 如果未定义，将以 JSON 格式发送所有可用的上下文。"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 GCP PubSub。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 GCP PubSub。"
          },
          "pubsub_topic": {
            "type": "string",
            "description": "要发布消息的 GCP PubSub 主题。"
          }
        },
        "type": "object"
      },
      "connector_azure_blob_storage.post_connector": {
        "required": [
          "account_name",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_blob_storage"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "account_name": {
            "type": "string",
            "description": "Account name for Azure Blob Storage service."
          },
          "account_key": {
            "type": "string",
            "format": "password",
            "description": "Account key for Azure Blob Storage service.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_azure_blob_storage.resource_opts"
          }
        },
        "type": "object"
      },
      "mongo.topology": {
        "properties": {
          "max_overflow": {
            "default": 0,
            "type": "integer",
            "description": "在池中的所有工作线程都繁忙时，可以创建的附加工作线程的最大数量。这有助于通过允许更多并发连接到 MongoDB 服务器来管理工作负载的暂时性波动。",
            "minimum": 0
          },
          "overflow_ttl": {
            "type": "string",
            "description": "超出配置的池大小（\"溢出\"）的工作线程在终止之前的时间段。",
            "example": "32s"
          },
          "overflow_check_period": {
            "type": "string",
            "description": "检查是否存在多余工作线程（\"溢出\"）的周期。",
            "example": "32s"
          },
          "local_threshold_ms": {
            "type": "string",
            "description": "用于在多个合适的 MongoDB 实例中进行选择的延迟窗口的大小。",
            "example": "32s"
          },
          "connect_timeout_ms": {
            "type": "string",
            "description": "在超时之前尝试连接的持续时间。",
            "example": "32s"
          },
          "socket_timeout_ms": {
            "type": "string",
            "description": "在套接字上尝试发送或接收超时之前的持续时间。",
            "example": "32s"
          },
          "server_selection_timeout_ms": {
            "type": "string",
            "description": "指定在抛出异常之前进行服务器选择的阻塞时间。",
            "example": "32s"
          },
          "wait_queue_timeout_ms": {
            "type": "string",
            "description": "工作线程等待连接可用的最长时间。",
            "example": "32s"
          },
          "heartbeat_frequency_ms": {
            "default": "200s",
            "type": "string",
            "description": "控制驱动程序何时检查 MongoDB 部署的状态。指定检查之间的时间间隔，从上次检查结束到下次检查开始计算。如果连接数增加（例如，如果增加了池大小），则可能需要增加此时间间隔，以避免在 MongoDB 日志文件中创建过多的日志条目。",
            "example": "32s"
          },
          "min_heartbeat_frequency_ms": {
            "type": "string",
            "description": "控制心跳之间等待的最短时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_http.get": {
        "required": [
          "name",
          "type",
          "url"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "webhook",
              "http"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作动作的可读描述。"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或停用动作"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接到 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "连接池类型。可以是random、hash之一。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
            "minimum": 1
          },
          "request": {
            "type": "object",
            "deprecated": true,
            "description": "This field is never used, so we deprecated it since 5.3.2.",
            "example": {}
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "url": {
            "type": "string",
            "description": "HTTP 动作的 URL。<br/><br/>此路径允许使用带有变量的模板，但变量不能用于方案、主机或端口部分。<br/><br/>例如，<code> http://localhost:9901/${topic} </code> 是允许的，但<br/><code> http://${host}:9901/message </code> 或 <code> http://localhost:${port}/message </code><br/>是不允许的。"
          },
          "direction": {
            "type": "string",
            "enum": [
              "egress"
            ],
            "deprecated": true
          },
          "local_topic": {
            "type": "string",
            "description": "将要转发到 HTTP 服务器的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果将此动作用作规则的操作（EMQX 规则引擎），并且同时配置了 local_topic，那么将同时转发从规则获取的数据和与 local_topic 匹配的 MQTT 消息。"
          },
          "method": {
            "default": "post",
            "type": "string",
            "enum": [
              "post",
              "put",
              "get",
              "delete"
            ],
            "description": "HTTP 请求的方法。所有可用的方法包括：post、put、get、delete。<br/><br/>允许使用带有变量的模板。"
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "type": "object",
            "description": "HTTP 请求头。<br/><br/>允许使用带有变量的模板。",
            "example": {},
            "is_template": true
          },
          "body": {
            "type": "string",
            "description": "HTTP 请求的主体。<br/><br/>如果未提供，主体将是所有可用字段的 JSON 对象。<br/><br/>这里的“所有可用字段”是指在触发此 Webhook 时的 MQTT 消息的上下文（当 local_topic 已设置并接收到 MQTT 消息时触发），<br/>或者当此 Webhook 用作规则的动作时，在触发此 Webhook 时的事件上下文。<br/>允许使用带有变量的模板。"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "如果发送请求时出错，最大的重试次数。",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "description": "HTTP 请求超时时间",
            "example": "32s"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_http.v1_resource_opts"
          }
        },
        "type": "object"
      },
      "rocketmq.post": {
        "required": [
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rocketmq"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "template": {
            "default": "",
            "type": "string",
            "description": "模板, 默认为空，为空时将会将整个消息转发给 RocketMQ。 <br/><br/>            模板可以是任意带有占位符的合法字符串, 例如:<br/>            ${id}, ${username}, ${clientid}, ${timestamp}<br/><br/>            {\"id\" : ${id}, \"username\" : ${username}}"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 RocketMQ。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "strategy": {
            "default": "roundrobin",
            "description": "生产者键派发策略，默认为 `roundrobin`，也支持占位符，如：`clientid`、`messageid`、`username`。",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "roundrobin"
                ]
              }
            ]
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "servers": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 RocketMQ 默认端口 9876。"
          },
          "namespace": {
            "type": "string",
            "description": "如果你正在使用阿里云的 RocketMQ 服务并且启用了命名空间，或者您在自己的 RocketMQ 服务器中配置了命名空间，则必须配置命名空间字段。对于阿里云中的 RocketMQ 服务，命名空间就是实例 ID。"
          },
          "topic": {
            "default": "TopicTest",
            "type": "string",
            "description": "RocketMQ 主题"
          },
          "access_key": {
            "default": "",
            "type": "string",
            "description": "RocketMQ 服务器的 `accessKey`。"
          },
          "secret_key": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ 服务器的 `secretKey`。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "security_token": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ 服务器安全令牌",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "RocketMQ 驱动同步调用的超时时间。",
            "example": "12m"
          },
          "refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "RocketMQ 主题路由更新间隔。",
            "example": "12m"
          },
          "send_buffer": {
            "default": "1024KB",
            "type": "string",
            "description": "RocketMQ 驱动的套字节发送消息的缓冲区大小",
            "example": "32MB"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_s3.s3_connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_delivery_dropped": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "delivery_dropped"
            ],
            "description": "事件类型"
          },
          "id": {
            "type": "string",
            "description": "消息 ID"
          },
          "reason": {
            "type": "string",
            "description": "消息被丢弃的原因"
          },
          "from_clientid": {
            "type": "string",
            "description": "事件来源客户端的 ID"
          },
          "from_username": {
            "type": "string",
            "description": "事件来源客户端的用户名"
          },
          "clientid": {
            "type": "string",
            "description": "客户端 ID"
          },
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "payload": {
            "type": "string",
            "description": "消息负载"
          },
          "peerhost": {
            "type": "string",
            "description": "对等客户端的 IP 地址"
          },
          "topic": {
            "type": "string",
            "description": "消息主题"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "消息被接受的时间"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "消息的 QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "cluster_link.link_metrics_response": {
        "properties": {
          "node_metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/cluster_link.node_metrics"
            }
          },
          "metrics": {
            "type": "object",
            "example": {}
          }
        },
        "type": "object"
      },
      "connector_postgres.post_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pgsql"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "type": "string",
            "description": "用于连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目具有以下格式：Host[:Port]。<br/><br/>如果未指定 [:Port]，将使用 PostgreSQL 默认端口5432。"
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "在连接中禁用预处理语句的使用。<br/>某些端点，如 PGBouncer 或 Transaction 模式下的 Supabase，<br/>不支持像处理语句这样的会话功能。 <br/> 对于此类连接，应启用此选项。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_redis.get_cluster": {
        "required": [
          "command_template",
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 Redis 的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果此动作用作规则的动作（EMQX 规则引擎），并且还配置了 local_topic，则规则中获取的数据和与 local_topic 匹配的 MQTT 消息都将被转发。"
          },
          "command_template": {
            "type": "array",
            "description": "用于导出消息的 Redis 命令模板。每个列表元素代表一个命令名称或其参数。<br/>例如，要将有效负载推送到 Redis 列表中的键 msgs，元素应该如下所示：<br/>rpush，msgs，${payload}。",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_cluster"
          },
          "servers": {
            "type": "string",
            "description": "集群将要连接的节点列表。 节点之间用逗号分隔，如：Node[,Node]。每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。"
          },
          "redis_type": {
            "default": "cluster",
            "type": "string",
            "enum": [
              "cluster"
            ],
            "description": "Cluster 模式。当 Redis 服务器在集群模式下运行时必须设置为'cluster'。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "redis_cluster"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作对动作的用户可读描述"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          }
        },
        "type": "object"
      },
      "bridge_kinesis.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kinesis"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_kinesis.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kinesis.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.producer_kafka_ext_headers": {
        "required": [
          "kafka_ext_header_key",
          "kafka_ext_header_value"
        ],
        "properties": {
          "kafka_ext_header_key": {
            "type": "string",
            "description": "Kafka 头部的键。支持格式为 ${var} 的占位符。"
          },
          "kafka_ext_header_value": {
            "type": "string",
            "description": "Kafka 头部的值。支持格式为 ${var} 的占位符。"
          }
        },
        "type": "object"
      },
      "bridge_timescale.get": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "pgsql"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 PostgreSQL。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目的格式为：Host[:Port]。<br/><br/>如果没有指定 [:Port]，将使用 PostgreSQL 默认端口 5432。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.rule_test": {
        "required": [
          "sql"
        ],
        "properties": {
          "context": {
            "default": {},
            "description": "测试事件的上下文",
            "oneOf": [
              {
                "$ref": "#/components/schemas/rule_engine.ctx_message_transformation_failed"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_schema_validation_failed"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_delivery_dropped"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_bridge_mqtt"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_check_authn_complete"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_check_authz_complete"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_connack"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_disconnected"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_connected"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_dropped"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_acked"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_delivered"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_unsub"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_sub"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_pub"
              }
            ]
          },
          "sql": {
            "type": "string",
            "description": "测试的 SQL"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.get_connector": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "endpoint",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kinesis"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "连接到 Amazon Kinesis 的访问密钥 ID。"
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "连接到 Amazon Kinesis 的 AWS 秘密访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "endpoint": {
            "type": "string",
            "description": "Amazon Kinesis 终端节点的 URL。",
            "example": "https://kinesis.us-east-1.amazonaws.com"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "发送请求时发生错误的最大重试次数。",
            "minimum": 0
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小",
            "minimum": 1
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kinesis.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.put_connector": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "region",
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "url": {
            "type": "string",
            "description": "DynamoDB 的地址。"
          },
          "region": {
            "type": "string",
            "description": "AWS Dynamo 的区域"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "DynamoDB 的访问 ID。"
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "DynamoDB 的访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_dynamo.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_syskeeper_proxy.post": {
        "required": [
          "listen",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "syskeeper_proxy"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "listen": {
            "type": "string",
            "description": "此 Syskeeper 代理服务器的监听地址"
          },
          "acceptors": {
            "default": 16,
            "type": "integer",
            "description": "接受者的数量",
            "minimum": 0
          },
          "handshake_timeout": {
            "default": "10s",
            "type": "string",
            "description": "在创建连接时等待握手的最长时间",
            "example": "32s"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_syskeeper_proxy.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_consumer.put_source": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "parameters": {
            "description": "Source 配置。",
            "$ref": "#/components/schemas/gcp_pubsub_consumer.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/gcp_pubsub_consumer.source_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "此动作类型特定的额外参数",
            "$ref": "#/components/schemas/bridge_influxdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_s3.post_connector": {
        "required": [
          "host",
          "name",
          "port",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "s3"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "access_key_id": {
            "type": "string",
            "description": "S3 桶的访问密钥 ID。"
          },
          "secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "S3 桶的密钥访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "host": {
            "type": "string",
            "description": "S3 端点的主机。"
          },
          "port": {
            "type": "integer",
            "description": "S3 端点的端口。",
            "minimum": 1
          },
          "transport_options": {
            "description": "S3 客户端使用的 HTTP 传输层选项。",
            "$ref": "#/components/schemas/s3.transport_options"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_s3.s3_connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "将 MQTT 主题或主题过滤器作为数据源（动作输入）。如果使用规则动作作为数据源，则应将此配置保留为空，否则消息将在 Azure Event Hubs 中重复。"
          },
          "parameters": {
            "description": "Azure Event Hubs 生产者配置",
            "$ref": "#/components/schemas/bridge_azure_event_hub.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "connector.resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.post_connector": {
        "required": [
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "datalayers"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "default": "127.0.0.1:8361",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The Datalayers default port 8361 is used if `[:Port]` is not specified."
          },
          "parameters": {
            "description": "Set of parameters specific for the given type of this Datalayers connector.",
            "$ref": "#/components/schemas/connector_datalayers.datalayers_parameters"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_datalayers.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "rule_engine.rule_apply_test": {
        "properties": {
          "context": {
            "default": {},
            "description": "测试事件的上下文",
            "oneOf": [
              {
                "$ref": "#/components/schemas/rule_engine.ctx_message_transformation_failed"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_schema_validation_failed"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_delivery_dropped"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_bridge_mqtt"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_check_authn_complete"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_check_authz_complete"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_connack"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_disconnected"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_connected"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_dropped"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_acked"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_delivered"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_unsub"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_sub"
              },
              {
                "$ref": "#/components/schemas/rule_engine.ctx_pub"
              }
            ]
          },
          "stop_action_after_template_rendering": {
            "default": true,
            "type": "boolean",
            "description": "如果操作在模板渲染后应该停止，请将此设置为 true（默认为 true）。"
          }
        },
        "type": "object"
      },
      "bridge_mysql.get": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "mysql"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作对动作的用户可读描述"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或停用该动作"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL 模版"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 MySQL 的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果此动作用作规则的操作（EMQX 规则引擎），并且还配置了 local_topic，则规则中获取的数据和与 local_topic 匹配的 MQTT 消息都将被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "用于连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>主机条目的格式如下：主机[:端口]。<br/><br/>如果未指定[:端口]，将使用 MySQL 的默认端口3306。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "action_azure_blob_storage.aggreg_parameters": {
        "required": [
          "aggregation",
          "blob",
          "container",
          "mode"
        ],
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "aggregated"
            ],
            "description": "Enables time-based aggregation of incoming events and uploading them to the Azure Blob Storage service as a single object."
          },
          "aggregation": {
            "description": "Set of parameters governing the aggregation process.",
            "$ref": "#/components/schemas/action_azure_blob_storage.aggregation"
          },
          "container": {
            "type": "string",
            "description": "The Azure Blob Storage container name. Does not support templates."
          },
          "blob": {
            "type": "string",
            "description": "Template for the Azure Blob Storage blob name of an aggregated upload.<br/><br/>  Template may contain placeholders for the following variables:<br/>  <ul><br/>  <li><code>${action}</code>: name of the action (required).</li><br/>  <li><code>${node}</code>: name of the EMQX node conducting the upload (required).</li><br/>  <li><code>${datetime.{format}}</code>: date and time when aggregation started, formatted according to the <code>{format}</code> string (required):<br/>      <ul><br/>      <li><code>${datetime.rfc3339utc}</code>: RFC3339-formatted date and time in UTC,</li><br/>      <li><code>${datetime.rfc3339}</code>: RFC3339-formatted date and time in local timezone,</li><br/>      <li><code>${datetime.unix}</code>: Unix timestamp.</li><br/>      </ul><br/>  </li><br/>  <li><code>${datetime_until.{format}}</code>: date and time when aggregation ended, with the same formatting options.</li><br/>  <li><code>${sequence}</code>: sequence number of the aggregated upload within the same time interval (required).</li><br/>  </ul><br/>  All other placeholders are considered invalid. Note that placeholders marked as required will be added as a path suffix to the Azure Blob Storage blob name if they are missing from the template."
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.put_connector": {
        "required": [
          "database",
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "driver": {
            "default": "ms-sql",
            "type": "string",
            "description": "SQL Server Driver 名称"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 SQL Server 默认端口 1433。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "default": "sa",
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_sqlserver.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "cluster_link.node_metrics": {
        "properties": {
          "node": {
            "type": "string"
          },
          "metrics": {
            "type": "object",
            "example": {}
          }
        },
        "type": "object"
      },
      "bridge_dynamo.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "dynamo"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_dynamo.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_producer.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "动作的配置",
            "$ref": "#/components/schemas/gcp_pubsub_producer.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_influxdb.connector_influxdb_api_v1": {
        "required": [
          "database",
          "influxdb_type"
        ],
        "properties": {
          "influxdb_type": {
            "default": "influxdb_api_v1",
            "type": "string",
            "enum": [
              "influxdb_api_v1"
            ],
            "description": "InfluxDB HTTP API 协议。支持 Influxdb v1.8 以及之前的版本。"
          },
          "database": {
            "type": "string",
            "description": "InfluxDB 数据库。"
          },
          "username": {
            "type": "string",
            "description": "InfluxDB 用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB 密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "bridge_redis.post_cluster": {
        "required": [
          "command_template",
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 Redis 的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果此动作用作规则的动作（EMQX 规则引擎），并且还配置了 local_topic，则规则中获取的数据和与 local_topic 匹配的 MQTT 消息都将被转发。"
          },
          "command_template": {
            "type": "array",
            "description": "用于导出消息的 Redis 命令模板。每个列表元素代表一个命令名称或其参数。<br/>例如，要将有效负载推送到 Redis 列表中的键 msgs，元素应该如下所示：<br/>rpush，msgs，${payload}。",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_cluster"
          },
          "servers": {
            "type": "string",
            "description": "集群将要连接的节点列表。 节点之间用逗号分隔，如：Node[,Node]。每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。"
          },
          "redis_type": {
            "default": "cluster",
            "type": "string",
            "enum": [
              "cluster"
            ],
            "description": "Cluster 模式。当 Redis 服务器在集群模式下运行时必须设置为'cluster'。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "redis_cluster"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作对动作的用户可读描述"
          }
        },
        "type": "object"
      },
      "message_transformation.transformation": {
        "required": [
          "failure_action",
          "name",
          "topics"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "enable": {
            "default": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "topics": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ]
          },
          "failure_action": {
            "type": "string",
            "enum": [
              "drop",
              "disconnect",
              "ignore"
            ]
          },
          "log_failure": {
            "default": {},
            "$ref": "#/components/schemas/message_transformation.log_failure"
          },
          "payload_decoder": {
            "default": {
              "type": "none"
            },
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "payload_serde_protobuf"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "payload_serde_avro"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "payload_serde_json"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "payload_serde_none"
                ]
              }
            ]
          },
          "payload_encoder": {
            "default": {
              "type": "none"
            },
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "payload_serde_protobuf"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "payload_serde_avro"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "payload_serde_json"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "payload_serde_none"
                ]
              }
            ]
          },
          "operations": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/message_transformation.operation"
            }
          }
        },
        "type": "object"
      },
      "bridge_pulsar.producer_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "1s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "confluent.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "confluent_producer"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作动作的可读描述。"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "将 MQTT 主题或主题过滤器作为数据源（动作输入）。如果使用规则动作作为数据源，则应将此配置保留为空，否则消息将在 Confluent 中重复。"
          },
          "parameters": {
            "description": "Confluent 生产者配置。",
            "$ref": "#/components/schemas/confluent.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.get_producer": {
        "required": [
          "bootstrap_hosts",
          "kafka",
          "name",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "kafka",
              "kafka_producer",
              "kafka_consumer"
            ],
            "description": "动作的类型。"
          },
          "name": {
            "type": "string",
            "description": "桥接名称，作为桥接的一个可读描述。"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "逗号分隔的 Azure Event Hubs Kafka 命名空间主机名 <code>host[:port]</code> ，用于引导客户端。  默认端口号为 9093。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "TCP 连接建立的最大等待时间（包括如果已启用身份认证则包括身份认证时间）",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "客户端在刷新 Azure Event Hubs Kafka 代理和主题元数据之前必须等待的最小时间间隔。设置太小的值可能会给 Azure Event Hubs 增加额外的负载。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "从 Azure Event Hubs 获取元数据时的最大等待时间。",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "认证配置",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "额外的套接字选项。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "local_topic": {
            "type": "string",
            "description": "将 MQTT 主题或主题过滤器作为数据源（动作输入）。如果使用规则动作作为数据源，则应将此配置保留为空，否则消息将在 Azure Event Hubs 中重复。"
          },
          "kafka": {
            "description": "Azure Event Hubs 生产者配置",
            "$ref": "#/components/schemas/bridge_kafka.v1_producer_kafka_opts"
          }
        },
        "type": "object"
      },
      "connector_couchbase.get_connector": {
        "required": [
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "couchbase"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>  A host entry has the following form: `Host[:Port]`.<br/><br/>  The Couchbase default query service port 8093 is used if `[:Port]` is not specified."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "Username for Couchbase service."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Password for Couchbase service.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector.resource_opts"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_s3.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "s3"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "将传入事件上传到 S3 API 兼容服务的操作。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_s3.s3_direct_upload_parameters"
              },
              {
                "$ref": "#/components/schemas/bridge_s3.s3_aggregated_upload_parameters"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_s3.s3_upload_resource_opts"
          }
        },
        "type": "object"
      },
      "rocketmq.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rocketmq"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/rocketmq.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "file_transfer.local_storage": {
        "properties": {
          "segments": {
            "default": {
              "gc": {}
            },
            "description": "本地文件系统存储配置，包括已上传的文件分片和临时数据。",
            "$ref": "#/components/schemas/file_transfer.local_storage_segments"
          },
          "exporter": {
            "default": {
              "local": {}
            },
            "description": "将文件导出到本地存储<br/><br/>该配置项指定所有分片都传输完成了的文件进行导出到本地存储的相关行为。",
            "$ref": "#/components/schemas/file_transfer.local_storage_exporter_backend"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "是否启用该后端"
          }
        },
        "type": "object"
      },
      "rule_engine.rule_info": {
        "required": [
          "id",
          "sql"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "规则的 ID",
            "example": "293fb66f"
          },
          "from": {
            "type": "array",
            "description": "规则指定的主题",
            "items": {
              "type": "string"
            },
            "example": "t/#"
          },
          "created_at": {
            "type": "string",
            "description": "规则创建时间",
            "example": "2021-12-01T15:00:43.153+08:00"
          },
          "name": {
            "default": "",
            "type": "string",
            "description": "规则名字",
            "example": "foo"
          },
          "sql": {
            "type": "string",
            "description": "用于处理消息的 SQL 。<br/>示例：<code>SELECT * FROM \"test/topic\" WHERE payload.x = 1</code>",
            "example": "SELECT * FROM \"test/topic\" WHERE payload.x = 1"
          },
          "actions": {
            "default": [],
            "type": "array",
            "description": "规则的动作列表。<br/>动作可以是指向 EMQX 数据桥接的引用，也可以是一个指向函数的对象。<br/>我们支持一些内置函数，如“republish”和“console”，我们还支持用户提供的函数，它的格式为：“{module}:{function}”。<br/>列表中的动作按顺序执行。这意味着如果其中一个动作执行缓慢，则以下所有动作都不会被执行直到它返回。<br/>如果其中一个动作崩溃，在它之后的所有动作仍然会被按照原始顺序执行。<br/>如果运行动作时出现任何错误，则会出现错误消息，并且相应的计数器会增加。",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/rule_engine.user_provided_function"
                },
                {
                  "$ref": "#/components/schemas/rule_engine.builtin_action_console"
                },
                {
                  "$ref": "#/components/schemas/rule_engine.builtin_action_republish"
                },
                {
                  "type": "string"
                }
              ]
            },
            "example": [
              "webhook:my_webhook",
              {
                "args": {
                  "payload": "${payload}",
                  "topic": "t/1"
                },
                "function": "republish"
              },
              {
                "function": "console"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或禁用规则引擎"
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "规则的描述",
            "example": "Some description"
          },
          "metadata": {
            "type": "object",
            "description": "规则的元数据，不要手动修改",
            "example": {}
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_acked": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "message_acked"
            ],
            "description": "事件类型"
          },
          "id": {
            "type": "string",
            "description": "消息 ID"
          },
          "from_clientid": {
            "type": "string",
            "description": "事件来源客户端的 ID"
          },
          "from_username": {
            "type": "string",
            "description": "事件来源客户端的用户名"
          },
          "clientid": {
            "type": "string",
            "description": "客户端 ID"
          },
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "payload": {
            "type": "string",
            "description": "消息负载"
          },
          "peerhost": {
            "type": "string",
            "description": "对等客户端的 IP 地址"
          },
          "topic": {
            "type": "string",
            "description": "消息主题"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "消息被接受的时间"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "消息的 QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "bridge_mysql.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "rocketmq.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rocketmq"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/rocketmq.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_timescale.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "timescale"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "特定于 PostgreSQL 动作的参数配置",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "kafka_consumer.source_parameters": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "指定从哪个 Kafka 主题消费消息。"
          },
          "group_id": {
            "type": "string",
            "description": "Consumer group identifier to be used for this source.  If omitted, one based off the source name will be automatically generated."
          },
          "max_batch_bytes": {
            "default": "896KB",
            "type": "string",
            "description": "设置每次从 Kafka 拉取数据的字节数。如该配置小于 Kafka 消息的大小，可能会影响消费性能。",
            "example": "32MB"
          },
          "offset_reset_policy": {
            "default": "latest",
            "type": "string",
            "enum": [
              "latest",
              "earliest"
            ],
            "description": "如不存在偏移量历史记录或历史记录失效，消费者应使用哪个偏移量开始消费。"
          },
          "offset_commit_interval_seconds": {
            "default": "5s",
            "type": "string",
            "description": "指定 Kafka 消费组偏移量提交的时间间隔。",
            "example": "1h"
          },
          "key_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "通过 MQTT 转发之前，如何处理 Kafka 消息的 Key。<code>none</code> 使用 Kafka 消息中的 Key 原始值，不进行编码。  注意：在这种情况下，Key 必须是一个有效的 UTF-8 字符串。<br/><code>base64</code> 对收到的密钥或值使用 base-64 编码。"
          },
          "value_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "通过 MQTT 转发之前，如何处理 Kafka 消息的 Value。<code>none</code> 使用 Kafka 消息中的 Value 原始值，不进行编码。  注意：在这种情况下，Value 必须是一个有效的 UTF-8 字符串。<br/><code>base64</code> 对收到的 Value 使用 base-64 编码。"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_kinesis.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kinesis.action_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_postgres.resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_s3.s3_aggregated_upload_parameters": {
        "required": [
          "aggregation",
          "bucket",
          "container",
          "key",
          "mode"
        ],
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "aggregated"
            ],
            "description": "启用基于时间的传入事件聚合，并将它们作为一个单独的对象上传到 S3 服务。"
          },
          "container": {
            "default": {
              "type": "csv"
            },
            "description": "规定包含聚合事件的上传文件格式的设置。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_s3.s3_aggregated_container_csv"
              }
            ]
          },
          "aggregation": {
            "description": "管理聚合过程的参数集。",
            "$ref": "#/components/schemas/bridge_s3.s3_aggregation"
          },
          "bucket": {
            "type": "string",
            "description": "S3 桶的名称。"
          },
          "key": {
            "type": "string",
            "description": "聚合上传的 S3 对象键模板。<br/><br/>此模板可以包含以下变量的占位符：<br/><ul><br/><li><code>${action}</code>: 操作的名称（必须）。<li/><br/><li><code>${node}</code>: 执行上传的 EMQX 节点的名称（必需）。<li/><br/><li><code>${datetime.{format}}</code>: 聚合开始的日期和时间，按照 <code>{format}</code> 字符串格式化（必需），包括：<br/>    <ul><br/>    <li><code>${datetime.rfc3339utc}</code>: 使用 RFC3339 格式化的 UTC 日期和时间。<li/><br/>    <li><code>${datetime.rfc3339}</code>: 使用 RFC3339 格式化的本地时区日期和时间。<li/><br/>    <li><code>${datetime.unix}</code>: Unix 时间戳。<li/><br/>    </ul><br/><li/><br/><li><code>${datetime_until.{format}}</code>: 聚合结束的日期和时间，使用相同的格式化选项。<li/><br/><li><code>${sequence}</code>: 同一时间间隔内聚合上传的序列号（必需）。<li/><br/></ul><br/>所有其他占位符均被视为无效。请注意，标记为必需的占位符如果在模板中缺失，将作为路径后缀添加到 S3 对象键中。"
          },
          "acl": {
            "type": "string",
            "enum": [
              "private",
              "public_read",
              "public_read_write",
              "authenticated_read",
              "bucket_owner_read",
              "bucket_owner_full_control"
            ],
            "description": "上传对象使用的 ACL。"
          },
          "headers": {
            "type": "object",
            "description": "包含在 S3 对象上传请求中的 HTTP 请求头，用于指定 S3 对象的内容类型、内容编码以及其他属性。",
            "example": {}
          },
          "min_part_size": {
            "default": "5mb",
            "type": "string",
            "description": "多部分上传的最小部分大小。<br/><br/>上传的数据将在内存中累积，直到达到此大小。",
            "example": "32MB"
          },
          "max_part_size": {
            "default": "5gb",
            "type": "string",
            "description": "多部分上传的最大部分大小。<br/><br/>S3 上传器不会尝试上传超过此大小的部分。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "action_azure_blob_storage.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_blob_storage"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "Set of parameters for the action.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/action_azure_blob_storage.direct_parameters"
              },
              {
                "$ref": "#/components/schemas/action_azure_blob_storage.aggreg_parameters"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/action_azure_blob_storage.action_resource_opts"
          }
        },
        "type": "object"
      },
      "action_azure_blob_storage.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "Set of parameters for the action.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/action_azure_blob_storage.direct_parameters"
              },
              {
                "$ref": "#/components/schemas/action_azure_blob_storage.aggreg_parameters"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/action_azure_blob_storage.action_resource_opts"
          }
        },
        "type": "object"
      },
      "redis.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "redis"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作对动作的用户可读描述"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "动作的参数。",
            "$ref": "#/components/schemas/bridge_redis.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/redis.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_elasticsearch.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "elasticsearch"
            ]
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "description": "ElasticSearch 动作参数",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_update"
              },
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_delete"
              },
              {
                "$ref": "#/components/schemas/bridge_elasticsearch.action_create"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_elasticsearch.action_resource_opts"
          }
        },
        "type": "object"
      },
      "confluent.post_connector": {
        "required": [
          "authentication",
          "bootstrap_hosts",
          "name",
          "ssl",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "confluent_producer"
            ],
            "description": "连接器的类型"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "逗号分隔的 Confluent Kafka 命名空间主机名 <code>host[:port]</code> ，用于引导客户端。  默认端口号为 9092。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "TCP 连接建立的最大等待时间（包括启用认证时的认证时间）。",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "客户端刷新 Confluent Kafka 代理和主题元数据的最短时间间隔。设置过小的值可能会给 Confluent 增加额外的负载。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "从 Confluent 获取元数据的最大等待时间。",
            "example": "32s"
          },
          "authentication": {
            "default": {},
            "description": "认证配置",
            "$ref": "#/components/schemas/confluent.auth_username_password"
          },
          "socket_opts": {
            "description": "额外的套接字选项。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "default": {
              "enable": true
            },
            "$ref": "#/components/schemas/confluent.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.builtin_action_console": {
        "properties": {
          "function": {
            "type": "string",
            "enum": [
              "console"
            ],
            "description": "将输出打印到控制台"
          }
        },
        "type": "object"
      },
      "bridge_mqtt.put": {
        "required": [
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mqtt.creation_opts"
          },
          "mode": {
            "default": "cluster_shareload",
            "type": "string",
            "enum": [
              "cluster_shareload"
            ],
            "deprecated": true,
            "description": "MQTT 动作的模式。<br/><br/>- cluster_shareload：在 emqx 集群中的每个节点上创建一个 MQTT 连接。<br/><br/>在'cluster_shareload'模式下，来自远程代理的传入负载通过<br/>使用共享订阅进行共享。<br/><br/>请注意，'clientid'将以节点名称作为后缀，以避免<br/>不同节点之间的 clientid 冲突。并且我们只能使用共享订阅<br/>作为入口连接的'remote.topic'的主题过滤器。"
          },
          "server": {
            "type": "string",
            "description": "远程 MQTT 代理的主机和端口"
          },
          "clientid_prefix": {
            "type": "string",
            "description": "附加到 egress 动作使用的 clientid 前缀（可选）。"
          },
          "reconnect_interval": {
            "type": "string",
            "deprecated": true
          },
          "proto_ver": {
            "default": "v4",
            "type": "string",
            "enum": [
              "v3",
              "v4",
              "v5"
            ],
            "description": "MQTT协议版本"
          },
          "bridge_mode": {
            "default": false,
            "type": "boolean",
            "description": "如果启用桥接模式。<br/>注意：此设置仅适用于 MQTT 协议版本早于5.0的情况，远程 MQTT<br/>代理必须支持此功能。<br/>如果将 bridge_mode 设置为true，则桥接将指示远程代理它是一个桥接而不是普通客户端。<br/>这意味着循环检测将更加有效，并且保留的消息将被正确传递。"
          },
          "username": {
            "type": "string",
            "description": "MQTT 协议的用户名"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "MQTT 协议的密码",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "在重新连接到入口动作时是否启动新会话"
          },
          "keepalive": {
            "default": "300s",
            "type": "string",
            "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "MQTT 协议的最大 inflight（已发送但未确认）消息数",
            "minimum": 0
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "ingress": {
            "description": "ingress 配置定义了此动作如何从远程 MQTT 代理接收消息，然后将它们发送到本地代理。<br/><br/>允许在'remote.qos'、'local.topic'、'local.qos'、'local.retain'、'local.payload'中使用带有变量的模板。<br/><br/>注意：如果将此动作用作规则的输入，并且还配置了'local.topic'，则从远程代理获取的消息将发送到'local.topic'和规则。",
            "$ref": "#/components/schemas/connector_mqtt.ingress"
          },
          "egress": {
            "description": "egress 配置定义了此动作如何将消息从本地代理转发到远程代理。<br/><br/>允许在'remote.topic'、'local.qos'、'local.retain'、'local.payload'中使用带有变量的模板。<br/><br/>注意：如果将此动作用作规则的动作，并且还配置了'local.topic'，则从规则获取的数据和与<br/>'local.topic'匹配的 MQTT 消息都将被转发。",
            "$ref": "#/components/schemas/connector_mqtt.egress"
          }
        },
        "type": "object"
      },
      "connector_azure_blob_storage.get_connector": {
        "required": [
          "account_name",
          "name",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "azure_blob_storage"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "account_name": {
            "type": "string",
            "description": "Account name for Azure Blob Storage service."
          },
          "account_key": {
            "type": "string",
            "format": "password",
            "description": "Account key for Azure Blob Storage service.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_azure_blob_storage.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "schema_validation.log_failure": {
        "properties": {
          "level": {
            "default": "info",
            "type": "string",
            "enum": [
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none"
            ],
            "description": "将以哪种日志级别记录验证失败。"
          }
        },
        "type": "object"
      },
      "rocketmq.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/rocketmq.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_tdengine.action_parameters": {
        "required": [
          "database"
        ],
        "properties": {
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.get": {
        "required": [
          "name",
          "stream",
          "type",
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "direction": {
            "default": "egress",
            "type": "string",
            "enum": [
              "egress"
            ],
            "description": "此桥接的方向，必须为'egress'"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 HStreamDB 的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果此动作用作规则的操作（EMQX 规则引擎），并且还配置了 local_topic，则将同时转发从规则获取的数据和与 local_topic 匹配的 MQTT 消息。"
          },
          "record_template": {
            "default": "${payload}",
            "type": "string",
            "description": "要转发到 HStreamDB 的 HStream 记录模板。支持占位符。<br><br/>注意：当您使用'原始记录'模板（这意味着数据不是有效的 JSON）时，您应该在 HStream 中使用 'read' 或 'subscription' 来获取数据。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "url": {
            "default": "http://127.0.0.1:6570",
            "type": "string",
            "description": "HStreamDB 服务器 URL。使用 gRPC http 服务器地址。"
          },
          "stream": {
            "type": "string",
            "description": "HStreamDB 流名称"
          },
          "partition_key": {
            "type": "string",
            "description": "HStreamDB 分区键。支持占位符。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "grpc_timeout": {
            "default": "30s",
            "type": "string",
            "description": "HStreamDB gRPC 连接超时时间。",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "hstreamdb"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作对动作的用户可读描述。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          }
        },
        "type": "object"
      },
      "connector_couchbase.post_connector": {
        "required": [
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "couchbase"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>  A host entry has the following form: `Host[:Port]`.<br/><br/>  The Couchbase default query service port 8093 is used if `[:Port]` is not specified."
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "The timeout when connecting to the HTTP server.",
            "example": "32s"
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
            "minimum": 1
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "The pool size.",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "Username for Couchbase service."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Password for Couchbase service.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector.resource_opts"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_matrix.get_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "matrix"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "type": "string",
            "description": "用于连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目具有以下格式：Host[:Port]。<br/><br/>如果未指定 [:Port]，将使用 PostgreSQL 默认端口5432。"
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "在连接中禁用预处理语句的使用。<br/>某些端点，如 PGBouncer 或 Transaction 模式下的 Supabase，<br/>不支持像处理语句这样的会话功能。 <br/> 对于此类连接，应启用此选项。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "pulsar.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/pulsar.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/pulsar.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_redis.creation_opts_redis_sentinel": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "syskeeper.parameters": {
        "properties": {
          "target_topic": {
            "default": "${topic}",
            "type": "string",
            "description": "被转发消息的主题"
          },
          "target_qos": {
            "maximum": 2,
            "type": "integer",
            "description": "被转发消息的服务质量 (QoS)，-1 表示与原始主题相同",
            "minimum": 0
          },
          "template": {
            "default": "${payload}",
            "type": "string",
            "description": "模版"
          }
        },
        "type": "object"
      },
      "file_transfer.s3_exporter": {
        "required": [
          "bucket",
          "host",
          "port"
        ],
        "properties": {
          "access_key_id": {
            "type": "string",
            "description": "S3 桶的访问密钥 ID。"
          },
          "secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "S3 桶的密钥访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "host": {
            "type": "string",
            "description": "S3 端点的主机。"
          },
          "port": {
            "type": "integer",
            "description": "S3 端点的端口。",
            "minimum": 1
          },
          "transport_options": {
            "description": "S3 客户端使用的 HTTP 传输层选项。",
            "$ref": "#/components/schemas/s3.transport_options"
          },
          "min_part_size": {
            "default": "5mb",
            "type": "string",
            "description": "多部分上传的最小部分大小。<br/><br/>上传的数据将在内存中累积，直到达到此大小。",
            "example": "32MB"
          },
          "max_part_size": {
            "default": "5gb",
            "type": "string",
            "description": "多部分上传的最大部分大小。<br/><br/>S3 上传器不会尝试上传超过此大小的部分。",
            "example": "32MB"
          },
          "url_expire_time": {
            "default": "1h",
            "type": "string",
            "description": "S3 对象的签名 URL 有效时间（秒）。",
            "example": "1h"
          },
          "bucket": {
            "type": "string",
            "description": "S3 桶的名称。"
          },
          "acl": {
            "type": "string",
            "enum": [
              "private",
              "public_read",
              "public_read_write",
              "authenticated_read",
              "bucket_owner_read",
              "bucket_owner_full_control"
            ],
            "description": "上传对象使用的 ACL。"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "是否启用该后端"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.post": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sqlserver"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 Microsoft SQL Server。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_sqlserver.creation_opts"
          },
          "driver": {
            "default": "ms-sql",
            "type": "string",
            "description": "SQL Server Driver 名称"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 SQL Server 默认端口 1433。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "default": "sa",
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_elasticsearch.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_timescale.get_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "timescale"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "type": "string",
            "description": "用于连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目具有以下格式：Host[:Port]。<br/><br/>如果未指定 [:Port]，将使用 PostgreSQL 默认端口5432。"
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "在连接中禁用预处理语句的使用。<br/>某些端点，如 PGBouncer 或 Transaction 模式下的 Supabase，<br/>不支持像处理语句这样的会话功能。 <br/> 对于此类连接，应启用此选项。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pgsql.get": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "pgsql"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 PostgreSQL。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目的格式为：Host[:Port]。<br/><br/>如果没有指定 [:Port]，将使用 PostgreSQL 默认端口 5432。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.get_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "rabbitmq"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "parameters": {
            "description": "Source 配置定义了此数据输入如何从远程 RabbitMQ 代理接收消息。",
            "$ref": "#/components/schemas/bridge_rabbitmq.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.source_resource_opts"
          }
        },
        "type": "object"
      },
      "redis.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "这个参数定义了批处理计数的上限。<br/>将这个值设置为1将有效地禁用批处理，因为它表示每个批处理将只处理一个项目。<br/>关于 Redis 集群模式的注意事项：<br/>在 Redis 集群模式的情况下不支持批处理。<br/>因此，batch_size 总是设置为1，<br/>反映了该模式对于批处理操作固有的限制。",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "在低消息速率下积累批处理时的最大等待间隔，以实现更高效的资源使用。",
            "example": "32s"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_redis.action_parameters": {
        "required": [
          "command_template"
        ],
        "properties": {
          "command_template": {
            "type": "array",
            "description": "用于导出消息的 Redis 命令模板。每个列表元素代表一个命令名称或其参数。<br/>例如，要将有效负载推送到 Redis 列表中的键 msgs，元素应该如下所示：<br/>rpush，msgs，${payload}。",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "bridge_iotdb.action_parameters": {
        "properties": {
          "is_aligned": {
            "default": false,
            "type": "boolean",
            "description": "是否对齐时间序列。"
          },
          "device_id": {
            "type": "string",
            "description": "IoTDB 的设备 ID（DeviceID）。可以使用一个占位符。如果留空则 MQTT 消息体中必须有一个 `device_id` 字段，<br/>或者 EMQX 规则引擎的 SQL 必须输出一个 `device_id` 字段。"
          },
          "data": {
            "default": [],
            "type": "array",
            "description": "IoTDB 动作参数数据",
            "items": {
              "$ref": "#/components/schemas/bridge_iotdb.action_parameters_data"
            }
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "如果发送请求时出错，最大的重试次数。",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "cluster.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "dynamo"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_dynamo.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kinesis"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_kinesis.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kinesis.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_matrix.get": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "pgsql"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 PostgreSQL。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目的格式为：Host[:Port]。<br/><br/>如果没有指定 [:Port]，将使用 PostgreSQL 默认端口 5432。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.republish_mqtt_properties": {
        "properties": {
          "Payload-Format-Indicator": {
            "type": "string"
          },
          "Message-Expiry-Interval": {
            "type": "string"
          },
          "Content-Type": {
            "type": "string"
          },
          "Response-Topic": {
            "type": "string"
          },
          "Correlation-Data": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_oracle.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "oracle"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_oracle.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.get": {
        "required": [
          "base_url",
          "name",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "iotdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或禁用该桥接"
          },
          "authentication": {
            "default": "auth_basic",
            "description": "认证信息",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_iotdb.auth_basic"
              }
            ]
          },
          "is_aligned": {
            "default": false,
            "type": "boolean",
            "description": "是否对齐时间序列。"
          },
          "device_id": {
            "type": "string",
            "description": "IoTDB 的设备 ID（DeviceID）。可以使用一个占位符。如果留空则 MQTT 消息体中必须有一个 `device_id` 字段，<br/>或者 EMQX 规则引擎的 SQL 必须输出一个 `device_id` 字段。"
          },
          "iotdb_version": {
            "default": "v1.3.x",
            "type": "string",
            "enum": [
              "v1.3.x",
              "v1.1.x",
              "v1.0.x",
              "v0.13.x"
            ],
            "description": "IoTDB 版本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_iotdb.creation_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接到 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "连接池类型。可以是random、hash之一。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "base_url": {
            "type": "string",
            "description": "IoTDB REST 服务的 URL。",
            "example": "http://127.0.0.1"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "HTTP 请求的最大重试次数。",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_disconnected": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "client_disconnected"
            ],
            "description": "事件类型"
          },
          "clientid": {
            "type": "string",
            "description": "客户端 ID"
          },
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "reason": {
            "type": "string",
            "description": "断开连接的原因"
          },
          "peername": {
            "type": "string",
            "description": "对等客户端的 IP 地址和端口"
          },
          "sockname": {
            "type": "string",
            "description": "本地监听的 IP 地址和端口"
          },
          "disconnected_at": {
            "type": "integer",
            "description": "客户端断开连接的时刻"
          }
        },
        "type": "object"
      },
      "connector_mqtt.get_connector": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mqtt"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "将发布消息到远程代理的 MQTT 客户端池的大小。<br/><br/>每个 MQTT 客户端都将分配'clientid'，格式为'${clientid_prefix}:${bridge_name}:egress:${node}:${n}'<br/>其中'n'是池中客户端的编号。",
            "minimum": 1
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_mqtt.resource_opts"
          },
          "mode": {
            "default": "cluster_shareload",
            "type": "string",
            "enum": [
              "cluster_shareload"
            ],
            "deprecated": true,
            "description": "MQTT 动作的模式。<br/><br/>- cluster_shareload：在 emqx 集群中的每个节点上创建一个 MQTT 连接。<br/><br/>在'cluster_shareload'模式下，来自远程代理的传入负载通过<br/>使用共享订阅进行共享。<br/><br/>请注意，'clientid'将以节点名称作为后缀，以避免<br/>不同节点之间的 clientid 冲突。并且我们只能使用共享订阅<br/>作为入口连接的'remote.topic'的主题过滤器。"
          },
          "server": {
            "type": "string",
            "description": "远程 MQTT 代理的主机和端口"
          },
          "clientid_prefix": {
            "type": "string",
            "description": "附加到 egress 动作使用的 clientid 前缀（可选）。"
          },
          "reconnect_interval": {
            "type": "string",
            "deprecated": true
          },
          "proto_ver": {
            "default": "v4",
            "type": "string",
            "enum": [
              "v3",
              "v4",
              "v5"
            ],
            "description": "MQTT协议版本"
          },
          "bridge_mode": {
            "default": false,
            "type": "boolean",
            "description": "如果启用桥接模式。<br/>注意：此设置仅适用于 MQTT 协议版本早于5.0的情况，远程 MQTT<br/>代理必须支持此功能。<br/>如果将 bridge_mode 设置为true，则桥接将指示远程代理它是一个桥接而不是普通客户端。<br/>这意味着循环检测将更加有效，并且保留的消息将被正确传递。"
          },
          "username": {
            "type": "string",
            "description": "MQTT 协议的用户名"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "MQTT 协议的密码",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "在重新连接到入口动作时是否启动新会话"
          },
          "keepalive": {
            "default": "300s",
            "type": "string",
            "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "MQTT 协议的最大 inflight（已发送但未确认）消息数",
            "minimum": 0
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_opents.get": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "opents"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "服务器的地址。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "summary": {
            "default": true,
            "type": "boolean",
            "description": "是否返回摘要信息。"
          },
          "details": {
            "default": false,
            "type": "boolean",
            "description": "是否返回详细信息。"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_producer.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_producer"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "动作的配置",
            "$ref": "#/components/schemas/gcp_pubsub_producer.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "rule_engine.rule_creation": {
        "required": [
          "sql"
        ],
        "properties": {
          "name": {
            "default": "",
            "type": "string",
            "description": "规则名字",
            "example": "foo"
          },
          "sql": {
            "type": "string",
            "description": "用于处理消息的 SQL 。<br/>示例：<code>SELECT * FROM \"test/topic\" WHERE payload.x = 1</code>",
            "example": "SELECT * FROM \"test/topic\" WHERE payload.x = 1"
          },
          "actions": {
            "default": [],
            "type": "array",
            "description": "规则的动作列表。<br/>动作可以是指向 EMQX 数据桥接的引用，也可以是一个指向函数的对象。<br/>我们支持一些内置函数，如“republish”和“console”，我们还支持用户提供的函数，它的格式为：“{module}:{function}”。<br/>列表中的动作按顺序执行。这意味着如果其中一个动作执行缓慢，则以下所有动作都不会被执行直到它返回。<br/>如果其中一个动作崩溃，在它之后的所有动作仍然会被按照原始顺序执行。<br/>如果运行动作时出现任何错误，则会出现错误消息，并且相应的计数器会增加。",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/rule_engine.user_provided_function"
                },
                {
                  "$ref": "#/components/schemas/rule_engine.builtin_action_console"
                },
                {
                  "$ref": "#/components/schemas/rule_engine.builtin_action_republish"
                },
                {
                  "type": "string"
                }
              ]
            },
            "example": [
              "webhook:my_webhook",
              {
                "args": {
                  "payload": "${payload}",
                  "topic": "t/1"
                },
                "function": "republish"
              },
              {
                "function": "console"
              }
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或禁用规则引擎"
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "规则的描述",
            "example": "Some description"
          },
          "metadata": {
            "type": "object",
            "description": "规则的元数据，不要手动修改",
            "example": {}
          }
        },
        "type": "object"
      },
      "schema_validation_http_api.node_metrics": {
        "properties": {
          "node": {
            "type": "string"
          },
          "matched": {
            "type": "integer",
            "minimum": 0
          },
          "succeeded": {
            "type": "integer",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "s3.transport_options": {
        "properties": {
          "ipv6_probe": {
            "default": false,
            "type": "boolean",
            "description": "是否探测 IPv6 支持。"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接到 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "连接池类型。可以是random、hash之一。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "headers": {
            "type": "object",
            "description": "HTTP 请求头列表。",
            "example": {},
            "is_template": true
          },
          "max_retries": {
            "type": "integer",
            "description": "如果发送请求时出错，最大重试次数。",
            "minimum": 0
          },
          "request_timeout": {
            "type": "string",
            "description": "HTTP 请求超时时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "connector_azure_blob_storage.resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "clickhouse"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_clickhouse.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_mqtt.get": {
        "required": [
          "server"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mqtt.creation_opts"
          },
          "mode": {
            "default": "cluster_shareload",
            "type": "string",
            "enum": [
              "cluster_shareload"
            ],
            "deprecated": true,
            "description": "MQTT 动作的模式。<br/><br/>- cluster_shareload：在 emqx 集群中的每个节点上创建一个 MQTT 连接。<br/><br/>在'cluster_shareload'模式下，来自远程代理的传入负载通过<br/>使用共享订阅进行共享。<br/><br/>请注意，'clientid'将以节点名称作为后缀，以避免<br/>不同节点之间的 clientid 冲突。并且我们只能使用共享订阅<br/>作为入口连接的'remote.topic'的主题过滤器。"
          },
          "server": {
            "type": "string",
            "description": "远程 MQTT 代理的主机和端口"
          },
          "clientid_prefix": {
            "type": "string",
            "description": "附加到 egress 动作使用的 clientid 前缀（可选）。"
          },
          "reconnect_interval": {
            "type": "string",
            "deprecated": true
          },
          "proto_ver": {
            "default": "v4",
            "type": "string",
            "enum": [
              "v3",
              "v4",
              "v5"
            ],
            "description": "MQTT协议版本"
          },
          "bridge_mode": {
            "default": false,
            "type": "boolean",
            "description": "如果启用桥接模式。<br/>注意：此设置仅适用于 MQTT 协议版本早于5.0的情况，远程 MQTT<br/>代理必须支持此功能。<br/>如果将 bridge_mode 设置为true，则桥接将指示远程代理它是一个桥接而不是普通客户端。<br/>这意味着循环检测将更加有效，并且保留的消息将被正确传递。"
          },
          "username": {
            "type": "string",
            "description": "MQTT 协议的用户名"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "MQTT 协议的密码",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "在重新连接到入口动作时是否启动新会话"
          },
          "keepalive": {
            "default": "300s",
            "type": "string",
            "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "MQTT 协议的最大 inflight（已发送但未确认）消息数",
            "minimum": 0
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "ingress": {
            "description": "ingress 配置定义了此动作如何从远程 MQTT 代理接收消息，然后将它们发送到本地代理。<br/><br/>允许在'remote.qos'、'local.topic'、'local.qos'、'local.retain'、'local.payload'中使用带有变量的模板。<br/><br/>注意：如果将此动作用作规则的输入，并且还配置了'local.topic'，则从远程代理获取的消息将发送到'local.topic'和规则。",
            "$ref": "#/components/schemas/connector_mqtt.ingress"
          },
          "egress": {
            "description": "egress 配置定义了此动作如何将消息从本地代理转发到远程代理。<br/><br/>允许在'remote.topic'、'local.qos'、'local.retain'、'local.payload'中使用带有变量的模板。<br/><br/>注意：如果将此动作用作规则的动作，并且还配置了'local.topic'，则从规则获取的数据和与<br/>'local.topic'匹配的 MQTT 消息都将被转发。",
            "$ref": "#/components/schemas/connector_mqtt.egress"
          }
        },
        "type": "object"
      },
      "bridge_oracle.get_connector": {
        "required": [
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "oracle"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>主机名具有以下形式：`Host[:Port]`。<br/>如果未指定 `[:Port]`，则使用 Oracle Database 默认端口 1521。"
          },
          "sid": {
            "type": "string",
            "description": "Oracle Database Sid 名称"
          },
          "service_name": {
            "type": "string",
            "description": "Oracle Database 服务名称。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_oracle.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "file_transfer.local_storage_exporter": {
        "properties": {
          "root": {
            "type": "string",
            "description": "导出到本地文件时使用的根目录。"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "是否启用该后端"
          }
        },
        "type": "object"
      },
      "bridge_dynamo.put": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "hash_key",
          "region",
          "table",
          "url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "template": {
            "default": "",
            "type": "string",
            "description": "模板, 默认为空，为空时将会将整个消息存入数据库"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 DynamoDB。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "hash_key": {
            "type": "string",
            "description": "DynamoDB 哈希键"
          },
          "range_key": {
            "type": "string",
            "description": "DynamoDB 范围健"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_dynamo.creation_opts"
          },
          "url": {
            "type": "string",
            "description": "DynamoDB 的地址。"
          },
          "region": {
            "type": "string",
            "description": "AWS Dynamo 的区域"
          },
          "table": {
            "type": "string",
            "description": "DynamoDB 的表。"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "DynamoDB 的访问 ID。"
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "DynamoDB 的访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "greptimedb"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对这个动作类型的更多参数。",
            "$ref": "#/components/schemas/bridge_greptimedb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_postgres.get_connector": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pgsql"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "server": {
            "type": "string",
            "description": "用于连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目具有以下格式：Host[:Port]。<br/><br/>如果未指定 [:Port]，将使用 PostgreSQL 默认端口5432。"
          },
          "disable_prepared_statements": {
            "default": false,
            "type": "boolean",
            "description": "在连接中禁用预处理语句的使用。<br/>某些端点，如 PGBouncer 或 Transaction 模式下的 Supabase，<br/>不支持像处理语句这样的会话功能。 <br/> 对于此类连接，应启用此选项。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/connector_postgres.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对这个动作类型的更多参数。",
            "$ref": "#/components/schemas/bridge_greptimedb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sqlserver"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "针对动作的详细配置。",
            "$ref": "#/components/schemas/bridge_sqlserver.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_redis.put_sentinel": {
        "required": [
          "command_template",
          "sentinel",
          "servers"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 Redis 的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果此动作用作规则的动作（EMQX 规则引擎），并且还配置了 local_topic，则规则中获取的数据和与 local_topic 匹配的 MQTT 消息都将被转发。"
          },
          "command_template": {
            "type": "array",
            "description": "用于导出消息的 Redis 命令模板。每个列表元素代表一个命令名称或其参数。<br/>例如，要将有效负载推送到 Redis 列表中的键 msgs，元素应该如下所示：<br/>rpush，msgs，${payload}。",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_sentinel"
          },
          "servers": {
            "type": "string",
            "description": "集群将要连接的节点列表。 节点之间用逗号分隔，如：Node[,Node]。每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。"
          },
          "redis_type": {
            "default": "sentinel",
            "type": "string",
            "enum": [
              "sentinel"
            ],
            "description": "Sentinel 模式。 当 Redis 服务器在 Senitel 模式下运行时必须设置为 'sentinel' 。"
          },
          "sentinel": {
            "type": "string",
            "description": "Redis sentinel 模式下的集群名称。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis 数据库 ID。",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_datalayers.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "durable_queues.durable_queue_get": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_kinesis.put_connector": {
        "required": [
          "aws_access_key_id",
          "aws_secret_access_key",
          "endpoint"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "aws_access_key_id": {
            "type": "string",
            "description": "连接到 Amazon Kinesis 的访问密钥 ID。"
          },
          "aws_secret_access_key": {
            "type": "string",
            "format": "password",
            "description": "连接到 Amazon Kinesis 的 AWS 秘密访问密钥。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "endpoint": {
            "type": "string",
            "description": "Amazon Kinesis 终端节点的 URL。",
            "example": "https://kinesis.us-east-1.amazonaws.com"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "发送请求时发生错误的最大重试次数。",
            "minimum": 0
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小",
            "minimum": 1
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kinesis.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_timescale.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "特定于 PostgreSQL 动作的参数配置",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_influxdb.connector_influxdb_api_v2": {
        "required": [
          "bucket",
          "influxdb_type",
          "org",
          "token"
        ],
        "properties": {
          "influxdb_type": {
            "default": "influxdb_api_v2",
            "type": "string",
            "enum": [
              "influxdb_api_v2"
            ],
            "description": "InfluxDB HTTP API V2 协议。支持 Influxdb v2.0 以及之后的版本。"
          },
          "bucket": {
            "type": "string",
            "description": "InfluxDB bucket 名称。"
          },
          "org": {
            "type": "string",
            "description": "InfluxDB 组织名称。"
          },
          "token": {
            "type": "string",
            "format": "password",
            "description": "InfluxDB 令牌。",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "bridge_kafka.producer_kafka_opts": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "Kafka 主题名称"
          },
          "message": {
            "description": "用于生成 Kafka 消息的模版。",
            "$ref": "#/components/schemas/bridge_kafka.kafka_message"
          },
          "max_batch_bytes": {
            "default": "896KB",
            "type": "string",
            "description": "最大消息批量字节数。大多数 Kafka 环境的默认最低值是 1 MB，EMQX 的默认值比 1 MB 更小是因为需要补偿 Kafka 消息编码所需要的额外字节（尤其是当每条消息都很小的情况下）。当单个消息的大小超过该限制时，它仍然会被发送，（相当于该批量中只有单个消息）。",
            "example": "32MB"
          },
          "compression": {
            "default": "no_compression",
            "type": "string",
            "enum": [
              "no_compression",
              "snappy",
              "gzip"
            ],
            "description": "压缩方法。"
          },
          "partition_strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "key_dispatch"
            ],
            "description": "设置消息发布时应该如何选择 Kafka 分区。<br/><br/><code>random</code>: 为每个消息随机选择一个分区。<br/><code>key_dispatch</code>: Hash Kafka message key to a partition number"
          },
          "required_acks": {
            "default": "all_isr",
            "type": "string",
            "enum": [
              "all_isr",
              "leader_only",
              "none"
            ],
            "description": "设置 Kafka leader 在返回给 EMQX 确认之前需要等待多少个 follower 的确认。<br/><br/><code>all_isr</code>: 需要所有的在线复制者都确认。<br/><code>leader_only</code>: 仅需要分区 leader 确认。<br/><code>none</code>: 无需 Kafka 回复任何确认。"
          },
          "kafka_headers": {
            "type": "string",
            "description": "请提供要用作 Kafka 头部的占位符<br/><br/>例如：<code>${pub_props}</code><br/><br/>请注意，占位符的值必须是对象形式的：<code>{\"foo\": \"bar\"}</code><br/>或者是键值对的数组形式：<code>[{\"key\": \"foo\", \"value\": \"bar\"}]</code>。"
          },
          "kafka_ext_headers": {
            "type": "array",
            "description": "请提供更多的 Kafka 头部键值对<br/><br/>这里的键值对将与 <code>kafka_headers</code> 字段的值合并，然后发送到 Kafka。",
            "items": {
              "$ref": "#/components/schemas/bridge_kafka.producer_kafka_ext_headers"
            }
          },
          "kafka_header_value_encode_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "json"
            ],
            "description": "Kafka 头部值编码模式<br/><br/> - None: 仅将二进制值添加到 Kafka 头部；<br/><br/> - JSON: 仅将 JSON 值添加到 Kafka 头部，并在发送前对其进行 JSON 字符串编码。"
          },
          "partition_count_refresh_interval": {
            "default": "60s",
            "type": "string",
            "description": "配置 Kafka 刷新分区数量的时间间隔。<br/>EMQX 发现 Kafka 分区数量增加后，会开始按 <code>partition_strategy<code> 配置，把消息发送到新的分区中。",
            "example": "1h"
          },
          "partitions_limit": {
            "default": "all_partitions",
            "description": "限制为给定主题生产数据的分区数量。<br/>特殊值 all_partitions 用于利用该主题的所有分区。<br/>将此设置为大于分区总数的值将不会产生任何效果。",
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "all_partitions"
                ]
              }
            ]
          },
          "max_inflight": {
            "default": 10,
            "type": "integer",
            "description": "设置 Kafka 生产者（每个分区一个）在收到 Kafka 的确认前最多发送多少个请求（批量）。调大这个值通常可以增加吞吐量，但是，当该值设置大于 1 时存在消息乱序的风险。",
            "minimum": 1
          },
          "buffer": {
            "description": "配置消息缓存的相关参数。<br/><br/>当 EMQX 需要发送的消息超过 Kafka 处理能力，或者当 Kafka 临时下线时，EMQX 内部会将消息缓存起来。",
            "$ref": "#/components/schemas/bridge_kafka.producer_buffer"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "async",
              "sync"
            ],
            "description": "查询模式。可选 'sync/async'，默认 'async'。"
          },
          "sync_query_timeout": {
            "default": "5s",
            "type": "string",
            "description": "该参数定义同步查询的超时限制。仅当桥接查询模式配置为'sync'时才适用。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_tdengine.put": {
        "required": [
          "database",
          "password",
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 TDengine。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 TDengine 默认端口 6041。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "bridge_mqtt.post": {
        "required": [
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mqtt"
            ],
            "description": "数据桥接的类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字，桥接的可读描述"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mqtt.creation_opts"
          },
          "mode": {
            "default": "cluster_shareload",
            "type": "string",
            "enum": [
              "cluster_shareload"
            ],
            "deprecated": true,
            "description": "MQTT 动作的模式。<br/><br/>- cluster_shareload：在 emqx 集群中的每个节点上创建一个 MQTT 连接。<br/><br/>在'cluster_shareload'模式下，来自远程代理的传入负载通过<br/>使用共享订阅进行共享。<br/><br/>请注意，'clientid'将以节点名称作为后缀，以避免<br/>不同节点之间的 clientid 冲突。并且我们只能使用共享订阅<br/>作为入口连接的'remote.topic'的主题过滤器。"
          },
          "server": {
            "type": "string",
            "description": "远程 MQTT 代理的主机和端口"
          },
          "clientid_prefix": {
            "type": "string",
            "description": "附加到 egress 动作使用的 clientid 前缀（可选）。"
          },
          "reconnect_interval": {
            "type": "string",
            "deprecated": true
          },
          "proto_ver": {
            "default": "v4",
            "type": "string",
            "enum": [
              "v3",
              "v4",
              "v5"
            ],
            "description": "MQTT协议版本"
          },
          "bridge_mode": {
            "default": false,
            "type": "boolean",
            "description": "如果启用桥接模式。<br/>注意：此设置仅适用于 MQTT 协议版本早于5.0的情况，远程 MQTT<br/>代理必须支持此功能。<br/>如果将 bridge_mode 设置为true，则桥接将指示远程代理它是一个桥接而不是普通客户端。<br/>这意味着循环检测将更加有效，并且保留的消息将被正确传递。"
          },
          "username": {
            "type": "string",
            "description": "MQTT 协议的用户名"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "MQTT 协议的密码",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "clean_start": {
            "default": true,
            "type": "boolean",
            "description": "在重新连接到入口动作时是否启动新会话"
          },
          "keepalive": {
            "default": "300s",
            "type": "string",
            "description": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "MQTT 协议的最大 inflight（已发送但未确认）消息数",
            "minimum": 0
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "ingress": {
            "description": "ingress 配置定义了此动作如何从远程 MQTT 代理接收消息，然后将它们发送到本地代理。<br/><br/>允许在'remote.qos'、'local.topic'、'local.qos'、'local.retain'、'local.payload'中使用带有变量的模板。<br/><br/>注意：如果将此动作用作规则的输入，并且还配置了'local.topic'，则从远程代理获取的消息将发送到'local.topic'和规则。",
            "$ref": "#/components/schemas/connector_mqtt.ingress"
          },
          "egress": {
            "description": "egress 配置定义了此动作如何将消息从本地代理转发到远程代理。<br/><br/>允许在'remote.topic'、'local.qos'、'local.retain'、'local.payload'中使用带有变量的模板。<br/><br/>注意：如果将此动作用作规则的动作，并且还配置了'local.topic'，则从规则获取的数据和与<br/>'local.topic'匹配的 MQTT 消息都将被转发。",
            "$ref": "#/components/schemas/connector_mqtt.egress"
          }
        },
        "type": "object"
      },
      "bridge_cassa.post_connector": {
        "required": [
          "keyspace",
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cassandra"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "servers": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port][,Host2:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 Cassandra 默认端口 9042。"
          },
          "keyspace": {
            "type": "string",
            "description": "要连接到的 Keyspace 名称。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_cassa.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.kafka_message": {
        "properties": {
          "key": {
            "default": "${.clientid}",
            "type": "string",
            "description": "生成 Kafka 消息 Key 的模版。如果模版生成后为空值，则会使用 Kafka 的 <code>NULL</code> ，而非空字符串。"
          },
          "value": {
            "default": "${.}",
            "type": "string",
            "description": "生成 Kafka 消息 Value 的模版。如果模版生成后为空值，则会使用 Kafka 的 <code>NULL</code>，而非空字符串。"
          },
          "timestamp": {
            "default": "${.timestamp}",
            "type": "string",
            "description": "生成 Kafka 消息时间戳的模版。该时间必需是一个整型数值（可以是字符串格式）例如 <code>1661326462115</code> 或 <code>'1661326462115'</code>。当所需的输入字段不存在，或不是一个整型时，则会使用当前系统时间。"
          }
        },
        "type": "object"
      },
      "actions_and_sources.source_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_oracle.put": {
        "required": [
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板。模板字符串可以包含消息元数据和有效载荷字段的占位符。占位符的插入不需要任何检查和特殊格式化，因此必须确保插入的数值格式化和转义正确。模板字符串可以包含占位符模板字符串可以包含消息元数据和有效载荷字段的占位符。这些占位符被插入所以必须确保插入的值的格式正确。因此，确保插入的值格式化和转义正确是非常重要的。模板字符串可以包含占位符模板字符串可以包含消息元数据和有效载荷字段的占位符。这些占位符被插入所以必须确保插入的值的格式正确。确保插入的值被正确地格式化和转义。"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 Oracle Database。 <br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>主机名具有以下形式：`Host[:Port]`。<br/>如果未指定 `[:Port]`，则使用 Oracle Database 默认端口 1521。"
          },
          "sid": {
            "type": "string",
            "description": "Oracle Database Sid 名称"
          },
          "service_name": {
            "type": "string",
            "description": "Oracle Database 服务名称。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "rule_engine.metrics": {
        "properties": {
          "matched": {
            "type": "integer",
            "description": "SQL 的 FROM 子句匹配的次数。",
            "minimum": 0
          },
          "matched.rate": {
            "type": "number",
            "description": "命中速率，次/秒"
          },
          "matched.rate.max": {
            "type": "number",
            "description": "最大命中速率，次/秒"
          },
          "matched.rate.last5m": {
            "type": "number",
            "description": "5 分钟平均命中速率，次/秒"
          },
          "passed": {
            "type": "integer",
            "description": "SQL 通过的次数",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "description": "SQL 失败的次数",
            "minimum": 0
          },
          "failed.exception": {
            "type": "integer",
            "description": "SQL 由于执行异常而失败的次数。 这可能是因为调用 SQL 函数时崩溃，或者试图对未定义的变量进行算术运算。",
            "minimum": 0
          },
          "failed.unknown": {
            "type": "integer",
            "description": "由于未知错误导致 SQL 失败的次数。",
            "minimum": 0
          },
          "actions.total": {
            "type": "integer",
            "description": "规则调用输出的次数。 该值可能是“sql.matched”的几倍，具体取决于规则输出的数量。",
            "minimum": 0
          },
          "actions.success": {
            "type": "integer",
            "description": "规则成功调用输出的次数。",
            "minimum": 0
          },
          "actions.failed": {
            "type": "integer",
            "description": "规则调用输出失败的次数。",
            "minimum": 0
          },
          "actions.failed.out_of_service": {
            "type": "integer",
            "description": "由于输出停止服务而导致规则调用输出失败的次数。 例如，桥接被禁用或停止。",
            "minimum": 0
          },
          "actions.failed.unknown": {
            "type": "integer",
            "description": "由于未知错误，规则调用输出失败的次数。",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "bridge_kinesis.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_timescale.put": {
        "required": [
          "database",
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 PostgreSQL。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目的格式为：Host[:Port]。<br/><br/>如果没有指定 [:Port]，将使用 PostgreSQL 默认端口 5432。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.get_single": {
        "required": [
          "database",
          "mongo_type",
          "name",
          "resource_opts",
          "server",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "mongo_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "独立实例。当MongoDB服务器以独立模式运行时，必须设置为`single`。"
          },
          "server": {
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机条目具有以下形式：主机[:端口]。<br/>如果未指定[:端口]，则使用MongoDB的默认端口27017。"
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "写入模式"
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "使用 DNS SRV 记录。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。"
          },
          "auth_source": {
            "type": "string",
            "description": "与用户认证信息关联的数据库名称。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或停用该 MongoDB 动作"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "数据将存储在其中的集合"
          },
          "payload_template": {
            "type": "string",
            "description": "用于格式化发送消息的模板。如果未定义，规则引擎将使用 JSON 格式序列化所有可见输入，例如 clientid、主题、有效载荷等。"
          },
          "resource_opts": {
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "mongodb_single"
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.post_connector": {
        "required": [
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "influxdb"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 InfluxDB 默认端口 8086。"
          },
          "parameters": {
            "description": "给定版本的 InfluxDB 连接器的参数集，`influxdb_type` 可以是 `influxdb_api_v1` 或 `influxdb_api_v2`。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/connector_influxdb.connector_influxdb_api_v2"
              },
              {
                "$ref": "#/components/schemas/connector_influxdb.connector_influxdb_api_v1"
              }
            ]
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_influxdb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_opents.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "opents"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "OpenTSDB 动作参数。",
            "$ref": "#/components/schemas/bridge_opents.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_greptimedb.post_grpc_v1": {
        "required": [
          "dbname",
          "name",
          "type",
          "write_syntax"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 GreptimeDB 的 MQTT 主题过滤器。所有 MQTT 'PUBLISH' 消息中与 local_topic 匹配的主题都将被转发。<br/><br/>注意：如果此动作用作规则引擎 (EMQX 规则引擎) 的动作，并且配置了 local_topic，那么将会转发规则获取的数据以及与 local_topic 匹配的 MQTT 消息。"
          },
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "GreptimeDB gRPC 协议写入数据点的配置。写入语法是一种文本格式，提供了数据点的测量、标签集、字段集和时间戳，并支持占位符，与 InfluxDB 行协议相同。<br/>参见 [InfluxDB 2.3 行协议](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/line-protocol/) 和<br/>[GreptimeDB 1.8 行协议](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>简而言之:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>请注意，整数值的占位符必须用后缀 `i` 注释。例如 `${payload.int_value}i`。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "default": "127.0.0.1:4001",
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>主机条目的格式如下：主机名[:端口]。<br/><br/>如果未指定 [:端口]，则使用 GreptimeDB 的默认端口 8086。"
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "GreptimeDB 的时间精度。"
          },
          "dbname": {
            "type": "string",
            "description": "GreptimeDB 数据库"
          },
          "username": {
            "type": "string",
            "description": "GreptimeDB 用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "GreptimeDB 密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "greptimedb"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作的名称"
          }
        },
        "type": "object"
      },
      "bridge_kafka.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "kafka_producer"
            ],
            "description": "桥接类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字，可读描述"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题数据源由桥接指定，或留空由规则动作指定。"
          },
          "parameters": {
            "description": "Kafka 生产者参数。",
            "$ref": "#/components/schemas/bridge_kafka.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.put_connector": {
        "required": [
          "parameters"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "default": "127.0.0.1:8086",
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 InfluxDB 默认端口 8086。"
          },
          "parameters": {
            "description": "给定版本的 InfluxDB 连接器的参数集，`influxdb_type` 可以是 `influxdb_api_v1` 或 `influxdb_api_v2`。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/connector_influxdb.connector_influxdb_api_v2"
              },
              {
                "$ref": "#/components/schemas/connector_influxdb.connector_influxdb_api_v1"
              }
            ]
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_influxdb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "connector_mqtt.ingress_remote": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "从远程代理接收消息的主题"
          },
          "qos": {
            "default": 1,
            "maximum": 2,
            "type": "integer",
            "description": "订阅远程代理时要使用的 QoS 级别.",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "bridge_rabbitmq.source_parameters": {
        "required": [
          "queue"
        ],
        "properties": {
          "queue": {
            "type": "string",
            "description": "RabbitMQ 代理的队列名称。"
          },
          "wait_for_publish_confirmations": {
            "default": true,
            "type": "boolean",
            "description": "一个布尔值，指示在使用发布者确认时是否等待 RabbitMQ 确认消息发布。"
          },
          "no_ack": {
            "default": true,
            "type": "boolean",
            "description": "在从 RabbitMQ 代理消费消息时是否使用 no_ack 模式。"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.post_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mqtt"
            ]
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/bridge_mqtt_publisher.ingress_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.source_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_matrix.get_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "特定于 PostgreSQL 动作的参数配置",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "pulsar.producer_pulsar_message": {
        "properties": {
          "key": {
            "default": "${.clientid}",
            "type": "string",
            "description": "渲染 Pulsar 消息键的模板。"
          },
          "value": {
            "default": "${.}",
            "type": "string",
            "description": "渲染 Pulsar 消息值的模版。"
          }
        },
        "type": "object"
      },
      "bridge_kafka.socket_opts": {
        "properties": {
          "sndbuf": {
            "default": "1MB",
            "type": "string",
            "description": "TCP socket 的发送缓存调优。默认值是针对高吞吐量的一个推荐值。",
            "example": "32MB"
          },
          "recbuf": {
            "default": "1MB",
            "type": "string",
            "description": "TCP socket 的收包缓存调优。默认值是针对高吞吐量的一个推荐值。",
            "example": "32MB"
          },
          "nodelay": {
            "default": true,
            "type": "boolean",
            "description": "设置‘true’让系统内核立即发送。否则当需要发送的内容很少时，可能会有一定延迟（默认 40 毫秒）。"
          },
          "tcp_keepalive": {
            "default": "none",
            "type": "string",
            "description": "为 Kafka 桥接连接启用 TCP keepalive。<br/>该值是3个由逗号分隔的数字，格式为 'Idle,Interval,Probes'。<br/> - Idle: 连接在服务器开始发送 keep-alive 探测（Linux 默认 7200）之前需要空闲的秒数。<br/> - Interval: TCP keep-alive 探测发送间隔的秒数（Linux 默认 75）。<br/> - Probes: 如果没有从另一端获得响应，在放弃并终止连接之前发送的 TCP keep-alive 探测的最大数量 （Linux 默认 9）。<br/>例如 \"240,30,5\" 表示： 在连接空闲 240 秒后发送 TCP keepalive 探测 ，并且每 30 秒发送一次探测，直到收到响应，如果连续错过 5 个响应，则应关闭连接。<br/>默认值： 'none'"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_consumer.source_parameters": {
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "要发布消息的 GCP PubSub 主题。"
          },
          "pull_max_messages": {
            "default": 100,
            "type": "integer",
            "description": "从 GCP PubSub 中在一个拉取请求里检索的最大消息数。 实际数量可能小于指定的值。",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "bridge_redis.post_single": {
        "required": [
          "command_template",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 Redis 的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果此动作用作规则的动作（EMQX 规则引擎），并且还配置了 local_topic，则规则中获取的数据和与 local_topic 匹配的 MQTT 消息都将被转发。"
          },
          "command_template": {
            "type": "array",
            "description": "用于导出消息的 Redis 命令模板。每个列表元素代表一个命令名称或其参数。<br/>例如，要将有效负载推送到 Redis 列表中的键 msgs，元素应该如下所示：<br/>rpush，msgs，${payload}。",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_single"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。"
          },
          "redis_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "Single 模式。 当 Redis 服务器在 Single 模式下运行时必须设置为 'single' 。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis 数据库 ID。",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "type": {
            "type": "string",
            "enum": [
              "redis_single"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作对动作的用户可读描述"
          }
        },
        "type": "object"
      },
      "audit.audit": {
        "properties": {
          "created_at": {
            "description": "The time when the log is created",
            "oneOf": [
              {
                "type": "integer",
                "description": "epoch-microsecond",
                "example": 1640995200000000
              },
              {
                "type": "string",
                "format": "date-time",
                "example": "2022-01-01T00:00:00.000000Z"
              }
            ]
          },
          "node": {
            "type": "string",
            "description": "The node name to which the log is created"
          },
          "from": {
            "type": "string",
            "enum": [
              "dashboard",
              "rest_api",
              "cli",
              "erlang_console"
            ],
            "description": "The source type of the log"
          },
          "source": {
            "type": "string",
            "description": "The source of the log"
          },
          "source_ip": {
            "type": "string",
            "description": "The source ip of the log"
          },
          "operation_id": {
            "type": "string",
            "description": "The operation id of the log"
          },
          "operation_type": {
            "type": "string",
            "description": "The operation type of the log"
          },
          "operation_result": {
            "type": "string",
            "enum": [
              "success",
              "failure"
            ],
            "description": "The operation result of the log"
          },
          "http_status_code": {
            "type": "integer",
            "description": "The http status code of the log"
          },
          "http_method": {
            "type": "string",
            "enum": [
              "post",
              "put",
              "delete"
            ],
            "description": "The http method of the log"
          },
          "duration_ms": {
            "type": "integer",
            "description": "The duration of the log"
          },
          "args": {
            "type": "array",
            "description": "The args of the log",
            "items": {
              "type": "string"
            }
          },
          "failure": {
            "type": "array",
            "description": "The failure of the log",
            "items": {
              "type": "string"
            }
          },
          "http_request": {
            "description": "The http request of the log",
            "$ref": "#/components/schemas/audit.http_request"
          }
        },
        "type": "object"
      },
      "bridge_opents.put": {
        "required": [
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "服务器的地址。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "summary": {
            "default": true,
            "type": "boolean",
            "description": "是否返回摘要信息。"
          },
          "details": {
            "default": false,
            "type": "boolean",
            "description": "是否返回详细信息。"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "kafka_consumer.get_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kafka_consumer"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "parameters": {
            "description": "Source 配置。",
            "$ref": "#/components/schemas/kafka_consumer.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.source_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "datalayers"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "Additional parameters specific to this action type",
            "$ref": "#/components/schemas/bridge_datalayers.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_check_authn_complete": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "client_check_authn_complete"
            ],
            "description": "事件类型"
          },
          "clientid": {
            "type": "string",
            "description": "客户端 ID"
          },
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "reason_code": {
            "type": "string",
            "description": "原因代码"
          },
          "peername": {
            "type": "string",
            "description": "对等客户端的 IP 地址和端口"
          },
          "is_anonymous": {
            "type": "boolean",
            "description": "如果此用户是匿名的，则为 true。"
          },
          "is_superuser": {
            "type": "boolean",
            "description": "如果这是超级用户，则为 true。"
          }
        },
        "type": "object"
      },
      "action_azure_blob_storage.direct_parameters": {
        "required": [
          "blob",
          "container",
          "mode"
        ],
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "direct"
            ],
            "description": "Enables uploading of events to the Azure Blob Storage service as separate objects."
          },
          "container": {
            "type": "string",
            "description": "The name of the Azure Blob Storage container name."
          },
          "blob": {
            "type": "string",
            "description": "The name of the Azure Blob Storage blob name."
          },
          "content": {
            "default": "${.}",
            "type": "string",
            "description": "Content of the Azure Blob Storage blob being uploaded. Supports templates."
          }
        },
        "type": "object"
      },
      "bridge_oracle.action_parameters": {
        "properties": {
          "sql": {
            "default": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板。模板字符串可以包含消息元数据和有效载荷字段的占位符。占位符的插入不需要任何检查和特殊格式化，因此必须确保插入的数值格式化和转义正确。模板字符串可以包含占位符模板字符串可以包含消息元数据和有效载荷字段的占位符。这些占位符被插入所以必须确保插入的值的格式正确。因此，确保插入的值格式化和转义正确是非常重要的。模板字符串可以包含占位符模板字符串可以包含消息元数据和有效载荷字段的占位符。这些占位符被插入所以必须确保插入的值的格式正确。确保插入的值被正确地格式化和转义。"
          }
        },
        "type": "object"
      },
      "connector_mqtt.resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.put_connector": {
        "required": [
          "parameters"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "default": "127.0.0.1:8361",
            "type": "string",
            "description": "The IPv4 or IPv6 address or the hostname to connect to.<br/><br/>A host entry has the following form: `Host[:Port]`.<br/><br/>The Datalayers default port 8361 is used if `[:Port]` is not specified."
          },
          "parameters": {
            "description": "Set of parameters specific for the given type of this Datalayers connector.",
            "$ref": "#/components/schemas/connector_datalayers.datalayers_parameters"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_datalayers.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_datalayers.action_parameters": {
        "required": [
          "write_syntax"
        ],
        "properties": {
          "write_syntax": {
            "type": "string",
            "format": "sql",
            "description": "Conf of InfluxDB line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point, and placeholder supported.<br/>See also [InfluxDB 1.8 Line Protocol](https://docs.influxdata.com/influxdb/v1.8/write_protocols/line_protocol_tutorial/) <br/><br/>TLDR:<br/><br/>```<br/><measurement>[,<tag_key>=<tag_value>[,<tag_key>=<tag_value>]] <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>]<br/>```<br/>Please note that a placeholder for an integer value must be annotated with a suffix `i`. For example `${payload.int_value}i`."
          },
          "precision": {
            "default": "ms",
            "type": "string",
            "enum": [
              "ns",
              "us",
              "ms",
              "s"
            ],
            "description": "Datalayers time precision."
          }
        },
        "type": "object"
      },
      "syskeeper.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "syskeeper_forwarder"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作的名称"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "Syskeeper 动作的参数",
            "$ref": "#/components/schemas/syskeeper.parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/syskeeper.creation_opts"
          }
        },
        "type": "object"
      },
      "message_transformation_http_api.get_metrics": {
        "properties": {
          "metrics": {
            "$ref": "#/components/schemas/message_transformation_http_api.metrics"
          },
          "node_metrics": {
            "$ref": "#/components/schemas/message_transformation_http_api.node_metrics"
          }
        },
        "type": "object"
      },
      "confluent.put_connector": {
        "required": [
          "authentication",
          "bootstrap_hosts",
          "ssl"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "逗号分隔的 Confluent Kafka 命名空间主机名 <code>host[:port]</code> ，用于引导客户端。  默认端口号为 9092。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "TCP 连接建立的最大等待时间（包括启用认证时的认证时间）。",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "客户端刷新 Confluent Kafka 代理和主题元数据的最短时间间隔。设置过小的值可能会给 Confluent 增加额外的负载。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "从 Confluent 获取元数据的最大等待时间。",
            "example": "32s"
          },
          "authentication": {
            "default": {},
            "description": "认证配置",
            "$ref": "#/components/schemas/confluent.auth_username_password"
          },
          "socket_opts": {
            "description": "额外的套接字选项。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "default": {
              "enable": true
            },
            "$ref": "#/components/schemas/confluent.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mysql.post": {
        "required": [
          "database",
          "name",
          "server",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mysql"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作对动作的用户可读描述"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或停用该动作"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL 模版"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 MySQL 的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果此动作用作规则的操作（EMQX 规则引擎），并且还配置了 local_topic，则规则中获取的数据和与 local_topic 匹配的 MQTT 消息都将被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "用于连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>主机条目的格式如下：主机[:端口]。<br/><br/>如果未指定[:端口]，将使用 MySQL 的默认端口3306。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_kafka.auth_gssapi_kerberos": {
        "required": [
          "kerberos_keytab_file",
          "kerberos_principal"
        ],
        "properties": {
          "kerberos_principal": {
            "type": "string",
            "description": "SASL GSSAPI 认证方法的 Kerberos principal，例如 <code>client_name@MY.KERBEROS.REALM.MYDOMAIN.COM</code>注意：这里使用的 realm 需要配置在 EMQX 服务器的 /etc/krb5.conf 中。"
          },
          "kerberos_keytab_file": {
            "type": "string",
            "description": "SASL GSSAPI 认证方法的 Kerberos keytab 文件。注意：该文件需要上传到 EMQX 服务器中，且运行 EMQX 服务的系统账户需要有读取权限。"
          }
        },
        "type": "object"
      },
      "bridge_redis.put_single": {
        "required": [
          "command_template",
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "要转发到 Redis 的 MQTT 主题过滤器。所有与 local_topic 匹配的 MQTT 'PUBLISH' 消息都将被转发。<br/><br/>注意：如果此动作用作规则的动作（EMQX 规则引擎），并且还配置了 local_topic，则规则中获取的数据和与 local_topic 匹配的 MQTT 消息都将被转发。"
          },
          "command_template": {
            "type": "array",
            "description": "用于导出消息的 Redis 命令模板。每个列表元素代表一个命令名称或其参数。<br/>例如，要将有效负载推送到 Redis 列表中的键 msgs，元素应该如下所示：<br/>rpush，msgs，${payload}。",
            "items": {
              "type": "string"
            }
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_redis.creation_opts_redis_single"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。主机名具有以下形式：Host[:Port]。如果未指定 [:Port]，则使用 Redis 默认端口 6379。"
          },
          "redis_type": {
            "default": "single",
            "type": "string",
            "enum": [
              "single"
            ],
            "description": "Single 模式。 当 Redis 服务器在 Single 模式下运行时必须设置为 'single' 。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "database": {
            "default": 0,
            "type": "integer",
            "description": "Redis 数据库 ID。",
            "minimum": 0
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.get_connector": {
        "required": [
          "database",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mongodb"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "连接器的状态<br/><br/>- <code>正在连接</code>: 在进行任何健康检查之前的初始状态。<br/><br/>- <code>已连接</code>: 当连接器通过健康检查时的状态。<br/><br/>- <code>已断开</code>: 当连接器无法通过健康检查时的状态。<br/><br/>- <code>不一致</code>: 集群节点之间的连接器状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "这是连接器连接失败时给出的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/connector.node_status"
            }
          },
          "actions": {
            "type": "array",
            "description": "添加到该连接器的动作列表。",
            "items": {
              "type": "string"
            },
            "example": [
              "my_action"
            ]
          },
          "parameters": {
            "description": "特定于此 MongoDB 连接器类型的一组参数，mongo_type 可以是 single（独立）、sharded（分片）或 rs（副本集）之一。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/mongo.connector_rs"
              },
              {
                "$ref": "#/components/schemas/mongo.connector_sharded"
              },
              {
                "$ref": "#/components/schemas/mongo.connector_single"
              }
            ]
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "使用 DNS SRV 记录。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。"
          },
          "auth_source": {
            "type": "string",
            "description": "与用户认证信息关联的数据库名称。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mongodb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_azure_event_hub.put_producer": {
        "required": [
          "bootstrap_hosts",
          "kafka"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "逗号分隔的 Azure Event Hubs Kafka 命名空间主机名 <code>host[:port]</code> ，用于引导客户端。  默认端口号为 9093。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "TCP 连接建立的最大等待时间（包括如果已启用身份认证则包括身份认证时间）",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "客户端在刷新 Azure Event Hubs Kafka 代理和主题元数据之前必须等待的最小时间间隔。设置太小的值可能会给 Azure Event Hubs 增加额外的负载。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "从 Azure Event Hubs 获取元数据时的最大等待时间。",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "认证配置",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "额外的套接字选项。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "local_topic": {
            "type": "string",
            "description": "将 MQTT 主题或主题过滤器作为数据源（动作输入）。如果使用规则动作作为数据源，则应将此配置保留为空，否则消息将在 Azure Event Hubs 中重复。"
          },
          "kafka": {
            "description": "Azure Event Hubs 生产者配置",
            "$ref": "#/components/schemas/bridge_kafka.v1_producer_kafka_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.get_consumer": {
        "required": [
          "bootstrap_hosts",
          "name",
          "topic_mapping",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "kafka",
              "kafka_producer",
              "kafka_consumer"
            ],
            "description": "桥接类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字，可读描述"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "用逗号分隔的 <code>host[:port]</code> 主机列表。默认端口号为 9092。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "建立 TCP 连接时的最大等待时长（若启用认证，这个等待时长也包含完成认证所需时间）。",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "刷新 Kafka broker 和 Kafka 主题元数据段最短时间间隔。设置太小可能会增加 Kafka 压力。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "刷新元数据时最大等待时长。",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "认证参数。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "更多 Socket 参数设置。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "kafka": {
            "description": "Kafka 消费者配置。",
            "$ref": "#/components/schemas/bridge_kafka.consumer_kafka_opts"
          },
          "topic_mapping": {
            "type": "array",
            "description": "指定 Kafka 主题和 MQTT 主题之间的映射关系。 应至少包含一项。",
            "items": {
              "$ref": "#/components/schemas/bridge_kafka.consumer_topic_mapping"
            }
          },
          "key_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "通过 MQTT 转发之前，如何处理 Kafka 消息的 Key。<code>none</code> 使用 Kafka 消息中的 Key 原始值，不进行编码。  注意：在这种情况下，Key 必须是一个有效的 UTF-8 字符串。<br/><code>base64</code> 对收到的密钥或值使用 base-64 编码。"
          },
          "value_encoding_mode": {
            "default": "none",
            "type": "string",
            "enum": [
              "none",
              "base64"
            ],
            "description": "通过 MQTT 转发之前，如何处理 Kafka 消息的 Value。<code>none</code> 使用 Kafka 消息中的 Value 原始值，不进行编码。  注意：在这种情况下，Value 必须是一个有效的 UTF-8 字符串。<br/><code>base64</code> 对收到的 Value 使用 base-64 编码。"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mqtt"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "动作的具体配置。",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.action_resource_opts"
          }
        },
        "type": "object"
      },
      "node_eviction.status_enabled": {
        "properties": {
          "status": {
            "default": "enabled",
            "type": "string",
            "enum": [
              "enabled"
            ]
          },
          "stats": {
            "$ref": "#/components/schemas/node_eviction.stats"
          }
        },
        "type": "object"
      },
      "rule_engine.ctx_schema_validation_failed": {
        "required": [
          "event_type"
        ],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": [
              "schema_validation_failed"
            ],
            "description": "事件类型"
          },
          "validation": {
            "type": "string",
            "description": "验证"
          },
          "clientid": {
            "type": "string",
            "description": "客户端 ID"
          },
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "payload": {
            "type": "string",
            "description": "消息负载"
          },
          "peerhost": {
            "type": "string",
            "description": "对等客户端的 IP 地址"
          },
          "topic": {
            "type": "string",
            "description": "消息主题"
          },
          "publish_received_at": {
            "type": "integer",
            "description": "消息被接受的时间"
          },
          "qos": {
            "maximum": 2,
            "type": "integer",
            "description": "消息的 QoS",
            "minimum": 0,
            "example": 0
          }
        },
        "type": "object"
      },
      "bridge_kafka.consumer_kafka_opts": {
        "properties": {
          "max_batch_bytes": {
            "default": "896KB",
            "type": "string",
            "description": "设置每次从 Kafka 拉取数据的字节数。如该配置小于 Kafka 消息的大小，可能会影响消费性能。",
            "example": "32MB"
          },
          "offset_reset_policy": {
            "default": "latest",
            "type": "string",
            "enum": [
              "latest",
              "earliest"
            ],
            "description": "如不存在偏移量历史记录或历史记录失效，消费者应使用哪个偏移量开始消费。"
          },
          "offset_commit_interval_seconds": {
            "default": "5s",
            "type": "string",
            "description": "指定 Kafka 消费组偏移量提交的时间间隔。",
            "example": "1h"
          }
        },
        "type": "object"
      },
      "bridge_pgsql.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "特定于 PostgreSQL 动作的参数配置",
            "$ref": "#/components/schemas/bridge_pgsql.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "gcp_pubsub_consumer.post_source": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_consumer"
            ]
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "description": "Source 配置。",
            "$ref": "#/components/schemas/gcp_pubsub_consumer.source_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/gcp_pubsub_consumer.source_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.put": {
        "required": [
          "base_url"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或禁用该桥接"
          },
          "authentication": {
            "default": "auth_basic",
            "description": "认证信息",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_iotdb.auth_basic"
              }
            ]
          },
          "is_aligned": {
            "default": false,
            "type": "boolean",
            "description": "是否对齐时间序列。"
          },
          "device_id": {
            "type": "string",
            "description": "IoTDB 的设备 ID（DeviceID）。可以使用一个占位符。如果留空则 MQTT 消息体中必须有一个 `device_id` 字段，<br/>或者 EMQX 规则引擎的 SQL 必须输出一个 `device_id` 字段。"
          },
          "iotdb_version": {
            "default": "v1.3.x",
            "type": "string",
            "enum": [
              "v1.3.x",
              "v1.1.x",
              "v1.0.x",
              "v0.13.x"
            ],
            "description": "IoTDB 版本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_iotdb.creation_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接到 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "retry_interval": {
            "type": "string",
            "deprecated": true,
            "example": "12m"
          },
          "pool_type": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "hash"
            ],
            "description": "连接池类型。可以是random、hash之一。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "enable_pipelining": {
            "default": 100,
            "type": "integer",
            "description": "一个正整数。是否连续发送 HTTP 请求，当设置为1时，意味着在发送每个 HTTP 请求后，需要等待服务器返回，然后继续发送下一个请求。",
            "minimum": 1
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "base_url": {
            "type": "string",
            "description": "IoTDB REST 服务的 URL。",
            "example": "http://127.0.0.1"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "HTTP 请求的最大重试次数。",
            "minimum": 0
          }
        },
        "type": "object"
      },
      "syskeeper.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "infinity",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "confluent.ssl_client_opts": {
        "properties": {
          "cacertfile": {
            "type": "string",
            "description": "受信任的 PEM 格式 CA  证书捆绑文件<br/><br/>此文件中的证书用于验证 TLS 对等方的证书。<br/>如果要信任新 CA，请将新证书附加到文件中。<br/>无需重启 EMQX 即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/><br/>注意：从文件中失效（删除）证书不会影响已建立的连接。"
          },
          "cacerts": {
            "default": false,
            "type": "boolean",
            "deprecated": true
          },
          "certfile": {
            "type": "string",
            "description": "PEM 格式证书链文件<br/><br/>此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，<br/>然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。<br/>根 CA 证书是可选的，如果想要添加，应加到文件到最末端。"
          },
          "keyfile": {
            "type": "string",
            "description": "PEM 格式的私钥文件。"
          },
          "reuse_sessions": {
            "default": true,
            "type": "boolean",
            "description": "启用 TLS 会话重用。"
          },
          "depth": {
            "default": 10,
            "type": "integer",
            "description": "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。<br/>因此，如果深度为 0，则对等方必须由受信任的根 CA 直接签名；<br/><br/>如果是 1，路径可以是 PEER、中间 CA、ROOT-CA；<br/><br/>如果是 2，则路径可以是 PEER、中间 CA1、中间 CA2、ROOT-CA。",
            "minimum": 0
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
            "example": ""
          },
          "versions": {
            "default": [
              "tlsv1.3",
              "tlsv1.2"
            ],
            "type": "array",
            "description": "支持所有 TLS/DTLS 版本<br/><br/>注：PSK 的 Ciphers 无法在 <code>tlsv1.3</code> 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 <code>[\"tlsv1.2\",\"tlsv1.1\"]</code>。",
            "items": {
              "type": "string"
            }
          },
          "ciphers": {
            "default": [],
            "type": "array",
            "description": "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如<br/><code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code>或<br/><code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>。<br/><br/><br/>密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。<br/>选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。<br/><br/>名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。<br/>EMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/><br/>注意：某些密码套件仅与特定的 TLS <code>版本</code>兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。<br/>不兼容的密码套件将被自动删除。<br/><br/>例如，如果只有 <code>versions</code> 仅配置为 <code>tlsv1.3</code>。为其他版本配置密码套件将无效。<br/><br/><br/><br/>注：PSK 的 Ciphers 不支持 tlsv1.3<br/><br/>如果打算使用 PSK 密码套件, <code>tlsv1.3</code> 应在<code>ssl.versions</code>中禁用。<br/><br/><br/><br/>PSK 密码套件：<br/><code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,<br/>RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,<br/>RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,<br/>RSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code>",
            "items": {
              "type": "string"
            }
          },
          "secure_renegotiate": {
            "default": true,
            "type": "boolean",
            "description": "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。<br/>RFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。"
          },
          "log_level": {
            "default": "notice",
            "type": "string",
            "enum": [
              "emergency",
              "alert",
              "critical",
              "error",
              "warning",
              "notice",
              "info",
              "debug",
              "none",
              "all"
            ],
            "description": "SSL 握手的日志级别。默认值是 'notice'，可以设置为 'debug' 用来调查 SSL 握手的问题。"
          },
          "hibernate_after": {
            "default": "5s",
            "type": "string",
            "description": "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
            "example": "12m"
          },
          "partial_chain": {
            "type": "string",
            "enum": [
              true,
              false,
              "two_cacerts_from_cacertfile",
              "cacert_from_cacertfile"
            ],
            "description": "启用或禁用带有 partial_chain 的对等证书验证。<br/>当本地在 x509 路径验证过程中验证对等证书时<br/>它会构建一个从对等证书开始<br/>并以信任锚结束的证书链。<br/>默认情况下，如果设置为 `false`，信任锚是根 CA，<br/>证书链必须是完整的。<br/>然而，如果设置为 `true` 或 `cacert_from_cacertfile`，<br/>则 `cacertfile` 中的最后一个证书将被用作信任锚证书（中间 CA），<br/>这将在路径验证中创建一个部分链。<br/>或者，如果配置为 `two_cacerts_from_cacertfile`，`cacertfile` 中的<br/>最后两个证书中的一个将被用作信任锚证书，<br/>形成一个部分链。<br/>此选项特别适用于中间 CA 证书的轮换。<br/>然而，请注意这会带来一些额外的开销，<br/>因此应仅用于证书轮换目的。"
          },
          "verify_peer_ext_key_usage": {
            "type": "string",
            "description": "验证对等证书中的扩展密钥用途。<br/>为了额外的对等证书验证，这里定义的值必须出现在对等证书的 `Extended Key Usage` 中，<br/>对等证书的 'Extended Key Usage' 定义在<br/>[rfc5280](https://www.rfc-editor.org/rfc/rfc5280#section-4.2.1.12) 中。<br/><br/>允许的值包括<br/>- `clientAuth`<br/>- `serverAuth`<br/>- `codeSigning`<br/>- `emailProtection`<br/>- `timeStamping`<br/>- `ocspSigning`<br/>- 原始 OID，例如： \"OID:1.3.6.1.5.5.7.3.2\" 表示 `id-pk 2`，等同于 `clientAuth`<br/><br/>也支持逗号分隔的字符串，用于验证多个密钥用途。<br/><br/>例如： `\"serverAuth,OID:1.3.6.1.5.5.7.3.2\"`"
          },
          "server_name_indication": {
            "default": "auto",
            "description": "TLS 握手的服务器名称指示（SNI）设置。<br/><br/>- <code>auto</code>：客户端将使用<code>\"servicebus.windows.net\"</code>作为 SNI。<br/><br/>- <code>disable</code>：如果您不希望客户端发送 SNI。<br/><br/>- 其他字符串值将按原样发送。",
            "example": "auto",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "disable"
                ]
              },
              {
                "type": "string",
                "enum": [
                  "auto"
                ]
              }
            ]
          }
        },
        "type": "object"
      },
      "rocketmq.put": {
        "required": [
          "servers"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "template": {
            "default": "",
            "type": "string",
            "description": "模板, 默认为空，为空时将会将整个消息转发给 RocketMQ。 <br/><br/>            模板可以是任意带有占位符的合法字符串, 例如:<br/>            ${id}, ${username}, ${clientid}, ${timestamp}<br/><br/>            {\"id\" : ${id}, \"username\" : ${username}}"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 RocketMQ。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "strategy": {
            "default": "roundrobin",
            "description": "生产者键派发策略，默认为 `roundrobin`，也支持占位符，如：`clientid`、`messageid`、`username`。",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "roundrobin"
                ]
              }
            ]
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "servers": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 RocketMQ 默认端口 9876。"
          },
          "namespace": {
            "type": "string",
            "description": "如果你正在使用阿里云的 RocketMQ 服务并且启用了命名空间，或者您在自己的 RocketMQ 服务器中配置了命名空间，则必须配置命名空间字段。对于阿里云中的 RocketMQ 服务，命名空间就是实例 ID。"
          },
          "topic": {
            "default": "TopicTest",
            "type": "string",
            "description": "RocketMQ 主题"
          },
          "access_key": {
            "default": "",
            "type": "string",
            "description": "RocketMQ 服务器的 `accessKey`。"
          },
          "secret_key": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ 服务器的 `secretKey`。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "security_token": {
            "default": "",
            "type": "string",
            "format": "password",
            "description": "RocketMQ 服务器安全令牌",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "RocketMQ 驱动同步调用的超时时间。",
            "example": "12m"
          },
          "refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "RocketMQ 主题路由更新间隔。",
            "example": "12m"
          },
          "send_buffer": {
            "default": "1024KB",
            "type": "string",
            "description": "RocketMQ 驱动的套字节发送消息的缓冲区大小",
            "example": "32MB"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.action_parameters_data": {
        "required": [
          "data_type",
          "measurement",
          "value"
        ],
        "properties": {
          "timestamp": {
            "default": "now",
            "description": "时间戳。支持格式为 ${var} 的占位符，最终值可以是：</br><br/>- now: 使用载荷中包含的 `now_ms` 作为时间戳<br/>- now_ms: 同上<br/>- now_us: 使用载荷中包含的 `now_us` 作为时间戳<br/>- now_ns: 使用载荷中包含的 `now_ns` 作为时间戳<br/>- 其他: 直接使用值作为时间戳。",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "now",
                  "now_ms",
                  "now_ns",
                  "now_us"
                ]
              }
            ]
          },
          "measurement": {
            "type": "string",
            "description": "也称 Measurement，支持使用 ${var} 格式的占位符。"
          },
          "data_type": {
            "description": "数据类型，可以是枚举或字符串。</br>支持格式为 ${var} 的字符串占位符，最终值可以是：</br><br/>- TEXT<br/>- BOOLEAN<br/>- INT32<br/>- INT64<br/>- FLOAT<br/>- DOUBLE",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "text",
                  "boolean",
                  "int32",
                  "int64",
                  "float",
                  "double"
                ]
              }
            ]
          },
          "value": {
            "type": "string",
            "description": "值。支持格式为 ${var} 的占位符"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_cassa.post": {
        "required": [
          "keyspace",
          "name",
          "servers",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cassandra"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "cql": {
            "default": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "CQL 模板"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 Cassandra。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "servers": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port][,Host2:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 Cassandra 默认端口 9042。"
          },
          "keyspace": {
            "type": "string",
            "description": "要连接到的 Keyspace 名称。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.user_provided_function": {
        "required": [
          "function"
        ],
        "properties": {
          "function": {
            "type": "string",
            "description": "用户提供的函数。 格式应为：'{module}:{function}'。<br/>其中 {module} 是 Erlang 回调模块， {function} 是 Erlang 函数。<br/>要编写自己的函数，请检查源文件：<code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code> 中的示例函数 <code>console</code> 和<code>republish</code> 。",
            "example": "module:function"
          },
          "args": {
            "default": {},
            "type": "object",
            "description": "用户提供的参数将作为函数 module:function/3 的第三个参数，<br/>请检查源文件：<code>apps/emqx_rule_engine/src/emqx_rule_actions.erl</code> 中的示例函数 <code>console</code> 和<code>republish</code> 。",
            "example": {}
          }
        },
        "type": "object"
      },
      "bridge_tdengine.get": {
        "required": [
          "database",
          "name",
          "password",
          "server",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "tdengine"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 TDengine。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 TDengine 默认端口 6041。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "default": "root",
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "action_azure_blob_storage.aggregation": {
        "required": [
          "container"
        ],
        "properties": {
          "container": {
            "default": {
              "type": "csv"
            },
            "description": "Settings governing the file format of an upload containing aggregated events.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/connector_aggregator.container_csv"
              }
            ]
          },
          "time_interval": {
            "default": "1h",
            "type": "string",
            "description": "Amount of time events will be aggregated in a single object before uploading.",
            "example": "1h"
          },
          "max_records": {
            "default": 1000000,
            "type": "integer",
            "description": "Number of records (events) allowed per each aggregated object. Each aggregated upload will contain no more than that number of events, but may contain less.<br/><br/>  If event rate is high enough, there obviously may be more than one aggregated upload during the same time interval. These uploads will have different, but consecutive sequence numbers, which will be a part of Azure Blob Storage blob name.",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "bridge_cassa.put_connector": {
        "required": [
          "keyspace",
          "servers"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "servers": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port][,Host2:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 Cassandra 默认端口 9042。"
          },
          "keyspace": {
            "type": "string",
            "description": "要连接到的 Keyspace 名称。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_cassa.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_kafka.put_producer": {
        "required": [
          "bootstrap_hosts",
          "kafka"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "bootstrap_hosts": {
            "type": "string",
            "description": "用逗号分隔的 <code>host[:port]</code> 主机列表。默认端口号为 9092。"
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "建立 TCP 连接时的最大等待时长（若启用认证，这个等待时长也包含完成认证所需时间）。",
            "example": "32s"
          },
          "min_metadata_refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "刷新 Kafka broker 和 Kafka 主题元数据段最短时间间隔。设置太小可能会增加 Kafka 压力。",
            "example": "32s"
          },
          "metadata_request_timeout": {
            "default": "5s",
            "type": "string",
            "description": "刷新元数据时最大等待时长。",
            "example": "32s"
          },
          "authentication": {
            "default": "none",
            "description": "认证参数。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_gssapi_kerberos"
              },
              {
                "$ref": "#/components/schemas/bridge_kafka.auth_username_password"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "socket_opts": {
            "description": "更多 Socket 参数设置。",
            "$ref": "#/components/schemas/bridge_kafka.socket_opts"
          },
          "health_check_topic": {
            "type": "string",
            "description": "Topic name used exclusively for more accurate connector health checks."
          },
          "ssl": {
            "$ref": "#/components/schemas/bridge_kafka.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_kafka.connector_resource_opts"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题数据源由桥接指定，或留空由规则动作指定。"
          },
          "kafka": {
            "description": "Kafka 生产者参数。",
            "$ref": "#/components/schemas/bridge_kafka.v1_producer_kafka_opts"
          }
        },
        "type": "object"
      },
      "schema_validation.check_json": {
        "required": [
          "schema"
        ],
        "properties": {
          "type": {
            "default": "json",
            "type": "string",
            "enum": [
              "json"
            ],
            "description": "JSON schema 检查。"
          },
          "schema": {
            "type": "string",
            "description": "JSON schema 检查。"
          }
        },
        "type": "object"
      },
      "resource_schema.creation_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          },
          "auto_restart_interval": {
            "default": "15s",
            "deprecated": true,
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "enable_queue": {
            "default": false,
            "type": "boolean",
            "deprecated": true,
            "description": "启用磁盘缓存队列（仅对 egress 方向桥接有用）。"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_timescale.post": {
        "required": [
          "database",
          "name",
          "server",
          "type",
          "username"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "timescale"
            ],
            "description": "Bridge 类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 PostgreSQL。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/resource_schema.creation_opts"
          },
          "server": {
            "type": "string",
            "description": "要连接的 IPv4 或 IPv6 地址或主机名。<br/><br/>一个主机条目的格式为：Host[:Port]。<br/><br/>如果没有指定 [:Port]，将使用 PostgreSQL 默认端口 5432。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          }
        },
        "type": "object"
      },
      "confluent.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "confluent_producer"
            ],
            "description": "动作的类型"
          },
          "name": {
            "type": "string",
            "description": "动作名称，用作动作的可读描述。"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "local_topic": {
            "type": "string",
            "description": "将 MQTT 主题或主题过滤器作为数据源（动作输入）。如果使用规则动作作为数据源，则应将此配置保留为空，否则消息将在 Confluent 中重复。"
          },
          "parameters": {
            "description": "Confluent 生产者配置。",
            "$ref": "#/components/schemas/confluent.producer_kafka_opts"
          },
          "resource_opts": {
            "default": {},
            "$ref": "#/components/schemas/bridge_kafka.resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_hstreamdb.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.consumer_topic_mapping": {
        "required": [
          "mqtt_topic",
          "pubsub_topic"
        ],
        "properties": {
          "pubsub_topic": {
            "type": "string",
            "description": "要从中消费的 GCP PubSub 主题。"
          },
          "mqtt_topic": {
            "type": "string",
            "description": "指定从 GCP PubSub 消费的消息被发布到的本地 MQTT 主题。"
          },
          "qos": {
            "default": 0,
            "maximum": 2,
            "type": "integer",
            "description": "从 GCP PubSub 消费的消息发布时应用的 MQTT QoS。",
            "minimum": 0,
            "example": 0
          },
          "payload_template": {
            "default": "${.}",
            "type": "string",
            "description": "转换传入 GCP PubSub 消息格式的模板。默认情况下，它将使用 JSON 格式序列化来自 GCP PubSub 消息的输入。可用字段包括：<br/><code>message_id</code>：由 GCP PubSub 分配的消息 ID。<br/><code>publish_time</code>：GCP PubSub 分配的消息时间戳。<br/><code>topic</code>：GCP PubSub 主题。<br/><code>value</code>：GCP PubSub 消息的有效载荷。如果没有有效载荷，则省略。<br/><code>attributes</code>：包含字符串键值对的对象。如果没有属性，则省略。<br/><code>ordering_key</code>：GCP PubSub 消息排序键。如果没有，则省略。"
          }
        },
        "type": "object"
      },
      "bridge_s3.s3_upload_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "10ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "connector_syskeeper_proxy.connector_resource_opts": {
        "properties": {
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "start_after_created": {
            "default": true,
            "type": "boolean",
            "description": "是否在创建资源后立即启动资源。"
          },
          "start_timeout": {
            "default": "5s",
            "type": "string",
            "description": "在回复资源创建请求前等待资源进入健康状态的时间。",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_sqlserver.put": {
        "required": [
          "database",
          "server"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用桥接"
          },
          "sql": {
            "default": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
            "type": "string",
            "format": "sql",
            "description": "SQL 模板"
          },
          "local_topic": {
            "type": "string",
            "description": "发送到 'local_topic' 的消息都会转发到 Microsoft SQL Server。 <br/><br/>注意：如果这个数据桥接被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_sqlserver.creation_opts"
          },
          "driver": {
            "default": "ms-sql",
            "type": "string",
            "description": "SQL Server Driver 名称"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/><br/>主机名具有以下形式：`Host[:Port]`。<br/><br/>如果未指定 `[:Port]`，则使用 SQL Server 默认端口 1433。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "default": "sa",
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          }
        },
        "type": "object"
      },
      "bridge_gcp_pubsub.get_consumer": {
        "required": [
          "consumer",
          "name",
          "resource_opts",
          "service_account_json",
          "type"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "gcp_pubsub_consumer"
            ],
            "description": "桥接类型"
          },
          "name": {
            "type": "string",
            "description": "桥接名字，可读描述"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用/禁用数据桥接"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_gcp_pubsub.consumer_resource_opts"
          },
          "connect_timeout": {
            "default": "15s",
            "type": "string",
            "description": "连接 HTTP 服务器的超时时间。",
            "example": "32s"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "连接池大小。",
            "minimum": 1
          },
          "pipelining": {
            "default": 100,
            "type": "integer",
            "description": "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
            "minimum": 1
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "请求出错时的最大重试次数。",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "description": "废弃的。在缓冲区设置中配置请求超时。",
            "example": "32s"
          },
          "service_account_json": {
            "type": "string",
            "description": "包含将与 PubSub 一起使用的 GCP 服务账户凭证的 JSON。<br/>当创建 GCP 服务账户时（如 https://developers.google.com/identity/protocols/oauth2/service-account#creatinganaccount），可以选择下载 JSON 形式的凭证，然后在该配置项中使用。"
          },
          "consumer": {
            "description": "本地 MQTT 发布和 GCP PubSub 消费者配置。",
            "$ref": "#/components/schemas/bridge_gcp_pubsub.consumer"
          }
        },
        "type": "object"
      },
      "cluster_link.link_config_response": {
        "required": [
          "name",
          "server",
          "topics"
        ],
        "properties": {
          "node": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ]
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable a cluster link. The link is enabled by default, disabling it allows stopping the link without removing its configuration. The link must be enabled on both sides to be operational. Disabling the link should also be done on both clusters in order to free up all associated resources."
          },
          "name": {
            "type": "string",
            "description": "Linked (remote) cluster name. Must be exactly equal to the value of `cluster.name` configured at the remote cluster. Must not be equal to the local cluster.name. All configured cluster link names must be unique."
          },
          "server": {
            "type": "string",
            "description": "MQTT host and port of the remote EMQX broker."
          },
          "clientid": {
            "type": "string",
            "description": "Optional Base MQTT client ID for connecting to the remote EMQX cluster. If omitted, local `cluster.name` is used. EMQX maintains several connections between linked clusters, so distinct suffixes are automatically appended to the base client ID."
          },
          "username": {
            "type": "string",
            "description": "Optional MQTT username for connecting to the remote EMQX cluster."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Optional MQTT username for connecting to the remote EMQX cluster.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL configuration for connecting to the remote EMQX cluster.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "topics": {
            "type": "array",
            "description": "MQTT topics to be forwarded by the linked remote EMQX broker to the local broker. Messages are only forwarded if the local EMQX broker has matching subscriber(s).<br/>Wildcards are supported. Setting empty topics list on one side of the link can be used to establish unidirectional links: the side with the empty topics won't receive remote messages, but it can forward relevant messages to its linked counterpart (according to the topics configured on that side of the link).",
            "items": {
              "type": "string"
            }
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the pool of MQTT clients that will publish messages to the linked EMQX broker.",
            "minimum": 1
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "MQTT Message retry interval. Delay for the link to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
            "minimum": 0
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/cluster.creation_opts"
          }
        },
        "type": "object"
      },
      "bridge_influxdb.get_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "influxdb"
            ]
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "connected",
              "disconnected",
              "connecting",
              "inconsistent"
            ],
            "description": "Bridge 的连接状态<br/><br/>- <code>connecting</code>: 启动时的初始状态。<br/><br/>- <code>connected</code>: 桥接驱动健康检查正常。<br/><br/>- <code>disconnected</code>: 当桥接无法通过健康检查。<br/><br/>- <code>stopped</code>: 桥接处于停用状态。<br/><br/>- <code>inconsistent</code>: 集群中有各节点汇报的状态不一致。"
          },
          "status_reason": {
            "type": "string",
            "description": "桥接连接失败的原因。",
            "example": "Connection refused"
          },
          "node_status": {
            "type": "array",
            "description": "节点的状态",
            "items": {
              "$ref": "#/components/schemas/bridge.node_status"
            }
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "此动作类型特定的额外参数",
            "$ref": "#/components/schemas/bridge_influxdb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/actions_and_sources.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_clickhouse.action_parameters": {
        "properties": {
          "sql": {
            "default": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
            "type": "string",
            "format": "sql",
            "description": "可以使用 ${field} 占位符来引用消息与客户端上下文中的变量，请确保对应字段存在且数据格式符合预期。此处不支持 [SQL 预处理](https://docs.emqx.com/zh/enterprise/v5.0/data-integration/data-bridges.html#sql-预处理)。"
          },
          "batch_value_separator": {
            "default": ", ",
            "type": "string",
            "description": "默认为逗号 ','，适用于 VALUE 格式。您也可以使用其他分隔符， 请参考 [INSERT INTO 语句](https://clickhouse.com/docs/en/sql-reference/statements/insert-into)。"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.post_connector": {
        "required": [
          "database",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mongodb"
            ],
            "description": "连接器的类型。"
          },
          "name": {
            "type": "string",
            "description": "连接器的名称"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "parameters": {
            "description": "特定于此 MongoDB 连接器类型的一组参数，mongo_type 可以是 single（独立）、sharded（分片）或 rs（副本集）之一。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/mongo.connector_rs"
              },
              {
                "$ref": "#/components/schemas/mongo.connector_sharded"
              },
              {
                "$ref": "#/components/schemas/mongo.connector_single"
              }
            ]
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "使用 DNS SRV 记录。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。"
          },
          "auth_source": {
            "type": "string",
            "description": "与用户认证信息关联的数据库名称。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mongodb.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "rule_engine.rule_events": {
        "required": [
          "event"
        ],
        "properties": {
          "event": {
            "type": "string",
            "enum": [
              "$events/client_connected",
              "$events/client_disconnected",
              "$events/client_connack",
              "$events/client_check_authz_complete",
              "$events/session_subscribed",
              "$events/session_unsubscribed",
              "$events/message_delivered",
              "$events/message_acked",
              "$events/message_dropped",
              "$events/message_transformation_failed",
              "$events/schema_validation_failed",
              "$events/delivery_dropped"
            ],
            "description": "事件主题"
          },
          "title": {
            "type": "string",
            "description": "标题",
            "example": "some title"
          },
          "description": {
            "type": "string",
            "description": "描述",
            "example": "some desc"
          },
          "columns": {
            "type": "object",
            "description": "列",
            "example": {}
          },
          "test_columns": {
            "type": "object",
            "description": "测试列",
            "example": {}
          },
          "sql_example": {
            "type": "string",
            "description": "SQL 示例"
          }
        },
        "type": "object"
      },
      "bridge_mqtt_publisher.put_bridge_v2": {
        "required": [
          "connector",
          "parameters"
        ],
        "properties": {
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "动作的具体配置。",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mqtt_publisher.action_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_oracle.put_connector": {
        "required": [
          "server",
          "username"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用 (是) 或 停用 (否) 该连接器。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "server": {
            "type": "string",
            "description": "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>主机名具有以下形式：`Host[:Port]`。<br/>如果未指定 `[:Port]`，则使用 Oracle Database 默认端口 1521。"
          },
          "sid": {
            "type": "string",
            "description": "Oracle Database Sid 名称"
          },
          "service_name": {
            "type": "string",
            "description": "Oracle Database 服务名称。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "auto_reconnect": {
            "default": true,
            "type": "boolean",
            "deprecated": true,
            "description": "已弃用。自动重连数据库。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_oracle.connector_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_pulsar.put_producer": {
        "required": [
          "pulsar_topic",
          "servers"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（true）或停用（false）该 Pulsar 数据桥接。"
          },
          "servers": {
            "type": "string",
            "description": "以逗号分隔的 <code>scheme://host[:port]</code> 格式的 Pulsar URL 列表，支持的 scheme 有 <code>pulsar://</code> （默认）和<code>pulsar+ssl://</code>。默认的端口是 6650。"
          },
          "authentication": {
            "default": "none",
            "description": "认证参数。",
            "oneOf": [
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_token"
              },
              {
                "$ref": "#/components/schemas/bridge_pulsar.auth_basic"
              },
              {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "connect_timeout": {
            "default": "5s",
            "type": "string",
            "description": "建立 TCP 连接时的最大等待时长（若启用认证，这个等待时长也包含完成认证所需时间）。",
            "example": "32s"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "message": {
            "description": "渲染 Pulsar 消息的模版。",
            "$ref": "#/components/schemas/pulsar.producer_pulsar_message"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "同步发布时等待从 Pulsar 接收回执的最大等待时间。",
            "example": "32s"
          },
          "pulsar_topic": {
            "type": "string",
            "description": "Pulsar 主题名称"
          },
          "batch_size": {
            "default": 100,
            "type": "integer",
            "description": "在一个 Pulsar 消息中批处理的单个请求的最大数量。",
            "minimum": 1
          },
          "compression": {
            "default": "no_compression",
            "type": "string",
            "enum": [
              "no_compression",
              "snappy",
              "zlib"
            ],
            "description": "压缩方法。"
          },
          "send_buffer": {
            "default": "1MB",
            "type": "string",
            "description": "TCP socket 的发送缓存调优。默认值是针对高吞吐量的一个推荐值。",
            "example": "32MB"
          },
          "retention_period": {
            "default": "infinity",
            "description": "当没有连接到 Pulsar 代理时，信息将被缓冲的时间。 较长的时间意味着将使用更多的内存/磁盘",
            "oneOf": [
              {
                "type": "string",
                "example": "32s"
              },
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              }
            ]
          },
          "max_batch_bytes": {
            "default": "900KB",
            "type": "string",
            "description": "最大消息批量字节数。大多数 Pulsar 环境的默认最低值是 5 MB，EMQX 的默认值比 5 MB 更小是因为需要补偿 Pulsar 消息编码所需要的额外字节（尤其是当每条消息都很小的情况下）。当单个消息的大小超过该限制时，它仍然会被发送，（相当于该批量中只有单个消息）。",
            "example": "32MB"
          },
          "strategy": {
            "default": "random",
            "type": "string",
            "enum": [
              "random",
              "roundrobin",
              "key_dispatch"
            ],
            "description": "设置消息发布时应该如何选择 Pulsar 分区。<br/><br/><code>random</code>: 为每个消息随机选择一个分区。<br/><code>roundrobin</code>: 依次为每条信息挑选可用的生产商。<br/><code>key_dispatch</code>: 将一批信息中的第一条信息的 Pulsar 信息密钥哈希到一个分区编号。"
          },
          "buffer": {
            "description": "配置消息缓存的相关参数。<br/><br/>当 EMQX 需要发送的消息超过 Pulsar 处理能力，或者当 Pulsar 临时下线时，EMQX 内部会将消息缓存起来。",
            "$ref": "#/components/schemas/bridge_pulsar.producer_buffer"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题数据源由桥接指定，或留空由规则动作指定。"
          },
          "resource_opts": {
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_pulsar.producer_resource_opts"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.put_sharded": {
        "required": [
          "database",
          "mongo_type",
          "resource_opts",
          "servers"
        ],
        "properties": {
          "mongo_type": {
            "default": "sharded",
            "type": "string",
            "enum": [
              "sharded"
            ],
            "description": "分片集群。当 MongoDB 服务器以`分片`模式运行时，必须设置为`sharded`。"
          },
          "servers": {
            "type": "string",
            "description": "集群连接的节点列表。节点应使用逗号分隔，例如：节点[,节点]。<br/>对于每个节点，应该是要连接的 IPv4 或 IPv6 地址或主机名。<br/>主机条目具有以下形式：主机[:端口]。<br/>如果未指定[:端口]，则使用 MongoDB 的默认端口27017。"
          },
          "w_mode": {
            "default": "unsafe",
            "type": "string",
            "enum": [
              "unsafe",
              "safe"
            ],
            "description": "写入模式"
          },
          "srv_record": {
            "default": false,
            "type": "boolean",
            "description": "使用 DNS SRV 记录。"
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "桥接远端服务时使用的连接池大小。",
            "minimum": 1
          },
          "username": {
            "type": "string",
            "description": "内部数据库的用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "内部数据库密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "use_legacy_protocol": {
            "default": "auto",
            "type": "string",
            "enum": [
              "auto",
              true,
              false
            ],
            "description": "是否使用 MongoDB 的传统协议与数据库通信。默认情况下，将尝试自动确定是否支持较新的协议。"
          },
          "auth_source": {
            "type": "string",
            "description": "与用户认证信息关联的数据库名称。"
          },
          "database": {
            "type": "string",
            "description": "数据库名字。"
          },
          "topology": {
            "$ref": "#/components/schemas/mongo.topology"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "启用 SSL 连接。",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用或停用该 MongoDB 动作"
          },
          "collection": {
            "default": "mqtt",
            "type": "string",
            "description": "数据将存储在其中的集合"
          },
          "payload_template": {
            "type": "string",
            "description": "用于格式化发送消息的模板。如果未定义，规则引擎将使用 JSON 格式序列化所有可见输入，例如 clientid、主题、有效载荷等。"
          },
          "resource_opts": {
            "description": "资源启动相关的选项。",
            "$ref": "#/components/schemas/bridge_mongodb.creation_opts"
          }
        },
        "type": "object"
      },
      "bridge_iotdb.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "bridge_http.parameters_opts": {
        "properties": {
          "path": {
            "type": "string",
            "description": "此动作的 URL 路径。<br/><br/>此路径将附加到连接器的 <code>url</code> 配置，以形成完整的 URL 地址。<br/>此选项允许使用带有变量的模板。例如，<code>/room/{$room_no}</code>。"
          },
          "method": {
            "default": "post",
            "type": "string",
            "enum": [
              "post",
              "put",
              "get",
              "delete"
            ],
            "description": "HTTP 请求的方法。所有可用的方法包括：post、put、get、delete。<br/><br/>允许使用带有变量的模板。"
          },
          "headers": {
            "default": {
              "accept": "application/json",
              "cache-control": "no-cache",
              "connection": "keep-alive",
              "content-type": "application/json",
              "keep-alive": "timeout=5"
            },
            "type": "object",
            "description": "HTTP 请求头。<br/><br/>允许使用带有变量的模板。",
            "example": {},
            "is_template": true
          },
          "body": {
            "type": "string",
            "description": "HTTP 请求的主体。<br/><br/>如果未提供，主体将是所有可用字段的 JSON 对象。<br/><br/>这里的“所有可用字段”是指在触发此 Webhook 时的 MQTT 消息的上下文（当 local_topic 已设置并接收到 MQTT 消息时触发），<br/>或者当此 Webhook 用作规则的动作时，在触发此 Webhook 时的事件上下文。<br/>允许使用带有变量的模板。"
          },
          "max_retries": {
            "default": 2,
            "type": "integer",
            "description": "如果发送请求时出错，最大的重试次数。",
            "minimum": 0
          },
          "request_timeout": {
            "default": "15s",
            "type": "string",
            "deprecated": true,
            "description": "HTTP 请求超时时间",
            "example": "32s"
          }
        },
        "type": "object"
      },
      "bridge_mongodb.post_bridge_v2": {
        "required": [
          "connector",
          "name",
          "parameters",
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "mongodb"
            ]
          },
          "name": {
            "type": "string"
          },
          "local_topic": {
            "type": "string",
            "description": "MQTT 主题或主题过滤器作为数据源（动作输入）。 如果规则动作用作数据源，则应将此配置留空，否则消息将在远程系统中重复。"
          },
          "parameters": {
            "description": "特定于此动作类型的附加参数",
            "$ref": "#/components/schemas/bridge_mongodb.action_parameters"
          },
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "启用（是）或停用（否）此动作。"
          },
          "connector": {
            "type": "string",
            "description": "由动作指定的连接器名称，用于选择外部资源。"
          },
          "tags": {
            "type": "array",
            "description": "连接器的标签",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "default": "",
            "type": "string",
            "description": "描述性文本。"
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/bridge_mongodb.action_resource_opts"
          }
        },
        "type": "object"
      },
      "rocketmq.action_parameters": {
        "properties": {
          "template": {
            "default": "",
            "type": "string",
            "description": "模板, 默认为空，为空时将会将整个消息转发给 RocketMQ。 <br/><br/>            模板可以是任意带有占位符的合法字符串, 例如:<br/>            ${id}, ${username}, ${clientid}, ${timestamp}<br/><br/>            {\"id\" : ${id}, \"username\" : ${username}}"
          },
          "strategy": {
            "default": "roundrobin",
            "description": "生产者键派发策略，默认为 `roundrobin`，也支持占位符，如：`clientid`、`messageid`、`username`。",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "roundrobin"
                ]
              }
            ]
          },
          "topic": {
            "default": "TopicTest",
            "type": "string",
            "description": "RocketMQ 主题"
          },
          "sync_timeout": {
            "default": "3s",
            "type": "string",
            "description": "RocketMQ 驱动同步调用的超时时间。",
            "example": "12m"
          },
          "refresh_interval": {
            "default": "3s",
            "type": "string",
            "description": "RocketMQ 主题路由更新间隔。",
            "example": "12m"
          },
          "send_buffer": {
            "default": "1024KB",
            "type": "string",
            "description": "RocketMQ 驱动的套字节发送消息的缓冲区大小",
            "example": "32MB"
          }
        },
        "type": "object"
      },
      "cluster.link": {
        "required": [
          "name",
          "server",
          "topics"
        ],
        "properties": {
          "enable": {
            "default": true,
            "type": "boolean",
            "description": "Enable or disable a cluster link. The link is enabled by default, disabling it allows stopping the link without removing its configuration. The link must be enabled on both sides to be operational. Disabling the link should also be done on both clusters in order to free up all associated resources."
          },
          "name": {
            "type": "string",
            "description": "Linked (remote) cluster name. Must be exactly equal to the value of `cluster.name` configured at the remote cluster. Must not be equal to the local cluster.name. All configured cluster link names must be unique."
          },
          "server": {
            "type": "string",
            "description": "MQTT host and port of the remote EMQX broker."
          },
          "clientid": {
            "type": "string",
            "description": "Optional Base MQTT client ID for connecting to the remote EMQX cluster. If omitted, local `cluster.name` is used. EMQX maintains several connections between linked clusters, so distinct suffixes are automatically appended to the base client ID."
          },
          "username": {
            "type": "string",
            "description": "Optional MQTT username for connecting to the remote EMQX cluster."
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Optional MQTT username for connecting to the remote EMQX cluster.",
            "example": "R4ND0M/S∃CЯ∃T"
          },
          "ssl": {
            "default": {
              "enable": false
            },
            "description": "SSL configuration for connecting to the remote EMQX cluster.",
            "$ref": "#/components/schemas/emqx.ssl_client_opts"
          },
          "topics": {
            "type": "array",
            "description": "MQTT topics to be forwarded by the linked remote EMQX broker to the local broker. Messages are only forwarded if the local EMQX broker has matching subscriber(s).<br/>Wildcards are supported. Setting empty topics list on one side of the link can be used to establish unidirectional links: the side with the empty topics won't receive remote messages, but it can forward relevant messages to its linked counterpart (according to the topics configured on that side of the link).",
            "items": {
              "type": "string"
            }
          },
          "pool_size": {
            "default": 8,
            "type": "integer",
            "description": "Size of the pool of MQTT clients that will publish messages to the linked EMQX broker.",
            "minimum": 1
          },
          "retry_interval": {
            "default": "15s",
            "type": "string",
            "description": "MQTT Message retry interval. Delay for the link to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
          },
          "max_inflight": {
            "default": 32,
            "type": "integer",
            "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
            "minimum": 0
          },
          "resource_opts": {
            "default": {},
            "description": "资源相关的选项。",
            "$ref": "#/components/schemas/cluster.creation_opts"
          }
        },
        "type": "object"
      },
      "bridge_pulsar.auth_basic": {
        "required": [
          "password",
          "username"
        ],
        "properties": {
          "username": {
            "type": "string",
            "description": "基本认证用户名。"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "基本认证密码。",
            "example": "R4ND0M/S∃CЯ∃T"
          }
        },
        "type": "object"
      },
      "actions_and_sources.action_resource_opts": {
        "properties": {
          "worker_pool_size": {
            "default": 16,
            "maximum": 1024,
            "type": "integer",
            "description": "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
            "minimum": 1
          },
          "health_check_interval": {
            "default": "15s",
            "type": "string",
            "description": "健康检查间隔。",
            "example": "32s"
          },
          "query_mode": {
            "default": "async",
            "type": "string",
            "enum": [
              "sync",
              "async"
            ],
            "description": "请求模式。可选 '同步/异步'，默认为'异步'模式。"
          },
          "request_ttl": {
            "default": "45s",
            "description": "从请求进入缓冲区的时刻开始，如果请求在指定的时间内仍然停留在缓冲区中，或者已经发送但没有及时收到响应或确认，该请求将被视为过期。",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "infinity"
                ]
              },
              {
                "type": "string",
                "example": "32s"
              }
            ]
          },
          "inflight_window": {
            "default": 100,
            "type": "integer",
            "description": "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
            "minimum": 1
          },
          "batch_size": {
            "default": 1,
            "type": "integer",
            "description": "最大批量请求大小。如果设为 1，则无批处理。",
            "minimum": 1
          },
          "batch_time": {
            "default": "0ms",
            "type": "string",
            "description": "在较低消息率情况下尝试累积批量输出时的最大等待间隔，以提高资源的利用率。",
            "example": "32s"
          },
          "max_buffer_bytes": {
            "default": "256MB",
            "type": "string",
            "description": "每个缓存 worker 允许使用的最大字节数。",
            "example": "32MB"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "scheme": "bearer",
        "type": "http",
        "description": "Authorize with Bearer Token"
      },
      "basicAuth": {
        "scheme": "basic",
        "type": "http",
        "description": "Authorize with [API Keys](https://www.emqx.io/docs/en/v5.0/admin/api.html#api-keys)"
      }
    }
  },
  "paths": {
    "/plugins/{name}/schema": {
      "get": {
        "description": "Get plugin's config AVRO schema.",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          }
        ],
        "summary": "Get installed plugin's AVRO schema",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "FILE_NOT_EXISTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Plugin Not Found or Plugin not given a schema file"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication/{id}/position/{position}": {
      "put": {
        "description": "调整全局认证链上指定认证器的顺序。",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "position",
            "description": "认证器在链中的位置。可能的值是 'front', 'rear', 'before:{other_authenticator_id}', 'after:{other_authenticator_id}'",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "before:password_based:built_in_database"
          }
        ],
        "responses": {
          "204": {
            "description": "Authenticator moved"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/actions/{id}/metrics/reset": {
      "put": {
        "description": "通过 id 重置数据桥接指标。",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "summary": "Reset action metrics",
        "responses": {
          "204": {
            "description": "Reset success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Action not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/metrics": {
      "get": {
        "description": "EMQX 监控指标信息",
        "tags": [
          "Metrics"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "aggregate",
            "description": "Whether to aggregate all nodes Metrics",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_metrics.node_metrics"
                      }
                    },
                    {
                      "$ref": "#/components/schemas/emqx_mgmt_api_metrics.aggregated_metrics"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication/{id}/users/{user_id}": {
      "get": {
        "description": "获取全局认证链上指定认证器中的指定用户数据。",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "description": "用户 ID，根据设置的账号类型不同，可以是 username 或 clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新全局认证链上指定认证器中的指定用户数据。",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "description": "用户 ID，根据设置的账号类型不同，可以是 username 或 clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "value": {
                    "password": "******"
                  },
                  "summary": "Update regular user"
                },
                "super_user": {
                  "value": {
                    "password": "******",
                    "is_superuser": true
                  },
                  "summary": "Update user and promote to superuser"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_update"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除全局认证链上指定认证器中的指定用户数据。",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user_id",
            "description": "用户 ID，根据设置的账号类型不同，可以是 username 或 clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication/{id}/import_users": {
      "post": {
        "description": "为全局认证链上的指定认证器导入用户数据。",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "The import file template type, enum with `plain`,`hash`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "plain",
                "hash"
              ]
            },
            "example": "hash"
          }
        ],
        "responses": {
          "204": {
            "description": "Users imported"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Import body",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "example": [
                  {
                    "is_superuser": true,
                    "password": "password1",
                    "user_id": "user1"
                  },
                  {
                    "is_superuser": false,
                    "password": "password2",
                    "user_id": "user2"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/actions/{id}/{operation}": {
      "post": {
        "description": "启用集群中所有节点上的数据桥接。",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "集群可用操作：'启动'。",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start"
              ]
            },
            "example": "start"
          }
        ],
        "summary": "Manually start a bridge",
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/delayed": {
      "get": {
        "description": "查看慢订阅状态",
        "tags": [
          "MQTT"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/modules.delayed"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "开启或者关闭功能，或者设置延迟消息数量上限",
        "tags": [
          "MQTT"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "配置更新成功",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/modules.delayed"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "数量上限不合法"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/modules.delayed"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/lwm2m/clients/{clientid}/observe": {
      "post": {
        "description": "Observe/Un-Observe 指定资源",
        "tags": [
          "LwM2M Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "urn:oma:lwm2m:oma:2"
          },
          {
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "/3/0/7"
          },
          {
            "in": "query",
            "name": "enable",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "summary": "Observe a Resource",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENT_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Clientid not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_validations/validation/{name}/metrics": {
      "get": {
        "description": "获取某个特定验证规则的指标。",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "验证规则名称",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_validation"
          }
        ],
        "summary": "Get validation metrics",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "metrics": {
                    "value": {
                      "metrics": {
                        "matched": 2,
                        "failed": 1,
                        "succeeded": 1,
                        "rate": 1.23,
                        "rate_last5m": 0.88,
                        "rate_max": 1.87
                      },
                      "node_metrics": [
                        {
                          "node": "emqx@127.0.0.1",
                          "metrics": {
                            "matched": 2,
                            "failed": 1,
                            "succeeded": 1,
                            "rate": 1.23,
                            "rate_last5m": 0.88,
                            "rate_max": 1.87
                          }
                        }
                      ]
                    },
                    "summary": "Metrics"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/schema_validation_http_api.get_metrics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/plugins/{name}": {
      "get": {
        "description": "Describe a plugin according to its `release.json` and `README.md`.",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          }
        ],
        "summary": "Get a plugin description",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/plugins.plugin"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Plugin Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Uninstalls a previously uploaded plugin package.",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          }
        ],
        "summary": "Delete a plugin",
        "responses": {
          "204": {
            "description": "Uninstall successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "PARAM_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad parameter"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Plugin Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/bridges/{id}/metrics/reset": {
      "put": {
        "description": "通过 Id 重置数据桥接的指标",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID ， 格式为 {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          }
        ],
        "summary": "Reset bridge metrics",
        "responses": {
          "204": {
            "description": "Reset success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/links/link/{name}/metrics": {
      "get": {
        "description": "Get a cluster link metrics",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_link"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "metrics": {
                    "routes": 10240
                  },
                  "node_metrics": [
                    {
                      "metrics": {
                        "routes": 10240
                      },
                      "node": "emqx1@emqx.net"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/cluster_link.link_metrics_response"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cluster link not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/status": {
      "get": {
        "description": "节点的健康检查 API，返回当前节点状态信息。<br/><br/>如果 EMQX 应用程序已经启动并运行，返回状态代码 200，否则返回 503。<br/><br/>这个 API 是在 v5.0.10 中引入的。GET `/status` 端点（没有 `/api/...` 前缀）也是这个端点的一个别名。 这个别名从 v5.0.0 开始就有了。自 v5.0.25 和 e5.0.4 开始，可以通过指定 'format' 参数来得到 JSON 格式的信息。",
        "tags": [
          "Status"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "description": "指定返回的内容格式。使用 'text'（默认）则返回自由格式的字符串； 'json' 则返回 JSON 格式。",
            "schema": {
              "default": "text",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "如果 'format' 参数为 'json'，则返回如下 JSON：<br/><br/>{<br/>  \"rel_vsn\": \"v5.0.23\",<br/>  \"node_name\": \"emqx@127.0.0.1\",<br/>  \"broker_status\": \"started\",<br/>  \"app_status\": \"running\"<br/>}<br/><br/><br/>否则返回 2 行自由格式的文本，第一行描述节点的状态，第二行描述 EMQX 应用运行状态。例如：<br/><br/><br/>```<br/>Node emqx@127.0.0.1 is started<br/>emqx is running<br/>```<br/>"
          },
          "503": {
            "description": "如果 EMQX 应用暂时没有启动，或正在重启，则可能返回 'emqx is not_running'"
          }
        },
        "security": []
      }
    },
    "/topics/{topic}": {
      "get": {
        "description": "根据主题名获取主题列表",
        "tags": [
          "Topics"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "topic",
            "description": "Topic Name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_topics.topic"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TOPIC_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Topic not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message_transformations": {
      "get": {
        "description": "列出转换",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [],
        "summary": "List transformations",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "list": {
                    "value": [
                      {
                        "name": "my_transformation",
                        "description": "my transformation",
                        "tags": [
                          "transformation"
                        ],
                        "enable": true,
                        "topics": [
                          "t/+"
                        ],
                        "operations": [
                          {
                            "value": "concat([topic, '/', payload.t])",
                            "key": "topic"
                          }
                        ],
                        "failure_action": "drop",
                        "log_failure": {
                          "level": "info"
                        },
                        "payload_decoder": {
                          "type": "json"
                        },
                        "payload_encoder": {
                          "type": "json"
                        }
                      },
                      {
                        "name": "other_transformation",
                        "description": "my transformation",
                        "tags": [
                          "transformation"
                        ],
                        "enable": true,
                        "topics": [
                          "t/+"
                        ],
                        "operations": [
                          {
                            "value": "concat([topic, '/', payload.t])",
                            "key": "topic"
                          }
                        ],
                        "failure_action": "drop",
                        "log_failure": {
                          "level": "info"
                        },
                        "payload_decoder": {
                          "type": "json"
                        },
                        "payload_encoder": {
                          "type": "json"
                        }
                      }
                    ],
                    "summary": "List"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/message_transformation.transformation"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新一个转换",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [],
        "summary": "Update a transformation",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "update": {
                    "value": {
                      "name": "my_transformation",
                      "description": "my transformation",
                      "tags": [
                        "transformation"
                      ],
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "operations": [
                        {
                          "value": "concat([topic, '/', payload.t])",
                          "key": "topic"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      },
                      "payload_decoder": {
                        "type": "json"
                      },
                      "payload_encoder": {
                        "type": "json"
                      }
                    },
                    "summary": "Update"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/message_transformation.transformation"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad params"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Transformation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "update": {
                  "value": {
                    "name": "my_transformation",
                    "description": "my transformation",
                    "tags": [
                      "transformation"
                    ],
                    "enable": true,
                    "topics": [
                      "t/+"
                    ],
                    "operations": [
                      {
                        "value": "concat([topic, '/', payload.t])",
                        "key": "topic"
                      }
                    ],
                    "failure_action": "drop",
                    "log_failure": {
                      "level": "info"
                    },
                    "payload_decoder": {
                      "type": "json"
                    },
                    "payload_encoder": {
                      "type": "json"
                    }
                  },
                  "summary": "Update"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/message_transformation.transformation"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "向消息转换列表中添加新的转换",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [],
        "summary": "Append a new transformation",
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "message_transformation": {
                    "value": {
                      "name": "my_transformation",
                      "description": "my transformation",
                      "tags": [
                        "transformation"
                      ],
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "operations": [
                        {
                          "value": "concat([topic, '/', payload.t])",
                          "key": "topic"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      },
                      "payload_decoder": {
                        "type": "json"
                      },
                      "payload_encoder": {
                        "type": "json"
                      }
                    },
                    "summary": "Simple message transformation"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/message_transformation.transformation"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Transformation already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "message_transformation": {
                  "value": {
                    "name": "my_transformation",
                    "description": "my transformation",
                    "tags": [
                      "transformation"
                    ],
                    "enable": true,
                    "topics": [
                      "t/+"
                    ],
                    "operations": [
                      {
                        "value": "concat([topic, '/', payload.t])",
                        "key": "topic"
                      }
                    ],
                    "failure_action": "drop",
                    "log_failure": {
                      "level": "info"
                    },
                    "payload_decoder": {
                      "type": "json"
                    },
                    "payload_encoder": {
                      "type": "json"
                    }
                  },
                  "summary": "Simple message transformation"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/message_transformation.transformation"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message_transformations/dryrun": {
      "post": {
        "description": "对输入数据进行转换测试",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [],
        "summary": "Test an input against a configuration",
        "responses": {
          "200": {
            "description": "TODO"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "test": {
                  "value": {
                    "message": {
                      "user_property": {},
                      "retain": true,
                      "payload": "{}",
                      "client_attrs": {},
                      "topic": "t/u/v",
                      "qos": 2
                    },
                    "transformation": {
                      "name": "my_transformation",
                      "description": "my transformation",
                      "tags": [
                        "transformation"
                      ],
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "operations": [
                        {
                          "value": "concat([topic, '/', payload.t])",
                          "key": "topic"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      },
                      "payload_decoder": {
                        "type": "json"
                      },
                      "payload_encoder": {
                        "type": "json"
                      }
                    }
                  },
                  "summary": "Test an input against a configuration"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/message_transformation_http_api.dryrun_transformation"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/file_transfer/file": {
      "get": {
        "description": "根据文件 ID 下载指定文件",
        "tags": [
          "File Transfer"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/file_transfer.file_node"
          },
          {
            "$ref": "#/components/parameters/file_transfer.file_ref"
          }
        ],
        "summary": "Download a particular file",
        "responses": {
          "200": {
            "description": "Operation success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/stats": {
      "get": {
        "description": "获取 EMQX 状态",
        "tags": [
          "Metrics"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_mgmt_api_stats.aggregate"
          }
        ],
        "responses": {
          "200": {
            "description": "List stats ok",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_mgmt_api_stats.aggregated_data"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_stats.per_node_data"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/monitor_current": {
      "get": {
        "description": "当前监控（统计）数据，例如整个集群中的连接数和连接速率。",
        "tags": [
          "Metrics"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_dashboard_monitor_api.sampler_current"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/built_in_database/rules/users": {
      "get": {
        "description": "显示用户名规则列表。",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "in": "query",
            "name": "like_username",
            "description": "使用字串匹配模糊搜索用户名",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "password_based:built_in_database": {
                    "value": {
                      "data": [
                        {
                          "rules": [
                            {
                              "action": "publish",
                              "permission": "allow",
                              "topic": "test/topic/1"
                            },
                            {
                              "action": "subscribe",
                              "permission": "allow",
                              "topic": "test/topic/2"
                            },
                            {
                              "action": "all",
                              "permission": "deny",
                              "topic": "eq test/#"
                            },
                            {
                              "action": "publish",
                              "retain": "true",
                              "permission": "allow",
                              "topic": "test/topic/3",
                              "qos": [
                                "1"
                              ]
                            },
                            {
                              "action": "publish",
                              "retain": "all",
                              "permission": "allow",
                              "topic": "test/topic/4",
                              "qos": [
                                "0",
                                "1",
                                "2"
                              ]
                            }
                          ],
                          "username": "user1"
                        }
                      ],
                      "meta": {
                        "count": 1,
                        "limit": 100,
                        "page": 1
                      }
                    },
                    "summary": "Username"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.username_response_data"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "为指定的用户添加规则。",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Created"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad username or bad rule schema"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "ALREADY_EXISTS"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "password_based:built_in_database": {
                  "value": [
                    {
                      "rules": [
                        {
                          "action": "publish",
                          "permission": "allow",
                          "topic": "test/topic/1"
                        },
                        {
                          "action": "subscribe",
                          "permission": "allow",
                          "topic": "test/topic/2"
                        },
                        {
                          "action": "all",
                          "permission": "deny",
                          "topic": "eq test/#"
                        },
                        {
                          "action": "publish",
                          "retain": "true",
                          "permission": "allow",
                          "topic": "test/topic/3",
                          "qos": [
                            "1"
                          ]
                        },
                        {
                          "action": "publish",
                          "retain": "all",
                          "permission": "allow",
                          "topic": "test/topic/4",
                          "qos": [
                            "0",
                            "1",
                            "2"
                          ]
                        }
                      ],
                      "username": "user1"
                    }
                  ],
                  "summary": "Username"
                }
              },
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_username"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message_transformations/transformation/{name}/metrics": {
      "get": {
        "description": "获取一个特定转换的指标",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "转换名称",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_transformation"
          }
        ],
        "summary": "Get transformation metrics",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "metrics": {
                    "value": {
                      "metrics": {
                        "matched": 2,
                        "failed": 1,
                        "succeeded": 1,
                        "rate": 1.23,
                        "rate_last5m": 0.88,
                        "rate_max": 1.87
                      },
                      "node_metrics": [
                        {
                          "node": "emqx@127.0.0.1",
                          "metrics": {
                            "matched": 2,
                            "failed": 1,
                            "succeeded": 1,
                            "rate": 1.23,
                            "rate_last5m": 0.88,
                            "rate_max": 1.87
                          }
                        }
                      ]
                    },
                    "summary": "Metrics"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/message_transformation_http_api.get_metrics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Transformation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes/{node}/stats": {
      "get": {
        "description": "获取指定节点上的统计信息，例如主题数量，连接数量等。",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_mgmt_api_nodes.node_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Get node stats successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_stats.aggregated_data"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/exhooks/{name}": {
      "get": {
        "description": "查看 Exhook 服务器详细信息",
        "tags": [
          "ExHook"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Exhook 服务器的名称",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "default"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exhook.detail_server_info"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Server not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新 Exhook 服务器",
        "tags": [
          "ExHook"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Exhook 服务器的名称",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "default"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exhook.detail_server_info"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Server not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_RPC"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad RPC"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "default",
                "ssl": {
                  "cacertfile": "/etc/emqx/certs/cacert.pem",
                  "certfile": "/etc/emqx/certs/cert.pem",
                  "keyfile": "/etc/emqx/certs/key.pem",
                  "enable": false
                },
                "pool_size": 8,
                "enable": true,
                "url": "http://127.0.0.1:8081",
                "request_timeout": "5s",
                "auto_reconnect": "60s",
                "failed_action": "deny"
              },
              "schema": {
                "$ref": "#/components/schemas/exhook.server_config"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除 Exhook 服务器",
        "tags": [
          "ExHook"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Exhook 服务器的名称",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "default"
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Server not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_RPC"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad RPC"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/prometheus": {
      "get": {
        "description": "获取 Prometheus 配置信息",
        "tags": [
          "Monitor"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "collectors": {
                    "mnesia": "disabled",
                    "vm_msacc": "disabled",
                    "vm_memory": "disabled",
                    "vm_system_info": "disabled",
                    "vm_statistics": "disabled",
                    "vm_dist": "disabled"
                  },
                  "enable_basic_auth": false,
                  "push_gateway": {
                    "interval": "15s",
                    "headers": {
                      "Authorization": "Basic YWRtaW46Y2JraG55eWd5QDE="
                    },
                    "url": "http://127.0.0.1:9091",
                    "job_name": "${name}/instance/${name}~${host}"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/prometheus.recommend_setting"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新 Prometheus 配置",
        "tags": [
          "Monitor"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "collectors": {
                    "mnesia": "disabled",
                    "vm_msacc": "disabled",
                    "vm_memory": "disabled",
                    "vm_system_info": "disabled",
                    "vm_statistics": "disabled",
                    "vm_dist": "disabled"
                  },
                  "enable_basic_auth": false,
                  "push_gateway": {
                    "interval": "15s",
                    "headers": {
                      "Authorization": "Basic YWRtaW46Y2JraG55eWd5QDE="
                    },
                    "url": "http://127.0.0.1:9091",
                    "job_name": "${name}/instance/${name}~${host}"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/prometheus.recommend_setting"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "recommend_setting": {
                  "value": {
                    "collectors": {
                      "mnesia": "disabled",
                      "vm_msacc": "disabled",
                      "vm_memory": "disabled",
                      "vm_system_info": "disabled",
                      "vm_statistics": "disabled",
                      "vm_dist": "disabled"
                    },
                    "enable_basic_auth": false,
                    "push_gateway": {
                      "interval": "15s",
                      "headers": {
                        "Authorization": "Basic YWRtaW46Y2JraG55eWd5QDE="
                      },
                      "url": "http://127.0.0.1:9091",
                      "job_name": "${name}/instance/${name}~${host}"
                    }
                  },
                  "summary": "recommend_setting"
                },
                "legacy_deprecated_setting": {
                  "value": {
                    "enable": true,
                    "interval": "15s",
                    "headers": {
                      "Authorization": "Basic YWRtaW46Y2JraG55eWd5QDE="
                    },
                    "push_gateway_server": "http://127.0.0.1:9091",
                    "job_name": "${name}/instance/${name}~${host}",
                    "vm_msacc_collector": "disabled",
                    "vm_memory_collector": "disabled",
                    "vm_system_info_collector": "disabled",
                    "vm_statistics_collector": "disabled",
                    "mnesia_collector": "disabled",
                    "vm_dist_collector": "disabled"
                  },
                  "summary": "legacy_deprecated_setting"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/prometheus.legacy_deprecated_setting"
                  },
                  {
                    "$ref": "#/components/schemas/prometheus.recommend_setting"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/auto_subscribe": {
      "get": {
        "description": "获取自动订阅主题列表",
        "tags": [
          "Auto Subscribe"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "设备成功登录后，通过预定义的订阅表示法自动为设备完成订阅。支持使用占位符。",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/auto_subscribe.topic"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新自动订阅主题列表",
        "tags": [
          "Auto Subscribe"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "设备成功登录后，通过预定义的订阅表示法自动为设备完成订阅。支持使用占位符。",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/auto_subscribe.topic"
                  }
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "EXCEED_LIMIT"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "超出自动订阅主题列表长度限制"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/auto_subscribe.topic"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/load_rebalance/{node}/evacuation/start": {
      "post": {
        "description": "启动疏散任务",
        "tags": [
          "Load Rebalance"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "节点名称",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Start evacuation on a node",
        "responses": {
          "200": {
            "description": "响应为空",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "evacuation": {
                  "wait_takeover": "10s",
                  "sess_evict_rate": 100,
                  "conn_evict_rate": 100,
                  "wait_health_check": "10s",
                  "migrate_to": [
                    "othernode@127.0.0.1"
                  ],
                  "redirect_to": "othernode:1883"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/load_rebalance.rebalance_evacuation_start"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/listeners/{id}/authentication": {
      "get": {
        "description": "获取监听器的认证器配置。",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "监听器 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "summary": "Get the listener's authenticator",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "cmd": "HMGET ${username} password_hash salt",
                      "server": "127.0.0.1:6379",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Authentication or listener does not existed"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新指定监听器的认证器配置，或停用/启用该认证器。",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "监听器 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "summary": "Update config of authenticator for listener",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "cmd": "HMGET ${username} password_hash salt",
                      "server": "127.0.0.1:6379",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "value": {
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "algorithm": "hmac-based",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  },
                  "summary": "JWT authentication"
                },
                "password_based:built_in_database": {
                  "value": {
                    "mechanism": "password_based",
                    "backend": "built_in_database",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  },
                  "summary": "Built-in password_based authentication"
                },
                "password_based:http": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "5s",
                    "mechanism": "password_based",
                    "pool_size": 8,
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://127.0.0.1:18083",
                    "method": "post",
                    "backend": "http",
                    "request_timeout": "5s",
                    "enable_pipelining": 100
                  },
                  "summary": "password_based authentication through external HTTP API"
                },
                "password_based:mongodb": {
                  "value": {
                    "mechanism": "password_based",
                    "filter": {
                      "username": "${username}"
                    },
                    "server": "127.0.0.1:27017",
                    "database": "example",
                    "backend": "mongodb",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "collection": "users",
                    "is_superuser_field": "is_superuser",
                    "password_hash_field": "password_hash",
                    "salt_field": "salt"
                  },
                  "summary": "password_based authentication with MongoDB backend"
                },
                "password_based:redis": {
                  "value": {
                    "mechanism": "password_based",
                    "cmd": "HMGET ${username} password_hash salt",
                    "server": "127.0.0.1:6379",
                    "database": 0,
                    "backend": "redis",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single"
                  },
                  "summary": "password_based authentication with Redis backend"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.kerberos"
                  },
                  {
                    "$ref": "#/components/schemas/authn.gcp_device"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap_deprecated"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "移除指定监听器的认证器。",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "监听器 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "summary": "Delete the listener's authenticator",
        "responses": {
          "200": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "为指定监听器开启认证器以实现客户端认证的能力。<br/><br/>当某一监听器开启认证后，所有连接到该监听器的客户端会使用该认证器进行认证。",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "监听器 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "summary": "Create authenticator for listener",
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "cmd": "HMGET ${username} password_hash salt",
                      "server": "127.0.0.1:6379",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "value": {
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "algorithm": "hmac-based",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  },
                  "summary": "JWT authentication"
                },
                "password_based:built_in_database": {
                  "value": {
                    "mechanism": "password_based",
                    "backend": "built_in_database",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  },
                  "summary": "Built-in password_based authentication"
                },
                "password_based:http": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "5s",
                    "mechanism": "password_based",
                    "pool_size": 8,
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://127.0.0.1:18083",
                    "method": "post",
                    "backend": "http",
                    "request_timeout": "5s",
                    "enable_pipelining": 100
                  },
                  "summary": "password_based authentication through external HTTP API"
                },
                "password_based:mongodb": {
                  "value": {
                    "mechanism": "password_based",
                    "filter": {
                      "username": "${username}"
                    },
                    "server": "127.0.0.1:27017",
                    "database": "example",
                    "backend": "mongodb",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "collection": "users",
                    "is_superuser_field": "is_superuser",
                    "password_hash_field": "password_hash",
                    "salt_field": "salt"
                  },
                  "summary": "password_based authentication with MongoDB backend"
                },
                "password_based:redis": {
                  "value": {
                    "mechanism": "password_based",
                    "cmd": "HMGET ${username} password_hash salt",
                    "server": "127.0.0.1:6379",
                    "database": 0,
                    "backend": "redis",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single"
                  },
                  "summary": "password_based authentication with Redis backend"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.kerberos"
                  },
                  {
                    "$ref": "#/components/schemas/authn.gcp_device"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap_deprecated"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/listeners": {
      "get": {
        "description": "获取网关监听器列表。该接口会返回监听器所有的配置（包括该监听器上的认证器），同时也会返回该监听器在集群中运行的状态。",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "summary": "List all listeners",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "name": "udp-def",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "udp",
                    "bind": "22212",
                    "udp_options": {
                      "buffer": "10KB",
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "sndbuf": "10KB",
                      "active_n": 100
                    },
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ]
                  },
                  {
                    "name": "dtls-def",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "dtls",
                    "bind": "22213",
                    "udp_options": {
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "acceptors": 16,
                    "dtls_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "access_rules": [
                      "allow all"
                    ],
                    "max_conn_rate": 1000
                  },
                  {
                    "name": "ssl-def",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "ssl",
                    "bind": "22211",
                    "tcp_options": {
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "ssl_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2",
                        "tlsv1.1",
                        "tlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "acceptors": 16,
                    "access_rules": [
                      "allow all"
                    ],
                    "max_conn_rate": 1000
                  },
                  {
                    "name": "tcp-def",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "tcp",
                    "bind": "22210",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  {
                    "name": "dtls-psk",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "dtls",
                    "bind": "22214",
                    "max_connections": 1024000,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "acceptors": 16,
                    "dtls_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ],
                      "fail_if_no_peer_cert": false,
                      "user_lookup_fun": "emqx_tls_psk:lookup"
                    },
                    "max_conn_rate": 1000
                  },
                  {
                    "name": "tcp-with-authn",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "tcp",
                    "bind": "22215",
                    "authentication": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256"
                      },
                      "user_id_type": "username"
                    },
                    "max_connections": 1024000,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  {
                    "name": "ws-def",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "ws",
                    "bind": "33043",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "websocket": {
                      "path": "/ocpp",
                      "compress": false,
                      "fail_if_no_subprotocol": true,
                      "supported_subprotocols": "ocpp1.6",
                      "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                      "check_origin_enable": false,
                      "piggyback": "single"
                    },
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  {
                    "name": "ws-ssl-def",
                    "status": {
                      "running": true,
                      "max_connections": 1024000,
                      "current_connections": 10
                    },
                    "type": "wss",
                    "bind": "33053",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "ssl_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2",
                        "tlsv1.1",
                        "tlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "websocket": {
                      "path": "/ocpp",
                      "compress": false,
                      "fail_if_no_subprotocol": true,
                      "supported_subprotocols": "ocpp1.6",
                      "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                      "check_origin_enable": false,
                      "piggyback": "single"
                    },
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/emqx_gateway_api_listeners.dtls_listener"
                      },
                      {
                        "$ref": "#/components/schemas/emqx_gateway_api_listeners.udp_listener"
                      },
                      {
                        "$ref": "#/components/schemas/emqx_gateway_api_listeners.ssl_listener"
                      },
                      {
                        "$ref": "#/components/schemas/emqx_gateway_api_listeners.tcp_listener"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "为指定网关添加监听器。<br/><br/>注：对于某网关不支持的监听器类型，该接口会返回 `400: BAD_REQUEST`。",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "summary": "Add listener",
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "udp_listener": {
                    "value": {
                      "name": "udp-def",
                      "type": "udp",
                      "bind": "22212",
                      "udp_options": {
                        "buffer": "10KB",
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "sndbuf": "10KB",
                        "active_n": 100
                      }
                    },
                    "summary": "A simple UDP listener example"
                  },
                  "dtls_listener": {
                    "value": {
                      "name": "dtls-def",
                      "type": "dtls",
                      "bind": "22213",
                      "udp_options": {
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "dtls_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "access_rules": [
                        "allow all"
                      ],
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple DTLS listener example"
                  },
                  "ssl_listener": {
                    "value": {
                      "name": "ssl-def",
                      "type": "ssl",
                      "bind": "22211",
                      "tcp_options": {
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "ssl_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2",
                          "tlsv1.1",
                          "tlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "acceptors": 16,
                      "access_rules": [
                        "allow all"
                      ],
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple SSL listener example"
                  },
                  "tcp_listener": {
                    "value": {
                      "name": "tcp-def",
                      "type": "tcp",
                      "bind": "22210",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple TCP listener example"
                  },
                  "dtls_listener_with_psk_ciphers": {
                    "value": {
                      "name": "dtls-psk",
                      "type": "dtls",
                      "bind": "22214",
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "dtls_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ],
                        "fail_if_no_peer_cert": false,
                        "user_lookup_fun": "emqx_tls_psk:lookup"
                      },
                      "max_conn_rate": 1000
                    },
                    "summary": "A DTLS listener with PSK example"
                  },
                  "lisetner_with_authn": {
                    "value": {
                      "name": "tcp-with-authn",
                      "type": "tcp",
                      "bind": "22215",
                      "authentication": {
                        "mechanism": "password_based",
                        "backend": "built_in_database",
                        "password_hash_algorithm": {
                          "name": "sha256"
                        },
                        "user_id_type": "username"
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A TCP listener with authentication example"
                  },
                  "ws_listener": {
                    "value": {
                      "name": "ws-def",
                      "type": "ws",
                      "bind": "33043",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "websocket": {
                        "path": "/ocpp",
                        "compress": false,
                        "fail_if_no_subprotocol": true,
                        "supported_subprotocols": "ocpp1.6",
                        "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                        "check_origin_enable": false,
                        "piggyback": "single"
                      },
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple WebSocket listener example"
                  },
                  "wss_listener": {
                    "value": {
                      "name": "ws-ssl-def",
                      "type": "wss",
                      "bind": "33053",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "ssl_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2",
                          "tlsv1.1",
                          "tlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "websocket": {
                        "path": "/ocpp",
                        "compress": false,
                        "fail_if_no_subprotocol": true,
                        "supported_subprotocols": "ocpp1.6",
                        "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                        "check_origin_enable": false,
                        "piggyback": "single"
                      },
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple WebSocket/TLS listener example"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.wss_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ws_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "udp_listener": {
                  "value": {
                    "name": "udp-def",
                    "type": "udp",
                    "bind": "22212",
                    "udp_options": {
                      "buffer": "10KB",
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "sndbuf": "10KB",
                      "active_n": 100
                    }
                  },
                  "summary": "A simple UDP listener example"
                },
                "dtls_listener": {
                  "value": {
                    "name": "dtls-def",
                    "type": "dtls",
                    "bind": "22213",
                    "udp_options": {
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "dtls_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "access_rules": [
                      "allow all"
                    ],
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple DTLS listener example"
                },
                "ssl_listener": {
                  "value": {
                    "name": "ssl-def",
                    "type": "ssl",
                    "bind": "22211",
                    "tcp_options": {
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "ssl_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2",
                        "tlsv1.1",
                        "tlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "acceptors": 16,
                    "access_rules": [
                      "allow all"
                    ],
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple SSL listener example"
                },
                "tcp_listener": {
                  "value": {
                    "name": "tcp-def",
                    "type": "tcp",
                    "bind": "22210",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple TCP listener example"
                },
                "dtls_listener_with_psk_ciphers": {
                  "value": {
                    "name": "dtls-psk",
                    "type": "dtls",
                    "bind": "22214",
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "dtls_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ],
                      "fail_if_no_peer_cert": false,
                      "user_lookup_fun": "emqx_tls_psk:lookup"
                    },
                    "max_conn_rate": 1000
                  },
                  "summary": "A DTLS listener with PSK example"
                },
                "lisetner_with_authn": {
                  "value": {
                    "name": "tcp-with-authn",
                    "type": "tcp",
                    "bind": "22215",
                    "authentication": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256"
                      },
                      "user_id_type": "username"
                    },
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A TCP listener with authentication example"
                },
                "ws_listener": {
                  "value": {
                    "name": "ws-def",
                    "type": "ws",
                    "bind": "33043",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "websocket": {
                      "path": "/ocpp",
                      "compress": false,
                      "fail_if_no_subprotocol": true,
                      "supported_subprotocols": "ocpp1.6",
                      "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                      "check_origin_enable": false,
                      "piggyback": "single"
                    },
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple WebSocket listener example"
                },
                "wss_listener": {
                  "value": {
                    "name": "ws-ssl-def",
                    "type": "wss",
                    "bind": "33053",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "ssl_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2",
                        "tlsv1.1",
                        "tlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "websocket": {
                      "path": "/ocpp",
                      "compress": false,
                      "fail_if_no_subprotocol": true,
                      "supported_subprotocols": "ocpp1.6",
                      "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                      "check_origin_enable": false,
                      "piggyback": "single"
                    },
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple WebSocket/TLS listener example"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.wss_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.ws_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/plugins/{name}/config": {
      "get": {
        "description": "Get plugin config. Config schema is defined by user's schema.avsc file.<br/>",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          }
        ],
        "summary": "Get plugin config",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Plugin Config Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Plugin Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update plugin config. Config schema defined by user's schema.avsc file.<br/>",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          }
        ],
        "summary": "Update plugin config",
        "responses": {
          "204": {
            "description": "Config updated successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_CONFIG",
                        "UNEXPECTED_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update plugin config failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Plugin Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/sys_topics": {
      "get": {
        "description": "Get the sub-configurations under *sys_topics*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "summary": "Get the sub-configurations under *sys_topics*",
        "responses": {
          "200": {
            "description": "系统主题配置。",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.sys_topics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "config not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *sys_topics*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "summary": "Update the sub-configurations under *sys_topics*",
        "responses": {
          "200": {
            "description": "系统主题配置。",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.sys_topics"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx.sys_topics"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/kickout/bulk": {
      "post": {
        "description": "----",
        "tags": [
          "Clients"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Kick out clients successfully"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": [
                "emqx_clientid_985bb09d",
                "emqx_clientid_211cc01c"
              ],
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/connectors_probe": {
      "post": {
        "description": "测试创建一个新的连接器。",
        "tags": [
          "Connectors"
        ],
        "parameters": [],
        "summary": "Test creating connector",
        "responses": {
          "204": {
            "description": "Test connector OK"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TEST_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "connector test failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "influxdb_api_v2": {
                  "value": {
                    "name": "influxdb_connector",
                    "type": "influxdb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "org": "examlpe_org",
                      "token": "example_token",
                      "bucket": "example_bucket",
                      "influxdb_type": "influxdb_api_v2"
                    }
                  },
                  "summary": "InfluxDB HTTP API V2 Connector"
                },
                "http": {
                  "value": {
                    "name": "my_http_connector",
                    "type": "http",
                    "connect_timeout": "15s",
                    "pool_size": 1,
                    "enable": true,
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://localhost:8080/api/v1",
                    "pool_type": "hash",
                    "enable_pipelining": 100
                  },
                  "summary": "HTTP Connector"
                },
                "confluent_producer": {
                  "value": {
                    "name": "my_confluent_producer_connector",
                    "type": "confluent_producer",
                    "ssl": {
                      "verify": "verify_none",
                      "enable": true,
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ],
                      "server_name_indication": "auto"
                    },
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "xyz.sa-east1.gcp.confluent.cloud:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Confluent Connector"
                },
                "iotdb": {
                  "value": {
                    "name": "iotdb_connector",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example iotdb connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "base_url": "http://iotdb.local:18080/",
                    "pool_type": "random",
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.3.x"
                  },
                  "summary": "Apache IoTDB Connector"
                },
                "couchbase": {
                  "value": {
                    "name": "my_connector",
                    "type": "couchbase",
                    "ssl": {
                      "enable": true
                    },
                    "description": "My connector",
                    "server": "couchbase:8093",
                    "enable": true,
                    "password": "******",
                    "username": "admin",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    }
                  },
                  "summary": "Couchbase Connector"
                },
                "datalayers": {
                  "value": {
                    "name": "datalayers_connector",
                    "type": "datalayers",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example datalayers connector",
                    "server": "127.0.0.1:8361",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database"
                    }
                  },
                  "summary": "Datalayers Connector"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "name": "my_azure_event_hub_producer_connector",
                    "type": "azure_event_hub_producer",
                    "ssl": {
                      "verify": "verify_none",
                      "enable": true,
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ],
                      "server_name_indication": "auto"
                    },
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Azure Event Hub Connector"
                },
                "kafka_producer": {
                  "value": {
                    "name": "my_kafka_producer_connector",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Kafka Producer Connector"
                },
                "kinesis": {
                  "value": {
                    "name": "kinesis_connector",
                    "type": "kinesis",
                    "description": "My example kinesis connector",
                    "aws_access_key_id": "your_access_key",
                    "aws_secret_access_key": "aws_secret_key",
                    "endpoint": "http://localhost:4566",
                    "max_retries": 2,
                    "pool_size": 8
                  },
                  "summary": "Kinesis Connector"
                },
                "syskeeper_proxy": {
                  "value": {
                    "name": "syskeeper_proxy",
                    "type": "syskeeper_proxy",
                    "listen": "127.0.0.1:9092",
                    "enable": true,
                    "acceptors": 16,
                    "handshake_timeout": "16s"
                  },
                  "summary": "Syskeeper Proxy Connector"
                },
                "pgsql": {
                  "value": {
                    "name": "my_pgsql_connector",
                    "type": "pgsql",
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "PostgreSQL Connector"
                },
                "mysql": {
                  "value": {
                    "name": "mysql_connector",
                    "type": "mysql",
                    "description": "My example mysql connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  "summary": "MySQL Connector"
                },
                "rabbitmq": {
                  "value": {
                    "timeout": "5s",
                    "name": "rabbitmq_connector",
                    "port": 5672,
                    "type": "rabbitmq",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example rabbitmq connector",
                    "pool_size": 8,
                    "server": "127.0.0.1",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "heartbeat": "30s",
                    "virtual_host": "/"
                  },
                  "summary": "Rabbitmq Connector"
                },
                "dynamo": {
                  "value": {
                    "name": "dynamo_connector",
                    "type": "dynamo",
                    "description": "My example dynamo connector",
                    "aws_access_key_id": "root",
                    "aws_secret_access_key": "******",
                    "enable": true,
                    "pool_size": 8,
                    "region": "us-west-2",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "url": "http://127.0.0.1:8000"
                  },
                  "summary": "DynamoDB Connector"
                },
                "tdengine": {
                  "value": {
                    "name": "tdengine_connector",
                    "type": "tdengine",
                    "description": "My example tdengine connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root"
                  },
                  "summary": "TDengine Connector"
                },
                "mongodb_single": {
                  "value": {
                    "name": "mongodb_single_connector",
                    "type": "mongodb_single",
                    "description": "My example mongodb_single connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Standalone Connector"
                },
                "greptimedb": {
                  "value": {
                    "name": "demo",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example greptimedb connector",
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "password": "******",
                    "username": "example_username",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db"
                  },
                  "summary": "GreptimeDB Connector"
                },
                "opents": {
                  "value": {
                    "name": "opents_connector",
                    "type": "opents",
                    "description": "My example opents connector",
                    "pool_size": 8,
                    "server": "http://localhost:4242/",
                    "enable": true
                  },
                  "summary": "OpenTSDB Connector"
                },
                "abs": {
                  "value": {
                    "name": "my_connector",
                    "type": "azure_blob_storage",
                    "description": "My connector",
                    "enable": true,
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    },
                    "account_key": "******",
                    "account_name": "my_account_name"
                  },
                  "summary": "Azure Blob Storage Connector"
                },
                "mongodb_sharded": {
                  "value": {
                    "name": "mongodb_sharded_connector",
                    "type": "mongodb_sharded",
                    "description": "My example mongodb_sharded connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Sharded Connector"
                },
                "mongodb_rs": {
                  "value": {
                    "name": "mongodb_rs_connector",
                    "type": "mongodb_rs",
                    "description": "My example mongodb_rs connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Replica Set Connector"
                },
                "redis_single_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "redis",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis single connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "server": "127.0.0.1:6379",
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "redis_type": "single"
                    }
                  },
                  "summary": "Redis Single Producer Connector"
                },
                "oracle": {
                  "value": {
                    "name": "oracle_connector",
                    "type": "oracle",
                    "description": "My example oracle connector",
                    "password": "oracle",
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "server": "127.0.0.1:1521",
                    "service_name": "XE",
                    "sid": "XE",
                    "username": "system"
                  },
                  "summary": "Oracle Connector"
                },
                "hstreamdb": {
                  "value": {
                    "name": "hstreamdb_connector",
                    "type": "hstreamdb",
                    "description": "My example hstreamdb connector",
                    "grpc_timeout": "30s",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "ssl": {
                      "enable": false,
                      "verify": "verify_peer"
                    },
                    "url": "http://127.0.0.1:6570"
                  },
                  "summary": "HStreamDB Connector"
                },
                "influxdb_api_v1": {
                  "value": {
                    "name": "influxdb_connector",
                    "type": "influxdb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database",
                      "influxdb_type": "influxdb_api_v1"
                    }
                  },
                  "summary": "InfluxDB HTTP API V1 Connector"
                },
                "s3_aws": {
                  "value": {
                    "name": "my_s3_connector",
                    "port": 443,
                    "type": "s3",
                    "host": "s3.eu-east-1.amazonaws.com",
                    "description": "My S3 connector",
                    "enable": true,
                    "transport_options": {
                      "ssl": {
                        "verify": "verify_peer",
                        "enable": true
                      },
                      "connect_timeout": "1s",
                      "pool_size": 4,
                      "max_retries": 1,
                      "request_timeout": "60s",
                      "enable_pipelining": 1
                    },
                    "secret_access_key": "SECRET",
                    "access_key_id": "ACCESS"
                  },
                  "summary": "S3 Connector"
                },
                "cassandra": {
                  "value": {
                    "name": "cassandra_connector",
                    "type": "cassandra",
                    "description": "My example cassandra connector",
                    "pool_size": 8,
                    "password": "******",
                    "username": "root",
                    "servers": "127.0.0.1:9042",
                    "keyspace": "mqtt"
                  },
                  "summary": "Cassandra Connector"
                },
                "gcp_pubsub_consumer": {
                  "value": {
                    "name": "my_connector",
                    "type": "gcp_pubsub_producer",
                    "description": "my connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Consumer Connector"
                },
                "clickhouse": {
                  "value": {
                    "name": "clickhouse_connector",
                    "type": "clickhouse",
                    "description": "My example clickhouse connector",
                    "pool_size": 8,
                    "password": "******",
                    "url": "http://localhost:8123",
                    "username": "default",
                    "database": "mqtt"
                  },
                  "summary": "ClickHouse Connector"
                },
                "sqlserver": {
                  "value": {
                    "driver": "ms-sql",
                    "name": "sqlserver_connector",
                    "type": "sqlserver",
                    "description": "My example sqlserver connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  "summary": "Microsoft SQL Server Connector"
                },
                "redis_cluster_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "redis",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis cluster connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "redis_type": "cluster"
                    }
                  },
                  "summary": "Redis Cluster Producer Connector"
                },
                "matrix": {
                  "value": {
                    "name": "my_matrix_connector",
                    "type": "matrix",
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "Matrix Connector"
                },
                "kafka_consumer": {
                  "value": {
                    "name": "my_connector",
                    "type": "kafka_consumer",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "bootstrap_hosts": "kafka.emqx.net:9092"
                  },
                  "summary": "Kafka Consumer Connector"
                },
                "rocketmq": {
                  "value": {
                    "name": "rocketmq_connector",
                    "type": "rocketmq",
                    "description": "My example rocketmq connector",
                    "enable": true,
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_after_created": true,
                      "start_timeout": "5s"
                    },
                    "servers": "127.0.0.1:9876"
                  },
                  "summary": "RocketMQ Connector"
                },
                "pulsar": {
                  "value": {
                    "name": "pulsar_connector",
                    "type": "pulsar",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": "none",
                    "description": "My example pulsar connector",
                    "connect_timeout": "5s",
                    "enable": true,
                    "servers": "pulsar://127.0.0.1:6650"
                  },
                  "summary": "Pulsar Connector"
                },
                "syskeeper_forwarder": {
                  "value": {
                    "name": "syskeeper_forwarder",
                    "type": "syskeeper_forwarder",
                    "pool_size": 16,
                    "server": "127.0.0.1:9092",
                    "enable": true,
                    "ack_timeout": "10s",
                    "ack_mode": "no_ack"
                  },
                  "summary": "Syskeeper Forwarder Connector"
                },
                "elasticsearch": {
                  "value": {
                    "name": "elasticsearch_connector",
                    "type": "elasticsearch",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example elasticsearch connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "server": "127.0.0.1:9200",
                    "enable": true,
                    "pool_type": "random",
                    "enable_pipelining": 100
                  },
                  "summary": "Elastic Search Connector"
                },
                "gcp_pubsub_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "gcp_pubsub_producer",
                    "connect_timeout": "10s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "resource_opts": {
                      "request_ttl": "60s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Producer Connector"
                },
                "timescale": {
                  "value": {
                    "name": "my_timescale_connector",
                    "type": "timescale",
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "Timescale Connector"
                },
                "redis_sentinel_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "redis",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis sentinel connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "sentinel": "myredismaster",
                      "redis_type": "sentinel"
                    }
                  },
                  "summary": "Redis Sentinel Producer Connector"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_timescale.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_producer.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/elasticsearch.post"
                  },
                  {
                    "$ref": "#/components/schemas/connector_azure_blob_storage.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/syskeeper_forwarder.post"
                  },
                  {
                    "$ref": "#/components/schemas/pulsar.post"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/kafka_consumer.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_consumer.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/opents_connector.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_s3.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/tdengine_connector.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/redis.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/rabbitmq.post"
                  },
                  {
                    "$ref": "#/components/schemas/connector_mqtt.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_postgres.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_syskeeper_proxy.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_datalayers.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_couchbase.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/iotdb.post"
                  },
                  {
                    "$ref": "#/components/schemas/confluent.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.post_connector"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_validations/reorder": {
      "post": {
        "description": "重新排序所有验证规则",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [],
        "summary": "Reorder all validations",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "not_found": {
                      "type": "array",
                      "description": "Validations not found",
                      "items": {
                        "type": "string"
                      }
                    },
                    "not_reordered": {
                      "type": "array",
                      "description": "Validations not referenced in input",
                      "items": {
                        "type": "string"
                      }
                    },
                    "duplicated": {
                      "type": "array",
                      "description": "Duplicated validations in input",
                      "items": {
                        "type": "string"
                      }
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "reorder": {
                  "value": {
                    "order": [
                      "bar",
                      "foo",
                      "baz"
                    ]
                  },
                  "summary": "Update"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/schema_validation_http_api.reorder"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes/{node}/sources/{id}/{operation}": {
      "post": {
        "description": "在某个节点上启动数据桥接。",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "节点名称，例如： 'emqx@127.0.0.1'。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "节点可用操作：'启动'。",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start"
              ]
            },
            "example": "start"
          }
        ],
        "summary": "Manually start a bridge on a given node",
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service or bridge not enabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge or node not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/built_in_database/rules/clients": {
      "get": {
        "description": "显示客户端规则列表。",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "in": "query",
            "name": "like_clientid",
            "description": "使用字串匹配模糊搜索客户端 ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "password_based:built_in_database": {
                    "value": {
                      "data": [
                        {
                          "rules": [
                            {
                              "action": "publish",
                              "permission": "allow",
                              "topic": "test/topic/1"
                            },
                            {
                              "action": "subscribe",
                              "permission": "allow",
                              "topic": "test/topic/2"
                            },
                            {
                              "action": "all",
                              "permission": "deny",
                              "topic": "eq test/#"
                            },
                            {
                              "action": "publish",
                              "retain": "true",
                              "permission": "allow",
                              "topic": "test/topic/3",
                              "qos": [
                                "1"
                              ]
                            },
                            {
                              "action": "publish",
                              "retain": "all",
                              "permission": "allow",
                              "topic": "test/topic/4",
                              "qos": [
                                "0",
                                "1",
                                "2"
                              ]
                            }
                          ],
                          "clientid": "client1"
                        }
                      ],
                      "meta": {
                        "count": 1,
                        "limit": 100,
                        "page": 1
                      }
                    },
                    "summary": "ClientID"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.clientid_response_data"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "为指定客户端添加规则。",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Created"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad clientid or bad rule schema"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "password_based:built_in_database": {
                  "value": [
                    {
                      "rules": [
                        {
                          "action": "publish",
                          "permission": "allow",
                          "topic": "test/topic/1"
                        },
                        {
                          "action": "subscribe",
                          "permission": "allow",
                          "topic": "test/topic/2"
                        },
                        {
                          "action": "all",
                          "permission": "deny",
                          "topic": "eq test/#"
                        },
                        {
                          "action": "publish",
                          "retain": "true",
                          "permission": "allow",
                          "topic": "test/topic/3",
                          "qos": [
                            "1"
                          ]
                        },
                        {
                          "action": "publish",
                          "retain": "all",
                          "permission": "allow",
                          "topic": "test/topic/4",
                          "qos": [
                            "0",
                            "1",
                            "2"
                          ]
                        }
                      ],
                      "clientid": "client1"
                    }
                  ],
                  "summary": "ClientID"
                }
              },
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_clientid"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_registry": {
      "get": {
        "description": "列出所有已注册的 schema。",
        "tags": [
          "Schema Registry"
        ],
        "parameters": [],
        "summary": "List registered schemas",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "sample": {
                    "value": [
                      {
                        "name": "my_avro_schema",
                        "type": "avro",
                        "description": "My Avro Schema",
                        "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                      }
                    ]
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/schema_registry.get_json"
                      },
                      {
                        "$ref": "#/components/schemas/schema_registry.get_protobuf"
                      },
                      {
                        "$ref": "#/components/schemas/schema_registry.get_avro"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "注册一个新的 schema。",
        "tags": [
          "Schema Registry"
        ],
        "parameters": [],
        "summary": "Register a new schema",
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "avro_schema": {
                    "value": {
                      "name": "my_avro_schema",
                      "type": "avro",
                      "description": "My Avro Schema",
                      "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                    },
                    "summary": "Avro"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/schema_registry.get_json"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.get_protobuf"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.get_avro"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Schema already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "avro_schema": {
                  "value": {
                    "name": "my_avro_schema",
                    "type": "avro",
                    "description": "My Avro Schema",
                    "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                  },
                  "summary": "Avro"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/schema_registry.get_json"
                  },
                  {
                    "$ref": "#/components/schemas/schema_registry.get_protobuf"
                  },
                  {
                    "$ref": "#/components/schemas/schema_registry.get_avro"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sso": {
      "get": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dashboard_sso.backend_status"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/delayed/messages/{node}/{msgid}": {
      "get": {
        "description": "查看延迟消息",
        "tags": [
          "MQTT"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "消息来源节点",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "msgid",
            "description": "延迟消息 ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_delayed_api.message_without_payload"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "MESSAGE_ID_SCHEMA_ERROR",
                        "INVALID_NODE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "消息 ID 格式错误"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "MESSAGE_ID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "未找到对应消息"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除延迟消息",
        "tags": [
          "MQTT"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "消息来源节点",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "msgid",
            "description": "延迟消息 ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete delayed message success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "MESSAGE_ID_SCHEMA_ERROR",
                        "INVALID_NODE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "消息 ID 格式错误"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "MESSAGE_ID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "未找到对应消息"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/monitor_current/nodes/{node}": {
      "get": {
        "description": "节点监控（统计）数据，例如指定节点上的连接数和连接速率。",
        "tags": [
          "Metrics"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "EMQX node name.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_dashboard_monitor_api.sampler_current_node"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication/{id}/users": {
      "get": {
        "description": "获取全局认证链上指定认证器中的用户列表。",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "in": "query",
            "name": "like_user_id",
            "description": "使用用户 ID （username 或 clientid）模糊查询。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "is_superuser",
            "description": "是否是超级用户。",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "user_id": "user1"
                    },
                    {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  ],
                  "meta": {
                    "count": 300,
                    "limit": 20,
                    "page": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_users"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "向全局认证链上的指定认证器添加用户数据。",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "value": {
                    "password": "******",
                    "user_id": "user1"
                  },
                  "summary": "Regular user"
                },
                "super_user": {
                  "value": {
                    "password": "******",
                    "is_superuser": true,
                    "user_id": "user2"
                  },
                  "summary": "Superuser"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_create"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sessions_count": {
      "get": {
        "description": "获取集群中的会话总数。<br/>默认情况下，仅包括那些未过期的会话。<br/>如果 broker.session_history_retain 配置设置为大于 0 秒的持续时间，<br/>这个计数也将包括在指定保留时间内过期的会话。<br/>通过指定 since 参数，它可以返回在指定时间内过期的会话数。",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "since",
            "description": "Include sessions expired after this time (UNIX Epoch in seconds precision)",
            "required": false,
            "schema": {
              "default": 0,
              "type": "integer",
              "minimum": 0
            },
            "example": 1705391625
          }
        ],
        "responses": {
          "200": {
            "description": "Number of sessions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node {name} cannot handle this request."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sso/oidc/callback": {
      "get": {
        "description": "The callback path for the OIDC authorization server..",
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "Dashboard 认证 Token"
                    },
                    "version": {
                      "type": "string",
                      "description": "EMQX 版本",
                      "example": "5.0.0"
                    },
                    "license": {
                      "properties": {
                        "edition": {
                          "type": "string",
                          "enum": [
                            "opensource",
                            "enterprise"
                          ],
                          "description": "EMQX License 类型。可为 opensource 或 enterprise",
                          "example": "opensource"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_USERNAME_OR_PWD"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "登录失败。用户名或密码错误"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BACKEND_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Backend not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/sources": {
      "get": {
        "description": "列出所有创建的数据桥接。",
        "tags": [
          "Sources"
        ],
        "parameters": [],
        "summary": "List sources",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "status": "connected",
                    "description": "my source",
                    "enable": true,
                    "parameters": {
                      "topic": "my-topic",
                      "pull_max_messages": 100
                    },
                    "connector": "my_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "status": "connected",
                    "parameters": {
                      "topic": "mytopic"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "mqtt_source",
                    "status": "connected",
                    "type": "mqtt",
                    "description": "My example mqtt source",
                    "enable": true,
                    "parameters": {
                      "topic": "remote/topic",
                      "qos": 1
                    },
                    "connector": "mqtt_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "rabbitmq_source",
                    "status": "connected",
                    "type": "rabbitmq",
                    "description": "My example rabbitmq source",
                    "enable": true,
                    "parameters": {
                      "queue": "test_queue",
                      "no_ack": true
                    },
                    "connector": "rabbitmq_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/bridge_rabbitmq.get_source"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mqtt_publisher.get_source"
                      },
                      {
                        "$ref": "#/components/schemas/kafka_consumer.get_source"
                      },
                      {
                        "$ref": "#/components/schemas/gcp_pubsub_consumer.get_source"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "通过类型和名称创建一个新的数据桥接。",
        "tags": [
          "Sources"
        ],
        "parameters": [],
        "summary": "Create source",
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "gcp_pubsub_consumer": {
                    "value": {
                      "status": "connected",
                      "description": "my source",
                      "enable": true,
                      "parameters": {
                        "topic": "my-topic",
                        "pull_max_messages": 100
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "GCP PubSub Consumer Source"
                  },
                  "kafka_consumer": {
                    "value": {
                      "status": "connected",
                      "parameters": {
                        "topic": "mytopic"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Kafka Consumer Source"
                  },
                  "mqtt": {
                    "value": {
                      "name": "mqtt_source",
                      "status": "connected",
                      "type": "mqtt",
                      "description": "My example mqtt source",
                      "enable": true,
                      "parameters": {
                        "topic": "remote/topic",
                        "qos": 1
                      },
                      "connector": "mqtt_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MQTT Subscriber Source"
                  },
                  "rabbitmq": {
                    "value": {
                      "name": "rabbitmq_source",
                      "status": "connected",
                      "type": "rabbitmq",
                      "description": "My example rabbitmq source",
                      "enable": true,
                      "parameters": {
                        "queue": "test_queue",
                        "no_ack": true
                      },
                      "connector": "rabbitmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "RabbitMQ Subscriber Source"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt_publisher.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/kafka_consumer.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_consumer.get_source"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Source already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "gcp_pubsub_consumer": {
                  "value": {
                    "name": "my_action",
                    "type": "gcp_pubsub_consumer",
                    "description": "my source",
                    "enable": true,
                    "parameters": {
                      "topic": "my-topic",
                      "pull_max_messages": 100
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "GCP PubSub Consumer Source"
                },
                "kafka_consumer": {
                  "value": {
                    "name": "my_source",
                    "type": "kafka_consumer",
                    "parameters": {
                      "topic": "mytopic"
                    },
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Kafka Consumer Source"
                },
                "mqtt": {
                  "value": {
                    "name": "mqtt_source",
                    "type": "mqtt",
                    "description": "My example mqtt source",
                    "enable": true,
                    "parameters": {
                      "topic": "remote/topic",
                      "qos": 1
                    },
                    "connector": "mqtt_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MQTT Subscriber Source"
                },
                "rabbitmq": {
                  "value": {
                    "name": "rabbitmq_source",
                    "type": "rabbitmq",
                    "description": "My example rabbitmq source",
                    "enable": true,
                    "parameters": {
                      "queue": "test_queue",
                      "no_ack": true
                    },
                    "connector": "rabbitmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "RabbitMQ Subscriber Source"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.post_source"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt_publisher.post_source"
                  },
                  {
                    "$ref": "#/components/schemas/kafka_consumer.post_source"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_consumer.post_source"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/actions/{id}/enable/{enable}": {
      "put": {
        "description": "启用或禁用集群内所有节点上的数据桥接。",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "path",
            "name": "enable",
            "description": "是否启用该数据桥接。",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "summary": "Enable or disable bridge",
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/prometheus/data_integration": {
      "get": {
        "description": "获取数据集成的 Prometheus 指标",
        "tags": [
          "Monitor"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_prometheus_api.mode"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Prometheus Data.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/data/files/{filename}": {
      "get": {
        "description": "Download a data backup file",
        "tags": [
          "Data Backup"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "description": "Data backup file name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "node",
            "description": "Node name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "binary"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Backup file not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a data backup file",
        "tags": [
          "Data Backup"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "description": "Data backup file name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "node",
            "description": "Node name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Backup file not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster": {
      "get": {
        "description": "获取集群信息",
        "tags": [
          "Cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Cluster name"
                    },
                    "nodes": {
                      "type": "array",
                      "description": "Node name",
                      "items": {
                        "type": "string"
                      }
                    },
                    "self": {
                      "type": "string",
                      "description": "Self node name"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/plugins/{name}/{action}": {
      "put": {
        "description": "start/stop a installed plugin.<br/>- **start**: start the plugin.<br/>- **stop**: stop the plugin.<br/>",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          },
          {
            "in": "path",
            "name": "action",
            "description": "Action",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start",
                "stop"
              ]
            }
          }
        ],
        "summary": "Trigger action on an installed plugin",
        "responses": {
          "204": {
            "description": "Trigger action successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Plugin Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sources/{id}": {
      "get": {
        "description": "通过 id 获取一个数据桥接",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "summary": "Get source",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "gcp_pubsub_consumer": {
                    "value": {
                      "status": "connected",
                      "description": "my source",
                      "enable": true,
                      "parameters": {
                        "topic": "my-topic",
                        "pull_max_messages": 100
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "GCP PubSub Consumer Source"
                  },
                  "kafka_consumer": {
                    "value": {
                      "status": "connected",
                      "parameters": {
                        "topic": "mytopic"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Kafka Consumer Source"
                  },
                  "mqtt": {
                    "value": {
                      "name": "mqtt_source",
                      "status": "connected",
                      "type": "mqtt",
                      "description": "My example mqtt source",
                      "enable": true,
                      "parameters": {
                        "topic": "remote/topic",
                        "qos": 1
                      },
                      "connector": "mqtt_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MQTT Subscriber Source"
                  },
                  "rabbitmq": {
                    "value": {
                      "name": "rabbitmq_source",
                      "status": "connected",
                      "type": "rabbitmq",
                      "description": "My example rabbitmq source",
                      "enable": true,
                      "parameters": {
                        "queue": "test_queue",
                        "no_ack": true
                      },
                      "connector": "rabbitmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "RabbitMQ Subscriber Source"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt_publisher.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/kafka_consumer.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_consumer.get_source"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Source not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "通过 id 更新数据桥接",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "summary": "Update source",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "gcp_pubsub_consumer": {
                    "value": {
                      "status": "connected",
                      "description": "my source",
                      "enable": true,
                      "parameters": {
                        "topic": "my-topic",
                        "pull_max_messages": 100
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "GCP PubSub Consumer Source"
                  },
                  "kafka_consumer": {
                    "value": {
                      "status": "connected",
                      "parameters": {
                        "topic": "mytopic"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Kafka Consumer Source"
                  },
                  "mqtt": {
                    "value": {
                      "name": "mqtt_source",
                      "status": "connected",
                      "type": "mqtt",
                      "description": "My example mqtt source",
                      "enable": true,
                      "parameters": {
                        "topic": "remote/topic",
                        "qos": 1
                      },
                      "connector": "mqtt_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MQTT Subscriber Source"
                  },
                  "rabbitmq": {
                    "value": {
                      "name": "rabbitmq_source",
                      "status": "connected",
                      "type": "rabbitmq",
                      "description": "My example rabbitmq source",
                      "enable": true,
                      "parameters": {
                        "queue": "test_queue",
                        "no_ack": true
                      },
                      "connector": "rabbitmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "RabbitMQ Subscriber Source"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt_publisher.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/kafka_consumer.get_source"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_consumer.get_source"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update source failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Source not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "gcp_pubsub_consumer": {
                  "value": {
                    "description": "my source",
                    "enable": true,
                    "parameters": {
                      "topic": "my-topic",
                      "pull_max_messages": 100
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "GCP PubSub Consumer Source"
                },
                "kafka_consumer": {
                  "value": {
                    "parameters": {
                      "topic": "mytopic"
                    },
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Kafka Consumer Source"
                },
                "mqtt": {
                  "value": {
                    "description": "My example mqtt source",
                    "enable": true,
                    "parameters": {
                      "topic": "remote/topic",
                      "qos": 1
                    },
                    "connector": "mqtt_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MQTT Subscriber Source"
                },
                "rabbitmq": {
                  "value": {
                    "description": "My example rabbitmq source",
                    "enable": true,
                    "parameters": {
                      "queue": "test_queue",
                      "no_ack": true
                    },
                    "connector": "rabbitmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "RabbitMQ Subscriber Source"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.put_source"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt_publisher.put_source"
                  },
                  {
                    "$ref": "#/components/schemas/kafka_consumer.put_source"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_consumer.put_source"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "通过 id 删除数据桥接",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "query",
            "name": "also_delete_dep_actions",
            "description": "是否级联删除依赖的动作。",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "summary": "Delete source",
        "responses": {
          "204": {
            "description": "Source deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "Dependent Rule IDs",
                      "items": {
                        "type": "string"
                      }
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cannot delete bridge while active rules are defined for this source"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Source not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/data/export": {
      "post": {
        "description": "Export a data backup file",
        "tags": [
          "Data Backup"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "node": "emqx@127.0.0.1",
                  "size": 22740,
                  "filename": "emqx-export-2023-11-23-19-13-19.043.tar.gz",
                  "created_at": "2023-11-23T19:13:19+02:00",
                  "created_at_sec": 1700759599
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_data_backup.backup_file_info"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/source_types": {
      "get": {
        "description": "列出所有可用的数据源类型。",
        "tags": [
          "Sources"
        ],
        "parameters": [],
        "summary": "List available source types",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "types": {
                    "value": [
                      "rabbitmq",
                      "gcp_pubsub_consumer",
                      "kafka_consumer",
                      "mqtt"
                    ],
                    "summary": "Source types"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "rabbitmq",
                      "gcp_pubsub_consumer",
                      "kafka_consumer",
                      "mqtt"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gcp_devices": {
      "get": {
        "description": "列出所有从 GCP IoT Core 导入的设备",
        "tags": [
          "GCP Devices"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_gcp_device_api.gcp_device_all_info"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "从 GCP IoT Core 导入认证和配置数据",
        "tags": [
          "GCP Devices"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_gcp_device_api.import_result"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_gcp_device_api.gcp_exported_device"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/clients/{clientid}": {
      "get": {
        "description": "获取客户端信息",
        "tags": [
          "Gateway Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "description": "客户端 ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "description": "网关名称",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            }
          }
        ],
        "summary": "Get client info",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "lwm2m_client": {
                    "value": {
                      "recv_oct": 56,
                      "recv_pkt": 1,
                      "proto_ver": "1.0",
                      "mqueue_max": "infinity",
                      "clean_start": true,
                      "awaiting_rel_cnt": 0,
                      "keepalive": 0,
                      "subscriptions_cnt": 0,
                      "node": "emqx@127.0.0.1",
                      "send_cnt": 1,
                      "proto_name": "LwM2M",
                      "recv_msg": 0,
                      "expiry_interval": 0,
                      "username": "guest",
                      "ip_address": "127.0.0.1",
                      "awaiting_rel_max": "infinity",
                      "send_pkt": 1,
                      "disconnected_at": null,
                      "send_oct": 61,
                      "heap_size": 4185,
                      "mqueue_len": 0,
                      "connected_at": "2021-12-07T10:44:02.721+08:00",
                      "subscriptions_max": "infinity",
                      "port": 50675,
                      "inflight_max": "infinity",
                      "is_bridge": false,
                      "inflight_cnt": 0,
                      "mqueue_dropped": 0,
                      "send_msg": 0,
                      "endpoint_name": "urn:imei:154928475237123",
                      "mailbox_len": 0,
                      "connected": true,
                      "reductions": 72022,
                      "recv_cnt": 1,
                      "clientid": "MzAyMzEzNTUwNzk1NDA1MzYyMzIwNzUxNjQwMTY1NzQ0NjE",
                      "created_at": "2021-12-07T10:44:02.721+08:00",
                      "lifetime": 86400
                    },
                    "summary": "LwM2M client info"
                  },
                  "general_client": {
                    "value": {
                      "recv_oct": 56,
                      "recv_pkt": 1,
                      "proto_ver": "1.0",
                      "mqueue_max": "infinity",
                      "clean_start": true,
                      "awaiting_rel_cnt": 0,
                      "keepalive": 0,
                      "subscriptions_cnt": 0,
                      "node": "emqx@127.0.0.1",
                      "send_cnt": 1,
                      "proto_name": "STOMP",
                      "recv_msg": 0,
                      "expiry_interval": 0,
                      "username": "guest",
                      "ip_address": "127.0.0.1",
                      "awaiting_rel_max": "infinity",
                      "send_pkt": 1,
                      "disconnected_at": null,
                      "send_oct": 61,
                      "heap_size": 4185,
                      "mqueue_len": 0,
                      "connected_at": "2021-12-07T10:44:02.721+08:00",
                      "subscriptions_max": "infinity",
                      "port": 50675,
                      "inflight_max": "infinity",
                      "is_bridge": false,
                      "inflight_cnt": 0,
                      "mqueue_dropped": 0,
                      "send_msg": 0,
                      "mailbox_len": 0,
                      "connected": true,
                      "reductions": 72022,
                      "recv_cnt": 1,
                      "clientid": "MzAyMzEzNTUwNzk1NDA1MzYyMzIwNzUxNjQwMTY1NzQ0NjE",
                      "created_at": "2021-12-07T10:44:02.721+08:00"
                    },
                    "summary": "General client info"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api_clients.exproto_client"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api_clients.lwm2m_client"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api_clients.coap_client"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api_clients.mqttsn_client"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api_clients.stomp_client"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "踢出指定客户端",
        "tags": [
          "Gateway Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "description": "客户端 ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "description": "网关名称",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            }
          }
        ],
        "summary": "Kick out client",
        "responses": {
          "204": {
            "description": "Kicked"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/publish/bulk": {
      "post": {
        "description": "批量发布多条消息。<br/><br/>可能的 HTTP 状态码如下：<br/><br/>200: 所有的消息都被成功发送到至少一个订阅。<br/><br/>202: 至少有一个消息没有匹配到任何订阅。<br/><br/>400: 至少有一个消息编码错误，如非法主题，或 QoS 超出范围等。<br/><br/>503: 至少有一个小因为服务重启的原因导致转发失败。<br/><br/><br/>请求的 Body 或者 Body 中包含的某个消息无法通过 API 规范的类型检查时，HTTP 响应的消息与发布单个消息的 API<br/> <code>/publish</code> 是一样的。<br/>如果所有的消息都是合法的，那么 HTTP 返回的内容是一个 JSON 数组，每个元素代表了该消息转发的状态。",
        "tags": [
          "Publish"
        ],
        "parameters": [],
        "summary": "Publish a batch of messages",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_ok"
                  }
                }
              }
            }
          },
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                      }
                    },
                    {
                      "$ref": "#/components/schemas/emqx_mgmt_api_publish.bad_request"
                    }
                  ]
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_message"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes/{node}/bridges/{id}/{operation}": {
      "post": {
        "description": "在某个节点上停止/重新启动数据桥接。",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "节点名，比如 emqx@127.0.0.1",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID ， 格式为 {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "节点可用操作：停止、重新启动",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start",
                "stop",
                "restart"
              ]
            },
            "example": "start"
          }
        ],
        "summary": "Stop/restart bridge",
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service or bridge not enabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge or node not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/rule_test": {
      "post": {
        "description": "测试一个规则",
        "tags": [
          "Rules"
        ],
        "parameters": [],
        "summary": "Test a rule",
        "responses": {
          "200": {
            "description": "Rule Test Pass"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid Parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "412": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_MATCH"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "SQL Not Match"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rule_engine.rule_test"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/built_in_database/rules/clients/{clientid}": {
      "get": {
        "description": "获取指定客户端的规则",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.clientid"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "password_based:built_in_database": {
                    "value": {
                      "rules": [
                        {
                          "action": "publish",
                          "permission": "allow",
                          "topic": "test/topic/1"
                        },
                        {
                          "action": "subscribe",
                          "permission": "allow",
                          "topic": "test/topic/2"
                        },
                        {
                          "action": "all",
                          "permission": "deny",
                          "topic": "eq test/#"
                        },
                        {
                          "action": "publish",
                          "retain": "true",
                          "permission": "allow",
                          "topic": "test/topic/3",
                          "qos": [
                            "1"
                          ]
                        },
                        {
                          "action": "publish",
                          "retain": "all",
                          "permission": "allow",
                          "topic": "test/topic/4",
                          "qos": [
                            "0",
                            "1",
                            "2"
                          ]
                        }
                      ],
                      "clientid": "client1"
                    },
                    "summary": "ClientID"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_clientid"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "设置指定客户端的规则",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.clientid"
          }
        ],
        "responses": {
          "204": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad clientid or bad rule schema"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "password_based:built_in_database": {
                  "value": {
                    "rules": [
                      {
                        "action": "publish",
                        "permission": "allow",
                        "topic": "test/topic/1"
                      },
                      {
                        "action": "subscribe",
                        "permission": "allow",
                        "topic": "test/topic/2"
                      },
                      {
                        "action": "all",
                        "permission": "deny",
                        "topic": "eq test/#"
                      },
                      {
                        "action": "publish",
                        "retain": "true",
                        "permission": "allow",
                        "topic": "test/topic/3",
                        "qos": [
                          "1"
                        ]
                      },
                      {
                        "action": "publish",
                        "retain": "all",
                        "permission": "allow",
                        "topic": "test/topic/4",
                        "qos": [
                          "0",
                          "1",
                          "2"
                        ]
                      }
                    ],
                    "clientid": "client1"
                  },
                  "summary": "ClientID"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_clientid"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除指定客户端的规则",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.clientid"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad clientid"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "ClientID Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/sysmon": {
      "get": {
        "description": "Get the sub-configurations under *sysmon*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "summary": "Get the sub-configurations under *sysmon*",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.sysmon"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "config not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *sysmon*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "summary": "Update the sub-configurations under *sysmon*",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.sysmon"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx.sysmon"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/connectors/{id}": {
      "get": {
        "description": "通过 id 获取一个连接器。",
        "tags": [
          "Connectors"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "连接器 id。必须是 {type}:{name} 的格式。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_connector"
          }
        ],
        "summary": "Get connector",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "influxdb_api_v2": {
                    "value": {
                      "name": "influxdb_connector",
                      "status": "connected",
                      "type": "influxdb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example influxdb connector",
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "parameters": {
                        "org": "examlpe_org",
                        "token": "example_token",
                        "bucket": "example_bucket",
                        "influxdb_type": "influxdb_api_v2"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "InfluxDB HTTP API V2 Connector"
                  },
                  "http": {
                    "value": {
                      "name": "my_http_connector",
                      "status": "connected",
                      "type": "http",
                      "connect_timeout": "15s",
                      "pool_size": 1,
                      "enable": true,
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://localhost:8080/api/v1",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "pool_type": "hash",
                      "enable_pipelining": 100
                    },
                    "summary": "HTTP Connector"
                  },
                  "confluent_producer": {
                    "value": {
                      "name": "my_confluent_producer_connector",
                      "status": "connected",
                      "type": "confluent_producer",
                      "ssl": {
                        "verify": "verify_none",
                        "enable": true,
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ],
                        "server_name_indication": "auto"
                      },
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "xyz.sa-east1.gcp.confluent.cloud:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Confluent Connector"
                  },
                  "iotdb": {
                    "value": {
                      "name": "iotdb_connector",
                      "status": "connected",
                      "type": "iotdb",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "******",
                        "username": "root"
                      },
                      "description": "My example iotdb connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "base_url": "http://iotdb.local:18080/",
                      "actions": [
                        "my_action"
                      ],
                      "pool_type": "random",
                      "enable_pipelining": 100,
                      "iotdb_version": "v1.3.x"
                    },
                    "summary": "Apache IoTDB Connector"
                  },
                  "couchbase": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": true
                      },
                      "description": "My connector",
                      "server": "couchbase:8093",
                      "enable": true,
                      "password": "******",
                      "username": "admin",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "45s"
                      }
                    },
                    "summary": "Couchbase Connector"
                  },
                  "datalayers": {
                    "value": {
                      "name": "datalayers_connector",
                      "status": "connected",
                      "type": "datalayers",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example datalayers connector",
                      "server": "127.0.0.1:8361",
                      "enable": true,
                      "parameters": {
                        "password": "******",
                        "username": "example_username",
                        "database": "example_database"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Datalayers Connector"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer_connector",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "ssl": {
                        "verify": "verify_none",
                        "enable": true,
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ],
                        "server_name_indication": "auto"
                      },
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Azure Event Hub Connector"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_connector",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "localhost:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Kafka Producer Connector"
                  },
                  "kinesis": {
                    "value": {
                      "name": "kinesis_connector",
                      "status": "connected",
                      "type": "kinesis",
                      "description": "My example kinesis connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "aws_access_key_id": "your_access_key",
                      "aws_secret_access_key": "aws_secret_key",
                      "endpoint": "http://localhost:4566",
                      "max_retries": 2,
                      "pool_size": 8
                    },
                    "summary": "Kinesis Connector"
                  },
                  "syskeeper_proxy": {
                    "value": {
                      "name": "syskeeper_proxy",
                      "status": "connected",
                      "type": "syskeeper_proxy",
                      "listen": "127.0.0.1:9092",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "acceptors": 16,
                      "handshake_timeout": "16s",
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Syskeeper Proxy Connector"
                  },
                  "pgsql": {
                    "value": {
                      "name": "my_pgsql_connector",
                      "status": "connected",
                      "type": "pgsql",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "PostgreSQL Connector"
                  },
                  "mysql": {
                    "value": {
                      "name": "mysql_connector",
                      "status": "connected",
                      "type": "mysql",
                      "description": "My example mysql connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:3306",
                      "password": "******",
                      "username": "root",
                      "database": "test",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "health_check_interval": "20s"
                      }
                    },
                    "summary": "MySQL Connector"
                  },
                  "rabbitmq": {
                    "value": {
                      "timeout": "5s",
                      "name": "rabbitmq_connector",
                      "port": 5672,
                      "status": "connected",
                      "type": "rabbitmq",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example rabbitmq connector",
                      "pool_size": 8,
                      "server": "127.0.0.1",
                      "enable": true,
                      "password": "******",
                      "username": "guest",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "heartbeat": "30s",
                      "actions": [
                        "my_action"
                      ],
                      "virtual_host": "/"
                    },
                    "summary": "Rabbitmq Connector"
                  },
                  "dynamo": {
                    "value": {
                      "name": "dynamo_connector",
                      "status": "connected",
                      "type": "dynamo",
                      "description": "My example dynamo connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "aws_access_key_id": "root",
                      "aws_secret_access_key": "******",
                      "enable": true,
                      "pool_size": 8,
                      "region": "us-west-2",
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "url": "http://127.0.0.1:8000"
                    },
                    "summary": "DynamoDB Connector"
                  },
                  "tdengine": {
                    "value": {
                      "name": "tdengine_connector",
                      "status": "connected",
                      "type": "tdengine",
                      "description": "My example tdengine connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:6041",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "TDengine Connector"
                  },
                  "mongodb_single": {
                    "value": {
                      "name": "mongodb_single_connector",
                      "status": "connected",
                      "type": "mongodb_single",
                      "description": "My example mongodb_single connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Standalone Connector"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "demo",
                      "status": "connected",
                      "type": "greptimedb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example greptimedb connector",
                      "server": "127.0.0.1:4001",
                      "enable": true,
                      "password": "******",
                      "username": "example_username",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "dbname": "example_db"
                    },
                    "summary": "GreptimeDB Connector"
                  },
                  "opents": {
                    "value": {
                      "name": "opents_connector",
                      "status": "connected",
                      "type": "opents",
                      "description": "My example opents connector",
                      "pool_size": 8,
                      "server": "http://localhost:4242/",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "OpenTSDB Connector"
                  },
                  "abs": {
                    "value": {
                      "status": "connected",
                      "description": "My connector",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "45s"
                      },
                      "account_key": "******",
                      "account_name": "my_account_name"
                    },
                    "summary": "Azure Blob Storage Connector"
                  },
                  "mongodb_sharded": {
                    "value": {
                      "name": "mongodb_sharded_connector",
                      "status": "connected",
                      "type": "mongodb_sharded",
                      "description": "My example mongodb_sharded connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Sharded Connector"
                  },
                  "mongodb_rs": {
                    "value": {
                      "name": "mongodb_rs_connector",
                      "status": "connected",
                      "type": "mongodb_rs",
                      "description": "My example mongodb_rs connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Replica Set Connector"
                  },
                  "redis_single_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis single connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "server": "127.0.0.1:6379",
                        "password": "******",
                        "username": "test",
                        "database": 1,
                        "redis_type": "single"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Single Producer Connector"
                  },
                  "oracle": {
                    "value": {
                      "name": "oracle_connector",
                      "status": "connected",
                      "type": "oracle",
                      "description": "My example oracle connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "password": "oracle",
                      "pool_size": 8,
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "server": "127.0.0.1:1521",
                      "service_name": "XE",
                      "sid": "XE",
                      "username": "system"
                    },
                    "summary": "Oracle Connector"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "hstreamdb_connector",
                      "status": "connected",
                      "type": "hstreamdb",
                      "description": "My example hstreamdb connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "grpc_timeout": "30s",
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "ssl": {
                        "enable": false,
                        "verify": "verify_peer"
                      },
                      "url": "http://127.0.0.1:6570"
                    },
                    "summary": "HStreamDB Connector"
                  },
                  "influxdb_api_v1": {
                    "value": {
                      "name": "influxdb_connector",
                      "status": "connected",
                      "type": "influxdb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example influxdb connector",
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "parameters": {
                        "password": "******",
                        "username": "example_username",
                        "database": "example_database",
                        "influxdb_type": "influxdb_api_v1"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "InfluxDB HTTP API V1 Connector"
                  },
                  "s3_aws": {
                    "value": {
                      "port": 443,
                      "status": "connected",
                      "host": "s3.eu-east-1.amazonaws.com",
                      "description": "My S3 connector",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "transport_options": {
                        "ssl": {
                          "verify": "verify_peer",
                          "enable": true
                        },
                        "connect_timeout": "1s",
                        "pool_size": 4,
                        "max_retries": 1,
                        "request_timeout": "60s",
                        "enable_pipelining": 1
                      },
                      "secret_access_key": "SECRET",
                      "access_key_id": "ACCESS"
                    },
                    "summary": "S3 Connector"
                  },
                  "cassandra": {
                    "value": {
                      "name": "cassandra_connector",
                      "status": "connected",
                      "type": "cassandra",
                      "description": "My example cassandra connector",
                      "pool_size": 8,
                      "password": "******",
                      "username": "root",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "servers": "127.0.0.1:9042",
                      "actions": [
                        "my_action"
                      ],
                      "keyspace": "mqtt"
                    },
                    "summary": "Cassandra Connector"
                  },
                  "gcp_pubsub_consumer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "gcp_pubsub_producer",
                      "description": "my connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "max_retries": 2,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "30s"
                      },
                      "pipelining": 100,
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Consumer Connector"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "clickhouse_connector",
                      "status": "connected",
                      "type": "clickhouse",
                      "description": "My example clickhouse connector",
                      "pool_size": 8,
                      "password": "******",
                      "url": "http://localhost:8123",
                      "username": "default",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "ClickHouse Connector"
                  },
                  "sqlserver": {
                    "value": {
                      "driver": "ms-sql",
                      "name": "sqlserver_connector",
                      "status": "connected",
                      "type": "sqlserver",
                      "description": "My example sqlserver connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:1433",
                      "password": "******",
                      "username": "sa",
                      "database": "test",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "health_check_interval": "20s"
                      }
                    },
                    "summary": "Microsoft SQL Server Connector"
                  },
                  "redis_cluster_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis cluster connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "password": "******",
                        "username": "test",
                        "servers": "127.0.0.1:6379,127.0.0.2:6379",
                        "redis_type": "cluster"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Cluster Producer Connector"
                  },
                  "matrix": {
                    "value": {
                      "name": "my_matrix_connector",
                      "status": "connected",
                      "type": "matrix",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "Matrix Connector"
                  },
                  "kafka_consumer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "kafka_consumer",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "30s"
                      },
                      "bootstrap_hosts": "kafka.emqx.net:9092"
                    },
                    "summary": "Kafka Consumer Connector"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "rocketmq_connector",
                      "status": "connected",
                      "type": "rocketmq",
                      "description": "My example rocketmq connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "enable": true,
                      "pool_size": 8,
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_after_created": true,
                        "start_timeout": "5s"
                      },
                      "servers": "127.0.0.1:9876"
                    },
                    "summary": "RocketMQ Connector"
                  },
                  "pulsar": {
                    "value": {
                      "name": "pulsar_connector",
                      "status": "connected",
                      "type": "pulsar",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": "none",
                      "description": "My example pulsar connector",
                      "connect_timeout": "5s",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "servers": "pulsar://127.0.0.1:6650",
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Pulsar Connector"
                  },
                  "syskeeper_forwarder": {
                    "value": {
                      "name": "syskeeper_forwarder",
                      "status": "connected",
                      "type": "syskeeper_forwarder",
                      "pool_size": 16,
                      "server": "127.0.0.1:9092",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "ack_timeout": "10s",
                      "actions": [
                        "my_action"
                      ],
                      "ack_mode": "no_ack"
                    },
                    "summary": "Syskeeper Forwarder Connector"
                  },
                  "elasticsearch": {
                    "value": {
                      "name": "elasticsearch_connector",
                      "status": "connected",
                      "type": "elasticsearch",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "******",
                        "username": "root"
                      },
                      "description": "My example elasticsearch connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "server": "127.0.0.1:9200",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "pool_type": "random",
                      "enable_pipelining": 100
                    },
                    "summary": "Elastic Search Connector"
                  },
                  "gcp_pubsub_producer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "gcp_pubsub_producer",
                      "connect_timeout": "10s",
                      "pool_size": 8,
                      "enable": true,
                      "max_retries": 2,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "request_ttl": "60s"
                      },
                      "pipelining": 100,
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Producer Connector"
                  },
                  "timescale": {
                    "value": {
                      "name": "my_timescale_connector",
                      "status": "connected",
                      "type": "timescale",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "Timescale Connector"
                  },
                  "redis_sentinel_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis sentinel connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "password": "******",
                        "username": "test",
                        "database": 1,
                        "servers": "127.0.0.1:6379,127.0.0.2:6379",
                        "sentinel": "myredismaster",
                        "redis_type": "sentinel"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Sentinel Producer Connector"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_producer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/elasticsearch.get"
                    },
                    {
                      "$ref": "#/components/schemas/connector_azure_blob_storage.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/syskeeper_forwarder.get"
                    },
                    {
                      "$ref": "#/components/schemas/pulsar.get"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/kafka_consumer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_consumer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/opents_connector.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_s3.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/tdengine_connector.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/redis.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/rabbitmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/connector_mqtt.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_postgres.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_syskeeper_proxy.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_datalayers.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_couchbase.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/iotdb.get"
                    },
                    {
                      "$ref": "#/components/schemas/confluent.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get_connector"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Connector not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "通过 id 更新一个连接器。",
        "tags": [
          "Connectors"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "连接器 id。必须是 {type}:{name} 的格式。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_connector"
          }
        ],
        "summary": "Update connector",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "influxdb_api_v2": {
                    "value": {
                      "name": "influxdb_connector",
                      "status": "connected",
                      "type": "influxdb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example influxdb connector",
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "parameters": {
                        "org": "examlpe_org",
                        "token": "example_token",
                        "bucket": "example_bucket",
                        "influxdb_type": "influxdb_api_v2"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "InfluxDB HTTP API V2 Connector"
                  },
                  "http": {
                    "value": {
                      "name": "my_http_connector",
                      "status": "connected",
                      "type": "http",
                      "connect_timeout": "15s",
                      "pool_size": 1,
                      "enable": true,
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://localhost:8080/api/v1",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "pool_type": "hash",
                      "enable_pipelining": 100
                    },
                    "summary": "HTTP Connector"
                  },
                  "confluent_producer": {
                    "value": {
                      "name": "my_confluent_producer_connector",
                      "status": "connected",
                      "type": "confluent_producer",
                      "ssl": {
                        "verify": "verify_none",
                        "enable": true,
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ],
                        "server_name_indication": "auto"
                      },
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "xyz.sa-east1.gcp.confluent.cloud:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Confluent Connector"
                  },
                  "iotdb": {
                    "value": {
                      "name": "iotdb_connector",
                      "status": "connected",
                      "type": "iotdb",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "******",
                        "username": "root"
                      },
                      "description": "My example iotdb connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "base_url": "http://iotdb.local:18080/",
                      "actions": [
                        "my_action"
                      ],
                      "pool_type": "random",
                      "enable_pipelining": 100,
                      "iotdb_version": "v1.3.x"
                    },
                    "summary": "Apache IoTDB Connector"
                  },
                  "couchbase": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": true
                      },
                      "description": "My connector",
                      "server": "couchbase:8093",
                      "enable": true,
                      "password": "******",
                      "username": "admin",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "45s"
                      }
                    },
                    "summary": "Couchbase Connector"
                  },
                  "datalayers": {
                    "value": {
                      "name": "datalayers_connector",
                      "status": "connected",
                      "type": "datalayers",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example datalayers connector",
                      "server": "127.0.0.1:8361",
                      "enable": true,
                      "parameters": {
                        "password": "******",
                        "username": "example_username",
                        "database": "example_database"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Datalayers Connector"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer_connector",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "ssl": {
                        "verify": "verify_none",
                        "enable": true,
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ],
                        "server_name_indication": "auto"
                      },
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Azure Event Hub Connector"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_connector",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "localhost:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Kafka Producer Connector"
                  },
                  "kinesis": {
                    "value": {
                      "name": "kinesis_connector",
                      "status": "connected",
                      "type": "kinesis",
                      "description": "My example kinesis connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "aws_access_key_id": "your_access_key",
                      "aws_secret_access_key": "aws_secret_key",
                      "endpoint": "http://localhost:4566",
                      "max_retries": 2,
                      "pool_size": 8
                    },
                    "summary": "Kinesis Connector"
                  },
                  "syskeeper_proxy": {
                    "value": {
                      "name": "syskeeper_proxy",
                      "status": "connected",
                      "type": "syskeeper_proxy",
                      "listen": "127.0.0.1:9092",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "acceptors": 16,
                      "handshake_timeout": "16s",
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Syskeeper Proxy Connector"
                  },
                  "pgsql": {
                    "value": {
                      "name": "my_pgsql_connector",
                      "status": "connected",
                      "type": "pgsql",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "PostgreSQL Connector"
                  },
                  "mysql": {
                    "value": {
                      "name": "mysql_connector",
                      "status": "connected",
                      "type": "mysql",
                      "description": "My example mysql connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:3306",
                      "password": "******",
                      "username": "root",
                      "database": "test",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "health_check_interval": "20s"
                      }
                    },
                    "summary": "MySQL Connector"
                  },
                  "rabbitmq": {
                    "value": {
                      "timeout": "5s",
                      "name": "rabbitmq_connector",
                      "port": 5672,
                      "status": "connected",
                      "type": "rabbitmq",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example rabbitmq connector",
                      "pool_size": 8,
                      "server": "127.0.0.1",
                      "enable": true,
                      "password": "******",
                      "username": "guest",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "heartbeat": "30s",
                      "actions": [
                        "my_action"
                      ],
                      "virtual_host": "/"
                    },
                    "summary": "Rabbitmq Connector"
                  },
                  "dynamo": {
                    "value": {
                      "name": "dynamo_connector",
                      "status": "connected",
                      "type": "dynamo",
                      "description": "My example dynamo connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "aws_access_key_id": "root",
                      "aws_secret_access_key": "******",
                      "enable": true,
                      "pool_size": 8,
                      "region": "us-west-2",
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "url": "http://127.0.0.1:8000"
                    },
                    "summary": "DynamoDB Connector"
                  },
                  "tdengine": {
                    "value": {
                      "name": "tdengine_connector",
                      "status": "connected",
                      "type": "tdengine",
                      "description": "My example tdengine connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:6041",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "TDengine Connector"
                  },
                  "mongodb_single": {
                    "value": {
                      "name": "mongodb_single_connector",
                      "status": "connected",
                      "type": "mongodb_single",
                      "description": "My example mongodb_single connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Standalone Connector"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "demo",
                      "status": "connected",
                      "type": "greptimedb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example greptimedb connector",
                      "server": "127.0.0.1:4001",
                      "enable": true,
                      "password": "******",
                      "username": "example_username",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "dbname": "example_db"
                    },
                    "summary": "GreptimeDB Connector"
                  },
                  "opents": {
                    "value": {
                      "name": "opents_connector",
                      "status": "connected",
                      "type": "opents",
                      "description": "My example opents connector",
                      "pool_size": 8,
                      "server": "http://localhost:4242/",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "OpenTSDB Connector"
                  },
                  "abs": {
                    "value": {
                      "status": "connected",
                      "description": "My connector",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "45s"
                      },
                      "account_key": "******",
                      "account_name": "my_account_name"
                    },
                    "summary": "Azure Blob Storage Connector"
                  },
                  "mongodb_sharded": {
                    "value": {
                      "name": "mongodb_sharded_connector",
                      "status": "connected",
                      "type": "mongodb_sharded",
                      "description": "My example mongodb_sharded connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Sharded Connector"
                  },
                  "mongodb_rs": {
                    "value": {
                      "name": "mongodb_rs_connector",
                      "status": "connected",
                      "type": "mongodb_rs",
                      "description": "My example mongodb_rs connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Replica Set Connector"
                  },
                  "redis_single_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis single connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "server": "127.0.0.1:6379",
                        "password": "******",
                        "username": "test",
                        "database": 1,
                        "redis_type": "single"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Single Producer Connector"
                  },
                  "oracle": {
                    "value": {
                      "name": "oracle_connector",
                      "status": "connected",
                      "type": "oracle",
                      "description": "My example oracle connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "password": "oracle",
                      "pool_size": 8,
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "server": "127.0.0.1:1521",
                      "service_name": "XE",
                      "sid": "XE",
                      "username": "system"
                    },
                    "summary": "Oracle Connector"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "hstreamdb_connector",
                      "status": "connected",
                      "type": "hstreamdb",
                      "description": "My example hstreamdb connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "grpc_timeout": "30s",
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "ssl": {
                        "enable": false,
                        "verify": "verify_peer"
                      },
                      "url": "http://127.0.0.1:6570"
                    },
                    "summary": "HStreamDB Connector"
                  },
                  "influxdb_api_v1": {
                    "value": {
                      "name": "influxdb_connector",
                      "status": "connected",
                      "type": "influxdb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example influxdb connector",
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "parameters": {
                        "password": "******",
                        "username": "example_username",
                        "database": "example_database",
                        "influxdb_type": "influxdb_api_v1"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "InfluxDB HTTP API V1 Connector"
                  },
                  "s3_aws": {
                    "value": {
                      "port": 443,
                      "status": "connected",
                      "host": "s3.eu-east-1.amazonaws.com",
                      "description": "My S3 connector",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "transport_options": {
                        "ssl": {
                          "verify": "verify_peer",
                          "enable": true
                        },
                        "connect_timeout": "1s",
                        "pool_size": 4,
                        "max_retries": 1,
                        "request_timeout": "60s",
                        "enable_pipelining": 1
                      },
                      "secret_access_key": "SECRET",
                      "access_key_id": "ACCESS"
                    },
                    "summary": "S3 Connector"
                  },
                  "cassandra": {
                    "value": {
                      "name": "cassandra_connector",
                      "status": "connected",
                      "type": "cassandra",
                      "description": "My example cassandra connector",
                      "pool_size": 8,
                      "password": "******",
                      "username": "root",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "servers": "127.0.0.1:9042",
                      "actions": [
                        "my_action"
                      ],
                      "keyspace": "mqtt"
                    },
                    "summary": "Cassandra Connector"
                  },
                  "gcp_pubsub_consumer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "gcp_pubsub_producer",
                      "description": "my connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "max_retries": 2,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "30s"
                      },
                      "pipelining": 100,
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Consumer Connector"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "clickhouse_connector",
                      "status": "connected",
                      "type": "clickhouse",
                      "description": "My example clickhouse connector",
                      "pool_size": 8,
                      "password": "******",
                      "url": "http://localhost:8123",
                      "username": "default",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "ClickHouse Connector"
                  },
                  "sqlserver": {
                    "value": {
                      "driver": "ms-sql",
                      "name": "sqlserver_connector",
                      "status": "connected",
                      "type": "sqlserver",
                      "description": "My example sqlserver connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:1433",
                      "password": "******",
                      "username": "sa",
                      "database": "test",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "health_check_interval": "20s"
                      }
                    },
                    "summary": "Microsoft SQL Server Connector"
                  },
                  "redis_cluster_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis cluster connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "password": "******",
                        "username": "test",
                        "servers": "127.0.0.1:6379,127.0.0.2:6379",
                        "redis_type": "cluster"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Cluster Producer Connector"
                  },
                  "matrix": {
                    "value": {
                      "name": "my_matrix_connector",
                      "status": "connected",
                      "type": "matrix",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "Matrix Connector"
                  },
                  "kafka_consumer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "kafka_consumer",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "30s"
                      },
                      "bootstrap_hosts": "kafka.emqx.net:9092"
                    },
                    "summary": "Kafka Consumer Connector"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "rocketmq_connector",
                      "status": "connected",
                      "type": "rocketmq",
                      "description": "My example rocketmq connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "enable": true,
                      "pool_size": 8,
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_after_created": true,
                        "start_timeout": "5s"
                      },
                      "servers": "127.0.0.1:9876"
                    },
                    "summary": "RocketMQ Connector"
                  },
                  "pulsar": {
                    "value": {
                      "name": "pulsar_connector",
                      "status": "connected",
                      "type": "pulsar",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": "none",
                      "description": "My example pulsar connector",
                      "connect_timeout": "5s",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "servers": "pulsar://127.0.0.1:6650",
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Pulsar Connector"
                  },
                  "syskeeper_forwarder": {
                    "value": {
                      "name": "syskeeper_forwarder",
                      "status": "connected",
                      "type": "syskeeper_forwarder",
                      "pool_size": 16,
                      "server": "127.0.0.1:9092",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "ack_timeout": "10s",
                      "actions": [
                        "my_action"
                      ],
                      "ack_mode": "no_ack"
                    },
                    "summary": "Syskeeper Forwarder Connector"
                  },
                  "elasticsearch": {
                    "value": {
                      "name": "elasticsearch_connector",
                      "status": "connected",
                      "type": "elasticsearch",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "******",
                        "username": "root"
                      },
                      "description": "My example elasticsearch connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "server": "127.0.0.1:9200",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "pool_type": "random",
                      "enable_pipelining": 100
                    },
                    "summary": "Elastic Search Connector"
                  },
                  "gcp_pubsub_producer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "gcp_pubsub_producer",
                      "connect_timeout": "10s",
                      "pool_size": 8,
                      "enable": true,
                      "max_retries": 2,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "request_ttl": "60s"
                      },
                      "pipelining": 100,
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Producer Connector"
                  },
                  "timescale": {
                    "value": {
                      "name": "my_timescale_connector",
                      "status": "connected",
                      "type": "timescale",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "Timescale Connector"
                  },
                  "redis_sentinel_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis sentinel connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "password": "******",
                        "username": "test",
                        "database": 1,
                        "servers": "127.0.0.1:6379,127.0.0.2:6379",
                        "sentinel": "myredismaster",
                        "redis_type": "sentinel"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Sentinel Producer Connector"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_producer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/elasticsearch.get"
                    },
                    {
                      "$ref": "#/components/schemas/connector_azure_blob_storage.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/syskeeper_forwarder.get"
                    },
                    {
                      "$ref": "#/components/schemas/pulsar.get"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/kafka_consumer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_consumer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/opents_connector.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_s3.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/tdengine_connector.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/redis.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/rabbitmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/connector_mqtt.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_postgres.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_syskeeper_proxy.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_datalayers.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_couchbase.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/iotdb.get"
                    },
                    {
                      "$ref": "#/components/schemas/confluent.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get_connector"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update connector failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Connector not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "influxdb_api_v2": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "org": "examlpe_org",
                      "token": "example_token",
                      "bucket": "example_bucket",
                      "influxdb_type": "influxdb_api_v2"
                    }
                  },
                  "summary": "InfluxDB HTTP API V2 Connector"
                },
                "http": {
                  "value": {
                    "connect_timeout": "15s",
                    "pool_size": 1,
                    "enable": true,
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://localhost:8080/api/v1",
                    "pool_type": "hash",
                    "enable_pipelining": 100
                  },
                  "summary": "HTTP Connector"
                },
                "confluent_producer": {
                  "value": {
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "xyz.sa-east1.gcp.confluent.cloud:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Confluent Connector"
                },
                "iotdb": {
                  "value": {
                    "name": "iotdb_connector",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example iotdb connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "base_url": "http://iotdb.local:18080/",
                    "pool_type": "random",
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.3.x"
                  },
                  "summary": "Apache IoTDB Connector"
                },
                "couchbase": {
                  "value": {
                    "ssl": {
                      "enable": true
                    },
                    "description": "My connector",
                    "server": "couchbase:8093",
                    "enable": true,
                    "password": "******",
                    "username": "admin",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    }
                  },
                  "summary": "Couchbase Connector"
                },
                "datalayers": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example datalayers connector",
                    "server": "127.0.0.1:8361",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database"
                    }
                  },
                  "summary": "Datalayers Connector"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Azure Event Hub Connector"
                },
                "kafka_producer": {
                  "value": {
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Kafka Producer Connector"
                },
                "kinesis": {
                  "value": {
                    "description": "My example kinesis connector",
                    "aws_access_key_id": "your_access_key",
                    "aws_secret_access_key": "aws_secret_key",
                    "endpoint": "http://localhost:4566",
                    "max_retries": 2,
                    "pool_size": 8
                  },
                  "summary": "Kinesis Connector"
                },
                "syskeeper_proxy": {
                  "value": {
                    "listen": "127.0.0.1:9092",
                    "enable": true,
                    "acceptors": 16,
                    "handshake_timeout": "16s"
                  },
                  "summary": "Syskeeper Proxy Connector"
                },
                "pgsql": {
                  "value": {
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "PostgreSQL Connector"
                },
                "mysql": {
                  "value": {
                    "description": "My example mysql connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  "summary": "MySQL Connector"
                },
                "rabbitmq": {
                  "value": {
                    "timeout": "5s",
                    "name": "rabbitmq_connector",
                    "port": 5672,
                    "type": "rabbitmq",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example rabbitmq connector",
                    "pool_size": 8,
                    "server": "127.0.0.1",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "heartbeat": "30s",
                    "virtual_host": "/"
                  },
                  "summary": "Rabbitmq Connector"
                },
                "dynamo": {
                  "value": {
                    "description": "My example dynamo connector",
                    "aws_access_key_id": "root",
                    "aws_secret_access_key": "******",
                    "enable": true,
                    "pool_size": 8,
                    "region": "us-west-2",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "url": "http://127.0.0.1:8000"
                  },
                  "summary": "DynamoDB Connector"
                },
                "tdengine": {
                  "value": {
                    "name": "tdengine_connector",
                    "type": "tdengine",
                    "description": "My example tdengine connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root"
                  },
                  "summary": "TDengine Connector"
                },
                "mongodb_single": {
                  "value": {
                    "description": "My example mongodb_single connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Standalone Connector"
                },
                "greptimedb": {
                  "value": {
                    "name": "demo",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example greptimedb connector",
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "password": "******",
                    "username": "example_username",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db"
                  },
                  "summary": "GreptimeDB Connector"
                },
                "opents": {
                  "value": {
                    "name": "opents_connector",
                    "type": "opents",
                    "description": "My example opents connector",
                    "pool_size": 8,
                    "server": "http://localhost:4242/",
                    "enable": true
                  },
                  "summary": "OpenTSDB Connector"
                },
                "abs": {
                  "value": {
                    "description": "My connector",
                    "enable": true,
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    },
                    "account_key": "******",
                    "account_name": "my_account_name"
                  },
                  "summary": "Azure Blob Storage Connector"
                },
                "mongodb_sharded": {
                  "value": {
                    "description": "My example mongodb_sharded connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Sharded Connector"
                },
                "mongodb_rs": {
                  "value": {
                    "description": "My example mongodb_rs connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Replica Set Connector"
                },
                "redis_single_producer": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis single connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "server": "127.0.0.1:6379",
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "redis_type": "single"
                    }
                  },
                  "summary": "Redis Single Producer Connector"
                },
                "oracle": {
                  "value": {
                    "description": "My example oracle connector",
                    "password": "oracle",
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "server": "127.0.0.1:1521",
                    "service_name": "XE",
                    "sid": "XE",
                    "username": "system"
                  },
                  "summary": "Oracle Connector"
                },
                "hstreamdb": {
                  "value": {
                    "description": "My example hstreamdb connector",
                    "grpc_timeout": "30s",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "ssl": {
                      "enable": false,
                      "verify": "verify_peer"
                    },
                    "url": "http://127.0.0.1:6570"
                  },
                  "summary": "HStreamDB Connector"
                },
                "influxdb_api_v1": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database",
                      "influxdb_type": "influxdb_api_v1"
                    }
                  },
                  "summary": "InfluxDB HTTP API V1 Connector"
                },
                "s3_aws": {
                  "value": {
                    "port": 443,
                    "host": "s3.eu-east-1.amazonaws.com",
                    "description": "My S3 connector",
                    "enable": true,
                    "transport_options": {
                      "ssl": {
                        "verify": "verify_peer",
                        "enable": true
                      },
                      "connect_timeout": "1s",
                      "pool_size": 4,
                      "max_retries": 1,
                      "request_timeout": "60s",
                      "enable_pipelining": 1
                    },
                    "secret_access_key": "SECRET",
                    "access_key_id": "ACCESS"
                  },
                  "summary": "S3 Connector"
                },
                "cassandra": {
                  "value": {
                    "description": "My example cassandra connector",
                    "pool_size": 8,
                    "password": "******",
                    "username": "root",
                    "servers": "127.0.0.1:9042",
                    "keyspace": "mqtt"
                  },
                  "summary": "Cassandra Connector"
                },
                "gcp_pubsub_consumer": {
                  "value": {
                    "description": "my connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Consumer Connector"
                },
                "clickhouse": {
                  "value": {
                    "description": "My example clickhouse connector",
                    "pool_size": 8,
                    "password": "******",
                    "url": "http://localhost:8123",
                    "username": "default",
                    "database": "mqtt"
                  },
                  "summary": "ClickHouse Connector"
                },
                "sqlserver": {
                  "value": {
                    "driver": "ms-sql",
                    "description": "My example sqlserver connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  "summary": "Microsoft SQL Server Connector"
                },
                "redis_cluster_producer": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis cluster connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "redis_type": "cluster"
                    }
                  },
                  "summary": "Redis Cluster Producer Connector"
                },
                "matrix": {
                  "value": {
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "Matrix Connector"
                },
                "kafka_consumer": {
                  "value": {
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "bootstrap_hosts": "kafka.emqx.net:9092"
                  },
                  "summary": "Kafka Consumer Connector"
                },
                "rocketmq": {
                  "value": {
                    "description": "My example rocketmq connector",
                    "enable": true,
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_after_created": true,
                      "start_timeout": "5s"
                    },
                    "servers": "127.0.0.1:9876"
                  },
                  "summary": "RocketMQ Connector"
                },
                "pulsar": {
                  "value": {
                    "name": "pulsar_connector",
                    "type": "pulsar",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": "none",
                    "description": "My example pulsar connector",
                    "connect_timeout": "5s",
                    "enable": true,
                    "servers": "pulsar://127.0.0.1:6650"
                  },
                  "summary": "Pulsar Connector"
                },
                "syskeeper_forwarder": {
                  "value": {
                    "pool_size": 16,
                    "server": "127.0.0.1:9092",
                    "enable": true,
                    "ack_timeout": "10s",
                    "ack_mode": "no_ack"
                  },
                  "summary": "Syskeeper Forwarder Connector"
                },
                "elasticsearch": {
                  "value": {
                    "name": "elasticsearch_connector",
                    "type": "elasticsearch",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example elasticsearch connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "server": "127.0.0.1:9200",
                    "enable": true,
                    "pool_type": "random",
                    "enable_pipelining": 100
                  },
                  "summary": "Elastic Search Connector"
                },
                "gcp_pubsub_producer": {
                  "value": {
                    "connect_timeout": "10s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "resource_opts": {
                      "request_ttl": "60s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Producer Connector"
                },
                "timescale": {
                  "value": {
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "Timescale Connector"
                },
                "redis_sentinel_producer": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis sentinel connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "sentinel": "myredismaster",
                      "redis_type": "sentinel"
                    }
                  },
                  "summary": "Redis Sentinel Producer Connector"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_timescale.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_producer.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/elasticsearch.put"
                  },
                  {
                    "$ref": "#/components/schemas/connector_azure_blob_storage.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/syskeeper_forwarder.put"
                  },
                  {
                    "$ref": "#/components/schemas/pulsar.put"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/kafka_consumer.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_consumer.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/opents_connector.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_s3.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/tdengine_connector.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/redis.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/rabbitmq.put"
                  },
                  {
                    "$ref": "#/components/schemas/connector_mqtt.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_postgres.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_syskeeper_proxy.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_datalayers.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_couchbase.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/iotdb.put"
                  },
                  {
                    "$ref": "#/components/schemas/confluent.put_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.put_connector"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "通过 id 删除一个连接器。",
        "tags": [
          "Connectors"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "连接器 id。必须是 {type}:{name} 的格式。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_connector"
          }
        ],
        "summary": "Delete connector",
        "responses": {
          "204": {
            "description": "Connector deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cannot delete connector while active rules are defined for this connector"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Connector not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}/authorization/cache": {
      "get": {
        "description": "获取指定客户端的授权缓存",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.authz_cache"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "清除指定客户端的授权缓存",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Clean client authz cache successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/data/import": {
      "post": {
        "description": "Import a data backup file",
        "tags": [
          "Data Backup"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Backup file import failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "node": "emqx@127.0.0.1",
                "filename": "emqx-export-2023-11-23-19-13-19.043.tar.gz"
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_mgmt_api_data_backup.import_request_body"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/{node}/force_leave": {
      "delete": {
        "description": "强制节点离开集群",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cluster.node"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/prometheus/schema_validation": {
      "get": {
        "description": "获取 Schema 验证的 Prometheus 指标.",
        "tags": [
          "Monitor"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_prometheus_api.mode"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Prometheus Data.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/gateways/{name}/listeners/{id}": {
      "get": {
        "description": "获取指定网关监听器的配置。",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "监听器 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "summary": "Get listener config",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "udp_listener": {
                    "value": {
                      "name": "udp-def",
                      "type": "udp",
                      "bind": "22212",
                      "udp_options": {
                        "buffer": "10KB",
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "sndbuf": "10KB",
                        "active_n": 100
                      }
                    },
                    "summary": "A simple UDP listener example"
                  },
                  "dtls_listener": {
                    "value": {
                      "name": "dtls-def",
                      "type": "dtls",
                      "bind": "22213",
                      "udp_options": {
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "dtls_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "access_rules": [
                        "allow all"
                      ],
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple DTLS listener example"
                  },
                  "ssl_listener": {
                    "value": {
                      "name": "ssl-def",
                      "type": "ssl",
                      "bind": "22211",
                      "tcp_options": {
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "ssl_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2",
                          "tlsv1.1",
                          "tlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "acceptors": 16,
                      "access_rules": [
                        "allow all"
                      ],
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple SSL listener example"
                  },
                  "tcp_listener": {
                    "value": {
                      "name": "tcp-def",
                      "type": "tcp",
                      "bind": "22210",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple TCP listener example"
                  },
                  "dtls_listener_with_psk_ciphers": {
                    "value": {
                      "name": "dtls-psk",
                      "type": "dtls",
                      "bind": "22214",
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "dtls_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ],
                        "fail_if_no_peer_cert": false,
                        "user_lookup_fun": "emqx_tls_psk:lookup"
                      },
                      "max_conn_rate": 1000
                    },
                    "summary": "A DTLS listener with PSK example"
                  },
                  "lisetner_with_authn": {
                    "value": {
                      "name": "tcp-with-authn",
                      "type": "tcp",
                      "bind": "22215",
                      "authentication": {
                        "mechanism": "password_based",
                        "backend": "built_in_database",
                        "password_hash_algorithm": {
                          "name": "sha256"
                        },
                        "user_id_type": "username"
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A TCP listener with authentication example"
                  },
                  "ws_listener": {
                    "value": {
                      "name": "ws-def",
                      "type": "ws",
                      "bind": "33043",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "websocket": {
                        "path": "/ocpp",
                        "compress": false,
                        "fail_if_no_subprotocol": true,
                        "supported_subprotocols": "ocpp1.6",
                        "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                        "check_origin_enable": false,
                        "piggyback": "single"
                      },
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple WebSocket listener example"
                  },
                  "wss_listener": {
                    "value": {
                      "name": "ws-ssl-def",
                      "type": "wss",
                      "bind": "33053",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "ssl_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2",
                          "tlsv1.1",
                          "tlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "websocket": {
                        "path": "/ocpp",
                        "compress": false,
                        "fail_if_no_subprotocol": true,
                        "supported_subprotocols": "ocpp1.6",
                        "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                        "check_origin_enable": false,
                        "piggyback": "single"
                      },
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple WebSocket/TLS listener example"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.wss_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ws_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新某网关监听器的配置。被更新的监听器会执行重启，所有已连接到该监听器上的客户端都会被断开。",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "监听器 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "summary": "Update listener config",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "udp_listener": {
                    "value": {
                      "name": "udp-def",
                      "type": "udp",
                      "bind": "22212",
                      "udp_options": {
                        "buffer": "10KB",
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "sndbuf": "10KB",
                        "active_n": 100
                      }
                    },
                    "summary": "A simple UDP listener example"
                  },
                  "dtls_listener": {
                    "value": {
                      "name": "dtls-def",
                      "type": "dtls",
                      "bind": "22213",
                      "udp_options": {
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "dtls_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "access_rules": [
                        "allow all"
                      ],
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple DTLS listener example"
                  },
                  "ssl_listener": {
                    "value": {
                      "name": "ssl-def",
                      "type": "ssl",
                      "bind": "22211",
                      "tcp_options": {
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "ssl_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2",
                          "tlsv1.1",
                          "tlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "acceptors": 16,
                      "access_rules": [
                        "allow all"
                      ],
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple SSL listener example"
                  },
                  "tcp_listener": {
                    "value": {
                      "name": "tcp-def",
                      "type": "tcp",
                      "bind": "22210",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple TCP listener example"
                  },
                  "dtls_listener_with_psk_ciphers": {
                    "value": {
                      "name": "dtls-psk",
                      "type": "dtls",
                      "bind": "22214",
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "dtls_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                        "versions": [
                          "dtlsv1.2",
                          "dtlsv1"
                        ],
                        "fail_if_no_peer_cert": false,
                        "user_lookup_fun": "emqx_tls_psk:lookup"
                      },
                      "max_conn_rate": 1000
                    },
                    "summary": "A DTLS listener with PSK example"
                  },
                  "lisetner_with_authn": {
                    "value": {
                      "name": "tcp-with-authn",
                      "type": "tcp",
                      "bind": "22215",
                      "authentication": {
                        "mechanism": "password_based",
                        "backend": "built_in_database",
                        "password_hash_algorithm": {
                          "name": "sha256"
                        },
                        "user_id_type": "username"
                      },
                      "max_connections": 1024000,
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A TCP listener with authentication example"
                  },
                  "ws_listener": {
                    "value": {
                      "name": "ws-def",
                      "type": "ws",
                      "bind": "33043",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "websocket": {
                        "path": "/ocpp",
                        "compress": false,
                        "fail_if_no_subprotocol": true,
                        "supported_subprotocols": "ocpp1.6",
                        "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                        "check_origin_enable": false,
                        "piggyback": "single"
                      },
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple WebSocket listener example"
                  },
                  "wss_listener": {
                    "value": {
                      "name": "ws-ssl-def",
                      "type": "wss",
                      "bind": "33053",
                      "tcp_options": {
                        "buffer": "10KB",
                        "high_watermark": "1MB",
                        "keepalive": "none",
                        "nodelay": false,
                        "recbuf": "10KB",
                        "reuseaddr": true,
                        "send_timeout": "15s",
                        "send_timeout_close": true,
                        "sndbuf": "10KB",
                        "backlog": 1024,
                        "active_n": 100
                      },
                      "max_connections": 1024000,
                      "ssl_options": {
                        "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                        "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                        "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                        "verify": "verify_none",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2",
                          "tlsv1.1",
                          "tlsv1"
                        ],
                        "fail_if_no_peer_cert": false
                      },
                      "websocket": {
                        "path": "/ocpp",
                        "compress": false,
                        "fail_if_no_subprotocol": true,
                        "supported_subprotocols": "ocpp1.6",
                        "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                        "check_origin_enable": false,
                        "piggyback": "single"
                      },
                      "acceptors": 16,
                      "max_conn_rate": 1000
                    },
                    "summary": "A simple WebSocket/TLS listener example"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.wss_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ws_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "udp_listener": {
                  "value": {
                    "name": "udp-def",
                    "type": "udp",
                    "bind": "22212",
                    "udp_options": {
                      "buffer": "10KB",
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "sndbuf": "10KB",
                      "active_n": 100
                    }
                  },
                  "summary": "A simple UDP listener example"
                },
                "dtls_listener": {
                  "value": {
                    "name": "dtls-def",
                    "type": "dtls",
                    "bind": "22213",
                    "udp_options": {
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "dtls_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "access_rules": [
                      "allow all"
                    ],
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple DTLS listener example"
                },
                "ssl_listener": {
                  "value": {
                    "name": "ssl-def",
                    "type": "ssl",
                    "bind": "22211",
                    "tcp_options": {
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "ssl_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2",
                        "tlsv1.1",
                        "tlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "acceptors": 16,
                    "access_rules": [
                      "allow all"
                    ],
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple SSL listener example"
                },
                "tcp_listener": {
                  "value": {
                    "name": "tcp-def",
                    "type": "tcp",
                    "bind": "22210",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple TCP listener example"
                },
                "dtls_listener_with_psk_ciphers": {
                  "value": {
                    "name": "dtls-psk",
                    "type": "dtls",
                    "bind": "22214",
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "dtls_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "ciphers": "RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,RSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,RSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA",
                      "versions": [
                        "dtlsv1.2",
                        "dtlsv1"
                      ],
                      "fail_if_no_peer_cert": false,
                      "user_lookup_fun": "emqx_tls_psk:lookup"
                    },
                    "max_conn_rate": 1000
                  },
                  "summary": "A DTLS listener with PSK example"
                },
                "lisetner_with_authn": {
                  "value": {
                    "name": "tcp-with-authn",
                    "type": "tcp",
                    "bind": "22215",
                    "authentication": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256"
                      },
                      "user_id_type": "username"
                    },
                    "max_connections": 1024000,
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A TCP listener with authentication example"
                },
                "ws_listener": {
                  "value": {
                    "name": "ws-def",
                    "type": "ws",
                    "bind": "33043",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "websocket": {
                      "path": "/ocpp",
                      "compress": false,
                      "fail_if_no_subprotocol": true,
                      "supported_subprotocols": "ocpp1.6",
                      "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                      "check_origin_enable": false,
                      "piggyback": "single"
                    },
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple WebSocket listener example"
                },
                "wss_listener": {
                  "value": {
                    "name": "ws-ssl-def",
                    "type": "wss",
                    "bind": "33053",
                    "tcp_options": {
                      "buffer": "10KB",
                      "high_watermark": "1MB",
                      "keepalive": "none",
                      "nodelay": false,
                      "recbuf": "10KB",
                      "reuseaddr": true,
                      "send_timeout": "15s",
                      "send_timeout_close": true,
                      "sndbuf": "10KB",
                      "backlog": 1024,
                      "active_n": 100
                    },
                    "max_connections": 1024000,
                    "ssl_options": {
                      "cacertfile": "${EMQX_ETC_DIR}/certs/cacert.pem",
                      "certfile": "${EMQX_ETC_DIR}/certs/cert.pem",
                      "keyfile": "${EMQX_ETC_DIR}/certs/key.pem",
                      "verify": "verify_none",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2",
                        "tlsv1.1",
                        "tlsv1"
                      ],
                      "fail_if_no_peer_cert": false
                    },
                    "websocket": {
                      "path": "/ocpp",
                      "compress": false,
                      "fail_if_no_subprotocol": true,
                      "supported_subprotocols": "ocpp1.6",
                      "check_origins": "http://localhost:18083, http://127.0.0.1:18083",
                      "check_origin_enable": false,
                      "piggyback": "single"
                    },
                    "acceptors": 16,
                    "max_conn_rate": 1000
                  },
                  "summary": "A simple WebSocket/TLS listener example"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.wss_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.ws_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.dtls_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.udp_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.ssl_listener"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.tcp_listener"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除指定监听器。被删除的监听器下所有已连接的客户端都会离线。",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "监听器 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "summary": "Delete listener",
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/relup/upgrade/{node}": {
      "post": {
        "description": "Upgrade a specified node to the target version with the installed package.",
        "tags": [
          "Relup"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/relup.node_name"
          }
        ],
        "summary": "Upgrade a specified node",
        "responses": {
          "204": {
            "description": "Upgrade is started successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UNEXPECTED_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Upgrade failed because of invalid input or environment"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INTERNAL_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Upgrade failed because of internal errors"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sources/{id}/metrics/reset": {
      "put": {
        "description": "通过 id 重置数据桥接指标。",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "summary": "Reset source metrics",
        "responses": {
          "204": {
            "description": "Reset success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Source not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/rules/{id}/test": {
      "post": {
        "description": "依据指定的消息内容和运行环境执行相应的规则。",
        "tags": [
          "Rules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_rule_id"
          }
        ],
        "summary": "Apply a rule for testing",
        "responses": {
          "200": {
            "description": "Rule Applied"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid Parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "RULE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "The rule could not be found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "412": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_MATCH"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "SQL Not Match"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rule_engine.rule_apply_test"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/relup/upgrade": {
      "post": {
        "description": "Upgrade all nodes to the target version with the installed package.",
        "tags": [
          "Relup"
        ],
        "parameters": [],
        "summary": "Upgrade all nodes",
        "responses": {
          "204": {
            "description": "Upgrade is started successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UNEXPECTED_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Upgrade failed because of invalid input or environment"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INTERNAL_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Upgrade failed because of internal errors"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/enable/{enable}": {
      "put": {
        "description": "更新指定网关的基础配置、和启用的状态。<br/><br/>注：认证、和监听器的配置更新需参考对应的 API 接口。",
        "tags": [
          "Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "enable",
            "description": "是否开启此网关",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "summary": "Enable or disable gateway",
        "responses": {
          "204": {
            "description": "Gateway configuration updated"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/relup/package/upload": {
      "post": {
        "description": "Upload a hot upgrade package (emqx_relup-vsn.tar.gz).<br/>Note that only one package is alllowed to be installed at a time.",
        "tags": [
          "Relup"
        ],
        "parameters": [],
        "summary": "Upload a hot upgrade package",
        "responses": {
          "204": {
            "description": "Package is uploaded successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UNEXPECTED_ERROR",
                        "ALREADY_INSTALLED",
                        "BAD_PLUGIN_INFO"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "encoding": {
                "plugin": {
                  "contentType": "application/gzip"
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "plugin": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/rules": {
      "get": {
        "description": "列出所有规则",
        "tags": [
          "Rules"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "enable",
            "description": "根据规则是否开启条件过滤",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "from",
            "description": "根据规则来源 Topic 过滤, 需要完全匹配",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "like_id",
            "description": "根据规则 id 过滤, 使用子串模糊匹配",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "like_from",
            "description": "根据规则来源 Topic 过滤, 使用子串模糊匹配",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "like_description",
            "description": "根据规则描述过滤, 使用子串模糊匹配",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "match_from",
            "description": "根据规则来源 Topic 过滤, 使用 MQTT Topic 匹配",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "action",
            "description": "Filters rules that contain any of the given action id(s).  When used in conjunction with source id filtering, the rules must contain sources *and* actions that match some of the criteria.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "source",
            "description": "Filters rules that contain any of the given source id(s).  When used in conjunction with action id filtering, the rules must contain sources *and* actions that match some of the criteria.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "summary": "List rules",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "规则列表",
                      "items": {
                        "$ref": "#/components/schemas/rule_engine.rule_info"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid Parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "通过指定 ID 创建规则",
        "tags": [
          "Rules"
        ],
        "parameters": [],
        "summary": "Create a rule",
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule_engine.rule_info"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid Parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rule_engine.rule_creation"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication/{id}/status": {
      "get": {
        "description": "获取全局认证链上指定认证器的指标与状态。",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "status_metrics": {
                    "value": {
                      "status": "connected",
                      "metrics": {
                        "nomatch": 0,
                        "total": 0,
                        "success": 0,
                        "failed": 0,
                        "rate": 0,
                        "rate_last5m": 0,
                        "rate_max": 0
                      },
                      "node_status": [
                        {
                          "node": "emqx@127.0.0.1",
                          "status": "connected"
                        }
                      ],
                      "resource_metrics": {
                        "success": 0,
                        "matched": 0,
                        "failed": 0,
                        "rate": 0,
                        "rate_last5m": 0,
                        "rate_max": 0
                      },
                      "node_error": [],
                      "node_metrics": [
                        {
                          "node": "emqx@127.0.0.1",
                          "metrics": {
                            "nomatch": 0,
                            "total": 0,
                            "matched": 0,
                            "failed": 0,
                            "rate": 0,
                            "rate_last5m": 0,
                            "rate_max": 0
                          }
                        }
                      ],
                      "node_resource_metrics": [
                        {
                          "node": "emqx@127.0.0.1",
                          "metrics": {
                            "success": 0,
                            "matched": 0,
                            "failed": 0,
                            "rate": 0,
                            "rate_last5m": 0,
                            "rate_max": 0
                          }
                        }
                      ]
                    },
                    "summary": "Authn status metrics"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/authn.metrics_status_fields"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INTERNAL_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Internal Service Error"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/topic_rewrite": {
      "get": {
        "description": "列出全部主题重写规则",
        "tags": [
          "MQTT"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "列出全部主题重写规则",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/modules.rewrite"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新全部主题重写规则",
        "tags": [
          "MQTT"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "更新全部主题重写规则",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/modules.rewrite"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "----"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "413": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "EXCEED_LIMIT"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "超出主题重写规则数量上限"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/modules.rewrite"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways": {
      "get": {
        "description": "该接口会返回指定或所有网关的概览状态，<br/>包括当前状态、连接数、监听器状态等。",
        "tags": [
          "Gateways"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "description": "通过网关状态筛选<br/><br/>状态是一个枚举类型，包括 `running`、`stopped`、`unloaded`",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "running",
                "stopped",
                "unloaded"
              ]
            },
            "example": "running"
          }
        ],
        "summary": "List all gateways",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "name": "coap",
                    "status": "unloaded"
                  },
                  {
                    "name": "exproto",
                    "status": "unloaded"
                  },
                  {
                    "name": "lwm2m",
                    "status": "running",
                    "max_connections": 1024000,
                    "started_at": "2021-12-08T14:41:26.202+08:00",
                    "node_status": [
                      {
                        "node": "node@127.0.0.1",
                        "status": "running",
                        "max_connections": 1024000,
                        "current_connections": 0
                      }
                    ],
                    "listeners": [
                      {
                        "id": "lwm2m:udp:default",
                        "name": "default",
                        "running": true,
                        "type": "udp"
                      }
                    ],
                    "created_at": "2021-12-08T14:41:26.171+08:00",
                    "current_connections": 0
                  },
                  {
                    "name": "mqttsn",
                    "status": "stopped",
                    "max_connections": 1024000,
                    "node_status": [
                      {
                        "node": "node@127.0.0.1",
                        "status": "running",
                        "max_connections": 1024000,
                        "current_connections": 0
                      }
                    ],
                    "listeners": [
                      {
                        "id": "mqttsn:udp:default",
                        "name": "default",
                        "running": false,
                        "type": "udp"
                      }
                    ],
                    "created_at": "2021-12-08T14:41:45.071+08:00",
                    "current_connections": 0,
                    "stopped_at": "2021-12-08T14:56:35.576+08:00"
                  },
                  {
                    "name": "stomp",
                    "status": "running",
                    "max_connections": 1024000,
                    "started_at": "2021-12-08T14:42:15.274+08:00",
                    "node_status": [
                      {
                        "node": "node@127.0.0.1",
                        "status": "running",
                        "max_connections": 1024000,
                        "current_connections": 0
                      }
                    ],
                    "listeners": [
                      {
                        "id": "stomp:tcp:default",
                        "name": "default",
                        "running": true,
                        "type": "tcp"
                      }
                    ],
                    "created_at": "2021-12-08T14:42:15.272+08:00",
                    "current_connections": 0
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_gateway_api.gateway_overview"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/topic_metrics/{topic}": {
      "get": {
        "description": "获取主题监控数据",
        "tags": [
          "MQTT"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "topic",
            "description": "主题字符串。注意：URL 路径中的主题字符串必须进行编码",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "testtopic/1"
          }
        ],
        "responses": {
          "200": {
            "description": "主题",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_topic_metrics_api.topic_metrics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TOPIC_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "该主题未添加到主题监控列表中。"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除主题监控",
        "tags": [
          "MQTT"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "topic",
            "description": "主题字符串。注意：URL 路径中的主题字符串必须进行编码",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "testtopic/1"
          }
        ],
        "responses": {
          "204": {
            "description": "删除主题监控"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TOPIC_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "该主题未添加到主题监控列表中。"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/bridges_probe": {
      "post": {
        "description": "通过给定的 ID 测试创建一个新的桥接。 <br/><br/>ID 的格式必须为 ’{type}:{name}”",
        "tags": [
          "Bridges"
        ],
        "parameters": [],
        "summary": "Test creating bridge",
        "responses": {
          "204": {
            "description": "Test bridge OK"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TEST_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "bridge test failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "influxdb_api_v2": {
                  "value": {
                    "name": "demo",
                    "type": "influxdb_api_v2",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "org": "examlpe_org",
                    "token": "example_token",
                    "bucket": "example_bucket",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v2"
                  },
                  "summary": "InfluxDB HTTP API V2 Bridge"
                },
                "iotdb": {
                  "value": {
                    "name": "My IoTDB Bridge",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "*****",
                      "username": "root"
                    },
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "base_url": "http://iotdb.local:18080/",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "health_check_interval": "15s"
                    },
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.1.x",
                    "device_id": "my_device",
                    "is_aligned": false
                  },
                  "summary": "Apache IoTDB Bridge"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "name": "my_azure_event_hub_producer",
                    "type": "azure_event_hub_producer",
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${.pub_props}",
                      "partition_strategy": "random"
                    },
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "local_topic": "mqtt/local/topic",
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Azure Event Hub Producer Bridge"
                },
                "kafka_producer": {
                  "value": {
                    "name": "my_kafka_producer_action",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "local_topic": "mqtt/local/topic",
                    "kafka": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partitions_limit": "all_partitions",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${pub_props}",
                      "partition_strategy": "random"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Kafka Producer Bridge"
                },
                "redis_sentinel": {
                  "value": {
                    "name": "redis_bridge",
                    "type": "redis_sentinel",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "servers": [
                      "127.0.0.1:26379"
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "sentinel": "mymaster",
                    "redis_type": "sentinel",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Sentinel Bridge"
                },
                "pulsar_producer": {
                  "value": {
                    "authentication": "none",
                    "batch_size": 1,
                    "buffer": {
                      "memory_overload_protection": true,
                      "mode": "memory",
                      "per_partition_limit": "10MB",
                      "segment_bytes": "5MB"
                    },
                    "compression": "no_compression",
                    "enable": true,
                    "local_topic": "mqtt/topic/-576460752303423482",
                    "max_batch_bytes": "900KB",
                    "message": {
                      "key": "${.clientid}",
                      "value": "${.}"
                    },
                    "name": "pulsar_example_name",
                    "pulsar_topic": "pulsar_example_topic",
                    "retention_period": "infinity",
                    "send_buffer": "1MB",
                    "servers": "pulsar://127.0.0.1:6650",
                    "ssl": {
                      "enable": false,
                      "server_name_indication": "auto",
                      "verify": "verify_none"
                    },
                    "strategy": "key_dispatch",
                    "sync_timeout": "5s",
                    "type": "pulsar_producer"
                  },
                  "summary": "Pulsar Producer Bridge"
                },
                "pgsql": {
                  "value": {
                    "name": "foo",
                    "type": "pgsql",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "PostgreSQL Bridge"
                },
                "redis_cluster": {
                  "value": {
                    "name": "redis_bridge",
                    "type": "redis_cluster",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "servers": [
                      "127.0.0.1:6379"
                    ],
                    "resource_opts": {},
                    "redis_type": "cluster",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Cluster Bridge"
                },
                "mysql": {
                  "value": {
                    "name": "foo",
                    "type": "mysql",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "MySQL Bridge"
                },
                "kinesis_producer": {
                  "value": {
                    "name": "foo",
                    "type": "kinesis_producer",
                    "enable": true,
                    "max_retries": 3,
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "endpoint": "https://kinesis.us-east-1.amazonaws.com",
                    "partition_key": "key",
                    "aws_access_key_id": "aws_access_key_id",
                    "stream_name": "stream_name"
                  },
                  "summary": "Amazon Kinesis Producer Bridge"
                },
                "http_example": {
                  "value": {
                    "name": "http_example",
                    "type": "http",
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "15s",
                    "pool_size": 4,
                    "enable": true,
                    "body": "${payload}",
                    "url": "http://localhost:9901/messages/${topic}",
                    "method": "post",
                    "max_retries": 3,
                    "request_timeout": "15s",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "enable_pipelining": 100,
                    "local_topic": "emqx_http/#"
                  },
                  "summary": "HTTP"
                },
                "rabbitmq": {
                  "value": {
                    "timeout": 5,
                    "name": "foo",
                    "port": 5672,
                    "type": "rabbitmq",
                    "exchange": "messages",
                    "pool_size": 8,
                    "server": "localhost",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "heartbeat": "30s",
                    "durable": false,
                    "auto_reconnect": "2s",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "payload_template": "",
                    "routing_key": "my_routing_key",
                    "virtual_host": "/",
                    "exchange_type": "topic"
                  },
                  "summary": "RabbitMQ Bridge"
                },
                "dynamo": {
                  "value": {
                    "name": "foo",
                    "table": "mqtt",
                    "type": "dynamo",
                    "pool_size": 8,
                    "enable": true,
                    "template": "",
                    "url": "http://127.0.0.1:8000",
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "aws_access_key_id": "root"
                  },
                  "summary": "DynamoDB Bridge"
                },
                "tdengine": {
                  "value": {
                    "name": "foo",
                    "type": "tdengine",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "TDengine Bridge"
                },
                "mongodb_single": {
                  "value": {
                    "name": "mongodb_single_demo",
                    "type": "mongodb_single",
                    "pool_size": 8,
                    "server": "localhost:27017",
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "single"
                  },
                  "summary": "MongoDB (Standalone) Bridge"
                },
                "greptimedb": {
                  "value": {
                    "name": "demo",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                  },
                  "summary": "Greptimedb HTTP API V2 Bridge"
                },
                "opents": {
                  "value": {
                    "name": "foo",
                    "type": "opents",
                    "pool_size": 8,
                    "server": "http://127.0.0.1:4242",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "enabledb": true
                  },
                  "summary": "OpenTSDB Bridge"
                },
                "mongodb_sharded": {
                  "value": {
                    "name": "mongodb_sharded_demo",
                    "type": "mongodb_sharded",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "sharded"
                  },
                  "summary": "MongoDB (Sharded) Bridge"
                },
                "mongodb_rs": {
                  "value": {
                    "name": "mongodb_rs_demo",
                    "type": "mongodb_rs",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "r_mode": "safe",
                    "w_mode": "safe",
                    "replica_set_name": "rs",
                    "srv_record": false,
                    "mongo_type": "rs"
                  },
                  "summary": "MongoDB (Replica Set) Bridge"
                },
                "oracle": {
                  "value": {
                    "name": "foo",
                    "type": "oracle",
                    "pool_size": 8,
                    "server": "127.0.0.1:1521",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "service_name": "ORCL",
                    "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "sid": "ORCL"
                  },
                  "summary": "Oracle Database Bridge"
                },
                "hstreamdb": {
                  "value": {
                    "name": "demo",
                    "stream": "stream",
                    "type": "hstreamdb",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "direction": "egress",
                    "url": "http://127.0.0.1:6570",
                    "resource_opts": {
                      "batch_size": 100,
                      "query_mode": "sync",
                      "batch_time": "20ms"
                    },
                    "record_template": "{ \"temperature\": ${payload.temperature}, \"humidity\": ${payload.humidity} }"
                  },
                  "summary": "HStreamDB Bridge"
                },
                "influxdb_api_v1": {
                  "value": {
                    "name": "demo",
                    "type": "influxdb_api_v1",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "database": "example_database",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v1"
                  },
                  "summary": "InfluxDB HTTP API V1 Bridge"
                },
                "gcp_pubsub": {
                  "value": {
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    },
                    "pubsub_topic": "mytopic"
                  },
                  "summary": "GCP PubSub Producer Bridge"
                },
                "redis_single": {
                  "value": {
                    "name": "redis_bridge",
                    "type": "redis_single",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "server": "127.0.0.1:6379",
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "redis_type": "single",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Single Node Bridge"
                },
                "mqtt_example": {
                  "value": {
                    "name": "mqtt_example",
                    "type": "mqtt",
                    "keepalive": "300s",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:1883",
                    "enable": true,
                    "password": "******",
                    "username": "foo",
                    "proto_ver": "v4",
                    "clean_start": true,
                    "retry_interval": "15s",
                    "max_inflight": 100,
                    "resource_opts": {
                      "query_mode": "sync",
                      "max_buffer_bytes": 104857600,
                      "health_check_interval": "15s"
                    },
                    "ingress": {
                      "local": {
                        "retain": "${retain}",
                        "payload": "${payload}",
                        "topic": "from_aws/${topic}",
                        "qos": "${qos}"
                      },
                      "remote": {
                        "topic": "aws/#",
                        "qos": 1
                      }
                    },
                    "egress": {
                      "local": {
                        "topic": "emqx/#"
                      },
                      "remote": {
                        "retain": false,
                        "payload": "${payload}",
                        "topic": "from_emqx/${topic}",
                        "qos": "${qos}"
                      }
                    }
                  },
                  "summary": "MQTT Bridge"
                },
                "cassandra": {
                  "value": {
                    "name": "foo",
                    "type": "cassandra",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
                    "servers": "127.0.0.1:9042",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "keyspace": "mqtt"
                  },
                  "summary": "Cassandra Bridge"
                },
                "gcp_pubsub_consumer": {
                  "value": {
                    "connect_timeout": "15s",
                    "consumer": {
                      "topic_mapping": [
                        {
                          "qos": 1,
                          "mqtt_topic": "mqtt/topic/1",
                          "payload_template": "${.}",
                          "pubsub_topic": "pubsub-topic-1"
                        },
                        {
                          "qos": 2,
                          "mqtt_topic": "mqtt/topic/2",
                          "payload_template": "v = ${.value}, a = ${.attributes}, o = ${.ordering_key}",
                          "pubsub_topic": "pubsub-topic-2"
                        }
                      ],
                      "pull_max_messages": 100
                    },
                    "resource_opts": {
                      "request_ttl": "20s"
                    },
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Consumer Bridge"
                },
                "clickhouse": {
                  "value": {
                    "name": "foo",
                    "type": "clickhouse",
                    "pool_size": 8,
                    "server": "127.0.0.1:8123",
                    "enable": true,
                    "password": "******",
                    "username": "default",
                    "database": "mqtt",
                    "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "batch_value_separator": ", "
                  },
                  "summary": "Clickhouse Bridge"
                },
                "sqlserver": {
                  "value": {
                    "driver": "ms-sql",
                    "name": "bar",
                    "type": "sqlserver",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "enable": true,
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Microsoft SQL Server Bridge"
                },
                "matrix": {
                  "value": {
                    "name": "foo",
                    "type": "matrix",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Matrix Bridge"
                },
                "kafka_consumer": {
                  "value": {
                    "name": "my_kafka_producer_action",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "kafka": {
                      "max_batch_bytes": "896KB",
                      "offset_reset_policy": "latest",
                      "offset_commit_interval_seconds": 5
                    },
                    "min_metadata_refresh_interval": "3s",
                    "topic_mapping": [
                      {
                        "qos": 1,
                        "mqtt_topic": "mqtt/topic/${.offset}",
                        "payload_template": "${.}",
                        "kafka_topic": "kafka-topic-1"
                      },
                      {
                        "qos": 2,
                        "mqtt_topic": "mqtt/topic/2",
                        "payload_template": "v = ${.value}",
                        "kafka_topic": "kafka-topic-2"
                      }
                    ],
                    "bootstrap_hosts": "localhost:9092",
                    "value_encoding_mode": "none",
                    "key_encoding_mode": "none",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Kafka Consumer Bridge"
                },
                "rocketmq": {
                  "value": {
                    "name": "foo",
                    "type": "rocketmq",
                    "server": "127.0.0.1:9876",
                    "enable": true,
                    "template": "",
                    "topic": "TopicTest",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "RocketMQ Bridge"
                },
                "timescale": {
                  "value": {
                    "name": "foo",
                    "type": "timescale",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Timescale Bridge"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_timescale.post"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_consumer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_gcp_pubsub.post_consumer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.post_single"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_gcp_pubsub.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_api_v1"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_rs"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_opents.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.post_grpc_v1"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_single"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_tdengine.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.post_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pgsql.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pulsar.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.post_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_iotdb.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_api_v2"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sso/saml/acs": {
      "post": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [],
        "responses": {
          "302": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "REDIRECT"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_USERNAME_OR_PWD"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BACKEND_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/monitor/nodes/{node}": {
      "get": {
        "description": "包括连接数/在线连接数、主题数/订阅数、消息流入数、流出数、丢弃数等指标。",
        "tags": [
          "Metrics"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "EMQX node name.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "in": "query",
            "name": "latest",
            "description": "The latest N seconds data. Like 300 for 5 min.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "example": 300
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_dashboard_monitor_api.sampler"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/prometheus/stats": {
      "get": {
        "description": "获取 Prometheus 数据",
        "tags": [
          "Monitor"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_prometheus_api.mode"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Prometheus Data.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/trace/{name}/log_detail": {
      "get": {
        "description": "获取 trace 日志文件的元数据, 例如文件大小和修改时间",
        "tags": [
          "Trace"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/trace.name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/trace.log_file_detail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Trace Name Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication/{id}": {
      "get": {
        "description": "获取全局认证链上的指定认证器。emqx_dashboard_error_code_apiemqx_dashboard_error_code_api",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "cmd": "HMGET ${username} password_hash salt",
                      "server": "127.0.0.1:6379",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.scram_restapi_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.scram_restapi_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.scram"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新全局认证链上的指定认证器。",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Authenticator updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "ALREADY_EXISTS"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "value": {
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "algorithm": "hmac-based",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  },
                  "summary": "JWT authentication"
                },
                "password_based:built_in_database": {
                  "value": {
                    "mechanism": "password_based",
                    "backend": "built_in_database",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  },
                  "summary": "Built-in password_based authentication"
                },
                "password_based:http": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "5s",
                    "mechanism": "password_based",
                    "pool_size": 8,
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://127.0.0.1:18083",
                    "method": "post",
                    "backend": "http",
                    "request_timeout": "5s",
                    "enable_pipelining": 100
                  },
                  "summary": "password_based authentication through external HTTP API"
                },
                "password_based:mongodb": {
                  "value": {
                    "mechanism": "password_based",
                    "filter": {
                      "username": "${username}"
                    },
                    "server": "127.0.0.1:27017",
                    "database": "example",
                    "backend": "mongodb",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "collection": "users",
                    "is_superuser_field": "is_superuser",
                    "password_hash_field": "password_hash",
                    "salt_field": "salt"
                  },
                  "summary": "password_based authentication with MongoDB backend"
                },
                "password_based:redis": {
                  "value": {
                    "mechanism": "password_based",
                    "cmd": "HMGET ${username} password_hash salt",
                    "server": "127.0.0.1:6379",
                    "database": 0,
                    "backend": "redis",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single"
                  },
                  "summary": "password_based authentication with Redis backend"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.kerberos"
                  },
                  {
                    "$ref": "#/components/schemas/authn.scram_restapi_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.scram_restapi_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.gcp_device"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap_deprecated"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authn.scram"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db_api"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除全局认证链上的指定认证器。",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "认证器 ID。由认证方式与数据源组成 `{mechanism}:{built_in_database}`，如 `password_based:built_in_database`",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Authenticator deleted"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_registry/{name}": {
      "get": {
        "description": "通过名称获取一个 schema。",
        "tags": [
          "Schema Registry"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Schema 的名称。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_schema"
          }
        ],
        "summary": "Get registered schema",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "avro_schema": {
                    "value": {
                      "name": "my_avro_schema",
                      "type": "avro",
                      "description": "My Avro Schema",
                      "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                    },
                    "summary": "Avro"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/schema_registry.get_json"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.get_protobuf"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.get_avro"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Schema not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新一个现有的 schema。",
        "tags": [
          "Schema Registry"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Schema 的名称。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_schema"
          }
        ],
        "summary": "Update a schema",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "avro_schema": {
                    "value": {
                      "name": "my_avro_schema",
                      "type": "avro",
                      "description": "My Avro Schema",
                      "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                    },
                    "summary": "Avro"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/schema_registry.json"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.protobuf"
                    },
                    {
                      "$ref": "#/components/schemas/schema_registry.avro"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Schema not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "avro_schema": {
                  "value": {
                    "name": "my_avro_schema",
                    "type": "avro",
                    "description": "My Avro Schema",
                    "source": "{\"type\":\"record\",\"fields\":[{\"type\":\"int\",\"name\":\"i\"},{\"type\":\"string\",\"name\":\"s\"}]}"
                  },
                  "summary": "Avro"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/schema_registry.json"
                  },
                  {
                    "$ref": "#/components/schemas/schema_registry.protobuf"
                  },
                  {
                    "$ref": "#/components/schemas/schema_registry.avro"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除一个 schema。",
        "tags": [
          "Schema Registry"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Schema 的名称。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_schema"
          }
        ],
        "summary": "Delete registered schema",
        "responses": {
          "204": {
            "description": "Schema deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Schema not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/publish": {
      "post": {
        "description": "发布单条信息。<br/><br/>可能的 HTTP 状态码如下：<br/><br/>200: 消息被成功发送到至少一个订阅。<br/><br/>202: 没有匹配到任何订阅。<br/><br/>400: 消息编码错误，如非法主题，或 QoS 超出范围等。<br/><br/>503: 服务重启等过程中导致转发失败。",
        "tags": [
          "Publish"
        ],
        "parameters": [],
        "summary": "Publish a message",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_ok"
                }
              }
            }
          },
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_publish.bad_request"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_error"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_mgmt_api_publish.publish_message"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes/{node}/metrics": {
      "get": {
        "description": "获取指定节点上的运行指标，例如消息发送数量，收到或发送字节数，认证和授权成功失败次数等。",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_mgmt_api_nodes.node_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Get node metrics successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_metrics.node_metrics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/global_zone": {
      "get": {
        "description": "获取全局默认 zone 的配置",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "mqtt": {
                      "$ref": "#/components/schemas/emqx.mqtt"
                    },
                    "flapping_detect": {
                      "$ref": "#/components/schemas/emqx.flapping_detect"
                    },
                    "force_shutdown": {
                      "$ref": "#/components/schemas/emqx.force_shutdown"
                    },
                    "force_gc": {
                      "$ref": "#/components/schemas/emqx.force_gc"
                    },
                    "durable_sessions": {
                      "$ref": "#/components/schemas/emqx.durable_sessions"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新全局默认 zone 的配置",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "mqtt": {
                      "$ref": "#/components/schemas/emqx.mqtt"
                    },
                    "flapping_detect": {
                      "$ref": "#/components/schemas/emqx.flapping_detect"
                    },
                    "force_shutdown": {
                      "$ref": "#/components/schemas/emqx.force_shutdown"
                    },
                    "force_gc": {
                      "$ref": "#/components/schemas/emqx.force_gc"
                    },
                    "durable_sessions": {
                      "$ref": "#/components/schemas/emqx.durable_sessions"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "mqtt": {
                    "$ref": "#/components/schemas/emqx.mqtt"
                  },
                  "flapping_detect": {
                    "$ref": "#/components/schemas/emqx.flapping_detect"
                  },
                  "force_shutdown": {
                    "$ref": "#/components/schemas/emqx.force_shutdown"
                  },
                  "force_gc": {
                    "$ref": "#/components/schemas/emqx.force_gc"
                  },
                  "durable_sessions": {
                    "$ref": "#/components/schemas/emqx.durable_sessions"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sources/{id}/enable/{enable}": {
      "put": {
        "description": "启用或禁用集群内所有节点上的数据桥接。",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "path",
            "name": "enable",
            "description": "是否启用该数据桥接。",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "summary": "Enable or disable bridge",
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/data/files": {
      "get": {
        "description": "List backup files",
        "tags": [
          "Data Backup"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "node": "emqx@127.0.0.1",
                      "size": 22740,
                      "filename": "emqx-export-2023-09-02-11-11-33.012.tar.gz",
                      "created_at": "2023-09-02T11:11:33+02:00",
                      "created_at_sec": 1693645893
                    },
                    {
                      "node": "emqx@127.0.0.1",
                      "size": 22740,
                      "filename": "emqx-export-2023-11-23-19-13-19.043.tar.gz",
                      "created_at": "2023-11-23T19:13:19+02:00",
                      "created_at_sec": 1700759599
                    }
                  ],
                  "meta": {
                    "count": 300,
                    "limit": 20,
                    "page": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_data_backup.files_response"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Upload a data backup file",
        "tags": [
          "Data Backup"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad backup file"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/bridges/{id}/enable/{enable}": {
      "put": {
        "description": "启用或禁用所有节点上的桥接",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID ， 格式为 {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          },
          {
            "in": "path",
            "name": "enable",
            "description": "是否启用桥接",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "summary": "Enable or disable bridge",
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "bridge already exists as non Bridge V1 compatible action"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/load_rebalance/status": {
      "get": {
        "description": "获取当前节点的重平衡状态",
        "tags": [
          "Load Rebalance"
        ],
        "parameters": [],
        "summary": "Get rebalance status",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/load_rebalance.local_status_enabled"
                    },
                    {
                      "$ref": "#/components/schemas/load_rebalance.local_status_disabled"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/bridges/{id}/metrics": {
      "get": {
        "description": "通过 Id 来获取桥接的指标信息",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID ， 格式为 {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          }
        ],
        "summary": "Get bridge metrics",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "metrics": {
                      "description": "Bridge 计数",
                      "$ref": "#/components/schemas/bridge.metrics"
                    },
                    "node_metrics": {
                      "type": "array",
                      "description": "节点的计数器",
                      "items": {
                        "$ref": "#/components/schemas/bridge.node_metrics"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "description": "Dashboard 用户列表",
        "tags": [
          "Dashboard"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Dashboard 用户列表",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dashboard.user"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "创建 Dashboard 用户",
        "tags": [
          "Dashboard"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Dashboard 用户名",
                      "maxLength": 100,
                      "example": "admin"
                    },
                    "role": {
                      "default": "administrator",
                      "type": "string",
                      "description": "用户角色",
                      "example": "administrator"
                    },
                    "description": {
                      "type": "string",
                      "description": "Dashboard 用户备注",
                      "example": "administrator"
                    },
                    "backend": {
                      "type": "string",
                      "description": "用户帐号来源",
                      "example": "local"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Dashboard 用户名",
                    "maxLength": 100,
                    "example": "admin"
                  },
                  "password": {
                    "type": "string",
                    "description": "Dashboard 密码",
                    "maxLength": 100,
                    "example": "public"
                  },
                  "role": {
                    "default": "administrator",
                    "type": "string",
                    "description": "用户角色",
                    "example": "administrator"
                  },
                  "description": {
                    "type": "string",
                    "description": "Dashboard 用户备注",
                    "example": "administrator"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/{type}/status": {
      "get": {
        "description": "获取指定授权器的状态",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "description": "授权期所使用的数据源类型。",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "file",
                "built_in_database",
                "http",
                "redis",
                "mysql",
                "postgresql",
                "mongodb",
                "ldap"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "metrics_example": {
                    "value": {
                      "status": "connected",
                      "metrics": {
                        "nomatch": 0,
                        "total": 0,
                        "allow": 0,
                        "deny": 0,
                        "rate": 0,
                        "rate_last5m": 0,
                        "rate_max": 0
                      },
                      "node_status": [
                        {
                          "node": "emqx@127.0.0.1",
                          "status": "connected"
                        }
                      ],
                      "resource_metrics": {
                        "success": 0,
                        "matched": 0,
                        "failed": 0,
                        "rate": 0,
                        "rate_last5m": 0,
                        "rate_max": 0
                      },
                      "node_metrics": [
                        {
                          "node": "emqx@127.0.0.1",
                          "metrics": {
                            "nomatch": 0,
                            "total": 0,
                            "allow": 0,
                            "deny": 0,
                            "rate": 0,
                            "rate_last5m": 0,
                            "rate_max": 0
                          }
                        }
                      ],
                      "node_resource_metrics": [
                        {
                          "node": "emqx@127.0.0.1",
                          "metrics": {
                            "success": 0,
                            "matched": 0,
                            "failed": 0,
                            "rate": 0,
                            "rate_last5m": 0,
                            "rate_max": 0
                          }
                        }
                      ]
                    },
                    "summary": "Showing a typical metrics example"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_schema.metrics_status_fields"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sources_probe": {
      "post": {
        "description": "测试创建一个新的数据桥接。",
        "tags": [
          "Sources"
        ],
        "parameters": [],
        "summary": "Test creating bridge",
        "responses": {
          "204": {
            "description": "Test bridge OK"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TEST_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "bridge test failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "gcp_pubsub_consumer": {
                  "value": {
                    "name": "my_action",
                    "type": "gcp_pubsub_consumer",
                    "description": "my source",
                    "enable": true,
                    "parameters": {
                      "topic": "my-topic",
                      "pull_max_messages": 100
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "GCP PubSub Consumer Source"
                },
                "kafka_consumer": {
                  "value": {
                    "name": "my_source",
                    "type": "kafka_consumer",
                    "parameters": {
                      "topic": "mytopic"
                    },
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Kafka Consumer Source"
                },
                "mqtt": {
                  "value": {
                    "name": "mqtt_source",
                    "type": "mqtt",
                    "description": "My example mqtt source",
                    "enable": true,
                    "parameters": {
                      "topic": "remote/topic",
                      "qos": 1
                    },
                    "connector": "mqtt_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MQTT Subscriber Source"
                },
                "rabbitmq": {
                  "value": {
                    "name": "rabbitmq_source",
                    "type": "rabbitmq",
                    "description": "My example rabbitmq source",
                    "enable": true,
                    "parameters": {
                      "queue": "test_queue",
                      "no_ack": true
                    },
                    "connector": "rabbitmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "RabbitMQ Subscriber Source"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.post_source"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt_publisher.post_source"
                  },
                  {
                    "$ref": "#/components/schemas/kafka_consumer.post_source"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_consumer.post_source"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gcp_devices/{deviceid}": {
      "get": {
        "description": "获取一个从 GCP IoT Core 导入的设备",
        "tags": [
          "GCP Devices"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deviceid",
            "description": "设备标识",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "c2-ec-x509"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_gcp_device_api.gcp_device_all_info"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "未找到 GCP 设备"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新一个从 GCP IoT Core 导入的设备",
        "tags": [
          "GCP Devices"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deviceid",
            "description": "设备标识",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "c2-ec-x509"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_gcp_device_api.gcp_device_info"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_gcp_device_api.gcp_device"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "移除一个从 GCP IoT Core 导入的设备",
        "tags": [
          "GCP Devices"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "deviceid",
            "description": "设备标识",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "c2-ec-x509"
          }
        ],
        "responses": {
          "204": {
            "description": "GCP device deleted"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/listeners": {
      "get": {
        "description": "列出所有节点上的指定类型的监听器",
        "tags": [
          "Listeners"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "description": "Listener type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "tcp",
                "ssl",
                "ws",
                "wss",
                "quic"
              ]
            },
            "example": "tcp"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": "tcp:demo",
                    "name": "demo",
                    "status": {
                      "running": true,
                      "max_connections": 2048000,
                      "current_connections": 201
                    },
                    "type": "tcp",
                    "bind": "0.0.0.0:1884",
                    "number": 2,
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 100
                        }
                      },
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 101
                        }
                      }
                    ],
                    "acceptors": 16
                  },
                  {
                    "id": "tcp:default",
                    "name": "default",
                    "status": {
                      "running": true,
                      "max_connections": "infinity",
                      "current_connections": 501
                    },
                    "type": "tcp",
                    "bind": "0.0.0.0:1883",
                    "number": 2,
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": "infinity",
                          "current_connections": 200
                        }
                      },
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": "infinity",
                          "current_connections": 301
                        }
                      }
                    ],
                    "acceptors": 32
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/listeners.listener_id_status"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "在所有节点上创建指定的监听器",
        "tags": [
          "Listeners"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "id": "tcp:demo",
                  "running": true,
                  "type": "tcp",
                  "bind": "0.0.0.0:1884",
                  "tcp_options": {
                    "buffer": "4KB",
                    "high_watermark": "1MB",
                    "nodelay": false,
                    "reuseaddr": true,
                    "send_timeout": "15s",
                    "send_timeout_close": true,
                    "backlog": 1024,
                    "active_n": 100
                  },
                  "max_connections": 204800,
                  "acceptors": 16,
                  "proxy_protocol": false,
                  "access_rules": [
                    "allow all"
                  ],
                  "proxy_protocol_timeout": "3s",
                  "zone": "default",
                  "mountpoint": "/",
                  "current_connections": 10240
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/listeners.wss_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ws_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.tcp_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ssl_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.quic_required_bind"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_LISTENER_ID",
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "demo",
                "running": true,
                "type": "tcp",
                "bind": "0.0.0.0:1884",
                "tcp_options": {
                  "buffer": "4KB",
                  "high_watermark": "1MB",
                  "nodelay": false,
                  "reuseaddr": true,
                  "send_timeout": "15s",
                  "send_timeout_close": true,
                  "backlog": 1024,
                  "active_n": 100
                },
                "max_connections": 204800,
                "acceptors": 16,
                "proxy_protocol": false,
                "access_rules": [
                  "allow all"
                ],
                "proxy_protocol_timeout": "3s",
                "zone": "default",
                "mountpoint": "/",
                "current_connections": 10240
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/listeners.with_name_quic_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.with_name_wss_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.with_name_ws_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.with_name_ssl_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.with_name_tcp_required_bind"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/links": {
      "get": {
        "description": "Get cluster links configuration",
        "tags": [
          "Cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "enable": true,
                    "name": "emqxcl_b",
                    "node_status": [
                      {
                        "node": "emqx1@emqx.net",
                        "status": "connected"
                      }
                    ],
                    "pool_size": 10,
                    "server": "emqxcl_b.host:1883",
                    "ssl": {
                      "enable": false
                    },
                    "status": "connected",
                    "topics": [
                      "t/topic-example",
                      "t/topic-filter-example/1/#"
                    ]
                  },
                  {
                    "enable": true,
                    "name": "emqxcl_c",
                    "node_status": [
                      {
                        "node": "emqx1@emqx.net",
                        "status": "connected"
                      }
                    ],
                    "pool_size": 10,
                    "server": "emqxcl_c.host:1883",
                    "ssl": {
                      "enable": false
                    },
                    "status": "connected",
                    "topics": [
                      "t/topic-example",
                      "t/topic-filter-example/1/#"
                    ]
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/cluster_link.link_config_response"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "Create a cluster link",
        "tags": [
          "Cluster"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "enable": true,
                  "name": "emqxcl_b",
                  "node_status": [
                    {
                      "node": "emqx1@emqx.net",
                      "status": "connected"
                    }
                  ],
                  "pool_size": 10,
                  "server": "emqxcl_b.host:1883",
                  "ssl": {
                    "enable": false
                  },
                  "status": "connected",
                  "topics": [
                    "t/topic-example",
                    "t/topic-filter-example/1/#"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/cluster_link.link_config_response"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST",
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update Config Failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "enable": true,
                "name": "emqxcl_b",
                "pool_size": 10,
                "server": "emqxcl_b.host:1883",
                "ssl": {
                  "enable": false
                },
                "topics": [
                  "t/topic-example",
                  "t/topic-filter-example/1/#"
                ]
              },
              "schema": {
                "$ref": "#/components/schemas/cluster.link"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/trace/{name}/download": {
      "get": {
        "description": "下载指定 trace 的日志文件",
        "tags": [
          "Trace"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/trace.name"
          },
          {
            "$ref": "#/components/parameters/trace.node"
          }
        ],
        "responses": {
          "200": {
            "description": "A trace zip file",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "NODE_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Trace Name or Node Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}": {
      "get": {
        "description": "获取指定客户端的详细信息",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "heap_size": 610,
                  "send_msg.dropped.expired": 0,
                  "send_oct": 31,
                  "recv_msg.qos1": 0,
                  "is_persistent": false,
                  "send_pkt": 4,
                  "clean_start": true,
                  "inflight_cnt": 0,
                  "node": "emqx@127.0.0.1",
                  "send_msg.dropped.queue_full": 0,
                  "awaiting_rel_cnt": 0,
                  "inflight_max": 32,
                  "created_at": "2024-01-01T12:34:56.789+08:00",
                  "subscriptions_cnt": 1,
                  "mailbox_len": 0,
                  "send_cnt": 4,
                  "connected": true,
                  "ip_address": "127.0.0.1",
                  "awaiting_rel_max": 100,
                  "recv_msg.qos2": 0,
                  "proto_ver": 5,
                  "mountpoint": "null",
                  "proto_name": "MQTT",
                  "durable": false,
                  "port": 52571,
                  "connected_at": "2024-01-01T12:34:56.789+08:00",
                  "enable_authn": true,
                  "expiry_interval": 0,
                  "username": null,
                  "recv_msg": 0,
                  "recv_oct": 49,
                  "send_msg.dropped.too_large": 0,
                  "keepalive": 60,
                  "send_msg.qos1": 0,
                  "send_msg.qos2": 0,
                  "recv_msg.qos0": 0,
                  "send_msg.qos0": 0,
                  "subscriptions_max": "infinity",
                  "mqueue_max": 1000,
                  "mqueue_dropped": 0,
                  "clientid": "01",
                  "is_bridge": false,
                  "peerport": 52571,
                  "send_msg": 0,
                  "listener": "tcp:default",
                  "recv_cnt": 4,
                  "recv_pkt": 4,
                  "recv_msg.dropped": 0,
                  "send_msg.dropped": 0,
                  "recv_msg.dropped.await_pubrel_timeout": 0,
                  "reductions": 6836,
                  "mqueue_len": 0
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.client"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "踢出指定客户端",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Kick out client successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sources/{id}/metrics": {
      "get": {
        "description": "通过 id 来获取数据桥接的指标信息。",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "summary": "Get source metrics",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "metrics": {
                      "description": "Bridge 计数",
                      "$ref": "#/components/schemas/bridge.metrics"
                    },
                    "node_metrics": {
                      "type": "array",
                      "description": "节点的计数器",
                      "items": {
                        "$ref": "#/components/schemas/bridge.node_metrics"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Source not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/authentication": {
      "get": {
        "description": "获取指定网关认证器的配置<br/>当网关或认证未启用时，返回 404。",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "summary": "Get authenticator configuration",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "cmd": "HMGET ${username} password_hash salt",
                      "server": "127.0.0.1:6379",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "Authenticator not initialized"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新指定网关认证器的配置，或停用认证器。",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "summary": "Update authenticator configuration",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "cmd": "HMGET ${username} password_hash salt",
                      "server": "127.0.0.1:6379",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "value": {
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "algorithm": "hmac-based",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  },
                  "summary": "JWT authentication"
                },
                "password_based:built_in_database": {
                  "value": {
                    "mechanism": "password_based",
                    "backend": "built_in_database",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  },
                  "summary": "Built-in password_based authentication"
                },
                "password_based:http": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "5s",
                    "mechanism": "password_based",
                    "pool_size": 8,
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://127.0.0.1:18083",
                    "method": "post",
                    "backend": "http",
                    "request_timeout": "5s",
                    "enable_pipelining": 100
                  },
                  "summary": "password_based authentication through external HTTP API"
                },
                "password_based:mongodb": {
                  "value": {
                    "mechanism": "password_based",
                    "filter": {
                      "username": "${username}"
                    },
                    "server": "127.0.0.1:27017",
                    "database": "example",
                    "backend": "mongodb",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "collection": "users",
                    "is_superuser_field": "is_superuser",
                    "password_hash_field": "password_hash",
                    "salt_field": "salt"
                  },
                  "summary": "password_based authentication with MongoDB backend"
                },
                "password_based:redis": {
                  "value": {
                    "mechanism": "password_based",
                    "cmd": "HMGET ${username} password_hash salt",
                    "server": "127.0.0.1:6379",
                    "database": 0,
                    "backend": "redis",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single"
                  },
                  "summary": "password_based authentication with Redis backend"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.kerberos"
                  },
                  {
                    "$ref": "#/components/schemas/authn.gcp_device"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap_deprecated"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除指定网关的认证器。",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "summary": "Delete gateway authenticator",
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "为指定网关开启认证器实现客户端认证的功能。<br/><br/>当未配置认证器或关闭认证器时，则认为允许所有客户端的连接。<br/><br/>注：在网关中仅支持添加一个认证器，而不是像 MQTT 一样允许配置多个认证器构成认证链。",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "summary": "Create authenticator for gateway",
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "cmd": "HMGET ${username} password_hash salt",
                      "server": "127.0.0.1:6379",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "value": {
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "algorithm": "hmac-based",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  },
                  "summary": "JWT authentication"
                },
                "password_based:built_in_database": {
                  "value": {
                    "mechanism": "password_based",
                    "backend": "built_in_database",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  },
                  "summary": "Built-in password_based authentication"
                },
                "password_based:http": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "5s",
                    "mechanism": "password_based",
                    "pool_size": 8,
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://127.0.0.1:18083",
                    "method": "post",
                    "backend": "http",
                    "request_timeout": "5s",
                    "enable_pipelining": 100
                  },
                  "summary": "password_based authentication through external HTTP API"
                },
                "password_based:mongodb": {
                  "value": {
                    "mechanism": "password_based",
                    "filter": {
                      "username": "${username}"
                    },
                    "server": "127.0.0.1:27017",
                    "database": "example",
                    "backend": "mongodb",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "collection": "users",
                    "is_superuser_field": "is_superuser",
                    "password_hash_field": "password_hash",
                    "salt_field": "salt"
                  },
                  "summary": "password_based authentication with MongoDB backend"
                },
                "password_based:redis": {
                  "value": {
                    "mechanism": "password_based",
                    "cmd": "HMGET ${username} password_hash salt",
                    "server": "127.0.0.1:6379",
                    "database": 0,
                    "backend": "redis",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single"
                  },
                  "summary": "password_based authentication with Redis backend"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.kerberos"
                  },
                  {
                    "$ref": "#/components/schemas/authn.gcp_device"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap_deprecated"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}/unsubscribe/bulk": {
      "post": {
        "description": "批量取消订阅",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Unsubscribe OK"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.unsubscribe"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}/subscribe/bulk": {
      "post": {
        "description": "批量订阅",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_subscriptions.subscription"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.subscribe"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sources/{id}/{operation}": {
      "post": {
        "description": "启用集群中所有节点上的数据桥接。",
        "tags": [
          "Sources"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "集群可用操作：'启动'。",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start"
              ]
            },
            "example": "start"
          }
        ],
        "summary": "Manually start a bridge",
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/connectors/{id}/{operation}": {
      "post": {
        "description": "在集群的所有节点上启动连接器。",
        "tags": [
          "Connectors"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "连接器 id。必须是 {type}:{name} 的格式。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_connector"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "集群可用操作：'start'。",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start"
              ]
            },
            "example": "start"
          }
        ],
        "summary": "Manually start a connector",
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Connector not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/alarm": {
      "get": {
        "description": "Get the sub-configurations under *alarm*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "summary": "Get the sub-configurations under *alarm*",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.alarm"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "config not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *alarm*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "summary": "Update the sub-configurations under *alarm*",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.alarm"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx.alarm"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/load_rebalance/{node}/evacuation/stop": {
      "post": {
        "description": "停止疏散任务",
        "tags": [
          "Load Rebalance"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "节点名称",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Stop evacuation on a node",
        "responses": {
          "200": {
            "description": "响应为空",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/file_transfer": {
      "get": {
        "description": "Get the sub-configurations under *file_transfer*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "summary": "Get the sub-configurations under *file_transfer*",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.file_transfer"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "config not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *file_transfer*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "summary": "Update the sub-configurations under *file_transfer*",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.file_transfer"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx.file_transfer"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/actions": {
      "get": {
        "description": "列出所有创建的数据桥接。",
        "tags": [
          "Actions"
        ],
        "parameters": [],
        "summary": "List bridges",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "name": "my_http_action",
                    "status": "connected",
                    "type": "http",
                    "enable": true,
                    "parameters": {
                      "path": "/room/${room_no}",
                      "body": "${.}",
                      "headers": {},
                      "method": "post"
                    },
                    "connector": "my_http_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "async",
                      "health_check_interval": "15s"
                    }
                  },
                  {
                    "name": "my_confluent_producer_action",
                    "status": "connected",
                    "type": "confluent_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${.pub_props}",
                      "partition_strategy": "random"
                    },
                    "connector": "my_confluent_producer_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "local_topic": "mqtt/local/topic"
                  },
                  {
                    "name": "iotdb_action",
                    "status": "connected",
                    "type": "iotdb",
                    "description": "My example iotdb action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "timestamp": "now",
                          "value": "${st}",
                          "data_type": "BOOLEAN",
                          "measurement": "status"
                        }
                      ],
                      "device_id": "my_device",
                      "is_aligned": false
                    },
                    "connector": "iotdb_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "status": "connected",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "direct",
                      "content": "${.payload}",
                      "blob": "${.payload.blob}",
                      "container": "${.payload.container}"
                    },
                    "connector": "my_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "0ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "status": "connected",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into mqtt (key, value) values (${.id}, ${.payload})"
                    },
                    "connector": "my_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "datalayers_action",
                    "status": "connected",
                    "type": "datalayers",
                    "description": "My example datalayers action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "datalayers_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "my_azure_event_hub_producer_action",
                    "status": "connected",
                    "type": "azure_event_hub_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${.pub_props}",
                      "partition_strategy": "random"
                    },
                    "connector": "my_azure_event_hub_producer_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "local_topic": "mqtt/local/topic"
                  },
                  {
                    "name": "my_kafka_producer_action",
                    "status": "connected",
                    "type": "kafka_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partitions_limit": "all_partitions",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${pub_props}",
                      "partition_strategy": "random"
                    },
                    "connector": "my_kafka_producer_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "32s"
                    },
                    "local_topic": "mqtt/local/topic"
                  },
                  {
                    "name": "kinesis_action",
                    "status": "connected",
                    "type": "kinesis",
                    "description": "My example kinesis action",
                    "enable": true,
                    "parameters": {
                      "partition_key": "any_key",
                      "payload_template": "${.}",
                      "stream_name": "my_stream"
                    },
                    "connector": "kinesis_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "my_action",
                    "status": "connected",
                    "type": "pgsql",
                    "enable": true,
                    "connector": "my_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  {
                    "name": "mysql_action",
                    "status": "connected",
                    "type": "mysql",
                    "description": "My example mysql action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))"
                    },
                    "connector": "mysql_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "mqtt_action",
                    "status": "connected",
                    "type": "mqtt",
                    "description": "My example mqtt action",
                    "enable": true,
                    "parameters": {
                      "retain": false,
                      "payload": "${.payload}",
                      "topic": "remote/topic",
                      "qos": 2
                    },
                    "connector": "mqtt_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "rabbitmq_action",
                    "status": "connected",
                    "type": "rabbitmq",
                    "description": "My example rabbitmq action",
                    "enable": true,
                    "parameters": {
                      "exchange": "test_exchange",
                      "payload_template": "${.payload}",
                      "routing_key": "/",
                      "wait_for_publish_confirmations": true,
                      "delivery_mode": "non_persistent",
                      "publish_confirmation_timeout": "30s"
                    },
                    "connector": "rabbitmq_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "status": "connected",
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "connector": "my_connector_name",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "batch_size": 1
                    }
                  },
                  {
                    "name": "dynamo_action",
                    "status": "connected",
                    "type": "dynamo",
                    "description": "My example dynamo action",
                    "enable": true,
                    "connector": "dynamo_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "hash_key": "clientid",
                      "table": "mqtt_msg",
                      "template": ""
                    }
                  },
                  {
                    "name": "tdengine_action",
                    "status": "connected",
                    "type": "tdengine",
                    "description": "My example tdengine action",
                    "enable": true,
                    "parameters": {
                      "database": "mqtt",
                      "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})"
                    },
                    "connector": "tdengine_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "status": "connected",
                    "description": "My upload action",
                    "enable": true,
                    "parameters": {
                      "mode": "direct",
                      "key": "${topic}",
                      "content": "${payload}",
                      "bucket": "${clientid}",
                      "acl": "public_read"
                    },
                    "connector": "my_s3_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "query_mode": "sync",
                      "inflight_window": 10
                    }
                  },
                  {
                    "name": "greptimedb_action",
                    "status": "connected",
                    "type": "greptimedb",
                    "description": "My example greptimedb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                    },
                    "connector": "greptimedb_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "opents_action",
                    "status": "connected",
                    "type": "opents",
                    "description": "My example opents action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "value": "${value}",
                          "tags": "${tags}",
                          "metric": "${metric}"
                        }
                      ]
                    },
                    "connector": "opents_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "oracle_action",
                    "status": "connected",
                    "type": "oracle",
                    "description": "My example oracle action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})"
                    },
                    "connector": "oracle_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "hstreamdb_action",
                    "status": "connected",
                    "type": "hstreamdb",
                    "description": "My example hstreamdb action",
                    "enable": true,
                    "connector": "hstreamdb_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "aggregation_pool_size": 8,
                      "partition_key": "hej",
                      "record_template": "${payload}",
                      "stream": "mqtt_message",
                      "writer_pool_size": 8
                    }
                  },
                  {
                    "name": "cassandra_action",
                    "status": "connected",
                    "type": "cassandra",
                    "description": "My example cassandra action",
                    "enable": true,
                    "parameters": {
                      "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})"
                    },
                    "connector": "cassandra_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "clickhouse_action",
                    "status": "connected",
                    "type": "clickhouse",
                    "description": "My example clickhouse action",
                    "enable": true,
                    "parameters": {
                      "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                      "batch_value_separator": ", "
                    },
                    "connector": "clickhouse_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "influxdb_action",
                    "status": "connected",
                    "type": "influxdb",
                    "description": "My example influxdb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "influxdb_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "sqlserver_action",
                    "status": "connected",
                    "type": "sqlserver",
                    "description": "My example sqlserver action",
                    "enable": true,
                    "connector": "sqlserver_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )"
                    }
                  },
                  {
                    "name": "my_action",
                    "status": "connected",
                    "type": "matrix",
                    "enable": true,
                    "connector": "my_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  {
                    "status": "connected",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "blob": "${action}/${node}/${datetime.rfc3339}/${sequence}",
                      "container": "mycontainer",
                      "aggregation": {
                        "container": {
                          "type": "csv",
                          "column_order": [
                            "a",
                            "b"
                          ]
                        },
                        "max_records": 10000,
                        "time_interval": "4s"
                      }
                    },
                    "connector": "my_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "batch_size": 100,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "10ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "rocketmq_action",
                    "status": "connected",
                    "type": "rocketmq",
                    "description": "My example rocketmq action",
                    "enable": true,
                    "connector": "rocketmq_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "refresh_interval": "3s",
                      "send_buffer": "1024KB",
                      "sync_timeout": "3s",
                      "template": "",
                      "topic": "TopicTest"
                    }
                  },
                  {
                    "name": "pulsar_action",
                    "status": "connected",
                    "type": "pulsar",
                    "description": "My example pulsar action",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "sync_timeout": "5s",
                      "pulsar_topic": "test_topic"
                    },
                    "connector": "pulsar_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "syskeeper_forwarder",
                    "status": "connected",
                    "type": "syskeeper_forwarder",
                    "enable": true,
                    "parameters": {
                      "template": "${payload}",
                      "target_topic": "${topic}"
                    },
                    "connector": "syskeeper_forwarder",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "worker_pool_size": 16
                    }
                  },
                  {
                    "status": "connected",
                    "description": "My aggregated upload action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "key": "${action}/${node}/${datetime.rfc3339utc}_N${sequence}.csv",
                      "bucket": "mqtt-aggregated",
                      "acl": "public_read",
                      "aggregation": {
                        "max_records": 100000,
                        "time_interval": "15m"
                      },
                      "container": {
                        "type": "csv",
                        "column_order": [
                          "clientid",
                          "topic",
                          "publish_received_at"
                        ]
                      }
                    },
                    "connector": "my_s3_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "query_mode": "async",
                      "inflight_window": 100,
                      "health_check_interval": "10s"
                    }
                  },
                  {
                    "name": "elasticsearch_action",
                    "status": "connected",
                    "type": "elasticsearch",
                    "description": "My example elasticsearch action",
                    "enable": true,
                    "parameters": {
                      "index": "${payload.index}",
                      "action": "create",
                      "doc": "${payload.doc}",
                      "overwrite": true
                    },
                    "connector": "elasticsearch_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "status": "connected",
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "payload_template": "${payload}",
                      "attributes_template": [
                        {
                          "value": "${payload.attrs.v}",
                          "key": "${payload.attrs.k}"
                        }
                      ],
                      "ordering_key_template": "${payload.ok}",
                      "pubsub_topic": "mytopic"
                    },
                    "connector": "my_connector_name",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "batch_size": 5
                    },
                    "local_topic": "local/topic"
                  },
                  {
                    "name": "mongodb_action",
                    "status": "connected",
                    "type": "mongodb",
                    "description": "My example mongodb action",
                    "enable": true,
                    "parameters": {
                      "collection": "mycol"
                    },
                    "connector": "mongodb_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  {
                    "name": "my_action",
                    "status": "connected",
                    "type": "timescale",
                    "enable": true,
                    "connector": "my_connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/bridge_timescale.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mongodb.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/gcp_pubsub_producer.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_elasticsearch.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/action_azure_blob_storage.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/syskeeper.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/pulsar.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/rocketmq.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_matrix.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_sqlserver.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_influxdb.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_clickhouse.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_cassa.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_hstreamdb.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_oracle.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_opents.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_greptimedb.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_s3.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_tdengine.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_dynamo.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/redis.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_rabbitmq.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mqtt_publisher.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mysql.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_pgsql.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_kinesis.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_kafka.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_azure_event_hub.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_datalayers.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/action_couchbase.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_iotdb.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/confluent.get_bridge_v2"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_http.get_bridge_v2"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "通过类型和名称创建一个新的数据桥接。",
        "tags": [
          "Actions"
        ],
        "parameters": [],
        "summary": "Create bridge",
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "http": {
                    "value": {
                      "name": "my_http_action",
                      "status": "connected",
                      "type": "http",
                      "enable": true,
                      "parameters": {
                        "path": "/room/${room_no}",
                        "body": "${.}",
                        "headers": {},
                        "method": "post"
                      },
                      "connector": "my_http_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16,
                        "query_mode": "async",
                        "health_check_interval": "15s"
                      }
                    },
                    "summary": "HTTP Action"
                  },
                  "confluent_producer": {
                    "value": {
                      "name": "my_confluent_producer_action",
                      "status": "connected",
                      "type": "confluent_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "memory_overload_protection": true,
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB"
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_batch_bytes": "896KB",
                        "partition_count_refresh_interval": "60s",
                        "kafka_header_value_encode_mode": "none",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_headers": "${.pub_props}",
                        "partition_strategy": "random"
                      },
                      "connector": "my_confluent_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Confluent Action"
                  },
                  "iotdb": {
                    "value": {
                      "name": "iotdb_action",
                      "status": "connected",
                      "type": "iotdb",
                      "description": "My example iotdb action",
                      "enable": true,
                      "parameters": {
                        "data": [
                          {
                            "timestamp": "now",
                            "value": "${st}",
                            "data_type": "BOOLEAN",
                            "measurement": "status"
                          }
                        ],
                        "device_id": "my_device",
                        "is_aligned": false
                      },
                      "connector": "iotdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Apache IoTDB Bridge"
                  },
                  "direct_azure_blob_storage": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "mode": "direct",
                        "content": "${.payload}",
                        "blob": "${.payload.blob}",
                        "container": "${.payload.container}"
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "batch_time": "0ms",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Azure Blob Storage Direct Upload Action"
                  },
                  "couchbase": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into mqtt (key, value) values (${.id}, ${.payload})"
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Couchbase Action"
                  },
                  "datalayers": {
                    "value": {
                      "name": "datalayers_action",
                      "status": "connected",
                      "type": "datalayers",
                      "description": "My example datalayers action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                      },
                      "connector": "datalayers_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Datalayers Action"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer_action",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "memory_overload_protection": true,
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB"
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_batch_bytes": "896KB",
                        "partition_count_refresh_interval": "60s",
                        "kafka_header_value_encode_mode": "none",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_headers": "${.pub_props}",
                        "partition_strategy": "random"
                      },
                      "connector": "my_azure_event_hub_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Azure Event Hub Action"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "timestamp": "${.timestamp}",
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "memory_overload_protection": true,
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB"
                        },
                        "compression": "no_compression",
                        "topic": "kafka-topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_batch_bytes": "896KB",
                        "partitions_limit": "all_partitions",
                        "partition_count_refresh_interval": "60s",
                        "kafka_header_value_encode_mode": "none",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_headers": "${pub_props}",
                        "partition_strategy": "random"
                      },
                      "connector": "my_kafka_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "32s"
                      },
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Kafka Producer Action"
                  },
                  "kinesis": {
                    "value": {
                      "name": "kinesis_action",
                      "status": "connected",
                      "type": "kinesis",
                      "description": "My example kinesis action",
                      "enable": true,
                      "parameters": {
                        "partition_key": "any_key",
                        "payload_template": "${.}",
                        "stream_name": "my_stream"
                      },
                      "connector": "kinesis_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Kinesis Action"
                  },
                  "pgsql": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "pgsql",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "PostgreSQL Action"
                  },
                  "mysql": {
                    "value": {
                      "name": "mysql_action",
                      "status": "connected",
                      "type": "mysql",
                      "description": "My example mysql action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))"
                      },
                      "connector": "mysql_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MySQL Action"
                  },
                  "mqtt": {
                    "value": {
                      "name": "mqtt_action",
                      "status": "connected",
                      "type": "mqtt",
                      "description": "My example mqtt action",
                      "enable": true,
                      "parameters": {
                        "retain": false,
                        "payload": "${.payload}",
                        "topic": "remote/topic",
                        "qos": 2
                      },
                      "connector": "mqtt_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MQTT Producer Action"
                  },
                  "rabbitmq": {
                    "value": {
                      "name": "rabbitmq_action",
                      "status": "connected",
                      "type": "rabbitmq",
                      "description": "My example rabbitmq action",
                      "enable": true,
                      "parameters": {
                        "exchange": "test_exchange",
                        "payload_template": "${.payload}",
                        "routing_key": "/",
                        "wait_for_publish_confirmations": true,
                        "delivery_mode": "non_persistent",
                        "publish_confirmation_timeout": "30s"
                      },
                      "connector": "rabbitmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "RabbitMQ Producer Action"
                  },
                  "redis": {
                    "value": {
                      "status": "connected",
                      "description": "My action",
                      "enable": true,
                      "parameters": {
                        "command_template": [
                          "LPUSH",
                          "MSGS",
                          "${payload}"
                        ]
                      },
                      "connector": "my_connector_name",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1
                      }
                    },
                    "summary": "Redis Action"
                  },
                  "dynamo": {
                    "value": {
                      "name": "dynamo_action",
                      "status": "connected",
                      "type": "dynamo",
                      "description": "My example dynamo action",
                      "enable": true,
                      "connector": "dynamo_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "hash_key": "clientid",
                        "table": "mqtt_msg",
                        "template": ""
                      }
                    },
                    "summary": "DynamoDB Action"
                  },
                  "tdengine": {
                    "value": {
                      "name": "tdengine_action",
                      "status": "connected",
                      "type": "tdengine",
                      "description": "My example tdengine action",
                      "enable": true,
                      "parameters": {
                        "database": "mqtt",
                        "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})"
                      },
                      "connector": "tdengine_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "TDengine Action"
                  },
                  "s3": {
                    "value": {
                      "status": "connected",
                      "description": "My upload action",
                      "enable": true,
                      "parameters": {
                        "mode": "direct",
                        "key": "${topic}",
                        "content": "${payload}",
                        "bucket": "${clientid}",
                        "acl": "public_read"
                      },
                      "connector": "my_s3_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "query_mode": "sync",
                        "inflight_window": 10
                      }
                    },
                    "summary": "S3 Direct Upload"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "greptimedb_action",
                      "status": "connected",
                      "type": "greptimedb",
                      "description": "My example greptimedb action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                      },
                      "connector": "greptimedb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "GreptimeDB Action"
                  },
                  "opents": {
                    "value": {
                      "name": "opents_action",
                      "status": "connected",
                      "type": "opents",
                      "description": "My example opents action",
                      "enable": true,
                      "parameters": {
                        "data": [
                          {
                            "value": "${value}",
                            "tags": "${tags}",
                            "metric": "${metric}"
                          }
                        ]
                      },
                      "connector": "opents_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "OpenTSDB Action"
                  },
                  "oracle": {
                    "value": {
                      "name": "oracle_action",
                      "status": "connected",
                      "type": "oracle",
                      "description": "My example oracle action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})"
                      },
                      "connector": "oracle_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Oracle Action"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "hstreamdb_action",
                      "status": "connected",
                      "type": "hstreamdb",
                      "description": "My example hstreamdb action",
                      "enable": true,
                      "connector": "hstreamdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "aggregation_pool_size": 8,
                        "partition_key": "hej",
                        "record_template": "${payload}",
                        "stream": "mqtt_message",
                        "writer_pool_size": 8
                      }
                    },
                    "summary": "HStreamDB Action"
                  },
                  "cassandra": {
                    "value": {
                      "name": "cassandra_action",
                      "status": "connected",
                      "type": "cassandra",
                      "description": "My example cassandra action",
                      "enable": true,
                      "parameters": {
                        "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})"
                      },
                      "connector": "cassandra_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Cassandra Action"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "clickhouse_action",
                      "status": "connected",
                      "type": "clickhouse",
                      "description": "My example clickhouse action",
                      "enable": true,
                      "parameters": {
                        "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                        "batch_value_separator": ", "
                      },
                      "connector": "clickhouse_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "ClickHouse Action"
                  },
                  "influxdb": {
                    "value": {
                      "name": "influxdb_action",
                      "status": "connected",
                      "type": "influxdb",
                      "description": "My example influxdb action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                      },
                      "connector": "influxdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "InfluxDB Action"
                  },
                  "sqlserver": {
                    "value": {
                      "name": "sqlserver_action",
                      "status": "connected",
                      "type": "sqlserver",
                      "description": "My example sqlserver action",
                      "enable": true,
                      "connector": "sqlserver_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )"
                      }
                    },
                    "summary": "Microsoft SQL Server Action"
                  },
                  "matrix": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "matrix",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "Matrix Action"
                  },
                  "aggregated_azure_blob_storage": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "mode": "aggregated",
                        "blob": "${action}/${node}/${datetime.rfc3339}/${sequence}",
                        "container": "mycontainer",
                        "aggregation": {
                          "container": {
                            "type": "csv",
                            "column_order": [
                              "a",
                              "b"
                            ]
                          },
                          "max_records": 10000,
                          "time_interval": "4s"
                        }
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 100,
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "batch_time": "10ms",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Azure Blob Storage Aggregated Upload Action"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "rocketmq_action",
                      "status": "connected",
                      "type": "rocketmq",
                      "description": "My example rocketmq action",
                      "enable": true,
                      "connector": "rocketmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "refresh_interval": "3s",
                        "send_buffer": "1024KB",
                        "sync_timeout": "3s",
                        "template": "",
                        "topic": "TopicTest"
                      }
                    },
                    "summary": "RocketMQ Action"
                  },
                  "pulsar": {
                    "value": {
                      "name": "pulsar_action",
                      "status": "connected",
                      "type": "pulsar",
                      "description": "My example pulsar action",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "sync_timeout": "5s",
                        "pulsar_topic": "test_topic"
                      },
                      "connector": "pulsar_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Pulsar Producer Action"
                  },
                  "syskeeper_forwarder": {
                    "value": {
                      "name": "syskeeper_forwarder",
                      "status": "connected",
                      "type": "syskeeper_forwarder",
                      "enable": true,
                      "parameters": {
                        "template": "${payload}",
                        "target_topic": "${topic}"
                      },
                      "connector": "syskeeper_forwarder",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16
                      }
                    },
                    "summary": "Syskeeper Forwarder Bridge"
                  },
                  "s3_aggreg": {
                    "value": {
                      "status": "connected",
                      "description": "My aggregated upload action",
                      "enable": true,
                      "parameters": {
                        "mode": "aggregated",
                        "key": "${action}/${node}/${datetime.rfc3339utc}_N${sequence}.csv",
                        "bucket": "mqtt-aggregated",
                        "acl": "public_read",
                        "aggregation": {
                          "max_records": 100000,
                          "time_interval": "15m"
                        },
                        "container": {
                          "type": "csv",
                          "column_order": [
                            "clientid",
                            "topic",
                            "publish_received_at"
                          ]
                        }
                      },
                      "connector": "my_s3_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "query_mode": "async",
                        "inflight_window": 100,
                        "health_check_interval": "10s"
                      }
                    },
                    "summary": "S3 Aggregated Upload"
                  },
                  "elasticsearch": {
                    "value": {
                      "name": "elasticsearch_action",
                      "status": "connected",
                      "type": "elasticsearch",
                      "description": "My example elasticsearch action",
                      "enable": true,
                      "parameters": {
                        "index": "${payload.index}",
                        "action": "create",
                        "doc": "${payload.doc}",
                        "overwrite": true
                      },
                      "connector": "elasticsearch_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Elastic Search Bridge"
                  },
                  "gcp_pubsub_producer": {
                    "value": {
                      "status": "connected",
                      "description": "My action",
                      "enable": true,
                      "parameters": {
                        "payload_template": "${payload}",
                        "attributes_template": [
                          {
                            "value": "${payload.attrs.v}",
                            "key": "${payload.attrs.k}"
                          }
                        ],
                        "ordering_key_template": "${payload.ok}",
                        "pubsub_topic": "mytopic"
                      },
                      "connector": "my_connector_name",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 5
                      },
                      "local_topic": "local/topic"
                    },
                    "summary": "GCP PubSub Producer Action"
                  },
                  "mongodb": {
                    "value": {
                      "name": "mongodb_action",
                      "status": "connected",
                      "type": "mongodb",
                      "description": "My example mongodb action",
                      "enable": true,
                      "parameters": {
                        "collection": "mycol"
                      },
                      "connector": "mongodb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MongoDB Action"
                  },
                  "timescale": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "timescale",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "Timescale Action"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_producer.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_elasticsearch.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/action_azure_blob_storage.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/syskeeper.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/pulsar.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_opents.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_s3.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_tdengine.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/redis.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt_publisher.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pgsql.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_datalayers.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/action_couchbase.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_iotdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/confluent.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get_bridge_v2"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "http": {
                  "value": {
                    "name": "my_http_action",
                    "type": "http",
                    "enable": true,
                    "parameters": {
                      "path": "/room/${room_no}",
                      "body": "${.}",
                      "headers": {},
                      "method": "post"
                    },
                    "connector": "my_http_connector",
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "async",
                      "health_check_interval": "15s"
                    }
                  },
                  "summary": "HTTP Action"
                },
                "confluent_producer": {
                  "value": {
                    "name": "my_confluent_producer_action",
                    "type": "confluent_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${.pub_props}",
                      "partition_strategy": "random"
                    },
                    "connector": "my_confluent_producer_connector",
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Confluent Action"
                },
                "iotdb": {
                  "value": {
                    "name": "iotdb_action",
                    "type": "iotdb",
                    "description": "My example iotdb action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "timestamp": "now",
                          "value": "${st}",
                          "data_type": "BOOLEAN",
                          "measurement": "status"
                        }
                      ],
                      "device_id": "my_device",
                      "is_aligned": false
                    },
                    "connector": "iotdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Apache IoTDB Bridge"
                },
                "direct_azure_blob_storage": {
                  "value": {
                    "name": "my_action",
                    "type": "azure_blob_storage",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "direct",
                      "content": "${.payload}",
                      "blob": "${.payload.blob}",
                      "container": "${.payload.container}"
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "0ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Azure Blob Storage Direct Upload Action"
                },
                "couchbase": {
                  "value": {
                    "name": "my_action",
                    "type": "couchbase",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into mqtt (key, value) values (${.id}, ${.payload})"
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Couchbase Action"
                },
                "datalayers": {
                  "value": {
                    "name": "datalayers_action",
                    "type": "datalayers",
                    "description": "My example datalayers action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "datalayers_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Datalayers Action"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "name": "my_azure_event_hub_producer_action",
                    "type": "azure_event_hub_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${.pub_props}",
                      "partition_strategy": "random"
                    },
                    "connector": "my_azure_event_hub_producer_connector",
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Azure Event Hub Action"
                },
                "kafka_producer": {
                  "value": {
                    "name": "my_kafka_producer_action",
                    "type": "kafka_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partitions_limit": "all_partitions",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${pub_props}",
                      "partition_strategy": "random"
                    },
                    "connector": "my_kafka_producer_connector",
                    "resource_opts": {
                      "health_check_interval": "32s"
                    },
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Kafka Producer Action"
                },
                "kinesis": {
                  "value": {
                    "name": "kinesis_action",
                    "type": "kinesis",
                    "description": "My example kinesis action",
                    "enable": true,
                    "parameters": {
                      "partition_key": "any_key",
                      "payload_template": "${.}",
                      "stream_name": "my_stream"
                    },
                    "connector": "kinesis_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Kinesis Action"
                },
                "pgsql": {
                  "value": {
                    "name": "my_action",
                    "type": "pgsql",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "PostgreSQL Action"
                },
                "mysql": {
                  "value": {
                    "name": "mysql_action",
                    "type": "mysql",
                    "description": "My example mysql action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))"
                    },
                    "connector": "mysql_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MySQL Action"
                },
                "mqtt": {
                  "value": {
                    "name": "mqtt_action",
                    "type": "mqtt",
                    "description": "My example mqtt action",
                    "enable": true,
                    "parameters": {
                      "retain": false,
                      "payload": "${.payload}",
                      "topic": "remote/topic",
                      "qos": 2
                    },
                    "connector": "mqtt_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MQTT Producer Action"
                },
                "rabbitmq": {
                  "value": {
                    "name": "rabbitmq_action",
                    "type": "rabbitmq",
                    "description": "My example rabbitmq action",
                    "enable": true,
                    "parameters": {
                      "exchange": "test_exchange",
                      "payload_template": "${.payload}",
                      "routing_key": "/",
                      "wait_for_publish_confirmations": true,
                      "delivery_mode": "non_persistent",
                      "publish_confirmation_timeout": "30s"
                    },
                    "connector": "rabbitmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "RabbitMQ Producer Action"
                },
                "redis": {
                  "value": {
                    "name": "my_action",
                    "type": "redis",
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "connector": "my_connector_name",
                    "resource_opts": {
                      "batch_size": 1
                    }
                  },
                  "summary": "Redis Action"
                },
                "dynamo": {
                  "value": {
                    "name": "dynamo_action",
                    "type": "dynamo",
                    "description": "My example dynamo action",
                    "enable": true,
                    "connector": "dynamo_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "hash_key": "clientid",
                      "table": "mqtt_msg",
                      "template": ""
                    }
                  },
                  "summary": "DynamoDB Action"
                },
                "tdengine": {
                  "value": {
                    "name": "tdengine_action",
                    "type": "tdengine",
                    "description": "My example tdengine action",
                    "enable": true,
                    "parameters": {
                      "database": "mqtt",
                      "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})"
                    },
                    "connector": "tdengine_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "TDengine Action"
                },
                "s3": {
                  "value": {
                    "name": "my_s3_action",
                    "type": "s3",
                    "description": "My upload action",
                    "enable": true,
                    "parameters": {
                      "mode": "direct",
                      "key": "${topic}",
                      "content": "${payload}",
                      "bucket": "${clientid}",
                      "acl": "public_read"
                    },
                    "connector": "my_s3_connector",
                    "resource_opts": {
                      "query_mode": "sync",
                      "inflight_window": 10
                    }
                  },
                  "summary": "S3 Direct Upload"
                },
                "greptimedb": {
                  "value": {
                    "name": "greptimedb_action",
                    "type": "greptimedb",
                    "description": "My example greptimedb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                    },
                    "connector": "greptimedb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "GreptimeDB Action"
                },
                "opents": {
                  "value": {
                    "name": "opents_action",
                    "type": "opents",
                    "description": "My example opents action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "value": "${value}",
                          "tags": "${tags}",
                          "metric": "${metric}"
                        }
                      ]
                    },
                    "connector": "opents_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "OpenTSDB Action"
                },
                "oracle": {
                  "value": {
                    "name": "oracle_action",
                    "type": "oracle",
                    "description": "My example oracle action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})"
                    },
                    "connector": "oracle_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Oracle Action"
                },
                "hstreamdb": {
                  "value": {
                    "name": "hstreamdb_action",
                    "type": "hstreamdb",
                    "description": "My example hstreamdb action",
                    "enable": true,
                    "connector": "hstreamdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "aggregation_pool_size": 8,
                      "partition_key": "hej",
                      "record_template": "${payload}",
                      "stream": "mqtt_message",
                      "writer_pool_size": 8
                    }
                  },
                  "summary": "HStreamDB Action"
                },
                "cassandra": {
                  "value": {
                    "name": "cassandra_action",
                    "type": "cassandra",
                    "description": "My example cassandra action",
                    "enable": true,
                    "parameters": {
                      "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})"
                    },
                    "connector": "cassandra_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Cassandra Action"
                },
                "clickhouse": {
                  "value": {
                    "name": "clickhouse_action",
                    "type": "clickhouse",
                    "description": "My example clickhouse action",
                    "enable": true,
                    "parameters": {
                      "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                      "batch_value_separator": ", "
                    },
                    "connector": "clickhouse_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "ClickHouse Action"
                },
                "influxdb": {
                  "value": {
                    "name": "influxdb_action",
                    "type": "influxdb",
                    "description": "My example influxdb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "influxdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "InfluxDB Action"
                },
                "sqlserver": {
                  "value": {
                    "name": "sqlserver_action",
                    "type": "sqlserver",
                    "description": "My example sqlserver action",
                    "enable": true,
                    "connector": "sqlserver_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )"
                    }
                  },
                  "summary": "Microsoft SQL Server Action"
                },
                "matrix": {
                  "value": {
                    "name": "my_action",
                    "type": "matrix",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "Matrix Action"
                },
                "aggregated_azure_blob_storage": {
                  "value": {
                    "name": "my_action",
                    "type": "azure_blob_storage",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "blob": "${action}/${node}/${datetime.rfc3339}/${sequence}",
                      "container": "mycontainer",
                      "aggregation": {
                        "container": {
                          "type": "csv",
                          "column_order": [
                            "a",
                            "b"
                          ]
                        },
                        "max_records": 10000,
                        "time_interval": "4s"
                      }
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 100,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "10ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Azure Blob Storage Aggregated Upload Action"
                },
                "rocketmq": {
                  "value": {
                    "name": "rocketmq_action",
                    "type": "rocketmq",
                    "description": "My example rocketmq action",
                    "enable": true,
                    "connector": "rocketmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "refresh_interval": "3s",
                      "send_buffer": "1024KB",
                      "sync_timeout": "3s",
                      "template": "",
                      "topic": "TopicTest"
                    }
                  },
                  "summary": "RocketMQ Action"
                },
                "pulsar": {
                  "value": {
                    "name": "pulsar_action",
                    "type": "pulsar",
                    "description": "My example pulsar action",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "sync_timeout": "5s",
                      "pulsar_topic": "test_topic"
                    },
                    "connector": "pulsar_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Pulsar Producer Action"
                },
                "syskeeper_forwarder": {
                  "value": {
                    "name": "syskeeper_forwarder",
                    "type": "syskeeper_forwarder",
                    "enable": true,
                    "parameters": {
                      "template": "${payload}",
                      "target_topic": "${topic}"
                    },
                    "connector": "syskeeper_forwarder",
                    "resource_opts": {
                      "worker_pool_size": 16
                    }
                  },
                  "summary": "Syskeeper Forwarder Bridge"
                },
                "s3_aggreg": {
                  "value": {
                    "name": "my_s3_action",
                    "type": "s3",
                    "description": "My aggregated upload action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "key": "${action}/${node}/${datetime.rfc3339utc}_N${sequence}.csv",
                      "bucket": "mqtt-aggregated",
                      "acl": "public_read",
                      "aggregation": {
                        "max_records": 100000,
                        "time_interval": "15m"
                      },
                      "container": {
                        "type": "csv",
                        "column_order": [
                          "clientid",
                          "topic",
                          "publish_received_at"
                        ]
                      }
                    },
                    "connector": "my_s3_connector",
                    "resource_opts": {
                      "query_mode": "async",
                      "inflight_window": 100,
                      "health_check_interval": "10s"
                    }
                  },
                  "summary": "S3 Aggregated Upload"
                },
                "elasticsearch": {
                  "value": {
                    "name": "elasticsearch_action",
                    "type": "elasticsearch",
                    "description": "My example elasticsearch action",
                    "enable": true,
                    "parameters": {
                      "index": "${payload.index}",
                      "action": "create",
                      "doc": "${payload.doc}",
                      "overwrite": true
                    },
                    "connector": "elasticsearch_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Elastic Search Bridge"
                },
                "gcp_pubsub_producer": {
                  "value": {
                    "name": "my_action",
                    "type": "gcp_pubsub_producer",
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "payload_template": "${payload}",
                      "attributes_template": [
                        {
                          "value": "${payload.attrs.v}",
                          "key": "${payload.attrs.k}"
                        }
                      ],
                      "ordering_key_template": "${payload.ok}",
                      "pubsub_topic": "mytopic"
                    },
                    "connector": "my_connector_name",
                    "resource_opts": {
                      "batch_size": 5
                    },
                    "local_topic": "local/topic"
                  },
                  "summary": "GCP PubSub Producer Action"
                },
                "mongodb": {
                  "value": {
                    "name": "mongodb_action",
                    "type": "mongodb",
                    "description": "My example mongodb action",
                    "enable": true,
                    "parameters": {
                      "collection": "mycol"
                    },
                    "connector": "mongodb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MongoDB Action"
                },
                "timescale": {
                  "value": {
                    "name": "my_action",
                    "type": "timescale",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "Timescale Action"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_timescale.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_producer.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_elasticsearch.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/action_azure_blob_storage.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/syskeeper.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/pulsar.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_opents.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_s3.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_tdengine.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/redis.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt_publisher.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pgsql.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_datalayers.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/action_couchbase.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_iotdb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/confluent.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.post_bridge_v2"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes/{node}": {
      "get": {
        "description": "获取指定节点的详细信息。",
        "tags": [
          "Nodes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_mgmt_api_nodes.node_name"
          }
        ],
        "responses": {
          "200": {
            "description": "Get node info successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_nodes.node_info"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ds/storages/{ds}/replicas/{site}": {
      "put": {
        "description": "Add site as a replica for the durable storage",
        "tags": [
          "Durable storage"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ds",
            "description": "Durable storage ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "messages"
              ]
            },
            "example": "messages"
          },
          {
            "in": "path",
            "name": "site",
            "description": "Site ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "AEF5701FC33AFC77"
          }
        ],
        "responses": {
          "202": {
            "description": "OK"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Object not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Remove site as a replica for the durable storage",
        "tags": [
          "Durable storage"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ds",
            "description": "Durable storage ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "messages"
              ]
            },
            "example": "messages"
          },
          {
            "in": "path",
            "name": "site",
            "description": "Site ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "AEF5701FC33AFC77"
          }
        ],
        "responses": {
          "202": {
            "description": "OK"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Object not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/delayed/messages/{topic}": {
      "delete": {
        "description": "删除延迟消息",
        "tags": [
          "MQTT"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "topic",
            "description": "主题",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete delayed message success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_TOPIC_NAME"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "错误的主题名称"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "MESSAGE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "此主题下没有找到延迟消息"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/coap/clients/{clientid}/request": {
      "post": {
        "description": "发送 CoAP 消息到指定客户端",
        "tags": [
          "CoAP Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Send a Request to a Client",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "消息 ID"
                    },
                    "token": {
                      "type": "string",
                      "description": "消息 Token, 可以为空"
                    },
                    "method": {
                      "type": "string",
                      "description": "应答码"
                    },
                    "payload": {
                      "type": "string",
                      "description": "Payload 内容"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENT_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client not found error"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "504": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENT_NOT_RESPONSE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Waiting for client response timeout"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "消息 Token, 可以为空"
                  },
                  "method": {
                    "type": "string",
                    "enum": [
                      "get",
                      "put",
                      "post",
                      "delete"
                    ],
                    "description": "请求 Method 类型"
                  },
                  "timeout": {
                    "type": "string",
                    "description": "请求超时",
                    "example": "32s"
                  },
                  "content_type": {
                    "type": "string",
                    "enum": [
                      "text/plain",
                      "application/json",
                      "application/octet-stream"
                    ],
                    "description": "Payload 类型"
                  },
                  "payload": {
                    "type": "string",
                    "description": "Payload 内容"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/listeners/{id}/stop": {
      "post": {
        "description": "在所有节点上停止指定 ID 的监听器",
        "tags": [
          "Listeners"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST",
                        "BAD_LISTENER_ID"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/topics": {
      "get": {
        "description": "获取集群的主题列表，主题列表根据订阅关系生成。",
        "tags": [
          "Topics"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "topic",
            "description": "Topic Name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "node",
            "description": "Node Name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_topics.topic"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/{node}/invite_async": {
      "put": {
        "description": "向一个节点发送加入集群的邀请，但不等待加入结果。加入状态可以通过 `GET api/<version>/invitation` 获取。",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cluster.node"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/load_rebalance/{node}/start": {
      "post": {
        "description": "启动重平衡任务",
        "tags": [
          "Load Rebalance"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "节点名称",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Start rebalancing with the node as coordinator",
        "responses": {
          "200": {
            "description": "响应为空",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "rebalance": {
                  "nodes": [
                    "othernode@127.0.0.1"
                  ],
                  "wait_takeover": "10s",
                  "sess_evict_rate": 20,
                  "conn_evict_rate": 10,
                  "wait_health_check": "10s",
                  "rel_sess_threshold": 1.5,
                  "abs_sess_threshold": 10,
                  "rel_conn_threshold": 1.5,
                  "abs_conn_threshold": 10
                }
              },
              "schema": {
                "$ref": "#/components/schemas/load_rebalance.rebalance_start"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources": {
      "get": {
        "description": "列出所有授权器。",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_sources.sources"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "添加授权器",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Authorization source created successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authz.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authz.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authz.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authz.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authz.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authz.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authz.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authz.builtin_db"
                  },
                  {
                    "$ref": "#/components/schemas/authz.api_file"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/plugins": {
      "get": {
        "description": "Plugins are launched in top-down order.<br/>Use `POST /plugins/{name}/move` to change the boot order.",
        "tags": [
          "Plugins"
        ],
        "parameters": [],
        "summary": "List all installed plugins",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/plugins.plugin"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message_transformations/reorder": {
      "post": {
        "description": "重新排序所有的消息转换",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [],
        "summary": "Reorder all transformations",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "not_found": {
                      "type": "array",
                      "description": "Transformations not found",
                      "items": {
                        "type": "string"
                      }
                    },
                    "not_reordered": {
                      "type": "array",
                      "description": "Transformations not referenced in input",
                      "items": {
                        "type": "string"
                      }
                    },
                    "duplicated": {
                      "type": "array",
                      "description": "Duplicated transformations in input",
                      "items": {
                        "type": "string"
                      }
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "reorder": {
                  "value": {
                    "order": [
                      "bar",
                      "foo",
                      "baz"
                    ]
                  },
                  "summary": "Update"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/message_transformation_http_api.reorder"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/login": {
      "post": {
        "description": "登录成功后返回 Dashboard 认证 Token。",
        "tags": [
          "Dashboard"
        ],
        "parameters": [],
        "summary": "Dashboard authentication",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "role": {
                      "default": "administrator",
                      "type": "string",
                      "description": "用户角色",
                      "example": "administrator"
                    },
                    "token": {
                      "type": "string",
                      "description": "Dashboard 认证 Token"
                    },
                    "version": {
                      "type": "string",
                      "description": "EMQX 版本",
                      "example": "5.0.0"
                    },
                    "license": {
                      "properties": {
                        "edition": {
                          "type": "string",
                          "enum": [
                            "opensource",
                            "enterprise"
                          ],
                          "description": "EMQX License 类型。可为 opensource 或 enterprise",
                          "example": "opensource"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_USERNAME_OR_PWD"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "登录失败。用户名或密码错误"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Dashboard 用户名",
                    "maxLength": 100,
                    "example": "admin"
                  },
                  "password": {
                    "type": "string",
                    "description": "Dashboard 密码",
                    "maxLength": 100,
                    "example": "public"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": []
      }
    },
    "/bridges/{id}": {
      "get": {
        "description": "通过 Id 获取数据桥接",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID ， 格式为 {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          }
        ],
        "summary": "Get bridge",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "influxdb_api_v2": {
                    "value": {
                      "name": "demo",
                      "type": "influxdb_api_v2",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "precision": "ms",
                      "org": "examlpe_org",
                      "token": "example_token",
                      "bucket": "example_bucket",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}",
                      "influxdb_type": "influxdb_api_v2"
                    },
                    "summary": "InfluxDB HTTP API V2 Bridge"
                  },
                  "iotdb": {
                    "value": {
                      "name": "My IoTDB Bridge",
                      "type": "iotdb",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "*****",
                        "username": "root"
                      },
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "base_url": "http://iotdb.local:18080/",
                      "pool_type": "random",
                      "resource_opts": {
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "health_check_interval": "15s"
                      },
                      "enable_pipelining": 100,
                      "iotdb_version": "v1.1.x",
                      "device_id": "my_device",
                      "is_aligned": false
                    },
                    "summary": "Apache IoTDB Bridge"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "memory_overload_protection": true,
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB"
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_batch_bytes": "896KB",
                        "partition_count_refresh_interval": "60s",
                        "kafka_header_value_encode_mode": "none",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_headers": "${.pub_props}",
                        "partition_strategy": "random"
                      },
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic",
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Azure Event Hub Producer Bridge"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic",
                      "kafka": {
                        "message": {
                          "timestamp": "${.timestamp}",
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "memory_overload_protection": true,
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB"
                        },
                        "compression": "no_compression",
                        "topic": "kafka-topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_batch_bytes": "896KB",
                        "partitions_limit": "all_partitions",
                        "partition_count_refresh_interval": "60s",
                        "kafka_header_value_encode_mode": "none",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_headers": "${pub_props}",
                        "partition_strategy": "random"
                      },
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "localhost:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Kafka Producer Bridge"
                  },
                  "redis_sentinel": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_sentinel",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "database": 1,
                      "servers": [
                        "127.0.0.1:26379"
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "batch_time": "20ms"
                      },
                      "sentinel": "mymaster",
                      "redis_type": "sentinel",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Sentinel Bridge"
                  },
                  "pulsar_producer": {
                    "value": {
                      "authentication": "none",
                      "batch_size": 1,
                      "buffer": {
                        "memory_overload_protection": true,
                        "mode": "memory",
                        "per_partition_limit": "10MB",
                        "segment_bytes": "5MB"
                      },
                      "compression": "no_compression",
                      "enable": true,
                      "local_topic": "mqtt/topic/-576460752303423482",
                      "max_batch_bytes": "900KB",
                      "message": {
                        "key": "${.clientid}",
                        "value": "${.}"
                      },
                      "name": "pulsar_example_name",
                      "pulsar_topic": "pulsar_example_topic",
                      "retention_period": "infinity",
                      "send_buffer": "1MB",
                      "servers": "pulsar://127.0.0.1:6650",
                      "ssl": {
                        "enable": false,
                        "server_name_indication": "auto",
                        "verify": "verify_none"
                      },
                      "strategy": "key_dispatch",
                      "sync_timeout": "5s",
                      "type": "pulsar_producer"
                    },
                    "summary": "Pulsar Producer Bridge"
                  },
                  "pgsql": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "pgsql",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "PostgreSQL Bridge"
                  },
                  "redis_cluster": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_cluster",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "servers": [
                        "127.0.0.1:6379"
                      ],
                      "resource_opts": {},
                      "redis_type": "cluster",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Cluster Bridge"
                  },
                  "mysql": {
                    "value": {
                      "name": "foo",
                      "type": "mysql",
                      "pool_size": 8,
                      "server": "127.0.0.1:3306",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "test",
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "MySQL Bridge"
                  },
                  "kinesis_producer": {
                    "value": {
                      "name": "foo",
                      "type": "kinesis_producer",
                      "enable": true,
                      "max_retries": 3,
                      "aws_secret_access_key": "******",
                      "resource_opts": {
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 104857600,
                        "inflight_window": 100,
                        "health_check_interval": 15000
                      },
                      "endpoint": "https://kinesis.us-east-1.amazonaws.com",
                      "partition_key": "key",
                      "aws_access_key_id": "aws_access_key_id",
                      "stream_name": "stream_name"
                    },
                    "summary": "Amazon Kinesis Producer Bridge"
                  },
                  "http_example": {
                    "value": {
                      "name": "http_example",
                      "type": "http",
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "15s",
                      "pool_size": 4,
                      "enable": true,
                      "body": "${payload}",
                      "url": "http://localhost:9901/messages/${topic}",
                      "method": "post",
                      "max_retries": 3,
                      "request_timeout": "15s",
                      "pool_type": "random",
                      "resource_opts": {
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 104857600,
                        "inflight_window": 100,
                        "health_check_interval": 15000
                      },
                      "enable_pipelining": 100,
                      "local_topic": "emqx_http/#"
                    },
                    "summary": "HTTP"
                  },
                  "rabbitmq": {
                    "value": {
                      "timeout": 5,
                      "name": "foo",
                      "port": 5672,
                      "type": "rabbitmq",
                      "exchange": "messages",
                      "pool_size": 8,
                      "server": "localhost",
                      "enable": true,
                      "password": "******",
                      "username": "guest",
                      "heartbeat": "30s",
                      "durable": false,
                      "auto_reconnect": "2s",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "payload_template": "",
                      "routing_key": "my_routing_key",
                      "virtual_host": "/",
                      "exchange_type": "topic"
                    },
                    "summary": "RabbitMQ Bridge"
                  },
                  "dynamo": {
                    "value": {
                      "name": "foo",
                      "table": "mqtt",
                      "type": "dynamo",
                      "pool_size": 8,
                      "enable": true,
                      "template": "",
                      "url": "http://127.0.0.1:8000",
                      "aws_secret_access_key": "******",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "aws_access_key_id": "root"
                    },
                    "summary": "DynamoDB Bridge"
                  },
                  "tdengine": {
                    "value": {
                      "name": "foo",
                      "type": "tdengine",
                      "pool_size": 8,
                      "server": "127.0.0.1:6041",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "TDengine Bridge"
                  },
                  "mongodb_single": {
                    "value": {
                      "name": "mongodb_single_demo",
                      "type": "mongodb_single",
                      "pool_size": 8,
                      "server": "localhost:27017",
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "collection": "mycol",
                      "w_mode": "safe",
                      "srv_record": false,
                      "mongo_type": "single"
                    },
                    "summary": "MongoDB (Standalone) Bridge"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "demo",
                      "type": "greptimedb",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:4001",
                      "enable": true,
                      "precision": "ms",
                      "password": "******",
                      "username": "example_username",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "dbname": "example_db",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                    },
                    "summary": "Greptimedb HTTP API V2 Bridge"
                  },
                  "opents": {
                    "value": {
                      "name": "foo",
                      "type": "opents",
                      "pool_size": 8,
                      "server": "http://127.0.0.1:4242",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "enabledb": true
                    },
                    "summary": "OpenTSDB Bridge"
                  },
                  "mongodb_sharded": {
                    "value": {
                      "name": "mongodb_sharded_demo",
                      "type": "mongodb_sharded",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "servers": "localhost:27017, localhost:27018",
                      "collection": "mycol",
                      "w_mode": "safe",
                      "srv_record": false,
                      "mongo_type": "sharded"
                    },
                    "summary": "MongoDB (Sharded) Bridge"
                  },
                  "mongodb_rs": {
                    "value": {
                      "name": "mongodb_rs_demo",
                      "type": "mongodb_rs",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "servers": "localhost:27017, localhost:27018",
                      "collection": "mycol",
                      "r_mode": "safe",
                      "w_mode": "safe",
                      "replica_set_name": "rs",
                      "srv_record": false,
                      "mongo_type": "rs"
                    },
                    "summary": "MongoDB (Replica Set) Bridge"
                  },
                  "oracle": {
                    "value": {
                      "name": "foo",
                      "type": "oracle",
                      "pool_size": 8,
                      "server": "127.0.0.1:1521",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "service_name": "ORCL",
                      "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "sid": "ORCL"
                    },
                    "summary": "Oracle Database Bridge"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "demo",
                      "stream": "stream",
                      "type": "hstreamdb",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "direction": "egress",
                      "url": "http://127.0.0.1:6570",
                      "resource_opts": {
                        "batch_size": 100,
                        "query_mode": "sync",
                        "batch_time": "20ms"
                      },
                      "record_template": "{ \"temperature\": ${payload.temperature}, \"humidity\": ${payload.humidity} }"
                    },
                    "summary": "HStreamDB Bridge"
                  },
                  "influxdb_api_v1": {
                    "value": {
                      "name": "demo",
                      "type": "influxdb_api_v1",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "precision": "ms",
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}",
                      "influxdb_type": "influxdb_api_v1"
                    },
                    "summary": "InfluxDB HTTP API V1 Bridge"
                  },
                  "gcp_pubsub": {
                    "value": {
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      },
                      "pubsub_topic": "mytopic"
                    },
                    "summary": "GCP PubSub Producer Bridge"
                  },
                  "redis_single": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_single",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "server": "127.0.0.1:6379",
                      "enable": true,
                      "password": "******",
                      "database": 1,
                      "resource_opts": {
                        "batch_size": 1,
                        "batch_time": "20ms"
                      },
                      "redis_type": "single",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Single Node Bridge"
                  },
                  "mqtt_example": {
                    "value": {
                      "name": "mqtt_example",
                      "type": "mqtt",
                      "keepalive": "300s",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:1883",
                      "enable": true,
                      "password": "******",
                      "username": "foo",
                      "proto_ver": "v4",
                      "clean_start": true,
                      "retry_interval": "15s",
                      "max_inflight": 100,
                      "resource_opts": {
                        "query_mode": "sync",
                        "max_buffer_bytes": 104857600,
                        "health_check_interval": "15s"
                      },
                      "ingress": {
                        "local": {
                          "retain": "${retain}",
                          "payload": "${payload}",
                          "topic": "from_aws/${topic}",
                          "qos": "${qos}"
                        },
                        "remote": {
                          "topic": "aws/#",
                          "qos": 1
                        }
                      },
                      "egress": {
                        "local": {
                          "topic": "emqx/#"
                        },
                        "remote": {
                          "retain": false,
                          "payload": "${payload}",
                          "topic": "from_emqx/${topic}",
                          "qos": "${qos}"
                        }
                      }
                    },
                    "summary": "MQTT Bridge"
                  },
                  "cassandra": {
                    "value": {
                      "name": "foo",
                      "type": "cassandra",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
                      "servers": "127.0.0.1:9042",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "keyspace": "mqtt"
                    },
                    "summary": "Cassandra Bridge"
                  },
                  "gcp_pubsub_consumer": {
                    "value": {
                      "connect_timeout": "15s",
                      "consumer": {
                        "topic_mapping": [
                          {
                            "qos": 1,
                            "mqtt_topic": "mqtt/topic/1",
                            "payload_template": "${.}",
                            "pubsub_topic": "pubsub-topic-1"
                          },
                          {
                            "qos": 2,
                            "mqtt_topic": "mqtt/topic/2",
                            "payload_template": "v = ${.value}, a = ${.attributes}, o = ${.ordering_key}",
                            "pubsub_topic": "pubsub-topic-2"
                          }
                        ],
                        "pull_max_messages": 100
                      },
                      "resource_opts": {
                        "request_ttl": "20s"
                      },
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Consumer Bridge"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "foo",
                      "type": "clickhouse",
                      "pool_size": 8,
                      "server": "127.0.0.1:8123",
                      "enable": true,
                      "password": "******",
                      "username": "default",
                      "database": "mqtt",
                      "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "batch_value_separator": ", "
                    },
                    "summary": "Clickhouse Bridge"
                  },
                  "sqlserver": {
                    "value": {
                      "driver": "ms-sql",
                      "name": "bar",
                      "type": "sqlserver",
                      "pool_size": 8,
                      "server": "127.0.0.1:1433",
                      "enable": true,
                      "password": "******",
                      "username": "sa",
                      "database": "test",
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Microsoft SQL Server Bridge"
                  },
                  "matrix": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "matrix",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Matrix Bridge"
                  },
                  "kafka_consumer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "kafka": {
                        "max_batch_bytes": "896KB",
                        "offset_reset_policy": "latest",
                        "offset_commit_interval_seconds": 5
                      },
                      "min_metadata_refresh_interval": "3s",
                      "topic_mapping": [
                        {
                          "qos": 1,
                          "mqtt_topic": "mqtt/topic/${.offset}",
                          "payload_template": "${.}",
                          "kafka_topic": "kafka-topic-1"
                        },
                        {
                          "qos": 2,
                          "mqtt_topic": "mqtt/topic/2",
                          "payload_template": "v = ${.value}",
                          "kafka_topic": "kafka-topic-2"
                        }
                      ],
                      "bootstrap_hosts": "localhost:9092",
                      "value_encoding_mode": "none",
                      "key_encoding_mode": "none",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Kafka Consumer Bridge"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "foo",
                      "type": "rocketmq",
                      "server": "127.0.0.1:9876",
                      "enable": true,
                      "template": "",
                      "topic": "TopicTest",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "RocketMQ Bridge"
                  },
                  "timescale": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "timescale",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Timescale Bridge"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_consumer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_gcp_pubsub.get_consumer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_single"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_gcp_pubsub.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_api_v1"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_rs"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_opents.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_grpc_v1"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_single"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_tdengine.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pgsql.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pulsar.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_iotdb.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_api_v2"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "通过 Id 更新数据桥接",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID ， 格式为 {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          }
        ],
        "summary": "Update bridge",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "influxdb_api_v2": {
                    "value": {
                      "name": "demo",
                      "type": "influxdb_api_v2",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "precision": "ms",
                      "org": "examlpe_org",
                      "token": "example_token",
                      "bucket": "example_bucket",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}",
                      "influxdb_type": "influxdb_api_v2"
                    },
                    "summary": "InfluxDB HTTP API V2 Bridge"
                  },
                  "iotdb": {
                    "value": {
                      "name": "My IoTDB Bridge",
                      "type": "iotdb",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "*****",
                        "username": "root"
                      },
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "base_url": "http://iotdb.local:18080/",
                      "pool_type": "random",
                      "resource_opts": {
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "health_check_interval": "15s"
                      },
                      "enable_pipelining": 100,
                      "iotdb_version": "v1.1.x",
                      "device_id": "my_device",
                      "is_aligned": false
                    },
                    "summary": "Apache IoTDB Bridge"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "memory_overload_protection": true,
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB"
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_batch_bytes": "896KB",
                        "partition_count_refresh_interval": "60s",
                        "kafka_header_value_encode_mode": "none",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_headers": "${.pub_props}",
                        "partition_strategy": "random"
                      },
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic",
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Azure Event Hub Producer Bridge"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic",
                      "kafka": {
                        "message": {
                          "timestamp": "${.timestamp}",
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "memory_overload_protection": true,
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB"
                        },
                        "compression": "no_compression",
                        "topic": "kafka-topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_batch_bytes": "896KB",
                        "partitions_limit": "all_partitions",
                        "partition_count_refresh_interval": "60s",
                        "kafka_header_value_encode_mode": "none",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_headers": "${pub_props}",
                        "partition_strategy": "random"
                      },
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "localhost:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Kafka Producer Bridge"
                  },
                  "redis_sentinel": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_sentinel",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "database": 1,
                      "servers": [
                        "127.0.0.1:26379"
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "batch_time": "20ms"
                      },
                      "sentinel": "mymaster",
                      "redis_type": "sentinel",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Sentinel Bridge"
                  },
                  "pulsar_producer": {
                    "value": {
                      "authentication": "none",
                      "batch_size": 1,
                      "buffer": {
                        "memory_overload_protection": true,
                        "mode": "memory",
                        "per_partition_limit": "10MB",
                        "segment_bytes": "5MB"
                      },
                      "compression": "no_compression",
                      "enable": true,
                      "local_topic": "mqtt/topic/-576460752303423482",
                      "max_batch_bytes": "900KB",
                      "message": {
                        "key": "${.clientid}",
                        "value": "${.}"
                      },
                      "name": "pulsar_example_name",
                      "pulsar_topic": "pulsar_example_topic",
                      "retention_period": "infinity",
                      "send_buffer": "1MB",
                      "servers": "pulsar://127.0.0.1:6650",
                      "ssl": {
                        "enable": false,
                        "server_name_indication": "auto",
                        "verify": "verify_none"
                      },
                      "strategy": "key_dispatch",
                      "sync_timeout": "5s",
                      "type": "pulsar_producer"
                    },
                    "summary": "Pulsar Producer Bridge"
                  },
                  "pgsql": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "pgsql",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "PostgreSQL Bridge"
                  },
                  "redis_cluster": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_cluster",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "servers": [
                        "127.0.0.1:6379"
                      ],
                      "resource_opts": {},
                      "redis_type": "cluster",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Cluster Bridge"
                  },
                  "mysql": {
                    "value": {
                      "name": "foo",
                      "type": "mysql",
                      "pool_size": 8,
                      "server": "127.0.0.1:3306",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "test",
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "MySQL Bridge"
                  },
                  "kinesis_producer": {
                    "value": {
                      "name": "foo",
                      "type": "kinesis_producer",
                      "enable": true,
                      "max_retries": 3,
                      "aws_secret_access_key": "******",
                      "resource_opts": {
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 104857600,
                        "inflight_window": 100,
                        "health_check_interval": 15000
                      },
                      "endpoint": "https://kinesis.us-east-1.amazonaws.com",
                      "partition_key": "key",
                      "aws_access_key_id": "aws_access_key_id",
                      "stream_name": "stream_name"
                    },
                    "summary": "Amazon Kinesis Producer Bridge"
                  },
                  "http_example": {
                    "value": {
                      "name": "http_example",
                      "type": "http",
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "15s",
                      "pool_size": 4,
                      "enable": true,
                      "body": "${payload}",
                      "url": "http://localhost:9901/messages/${topic}",
                      "method": "post",
                      "max_retries": 3,
                      "request_timeout": "15s",
                      "pool_type": "random",
                      "resource_opts": {
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 104857600,
                        "inflight_window": 100,
                        "health_check_interval": 15000
                      },
                      "enable_pipelining": 100,
                      "local_topic": "emqx_http/#"
                    },
                    "summary": "HTTP"
                  },
                  "rabbitmq": {
                    "value": {
                      "timeout": 5,
                      "name": "foo",
                      "port": 5672,
                      "type": "rabbitmq",
                      "exchange": "messages",
                      "pool_size": 8,
                      "server": "localhost",
                      "enable": true,
                      "password": "******",
                      "username": "guest",
                      "heartbeat": "30s",
                      "durable": false,
                      "auto_reconnect": "2s",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "payload_template": "",
                      "routing_key": "my_routing_key",
                      "virtual_host": "/",
                      "exchange_type": "topic"
                    },
                    "summary": "RabbitMQ Bridge"
                  },
                  "dynamo": {
                    "value": {
                      "name": "foo",
                      "table": "mqtt",
                      "type": "dynamo",
                      "pool_size": 8,
                      "enable": true,
                      "template": "",
                      "url": "http://127.0.0.1:8000",
                      "aws_secret_access_key": "******",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "aws_access_key_id": "root"
                    },
                    "summary": "DynamoDB Bridge"
                  },
                  "tdengine": {
                    "value": {
                      "name": "foo",
                      "type": "tdengine",
                      "pool_size": 8,
                      "server": "127.0.0.1:6041",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "TDengine Bridge"
                  },
                  "mongodb_single": {
                    "value": {
                      "name": "mongodb_single_demo",
                      "type": "mongodb_single",
                      "pool_size": 8,
                      "server": "localhost:27017",
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "collection": "mycol",
                      "w_mode": "safe",
                      "srv_record": false,
                      "mongo_type": "single"
                    },
                    "summary": "MongoDB (Standalone) Bridge"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "demo",
                      "type": "greptimedb",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:4001",
                      "enable": true,
                      "precision": "ms",
                      "password": "******",
                      "username": "example_username",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "dbname": "example_db",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                    },
                    "summary": "Greptimedb HTTP API V2 Bridge"
                  },
                  "opents": {
                    "value": {
                      "name": "foo",
                      "type": "opents",
                      "pool_size": 8,
                      "server": "http://127.0.0.1:4242",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "enabledb": true
                    },
                    "summary": "OpenTSDB Bridge"
                  },
                  "mongodb_sharded": {
                    "value": {
                      "name": "mongodb_sharded_demo",
                      "type": "mongodb_sharded",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "servers": "localhost:27017, localhost:27018",
                      "collection": "mycol",
                      "w_mode": "safe",
                      "srv_record": false,
                      "mongo_type": "sharded"
                    },
                    "summary": "MongoDB (Sharded) Bridge"
                  },
                  "mongodb_rs": {
                    "value": {
                      "name": "mongodb_rs_demo",
                      "type": "mongodb_rs",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "servers": "localhost:27017, localhost:27018",
                      "collection": "mycol",
                      "r_mode": "safe",
                      "w_mode": "safe",
                      "replica_set_name": "rs",
                      "srv_record": false,
                      "mongo_type": "rs"
                    },
                    "summary": "MongoDB (Replica Set) Bridge"
                  },
                  "oracle": {
                    "value": {
                      "name": "foo",
                      "type": "oracle",
                      "pool_size": 8,
                      "server": "127.0.0.1:1521",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "service_name": "ORCL",
                      "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "sid": "ORCL"
                    },
                    "summary": "Oracle Database Bridge"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "demo",
                      "stream": "stream",
                      "type": "hstreamdb",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "direction": "egress",
                      "url": "http://127.0.0.1:6570",
                      "resource_opts": {
                        "batch_size": 100,
                        "query_mode": "sync",
                        "batch_time": "20ms"
                      },
                      "record_template": "{ \"temperature\": ${payload.temperature}, \"humidity\": ${payload.humidity} }"
                    },
                    "summary": "HStreamDB Bridge"
                  },
                  "influxdb_api_v1": {
                    "value": {
                      "name": "demo",
                      "type": "influxdb_api_v1",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "precision": "ms",
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}",
                      "influxdb_type": "influxdb_api_v1"
                    },
                    "summary": "InfluxDB HTTP API V1 Bridge"
                  },
                  "gcp_pubsub": {
                    "value": {
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      },
                      "pubsub_topic": "mytopic"
                    },
                    "summary": "GCP PubSub Producer Bridge"
                  },
                  "redis_single": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_single",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "server": "127.0.0.1:6379",
                      "enable": true,
                      "password": "******",
                      "database": 1,
                      "resource_opts": {
                        "batch_size": 1,
                        "batch_time": "20ms"
                      },
                      "redis_type": "single",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Single Node Bridge"
                  },
                  "mqtt_example": {
                    "value": {
                      "name": "mqtt_example",
                      "type": "mqtt",
                      "keepalive": "300s",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:1883",
                      "enable": true,
                      "password": "******",
                      "username": "foo",
                      "proto_ver": "v4",
                      "clean_start": true,
                      "retry_interval": "15s",
                      "max_inflight": 100,
                      "resource_opts": {
                        "query_mode": "sync",
                        "max_buffer_bytes": 104857600,
                        "health_check_interval": "15s"
                      },
                      "ingress": {
                        "local": {
                          "retain": "${retain}",
                          "payload": "${payload}",
                          "topic": "from_aws/${topic}",
                          "qos": "${qos}"
                        },
                        "remote": {
                          "topic": "aws/#",
                          "qos": 1
                        }
                      },
                      "egress": {
                        "local": {
                          "topic": "emqx/#"
                        },
                        "remote": {
                          "retain": false,
                          "payload": "${payload}",
                          "topic": "from_emqx/${topic}",
                          "qos": "${qos}"
                        }
                      }
                    },
                    "summary": "MQTT Bridge"
                  },
                  "cassandra": {
                    "value": {
                      "name": "foo",
                      "type": "cassandra",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
                      "servers": "127.0.0.1:9042",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "keyspace": "mqtt"
                    },
                    "summary": "Cassandra Bridge"
                  },
                  "gcp_pubsub_consumer": {
                    "value": {
                      "connect_timeout": "15s",
                      "consumer": {
                        "topic_mapping": [
                          {
                            "qos": 1,
                            "mqtt_topic": "mqtt/topic/1",
                            "payload_template": "${.}",
                            "pubsub_topic": "pubsub-topic-1"
                          },
                          {
                            "qos": 2,
                            "mqtt_topic": "mqtt/topic/2",
                            "payload_template": "v = ${.value}, a = ${.attributes}, o = ${.ordering_key}",
                            "pubsub_topic": "pubsub-topic-2"
                          }
                        ],
                        "pull_max_messages": 100
                      },
                      "resource_opts": {
                        "request_ttl": "20s"
                      },
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Consumer Bridge"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "foo",
                      "type": "clickhouse",
                      "pool_size": 8,
                      "server": "127.0.0.1:8123",
                      "enable": true,
                      "password": "******",
                      "username": "default",
                      "database": "mqtt",
                      "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "batch_value_separator": ", "
                    },
                    "summary": "Clickhouse Bridge"
                  },
                  "sqlserver": {
                    "value": {
                      "driver": "ms-sql",
                      "name": "bar",
                      "type": "sqlserver",
                      "pool_size": 8,
                      "server": "127.0.0.1:1433",
                      "enable": true,
                      "password": "******",
                      "username": "sa",
                      "database": "test",
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Microsoft SQL Server Bridge"
                  },
                  "matrix": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "matrix",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Matrix Bridge"
                  },
                  "kafka_consumer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "kafka": {
                        "max_batch_bytes": "896KB",
                        "offset_reset_policy": "latest",
                        "offset_commit_interval_seconds": 5
                      },
                      "min_metadata_refresh_interval": "3s",
                      "topic_mapping": [
                        {
                          "qos": 1,
                          "mqtt_topic": "mqtt/topic/${.offset}",
                          "payload_template": "${.}",
                          "kafka_topic": "kafka-topic-1"
                        },
                        {
                          "qos": 2,
                          "mqtt_topic": "mqtt/topic/2",
                          "payload_template": "v = ${.value}",
                          "kafka_topic": "kafka-topic-2"
                        }
                      ],
                      "bootstrap_hosts": "localhost:9092",
                      "value_encoding_mode": "none",
                      "key_encoding_mode": "none",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Kafka Consumer Bridge"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "foo",
                      "type": "rocketmq",
                      "server": "127.0.0.1:9876",
                      "enable": true,
                      "template": "",
                      "topic": "TopicTest",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "RocketMQ Bridge"
                  },
                  "timescale": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "timescale",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Timescale Bridge"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_consumer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_gcp_pubsub.get_consumer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_single"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_gcp_pubsub.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_api_v1"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_rs"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_opents.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_grpc_v1"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_single"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_tdengine.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pgsql.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pulsar.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_iotdb.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_api_v2"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update bridge failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "influxdb_api_v2": {
                  "value": {
                    "name": "demo",
                    "type": "influxdb_api_v2",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "org": "examlpe_org",
                    "token": "example_token",
                    "bucket": "example_bucket",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v2"
                  },
                  "summary": "InfluxDB HTTP API V2 Bridge"
                },
                "iotdb": {
                  "value": {
                    "name": "My IoTDB Bridge",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "*****",
                      "username": "root"
                    },
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "base_url": "http://iotdb.local:18080/",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "health_check_interval": "15s"
                    },
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.1.x",
                    "device_id": "my_device",
                    "is_aligned": false
                  },
                  "summary": "Apache IoTDB Bridge"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "name": "my_azure_event_hub_producer",
                    "type": "azure_event_hub_producer",
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${.pub_props}",
                      "partition_strategy": "random"
                    },
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "local_topic": "mqtt/local/topic",
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Azure Event Hub Producer Bridge"
                },
                "kafka_producer": {
                  "value": {
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "local_topic": "mqtt/local/topic",
                    "kafka": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partitions_limit": "all_partitions",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${pub_props}",
                      "partition_strategy": "random"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Kafka Producer Bridge"
                },
                "redis_sentinel": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "servers": [
                      "127.0.0.1:26379"
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "sentinel": "mymaster",
                    "redis_type": "sentinel",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Sentinel Bridge"
                },
                "pulsar_producer": {
                  "value": {
                    "authentication": "none",
                    "batch_size": 1,
                    "buffer": {
                      "memory_overload_protection": true,
                      "mode": "memory",
                      "per_partition_limit": "10MB",
                      "segment_bytes": "5MB"
                    },
                    "compression": "no_compression",
                    "enable": true,
                    "local_topic": "mqtt/topic/-576460752303423482",
                    "max_batch_bytes": "900KB",
                    "message": {
                      "key": "${.clientid}",
                      "value": "${.}"
                    },
                    "name": "pulsar_example_name",
                    "pulsar_topic": "pulsar_example_topic",
                    "retention_period": "infinity",
                    "send_buffer": "1MB",
                    "servers": "pulsar://127.0.0.1:6650",
                    "ssl": {
                      "enable": false,
                      "server_name_indication": "auto",
                      "verify": "verify_none"
                    },
                    "strategy": "key_dispatch",
                    "sync_timeout": "5s",
                    "type": "pulsar_producer"
                  },
                  "summary": "Pulsar Producer Bridge"
                },
                "pgsql": {
                  "value": {
                    "name": "foo",
                    "type": "pgsql",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "PostgreSQL Bridge"
                },
                "redis_cluster": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "servers": [
                      "127.0.0.1:6379"
                    ],
                    "resource_opts": {},
                    "redis_type": "cluster",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Cluster Bridge"
                },
                "mysql": {
                  "value": {
                    "name": "foo",
                    "type": "mysql",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "MySQL Bridge"
                },
                "kinesis_producer": {
                  "value": {
                    "name": "foo",
                    "type": "kinesis_producer",
                    "enable": true,
                    "max_retries": 3,
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "endpoint": "https://kinesis.us-east-1.amazonaws.com",
                    "partition_key": "key",
                    "aws_access_key_id": "aws_access_key_id",
                    "stream_name": "stream_name"
                  },
                  "summary": "Amazon Kinesis Producer Bridge"
                },
                "http_example": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "15s",
                    "pool_size": 4,
                    "enable": true,
                    "body": "${payload}",
                    "url": "http://localhost:9901/messages/${topic}",
                    "method": "post",
                    "max_retries": 3,
                    "request_timeout": "15s",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "enable_pipelining": 100,
                    "local_topic": "emqx_http/#"
                  },
                  "summary": "HTTP"
                },
                "rabbitmq": {
                  "value": {
                    "timeout": 5,
                    "name": "foo",
                    "port": 5672,
                    "type": "rabbitmq",
                    "exchange": "messages",
                    "pool_size": 8,
                    "server": "localhost",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "heartbeat": "30s",
                    "durable": false,
                    "auto_reconnect": "2s",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "payload_template": "",
                    "routing_key": "my_routing_key",
                    "virtual_host": "/",
                    "exchange_type": "topic"
                  },
                  "summary": "RabbitMQ Bridge"
                },
                "dynamo": {
                  "value": {
                    "name": "foo",
                    "table": "mqtt",
                    "type": "dynamo",
                    "pool_size": 8,
                    "enable": true,
                    "template": "",
                    "url": "http://127.0.0.1:8000",
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "aws_access_key_id": "root"
                  },
                  "summary": "DynamoDB Bridge"
                },
                "tdengine": {
                  "value": {
                    "name": "foo",
                    "type": "tdengine",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "TDengine Bridge"
                },
                "mongodb_single": {
                  "value": {
                    "name": "mongodb_single_demo",
                    "type": "mongodb_single",
                    "pool_size": 8,
                    "server": "localhost:27017",
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "single"
                  },
                  "summary": "MongoDB (Standalone) Bridge"
                },
                "greptimedb": {
                  "value": {
                    "name": "demo",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                  },
                  "summary": "Greptimedb HTTP API V2 Bridge"
                },
                "opents": {
                  "value": {
                    "name": "foo",
                    "type": "opents",
                    "pool_size": 8,
                    "server": "http://127.0.0.1:4242",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "enabledb": true
                  },
                  "summary": "OpenTSDB Bridge"
                },
                "mongodb_sharded": {
                  "value": {
                    "name": "mongodb_sharded_demo",
                    "type": "mongodb_sharded",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "sharded"
                  },
                  "summary": "MongoDB (Sharded) Bridge"
                },
                "mongodb_rs": {
                  "value": {
                    "name": "mongodb_rs_demo",
                    "type": "mongodb_rs",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "r_mode": "safe",
                    "w_mode": "safe",
                    "replica_set_name": "rs",
                    "srv_record": false,
                    "mongo_type": "rs"
                  },
                  "summary": "MongoDB (Replica Set) Bridge"
                },
                "oracle": {
                  "value": {
                    "name": "foo",
                    "type": "oracle",
                    "pool_size": 8,
                    "server": "127.0.0.1:1521",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "service_name": "ORCL",
                    "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "sid": "ORCL"
                  },
                  "summary": "Oracle Database Bridge"
                },
                "hstreamdb": {
                  "value": {
                    "name": "demo",
                    "stream": "stream",
                    "type": "hstreamdb",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "direction": "egress",
                    "url": "http://127.0.0.1:6570",
                    "resource_opts": {
                      "batch_size": 100,
                      "query_mode": "sync",
                      "batch_time": "20ms"
                    },
                    "record_template": "{ \"temperature\": ${payload.temperature}, \"humidity\": ${payload.humidity} }"
                  },
                  "summary": "HStreamDB Bridge"
                },
                "influxdb_api_v1": {
                  "value": {
                    "name": "demo",
                    "type": "influxdb_api_v1",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "database": "example_database",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v1"
                  },
                  "summary": "InfluxDB HTTP API V1 Bridge"
                },
                "gcp_pubsub": {
                  "value": {
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    },
                    "pubsub_topic": "mytopic"
                  },
                  "summary": "GCP PubSub Producer Bridge"
                },
                "redis_single": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "server": "127.0.0.1:6379",
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "redis_type": "single",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Single Node Bridge"
                },
                "mqtt_example": {
                  "value": {
                    "keepalive": "300s",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:1883",
                    "enable": true,
                    "password": "******",
                    "username": "foo",
                    "proto_ver": "v4",
                    "clean_start": true,
                    "retry_interval": "15s",
                    "max_inflight": 100,
                    "resource_opts": {
                      "query_mode": "sync",
                      "max_buffer_bytes": 104857600,
                      "health_check_interval": "15s"
                    },
                    "ingress": {
                      "local": {
                        "retain": "${retain}",
                        "payload": "${payload}",
                        "topic": "from_aws/${topic}",
                        "qos": "${qos}"
                      },
                      "remote": {
                        "topic": "aws/#",
                        "qos": 1
                      }
                    },
                    "egress": {
                      "local": {
                        "topic": "emqx/#"
                      },
                      "remote": {
                        "retain": false,
                        "payload": "${payload}",
                        "topic": "from_emqx/${topic}",
                        "qos": "${qos}"
                      }
                    }
                  },
                  "summary": "MQTT Bridge"
                },
                "cassandra": {
                  "value": {
                    "name": "foo",
                    "type": "cassandra",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
                    "servers": "127.0.0.1:9042",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "keyspace": "mqtt"
                  },
                  "summary": "Cassandra Bridge"
                },
                "gcp_pubsub_consumer": {
                  "value": {
                    "connect_timeout": "15s",
                    "consumer": {
                      "topic_mapping": [
                        {
                          "qos": 1,
                          "mqtt_topic": "mqtt/topic/1",
                          "payload_template": "${.}",
                          "pubsub_topic": "pubsub-topic-1"
                        },
                        {
                          "qos": 2,
                          "mqtt_topic": "mqtt/topic/2",
                          "payload_template": "v = ${.value}, a = ${.attributes}, o = ${.ordering_key}",
                          "pubsub_topic": "pubsub-topic-2"
                        }
                      ],
                      "pull_max_messages": 100
                    },
                    "resource_opts": {
                      "request_ttl": "20s"
                    },
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Consumer Bridge"
                },
                "clickhouse": {
                  "value": {
                    "name": "foo",
                    "type": "clickhouse",
                    "pool_size": 8,
                    "server": "127.0.0.1:8123",
                    "enable": true,
                    "password": "******",
                    "username": "default",
                    "database": "mqtt",
                    "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "batch_value_separator": ", "
                  },
                  "summary": "Clickhouse Bridge"
                },
                "sqlserver": {
                  "value": {
                    "driver": "ms-sql",
                    "name": "bar",
                    "type": "sqlserver",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "enable": true,
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Microsoft SQL Server Bridge"
                },
                "matrix": {
                  "value": {
                    "name": "foo",
                    "type": "matrix",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Matrix Bridge"
                },
                "kafka_consumer": {
                  "value": {
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "kafka": {
                      "max_batch_bytes": "896KB",
                      "offset_reset_policy": "latest",
                      "offset_commit_interval_seconds": 5
                    },
                    "min_metadata_refresh_interval": "3s",
                    "topic_mapping": [
                      {
                        "qos": 1,
                        "mqtt_topic": "mqtt/topic/${.offset}",
                        "payload_template": "${.}",
                        "kafka_topic": "kafka-topic-1"
                      },
                      {
                        "qos": 2,
                        "mqtt_topic": "mqtt/topic/2",
                        "payload_template": "v = ${.value}",
                        "kafka_topic": "kafka-topic-2"
                      }
                    ],
                    "bootstrap_hosts": "localhost:9092",
                    "value_encoding_mode": "none",
                    "key_encoding_mode": "none",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Kafka Consumer Bridge"
                },
                "rocketmq": {
                  "value": {
                    "name": "foo",
                    "type": "rocketmq",
                    "server": "127.0.0.1:9876",
                    "enable": true,
                    "template": "",
                    "topic": "TopicTest",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "RocketMQ Bridge"
                },
                "timescale": {
                  "value": {
                    "name": "foo",
                    "type": "timescale",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Timescale Bridge"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_kafka.put_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_timescale.put"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.put_consumer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_gcp_pubsub.put_consumer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.put_single"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_gcp_pubsub.put_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.put_api_v1"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.put_rs"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.put_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_opents.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.put_grpc_v1"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.put_single"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_tdengine.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.put_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.put_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pgsql.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pulsar.put_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.put_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.put_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_iotdb.put"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.put_api_v2"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "通过 Id 删除数据桥接",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID ， 格式为 {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          }
        ],
        "summary": "Delete bridge",
        "responses": {
          "204": {
            "description": "Bridge deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "Dependent Rule IDs",
                      "items": {
                        "type": "string"
                      }
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cannot delete bridge while active rules are defined for this bridge"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/dashboard": {
      "get": {
        "description": "Get the sub-configurations under *dashboard*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "summary": "Get the sub-configurations under *dashboard*",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dashboard.dashboard"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "config not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *dashboard*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "summary": "Update the sub-configurations under *dashboard*",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dashboard.dashboard"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dashboard.dashboard"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/clients/{clientid}/subscriptions": {
      "get": {
        "description": "获取某客户端的主题订阅列表",
        "tags": [
          "Gateway Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "description": "客户端 ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "description": "网关名称",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            }
          }
        ],
        "summary": "List client's subscription",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "general_subscription_list": {
                    "value": [
                      {
                        "nl": 0,
                        "topic": "test/topic",
                        "qos": 1,
                        "rap": 0,
                        "rh": 0
                      }
                    ],
                    "summary": "A general subscription list"
                  },
                  "stomp_subscription_list": {
                    "value": [
                      "example_stomp_subscription"
                    ],
                    "summary": "The STOMP subscription list"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_gateway_api_clients.subscription"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "为某客户端新增订阅关系",
        "tags": [
          "Gateway Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "description": "客户端 ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "description": "网关名称",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            }
          }
        ],
        "summary": "Add subscription for client",
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "general_subscription": {
                    "value": {
                      "nl": 0,
                      "topic": "test/topic",
                      "qos": 1,
                      "rap": 0,
                      "rh": 0
                    },
                    "summary": "A general subscription"
                  },
                  "stomp_subscription": {
                    "value": {
                      "nl": 0,
                      "topic": "stomp/topic",
                      "qos": 1,
                      "rap": 0,
                      "rh": 0,
                      "sub_props": {
                        "subid": "10"
                      }
                    },
                    "summary": "A STOMP subscription"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_gateway_api_clients.subscription"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "general_subscription": {
                  "value": {
                    "nl": 0,
                    "topic": "test/topic",
                    "qos": 1,
                    "rap": 0,
                    "rh": 0
                  },
                  "summary": "A general subscription"
                },
                "stomp_subscription": {
                  "value": {
                    "nl": 0,
                    "topic": "stomp/topic",
                    "qos": 1,
                    "rap": 0,
                    "rh": 0,
                    "sub_props": {
                      "subid": "10"
                    }
                  },
                  "summary": "A STOMP subscription"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_gateway_api_clients.subscription"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/{node}/invite": {
      "put": {
        "description": "邀请节点加入集群",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cluster.node"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster.timeout"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/load_rebalance/{node}/stop": {
      "post": {
        "description": "停止重平衡任务",
        "tags": [
          "Load Rebalance"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "节点名称",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Stop rebalancing coordinated by the node",
        "responses": {
          "200": {
            "description": "响应为空",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message_transformations/transformation/{name}": {
      "get": {
        "description": "查找一个转换",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "转换名称",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_transformation"
          }
        ],
        "summary": "Lookup a transformation",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "message_transformation": {
                    "value": {
                      "name": "my_transformation",
                      "description": "my transformation",
                      "tags": [
                        "transformation"
                      ],
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "operations": [
                        {
                          "value": "concat([topic, '/', payload.t])",
                          "key": "topic"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      },
                      "payload_decoder": {
                        "type": "json"
                      },
                      "payload_encoder": {
                        "type": "json"
                      }
                    },
                    "summary": "Simple message transformation"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/message_transformation.transformation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Transformation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除一个转换",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "转换名称",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_transformation"
          }
        ],
        "summary": "Delete a transformation",
        "responses": {
          "204": {
            "description": "Transformation deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Transformation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/topology": {
      "get": {
        "description": "获取 RLOG 集群拓扑：核心节点与副本节点之间的连接。",
        "tags": [
          "Cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cluster topology",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/cluster.core_replicants"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/retainer/messages": {
      "get": {
        "description": "查看保留消息列表",
        "tags": [
          "Retainer"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "topic",
            "description": "主题过滤器，支持通配符，省略此项以匹配所有消息。",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of the results to fetch.",
            "schema": {
              "default": 1,
              "type": "integer",
              "minimum": 1
            },
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Results per page(max 10000)",
            "schema": {
              "default": 100,
              "maximum": 10000,
              "type": "integer",
              "minimum": 1
            },
            "example": 50
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "保留消息列表",
                      "items": {
                        "$ref": "#/components/schemas/retainer.message_summary"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "不支持的后端"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除所有保留消息",
        "tags": [
          "Retainer"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/plugins/{name}/move": {
      "post": {
        "description": "Setting the boot order of plugins.",
        "tags": [
          "Plugins"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/plugins.name"
          }
        ],
        "summary": "Move plugin within plugin hierarchy",
        "responses": {
          "204": {
            "description": "Boot order changed successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "MOVE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Move failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "move_to_after": {
                  "value": {
                    "position": "after:emqx_plugin_demo-5.1-rc.2"
                  },
                  "summary": "move plugin after other plugins"
                },
                "move_to_before": {
                  "value": {
                    "position": "before:emqx_plugin_demo-5.1-rc.2"
                  },
                  "summary": "move plugin before other plugins"
                },
                "move_to_front": {
                  "value": {
                    "position": "front"
                  },
                  "summary": "move plugin on the front"
                },
                "move_to_rear": {
                  "value": {
                    "position": "rear"
                  },
                  "summary": "move plugin on the rear"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/plugins.position"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/broker": {
      "get": {
        "description": "Get the sub-configurations under *broker*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "summary": "Get the sub-configurations under *broker*",
        "responses": {
          "200": {
            "description": "Broker 相关配置项。",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.broker"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "config not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *broker*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "summary": "Update the sub-configurations under *broker*",
        "responses": {
          "200": {
            "description": "Broker 相关配置项。",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.broker"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx.broker"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/alarms": {
      "get": {
        "description": "列出当前激活的告警或历史告警，由查询参数决定。",
        "tags": [
          "Alarms"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "in": "query",
            "name": "activated",
            "description": "用于指定查询的告警类型，<br/>为 true 时返回当前激活的告警，为 false 时返回历史告警，默认为 false。",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_alarms.alarm"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除所有历史告警。",
        "tags": [
          "Alarms"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "历史告警已成功清除。"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/built_in_database/rules/users/{username}": {
      "get": {
        "description": "获取指定用户名规则",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.username"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "password_based:built_in_database": {
                    "value": {
                      "rules": [
                        {
                          "action": "publish",
                          "permission": "allow",
                          "topic": "test/topic/1"
                        },
                        {
                          "action": "subscribe",
                          "permission": "allow",
                          "topic": "test/topic/2"
                        },
                        {
                          "action": "all",
                          "permission": "deny",
                          "topic": "eq test/#"
                        },
                        {
                          "action": "publish",
                          "retain": "true",
                          "permission": "allow",
                          "topic": "test/topic/3",
                          "qos": [
                            "1"
                          ]
                        },
                        {
                          "action": "publish",
                          "retain": "all",
                          "permission": "allow",
                          "topic": "test/topic/4",
                          "qos": [
                            "0",
                            "1",
                            "2"
                          ]
                        }
                      ],
                      "username": "user1"
                    },
                    "summary": "Username"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_username"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "设置指定用户名的规则",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.username"
          }
        ],
        "responses": {
          "204": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad username or bad rule schema"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "password_based:built_in_database": {
                  "value": {
                    "rules": [
                      {
                        "action": "publish",
                        "permission": "allow",
                        "topic": "test/topic/1"
                      },
                      {
                        "action": "subscribe",
                        "permission": "allow",
                        "topic": "test/topic/2"
                      },
                      {
                        "action": "all",
                        "permission": "deny",
                        "topic": "eq test/#"
                      },
                      {
                        "action": "publish",
                        "retain": "true",
                        "permission": "allow",
                        "topic": "test/topic/3",
                        "qos": [
                          "1"
                        ]
                      },
                      {
                        "action": "publish",
                        "retain": "all",
                        "permission": "allow",
                        "topic": "test/topic/4",
                        "qos": [
                          "0",
                          "1",
                          "2"
                        ]
                      }
                    ],
                    "username": "user1"
                  },
                  "summary": "Username"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules_for_username"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除指定用户名的规则",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_authz_api_mnesia.username"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad username"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Username Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sso/saml/metadata": {
      "get": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "Dashboard 认证 Token"
                    },
                    "version": {
                      "type": "string",
                      "description": "EMQX 版本",
                      "example": "5.0.0"
                    },
                    "license": {
                      "properties": {
                        "edition": {
                          "type": "string",
                          "enum": [
                            "opensource",
                            "enterprise"
                          ],
                          "description": "EMQX License 类型。可为 opensource 或 enterprise",
                          "example": "opensource"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BACKEND_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "requestbody": {
          "content": {
            "application/xml": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        }
      }
    },
    "/sso/login/{backend}": {
      "post": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ldap",
                "saml",
                "oidc"
              ]
            },
            "example": "ldap"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "role": {
                      "default": "administrator",
                      "type": "string",
                      "description": "用户角色",
                      "example": "administrator"
                    },
                    "token": {
                      "type": "string",
                      "description": "Dashboard 认证 Token"
                    },
                    "version": {
                      "type": "string",
                      "description": "EMQX 版本",
                      "example": "5.0.0"
                    },
                    "license": {
                      "properties": {
                        "edition": {
                          "type": "string",
                          "enum": [
                            "opensource",
                            "enterprise"
                          ],
                          "description": "EMQX License 类型。可为 opensource 或 enterprise",
                          "example": "opensource"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "302": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "REDIRECT"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_USERNAME_OR_PWD"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BACKEND_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/sso.login"
                  },
                  {
                    "$ref": "#/components/schemas/dashboard.login"
                  },
                  {
                    "$ref": "#/components/schemas/sso.login"
                  }
                ]
              }
            }
          }
        },
        "security": []
      }
    },
    "/ds/storages": {
      "get": {
        "description": "List durable storages",
        "tags": [
          "Durable storage"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List durable storages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Durable storage is disabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/subscriptions": {
      "get": {
        "description": "获取集群的订阅列表。",
        "tags": [
          "Subscriptions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "in": "query",
            "name": "node",
            "description": "Node name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "in": "query",
            "name": "clientid",
            "description": "Client ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "qos",
            "description": "QoS",
            "required": false,
            "schema": {
              "maximum": 2,
              "type": "integer",
              "minimum": 0,
              "example": 0
            }
          },
          {
            "in": "query",
            "name": "topic",
            "description": "Topic, url encoding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "match_topic",
            "description": "Match topic string, url encoding",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "share_group",
            "description": "Shared subscription group name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "durable",
            "description": "Filter subscriptions by durability",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_subscriptions.subscription"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_PARAMETER"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid parameter"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NODE_DOWN"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad RPC"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ds/sites": {
      "get": {
        "description": "List sites",
        "tags": [
          "Durable storage"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List sites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Durable storage is disabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/error_codes": {
      "get": {
        "description": "API 错误码",
        "tags": [
          "Error Codes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dashboard.error_code"
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/authorization/sources/built_in_database/rules": {
      "delete": {
        "description": "清除内置数据库中的所有类型（'users' 、'clients' 、'all'）的所有规则",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/{type}/move": {
      "post": {
        "description": "更新授权器的优先执行顺序",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "description": "授权期所使用的数据源类型。",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "file",
                "built_in_database",
                "http",
                "redis",
                "mysql",
                "postgresql",
                "mongodb",
                "ldap"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "front": {
                  "value": {
                    "position": "front"
                  },
                  "summary": "front example"
                },
                "rear": {
                  "value": {
                    "position": "rear"
                  },
                  "summary": "rear example"
                },
                "relative_after": {
                  "value": {
                    "position": "after:file"
                  },
                  "summary": "relative example"
                },
                "relative_before": {
                  "value": {
                    "position": "before:file"
                  },
                  "summary": "relative example"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authz_api_sources.position"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/listeners/{id}/authentication/users/{uid}": {
      "get": {
        "description": "获取用户信息（仅支持 built_in_database 类型的认证器）",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "监听器 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "path",
            "name": "uid",
            "description": "用户 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "summary": "Get user info",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新用户信息（仅支持 built_in_database 类型的认证器）",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "监听器 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "path",
            "name": "uid",
            "description": "用户 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "summary": "Update user info",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "value": {
                    "password": "******"
                  },
                  "summary": "Update regular user"
                },
                "super_user": {
                  "value": {
                    "password": "******",
                    "is_superuser": true
                  },
                  "summary": "Update user and promote to superuser"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_update"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除用户（仅支持 built_in_database 类型的认证器）",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "监听器 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "path",
            "name": "uid",
            "description": "用户 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "summary": "Delete user",
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication": {
      "get": {
        "description": "列出全局认证的认证器。",
        "tags": [
          "Authentication"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "algorithm": "hmac-based",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  },
                  {
                    "mechanism": "password_based",
                    "backend": "built_in_database",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  },
                  {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "5s",
                    "mechanism": "password_based",
                    "pool_size": 8,
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://127.0.0.1:18083",
                    "method": "post",
                    "backend": "http",
                    "request_timeout": "5s",
                    "enable_pipelining": 100
                  },
                  {
                    "mechanism": "password_based",
                    "filter": {
                      "username": "${username}"
                    },
                    "server": "127.0.0.1:27017",
                    "database": "example",
                    "backend": "mongodb",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "collection": "users",
                    "is_superuser_field": "is_superuser",
                    "password_hash_field": "password_hash",
                    "salt_field": "salt"
                  },
                  {
                    "mechanism": "password_based",
                    "cmd": "HMGET ${username} password_hash salt",
                    "server": "127.0.0.1:6379",
                    "database": 0,
                    "backend": "redis",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single"
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/authn.kerberos"
                      },
                      {
                        "$ref": "#/components/schemas/authn.scram_restapi_post"
                      },
                      {
                        "$ref": "#/components/schemas/authn.scram_restapi_get"
                      },
                      {
                        "$ref": "#/components/schemas/authn.gcp_device"
                      },
                      {
                        "$ref": "#/components/schemas/authn.ldap_deprecated"
                      },
                      {
                        "$ref": "#/components/schemas/authn.ldap"
                      },
                      {
                        "$ref": "#/components/schemas/authn.scram"
                      },
                      {
                        "$ref": "#/components/schemas/authn.jwt_jwks"
                      },
                      {
                        "$ref": "#/components/schemas/authn.jwt_public_key"
                      },
                      {
                        "$ref": "#/components/schemas/authn.jwt_hmac"
                      },
                      {
                        "$ref": "#/components/schemas/authn.http_post"
                      },
                      {
                        "$ref": "#/components/schemas/authn.http_get"
                      },
                      {
                        "$ref": "#/components/schemas/authn.redis_sentinel"
                      },
                      {
                        "$ref": "#/components/schemas/authn.redis_cluster"
                      },
                      {
                        "$ref": "#/components/schemas/authn.redis_single"
                      },
                      {
                        "$ref": "#/components/schemas/authn.mongo_sharded"
                      },
                      {
                        "$ref": "#/components/schemas/authn.mongo_rs"
                      },
                      {
                        "$ref": "#/components/schemas/authn.mongo_single"
                      },
                      {
                        "$ref": "#/components/schemas/authn.postgresql"
                      },
                      {
                        "$ref": "#/components/schemas/authn.mysql"
                      },
                      {
                        "$ref": "#/components/schemas/authn.builtin_db"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "为全局认证链创建认证器。",
        "tags": [
          "Authentication"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "jwt": {
                    "value": {
                      "mechanism": "jwt",
                      "secret": "mysecret",
                      "algorithm": "hmac-based",
                      "secret_base64_encoded": false,
                      "use_jwks": false,
                      "verify_claims": {
                        "username": "${username}"
                      }
                    },
                    "summary": "JWT authentication"
                  },
                  "password_based:built_in_database": {
                    "value": {
                      "mechanism": "password_based",
                      "backend": "built_in_database",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "user_id_type": "username"
                    },
                    "summary": "Built-in password_based authentication"
                  },
                  "password_based:http": {
                    "value": {
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "5s",
                      "mechanism": "password_based",
                      "pool_size": 8,
                      "body": {
                        "password": "${password}",
                        "username": "${username}"
                      },
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://127.0.0.1:18083",
                      "method": "post",
                      "backend": "http",
                      "request_timeout": "5s",
                      "enable_pipelining": 100
                    },
                    "summary": "password_based authentication through external HTTP API"
                  },
                  "password_based:mongodb": {
                    "value": {
                      "mechanism": "password_based",
                      "filter": {
                        "username": "${username}"
                      },
                      "server": "127.0.0.1:27017",
                      "database": "example",
                      "backend": "mongodb",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "collection": "users",
                      "is_superuser_field": "is_superuser",
                      "password_hash_field": "password_hash",
                      "salt_field": "salt"
                    },
                    "summary": "password_based authentication with MongoDB backend"
                  },
                  "password_based:redis": {
                    "value": {
                      "mechanism": "password_based",
                      "cmd": "HMGET ${username} password_hash salt",
                      "server": "127.0.0.1:6379",
                      "database": 0,
                      "backend": "redis",
                      "password_hash_algorithm": {
                        "name": "sha256",
                        "salt_position": "suffix"
                      },
                      "redis_type": "single"
                    },
                    "summary": "password_based authentication with Redis backend"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authn.kerberos"
                    },
                    {
                      "$ref": "#/components/schemas/authn.scram_restapi_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.scram_restapi_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.gcp_device"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap_deprecated"
                    },
                    {
                      "$ref": "#/components/schemas/authn.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authn.scram"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_jwks"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_public_key"
                    },
                    {
                      "$ref": "#/components/schemas/authn.jwt_hmac"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authn.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authn.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authn.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authn.builtin_db"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "ALREADY_EXISTS"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "jwt": {
                  "value": {
                    "mechanism": "jwt",
                    "secret": "mysecret",
                    "algorithm": "hmac-based",
                    "secret_base64_encoded": false,
                    "use_jwks": false,
                    "verify_claims": {
                      "username": "${username}"
                    }
                  },
                  "summary": "JWT authentication"
                },
                "password_based:built_in_database": {
                  "value": {
                    "mechanism": "password_based",
                    "backend": "built_in_database",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "user_id_type": "username"
                  },
                  "summary": "Built-in password_based authentication"
                },
                "password_based:http": {
                  "value": {
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "5s",
                    "mechanism": "password_based",
                    "pool_size": 8,
                    "body": {
                      "password": "${password}",
                      "username": "${username}"
                    },
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://127.0.0.1:18083",
                    "method": "post",
                    "backend": "http",
                    "request_timeout": "5s",
                    "enable_pipelining": 100
                  },
                  "summary": "password_based authentication through external HTTP API"
                },
                "password_based:mongodb": {
                  "value": {
                    "mechanism": "password_based",
                    "filter": {
                      "username": "${username}"
                    },
                    "server": "127.0.0.1:27017",
                    "database": "example",
                    "backend": "mongodb",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "collection": "users",
                    "is_superuser_field": "is_superuser",
                    "password_hash_field": "password_hash",
                    "salt_field": "salt"
                  },
                  "summary": "password_based authentication with MongoDB backend"
                },
                "password_based:redis": {
                  "value": {
                    "mechanism": "password_based",
                    "cmd": "HMGET ${username} password_hash salt",
                    "server": "127.0.0.1:6379",
                    "database": 0,
                    "backend": "redis",
                    "password_hash_algorithm": {
                      "name": "sha256",
                      "salt_position": "suffix"
                    },
                    "redis_type": "single"
                  },
                  "summary": "password_based authentication with Redis backend"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authn.kerberos"
                  },
                  {
                    "$ref": "#/components/schemas/authn.scram_restapi_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.scram_restapi_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.gcp_device"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap_deprecated"
                  },
                  {
                    "$ref": "#/components/schemas/authn.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authn.scram"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_jwks"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_public_key"
                  },
                  {
                    "$ref": "#/components/schemas/authn.jwt_hmac"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authn.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authn.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authn.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authn.builtin_db_api"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}/subscribe": {
      "post": {
        "description": "订阅",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_subscriptions.subscription"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_mgmt_api_clients.subscribe"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/trace": {
      "get": {
        "description": "列出所有 trace",
        "tags": [
          "Trace"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/trace.trace"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "清除所有 trace",
        "tags": [
          "Trace"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "创建 trace",
        "tags": [
          "Trace"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/trace.trace"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_PARAMS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "invalid trace params"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS",
                        "DUPLICATE_CONDITION",
                        "BAD_TYPE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "trace already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "type"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "日志追踪的唯一名字。只允许使用小写字母 a-z、大写字母 A-Z、数字 0-9 和下划线 '_'。",
                    "example": "EMQX-TRACE-1"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "clientid",
                      "topic",
                      "ip_address",
                      "ruleid"
                    ],
                    "description": "过滤器类型",
                    "example": "clientid"
                  },
                  "topic": {
                    "type": "string",
                    "description": "如果过滤器类型为 'topic' 则该字段可以指定用于匹配的 MQTT 主题或主题过滤器。",
                    "example": "/dev/#"
                  },
                  "clientid": {
                    "type": "string",
                    "description": "如果过滤器类型为 'clientid' 则该字段可以指定用于匹配的 MQTT 客户端 ID。",
                    "example": "dev-001"
                  },
                  "ip_address": {
                    "type": "string",
                    "description": "如果过滤器类型为 'ip_address' 则该字段可以指定用于匹配的客户端 IP 地址。",
                    "example": "127.0.0.1"
                  },
                  "ruleid": {
                    "type": "string",
                    "example": "my_rule"
                  },
                  "payload_encode": {
                    "default": "text",
                    "type": "string",
                    "enum": [
                      "hex",
                      "text",
                      "hidden"
                    ],
                    "description": "Determine the format of the payload format in the trace file.<br/><br/>`text`: Text-based protocol or plain text protocol.<br/> It is recommended when payload is JSON encoded.<br/><br/>`hex`: Binary hexadecimal encode.It is recommended when payload is a custom binary protocol.<br/><br/>`hidden`: payload is obfuscated as `******`"
                  },
                  "start_at": {
                    "description": "rfc3339 或者 epoch 时间戳格式",
                    "example": "2021-11-04T18:17:38+08:00",
                    "oneOf": [
                      {
                        "type": "integer",
                        "description": "epoch-second",
                        "example": 1640995200
                      },
                      {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-01T00:00:00.000Z"
                      }
                    ]
                  },
                  "end_at": {
                    "description": "rfc3339 或者 epoch 时间戳格式",
                    "example": "2021-11-05T18:17:38+08:00",
                    "oneOf": [
                      {
                        "type": "integer",
                        "description": "epoch-second",
                        "example": 1640995200
                      },
                      {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-01T00:00:00.000Z"
                      }
                    ]
                  },
                  "formatter": {
                    "description": "用于格式化追踪日志条目的格式处理器。设置为 text 将日志条目格式化为纯文本（默认）。设置为 json 将每个日志条目格式化为 JSON 对象。",
                    "example": "text",
                    "oneOf": [
                      {
                        "type": "string",
                        "enum": [
                          "json"
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "text"
                        ]
                      }
                    ]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes/{node}/connectors/{id}/{operation}": {
      "post": {
        "description": "在特定节点上启动连接器。",
        "tags": [
          "Connectors"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "节点名称，例如 'emqx@127.0.0.1'。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "in": "path",
            "name": "id",
            "description": "连接器 id。必须是 {type}:{name} 的格式。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_connector"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "节点可用操作：'start'。",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start"
              ]
            },
            "example": "start"
          }
        ],
        "summary": "Manually start a connector on a given node",
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service or connector not enabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Connector or node not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/prometheus/message_transformation": {
      "get": {
        "description": "获取消息验证的 Prometheus 指标",
        "tags": [
          "Monitor"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_prometheus_api.mode"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Prometheus Data.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/clients/{clientid}/mqueue_messages": {
      "get": {
        "description": "获取客户端消息队列中的消息。",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "payload",
            "description": "Client's inflight/mqueue messages payload encoding. If set to `none`, no payload is returned in the response.",
            "schema": {
              "default": "base64",
              "type": "string",
              "enum": [
                "none",
                "base64",
                "plain"
              ]
            }
          },
          {
            "in": "query",
            "name": "max_payload_bytes",
            "description": "Client's inflight/mqueue messages payload limit. The total payload size of all messages in the response will not exceed this value. Messages beyond the limit will be silently omitted in the response. The only exception to this rule is when the first message payload is already larger than the limit. In this case, the first message will be returned in the response.",
            "schema": {
              "default": "1MB",
              "type": "string",
              "example": "32MB"
            }
          },
          {
            "$ref": "#/components/parameters/public.position"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "from_clientid": "mqttx_59ac0a87",
                      "from_username": "test-user",
                      "mqueue_priority": 0,
                      "msgid": "000611F460D57FA9F44500000D360002",
                      "payload": "eyJmb28iOiAiYmFyIn0=",
                      "publish_at": 1709055346487,
                      "qos": 0,
                      "topic": "t/test"
                    }
                  ],
                  "meta": {
                    "count": 100,
                    "last": "1710785444656449826_10"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.mqueue_messages"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_PARAMETER"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND",
                        "CLIENT_SHUTDOWN"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "API not implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/actions_probe": {
      "post": {
        "description": "测试创建一个新的数据桥接。",
        "tags": [
          "Actions"
        ],
        "parameters": [],
        "summary": "Test creating bridge",
        "responses": {
          "204": {
            "description": "Test bridge OK"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TEST_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "bridge test failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "http": {
                  "value": {
                    "name": "my_http_action",
                    "type": "http",
                    "enable": true,
                    "parameters": {
                      "path": "/room/${room_no}",
                      "body": "${.}",
                      "headers": {},
                      "method": "post"
                    },
                    "connector": "my_http_connector",
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "async",
                      "health_check_interval": "15s"
                    }
                  },
                  "summary": "HTTP Action"
                },
                "confluent_producer": {
                  "value": {
                    "name": "my_confluent_producer_action",
                    "type": "confluent_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${.pub_props}",
                      "partition_strategy": "random"
                    },
                    "connector": "my_confluent_producer_connector",
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Confluent Action"
                },
                "iotdb": {
                  "value": {
                    "name": "iotdb_action",
                    "type": "iotdb",
                    "description": "My example iotdb action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "timestamp": "now",
                          "value": "${st}",
                          "data_type": "BOOLEAN",
                          "measurement": "status"
                        }
                      ],
                      "device_id": "my_device",
                      "is_aligned": false
                    },
                    "connector": "iotdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Apache IoTDB Bridge"
                },
                "direct_azure_blob_storage": {
                  "value": {
                    "name": "my_action",
                    "type": "azure_blob_storage",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "direct",
                      "content": "${.payload}",
                      "blob": "${.payload.blob}",
                      "container": "${.payload.container}"
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "0ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Azure Blob Storage Direct Upload Action"
                },
                "couchbase": {
                  "value": {
                    "name": "my_action",
                    "type": "couchbase",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into mqtt (key, value) values (${.id}, ${.payload})"
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Couchbase Action"
                },
                "datalayers": {
                  "value": {
                    "name": "datalayers_action",
                    "type": "datalayers",
                    "description": "My example datalayers action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "datalayers_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Datalayers Action"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "name": "my_azure_event_hub_producer_action",
                    "type": "azure_event_hub_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${.pub_props}",
                      "partition_strategy": "random"
                    },
                    "connector": "my_azure_event_hub_producer_connector",
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Azure Event Hub Action"
                },
                "kafka_producer": {
                  "value": {
                    "name": "my_kafka_producer_action",
                    "type": "kafka_producer",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partitions_limit": "all_partitions",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${pub_props}",
                      "partition_strategy": "random"
                    },
                    "connector": "my_kafka_producer_connector",
                    "resource_opts": {
                      "health_check_interval": "32s"
                    },
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Kafka Producer Action"
                },
                "kinesis": {
                  "value": {
                    "name": "kinesis_action",
                    "type": "kinesis",
                    "description": "My example kinesis action",
                    "enable": true,
                    "parameters": {
                      "partition_key": "any_key",
                      "payload_template": "${.}",
                      "stream_name": "my_stream"
                    },
                    "connector": "kinesis_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Kinesis Action"
                },
                "pgsql": {
                  "value": {
                    "name": "my_action",
                    "type": "pgsql",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "PostgreSQL Action"
                },
                "mysql": {
                  "value": {
                    "name": "mysql_action",
                    "type": "mysql",
                    "description": "My example mysql action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))"
                    },
                    "connector": "mysql_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MySQL Action"
                },
                "mqtt": {
                  "value": {
                    "name": "mqtt_action",
                    "type": "mqtt",
                    "description": "My example mqtt action",
                    "enable": true,
                    "parameters": {
                      "retain": false,
                      "payload": "${.payload}",
                      "topic": "remote/topic",
                      "qos": 2
                    },
                    "connector": "mqtt_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MQTT Producer Action"
                },
                "rabbitmq": {
                  "value": {
                    "name": "rabbitmq_action",
                    "type": "rabbitmq",
                    "description": "My example rabbitmq action",
                    "enable": true,
                    "parameters": {
                      "exchange": "test_exchange",
                      "payload_template": "${.payload}",
                      "routing_key": "/",
                      "wait_for_publish_confirmations": true,
                      "delivery_mode": "non_persistent",
                      "publish_confirmation_timeout": "30s"
                    },
                    "connector": "rabbitmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "RabbitMQ Producer Action"
                },
                "redis": {
                  "value": {
                    "name": "my_action",
                    "type": "redis",
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "connector": "my_connector_name",
                    "resource_opts": {
                      "batch_size": 1
                    }
                  },
                  "summary": "Redis Action"
                },
                "dynamo": {
                  "value": {
                    "name": "dynamo_action",
                    "type": "dynamo",
                    "description": "My example dynamo action",
                    "enable": true,
                    "connector": "dynamo_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "hash_key": "clientid",
                      "table": "mqtt_msg",
                      "template": ""
                    }
                  },
                  "summary": "DynamoDB Action"
                },
                "tdengine": {
                  "value": {
                    "name": "tdengine_action",
                    "type": "tdengine",
                    "description": "My example tdengine action",
                    "enable": true,
                    "parameters": {
                      "database": "mqtt",
                      "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})"
                    },
                    "connector": "tdengine_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "TDengine Action"
                },
                "s3": {
                  "value": {
                    "name": "my_s3_action",
                    "type": "s3",
                    "description": "My upload action",
                    "enable": true,
                    "parameters": {
                      "mode": "direct",
                      "key": "${topic}",
                      "content": "${payload}",
                      "bucket": "${clientid}",
                      "acl": "public_read"
                    },
                    "connector": "my_s3_connector",
                    "resource_opts": {
                      "query_mode": "sync",
                      "inflight_window": 10
                    }
                  },
                  "summary": "S3 Direct Upload"
                },
                "greptimedb": {
                  "value": {
                    "name": "greptimedb_action",
                    "type": "greptimedb",
                    "description": "My example greptimedb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                    },
                    "connector": "greptimedb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "GreptimeDB Action"
                },
                "opents": {
                  "value": {
                    "name": "opents_action",
                    "type": "opents",
                    "description": "My example opents action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "value": "${value}",
                          "tags": "${tags}",
                          "metric": "${metric}"
                        }
                      ]
                    },
                    "connector": "opents_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "OpenTSDB Action"
                },
                "oracle": {
                  "value": {
                    "name": "oracle_action",
                    "type": "oracle",
                    "description": "My example oracle action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})"
                    },
                    "connector": "oracle_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Oracle Action"
                },
                "hstreamdb": {
                  "value": {
                    "name": "hstreamdb_action",
                    "type": "hstreamdb",
                    "description": "My example hstreamdb action",
                    "enable": true,
                    "connector": "hstreamdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "aggregation_pool_size": 8,
                      "partition_key": "hej",
                      "record_template": "${payload}",
                      "stream": "mqtt_message",
                      "writer_pool_size": 8
                    }
                  },
                  "summary": "HStreamDB Action"
                },
                "cassandra": {
                  "value": {
                    "name": "cassandra_action",
                    "type": "cassandra",
                    "description": "My example cassandra action",
                    "enable": true,
                    "parameters": {
                      "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})"
                    },
                    "connector": "cassandra_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Cassandra Action"
                },
                "clickhouse": {
                  "value": {
                    "name": "clickhouse_action",
                    "type": "clickhouse",
                    "description": "My example clickhouse action",
                    "enable": true,
                    "parameters": {
                      "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                      "batch_value_separator": ", "
                    },
                    "connector": "clickhouse_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "ClickHouse Action"
                },
                "influxdb": {
                  "value": {
                    "name": "influxdb_action",
                    "type": "influxdb",
                    "description": "My example influxdb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "influxdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "InfluxDB Action"
                },
                "sqlserver": {
                  "value": {
                    "name": "sqlserver_action",
                    "type": "sqlserver",
                    "description": "My example sqlserver action",
                    "enable": true,
                    "connector": "sqlserver_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )"
                    }
                  },
                  "summary": "Microsoft SQL Server Action"
                },
                "matrix": {
                  "value": {
                    "name": "my_action",
                    "type": "matrix",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "Matrix Action"
                },
                "aggregated_azure_blob_storage": {
                  "value": {
                    "name": "my_action",
                    "type": "azure_blob_storage",
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "blob": "${action}/${node}/${datetime.rfc3339}/${sequence}",
                      "container": "mycontainer",
                      "aggregation": {
                        "container": {
                          "type": "csv",
                          "column_order": [
                            "a",
                            "b"
                          ]
                        },
                        "max_records": 10000,
                        "time_interval": "4s"
                      }
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 100,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "10ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Azure Blob Storage Aggregated Upload Action"
                },
                "rocketmq": {
                  "value": {
                    "name": "rocketmq_action",
                    "type": "rocketmq",
                    "description": "My example rocketmq action",
                    "enable": true,
                    "connector": "rocketmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "refresh_interval": "3s",
                      "send_buffer": "1024KB",
                      "sync_timeout": "3s",
                      "template": "",
                      "topic": "TopicTest"
                    }
                  },
                  "summary": "RocketMQ Action"
                },
                "pulsar": {
                  "value": {
                    "name": "pulsar_action",
                    "type": "pulsar",
                    "description": "My example pulsar action",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "sync_timeout": "5s",
                      "pulsar_topic": "test_topic"
                    },
                    "connector": "pulsar_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Pulsar Producer Action"
                },
                "syskeeper_forwarder": {
                  "value": {
                    "name": "syskeeper_forwarder",
                    "type": "syskeeper_forwarder",
                    "enable": true,
                    "parameters": {
                      "template": "${payload}",
                      "target_topic": "${topic}"
                    },
                    "connector": "syskeeper_forwarder",
                    "resource_opts": {
                      "worker_pool_size": 16
                    }
                  },
                  "summary": "Syskeeper Forwarder Bridge"
                },
                "s3_aggreg": {
                  "value": {
                    "name": "my_s3_action",
                    "type": "s3",
                    "description": "My aggregated upload action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "key": "${action}/${node}/${datetime.rfc3339utc}_N${sequence}.csv",
                      "bucket": "mqtt-aggregated",
                      "acl": "public_read",
                      "aggregation": {
                        "max_records": 100000,
                        "time_interval": "15m"
                      },
                      "container": {
                        "type": "csv",
                        "column_order": [
                          "clientid",
                          "topic",
                          "publish_received_at"
                        ]
                      }
                    },
                    "connector": "my_s3_connector",
                    "resource_opts": {
                      "query_mode": "async",
                      "inflight_window": 100,
                      "health_check_interval": "10s"
                    }
                  },
                  "summary": "S3 Aggregated Upload"
                },
                "elasticsearch": {
                  "value": {
                    "name": "elasticsearch_action",
                    "type": "elasticsearch",
                    "description": "My example elasticsearch action",
                    "enable": true,
                    "parameters": {
                      "index": "${payload.index}",
                      "action": "create",
                      "doc": "${payload.doc}",
                      "overwrite": true
                    },
                    "connector": "elasticsearch_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Elastic Search Bridge"
                },
                "gcp_pubsub_producer": {
                  "value": {
                    "name": "my_action",
                    "type": "gcp_pubsub_producer",
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "payload_template": "${payload}",
                      "attributes_template": [
                        {
                          "value": "${payload.attrs.v}",
                          "key": "${payload.attrs.k}"
                        }
                      ],
                      "ordering_key_template": "${payload.ok}",
                      "pubsub_topic": "mytopic"
                    },
                    "connector": "my_connector_name",
                    "resource_opts": {
                      "batch_size": 5
                    },
                    "local_topic": "local/topic"
                  },
                  "summary": "GCP PubSub Producer Action"
                },
                "mongodb": {
                  "value": {
                    "name": "mongodb_action",
                    "type": "mongodb",
                    "description": "My example mongodb action",
                    "enable": true,
                    "parameters": {
                      "collection": "mycol"
                    },
                    "connector": "mongodb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MongoDB Action"
                },
                "timescale": {
                  "value": {
                    "name": "my_action",
                    "type": "timescale",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "Timescale Action"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_timescale.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_producer.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_elasticsearch.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/action_azure_blob_storage.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/syskeeper.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/pulsar.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_opents.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_s3.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_tdengine.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/redis.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt_publisher.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pgsql.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_datalayers.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/action_couchbase.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_iotdb.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/confluent.post_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.post_bridge_v2"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}/inflight_messages": {
      "get": {
        "description": "获取客户端未确认消息。",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "payload",
            "description": "Client's inflight/mqueue messages payload encoding. If set to `none`, no payload is returned in the response.",
            "schema": {
              "default": "base64",
              "type": "string",
              "enum": [
                "none",
                "base64",
                "plain"
              ]
            }
          },
          {
            "in": "query",
            "name": "max_payload_bytes",
            "description": "Client's inflight/mqueue messages payload limit. The total payload size of all messages in the response will not exceed this value. Messages beyond the limit will be silently omitted in the response. The only exception to this rule is when the first message payload is already larger than the limit. In this case, the first message will be returned in the response.",
            "schema": {
              "default": "1MB",
              "type": "string",
              "example": "32MB"
            }
          },
          {
            "$ref": "#/components/parameters/public.position"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "from_clientid": "mqttx_59ac0a87",
                      "from_username": "test-user",
                      "msgid": "000611F460D57FA9F44500000D360002",
                      "payload": "eyJmb28iOiAiYmFyIn0=",
                      "publish_at": 1709055346487,
                      "qos": 0,
                      "topic": "t/test"
                    }
                  ],
                  "meta": {
                    "count": 100,
                    "last": "1710785444656449826"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.inflight_messages"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_PARAMETER"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND",
                        "CLIENT_SHUTDOWN"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "API not implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/relup/status": {
      "get": {
        "description": "Get the hot upgrade status of all nodes",
        "tags": [
          "Relup"
        ],
        "parameters": [],
        "summary": "Get the hot upgrade status of all nodes",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/relup.running_status"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/exhooks/{name}/move": {
      "post": {
        "description": "移动 Exhook 服务器顺序。<br/>注意: 移动的参数只能是：front | rear | before:{name} | after:{name}",
        "tags": [
          "ExHook"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Exhook 服务器的名称",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "default"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_RPC"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad RPC"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "front": {
                  "value": {
                    "position": "front"
                  },
                  "summary": "absolute position 'front'"
                },
                "rear": {
                  "value": {
                    "position": "rear"
                  },
                  "summary": "absolute position 'rear'"
                },
                "related_after": {
                  "value": {
                    "position": "after:default"
                  },
                  "summary": "relative position 'after'"
                },
                "related_before": {
                  "value": {
                    "position": "before:default"
                  },
                  "summary": "relative position 'before'"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/exhook.move_req"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/slow_subscriptions/settings": {
      "get": {
        "description": "查看配置",
        "tags": [
          "Slow Subscriptions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/slow_subs.slow_subs"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新配置",
        "tags": [
          "Slow Subscriptions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/slow_subs.slow_subs"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/slow_subs.slow_subs"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message_transformations/transformation/{name}/enable/{enable}": {
      "post": {
        "description": "启用或停用一个特定的转换",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "转换名称",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_transformation"
          },
          {
            "in": "path",
            "name": "enable",
            "description": "启用或停用转换",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "summary": "Enable or disable transformation",
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad params"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Transformation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/prometheus/auth": {
      "get": {
        "description": "获取 AuthN、AuthZ 和 Banned 的 Prometheus 指标",
        "tags": [
          "Monitor"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/emqx_prometheus_api.mode"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Prometheus Data.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/mqtt/topic_metrics": {
      "get": {
        "description": "获取主题监控数据",
        "tags": [
          "MQTT"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "获取主题监控数据",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_topic_metrics_api.topic_metrics"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "重置主题监控数据",
        "tags": [
          "MQTT"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "重置主题监控数据"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "TOPIC_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "该主题未添加到主题监控列表中。"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "reset_all_topic_metrics": {
                  "value": {
                    "action": "reset"
                  },
                  "summary": "reset_all_topic_metrics"
                },
                "reset_specific_one_topic_metrics": {
                  "value": {
                    "action": "reset",
                    "topic": "testtopic/1"
                  },
                  "summary": "reset_specific_one_topic_metrics"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_topic_metrics_api.reset"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "添加主题监控，不支持通配符主题。",
        "tags": [
          "MQTT"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "添加主题监控，不支持通配符主题。"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST",
                        "BAD_TOPIC"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "错误请求，已存在或错误的主题名称"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "EXCEED_LIMIT"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "最多只能监控 512 个主题"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "topic"
                ],
                "properties": {
                  "topic": {
                    "type": "string",
                    "description": "主题，不支持通配符",
                    "example": "testtopic/1"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/durable_queues": {
      "get": {
        "description": "Get the list of durable queues.",
        "tags": [
          "Durable Queues"
        ],
        "parameters": [],
        "summary": "List declared durable queues",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": "queue1"
                  },
                  {
                    "id": "queue2"
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/durable_queues.durable_queue_get"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/error_codes/{code}": {
      "get": {
        "description": "API 错误码",
        "tags": [
          "Error Codes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "description": "API Error Codes",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "BAD_USERNAME_OR_PWD",
                "BAD_API_KEY_OR_SECRET",
                "BAD_REQUEST",
                "NOT_MATCH",
                "ALREADY_EXISTS",
                "BAD_CONFIG_SCHEMA",
                "BAD_LISTENER_ID",
                "BAD_NODE_NAME",
                "BAD_RPC",
                "BAD_TOPIC",
                "EXCEED_LIMIT",
                "INVALID_PARAMETER",
                "CONFLICT",
                "NO_DEFAULT_VALUE",
                "DEPENDENCY_EXISTS",
                "MESSAGE_ID_SCHEMA_ERROR",
                "INVALID_ID",
                "MESSAGE_ID_NOT_FOUND",
                "NOT_FOUND",
                "CLIENTID_NOT_FOUND",
                "CLIENT_NOT_FOUND",
                "RESOURCE_NOT_FOUND",
                "TOPIC_NOT_FOUND",
                "USER_NOT_FOUND",
                "INTERNAL_ERROR",
                "SERVICE_UNAVAILABLE",
                "SOURCE_ERROR",
                "UPDATE_FAILED",
                "REST_FAILED",
                "CLIENT_NOT_RESPONSE",
                "UNSUPPORTED_MEDIA_TYPE"
              ]
            },
            "example": "BAD_USERNAME_OR_PWD"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dashboard.error_code"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/bridges/{id}/{operation}": {
      "post": {
        "description": "停止或启用所有节点上的桥接",
        "tags": [
          "Bridges"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID ， 格式为 {type}:{name}",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:http_example"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "集群可用操作：停止、重新启动",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start",
                "stop",
                "restart"
              ]
            },
            "example": "start"
          }
        ],
        "summary": "Stop or restart bridge",
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sso/running": {
      "get": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "ldap",
                      "saml",
                      "oidc"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/gateways/{name}/clients/{clientid}/subscriptions/{topic}": {
      "delete": {
        "description": "为某客户端删除某订阅关系",
        "tags": [
          "Gateway Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "topic",
            "description": "主题过滤器或主题名称",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clientid",
            "description": "客户端 ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "description": "网关名称",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            }
          }
        ],
        "summary": "Delete client's subscription",
        "responses": {
          "204": {
            "description": "Unsubscribed"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/action_types": {
      "get": {
        "description": "列出所有可用的动作类型。",
        "tags": [
          "Actions"
        ],
        "parameters": [],
        "summary": "List available action types",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "types": {
                    "value": [
                      "http",
                      "rocketmq",
                      "cassandra",
                      "rabbitmq",
                      "iotdb",
                      "kafka_producer",
                      "syskeeper_forwarder",
                      "greptimedb",
                      "pulsar",
                      "influxdb",
                      "confluent_producer",
                      "sqlserver",
                      "gcp_pubsub_producer",
                      "mongodb",
                      "hstreamdb",
                      "azure_event_hub_producer",
                      "s3",
                      "datalayers",
                      "opents",
                      "redis",
                      "kinesis",
                      "mqtt",
                      "clickhouse",
                      "oracle",
                      "couchbase",
                      "azure_blob_storage",
                      "tdengine",
                      "timescale",
                      "matrix",
                      "elasticsearch",
                      "mysql",
                      "pgsql",
                      "dynamo"
                    ],
                    "summary": "Action types"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "http",
                      "rocketmq",
                      "cassandra",
                      "rabbitmq",
                      "iotdb",
                      "kafka_producer",
                      "syskeeper_forwarder",
                      "greptimedb",
                      "pulsar",
                      "influxdb",
                      "confluent_producer",
                      "sqlserver",
                      "gcp_pubsub_producer",
                      "mongodb",
                      "hstreamdb",
                      "azure_event_hub_producer",
                      "s3",
                      "datalayers",
                      "opents",
                      "redis",
                      "kinesis",
                      "mqtt",
                      "clickhouse",
                      "oracle",
                      "couchbase",
                      "azure_blob_storage",
                      "tdengine",
                      "timescale",
                      "matrix",
                      "elasticsearch",
                      "mysql",
                      "pgsql",
                      "dynamo"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ds/storages/{ds}/replicas": {
      "get": {
        "description": "List replicas of the durable storage",
        "tags": [
          "Durable storage"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ds",
            "description": "Durable storage ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "messages"
              ]
            },
            "example": "messages"
          }
        ],
        "responses": {
          "200": {
            "description": "List sites that contain replicas of the durable storage",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Durable storage not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Durable storage is disabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update replicas of the durable storage",
        "tags": [
          "Durable storage"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ds",
            "description": "Durable storage ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "messages"
              ]
            },
            "example": "messages"
          }
        ],
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Durable storage is disabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/delayed/messages": {
      "get": {
        "description": "查看延迟消息列表",
        "tags": [
          "MQTT"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_delayed_api.message"
                      }
                    },
                    "meta": {
                      "properties": {
                        "page": {
                          "type": "integer",
                          "description": "特定页的页码",
                          "minimum": 1
                        },
                        "limit": {
                          "type": "integer",
                          "description": "每页返回数据条目",
                          "minimum": 1
                        },
                        "count": {
                          "type": "integer",
                          "description": "延迟消息总数",
                          "minimum": 0
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/{username}": {
      "put": {
        "description": "更新 Dashboard 用户备注",
        "tags": [
          "Dashboard"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "backend",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "local",
                "ldap",
                "saml",
                "oidc"
              ]
            },
            "example": "local"
          },
          {
            "in": "path",
            "name": "username",
            "description": "Dashboard 用户名",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "admin"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Dashboard 用户名",
                      "maxLength": 100,
                      "example": "admin"
                    },
                    "role": {
                      "default": "administrator",
                      "type": "string",
                      "description": "用户角色",
                      "example": "administrator"
                    },
                    "description": {
                      "type": "string",
                      "description": "Dashboard 用户备注",
                      "example": "administrator"
                    },
                    "backend": {
                      "type": "string",
                      "description": "用户帐号来源",
                      "example": "local"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "USER_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Dashboard 用户不存在"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "role": {
                    "default": "administrator",
                    "type": "string",
                    "description": "用户角色",
                    "example": "administrator"
                  },
                  "description": {
                    "type": "string",
                    "description": "Dashboard 用户备注",
                    "example": "administrator"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除 Dashboard 用户",
        "tags": [
          "Dashboard"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "backend",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "local",
                "ldap",
                "saml",
                "oidc"
              ]
            },
            "example": "local"
          },
          {
            "in": "path",
            "name": "username",
            "description": "Dashboard 用户名",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "admin"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete User successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST",
                        "NOT_ALLOWED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "登录失败。用户名或密码错误"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "USER_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Dashboard 用户不存在"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/exhooks": {
      "get": {
        "description": "查看 ExHook 服务器列表",
        "tags": [
          "ExHook"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/exhook.detail_server_info"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "添加 ExHook 服务器",
        "tags": [
          "ExHook"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exhook.detail_server_info"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_RPC"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad RPC"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "default",
                "ssl": {
                  "cacertfile": "/etc/emqx/certs/cacert.pem",
                  "certfile": "/etc/emqx/certs/cert.pem",
                  "keyfile": "/etc/emqx/certs/key.pem",
                  "enable": false
                },
                "pool_size": 8,
                "enable": true,
                "url": "http://127.0.0.1:8081",
                "request_timeout": "5s",
                "auto_reconnect": "60s",
                "failed_action": "deny"
              },
              "schema": {
                "$ref": "#/components/schemas/exhook.server_config"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message_transformations/transformation/{name}/metrics/reset": {
      "post": {
        "description": "重置特定变换的指标",
        "tags": [
          "Message Transformation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "转换名称",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_transformation"
          }
        ],
        "summary": "Reset transformation metrics",
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Transformation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ds/sites/{site}": {
      "get": {
        "description": "Get sites",
        "tags": [
          "Durable storage"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "site",
            "description": "Site ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "AEF5701FC33AFC77"
          }
        ],
        "responses": {
          "200": {
            "description": "Get information about the site",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_ds.site"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Site not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/lwm2m/clients/{clientid}/lookup": {
      "get": {
        "description": "查看指定资源状态",
        "tags": [
          "LwM2M Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "urn:oma:lwm2m:oma:2"
          },
          {
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "/3/0/7"
          },
          {
            "in": "query",
            "name": "action",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "discover"
          }
        ],
        "summary": "List Client's Resources",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "clientid": {
                      "type": "string",
                      "example": "urn:oma:lwm2m:oma:2"
                    },
                    "path": {
                      "type": "string",
                      "example": "/3/0/7"
                    },
                    "action": {
                      "type": "string",
                      "example": "discover"
                    },
                    "codeMsg": {
                      "type": "string",
                      "example": "reply_not_received"
                    },
                    "content": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/lwm2m.resource"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENT_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/file_transfer/files": {
      "get": {
        "description": "列出已上传的所有文件",
        "tags": [
          "File Transfer"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/file_transfer.following"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "summary": "List all uploaded files",
        "responses": {
          "200": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid cursor"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/rules/{id}/metrics": {
      "get": {
        "description": "通过给定的 Id 获得规则的指标数据",
        "tags": [
          "Rules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_rule_id"
          }
        ],
        "summary": "Get rule metrics",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule_engine.rule_metrics"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Rule not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/file_transfer": {
      "get": {
        "description": "显示当前文件传输配置。",
        "tags": [
          "File Transfer"
        ],
        "parameters": [],
        "summary": "Get current File Transfer configuration",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file_transfer.file_transfer"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "替换文件传输配置。",
        "tags": [
          "File Transfer"
        ],
        "parameters": [],
        "summary": "Update File Transfer configuration",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/file_transfer.file_transfer"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Provided configuration is invalid"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/file_transfer.file_transfer"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/slow_subscriptions": {
      "get": {
        "description": "查看慢订阅的统计数据",
        "tags": [
          "Slow Subscriptions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/slow_subscribers_statistics.record"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "清除当前记录，然后重新开始统计",
        "tags": [
          "Slow Subscriptions"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/durable_queues/{id}": {
      "get": {
        "description": "Get the information of a durable queue.",
        "tags": [
          "Durable Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the durable queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get a declared durable queue",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "id": "queue1"
                },
                "schema": {
                  "$ref": "#/components/schemas/durable_queues.durable_queue_get"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Queue Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Create a durable queue.",
        "tags": [
          "Durable Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the durable queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Declare a durable queue",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "id": "queue1"
                },
                "schema": {
                  "$ref": "#/components/schemas/durable_queues.durable_queue_get"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {}
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a durable queue.",
        "tags": [
          "Durable Queues"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the durable queue.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Delete a declared durable queue",
        "responses": {
          "200": {
            "description": "Queue deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Queue Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}": {
      "get": {
        "description": "获取网关配置详情",
        "tags": [
          "Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "summary": "Get gateway",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "coap_gateway": {
                    "value": {
                      "name": "coap",
                      "enable": true,
                      "heartbeat": "30s",
                      "listeners": [
                        {
                          "name": "default",
                          "type": "udp",
                          "bind": "5683",
                          "max_connections": 1024000,
                          "max_conn_rate": 1000
                        }
                      ],
                      "idle_timeout": "30s",
                      "mountpoint": "coap/",
                      "connection_required": false,
                      "enable_stats": true,
                      "notify_type": "qos",
                      "publish_qos": "coap",
                      "subscribe_qos": "coap"
                    },
                    "summary": "A simple CoAP gateway config"
                  },
                  "exproto_gateway": {
                    "value": {
                      "name": "exproto",
                      "handler": {
                        "address": "http://127.0.0.1:9001"
                      },
                      "server": {
                        "bind": "9100"
                      },
                      "enable": true,
                      "listeners": [
                        {
                          "name": "default",
                          "type": "tcp",
                          "bind": "7993",
                          "max_connections": 1024000,
                          "max_conn_rate": 1000
                        }
                      ],
                      "idle_timeout": "30s",
                      "mountpoint": "exproto/",
                      "enable_stats": true
                    },
                    "summary": "A simple ExProto gateway config"
                  },
                  "gbt32960_gateway": {
                    "value": {
                      "message_queue_len": 10,
                      "name": "gbt32960",
                      "enable": true,
                      "listeners": [
                        {
                          "name": "default",
                          "type": "tcp",
                          "bind": "7325",
                          "max_connections": 1024000,
                          "max_conn_rate": 1000
                        }
                      ],
                      "mountpoint": "gbt32960/${clientid}",
                      "retry_interval": "8s",
                      "enable_stats": true,
                      "max_retry_times": 3
                    },
                    "summary": "A simple GBT32960 gateway config"
                  },
                  "lwm2m_gateway": {
                    "value": {
                      "name": "lwm2m",
                      "enable": true,
                      "listeners": [
                        {
                          "name": "default",
                          "type": "udp",
                          "bind": "5783",
                          "max_connections": 1024000,
                          "max_conn_rate": 1000
                        }
                      ],
                      "idle_timeout": "30s",
                      "mountpoint": "lwm2m/",
                      "enable_stats": true,
                      "auto_observe": false,
                      "lifetime_max": "86400s",
                      "lifetime_min": "1s",
                      "qmode_time_window": "22s",
                      "translators": {
                        "command": {
                          "topic": "dn/#"
                        },
                        "notify": {
                          "topic": "up/notify"
                        },
                        "register": {
                          "topic": "up/resp"
                        },
                        "update": {
                          "topic": "up/resp"
                        },
                        "response": {
                          "topic": "up/resp"
                        }
                      },
                      "update_msg_publish_condition": "always",
                      "xml_dir": "/etc/emqx/lwm2m_xml"
                    },
                    "summary": "A simple LwM2M gateway config"
                  },
                  "mqttsn_gateway": {
                    "value": {
                      "name": "mqttsn",
                      "broadcast": true,
                      "enable": true,
                      "predefined": [
                        {
                          "id": "1001",
                          "topic": "pred/1001"
                        },
                        {
                          "id": "1002",
                          "topic": "pred/1002"
                        }
                      ],
                      "listeners": [
                        {
                          "name": "default",
                          "type": "udp",
                          "bind": "1884",
                          "max_connections": 1024000,
                          "max_conn_rate": 1000
                        }
                      ],
                      "idle_timeout": "30s",
                      "mountpoint": "mqttsn/",
                      "enable_stats": true,
                      "enable_qos3": true,
                      "gateway_id": 1
                    },
                    "summary": "A simple MQTT-SN gateway config"
                  },
                  "ocpp_gateway": {
                    "value": {
                      "name": "ocpp",
                      "enable": true,
                      "upstream": {
                        "topic": "cp/${cid}",
                        "error_topic": "cp/${cid}/error",
                        "reply_topic": "cp/${cid}/reply"
                      },
                      "listeners": [
                        {
                          "name": "default",
                          "type": "ws",
                          "bind": "33033",
                          "max_connections": 1024000
                        }
                      ],
                      "mountpoint": "ocpp/",
                      "enable_stats": true,
                      "default_heartbeat_interval": "60s",
                      "dnstream": {
                        "topic": "cp/${cid}"
                      },
                      "message_format_checking": "disable"
                    },
                    "summary": "A simple OCPP gateway config"
                  },
                  "stomp_gateway": {
                    "value": {
                      "name": "stomp",
                      "enable": true,
                      "frame": {
                        "max_headers": 10,
                        "max_body_length": 65535,
                        "max_headers_length": 1024
                      },
                      "listeners": [
                        {
                          "name": "default",
                          "type": "tcp",
                          "bind": "61613",
                          "max_connections": 1024000,
                          "max_conn_rate": 1000
                        }
                      ],
                      "idle_timeout": "30s",
                      "mountpoint": "stomp/",
                      "enable_stats": true
                    },
                    "summary": "A simple STOMP gateway config"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.stomp"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.ocpp"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.mqttsn"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.lwm2m"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.jt808"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.gbt32960"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.exproto"
                    },
                    {
                      "$ref": "#/components/schemas/emqx_gateway_api.coap"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新指定网关的基础配置、和启用的状态。<br/><br/>注：认证、和监听器的配置更新需参考对应的 API 接口。",
        "tags": [
          "Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "summary": "Load or update the gateway confs",
        "responses": {
          "204": {
            "description": "Gateway configuration updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "coap_gateway": {
                  "value": {
                    "enable": true,
                    "heartbeat": "30s",
                    "idle_timeout": "30s",
                    "mountpoint": "coap2/",
                    "connection_required": false,
                    "enable_stats": true,
                    "notify_type": "qos",
                    "publish_qos": "coap",
                    "subscribe_qos": "coap"
                  },
                  "summary": "A simple CoAP gateway config"
                },
                "exproto_gateway": {
                  "value": {
                    "handler": {
                      "address": "http://127.0.0.1:9001"
                    },
                    "server": {
                      "bind": "9100"
                    },
                    "enable": true,
                    "idle_timeout": "30s",
                    "mountpoint": "exproto2/",
                    "enable_stats": true
                  },
                  "summary": "A simple ExProto gateway config"
                },
                "gbt32960_gateway": {
                  "value": {
                    "message_queue_len": 10,
                    "enable": true,
                    "mountpoint": "gbt32960/${clientid}",
                    "retry_interval": "8s",
                    "enable_stats": true,
                    "max_retry_times": 3
                  },
                  "summary": "A simple GBT32960 gateway config"
                },
                "lwm2m_gateway": {
                  "value": {
                    "enable": true,
                    "idle_timeout": "30s",
                    "mountpoint": "lwm2m2/",
                    "enable_stats": true,
                    "auto_observe": false,
                    "lifetime_max": "86400s",
                    "lifetime_min": "1s",
                    "qmode_time_window": "22s",
                    "translators": {
                      "command": {
                        "topic": "dn/#"
                      },
                      "notify": {
                        "topic": "up/notify"
                      },
                      "register": {
                        "topic": "up/resp"
                      },
                      "update": {
                        "topic": "up/resp"
                      },
                      "response": {
                        "topic": "up/resp"
                      }
                    },
                    "update_msg_publish_condition": "always",
                    "xml_dir": "/etc/emqx/lwm2m_xml"
                  },
                  "summary": "A simple LwM2M gateway config"
                },
                "mqttsn_gateway": {
                  "value": {
                    "broadcast": true,
                    "enable": true,
                    "predefined": [
                      {
                        "id": "1003",
                        "topic": "pred/1003"
                      }
                    ],
                    "idle_timeout": "30s",
                    "mountpoint": "mqttsn2/",
                    "enable_stats": true,
                    "enable_qos3": false,
                    "gateway_id": 1
                  },
                  "summary": "A simple MQTT-SN gateway config"
                },
                "ocpp_gateway": {
                  "value": {
                    "enable": true,
                    "upstream": {
                      "topic": "cp/${cid}",
                      "error_topic": "cp/${cid}/error",
                      "reply_topic": "cp/${cid}/reply"
                    },
                    "mountpoint": "ocpp/",
                    "enable_stats": true,
                    "default_heartbeat_interval": "60s",
                    "dnstream": {
                      "topic": "cp/${cid}"
                    },
                    "message_format_checking": "disable"
                  },
                  "summary": "A simple OCPP gateway config"
                },
                "stomp_gateway": {
                  "value": {
                    "enable": true,
                    "frame": {
                      "max_headers": 100,
                      "max_body_length": 655350,
                      "max_headers_length": 10240
                    },
                    "idle_timeout": "30s",
                    "mountpoint": "stomp2/",
                    "enable_stats": true
                  },
                  "summary": "A simple STOMP gateway config"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_stomp"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_ocpp"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_mqttsn"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_lwm2m"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_jt808"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_gbt32960"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_exproto"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.update_coap"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.stomp"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.ocpp"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.mqttsn"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.lwm2m"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.jt808"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.gbt32960"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.exproto"
                  },
                  {
                    "$ref": "#/components/schemas/emqx_gateway_api.coap"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes": {
      "get": {
        "description": "获取当前集群下的节点列表。",
        "tags": [
          "Nodes"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List all EMQX nodes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_nodes.node_info"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/actions/{id}": {
      "get": {
        "description": "通过 id 获取一个数据桥接",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "summary": "Get bridge",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "http": {
                    "value": {
                      "name": "my_http_action",
                      "status": "connected",
                      "type": "http",
                      "enable": true,
                      "parameters": {
                        "path": "/room/${room_no}",
                        "body": "${.}",
                        "headers": {},
                        "method": "post"
                      },
                      "connector": "my_http_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16,
                        "query_mode": "async",
                        "health_check_interval": "15s"
                      }
                    },
                    "summary": "HTTP Action"
                  },
                  "confluent_producer": {
                    "value": {
                      "name": "my_confluent_producer_action",
                      "status": "connected",
                      "type": "confluent_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "memory_overload_protection": true,
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB"
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_batch_bytes": "896KB",
                        "partition_count_refresh_interval": "60s",
                        "kafka_header_value_encode_mode": "none",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_headers": "${.pub_props}",
                        "partition_strategy": "random"
                      },
                      "connector": "my_confluent_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Confluent Action"
                  },
                  "iotdb": {
                    "value": {
                      "name": "iotdb_action",
                      "status": "connected",
                      "type": "iotdb",
                      "description": "My example iotdb action",
                      "enable": true,
                      "parameters": {
                        "data": [
                          {
                            "timestamp": "now",
                            "value": "${st}",
                            "data_type": "BOOLEAN",
                            "measurement": "status"
                          }
                        ],
                        "device_id": "my_device",
                        "is_aligned": false
                      },
                      "connector": "iotdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Apache IoTDB Bridge"
                  },
                  "direct_azure_blob_storage": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "mode": "direct",
                        "content": "${.payload}",
                        "blob": "${.payload.blob}",
                        "container": "${.payload.container}"
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "batch_time": "0ms",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Azure Blob Storage Direct Upload Action"
                  },
                  "couchbase": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into mqtt (key, value) values (${.id}, ${.payload})"
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Couchbase Action"
                  },
                  "datalayers": {
                    "value": {
                      "name": "datalayers_action",
                      "status": "connected",
                      "type": "datalayers",
                      "description": "My example datalayers action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                      },
                      "connector": "datalayers_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Datalayers Action"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer_action",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "memory_overload_protection": true,
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB"
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_batch_bytes": "896KB",
                        "partition_count_refresh_interval": "60s",
                        "kafka_header_value_encode_mode": "none",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_headers": "${.pub_props}",
                        "partition_strategy": "random"
                      },
                      "connector": "my_azure_event_hub_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Azure Event Hub Action"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "timestamp": "${.timestamp}",
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "memory_overload_protection": true,
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB"
                        },
                        "compression": "no_compression",
                        "topic": "kafka-topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_batch_bytes": "896KB",
                        "partitions_limit": "all_partitions",
                        "partition_count_refresh_interval": "60s",
                        "kafka_header_value_encode_mode": "none",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_headers": "${pub_props}",
                        "partition_strategy": "random"
                      },
                      "connector": "my_kafka_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "32s"
                      },
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Kafka Producer Action"
                  },
                  "kinesis": {
                    "value": {
                      "name": "kinesis_action",
                      "status": "connected",
                      "type": "kinesis",
                      "description": "My example kinesis action",
                      "enable": true,
                      "parameters": {
                        "partition_key": "any_key",
                        "payload_template": "${.}",
                        "stream_name": "my_stream"
                      },
                      "connector": "kinesis_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Kinesis Action"
                  },
                  "pgsql": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "pgsql",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "PostgreSQL Action"
                  },
                  "mysql": {
                    "value": {
                      "name": "mysql_action",
                      "status": "connected",
                      "type": "mysql",
                      "description": "My example mysql action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))"
                      },
                      "connector": "mysql_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MySQL Action"
                  },
                  "mqtt": {
                    "value": {
                      "name": "mqtt_action",
                      "status": "connected",
                      "type": "mqtt",
                      "description": "My example mqtt action",
                      "enable": true,
                      "parameters": {
                        "retain": false,
                        "payload": "${.payload}",
                        "topic": "remote/topic",
                        "qos": 2
                      },
                      "connector": "mqtt_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MQTT Producer Action"
                  },
                  "rabbitmq": {
                    "value": {
                      "name": "rabbitmq_action",
                      "status": "connected",
                      "type": "rabbitmq",
                      "description": "My example rabbitmq action",
                      "enable": true,
                      "parameters": {
                        "exchange": "test_exchange",
                        "payload_template": "${.payload}",
                        "routing_key": "/",
                        "wait_for_publish_confirmations": true,
                        "delivery_mode": "non_persistent",
                        "publish_confirmation_timeout": "30s"
                      },
                      "connector": "rabbitmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "RabbitMQ Producer Action"
                  },
                  "redis": {
                    "value": {
                      "status": "connected",
                      "description": "My action",
                      "enable": true,
                      "parameters": {
                        "command_template": [
                          "LPUSH",
                          "MSGS",
                          "${payload}"
                        ]
                      },
                      "connector": "my_connector_name",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1
                      }
                    },
                    "summary": "Redis Action"
                  },
                  "dynamo": {
                    "value": {
                      "name": "dynamo_action",
                      "status": "connected",
                      "type": "dynamo",
                      "description": "My example dynamo action",
                      "enable": true,
                      "connector": "dynamo_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "hash_key": "clientid",
                        "table": "mqtt_msg",
                        "template": ""
                      }
                    },
                    "summary": "DynamoDB Action"
                  },
                  "tdengine": {
                    "value": {
                      "name": "tdengine_action",
                      "status": "connected",
                      "type": "tdengine",
                      "description": "My example tdengine action",
                      "enable": true,
                      "parameters": {
                        "database": "mqtt",
                        "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})"
                      },
                      "connector": "tdengine_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "TDengine Action"
                  },
                  "s3": {
                    "value": {
                      "status": "connected",
                      "description": "My upload action",
                      "enable": true,
                      "parameters": {
                        "mode": "direct",
                        "key": "${topic}",
                        "content": "${payload}",
                        "bucket": "${clientid}",
                        "acl": "public_read"
                      },
                      "connector": "my_s3_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "query_mode": "sync",
                        "inflight_window": 10
                      }
                    },
                    "summary": "S3 Direct Upload"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "greptimedb_action",
                      "status": "connected",
                      "type": "greptimedb",
                      "description": "My example greptimedb action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                      },
                      "connector": "greptimedb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "GreptimeDB Action"
                  },
                  "opents": {
                    "value": {
                      "name": "opents_action",
                      "status": "connected",
                      "type": "opents",
                      "description": "My example opents action",
                      "enable": true,
                      "parameters": {
                        "data": [
                          {
                            "value": "${value}",
                            "tags": "${tags}",
                            "metric": "${metric}"
                          }
                        ]
                      },
                      "connector": "opents_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "OpenTSDB Action"
                  },
                  "oracle": {
                    "value": {
                      "name": "oracle_action",
                      "status": "connected",
                      "type": "oracle",
                      "description": "My example oracle action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})"
                      },
                      "connector": "oracle_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Oracle Action"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "hstreamdb_action",
                      "status": "connected",
                      "type": "hstreamdb",
                      "description": "My example hstreamdb action",
                      "enable": true,
                      "connector": "hstreamdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "aggregation_pool_size": 8,
                        "partition_key": "hej",
                        "record_template": "${payload}",
                        "stream": "mqtt_message",
                        "writer_pool_size": 8
                      }
                    },
                    "summary": "HStreamDB Action"
                  },
                  "cassandra": {
                    "value": {
                      "name": "cassandra_action",
                      "status": "connected",
                      "type": "cassandra",
                      "description": "My example cassandra action",
                      "enable": true,
                      "parameters": {
                        "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})"
                      },
                      "connector": "cassandra_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Cassandra Action"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "clickhouse_action",
                      "status": "connected",
                      "type": "clickhouse",
                      "description": "My example clickhouse action",
                      "enable": true,
                      "parameters": {
                        "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                        "batch_value_separator": ", "
                      },
                      "connector": "clickhouse_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "ClickHouse Action"
                  },
                  "influxdb": {
                    "value": {
                      "name": "influxdb_action",
                      "status": "connected",
                      "type": "influxdb",
                      "description": "My example influxdb action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                      },
                      "connector": "influxdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "InfluxDB Action"
                  },
                  "sqlserver": {
                    "value": {
                      "name": "sqlserver_action",
                      "status": "connected",
                      "type": "sqlserver",
                      "description": "My example sqlserver action",
                      "enable": true,
                      "connector": "sqlserver_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )"
                      }
                    },
                    "summary": "Microsoft SQL Server Action"
                  },
                  "matrix": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "matrix",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "Matrix Action"
                  },
                  "aggregated_azure_blob_storage": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "mode": "aggregated",
                        "blob": "${action}/${node}/${datetime.rfc3339}/${sequence}",
                        "container": "mycontainer",
                        "aggregation": {
                          "container": {
                            "type": "csv",
                            "column_order": [
                              "a",
                              "b"
                            ]
                          },
                          "max_records": 10000,
                          "time_interval": "4s"
                        }
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 100,
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "batch_time": "10ms",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Azure Blob Storage Aggregated Upload Action"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "rocketmq_action",
                      "status": "connected",
                      "type": "rocketmq",
                      "description": "My example rocketmq action",
                      "enable": true,
                      "connector": "rocketmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "refresh_interval": "3s",
                        "send_buffer": "1024KB",
                        "sync_timeout": "3s",
                        "template": "",
                        "topic": "TopicTest"
                      }
                    },
                    "summary": "RocketMQ Action"
                  },
                  "pulsar": {
                    "value": {
                      "name": "pulsar_action",
                      "status": "connected",
                      "type": "pulsar",
                      "description": "My example pulsar action",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "sync_timeout": "5s",
                        "pulsar_topic": "test_topic"
                      },
                      "connector": "pulsar_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Pulsar Producer Action"
                  },
                  "syskeeper_forwarder": {
                    "value": {
                      "name": "syskeeper_forwarder",
                      "status": "connected",
                      "type": "syskeeper_forwarder",
                      "enable": true,
                      "parameters": {
                        "template": "${payload}",
                        "target_topic": "${topic}"
                      },
                      "connector": "syskeeper_forwarder",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16
                      }
                    },
                    "summary": "Syskeeper Forwarder Bridge"
                  },
                  "s3_aggreg": {
                    "value": {
                      "status": "connected",
                      "description": "My aggregated upload action",
                      "enable": true,
                      "parameters": {
                        "mode": "aggregated",
                        "key": "${action}/${node}/${datetime.rfc3339utc}_N${sequence}.csv",
                        "bucket": "mqtt-aggregated",
                        "acl": "public_read",
                        "aggregation": {
                          "max_records": 100000,
                          "time_interval": "15m"
                        },
                        "container": {
                          "type": "csv",
                          "column_order": [
                            "clientid",
                            "topic",
                            "publish_received_at"
                          ]
                        }
                      },
                      "connector": "my_s3_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "query_mode": "async",
                        "inflight_window": 100,
                        "health_check_interval": "10s"
                      }
                    },
                    "summary": "S3 Aggregated Upload"
                  },
                  "elasticsearch": {
                    "value": {
                      "name": "elasticsearch_action",
                      "status": "connected",
                      "type": "elasticsearch",
                      "description": "My example elasticsearch action",
                      "enable": true,
                      "parameters": {
                        "index": "${payload.index}",
                        "action": "create",
                        "doc": "${payload.doc}",
                        "overwrite": true
                      },
                      "connector": "elasticsearch_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Elastic Search Bridge"
                  },
                  "gcp_pubsub_producer": {
                    "value": {
                      "status": "connected",
                      "description": "My action",
                      "enable": true,
                      "parameters": {
                        "payload_template": "${payload}",
                        "attributes_template": [
                          {
                            "value": "${payload.attrs.v}",
                            "key": "${payload.attrs.k}"
                          }
                        ],
                        "ordering_key_template": "${payload.ok}",
                        "pubsub_topic": "mytopic"
                      },
                      "connector": "my_connector_name",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 5
                      },
                      "local_topic": "local/topic"
                    },
                    "summary": "GCP PubSub Producer Action"
                  },
                  "mongodb": {
                    "value": {
                      "name": "mongodb_action",
                      "status": "connected",
                      "type": "mongodb",
                      "description": "My example mongodb action",
                      "enable": true,
                      "parameters": {
                        "collection": "mycol"
                      },
                      "connector": "mongodb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MongoDB Action"
                  },
                  "timescale": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "timescale",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "Timescale Action"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_producer.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_elasticsearch.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/action_azure_blob_storage.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/syskeeper.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/pulsar.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_opents.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_s3.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_tdengine.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/redis.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt_publisher.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pgsql.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_datalayers.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/action_couchbase.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_iotdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/confluent.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get_bridge_v2"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "通过 id 更新数据桥接",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "summary": "Update bridge",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "http": {
                    "value": {
                      "name": "my_http_action",
                      "status": "connected",
                      "type": "http",
                      "enable": true,
                      "parameters": {
                        "path": "/room/${room_no}",
                        "body": "${.}",
                        "headers": {},
                        "method": "post"
                      },
                      "connector": "my_http_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16,
                        "query_mode": "async",
                        "health_check_interval": "15s"
                      }
                    },
                    "summary": "HTTP Action"
                  },
                  "confluent_producer": {
                    "value": {
                      "name": "my_confluent_producer_action",
                      "status": "connected",
                      "type": "confluent_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "memory_overload_protection": true,
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB"
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_batch_bytes": "896KB",
                        "partition_count_refresh_interval": "60s",
                        "kafka_header_value_encode_mode": "none",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_headers": "${.pub_props}",
                        "partition_strategy": "random"
                      },
                      "connector": "my_confluent_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Confluent Action"
                  },
                  "iotdb": {
                    "value": {
                      "name": "iotdb_action",
                      "status": "connected",
                      "type": "iotdb",
                      "description": "My example iotdb action",
                      "enable": true,
                      "parameters": {
                        "data": [
                          {
                            "timestamp": "now",
                            "value": "${st}",
                            "data_type": "BOOLEAN",
                            "measurement": "status"
                          }
                        ],
                        "device_id": "my_device",
                        "is_aligned": false
                      },
                      "connector": "iotdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Apache IoTDB Bridge"
                  },
                  "direct_azure_blob_storage": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "mode": "direct",
                        "content": "${.payload}",
                        "blob": "${.payload.blob}",
                        "container": "${.payload.container}"
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "batch_time": "0ms",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Azure Blob Storage Direct Upload Action"
                  },
                  "couchbase": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into mqtt (key, value) values (${.id}, ${.payload})"
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Couchbase Action"
                  },
                  "datalayers": {
                    "value": {
                      "name": "datalayers_action",
                      "status": "connected",
                      "type": "datalayers",
                      "description": "My example datalayers action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                      },
                      "connector": "datalayers_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Datalayers Action"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer_action",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "memory_overload_protection": true,
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB"
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_batch_bytes": "896KB",
                        "partition_count_refresh_interval": "60s",
                        "kafka_header_value_encode_mode": "none",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_headers": "${.pub_props}",
                        "partition_strategy": "random"
                      },
                      "connector": "my_azure_event_hub_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Azure Event Hub Action"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "timestamp": "${.timestamp}",
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "memory_overload_protection": true,
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB"
                        },
                        "compression": "no_compression",
                        "topic": "kafka-topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_batch_bytes": "896KB",
                        "partitions_limit": "all_partitions",
                        "partition_count_refresh_interval": "60s",
                        "kafka_header_value_encode_mode": "none",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_headers": "${pub_props}",
                        "partition_strategy": "random"
                      },
                      "connector": "my_kafka_producer_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "32s"
                      },
                      "local_topic": "mqtt/local/topic"
                    },
                    "summary": "Kafka Producer Action"
                  },
                  "kinesis": {
                    "value": {
                      "name": "kinesis_action",
                      "status": "connected",
                      "type": "kinesis",
                      "description": "My example kinesis action",
                      "enable": true,
                      "parameters": {
                        "partition_key": "any_key",
                        "payload_template": "${.}",
                        "stream_name": "my_stream"
                      },
                      "connector": "kinesis_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Kinesis Action"
                  },
                  "pgsql": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "pgsql",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "PostgreSQL Action"
                  },
                  "mysql": {
                    "value": {
                      "name": "mysql_action",
                      "status": "connected",
                      "type": "mysql",
                      "description": "My example mysql action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))"
                      },
                      "connector": "mysql_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MySQL Action"
                  },
                  "mqtt": {
                    "value": {
                      "name": "mqtt_action",
                      "status": "connected",
                      "type": "mqtt",
                      "description": "My example mqtt action",
                      "enable": true,
                      "parameters": {
                        "retain": false,
                        "payload": "${.payload}",
                        "topic": "remote/topic",
                        "qos": 2
                      },
                      "connector": "mqtt_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MQTT Producer Action"
                  },
                  "rabbitmq": {
                    "value": {
                      "name": "rabbitmq_action",
                      "status": "connected",
                      "type": "rabbitmq",
                      "description": "My example rabbitmq action",
                      "enable": true,
                      "parameters": {
                        "exchange": "test_exchange",
                        "payload_template": "${.payload}",
                        "routing_key": "/",
                        "wait_for_publish_confirmations": true,
                        "delivery_mode": "non_persistent",
                        "publish_confirmation_timeout": "30s"
                      },
                      "connector": "rabbitmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "RabbitMQ Producer Action"
                  },
                  "redis": {
                    "value": {
                      "status": "connected",
                      "description": "My action",
                      "enable": true,
                      "parameters": {
                        "command_template": [
                          "LPUSH",
                          "MSGS",
                          "${payload}"
                        ]
                      },
                      "connector": "my_connector_name",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1
                      }
                    },
                    "summary": "Redis Action"
                  },
                  "dynamo": {
                    "value": {
                      "name": "dynamo_action",
                      "status": "connected",
                      "type": "dynamo",
                      "description": "My example dynamo action",
                      "enable": true,
                      "connector": "dynamo_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "hash_key": "clientid",
                        "table": "mqtt_msg",
                        "template": ""
                      }
                    },
                    "summary": "DynamoDB Action"
                  },
                  "tdengine": {
                    "value": {
                      "name": "tdengine_action",
                      "status": "connected",
                      "type": "tdengine",
                      "description": "My example tdengine action",
                      "enable": true,
                      "parameters": {
                        "database": "mqtt",
                        "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})"
                      },
                      "connector": "tdengine_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "TDengine Action"
                  },
                  "s3": {
                    "value": {
                      "status": "connected",
                      "description": "My upload action",
                      "enable": true,
                      "parameters": {
                        "mode": "direct",
                        "key": "${topic}",
                        "content": "${payload}",
                        "bucket": "${clientid}",
                        "acl": "public_read"
                      },
                      "connector": "my_s3_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "query_mode": "sync",
                        "inflight_window": 10
                      }
                    },
                    "summary": "S3 Direct Upload"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "greptimedb_action",
                      "status": "connected",
                      "type": "greptimedb",
                      "description": "My example greptimedb action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                      },
                      "connector": "greptimedb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "GreptimeDB Action"
                  },
                  "opents": {
                    "value": {
                      "name": "opents_action",
                      "status": "connected",
                      "type": "opents",
                      "description": "My example opents action",
                      "enable": true,
                      "parameters": {
                        "data": [
                          {
                            "value": "${value}",
                            "tags": "${tags}",
                            "metric": "${metric}"
                          }
                        ]
                      },
                      "connector": "opents_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "OpenTSDB Action"
                  },
                  "oracle": {
                    "value": {
                      "name": "oracle_action",
                      "status": "connected",
                      "type": "oracle",
                      "description": "My example oracle action",
                      "enable": true,
                      "parameters": {
                        "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})"
                      },
                      "connector": "oracle_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Oracle Action"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "hstreamdb_action",
                      "status": "connected",
                      "type": "hstreamdb",
                      "description": "My example hstreamdb action",
                      "enable": true,
                      "connector": "hstreamdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "aggregation_pool_size": 8,
                        "partition_key": "hej",
                        "record_template": "${payload}",
                        "stream": "mqtt_message",
                        "writer_pool_size": 8
                      }
                    },
                    "summary": "HStreamDB Action"
                  },
                  "cassandra": {
                    "value": {
                      "name": "cassandra_action",
                      "status": "connected",
                      "type": "cassandra",
                      "description": "My example cassandra action",
                      "enable": true,
                      "parameters": {
                        "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})"
                      },
                      "connector": "cassandra_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Cassandra Action"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "clickhouse_action",
                      "status": "connected",
                      "type": "clickhouse",
                      "description": "My example clickhouse action",
                      "enable": true,
                      "parameters": {
                        "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                        "batch_value_separator": ", "
                      },
                      "connector": "clickhouse_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "ClickHouse Action"
                  },
                  "influxdb": {
                    "value": {
                      "name": "influxdb_action",
                      "status": "connected",
                      "type": "influxdb",
                      "description": "My example influxdb action",
                      "enable": true,
                      "parameters": {
                        "precision": "ms",
                        "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                      },
                      "connector": "influxdb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "InfluxDB Action"
                  },
                  "sqlserver": {
                    "value": {
                      "name": "sqlserver_action",
                      "status": "connected",
                      "type": "sqlserver",
                      "description": "My example sqlserver action",
                      "enable": true,
                      "connector": "sqlserver_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )"
                      }
                    },
                    "summary": "Microsoft SQL Server Action"
                  },
                  "matrix": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "matrix",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "Matrix Action"
                  },
                  "aggregated_azure_blob_storage": {
                    "value": {
                      "status": "connected",
                      "description": "my action",
                      "enable": true,
                      "parameters": {
                        "mode": "aggregated",
                        "blob": "${action}/${node}/${datetime.rfc3339}/${sequence}",
                        "container": "mycontainer",
                        "aggregation": {
                          "container": {
                            "type": "csv",
                            "column_order": [
                              "a",
                              "b"
                            ]
                          },
                          "max_records": 10000,
                          "time_interval": "4s"
                        }
                      },
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 100,
                        "worker_pool_size": 16,
                        "query_mode": "sync",
                        "batch_time": "10ms",
                        "inflight_window": 100,
                        "request_ttl": "45s",
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Azure Blob Storage Aggregated Upload Action"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "rocketmq_action",
                      "status": "connected",
                      "type": "rocketmq",
                      "description": "My example rocketmq action",
                      "enable": true,
                      "connector": "rocketmq_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      },
                      "parameters": {
                        "refresh_interval": "3s",
                        "send_buffer": "1024KB",
                        "sync_timeout": "3s",
                        "template": "",
                        "topic": "TopicTest"
                      }
                    },
                    "summary": "RocketMQ Action"
                  },
                  "pulsar": {
                    "value": {
                      "name": "pulsar_action",
                      "status": "connected",
                      "type": "pulsar",
                      "description": "My example pulsar action",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "sync_timeout": "5s",
                        "pulsar_topic": "test_topic"
                      },
                      "connector": "pulsar_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Pulsar Producer Action"
                  },
                  "syskeeper_forwarder": {
                    "value": {
                      "name": "syskeeper_forwarder",
                      "status": "connected",
                      "type": "syskeeper_forwarder",
                      "enable": true,
                      "parameters": {
                        "template": "${payload}",
                        "target_topic": "${topic}"
                      },
                      "connector": "syskeeper_forwarder",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "worker_pool_size": 16
                      }
                    },
                    "summary": "Syskeeper Forwarder Bridge"
                  },
                  "s3_aggreg": {
                    "value": {
                      "status": "connected",
                      "description": "My aggregated upload action",
                      "enable": true,
                      "parameters": {
                        "mode": "aggregated",
                        "key": "${action}/${node}/${datetime.rfc3339utc}_N${sequence}.csv",
                        "bucket": "mqtt-aggregated",
                        "acl": "public_read",
                        "aggregation": {
                          "max_records": 100000,
                          "time_interval": "15m"
                        },
                        "container": {
                          "type": "csv",
                          "column_order": [
                            "clientid",
                            "topic",
                            "publish_received_at"
                          ]
                        }
                      },
                      "connector": "my_s3_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "query_mode": "async",
                        "inflight_window": 100,
                        "health_check_interval": "10s"
                      }
                    },
                    "summary": "S3 Aggregated Upload"
                  },
                  "elasticsearch": {
                    "value": {
                      "name": "elasticsearch_action",
                      "status": "connected",
                      "type": "elasticsearch",
                      "description": "My example elasticsearch action",
                      "enable": true,
                      "parameters": {
                        "index": "${payload.index}",
                        "action": "create",
                        "doc": "${payload.doc}",
                        "overwrite": true
                      },
                      "connector": "elasticsearch_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "Elastic Search Bridge"
                  },
                  "gcp_pubsub_producer": {
                    "value": {
                      "status": "connected",
                      "description": "My action",
                      "enable": true,
                      "parameters": {
                        "payload_template": "${payload}",
                        "attributes_template": [
                          {
                            "value": "${payload.attrs.v}",
                            "key": "${payload.attrs.k}"
                          }
                        ],
                        "ordering_key_template": "${payload.ok}",
                        "pubsub_topic": "mytopic"
                      },
                      "connector": "my_connector_name",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 5
                      },
                      "local_topic": "local/topic"
                    },
                    "summary": "GCP PubSub Producer Action"
                  },
                  "mongodb": {
                    "value": {
                      "name": "mongodb_action",
                      "status": "connected",
                      "type": "mongodb",
                      "description": "My example mongodb action",
                      "enable": true,
                      "parameters": {
                        "collection": "mycol"
                      },
                      "connector": "mongodb_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "health_check_interval": "30s"
                      }
                    },
                    "summary": "MongoDB Action"
                  },
                  "timescale": {
                    "value": {
                      "name": "my_action",
                      "status": "connected",
                      "type": "timescale",
                      "enable": true,
                      "connector": "my_connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 16,
                        "max_buffer_bytes": "256MB",
                        "batch_time": "50ms",
                        "inflight_window": 100,
                        "request_ttl": "45s"
                      },
                      "parameters": {
                        "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                      }
                    },
                    "summary": "Timescale Action"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_producer.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_elasticsearch.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/action_azure_blob_storage.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/syskeeper.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/pulsar.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_opents.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_s3.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_tdengine.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/redis.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt_publisher.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pgsql.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_datalayers.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/action_couchbase.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_iotdb.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/confluent.get_bridge_v2"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get_bridge_v2"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update bridge failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "http": {
                  "value": {
                    "enable": true,
                    "parameters": {
                      "path": "/room/${room_no}",
                      "body": "${.}",
                      "headers": {},
                      "method": "post"
                    },
                    "connector": "my_http_connector",
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "async",
                      "health_check_interval": "15s"
                    }
                  },
                  "summary": "HTTP Action"
                },
                "confluent_producer": {
                  "value": {
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${.pub_props}",
                      "partition_strategy": "random"
                    },
                    "connector": "my_confluent_producer_connector",
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Confluent Action"
                },
                "iotdb": {
                  "value": {
                    "description": "My example iotdb action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "timestamp": "now",
                          "value": "${st}",
                          "data_type": "BOOLEAN",
                          "measurement": "status"
                        }
                      ],
                      "device_id": "my_device",
                      "is_aligned": false
                    },
                    "connector": "iotdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Apache IoTDB Bridge"
                },
                "direct_azure_blob_storage": {
                  "value": {
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "direct",
                      "content": "${.payload}",
                      "blob": "${.payload.blob}",
                      "container": "${.payload.container}"
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "0ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Azure Blob Storage Direct Upload Action"
                },
                "couchbase": {
                  "value": {
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into mqtt (key, value) values (${.id}, ${.payload})"
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Couchbase Action"
                },
                "datalayers": {
                  "value": {
                    "description": "My example datalayers action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "datalayers_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Datalayers Action"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${.pub_props}",
                      "partition_strategy": "random"
                    },
                    "connector": "my_azure_event_hub_producer_connector",
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Azure Event Hub Action"
                },
                "kafka_producer": {
                  "value": {
                    "enable": true,
                    "parameters": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partitions_limit": "all_partitions",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${pub_props}",
                      "partition_strategy": "random"
                    },
                    "connector": "my_kafka_producer_connector",
                    "resource_opts": {
                      "health_check_interval": "32s"
                    },
                    "local_topic": "mqtt/local/topic"
                  },
                  "summary": "Kafka Producer Action"
                },
                "kinesis": {
                  "value": {
                    "description": "My example kinesis action",
                    "enable": true,
                    "parameters": {
                      "partition_key": "any_key",
                      "payload_template": "${.}",
                      "stream_name": "my_stream"
                    },
                    "connector": "kinesis_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Kinesis Action"
                },
                "pgsql": {
                  "value": {
                    "name": "my_action",
                    "type": "pgsql",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "PostgreSQL Action"
                },
                "mysql": {
                  "value": {
                    "description": "My example mysql action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))"
                    },
                    "connector": "mysql_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MySQL Action"
                },
                "mqtt": {
                  "value": {
                    "description": "My example mqtt action",
                    "enable": true,
                    "parameters": {
                      "retain": false,
                      "payload": "${.payload}",
                      "topic": "remote/topic",
                      "qos": 2
                    },
                    "connector": "mqtt_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MQTT Producer Action"
                },
                "rabbitmq": {
                  "value": {
                    "description": "My example rabbitmq action",
                    "enable": true,
                    "parameters": {
                      "exchange": "test_exchange",
                      "payload_template": "${.payload}",
                      "routing_key": "/",
                      "wait_for_publish_confirmations": true,
                      "delivery_mode": "non_persistent",
                      "publish_confirmation_timeout": "30s"
                    },
                    "connector": "rabbitmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "RabbitMQ Producer Action"
                },
                "redis": {
                  "value": {
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "connector": "my_connector_name",
                    "resource_opts": {
                      "batch_size": 1
                    }
                  },
                  "summary": "Redis Action"
                },
                "dynamo": {
                  "value": {
                    "description": "My example dynamo action",
                    "enable": true,
                    "connector": "dynamo_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "hash_key": "clientid",
                      "table": "mqtt_msg",
                      "template": ""
                    }
                  },
                  "summary": "DynamoDB Action"
                },
                "tdengine": {
                  "value": {
                    "description": "My example tdengine action",
                    "enable": true,
                    "parameters": {
                      "database": "mqtt",
                      "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})"
                    },
                    "connector": "tdengine_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "TDengine Action"
                },
                "s3": {
                  "value": {
                    "description": "My upload action",
                    "parameters": {
                      "mode": "direct",
                      "key": "${topic}",
                      "content": "${payload}",
                      "bucket": "${clientid}",
                      "acl": "public_read"
                    },
                    "resource_opts": {
                      "query_mode": "sync",
                      "inflight_window": 10
                    }
                  },
                  "summary": "S3 Direct Upload"
                },
                "greptimedb": {
                  "value": {
                    "description": "My example greptimedb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                    },
                    "connector": "greptimedb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "GreptimeDB Action"
                },
                "opents": {
                  "value": {
                    "description": "My example opents action",
                    "enable": true,
                    "parameters": {
                      "data": [
                        {
                          "value": "${value}",
                          "tags": "${tags}",
                          "metric": "${metric}"
                        }
                      ]
                    },
                    "connector": "opents_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "OpenTSDB Action"
                },
                "oracle": {
                  "value": {
                    "description": "My example oracle action",
                    "enable": true,
                    "parameters": {
                      "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})"
                    },
                    "connector": "oracle_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Oracle Action"
                },
                "hstreamdb": {
                  "value": {
                    "description": "My example hstreamdb action",
                    "enable": true,
                    "connector": "hstreamdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "aggregation_pool_size": 8,
                      "partition_key": "hej",
                      "record_template": "${payload}",
                      "stream": "mqtt_message",
                      "writer_pool_size": 8
                    }
                  },
                  "summary": "HStreamDB Action"
                },
                "cassandra": {
                  "value": {
                    "description": "My example cassandra action",
                    "enable": true,
                    "parameters": {
                      "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})"
                    },
                    "connector": "cassandra_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Cassandra Action"
                },
                "clickhouse": {
                  "value": {
                    "description": "My example clickhouse action",
                    "enable": true,
                    "parameters": {
                      "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                      "batch_value_separator": ", "
                    },
                    "connector": "clickhouse_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "ClickHouse Action"
                },
                "influxdb": {
                  "value": {
                    "description": "My example influxdb action",
                    "enable": true,
                    "parameters": {
                      "precision": "ms",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}"
                    },
                    "connector": "influxdb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "InfluxDB Action"
                },
                "sqlserver": {
                  "value": {
                    "description": "My example sqlserver action",
                    "enable": true,
                    "connector": "sqlserver_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )"
                    }
                  },
                  "summary": "Microsoft SQL Server Action"
                },
                "matrix": {
                  "value": {
                    "name": "my_action",
                    "type": "matrix",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "Matrix Action"
                },
                "aggregated_azure_blob_storage": {
                  "value": {
                    "description": "my action",
                    "enable": true,
                    "parameters": {
                      "mode": "aggregated",
                      "blob": "${action}/${node}/${datetime.rfc3339}/${sequence}",
                      "container": "mycontainer",
                      "aggregation": {
                        "container": {
                          "type": "csv",
                          "column_order": [
                            "a",
                            "b"
                          ]
                        },
                        "max_records": 10000,
                        "time_interval": "4s"
                      }
                    },
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 100,
                      "worker_pool_size": 16,
                      "query_mode": "sync",
                      "batch_time": "10ms",
                      "inflight_window": 100,
                      "request_ttl": "45s",
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Azure Blob Storage Aggregated Upload Action"
                },
                "rocketmq": {
                  "value": {
                    "description": "My example rocketmq action",
                    "enable": true,
                    "connector": "rocketmq_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    },
                    "parameters": {
                      "refresh_interval": "3s",
                      "send_buffer": "1024KB",
                      "sync_timeout": "3s",
                      "template": "",
                      "topic": "TopicTest"
                    }
                  },
                  "summary": "RocketMQ Action"
                },
                "pulsar": {
                  "value": {
                    "description": "My example pulsar action",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "sync_timeout": "5s",
                      "pulsar_topic": "test_topic"
                    },
                    "connector": "pulsar_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Pulsar Producer Action"
                },
                "syskeeper_forwarder": {
                  "value": {
                    "enable": true,
                    "parameters": {
                      "template": "${payload}",
                      "target_topic": "${topic}"
                    },
                    "connector": "syskeeper_forwarder",
                    "resource_opts": {
                      "worker_pool_size": 16
                    }
                  },
                  "summary": "Syskeeper Forwarder Bridge"
                },
                "s3_aggreg": {
                  "value": {
                    "description": "My aggregated upload action",
                    "parameters": {
                      "mode": "aggregated",
                      "key": "${action}/${node}/${datetime.rfc3339utc}_N${sequence}.csv",
                      "bucket": "mqtt-aggregated",
                      "acl": "public_read",
                      "aggregation": {
                        "max_records": 100000,
                        "time_interval": "15m"
                      },
                      "container": {
                        "type": "csv",
                        "column_order": [
                          "clientid",
                          "topic",
                          "publish_received_at"
                        ]
                      }
                    },
                    "resource_opts": {
                      "query_mode": "async",
                      "inflight_window": 100,
                      "health_check_interval": "10s"
                    }
                  },
                  "summary": "S3 Aggregated Upload"
                },
                "elasticsearch": {
                  "value": {
                    "description": "My example elasticsearch action",
                    "enable": true,
                    "parameters": {
                      "index": "${payload.index}",
                      "action": "create",
                      "doc": "${payload.doc}",
                      "overwrite": true
                    },
                    "connector": "elasticsearch_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "Elastic Search Bridge"
                },
                "gcp_pubsub_producer": {
                  "value": {
                    "description": "My action",
                    "enable": true,
                    "parameters": {
                      "payload_template": "${payload}",
                      "attributes_template": [
                        {
                          "value": "${payload.attrs.v}",
                          "key": "${payload.attrs.k}"
                        }
                      ],
                      "ordering_key_template": "${payload.ok}",
                      "pubsub_topic": "mytopic"
                    },
                    "connector": "my_connector_name",
                    "resource_opts": {
                      "batch_size": 5
                    },
                    "local_topic": "local/topic"
                  },
                  "summary": "GCP PubSub Producer Action"
                },
                "mongodb": {
                  "value": {
                    "description": "My example mongodb action",
                    "enable": true,
                    "parameters": {
                      "collection": "mycol"
                    },
                    "connector": "mongodb_connector",
                    "resource_opts": {
                      "health_check_interval": "30s"
                    }
                  },
                  "summary": "MongoDB Action"
                },
                "timescale": {
                  "value": {
                    "name": "my_action",
                    "type": "timescale",
                    "enable": true,
                    "connector": "my_connector",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 16,
                      "max_buffer_bytes": "256MB",
                      "batch_time": "50ms",
                      "inflight_window": 100,
                      "request_ttl": "45s"
                    },
                    "parameters": {
                      "sql": "INSERT INTO client_events(clientid, event, created_at)VALUES (\n  ${clientid},\n  ${event},\n  TO_TIMESTAMP((${timestamp} :: bigint))\n)"
                    }
                  },
                  "summary": "Timescale Action"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_timescale.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_producer.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_elasticsearch.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/action_azure_blob_storage.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/syskeeper.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/pulsar.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_opents.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_s3.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_tdengine.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/redis.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt_publisher.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pgsql.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_datalayers.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/action_couchbase.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_iotdb.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/confluent.put_bridge_v2"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.put_bridge_v2"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "通过 id 删除数据桥接",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "query",
            "name": "also_delete_dep_actions",
            "description": "是否级联删除依赖的动作。",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "summary": "Delete bridge",
        "responses": {
          "204": {
            "description": "Bridge deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "Dependent Rule IDs",
                      "items": {
                        "type": "string"
                      }
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cannot delete bridge while active rules are defined for this bridge"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/license/setting": {
      "get": {
        "description": "----",
        "tags": [
          "License"
        ],
        "parameters": [],
        "summary": "Get license setting",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "connection_low_watermark": {
                      "default": "75%",
                      "type": "string",
                      "description": "连接数低于此值是，系统会清除连接配额使用告警",
                      "example": "75%"
                    },
                    "connection_high_watermark": {
                      "default": "80%",
                      "type": "string",
                      "description": "连接数超过该值时，系统会触发 License 连接配额使用告警",
                      "example": "80%"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "----",
        "tags": [
          "License"
        ],
        "parameters": [],
        "summary": "Update license setting",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "connection_low_watermark": {
                      "default": "75%",
                      "type": "string",
                      "description": "连接数低于此值是，系统会清除连接配额使用告警",
                      "example": "75%"
                    },
                    "connection_high_watermark": {
                      "default": "80%",
                      "type": "string",
                      "description": "连接数超过该值时，系统会触发 License 连接配额使用告警",
                      "example": "80%"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad setting value"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "connection_low_watermark": {
                    "default": "75%",
                    "type": "string",
                    "description": "连接数低于此值是，系统会清除连接配额使用告警",
                    "example": "75%"
                  },
                  "connection_high_watermark": {
                    "default": "80%",
                    "type": "string",
                    "description": "连接数超过该值时，系统会触发 License 连接配额使用告警",
                    "example": "80%"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/{type}": {
      "get": {
        "description": "获取指定的授权器",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "description": "授权期所使用的数据源类型。",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "file",
                "built_in_database",
                "http",
                "redis",
                "mysql",
                "postgresql",
                "mongodb",
                "ldap"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "授权器所使用的数据源。",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/authz.ldap"
                    },
                    {
                      "$ref": "#/components/schemas/authz.mongo_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/authz.mongo_rs"
                    },
                    {
                      "$ref": "#/components/schemas/authz.mongo_single"
                    },
                    {
                      "$ref": "#/components/schemas/authz.postgresql"
                    },
                    {
                      "$ref": "#/components/schemas/authz.mysql"
                    },
                    {
                      "$ref": "#/components/schemas/authz.redis_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/authz.redis_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/authz.redis_single"
                    },
                    {
                      "$ref": "#/components/schemas/authz.http_post"
                    },
                    {
                      "$ref": "#/components/schemas/authz.http_get"
                    },
                    {
                      "$ref": "#/components/schemas/authz.builtin_db"
                    },
                    {
                      "$ref": "#/components/schemas/authz.api_file"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新指定的授权器",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "description": "授权期所使用的数据源类型。",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "file",
                "built_in_database",
                "http",
                "redis",
                "mysql",
                "postgresql",
                "mongodb",
                "ldap"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Authorization source updated successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/authz.ldap"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mongo_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mongo_rs"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mongo_single"
                  },
                  {
                    "$ref": "#/components/schemas/authz.postgresql"
                  },
                  {
                    "$ref": "#/components/schemas/authz.mysql"
                  },
                  {
                    "$ref": "#/components/schemas/authz.redis_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/authz.redis_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/authz.redis_single"
                  },
                  {
                    "$ref": "#/components/schemas/authz.http_post"
                  },
                  {
                    "$ref": "#/components/schemas/authz.http_get"
                  },
                  {
                    "$ref": "#/components/schemas/authz.builtin_db"
                  },
                  {
                    "$ref": "#/components/schemas/authz.api_file"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除指定的授权器",
        "tags": [
          "Authorization"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "description": "授权期所使用的数据源类型。",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "file",
                "built_in_database",
                "http",
                "redis",
                "mysql",
                "postgresql",
                "mongodb",
                "ldap"
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/authentication/import_users": {
      "post": {
        "description": "导入用户（仅支持 built_in_database 类型的认证器）",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "summary": "Import users",
        "responses": {
          "204": {
            "description": "Imported"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_validations/validation/{name}/metrics/reset": {
      "post": {
        "description": "重置某个特定验证规则的指标。",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "验证规则名称",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_validation"
          }
        ],
        "summary": "Reset validation metrics",
        "responses": {
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api_key": {
      "get": {
        "description": "查看 API 密钥列表",
        "tags": [
          "API Keys"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Unique and format by [a-zA-Z0-9-_]",
                      "example": "EMQX-API-KEY-1"
                    },
                    "api_key": {
                      "type": "string",
                      "description": "TODO:uses HMAC-SHA256 for signing.",
                      "example": "a4697a5c75a769f6"
                    },
                    "expired_at": {
                      "default": "infinity",
                      "description": "No longer valid datetime",
                      "example": "2021-12-05T02:01:34.186Z",
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "type": "integer",
                              "description": "epoch-second",
                              "example": 1640995200
                            },
                            {
                              "type": "string",
                              "format": "date-time",
                              "example": "2022-01-01T00:00:00.000Z"
                            }
                          ]
                        },
                        {
                          "type": "string",
                          "enum": [
                            "infinity"
                          ]
                        }
                      ]
                    },
                    "created_at": {
                      "description": "ApiKey create datetime",
                      "example": "2021-12-01T00:00:00.000Z",
                      "oneOf": [
                        {
                          "type": "integer",
                          "description": "epoch-second",
                          "example": 1640995200
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2022-01-01T00:00:00.000Z"
                        }
                      ]
                    },
                    "desc": {
                      "type": "string",
                      "example": "Note"
                    },
                    "enable": {
                      "type": "boolean",
                      "description": "Enable/Disable"
                    },
                    "expired": {
                      "type": "boolean",
                      "description": "Expired"
                    },
                    "role": {
                      "default": "administrator",
                      "type": "string",
                      "description": "用于此 API 的角色",
                      "example": "administrator"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "创建一个新的 API 密钥",
        "tags": [
          "API Keys"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api_key.app"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Unique and format by [a-zA-Z0-9-_]",
                    "example": "EMQX-API-KEY-1"
                  },
                  "expired_at": {
                    "default": "infinity",
                    "description": "No longer valid datetime",
                    "example": "2021-12-05T02:01:34.186Z",
                    "oneOf": [
                      {
                        "oneOf": [
                          {
                            "type": "integer",
                            "description": "epoch-second",
                            "example": 1640995200
                          },
                          {
                            "type": "string",
                            "format": "date-time",
                            "example": "2022-01-01T00:00:00.000Z"
                          }
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "infinity"
                        ]
                      }
                    ]
                  },
                  "desc": {
                    "type": "string",
                    "example": "Note"
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Enable/Disable"
                  },
                  "expired": {
                    "type": "boolean",
                    "description": "Expired"
                  },
                  "role": {
                    "default": "administrator",
                    "type": "string",
                    "description": "用于此 API 的角色",
                    "example": "administrator"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/listeners/{id}/start": {
      "post": {
        "description": "在所有节点上启动指定 ID 的监听器",
        "tags": [
          "Listeners"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST",
                        "BAD_LISTENER_ID"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/banned": {
      "get": {
        "description": "列出目前所有被封禁的客户端 ID、用户名和 IP 地址。",
        "tags": [
          "Banned"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_banned.ban"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "清除全部黑名单数据。",
        "tags": [
          "Banned"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "添加一个客户端 ID、用户名或者 IP 地址到黑名单。",
        "tags": [
          "Banned"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/emqx_mgmt_api_banned.ban"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS",
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "错误的请求，可能是参数错误或封禁对象已存在等原因。"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_mgmt_api_banned.ban"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/connectors/{id}/enable/{enable}": {
      "put": {
        "description": "在集群的所有节点上启用或禁用连接器。",
        "tags": [
          "Connectors"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "连接器 id。必须是 {type}:{name} 的格式。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_connector"
          },
          {
            "in": "path",
            "name": "enable",
            "description": "是否启用此连接器。",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "summary": "Enable or disable connector",
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Connector not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/actions/{id}/metrics": {
      "get": {
        "description": "通过 id 来获取数据桥接的指标信息。",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          }
        ],
        "summary": "Get action metrics",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "metrics": {
                      "description": "Bridge 计数",
                      "$ref": "#/components/schemas/bridge.metrics"
                    },
                    "node_metrics": {
                      "type": "array",
                      "description": "节点的计数器",
                      "items": {
                        "$ref": "#/components/schemas/bridge.node_metrics"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Action not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/order": {
      "put": {
        "description": "重新排序所有授权源。",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Authorization sources order updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_authz_api_sources.request_sources_order"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/trace/{name}/log": {
      "get": {
        "description": "查看 trace",
        "tags": [
          "Trace"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/trace.name"
          },
          {
            "$ref": "#/components/parameters/trace.bytes"
          },
          {
            "$ref": "#/components/parameters/trace.position"
          },
          {
            "$ref": "#/components/parameters/trace.node"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "type": "string",
                      "example": "TEXT-LOG-ITEMS"
                    },
                    "meta": {
                      "properties": {
                        "bytes": {
                          "default": 1000,
                          "maximum": 2147483647,
                          "type": "integer",
                          "description": "单个 HTTP 相应中包含 trace 日志的字节数。",
                          "minimum": 0
                        },
                        "position": {
                          "default": 0,
                          "type": "integer",
                          "description": "指定从该偏移量开始读取指定的 trace 日志文件。"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad input parameter"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "NODE_ERROR"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Trace Name or Node Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Requested chunk size too big"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/connectors": {
      "get": {
        "description": "列出所有创建的连接器。",
        "tags": [
          "Connectors"
        ],
        "parameters": [],
        "summary": "List connectors",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "name": "influxdb_connector",
                    "status": "connected",
                    "type": "influxdb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "org": "examlpe_org",
                      "token": "example_token",
                      "bucket": "example_bucket",
                      "influxdb_type": "influxdb_api_v2"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "name": "my_http_connector",
                    "status": "connected",
                    "type": "http",
                    "connect_timeout": "15s",
                    "pool_size": 1,
                    "enable": true,
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://localhost:8080/api/v1",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "pool_type": "hash",
                    "enable_pipelining": 100
                  },
                  {
                    "name": "my_confluent_producer_connector",
                    "status": "connected",
                    "type": "confluent_producer",
                    "ssl": {
                      "verify": "verify_none",
                      "enable": true,
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ],
                      "server_name_indication": "auto"
                    },
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "xyz.sa-east1.gcp.confluent.cloud:9092",
                    "metadata_request_timeout": "4s"
                  },
                  {
                    "name": "iotdb_connector",
                    "status": "connected",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example iotdb connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "base_url": "http://iotdb.local:18080/",
                    "actions": [
                      "my_action"
                    ],
                    "pool_type": "random",
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.3.x"
                  },
                  {
                    "status": "connected",
                    "ssl": {
                      "enable": true
                    },
                    "description": "My connector",
                    "server": "couchbase:8093",
                    "enable": true,
                    "password": "******",
                    "username": "admin",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    }
                  },
                  {
                    "name": "datalayers_connector",
                    "status": "connected",
                    "type": "datalayers",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example datalayers connector",
                    "server": "127.0.0.1:8361",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "name": "my_azure_event_hub_producer_connector",
                    "status": "connected",
                    "type": "azure_event_hub_producer",
                    "ssl": {
                      "verify": "verify_none",
                      "enable": true,
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ],
                      "server_name_indication": "auto"
                    },
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  {
                    "name": "my_kafka_producer_connector",
                    "status": "connected",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  {
                    "name": "kinesis_connector",
                    "status": "connected",
                    "type": "kinesis",
                    "description": "My example kinesis connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "aws_access_key_id": "your_access_key",
                    "aws_secret_access_key": "aws_secret_key",
                    "endpoint": "http://localhost:4566",
                    "max_retries": 2,
                    "pool_size": 8
                  },
                  {
                    "name": "syskeeper_proxy",
                    "status": "connected",
                    "type": "syskeeper_proxy",
                    "listen": "127.0.0.1:9092",
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "acceptors": 16,
                    "handshake_timeout": "16s",
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "name": "my_pgsql_connector",
                    "status": "connected",
                    "type": "pgsql",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  {
                    "name": "mysql_connector",
                    "status": "connected",
                    "type": "mysql",
                    "description": "My example mysql connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  {
                    "timeout": "5s",
                    "name": "rabbitmq_connector",
                    "port": 5672,
                    "status": "connected",
                    "type": "rabbitmq",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example rabbitmq connector",
                    "pool_size": 8,
                    "server": "127.0.0.1",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "heartbeat": "30s",
                    "actions": [
                      "my_action"
                    ],
                    "virtual_host": "/"
                  },
                  {
                    "name": "dynamo_connector",
                    "status": "connected",
                    "type": "dynamo",
                    "description": "My example dynamo connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "aws_access_key_id": "root",
                    "aws_secret_access_key": "******",
                    "enable": true,
                    "pool_size": 8,
                    "region": "us-west-2",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "url": "http://127.0.0.1:8000"
                  },
                  {
                    "name": "tdengine_connector",
                    "status": "connected",
                    "type": "tdengine",
                    "description": "My example tdengine connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "name": "mongodb_single_connector",
                    "status": "connected",
                    "type": "mongodb_single",
                    "description": "My example mongodb_single connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "name": "demo",
                    "status": "connected",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example greptimedb connector",
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "password": "******",
                    "username": "example_username",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db"
                  },
                  {
                    "name": "opents_connector",
                    "status": "connected",
                    "type": "opents",
                    "description": "My example opents connector",
                    "pool_size": 8,
                    "server": "http://localhost:4242/",
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "status": "connected",
                    "description": "My connector",
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    },
                    "account_key": "******",
                    "account_name": "my_account_name"
                  },
                  {
                    "name": "mongodb_sharded_connector",
                    "status": "connected",
                    "type": "mongodb_sharded",
                    "description": "My example mongodb_sharded connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "name": "mongodb_rs_connector",
                    "status": "connected",
                    "type": "mongodb_rs",
                    "description": "My example mongodb_rs connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "status": "connected",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis single connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "server": "127.0.0.1:6379",
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "redis_type": "single"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ]
                  },
                  {
                    "name": "oracle_connector",
                    "status": "connected",
                    "type": "oracle",
                    "description": "My example oracle connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "password": "oracle",
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "server": "127.0.0.1:1521",
                    "service_name": "XE",
                    "sid": "XE",
                    "username": "system"
                  },
                  {
                    "name": "hstreamdb_connector",
                    "status": "connected",
                    "type": "hstreamdb",
                    "description": "My example hstreamdb connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "grpc_timeout": "30s",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "ssl": {
                      "enable": false,
                      "verify": "verify_peer"
                    },
                    "url": "http://127.0.0.1:6570"
                  },
                  {
                    "name": "influxdb_connector",
                    "status": "connected",
                    "type": "influxdb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database",
                      "influxdb_type": "influxdb_api_v1"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "port": 443,
                    "status": "connected",
                    "host": "s3.eu-east-1.amazonaws.com",
                    "description": "My S3 connector",
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "transport_options": {
                      "ssl": {
                        "verify": "verify_peer",
                        "enable": true
                      },
                      "connect_timeout": "1s",
                      "pool_size": 4,
                      "max_retries": 1,
                      "request_timeout": "60s",
                      "enable_pipelining": 1
                    },
                    "secret_access_key": "SECRET",
                    "access_key_id": "ACCESS"
                  },
                  {
                    "name": "cassandra_connector",
                    "status": "connected",
                    "type": "cassandra",
                    "description": "My example cassandra connector",
                    "pool_size": 8,
                    "password": "******",
                    "username": "root",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "servers": "127.0.0.1:9042",
                    "actions": [
                      "my_action"
                    ],
                    "keyspace": "mqtt"
                  },
                  {
                    "name": "my_connector",
                    "status": "connected",
                    "type": "gcp_pubsub_producer",
                    "description": "my connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  {
                    "name": "clickhouse_connector",
                    "status": "connected",
                    "type": "clickhouse",
                    "description": "My example clickhouse connector",
                    "pool_size": 8,
                    "password": "******",
                    "url": "http://localhost:8123",
                    "username": "default",
                    "database": "mqtt",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "driver": "ms-sql",
                    "name": "sqlserver_connector",
                    "status": "connected",
                    "type": "sqlserver",
                    "description": "My example sqlserver connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  {
                    "status": "connected",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis cluster connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "redis_type": "cluster"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ]
                  },
                  {
                    "name": "my_matrix_connector",
                    "status": "connected",
                    "type": "matrix",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  {
                    "name": "my_connector",
                    "status": "connected",
                    "type": "kafka_consumer",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "bootstrap_hosts": "kafka.emqx.net:9092"
                  },
                  {
                    "name": "rocketmq_connector",
                    "status": "connected",
                    "type": "rocketmq",
                    "description": "My example rocketmq connector",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "enable": true,
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_after_created": true,
                      "start_timeout": "5s"
                    },
                    "servers": "127.0.0.1:9876"
                  },
                  {
                    "name": "pulsar_connector",
                    "status": "connected",
                    "type": "pulsar",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": "none",
                    "description": "My example pulsar connector",
                    "connect_timeout": "5s",
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "servers": "pulsar://127.0.0.1:6650",
                    "actions": [
                      "my_action"
                    ]
                  },
                  {
                    "name": "syskeeper_forwarder",
                    "status": "connected",
                    "type": "syskeeper_forwarder",
                    "pool_size": 16,
                    "server": "127.0.0.1:9092",
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "ack_timeout": "10s",
                    "actions": [
                      "my_action"
                    ],
                    "ack_mode": "no_ack"
                  },
                  {
                    "name": "elasticsearch_connector",
                    "status": "connected",
                    "type": "elasticsearch",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example elasticsearch connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "server": "127.0.0.1:9200",
                    "enable": true,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "pool_type": "random",
                    "enable_pipelining": 100
                  },
                  {
                    "name": "my_connector",
                    "status": "connected",
                    "type": "gcp_pubsub_producer",
                    "connect_timeout": "10s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "resource_opts": {
                      "request_ttl": "60s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  {
                    "name": "my_timescale_connector",
                    "status": "connected",
                    "type": "timescale",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "actions": [
                      "my_action"
                    ],
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  {
                    "status": "connected",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis sentinel connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "sentinel": "myredismaster",
                      "redis_type": "sentinel"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ]
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/bridge_timescale.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mongodb.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/gcp_pubsub_producer.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/elasticsearch.get"
                      },
                      {
                        "$ref": "#/components/schemas/connector_azure_blob_storage.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/syskeeper_forwarder.get"
                      },
                      {
                        "$ref": "#/components/schemas/pulsar.get"
                      },
                      {
                        "$ref": "#/components/schemas/rocketmq.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/kafka_consumer.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_matrix.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_sqlserver.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_influxdb.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_clickhouse.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/gcp_pubsub_consumer.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_cassa.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_hstreamdb.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_oracle.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/opents_connector.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_greptimedb.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_s3.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/tdengine_connector.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_dynamo.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/redis.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/rabbitmq.get"
                      },
                      {
                        "$ref": "#/components/schemas/connector_mqtt.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mysql.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/connector_postgres.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/connector_syskeeper_proxy.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_kinesis.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_kafka.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_azure_event_hub.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_datalayers.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/connector_couchbase.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/iotdb.get"
                      },
                      {
                        "$ref": "#/components/schemas/confluent.get_connector"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_http.get_connector"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "通过类型和名称创建一个新的连接器。",
        "tags": [
          "Connectors"
        ],
        "parameters": [],
        "summary": "Create connector",
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "influxdb_api_v2": {
                    "value": {
                      "name": "influxdb_connector",
                      "status": "connected",
                      "type": "influxdb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example influxdb connector",
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "parameters": {
                        "org": "examlpe_org",
                        "token": "example_token",
                        "bucket": "example_bucket",
                        "influxdb_type": "influxdb_api_v2"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "InfluxDB HTTP API V2 Connector"
                  },
                  "http": {
                    "value": {
                      "name": "my_http_connector",
                      "status": "connected",
                      "type": "http",
                      "connect_timeout": "15s",
                      "pool_size": 1,
                      "enable": true,
                      "headers": {
                        "content-type": "application/json"
                      },
                      "url": "http://localhost:8080/api/v1",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "pool_type": "hash",
                      "enable_pipelining": 100
                    },
                    "summary": "HTTP Connector"
                  },
                  "confluent_producer": {
                    "value": {
                      "name": "my_confluent_producer_connector",
                      "status": "connected",
                      "type": "confluent_producer",
                      "ssl": {
                        "verify": "verify_none",
                        "enable": true,
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ],
                        "server_name_indication": "auto"
                      },
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "xyz.sa-east1.gcp.confluent.cloud:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Confluent Connector"
                  },
                  "iotdb": {
                    "value": {
                      "name": "iotdb_connector",
                      "status": "connected",
                      "type": "iotdb",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "******",
                        "username": "root"
                      },
                      "description": "My example iotdb connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "base_url": "http://iotdb.local:18080/",
                      "actions": [
                        "my_action"
                      ],
                      "pool_type": "random",
                      "enable_pipelining": 100,
                      "iotdb_version": "v1.3.x"
                    },
                    "summary": "Apache IoTDB Connector"
                  },
                  "couchbase": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": true
                      },
                      "description": "My connector",
                      "server": "couchbase:8093",
                      "enable": true,
                      "password": "******",
                      "username": "admin",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "45s"
                      }
                    },
                    "summary": "Couchbase Connector"
                  },
                  "datalayers": {
                    "value": {
                      "name": "datalayers_connector",
                      "status": "connected",
                      "type": "datalayers",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example datalayers connector",
                      "server": "127.0.0.1:8361",
                      "enable": true,
                      "parameters": {
                        "password": "******",
                        "username": "example_username",
                        "database": "example_database"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Datalayers Connector"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer_connector",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "ssl": {
                        "verify": "verify_none",
                        "enable": true,
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ],
                        "server_name_indication": "auto"
                      },
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Azure Event Hub Connector"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_connector",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "localhost:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Kafka Producer Connector"
                  },
                  "kinesis": {
                    "value": {
                      "name": "kinesis_connector",
                      "status": "connected",
                      "type": "kinesis",
                      "description": "My example kinesis connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "aws_access_key_id": "your_access_key",
                      "aws_secret_access_key": "aws_secret_key",
                      "endpoint": "http://localhost:4566",
                      "max_retries": 2,
                      "pool_size": 8
                    },
                    "summary": "Kinesis Connector"
                  },
                  "syskeeper_proxy": {
                    "value": {
                      "name": "syskeeper_proxy",
                      "status": "connected",
                      "type": "syskeeper_proxy",
                      "listen": "127.0.0.1:9092",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "acceptors": 16,
                      "handshake_timeout": "16s",
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Syskeeper Proxy Connector"
                  },
                  "pgsql": {
                    "value": {
                      "name": "my_pgsql_connector",
                      "status": "connected",
                      "type": "pgsql",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "PostgreSQL Connector"
                  },
                  "mysql": {
                    "value": {
                      "name": "mysql_connector",
                      "status": "connected",
                      "type": "mysql",
                      "description": "My example mysql connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:3306",
                      "password": "******",
                      "username": "root",
                      "database": "test",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "health_check_interval": "20s"
                      }
                    },
                    "summary": "MySQL Connector"
                  },
                  "rabbitmq": {
                    "value": {
                      "timeout": "5s",
                      "name": "rabbitmq_connector",
                      "port": 5672,
                      "status": "connected",
                      "type": "rabbitmq",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example rabbitmq connector",
                      "pool_size": 8,
                      "server": "127.0.0.1",
                      "enable": true,
                      "password": "******",
                      "username": "guest",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "heartbeat": "30s",
                      "actions": [
                        "my_action"
                      ],
                      "virtual_host": "/"
                    },
                    "summary": "Rabbitmq Connector"
                  },
                  "dynamo": {
                    "value": {
                      "name": "dynamo_connector",
                      "status": "connected",
                      "type": "dynamo",
                      "description": "My example dynamo connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "aws_access_key_id": "root",
                      "aws_secret_access_key": "******",
                      "enable": true,
                      "pool_size": 8,
                      "region": "us-west-2",
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "url": "http://127.0.0.1:8000"
                    },
                    "summary": "DynamoDB Connector"
                  },
                  "tdengine": {
                    "value": {
                      "name": "tdengine_connector",
                      "status": "connected",
                      "type": "tdengine",
                      "description": "My example tdengine connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:6041",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "TDengine Connector"
                  },
                  "mongodb_single": {
                    "value": {
                      "name": "mongodb_single_connector",
                      "status": "connected",
                      "type": "mongodb_single",
                      "description": "My example mongodb_single connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Standalone Connector"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "demo",
                      "status": "connected",
                      "type": "greptimedb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example greptimedb connector",
                      "server": "127.0.0.1:4001",
                      "enable": true,
                      "password": "******",
                      "username": "example_username",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "dbname": "example_db"
                    },
                    "summary": "GreptimeDB Connector"
                  },
                  "opents": {
                    "value": {
                      "name": "opents_connector",
                      "status": "connected",
                      "type": "opents",
                      "description": "My example opents connector",
                      "pool_size": 8,
                      "server": "http://localhost:4242/",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "OpenTSDB Connector"
                  },
                  "abs": {
                    "value": {
                      "status": "connected",
                      "description": "My connector",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "45s"
                      },
                      "account_key": "******",
                      "account_name": "my_account_name"
                    },
                    "summary": "Azure Blob Storage Connector"
                  },
                  "mongodb_sharded": {
                    "value": {
                      "name": "mongodb_sharded_connector",
                      "status": "connected",
                      "type": "mongodb_sharded",
                      "description": "My example mongodb_sharded connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Sharded Connector"
                  },
                  "mongodb_rs": {
                    "value": {
                      "name": "mongodb_rs_connector",
                      "status": "connected",
                      "type": "mongodb_rs",
                      "description": "My example mongodb_rs connector",
                      "parameters": {
                        "pool_size": 8,
                        "enable": true,
                        "password": "******",
                        "username": "myuser",
                        "database": "mqtt",
                        "srv_record": false
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "MongoDB Replica Set Connector"
                  },
                  "redis_single_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis single connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "server": "127.0.0.1:6379",
                        "password": "******",
                        "username": "test",
                        "database": 1,
                        "redis_type": "single"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Single Producer Connector"
                  },
                  "oracle": {
                    "value": {
                      "name": "oracle_connector",
                      "status": "connected",
                      "type": "oracle",
                      "description": "My example oracle connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "password": "oracle",
                      "pool_size": 8,
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "server": "127.0.0.1:1521",
                      "service_name": "XE",
                      "sid": "XE",
                      "username": "system"
                    },
                    "summary": "Oracle Connector"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "hstreamdb_connector",
                      "status": "connected",
                      "type": "hstreamdb",
                      "description": "My example hstreamdb connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "grpc_timeout": "30s",
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_timeout": "5s"
                      },
                      "ssl": {
                        "enable": false,
                        "verify": "verify_peer"
                      },
                      "url": "http://127.0.0.1:6570"
                    },
                    "summary": "HStreamDB Connector"
                  },
                  "influxdb_api_v1": {
                    "value": {
                      "name": "influxdb_connector",
                      "status": "connected",
                      "type": "influxdb",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My example influxdb connector",
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "parameters": {
                        "password": "******",
                        "username": "example_username",
                        "database": "example_database",
                        "influxdb_type": "influxdb_api_v1"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "InfluxDB HTTP API V1 Connector"
                  },
                  "s3_aws": {
                    "value": {
                      "port": 443,
                      "status": "connected",
                      "host": "s3.eu-east-1.amazonaws.com",
                      "description": "My S3 connector",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "transport_options": {
                        "ssl": {
                          "verify": "verify_peer",
                          "enable": true
                        },
                        "connect_timeout": "1s",
                        "pool_size": 4,
                        "max_retries": 1,
                        "request_timeout": "60s",
                        "enable_pipelining": 1
                      },
                      "secret_access_key": "SECRET",
                      "access_key_id": "ACCESS"
                    },
                    "summary": "S3 Connector"
                  },
                  "cassandra": {
                    "value": {
                      "name": "cassandra_connector",
                      "status": "connected",
                      "type": "cassandra",
                      "description": "My example cassandra connector",
                      "pool_size": 8,
                      "password": "******",
                      "username": "root",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "servers": "127.0.0.1:9042",
                      "actions": [
                        "my_action"
                      ],
                      "keyspace": "mqtt"
                    },
                    "summary": "Cassandra Connector"
                  },
                  "gcp_pubsub_consumer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "gcp_pubsub_producer",
                      "description": "my connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "max_retries": 2,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "30s"
                      },
                      "pipelining": 100,
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Consumer Connector"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "clickhouse_connector",
                      "status": "connected",
                      "type": "clickhouse",
                      "description": "My example clickhouse connector",
                      "pool_size": 8,
                      "password": "******",
                      "url": "http://localhost:8123",
                      "username": "default",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "ClickHouse Connector"
                  },
                  "sqlserver": {
                    "value": {
                      "driver": "ms-sql",
                      "name": "sqlserver_connector",
                      "status": "connected",
                      "type": "sqlserver",
                      "description": "My example sqlserver connector",
                      "pool_size": 8,
                      "server": "127.0.0.1:1433",
                      "password": "******",
                      "username": "sa",
                      "database": "test",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "health_check_interval": "20s"
                      }
                    },
                    "summary": "Microsoft SQL Server Connector"
                  },
                  "redis_cluster_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis cluster connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "password": "******",
                        "username": "test",
                        "servers": "127.0.0.1:6379,127.0.0.2:6379",
                        "redis_type": "cluster"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Cluster Producer Connector"
                  },
                  "matrix": {
                    "value": {
                      "name": "my_matrix_connector",
                      "status": "connected",
                      "type": "matrix",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "Matrix Connector"
                  },
                  "kafka_consumer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "kafka_consumer",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "resource_opts": {
                        "start_timeout": "5s",
                        "start_after_created": true,
                        "health_check_interval": "30s"
                      },
                      "bootstrap_hosts": "kafka.emqx.net:9092"
                    },
                    "summary": "Kafka Consumer Connector"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "rocketmq_connector",
                      "status": "connected",
                      "type": "rocketmq",
                      "description": "My example rocketmq connector",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "enable": true,
                      "pool_size": 8,
                      "resource_opts": {
                        "health_check_interval": "15s",
                        "start_after_created": true,
                        "start_timeout": "5s"
                      },
                      "servers": "127.0.0.1:9876"
                    },
                    "summary": "RocketMQ Connector"
                  },
                  "pulsar": {
                    "value": {
                      "name": "pulsar_connector",
                      "status": "connected",
                      "type": "pulsar",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": "none",
                      "description": "My example pulsar connector",
                      "connect_timeout": "5s",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "servers": "pulsar://127.0.0.1:6650",
                      "actions": [
                        "my_action"
                      ]
                    },
                    "summary": "Pulsar Connector"
                  },
                  "syskeeper_forwarder": {
                    "value": {
                      "name": "syskeeper_forwarder",
                      "status": "connected",
                      "type": "syskeeper_forwarder",
                      "pool_size": 16,
                      "server": "127.0.0.1:9092",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "ack_timeout": "10s",
                      "actions": [
                        "my_action"
                      ],
                      "ack_mode": "no_ack"
                    },
                    "summary": "Syskeeper Forwarder Connector"
                  },
                  "elasticsearch": {
                    "value": {
                      "name": "elasticsearch_connector",
                      "status": "connected",
                      "type": "elasticsearch",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "******",
                        "username": "root"
                      },
                      "description": "My example elasticsearch connector",
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "server": "127.0.0.1:9200",
                      "enable": true,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "pool_type": "random",
                      "enable_pipelining": 100
                    },
                    "summary": "Elastic Search Connector"
                  },
                  "gcp_pubsub_producer": {
                    "value": {
                      "name": "my_connector",
                      "status": "connected",
                      "type": "gcp_pubsub_producer",
                      "connect_timeout": "10s",
                      "pool_size": 8,
                      "enable": true,
                      "max_retries": 2,
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "resource_opts": {
                        "request_ttl": "60s"
                      },
                      "pipelining": 100,
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Producer Connector"
                  },
                  "timescale": {
                    "value": {
                      "name": "my_timescale_connector",
                      "status": "connected",
                      "type": "timescale",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "actions": [
                        "my_action"
                      ],
                      "database": "emqx_data",
                      "enable": true,
                      "password": "public",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "ssl": {
                        "ciphers": [],
                        "depth": 10,
                        "enable": false,
                        "hibernate_after": "5s",
                        "log_level": "notice",
                        "reuse_sessions": true,
                        "secure_renegotiate": true,
                        "verify": "verify_peer",
                        "versions": [
                          "tlsv1.3",
                          "tlsv1.2"
                        ]
                      },
                      "username": "postgres"
                    },
                    "summary": "Timescale Connector"
                  },
                  "redis_sentinel_producer": {
                    "value": {
                      "status": "connected",
                      "ssl": {
                        "enable": false
                      },
                      "description": "My redis sentinel connector",
                      "enable": true,
                      "parameters": {
                        "pool_size": 8,
                        "password": "******",
                        "username": "test",
                        "database": 1,
                        "servers": "127.0.0.1:6379,127.0.0.2:6379",
                        "sentinel": "myredismaster",
                        "redis_type": "sentinel"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ]
                    },
                    "summary": "Redis Sentinel Producer Connector"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_producer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/elasticsearch.get"
                    },
                    {
                      "$ref": "#/components/schemas/connector_azure_blob_storage.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/syskeeper_forwarder.get"
                    },
                    {
                      "$ref": "#/components/schemas/pulsar.get"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/kafka_consumer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/gcp_pubsub_consumer.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/opents_connector.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_s3.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/tdengine_connector.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/redis.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/rabbitmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/connector_mqtt.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_postgres.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_syskeeper_proxy.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_datalayers.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/connector_couchbase.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/iotdb.get"
                    },
                    {
                      "$ref": "#/components/schemas/confluent.get_connector"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get_connector"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Connector already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "influxdb_api_v2": {
                  "value": {
                    "name": "influxdb_connector",
                    "type": "influxdb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "org": "examlpe_org",
                      "token": "example_token",
                      "bucket": "example_bucket",
                      "influxdb_type": "influxdb_api_v2"
                    }
                  },
                  "summary": "InfluxDB HTTP API V2 Connector"
                },
                "http": {
                  "value": {
                    "name": "my_http_connector",
                    "type": "http",
                    "connect_timeout": "15s",
                    "pool_size": 1,
                    "enable": true,
                    "headers": {
                      "content-type": "application/json"
                    },
                    "url": "http://localhost:8080/api/v1",
                    "pool_type": "hash",
                    "enable_pipelining": 100
                  },
                  "summary": "HTTP Connector"
                },
                "confluent_producer": {
                  "value": {
                    "name": "my_confluent_producer_connector",
                    "type": "confluent_producer",
                    "ssl": {
                      "verify": "verify_none",
                      "enable": true,
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ],
                      "server_name_indication": "auto"
                    },
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "xyz.sa-east1.gcp.confluent.cloud:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Confluent Connector"
                },
                "iotdb": {
                  "value": {
                    "name": "iotdb_connector",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example iotdb connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "base_url": "http://iotdb.local:18080/",
                    "pool_type": "random",
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.3.x"
                  },
                  "summary": "Apache IoTDB Connector"
                },
                "couchbase": {
                  "value": {
                    "name": "my_connector",
                    "type": "couchbase",
                    "ssl": {
                      "enable": true
                    },
                    "description": "My connector",
                    "server": "couchbase:8093",
                    "enable": true,
                    "password": "******",
                    "username": "admin",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    }
                  },
                  "summary": "Couchbase Connector"
                },
                "datalayers": {
                  "value": {
                    "name": "datalayers_connector",
                    "type": "datalayers",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example datalayers connector",
                    "server": "127.0.0.1:8361",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database"
                    }
                  },
                  "summary": "Datalayers Connector"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "name": "my_azure_event_hub_producer_connector",
                    "type": "azure_event_hub_producer",
                    "ssl": {
                      "verify": "verify_none",
                      "enable": true,
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ],
                      "server_name_indication": "auto"
                    },
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Azure Event Hub Connector"
                },
                "kafka_producer": {
                  "value": {
                    "name": "my_kafka_producer_connector",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Kafka Producer Connector"
                },
                "kinesis": {
                  "value": {
                    "name": "kinesis_connector",
                    "type": "kinesis",
                    "description": "My example kinesis connector",
                    "aws_access_key_id": "your_access_key",
                    "aws_secret_access_key": "aws_secret_key",
                    "endpoint": "http://localhost:4566",
                    "max_retries": 2,
                    "pool_size": 8
                  },
                  "summary": "Kinesis Connector"
                },
                "syskeeper_proxy": {
                  "value": {
                    "name": "syskeeper_proxy",
                    "type": "syskeeper_proxy",
                    "listen": "127.0.0.1:9092",
                    "enable": true,
                    "acceptors": 16,
                    "handshake_timeout": "16s"
                  },
                  "summary": "Syskeeper Proxy Connector"
                },
                "pgsql": {
                  "value": {
                    "name": "my_pgsql_connector",
                    "type": "pgsql",
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "PostgreSQL Connector"
                },
                "mysql": {
                  "value": {
                    "name": "mysql_connector",
                    "type": "mysql",
                    "description": "My example mysql connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  "summary": "MySQL Connector"
                },
                "rabbitmq": {
                  "value": {
                    "timeout": "5s",
                    "name": "rabbitmq_connector",
                    "port": 5672,
                    "type": "rabbitmq",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example rabbitmq connector",
                    "pool_size": 8,
                    "server": "127.0.0.1",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "heartbeat": "30s",
                    "virtual_host": "/"
                  },
                  "summary": "Rabbitmq Connector"
                },
                "dynamo": {
                  "value": {
                    "name": "dynamo_connector",
                    "type": "dynamo",
                    "description": "My example dynamo connector",
                    "aws_access_key_id": "root",
                    "aws_secret_access_key": "******",
                    "enable": true,
                    "pool_size": 8,
                    "region": "us-west-2",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "url": "http://127.0.0.1:8000"
                  },
                  "summary": "DynamoDB Connector"
                },
                "tdengine": {
                  "value": {
                    "name": "tdengine_connector",
                    "type": "tdengine",
                    "description": "My example tdengine connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root"
                  },
                  "summary": "TDengine Connector"
                },
                "mongodb_single": {
                  "value": {
                    "name": "mongodb_single_connector",
                    "type": "mongodb_single",
                    "description": "My example mongodb_single connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Standalone Connector"
                },
                "greptimedb": {
                  "value": {
                    "name": "demo",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example greptimedb connector",
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "password": "******",
                    "username": "example_username",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db"
                  },
                  "summary": "GreptimeDB Connector"
                },
                "opents": {
                  "value": {
                    "name": "opents_connector",
                    "type": "opents",
                    "description": "My example opents connector",
                    "pool_size": 8,
                    "server": "http://localhost:4242/",
                    "enable": true
                  },
                  "summary": "OpenTSDB Connector"
                },
                "abs": {
                  "value": {
                    "name": "my_connector",
                    "type": "azure_blob_storage",
                    "description": "My connector",
                    "enable": true,
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "45s"
                    },
                    "account_key": "******",
                    "account_name": "my_account_name"
                  },
                  "summary": "Azure Blob Storage Connector"
                },
                "mongodb_sharded": {
                  "value": {
                    "name": "mongodb_sharded_connector",
                    "type": "mongodb_sharded",
                    "description": "My example mongodb_sharded connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Sharded Connector"
                },
                "mongodb_rs": {
                  "value": {
                    "name": "mongodb_rs_connector",
                    "type": "mongodb_rs",
                    "description": "My example mongodb_rs connector",
                    "parameters": {
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "srv_record": false
                    }
                  },
                  "summary": "MongoDB Replica Set Connector"
                },
                "redis_single_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "redis",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis single connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "server": "127.0.0.1:6379",
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "redis_type": "single"
                    }
                  },
                  "summary": "Redis Single Producer Connector"
                },
                "oracle": {
                  "value": {
                    "name": "oracle_connector",
                    "type": "oracle",
                    "description": "My example oracle connector",
                    "password": "oracle",
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "server": "127.0.0.1:1521",
                    "service_name": "XE",
                    "sid": "XE",
                    "username": "system"
                  },
                  "summary": "Oracle Connector"
                },
                "hstreamdb": {
                  "value": {
                    "name": "hstreamdb_connector",
                    "type": "hstreamdb",
                    "description": "My example hstreamdb connector",
                    "grpc_timeout": "30s",
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_timeout": "5s"
                    },
                    "ssl": {
                      "enable": false,
                      "verify": "verify_peer"
                    },
                    "url": "http://127.0.0.1:6570"
                  },
                  "summary": "HStreamDB Connector"
                },
                "influxdb_api_v1": {
                  "value": {
                    "name": "influxdb_connector",
                    "type": "influxdb",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My example influxdb connector",
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "parameters": {
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database",
                      "influxdb_type": "influxdb_api_v1"
                    }
                  },
                  "summary": "InfluxDB HTTP API V1 Connector"
                },
                "s3_aws": {
                  "value": {
                    "name": "my_s3_connector",
                    "port": 443,
                    "type": "s3",
                    "host": "s3.eu-east-1.amazonaws.com",
                    "description": "My S3 connector",
                    "enable": true,
                    "transport_options": {
                      "ssl": {
                        "verify": "verify_peer",
                        "enable": true
                      },
                      "connect_timeout": "1s",
                      "pool_size": 4,
                      "max_retries": 1,
                      "request_timeout": "60s",
                      "enable_pipelining": 1
                    },
                    "secret_access_key": "SECRET",
                    "access_key_id": "ACCESS"
                  },
                  "summary": "S3 Connector"
                },
                "cassandra": {
                  "value": {
                    "name": "cassandra_connector",
                    "type": "cassandra",
                    "description": "My example cassandra connector",
                    "pool_size": 8,
                    "password": "******",
                    "username": "root",
                    "servers": "127.0.0.1:9042",
                    "keyspace": "mqtt"
                  },
                  "summary": "Cassandra Connector"
                },
                "gcp_pubsub_consumer": {
                  "value": {
                    "name": "my_connector",
                    "type": "gcp_pubsub_producer",
                    "description": "my connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Consumer Connector"
                },
                "clickhouse": {
                  "value": {
                    "name": "clickhouse_connector",
                    "type": "clickhouse",
                    "description": "My example clickhouse connector",
                    "pool_size": 8,
                    "password": "******",
                    "url": "http://localhost:8123",
                    "username": "default",
                    "database": "mqtt"
                  },
                  "summary": "ClickHouse Connector"
                },
                "sqlserver": {
                  "value": {
                    "driver": "ms-sql",
                    "name": "sqlserver_connector",
                    "type": "sqlserver",
                    "description": "My example sqlserver connector",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "resource_opts": {
                      "health_check_interval": "20s"
                    }
                  },
                  "summary": "Microsoft SQL Server Connector"
                },
                "redis_cluster_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "redis",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis cluster connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "redis_type": "cluster"
                    }
                  },
                  "summary": "Redis Cluster Producer Connector"
                },
                "matrix": {
                  "value": {
                    "name": "my_matrix_connector",
                    "type": "matrix",
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "Matrix Connector"
                },
                "kafka_consumer": {
                  "value": {
                    "name": "my_connector",
                    "type": "kafka_consumer",
                    "resource_opts": {
                      "start_timeout": "5s",
                      "start_after_created": true,
                      "health_check_interval": "30s"
                    },
                    "bootstrap_hosts": "kafka.emqx.net:9092"
                  },
                  "summary": "Kafka Consumer Connector"
                },
                "rocketmq": {
                  "value": {
                    "name": "rocketmq_connector",
                    "type": "rocketmq",
                    "description": "My example rocketmq connector",
                    "enable": true,
                    "pool_size": 8,
                    "resource_opts": {
                      "health_check_interval": "15s",
                      "start_after_created": true,
                      "start_timeout": "5s"
                    },
                    "servers": "127.0.0.1:9876"
                  },
                  "summary": "RocketMQ Connector"
                },
                "pulsar": {
                  "value": {
                    "name": "pulsar_connector",
                    "type": "pulsar",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": "none",
                    "description": "My example pulsar connector",
                    "connect_timeout": "5s",
                    "enable": true,
                    "servers": "pulsar://127.0.0.1:6650"
                  },
                  "summary": "Pulsar Connector"
                },
                "syskeeper_forwarder": {
                  "value": {
                    "name": "syskeeper_forwarder",
                    "type": "syskeeper_forwarder",
                    "pool_size": 16,
                    "server": "127.0.0.1:9092",
                    "enable": true,
                    "ack_timeout": "10s",
                    "ack_mode": "no_ack"
                  },
                  "summary": "Syskeeper Forwarder Connector"
                },
                "elasticsearch": {
                  "value": {
                    "name": "elasticsearch_connector",
                    "type": "elasticsearch",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "******",
                      "username": "root"
                    },
                    "description": "My example elasticsearch connector",
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "server": "127.0.0.1:9200",
                    "enable": true,
                    "pool_type": "random",
                    "enable_pipelining": 100
                  },
                  "summary": "Elastic Search Connector"
                },
                "gcp_pubsub_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "gcp_pubsub_producer",
                    "connect_timeout": "10s",
                    "pool_size": 8,
                    "enable": true,
                    "max_retries": 2,
                    "resource_opts": {
                      "request_ttl": "60s"
                    },
                    "pipelining": 100,
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Producer Connector"
                },
                "timescale": {
                  "value": {
                    "name": "my_timescale_connector",
                    "type": "timescale",
                    "database": "emqx_data",
                    "enable": true,
                    "password": "public",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "ssl": {
                      "ciphers": [],
                      "depth": 10,
                      "enable": false,
                      "hibernate_after": "5s",
                      "log_level": "notice",
                      "reuse_sessions": true,
                      "secure_renegotiate": true,
                      "verify": "verify_peer",
                      "versions": [
                        "tlsv1.3",
                        "tlsv1.2"
                      ]
                    },
                    "username": "postgres"
                  },
                  "summary": "Timescale Connector"
                },
                "redis_sentinel_producer": {
                  "value": {
                    "name": "my_connector",
                    "type": "redis",
                    "ssl": {
                      "enable": false
                    },
                    "description": "My redis sentinel connector",
                    "enable": true,
                    "parameters": {
                      "pool_size": 8,
                      "password": "******",
                      "username": "test",
                      "database": 1,
                      "servers": "127.0.0.1:6379,127.0.0.2:6379",
                      "sentinel": "myredismaster",
                      "redis_type": "sentinel"
                    }
                  },
                  "summary": "Redis Sentinel Producer Connector"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_timescale.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_producer.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/elasticsearch.post"
                  },
                  {
                    "$ref": "#/components/schemas/connector_azure_blob_storage.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/syskeeper_forwarder.post"
                  },
                  {
                    "$ref": "#/components/schemas/pulsar.post"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/kafka_consumer.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/gcp_pubsub_consumer.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/opents_connector.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_s3.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/tdengine_connector.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/redis.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/rabbitmq.post"
                  },
                  {
                    "$ref": "#/components/schemas/connector_mqtt.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_postgres.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_syskeeper_proxy.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_datalayers.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/connector_couchbase.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/iotdb.post"
                  },
                  {
                    "$ref": "#/components/schemas/confluent.post_connector"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.post_connector"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authentication/order": {
      "put": {
        "description": "在全局认证链中重新排序所有认证器。",
        "tags": [
          "Authentication"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Authenticators order updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/emqx_authn_api.request_authn_order"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_validations/validation/{name}": {
      "get": {
        "description": "查找一条验证规则",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "验证规则名称",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_validation"
          }
        ],
        "summary": "Lookup a validation",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "avro_check": {
                    "value": {
                      "name": "my_validation",
                      "description": "my validation",
                      "tags": [
                        "validation"
                      ],
                      "strategy": "all_pass",
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "checks": [
                        {
                          "type": "avro",
                          "schema": "my_avro_schema"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      }
                    },
                    "summary": "Using an Avro schema check"
                  },
                  "sql_check": {
                    "value": {
                      "name": "my_validation",
                      "description": "my validation",
                      "tags": [
                        "validation"
                      ],
                      "strategy": "all_pass",
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "checks": [
                        {
                          "type": "sql",
                          "sql": "select payload.temp as t where t > 10"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      }
                    },
                    "summary": "Using a SQL check"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/schema_validation.validation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除一条验证规则。",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "验证规则名称",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_validation"
          }
        ],
        "summary": "Delete a validation",
        "responses": {
          "204": {
            "description": "Validation deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/trace/{name}": {
      "delete": {
        "description": "删除指定的 trace",
        "tags": [
          "Trace"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/trace.name"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Trace Name Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/nodes/{node}/actions/{id}/{operation}": {
      "post": {
        "description": "在某个节点上启动数据桥接。",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node",
            "description": "节点名称，例如： 'emqx@127.0.0.1'。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "in": "path",
            "name": "id",
            "description": "数据桥接 ID，格式必须为 {type}:{name}。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "http:my_http_action"
          },
          {
            "in": "path",
            "name": "operation",
            "description": "节点可用操作：'启动'。",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "start"
              ]
            },
            "example": "start"
          }
        ],
        "summary": "Manually start a bridge on a given node",
        "responses": {
          "204": {
            "description": "Operation success"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Problem with configuration of external service or bridge not enabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge or node not found or invalid operation"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "501": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_IMPLEMENTED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Implemented"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/trace/{name}/stop": {
      "put": {
        "description": "停止指定的 trace",
        "tags": [
          "Trace"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/trace.name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/trace.trace"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Trace Name Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/opentelemetry": {
      "get": {
        "description": "Get opentelmetry configuration",
        "tags": [
          "Monitor"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "metrics": {
                    "enable": true
                  },
                  "exporter": {
                    "ssl_options": {},
                    "endpoint": "http://localhost:4317"
                  },
                  "traces": {
                    "filter": {
                      "trace_all": false
                    },
                    "enable": true
                  },
                  "logs": {
                    "level": "warning",
                    "enable": true
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/opentelemetry.opentelemetry"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update opentelmetry configuration",
        "tags": [
          "Monitor"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "metrics": {
                    "enable": true
                  },
                  "exporter": {
                    "ssl_options": {},
                    "endpoint": "http://localhost:4317"
                  },
                  "traces": {
                    "filter": {
                      "trace_all": false
                    },
                    "enable": true
                  },
                  "logs": {
                    "level": "warning",
                    "enable": true
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/opentelemetry.opentelemetry"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update Config Failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "metrics": {
                  "enable": true
                },
                "exporter": {
                  "ssl_options": {},
                  "endpoint": "http://localhost:4317"
                },
                "traces": {
                  "filter": {
                    "trace_all": false
                  },
                  "enable": true
                },
                "logs": {
                  "level": "warning",
                  "enable": true
                }
              },
              "schema": {
                "$ref": "#/components/schemas/opentelemetry.opentelemetry"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sso/{backend}": {
      "get": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ldap",
                "saml",
                "oidc"
              ]
            },
            "example": "ldap"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/sso.oidc"
                    },
                    {
                      "$ref": "#/components/schemas/dashboard.saml"
                    },
                    {
                      "$ref": "#/components/schemas/sso.ldap"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BACKEND_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ldap",
                "saml",
                "oidc"
              ]
            },
            "example": "ldap"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/sso.oidc"
                    },
                    {
                      "$ref": "#/components/schemas/dashboard.saml"
                    },
                    {
                      "$ref": "#/components/schemas/sso.ldap"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BACKEND_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/sso.oidc"
                  },
                  {
                    "$ref": "#/components/schemas/dashboard.saml"
                  },
                  {
                    "$ref": "#/components/schemas/sso.ldap"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Dashboard Single Sign-On"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "backend",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ldap",
                "saml",
                "oidc"
              ]
            },
            "example": "ldap"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BACKEND_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/listeners/{id}/restart": {
      "post": {
        "description": "在所有节点上重启指定 ID 的监听器",
        "tags": [
          "Listeners"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST",
                        "BAD_LISTENER_ID"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/links/link/{name}": {
      "get": {
        "description": "Get a cluster link configuration",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_link"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "enable": true,
                  "name": "emqxcl_b",
                  "node_status": [
                    {
                      "node": "emqx1@emqx.net",
                      "status": "connected"
                    }
                  ],
                  "pool_size": 10,
                  "server": "emqxcl_b.host:1883",
                  "ssl": {
                    "enable": false
                  },
                  "status": "connected",
                  "topics": [
                    "t/topic-example",
                    "t/topic-filter-example/1/#"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/cluster_link.link_config_response"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cluster link not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update a cluster link configuration",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_link"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "enable": true,
                  "name": "emqxcl_b",
                  "node_status": [
                    {
                      "node": "emqx1@emqx.net",
                      "status": "connected"
                    }
                  ],
                  "pool_size": 10,
                  "server": "emqxcl_b.host:1883",
                  "ssl": {
                    "enable": false
                  },
                  "status": "connected",
                  "topics": [
                    "t/topic-example",
                    "t/topic-filter-example/1/#"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/cluster_link.link_config_response"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Update Config Failed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cluster link not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "server",
                  "topics"
                ],
                "properties": {
                  "enable": {
                    "default": true,
                    "type": "boolean",
                    "description": "Enable or disable a cluster link. The link is enabled by default, disabling it allows stopping the link without removing its configuration. The link must be enabled on both sides to be operational. Disabling the link should also be done on both clusters in order to free up all associated resources."
                  },
                  "server": {
                    "type": "string",
                    "description": "MQTT host and port of the remote EMQX broker."
                  },
                  "clientid": {
                    "type": "string",
                    "description": "Optional Base MQTT client ID for connecting to the remote EMQX cluster. If omitted, local `cluster.name` is used. EMQX maintains several connections between linked clusters, so distinct suffixes are automatically appended to the base client ID."
                  },
                  "username": {
                    "type": "string",
                    "description": "Optional MQTT username for connecting to the remote EMQX cluster."
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "Optional MQTT username for connecting to the remote EMQX cluster.",
                    "example": "R4ND0M/S∃CЯ∃T"
                  },
                  "ssl": {
                    "default": {
                      "enable": false
                    },
                    "description": "SSL configuration for connecting to the remote EMQX cluster.",
                    "$ref": "#/components/schemas/emqx.ssl_client_opts"
                  },
                  "topics": {
                    "type": "array",
                    "description": "MQTT topics to be forwarded by the linked remote EMQX broker to the local broker. Messages are only forwarded if the local EMQX broker has matching subscriber(s).<br/>Wildcards are supported. Setting empty topics list on one side of the link can be used to establish unidirectional links: the side with the empty topics won't receive remote messages, but it can forward relevant messages to its linked counterpart (according to the topics configured on that side of the link).",
                    "items": {
                      "type": "string"
                    }
                  },
                  "pool_size": {
                    "default": 8,
                    "type": "integer",
                    "description": "Size of the pool of MQTT clients that will publish messages to the linked EMQX broker.",
                    "minimum": 1
                  },
                  "retry_interval": {
                    "default": "15s",
                    "type": "string",
                    "description": "MQTT Message retry interval. Delay for the link to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,<br/>- `s` for seconds,<br/>- `m` for minutes,<br/>- `h` for hours;<br/><br/>or combination of whereof: `1h5m0s`"
                  },
                  "max_inflight": {
                    "default": 32,
                    "type": "integer",
                    "description": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
                    "minimum": 0
                  },
                  "resource_opts": {
                    "default": {},
                    "description": "资源相关的选项。",
                    "$ref": "#/components/schemas/cluster.creation_opts"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a cluster link",
        "tags": [
          "Cluster"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_link"
          }
        ],
        "responses": {
          "204": {
            "description": "Link deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Cluster link not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/retainer/message/{topic}": {
      "get": {
        "description": "不支持主题通配符",
        "tags": [
          "Retainer"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "topic",
            "description": "主题",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "消息详情",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/retainer.message"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "不支持的后端"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "消息不存在"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除对应的消息",
        "tags": [
          "Retainer"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "topic",
            "description": "主题",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "不支持的后端"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "消息不存在"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/rule_events": {
      "get": {
        "description": "列出所有能被规则使用的事件",
        "tags": [
          "Rules"
        ],
        "parameters": [],
        "summary": "List rule events",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule_engine.rule_events"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/file_transfer/files/{clientid}/{fileid}": {
      "get": {
        "description": "根据客户端 ID 或者文件 ID 列出所有已上传的文件",
        "tags": [
          "File Transfer"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/file_transfer.client_id"
          },
          {
            "$ref": "#/components/parameters/file_transfer.file_id"
          }
        ],
        "summary": "List files uploaded in a specific transfer",
        "responses": {
          "200": {
            "description": "Operation success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "FILES_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Files requested for this transfer could not be found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "SERVICE_UNAVAILABLE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Service unavailable"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/audit": {
      "get": {
        "description": "基于过滤器 API 获取审计日志。此功能使用户能够高效地<br/>访问所需的审计跟踪数据以便于审计、保持合规性<br/>故障排除和安全分析。",
        "tags": [
          "Audit"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "node",
            "description": "根据生成日志的节点名称过滤日志。",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "in": "query",
            "name": "from",
            "description": "根据源类型过滤日志。有效值包括:<br/>`dashboard`: Dashboard 请求日志，需要使用 jwt_token。<br/>`rest_api`: API 密钥请求日志。<br/>`cli`: emqx 命令行操作记录日志<br/>`erlang_console`: emqx remote_console运行函数的日志。",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "dashboard",
                "rest_api",
                "cli",
                "erlang_console"
              ]
            },
            "example": "dashboard"
          },
          {
            "in": "query",
            "name": "source",
            "description": "根据日志的来源过滤日志。可能的值包括：<br/>日志来源为 Dashboard 操作时，用于登录 Dashboard 用户名。<br/>日志来源为 REST API 操作时，调用 API 的密钥名称。<br/>日志来源为 CLI 或 Erlang console 时，为空字符串",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "admin"
          },
          {
            "in": "query",
            "name": "source_ip",
            "description": "根据操作来源的 IP 地址过滤日志，适用于记录 Dashboard 或 REST API 操作的审计日志。",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "127.0.0.1"
          },
          {
            "in": "query",
            "name": "operation_id",
            "description": "根据 swagger 的 operation_id 过滤日志，适用于记录 Dashboard 或 REST API 操作的审计日志。",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "/rules/{id}"
          },
          {
            "in": "query",
            "name": "operation_type",
            "description": "根据操作方式过滤日志。",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "rules"
          },
          {
            "in": "query",
            "name": "operation_result",
            "description": "根据操作结果过滤日志。",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "success",
                "failure"
              ]
            },
            "example": "failure"
          },
          {
            "in": "query",
            "name": "http_status_code",
            "description": "根据响应码过滤 HTTP API 日志，适用于记录 Dashboard 或 REST API 操作的审计日志。",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 200
          },
          {
            "in": "query",
            "name": "http_method",
            "description": "根据请求方法过滤 HTTP API 请求日志，适用于记录 Dashboard 或 REST API 操作的审计日志。",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "post",
                "put",
                "delete"
              ]
            },
            "example": "post"
          },
          {
            "in": "query",
            "name": "gte_duration_ms",
            "description": "根据持续时间过滤日志，选择持续时间等于或超过指定微秒数的日志。",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 0
          },
          {
            "in": "query",
            "name": "lte_duration_ms",
            "description": "过滤日志的持续时间，选择持续时间等于或少于指定微秒数的日志。",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "in": "query",
            "name": "gte_created_at",
            "description": "根据创建时间过滤日志，选择在指定时间戳或之后创建的日志，时间戳格式为rfc3339或毫秒时间戳。",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-microsecond",
                  "example": 1640995200000000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000000Z"
                }
              ]
            },
            "example": "2023-10-15T00:00:00.820384+08:00"
          },
          {
            "in": "query",
            "name": "lte_created_at",
            "description": "根据创建时间过滤日志，选择在指定时间戳或之前创建的日志，时间戳格式为rfc3339或毫秒时间戳。",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-microsecond",
                  "example": 1640995200000000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000000Z"
                }
              ]
            },
            "example": "2023-10-16T00:00:00.820384+08:00"
          },
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          }
        ],
        "summary": "List audit logs",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "args": [],
                      "created_at": "2023-10-17T10:41:20.383993+08:00",
                      "duration_ms": 0,
                      "failure": [],
                      "from": "dashboard",
                      "http_method": "post",
                      "http_request": {
                        "bindings": {},
                        "body": {
                          "password": "******",
                          "username": "admin"
                        },
                        "headers": {
                          "accept": "*/*",
                          "authorization": "******",
                          "connection": "keep-alive",
                          "content-length": "45",
                          "content-type": "application/json"
                        },
                        "method": "post"
                      },
                      "http_status_code": 200,
                      "node": "emqx@127.0.0.1",
                      "operation_id": "/login",
                      "operation_result": "success",
                      "operation_type": "login",
                      "source": "admin",
                      "source_ip": "127.0.0.1"
                    },
                    {
                      "args": [
                        "show",
                        "log"
                      ],
                      "created_at": "2023-10-17T10:45:13.100426+08:00",
                      "duration_ms": 7,
                      "failure": [],
                      "from": "cli",
                      "http_method": [],
                      "http_request": [],
                      "http_status_code": [],
                      "node": "emqx@127.0.0.1",
                      "operation_id": [],
                      "operation_result": [],
                      "operation_type": "conf",
                      "source": [],
                      "source_ip": []
                    }
                  ],
                  "meta": {
                    "count": 2,
                    "hasnext": false,
                    "limit": 50,
                    "page": 1
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/audit.audit_list"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Audit is disabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}/unsubscribe": {
      "post": {
        "description": "取消订阅",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Unsubscribe OK"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx_mgmt_api_clients.unsubscribe"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/plugins/install": {
      "post": {
        "description": "Upload a plugin tarball (plugin-vsn.tar.gz).Follow [emqx-plugin-template](https://github.com/emqx/emqx-plugin-template) to develop plugin.",
        "tags": [
          "Plugins"
        ],
        "parameters": [],
        "summary": "Install a new plugin",
        "responses": {
          "204": {
            "description": "Install plugin successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UNEXPECTED_ERROR",
                        "ALREADY_INSTALLED",
                        "BAD_PLUGIN_INFO"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "encoding": {
                "plugin": {
                  "contentType": "application/gzip"
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "plugin": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/lwm2m/clients/{clientid}/read": {
      "post": {
        "description": "发送读指令到某资源",
        "tags": [
          "LwM2M Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "urn:oma:lwm2m:oma:2"
          },
          {
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "/3/0/7"
          }
        ],
        "summary": "Read Value from a Resource Path",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENT_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "clientid not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/banned/{as}/{who}": {
      "delete": {
        "description": "将一个客户端 ID、用户名或者 IP 地址从黑名单中删除。",
        "tags": [
          "Banned"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "as",
            "description": "封禁方式，可以通过客户端 ID、用户名或者 IP 地址等方式进行封禁。",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "clientid",
                "username",
                "peerhost",
                "clientid_re",
                "username_re",
                "peerhost_net"
              ]
            },
            "example": "username"
          },
          {
            "in": "path",
            "name": "who",
            "description": "封禁对象，具体的客户端 ID、用户名或者 IP 地址。",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Badass"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete banned success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "未在黑名单中找到该封禁对象。"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_validations": {
      "get": {
        "description": "列出验证规则。",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [],
        "summary": "List validations",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "list": {
                    "value": [
                      {
                        "name": "my_validation",
                        "description": "my validation",
                        "tags": [
                          "validation"
                        ],
                        "strategy": "all_pass",
                        "enable": true,
                        "topics": [
                          "t/+"
                        ],
                        "checks": [
                          {
                            "type": "sql",
                            "sql": "select payload.temp as t where t > 10"
                          }
                        ],
                        "failure_action": "drop",
                        "log_failure": {
                          "level": "info"
                        }
                      },
                      {
                        "name": "other_validation",
                        "description": "my validation",
                        "tags": [
                          "validation"
                        ],
                        "strategy": "all_pass",
                        "enable": true,
                        "topics": [
                          "t/+"
                        ],
                        "checks": [
                          {
                            "type": "avro",
                            "schema": "my_avro_schema"
                          }
                        ],
                        "failure_action": "drop",
                        "log_failure": {
                          "level": "info"
                        }
                      }
                    ],
                    "summary": "List"
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/schema_validation.validation"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新一条验证规则。",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [],
        "summary": "Update a validation",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "update": {
                    "value": {
                      "name": "my_validation",
                      "description": "my validation",
                      "tags": [
                        "validation"
                      ],
                      "strategy": "all_pass",
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "checks": [
                        {
                          "type": "sql",
                          "sql": "select payload.temp as t where t > 10"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      }
                    },
                    "summary": "Update"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/schema_validation.validation"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad params"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "update": {
                  "value": {
                    "name": "my_validation",
                    "description": "my validation",
                    "tags": [
                      "validation"
                    ],
                    "strategy": "all_pass",
                    "enable": true,
                    "topics": [
                      "t/+"
                    ],
                    "checks": [
                      {
                        "type": "sql",
                        "sql": "select payload.temp as t where t > 10"
                      }
                    ],
                    "failure_action": "drop",
                    "log_failure": {
                      "level": "info"
                    }
                  },
                  "summary": "Update"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/schema_validation.validation"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "在验证规则列表中添加新的验证规则。",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [],
        "summary": "Append a new validation",
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "avro_check": {
                    "value": {
                      "name": "my_validation",
                      "description": "my validation",
                      "tags": [
                        "validation"
                      ],
                      "strategy": "all_pass",
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "checks": [
                        {
                          "type": "avro",
                          "schema": "my_avro_schema"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      }
                    },
                    "summary": "Using an Avro schema check"
                  },
                  "sql_check": {
                    "value": {
                      "name": "my_validation",
                      "description": "my validation",
                      "tags": [
                        "validation"
                      ],
                      "strategy": "all_pass",
                      "enable": true,
                      "topics": [
                        "t/+"
                      ],
                      "checks": [
                        {
                          "type": "sql",
                          "sql": "select payload.temp as t where t > 10"
                        }
                      ],
                      "failure_action": "drop",
                      "log_failure": {
                        "level": "info"
                      }
                    },
                    "summary": "Using a SQL check"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/schema_validation.validation"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "avro_check": {
                  "value": {
                    "name": "my_validation",
                    "description": "my validation",
                    "tags": [
                      "validation"
                    ],
                    "strategy": "all_pass",
                    "enable": true,
                    "topics": [
                      "t/+"
                    ],
                    "checks": [
                      {
                        "type": "avro",
                        "schema": "my_avro_schema"
                      }
                    ],
                    "failure_action": "drop",
                    "log_failure": {
                      "level": "info"
                    }
                  },
                  "summary": "Using an Avro schema check"
                },
                "sql_check": {
                  "value": {
                    "name": "my_validation",
                    "description": "my validation",
                    "tags": [
                      "validation"
                    ],
                    "strategy": "all_pass",
                    "enable": true,
                    "topics": [
                      "t/+"
                    ],
                    "checks": [
                      {
                        "type": "sql",
                        "sql": "select payload.temp as t where t > 10"
                      }
                    ],
                    "failure_action": "drop",
                    "log_failure": {
                      "level": "info"
                    }
                  },
                  "summary": "Using a SQL check"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/schema_validation.validation"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs_reset/{rootname}": {
      "post": {
        "description": "重置（使用 `conf_path` 参数）指定的配置路径下的值<br/><br/>- 若指定路径的配置有默认值，则使用默认值；<br/>- 若指定路径的配置没有默认值，则返回 HTTP 状态码 400。",
        "tags": [
          "Configs"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "rootname",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "file_transfer",
                "broker",
                "log",
                "sysmon",
                "sys_topics",
                "alarm",
                "dashboard"
              ]
            },
            "example": "sysmon"
          },
          {
            "in": "query",
            "name": "conf_path",
            "description": "The config path separated by '.' character",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "os.sysmem_high_watermark"
          }
        ],
        "responses": {
          "200": {
            "description": "Rest config successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NO_DEFAULT_VALUE",
                        "REST_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "REST_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/mqtt/retainer": {
      "get": {
        "description": "查看配置内容",
        "tags": [
          "Retainer"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "配置内容",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/retainer.retainer"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "配置不存在"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新配置",
        "tags": [
          "Retainer"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "配置更新成功",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/retainer.retainer"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "配置更新失败"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/retainer.retainer"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/cache": {
      "delete": {
        "description": "清除集群中所有授权结果缓存。",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api_key/{name}": {
      "get": {
        "description": "指定 API 密钥 ID 获取详情",
        "tags": [
          "API Keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/api_key.name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Unique and format by [a-zA-Z0-9-_]",
                      "example": "EMQX-API-KEY-1"
                    },
                    "api_key": {
                      "type": "string",
                      "description": "TODO:uses HMAC-SHA256 for signing.",
                      "example": "a4697a5c75a769f6"
                    },
                    "expired_at": {
                      "default": "infinity",
                      "description": "No longer valid datetime",
                      "example": "2021-12-05T02:01:34.186Z",
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "type": "integer",
                              "description": "epoch-second",
                              "example": 1640995200
                            },
                            {
                              "type": "string",
                              "format": "date-time",
                              "example": "2022-01-01T00:00:00.000Z"
                            }
                          ]
                        },
                        {
                          "type": "string",
                          "enum": [
                            "infinity"
                          ]
                        }
                      ]
                    },
                    "created_at": {
                      "description": "ApiKey create datetime",
                      "example": "2021-12-01T00:00:00.000Z",
                      "oneOf": [
                        {
                          "type": "integer",
                          "description": "epoch-second",
                          "example": 1640995200
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2022-01-01T00:00:00.000Z"
                        }
                      ]
                    },
                    "desc": {
                      "type": "string",
                      "example": "Note"
                    },
                    "enable": {
                      "type": "boolean",
                      "description": "Enable/Disable"
                    },
                    "expired": {
                      "type": "boolean",
                      "description": "Expired"
                    },
                    "role": {
                      "default": "administrator",
                      "type": "string",
                      "description": "用于此 API 的角色",
                      "example": "administrator"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "指定 API 密钥 ID 进行更新",
        "tags": [
          "API Keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/api_key.name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Unique and format by [a-zA-Z0-9-_]",
                      "example": "EMQX-API-KEY-1"
                    },
                    "api_key": {
                      "type": "string",
                      "description": "TODO:uses HMAC-SHA256 for signing.",
                      "example": "a4697a5c75a769f6"
                    },
                    "expired_at": {
                      "default": "infinity",
                      "description": "No longer valid datetime",
                      "example": "2021-12-05T02:01:34.186Z",
                      "oneOf": [
                        {
                          "oneOf": [
                            {
                              "type": "integer",
                              "description": "epoch-second",
                              "example": 1640995200
                            },
                            {
                              "type": "string",
                              "format": "date-time",
                              "example": "2022-01-01T00:00:00.000Z"
                            }
                          ]
                        },
                        {
                          "type": "string",
                          "enum": [
                            "infinity"
                          ]
                        }
                      ]
                    },
                    "created_at": {
                      "description": "ApiKey create datetime",
                      "example": "2021-12-01T00:00:00.000Z",
                      "oneOf": [
                        {
                          "type": "integer",
                          "description": "epoch-second",
                          "example": 1640995200
                        },
                        {
                          "type": "string",
                          "format": "date-time",
                          "example": "2022-01-01T00:00:00.000Z"
                        }
                      ]
                    },
                    "desc": {
                      "type": "string",
                      "example": "Note"
                    },
                    "enable": {
                      "type": "boolean",
                      "description": "Enable/Disable"
                    },
                    "expired": {
                      "type": "boolean",
                      "description": "Expired"
                    },
                    "role": {
                      "default": "administrator",
                      "type": "string",
                      "description": "用于此 API 的角色",
                      "example": "administrator"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "expired_at": {
                    "default": "infinity",
                    "description": "No longer valid datetime",
                    "example": "2021-12-05T02:01:34.186Z",
                    "oneOf": [
                      {
                        "oneOf": [
                          {
                            "type": "integer",
                            "description": "epoch-second",
                            "example": 1640995200
                          },
                          {
                            "type": "string",
                            "format": "date-time",
                            "example": "2022-01-01T00:00:00.000Z"
                          }
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "infinity"
                        ]
                      }
                    ]
                  },
                  "desc": {
                    "type": "string",
                    "example": "Note"
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Enable/Disable"
                  },
                  "expired": {
                    "type": "boolean",
                    "description": "Expired"
                  },
                  "role": {
                    "default": "administrator",
                    "type": "string",
                    "description": "用于此 API 的角色",
                    "example": "administrator"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "指定 API 密钥 ID 进行删除",
        "tags": [
          "API Keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/api_key.name"
          }
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients/{clientid}/subscriptions": {
      "get": {
        "description": "获取指定客户端的订阅列表",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_mgmt_api_subscriptions.subscription"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENTID_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Client ID not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/cluster/invitation": {
      "get": {
        "description": "获取每个节点所有异步邀请状态的执行状态",
        "tags": [
          "Cluster"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get invitation progress created by async operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cluster.invitation_status"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs": {
      "get": {
        "description": "获取指定键的所有配置，包括热更新和非热更新项目。",
        "tags": [
          "Configs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "actions",
                "alarm",
                "api_key",
                "authentication",
                "authorization",
                "auto_subscribe",
                "banned",
                "bridges",
                "cluster",
                "conn_congestion",
                "connectors",
                "crl_cache",
                "dashboard",
                "delayed",
                "durable_queues",
                "durable_sessions",
                "durable_storage",
                "exhook",
                "file_transfer",
                "flapping_detect",
                "force_gc",
                "force_shutdown",
                "gateway",
                "license",
                "limiter",
                "listeners",
                "log",
                "message_transformation",
                "mqtt",
                "node",
                "opentelemetry",
                "overload_protection",
                "prometheus",
                "psk_authentication",
                "retainer",
                "rewrite",
                "rpc",
                "rule_engine",
                "schema_registry",
                "schema_validation",
                "slow_subs",
                "sources",
                "sys_topics",
                "sysmon",
                "topic_metrics"
              ]
            },
            "example": "sysmon"
          },
          {
            "in": "query",
            "name": "node",
            "description": "指定节点名称。如果未指定，则返回当前 HTTP 请求节点的配置。",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "\n    sysmon {\n      os {\n        cpu_check_interval = 60s\n        cpu_high_watermark = 80%\n        cpu_low_watermark = 60%\n        mem_check_interval = 60s\n        procmem_high_watermark = 5%\n        sysmem_high_watermark = 70%\n        }\n        vm {\n        busy_dist_port = true\n        busy_port = true\n        large_heap = 32MB\n        long_gc = disabled\n        long_schedule = 240ms\n        process_check_interval = 30s\n        process_high_watermark = 80%\n        process_low_watermark = 60%\n        }\n    }\n    "
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "deprecated": true
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_ACCEPT"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_NODE"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新指定建的配置。",
        "tags": [
          "Configs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "mode",
            "required": false,
            "schema": {
              "default": "merge",
              "type": "string",
              "enum": [
                "replace",
                "merge"
              ]
            }
          },
          {
            "in": "query",
            "name": "ignore_readonly",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configurations updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "example": "\n    sysmon {\n      os {\n        cpu_check_interval = 60s\n        cpu_high_watermark = 80%\n        cpu_low_watermark = 60%\n        mem_check_interval = 60s\n        procmem_high_watermark = 5%\n        sysmem_high_watermark = 70%\n        }\n        vm {\n        busy_dist_port = true\n        busy_port = true\n        large_heap = 32MB\n        long_gc = disabled\n        long_schedule = 240ms\n        process_check_interval = 30s\n        process_high_watermark = 80%\n        process_low_watermark = 60%\n        }\n    }\n    "
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clients": {
      "get": {
        "description": "列出客户端",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/public.page"
          },
          {
            "in": "query",
            "name": "node",
            "description": "Node name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "emqx@127.0.0.1"
          },
          {
            "$ref": "#/components/parameters/public.limit"
          },
          {
            "in": "query",
            "name": "username",
            "description": "User name, multiple values can be specified by repeating the parameter: username=u1&username=u2",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "ip_address",
            "description": "Client's IP address",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "127.0.0.1"
          },
          {
            "in": "query",
            "name": "conn_state",
            "description": "The current connection status of the client, the possible values are connected,idle,disconnected",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "connected",
                "idle",
                "disconnected"
              ]
            }
          },
          {
            "in": "query",
            "name": "clean_start",
            "description": "Whether the client uses a new session",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "proto_ver",
            "description": "Client protocol version",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "like_clientid",
            "description": "Fuzzy search `clientid` as substring",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "like_username",
            "description": "Fuzzy search `username` as substring",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "gte_created_at",
            "description": "Search client session creation time by greater than or equal method, rfc3339 or timestamp(millisecond)",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "lte_created_at",
            "description": "Search client session creation time by less than or equal method, rfc3339 or timestamp(millisecond)",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "gte_connected_at",
            "description": "Search client connection creation time by greater than or equal method, rfc3339 or timestamp(epoch millisecond)",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "lte_connected_at",
            "description": "Search client connection creation time by less than or equal method, rfc3339 or timestamp(millisecond)",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            }
          },
          {
            "in": "query",
            "name": "clientid",
            "description": "Client ID, multiple values can be specified by repeating the parameter: clientid=c1&clientid=c2",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/parameters/emqx_mgmt_api_clients.requested_client_fields"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "heap_size": 610,
                      "send_msg.dropped.expired": 0,
                      "send_oct": 31,
                      "recv_msg.qos1": 0,
                      "is_persistent": false,
                      "send_pkt": 4,
                      "clean_start": true,
                      "inflight_cnt": 0,
                      "node": "emqx@127.0.0.1",
                      "send_msg.dropped.queue_full": 0,
                      "awaiting_rel_cnt": 0,
                      "inflight_max": 32,
                      "created_at": "2024-01-01T12:34:56.789+08:00",
                      "subscriptions_cnt": 1,
                      "mailbox_len": 0,
                      "send_cnt": 4,
                      "connected": true,
                      "ip_address": "127.0.0.1",
                      "awaiting_rel_max": 100,
                      "recv_msg.qos2": 0,
                      "proto_ver": 5,
                      "mountpoint": "null",
                      "proto_name": "MQTT",
                      "durable": false,
                      "port": 52571,
                      "connected_at": "2024-01-01T12:34:56.789+08:00",
                      "enable_authn": true,
                      "expiry_interval": 0,
                      "username": null,
                      "recv_msg": 0,
                      "recv_oct": 49,
                      "send_msg.dropped.too_large": 0,
                      "keepalive": 60,
                      "send_msg.qos1": 0,
                      "send_msg.qos2": 0,
                      "recv_msg.qos0": 0,
                      "send_msg.qos0": 0,
                      "subscriptions_max": "infinity",
                      "mqueue_max": 1000,
                      "mqueue_dropped": 0,
                      "clientid": "01",
                      "is_bridge": false,
                      "peerport": 52571,
                      "send_msg": 0,
                      "listener": "tcp:default",
                      "recv_cnt": 4,
                      "recv_pkt": 4,
                      "recv_msg.dropped": 0,
                      "send_msg.dropped": 0,
                      "recv_msg.dropped.await_pubrel_timeout": 0,
                      "reductions": 6836,
                      "mqueue_len": 0
                    }
                  ],
                  "meta": {
                    "count": 1,
                    "hasnext": false,
                    "limit": 50,
                    "page": 1
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_clients.clients"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "INVALID_PARAMETER"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/authentication/users": {
      "get": {
        "description": "获取用户列表（仅支持 built_in_database 类型的认证器）",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of the results to fetch.",
            "schema": {
              "default": 1,
              "type": "integer",
              "minimum": 1
            },
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Results per page(max 10000)",
            "schema": {
              "default": 100,
              "maximum": 10000,
              "type": "integer",
              "minimum": 1
            },
            "example": 50
          },
          {
            "in": "query",
            "name": "like_user_id",
            "description": "使用用户 ID （username 或 clientid）模糊搜索，仅支持按子串的方式进行搜索。",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "test_"
          },
          {
            "in": "query",
            "name": "is_superuser",
            "description": "是否是超级用户",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "summary": "List users for gateway authenticator",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "data": [
                    {
                      "user_id": "user1"
                    },
                    {
                      "is_superuser": true,
                      "user_id": "user2"
                    }
                  ],
                  "meta": {
                    "count": 300,
                    "limit": 20,
                    "page": 0
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_users"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "添加用户（仅支持 built_in_database 类型的认证器）",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          }
        ],
        "summary": "Add user for gateway authenticator",
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "value": {
                    "password": "******",
                    "user_id": "user1"
                  },
                  "summary": "Regular user"
                },
                "super_user": {
                  "value": {
                    "password": "******",
                    "is_superuser": true,
                    "user_id": "user2"
                  },
                  "summary": "Superuser"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_create"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/listeners/{id}": {
      "get": {
        "description": "获取指定 ID 的监听器",
        "tags": [
          "Listeners"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "id": "tcp:demo",
                  "running": true,
                  "type": "tcp",
                  "bind": "0.0.0.0:1884",
                  "tcp_options": {
                    "buffer": "4KB",
                    "high_watermark": "1MB",
                    "nodelay": false,
                    "reuseaddr": true,
                    "send_timeout": "15s",
                    "send_timeout_close": true,
                    "backlog": 1024,
                    "active_n": 100
                  },
                  "max_connections": 204800,
                  "acceptors": 16,
                  "proxy_protocol": false,
                  "access_rules": [
                    "allow all"
                  ],
                  "proxy_protocol_timeout": "3s",
                  "zone": "default",
                  "mountpoint": "/",
                  "current_connections": 10240
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/listeners.wss_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ws_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.tcp_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ssl_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.quic_required_bind"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_LISTENER_ID",
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Listener id not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "为集群中所有的节点更新指定 ID 的监听器",
        "tags": [
          "Listeners"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "id": "tcp:demo",
                  "running": true,
                  "type": "tcp",
                  "bind": "0.0.0.0:1884",
                  "tcp_options": {
                    "buffer": "4KB",
                    "high_watermark": "1MB",
                    "nodelay": false,
                    "reuseaddr": true,
                    "send_timeout": "15s",
                    "send_timeout_close": true,
                    "backlog": 1024,
                    "active_n": 100
                  },
                  "max_connections": 204800,
                  "acceptors": 16,
                  "proxy_protocol": false,
                  "access_rules": [
                    "allow all"
                  ],
                  "proxy_protocol_timeout": "3s",
                  "zone": "default",
                  "mountpoint": "/",
                  "current_connections": 10240
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/listeners.wss_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ws_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.tcp_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.ssl_required_bind"
                    },
                    {
                      "$ref": "#/components/schemas/listeners.quic_required_bind"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_LISTENER_ID",
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Listener id not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "id": "tcp:demo",
                "running": true,
                "type": "tcp",
                "bind": "0.0.0.0:1884",
                "tcp_options": {
                  "buffer": "4KB",
                  "high_watermark": "1MB",
                  "nodelay": false,
                  "reuseaddr": true,
                  "send_timeout": "15s",
                  "send_timeout_close": true,
                  "backlog": 1024,
                  "active_n": 100
                },
                "max_connections": 204800,
                "acceptors": 16,
                "proxy_protocol": false,
                "access_rules": [
                  "allow all"
                ],
                "proxy_protocol_timeout": "3s",
                "zone": "default",
                "mountpoint": "/",
                "current_connections": 10240
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/listeners.wss_not_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.ws_not_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.tcp_not_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.ssl_not_required_bind"
                  },
                  {
                    "$ref": "#/components/schemas/listeners.quic_not_required_bind"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除所有节点上指定 ID 的监听器",
        "tags": [
          "Listeners"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/listeners.listener_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Listener deleted"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_LISTENER_ID"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/{username}/change_pwd": {
      "post": {
        "description": "更改 Dashboard 用户密码",
        "tags": [
          "Dashboard"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "Dashboard 用户名",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "admin"
          }
        ],
        "responses": {
          "204": {
            "description": "Update user password successfully"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST",
                        "ERROR_PWD_NOT_MATCH"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "登录失败。用户名或密码错误"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "USER_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Dashboard 用户不存在"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "old_pwd": {
                    "type": "string",
                    "description": "旧密码"
                  },
                  "new_pwd": {
                    "type": "string",
                    "description": "新密码"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/clients": {
      "get": {
        "description": "获取指定网关的客户端列表",
        "tags": [
          "Gateway Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            }
          },
          {
            "in": "query",
            "name": "node",
            "description": "匹配客户端的节点名称",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "clientid",
            "description": "匹配客户端 ID",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "username",
            "description": "匹配客户端 Username",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "ip_address",
            "description": "匹配客户端 IP 地址",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "conn_state",
            "description": "匹配客户端连接状态",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "proto_ver",
            "description": "匹配客户端协议版本",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "clean_start",
            "description": "匹配客户端 `clean_start` 标记",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "like_clientid",
            "description": "子串匹配客户端 ID",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "like_username",
            "description": "子串匹配 客户端 Username",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "gte_created_at",
            "description": "匹配会话创建时间大于等于指定值的客户端",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "lte_created_at",
            "description": "匹配会话创建时间小于等于指定值的客户端",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "gte_connected_at",
            "description": "匹配连接创建时间大于等于指定值的客户端",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "lte_connected_at",
            "description": "匹配连接创建时间小于等于指定值的客户端",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "description": "epoch-millisecond",
                  "example": 1640995200000
                },
                {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-01-01T00:00:00.000Z"
                }
              ]
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "endpoint_name",
            "description": "匹配 LwM2M 客户端 Endpoint Name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "like_endpoint_name",
            "description": "子串匹配 LwM2M 客户端 Endpoint Name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "gte_lifetime",
            "description": "匹配心跳时间大于等于指定值的 LwM2M 客户端",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "lte_lifetime",
            "description": "匹配心跳时间小于等于指定值的 LwM2M 客户端",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of the results to fetch.",
            "schema": {
              "default": 1,
              "type": "integer",
              "minimum": 1
            },
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Results per page(max 10000)",
            "schema": {
              "default": 100,
              "maximum": 10000,
              "type": "integer",
              "minimum": 1
            },
            "example": 50
          }
        ],
        "summary": "List gateway's clients",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/emqx_gateway_api_clients.exproto_client"
                          }
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/emqx_gateway_api_clients.lwm2m_client"
                          }
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/emqx_gateway_api_clients.coap_client"
                          }
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/emqx_gateway_api_clients.mqttsn_client"
                          }
                        },
                        {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/emqx_gateway_api_clients.stomp_client"
                          }
                        }
                      ]
                    },
                    "meta": {
                      "$ref": "#/components/schemas/public.meta"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schema_validations/validation/{name}/enable/{enable}": {
      "post": {
        "description": "启用或停用某个特定验证规则。",
        "tags": [
          "Schema Validation"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "验证规则名称",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_validation"
          },
          {
            "in": "path",
            "name": "enable",
            "description": "启用或停用验证规则。",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "summary": "Enable or disable validation",
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad params"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Validation not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/authentication/users/{uid}": {
      "get": {
        "description": "获取用户信息（仅支持 built_in_database 类型的认证器）",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "uid",
            "description": "用户 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "test_username"
          }
        ],
        "summary": "Get user info for gateway authenticator",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新用户信息（仅支持 built_in_database 类型的认证器）",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "uid",
            "description": "用户 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "test_username"
          }
        ],
        "summary": "Update user info for gateway authenticator",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "value": {
                    "password": "******"
                  },
                  "summary": "Update regular user"
                },
                "super_user": {
                  "value": {
                    "password": "******",
                    "is_superuser": true
                  },
                  "summary": "Update user and promote to superuser"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_update"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除用户（仅支持 built_in_database 类型的认证器）",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "uid",
            "description": "用户 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "test_username"
          }
        ],
        "summary": "Delete user for gateway authenticator",
        "responses": {
          "204": {
            "description": "User Deleted"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/listeners/{id}/authentication/import_users": {
      "post": {
        "description": "导入用户（仅支持 built_in_database 类型的认证器）",
        "tags": [
          "Gateway Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "监听器 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "stomp:tcp:def"
          }
        ],
        "summary": "Import users",
        "responses": {
          "204": {
            "description": "Imported"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/rules/{id}/metrics/reset": {
      "put": {
        "description": "重置规则计数",
        "tags": [
          "Rules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_rule_id"
          }
        ],
        "summary": "Reset rule metrics",
        "responses": {
          "204": {
            "description": "Reset Success"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Rule not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/{name}/listeners/{id}/authentication/users": {
      "get": {
        "description": "获取用户列表（仅支持 built_in_database 类型的认证器）",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "监听器 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          },
          {
            "in": "query",
            "name": "page",
            "description": "Page number of the results to fetch.",
            "schema": {
              "default": 1,
              "type": "integer",
              "minimum": 1
            },
            "example": 1
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Results per page(max 10000)",
            "schema": {
              "default": 100,
              "maximum": 10000,
              "type": "integer",
              "minimum": 1
            },
            "example": 50
          }
        ],
        "summary": "List authenticator's users",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "添加用户（仅支持 built_in_database 类型的认证器）",
        "tags": [
          "Gateway Listeners"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "网关名称.<br/><br/>可取值为 `stomp`、`mqttsn`、`coap`、`lwm2m`、`exproto`",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "coap",
                "exproto",
                "gbt32960",
                "jt808",
                "lwm2m",
                "mqttsn",
                "ocpp",
                "stomp"
              ]
            },
            "example": "stomp"
          },
          {
            "in": "path",
            "name": "id",
            "description": "监听器 ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": ""
          }
        ],
        "summary": "Add user for an authenticator",
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "example": {
                  "regular_user": {
                    "value": {
                      "user_id": "user1"
                    },
                    "summary": "Regular user"
                  },
                  "super_user": {
                    "value": {
                      "is_superuser": true,
                      "user_id": "user2"
                    },
                    "summary": "Superuser"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authn_api.response_user"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "RESOURCE_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Not Found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "regular_user": {
                  "value": {
                    "password": "******",
                    "user_id": "user1"
                  },
                  "summary": "Regular user"
                },
                "super_user": {
                  "value": {
                    "password": "******",
                    "is_superuser": true,
                    "user_id": "user2"
                  },
                  "summary": "Superuser"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authn_api.request_user_create"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/license": {
      "get": {
        "description": "获取 License 信息",
        "tags": [
          "License"
        ],
        "parameters": [],
        "summary": "Get license info",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "sample_license_info": {
                    "value": {
                      "type": "trial",
                      "max_connections": 10,
                      "email": "contact@foo.com",
                      "start_at": "2022-01-11",
                      "expiry": false,
                      "customer": "Foo",
                      "customer_type": 10,
                      "deployment": "bar-deployment",
                      "expiry_at": "2295-10-27"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "更新一个 License 密钥",
        "tags": [
          "License"
        ],
        "parameters": [],
        "summary": "Update license key",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "sample_license_info": {
                    "value": {
                      "type": "trial",
                      "max_connections": 10,
                      "email": "contact@foo.com",
                      "start_at": "2022-01-11",
                      "expiry": false,
                      "customer": "Foo",
                      "customer_type": 10,
                      "deployment": "bar-deployment",
                      "expiry_at": "2295-10-27"
                    }
                  }
                },
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad license key"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "license_key": {
                  "value": {
                    "key": "xxx"
                  },
                  "summary": "License key string"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/license_http_api.key_license"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/schemas/{name}": {
      "get": {
        "description": "Get the schema JSON of the specified name. NOTE: only intended for EMQX Dashboard.",
        "tags": [
          "Dashboard"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "hotconf",
                "bridges",
                "actions",
                "connectors"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The JSON schema of the specified name.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/authorization/settings": {
      "get": {
        "description": "获取授权配置",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "deny_action",
                    "no_match"
                  ],
                  "properties": {
                    "no_match": {
                      "default": "allow",
                      "type": "string",
                      "enum": [
                        "allow",
                        "deny"
                      ],
                      "description": "如果用户或客户端不匹配 ACL 规则，或者从可配置授权源(比如内置数据库、HTTP API 或 PostgreSQL 等。)内未找<br/>到此类用户或客户端时，模式的认访问控制操作。<br/>在“授权”中查找更多详细信息。"
                    },
                    "deny_action": {
                      "default": "ignore",
                      "type": "string",
                      "enum": [
                        "ignore",
                        "disconnect"
                      ],
                      "description": "授权检查拒绝操作时的操作。"
                    },
                    "cache": {
                      "$ref": "#/components/schemas/emqx.authz_cache"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新授权配置",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "deny_action",
                    "no_match"
                  ],
                  "properties": {
                    "no_match": {
                      "default": "allow",
                      "type": "string",
                      "enum": [
                        "allow",
                        "deny"
                      ],
                      "description": "如果用户或客户端不匹配 ACL 规则，或者从可配置授权源(比如内置数据库、HTTP API 或 PostgreSQL 等。)内未找<br/>到此类用户或客户端时，模式的认访问控制操作。<br/>在“授权”中查找更多详细信息。"
                    },
                    "deny_action": {
                      "default": "ignore",
                      "type": "string",
                      "enum": [
                        "ignore",
                        "disconnect"
                      ],
                      "description": "授权检查拒绝操作时的操作。"
                    },
                    "cache": {
                      "$ref": "#/components/schemas/emqx.authz_cache"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "deny_action",
                  "no_match"
                ],
                "properties": {
                  "no_match": {
                    "default": "allow",
                    "type": "string",
                    "enum": [
                      "allow",
                      "deny"
                    ],
                    "description": "如果用户或客户端不匹配 ACL 规则，或者从可配置授权源(比如内置数据库、HTTP API 或 PostgreSQL 等。)内未找<br/>到此类用户或客户端时，模式的认访问控制操作。<br/>在“授权”中查找更多详细信息。"
                  },
                  "deny_action": {
                    "default": "ignore",
                    "type": "string",
                    "enum": [
                      "ignore",
                      "disconnect"
                    ],
                    "description": "授权检查拒绝操作时的操作。"
                  },
                  "cache": {
                    "$ref": "#/components/schemas/emqx.authz_cache"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/gateways/lwm2m/clients/{clientid}/write": {
      "post": {
        "description": "发送写指令到某资源",
        "tags": [
          "LwM2M Gateways"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientid",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "urn:oma:lwm2m:oma:2"
          },
          {
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "/3/0/7"
          },
          {
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Integer",
                "Float",
                "Time",
                "String",
                "Boolean",
                "Opaque",
                "Objlnk"
              ]
            },
            "example": "Integer"
          },
          {
            "in": "query",
            "name": "value",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 123
          }
        ],
        "summary": "Write a Value to Resource Path",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "CLIENT_NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Clientid not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/configs/log": {
      "get": {
        "description": "Get the sub-configurations under *log*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "summary": "Get the sub-configurations under *log*",
        "responses": {
          "200": {
            "description": "EMQX 支持两种主要的日志处理进程：file 和 console，另有一个专门设计用于始终将日志定向到文件的 audit 处理进程。<br/>系统的默认日志处理行为可以通过环境变量 `EMQX_DEFAULT_LOG_HANDLER` 配置，它接受以下设置：<br/><br/>- file：将日志输出仅定向到文件。<br/>- console：将日志输出仅定向到控制台。<br/><br/>值得注意的是，当通过 systemd 的 emqx.service 文件启动 EMQX 时，EMQX_DEFAULT_LOG_HANDLER 被设置为 file。<br/>在 systemd 启动之外的场景中，console 作为默认的日志处理进程。",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.log"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "config not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "Update the sub-configurations under *log*",
        "tags": [
          "Configs"
        ],
        "parameters": [],
        "summary": "Update the sub-configurations under *log*",
        "responses": {
          "200": {
            "description": "EMQX 支持两种主要的日志处理进程：file 和 console，另有一个专门设计用于始终将日志定向到文件的 audit 处理进程。<br/>系统的默认日志处理行为可以通过环境变量 `EMQX_DEFAULT_LOG_HANDLER` 配置，它接受以下设置：<br/><br/>- file：将日志输出仅定向到文件。<br/>- console：将日志输出仅定向到控制台。<br/><br/>值得注意的是，当通过 systemd 的 emqx.service 文件启动 EMQX 时，EMQX_DEFAULT_LOG_HANDLER 被设置为 file。<br/>在 systemd 启动之外的场景中，console 作为默认的日志处理进程。",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx.log"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED",
                        "INVALID_CONFIG"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "UPDATE_FAILED"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Error code to troubleshoot problems."
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emqx.log"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/rules/{id}": {
      "get": {
        "description": "通过 ID 查询规则",
        "tags": [
          "Rules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_rule_id"
          }
        ],
        "summary": "Get rule",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule_engine.rule_info"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Rule not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "通过 ID 更新集群里所有节点上的规则",
        "tags": [
          "Rules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_rule_id"
          }
        ],
        "summary": "Update rule",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule_engine.rule_info"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid Parameters"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rule_engine.rule_creation"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "通过 ID 删除集群里所有节点上的规则",
        "tags": [
          "Rules"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "my_rule_id"
          }
        ],
        "summary": "Delete rule",
        "responses": {
          "204": {
            "description": "Delete rule successfully"
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Rule not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/exhooks/{name}/hooks": {
      "get": {
        "description": "获取 Exhook 服务器的钩子信息",
        "tags": [
          "ExHook"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Exhook 服务器的名称",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "default"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/exhook.list_hook_info"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad Request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/bridges": {
      "get": {
        "description": "列出所有数据桥接",
        "tags": [
          "Bridges"
        ],
        "parameters": [],
        "summary": "List bridges",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "name": "demo",
                    "type": "influxdb_api_v2",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "org": "examlpe_org",
                    "token": "example_token",
                    "bucket": "example_bucket",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v2"
                  },
                  {
                    "name": "My IoTDB Bridge",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "*****",
                      "username": "root"
                    },
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "base_url": "http://iotdb.local:18080/",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "health_check_interval": "15s"
                    },
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.1.x",
                    "device_id": "my_device",
                    "is_aligned": false
                  },
                  {
                    "name": "my_azure_event_hub_producer",
                    "status": "connected",
                    "type": "azure_event_hub_producer",
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${.pub_props}",
                      "partition_strategy": "random"
                    },
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "local_topic": "mqtt/local/topic",
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  {
                    "name": "my_kafka_producer_action",
                    "status": "connected",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "local_topic": "mqtt/local/topic",
                    "kafka": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partitions_limit": "all_partitions",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${pub_props}",
                      "partition_strategy": "random"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  {
                    "name": "redis_bridge",
                    "type": "redis_sentinel",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "servers": [
                      "127.0.0.1:26379"
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "sentinel": "mymaster",
                    "redis_type": "sentinel",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  {
                    "authentication": "none",
                    "batch_size": 1,
                    "buffer": {
                      "memory_overload_protection": true,
                      "mode": "memory",
                      "per_partition_limit": "10MB",
                      "segment_bytes": "5MB"
                    },
                    "compression": "no_compression",
                    "enable": true,
                    "local_topic": "mqtt/topic/-576460752303423482",
                    "max_batch_bytes": "900KB",
                    "message": {
                      "key": "${.clientid}",
                      "value": "${.}"
                    },
                    "name": "pulsar_example_name",
                    "pulsar_topic": "pulsar_example_topic",
                    "retention_period": "infinity",
                    "send_buffer": "1MB",
                    "servers": "pulsar://127.0.0.1:6650",
                    "ssl": {
                      "enable": false,
                      "server_name_indication": "auto",
                      "verify": "verify_none"
                    },
                    "strategy": "key_dispatch",
                    "sync_timeout": "5s",
                    "type": "pulsar_producer"
                  },
                  {
                    "name": "foo",
                    "status": "connected",
                    "type": "pgsql",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  {
                    "name": "redis_bridge",
                    "type": "redis_cluster",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "servers": [
                      "127.0.0.1:6379"
                    ],
                    "resource_opts": {},
                    "redis_type": "cluster",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  {
                    "name": "foo",
                    "type": "mysql",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  {
                    "name": "foo",
                    "type": "kinesis_producer",
                    "enable": true,
                    "max_retries": 3,
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "endpoint": "https://kinesis.us-east-1.amazonaws.com",
                    "partition_key": "key",
                    "aws_access_key_id": "aws_access_key_id",
                    "stream_name": "stream_name"
                  },
                  {
                    "name": "http_example",
                    "type": "http",
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "15s",
                    "pool_size": 4,
                    "enable": true,
                    "body": "${payload}",
                    "url": "http://localhost:9901/messages/${topic}",
                    "method": "post",
                    "max_retries": 3,
                    "request_timeout": "15s",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "enable_pipelining": 100,
                    "local_topic": "emqx_http/#"
                  },
                  {
                    "timeout": 5,
                    "name": "foo",
                    "port": 5672,
                    "type": "rabbitmq",
                    "exchange": "messages",
                    "pool_size": 8,
                    "server": "localhost",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "heartbeat": "30s",
                    "durable": false,
                    "auto_reconnect": "2s",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "payload_template": "",
                    "routing_key": "my_routing_key",
                    "virtual_host": "/",
                    "exchange_type": "topic"
                  },
                  {
                    "name": "foo",
                    "table": "mqtt",
                    "type": "dynamo",
                    "pool_size": 8,
                    "enable": true,
                    "template": "",
                    "url": "http://127.0.0.1:8000",
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "aws_access_key_id": "root"
                  },
                  {
                    "name": "foo",
                    "type": "tdengine",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  {
                    "name": "mongodb_single_demo",
                    "type": "mongodb_single",
                    "pool_size": 8,
                    "server": "localhost:27017",
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "single"
                  },
                  {
                    "name": "demo",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                  },
                  {
                    "name": "foo",
                    "type": "opents",
                    "pool_size": 8,
                    "server": "http://127.0.0.1:4242",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "enabledb": true
                  },
                  {
                    "name": "mongodb_sharded_demo",
                    "type": "mongodb_sharded",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "sharded"
                  },
                  {
                    "name": "mongodb_rs_demo",
                    "type": "mongodb_rs",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "r_mode": "safe",
                    "w_mode": "safe",
                    "replica_set_name": "rs",
                    "srv_record": false,
                    "mongo_type": "rs"
                  },
                  {
                    "name": "foo",
                    "type": "oracle",
                    "pool_size": 8,
                    "server": "127.0.0.1:1521",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "service_name": "ORCL",
                    "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "sid": "ORCL"
                  },
                  {
                    "name": "demo",
                    "stream": "stream",
                    "type": "hstreamdb",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "direction": "egress",
                    "url": "http://127.0.0.1:6570",
                    "resource_opts": {
                      "batch_size": 100,
                      "query_mode": "sync",
                      "batch_time": "20ms"
                    },
                    "record_template": "{ \"temperature\": ${payload.temperature}, \"humidity\": ${payload.humidity} }"
                  },
                  {
                    "name": "demo",
                    "type": "influxdb_api_v1",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "database": "example_database",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v1"
                  },
                  {
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    },
                    "pubsub_topic": "mytopic"
                  },
                  {
                    "name": "redis_bridge",
                    "type": "redis_single",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "server": "127.0.0.1:6379",
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "redis_type": "single",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  {
                    "name": "mqtt_example",
                    "type": "mqtt",
                    "keepalive": "300s",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:1883",
                    "enable": true,
                    "password": "******",
                    "username": "foo",
                    "proto_ver": "v4",
                    "clean_start": true,
                    "retry_interval": "15s",
                    "max_inflight": 100,
                    "resource_opts": {
                      "query_mode": "sync",
                      "max_buffer_bytes": 104857600,
                      "health_check_interval": "15s"
                    },
                    "ingress": {
                      "local": {
                        "retain": "${retain}",
                        "payload": "${payload}",
                        "topic": "from_aws/${topic}",
                        "qos": "${qos}"
                      },
                      "remote": {
                        "topic": "aws/#",
                        "qos": 1
                      }
                    },
                    "egress": {
                      "local": {
                        "topic": "emqx/#"
                      },
                      "remote": {
                        "retain": false,
                        "payload": "${payload}",
                        "topic": "from_emqx/${topic}",
                        "qos": "${qos}"
                      }
                    }
                  },
                  {
                    "name": "foo",
                    "type": "cassandra",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
                    "servers": "127.0.0.1:9042",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "keyspace": "mqtt"
                  },
                  {
                    "connect_timeout": "15s",
                    "consumer": {
                      "topic_mapping": [
                        {
                          "qos": 1,
                          "mqtt_topic": "mqtt/topic/1",
                          "payload_template": "${.}",
                          "pubsub_topic": "pubsub-topic-1"
                        },
                        {
                          "qos": 2,
                          "mqtt_topic": "mqtt/topic/2",
                          "payload_template": "v = ${.value}, a = ${.attributes}, o = ${.ordering_key}",
                          "pubsub_topic": "pubsub-topic-2"
                        }
                      ],
                      "pull_max_messages": 100
                    },
                    "resource_opts": {
                      "request_ttl": "20s"
                    },
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  {
                    "name": "foo",
                    "type": "clickhouse",
                    "pool_size": 8,
                    "server": "127.0.0.1:8123",
                    "enable": true,
                    "password": "******",
                    "username": "default",
                    "database": "mqtt",
                    "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "batch_value_separator": ", "
                  },
                  {
                    "driver": "ms-sql",
                    "name": "bar",
                    "type": "sqlserver",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "enable": true,
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  {
                    "name": "foo",
                    "status": "connected",
                    "type": "matrix",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  {
                    "name": "my_kafka_producer_action",
                    "status": "connected",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "kafka": {
                      "max_batch_bytes": "896KB",
                      "offset_reset_policy": "latest",
                      "offset_commit_interval_seconds": 5
                    },
                    "min_metadata_refresh_interval": "3s",
                    "topic_mapping": [
                      {
                        "qos": 1,
                        "mqtt_topic": "mqtt/topic/${.offset}",
                        "payload_template": "${.}",
                        "kafka_topic": "kafka-topic-1"
                      },
                      {
                        "qos": 2,
                        "mqtt_topic": "mqtt/topic/2",
                        "payload_template": "v = ${.value}",
                        "kafka_topic": "kafka-topic-2"
                      }
                    ],
                    "bootstrap_hosts": "localhost:9092",
                    "value_encoding_mode": "none",
                    "key_encoding_mode": "none",
                    "metadata_request_timeout": "4s"
                  },
                  {
                    "name": "foo",
                    "type": "rocketmq",
                    "server": "127.0.0.1:9876",
                    "enable": true,
                    "template": "",
                    "topic": "TopicTest",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  {
                    "name": "foo",
                    "status": "connected",
                    "type": "timescale",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "node_status": [
                      {
                        "node": "emqx@localhost",
                        "status": "connected"
                      }
                    ],
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/bridge_kafka.get_producer"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_timescale.get"
                      },
                      {
                        "$ref": "#/components/schemas/rocketmq.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_kafka.get_consumer"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_matrix.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_sqlserver.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_clickhouse.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_gcp_pubsub.get_consumer"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_cassa.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_redis.get_single"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_gcp_pubsub.get_producer"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_influxdb.get_api_v1"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_hstreamdb.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_oracle.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mongodb.get_rs"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mongodb.get_sharded"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_opents.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_greptimedb.get_grpc_v1"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mongodb.get_single"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_tdengine.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_dynamo.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_rabbitmq.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mqtt.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_kinesis.get_producer"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_mysql.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_redis.get_cluster"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_pgsql.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_pulsar.get_producer"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_redis.get_sentinel"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_azure_event_hub.get_producer"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_http.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_iotdb.get"
                      },
                      {
                        "$ref": "#/components/schemas/bridge_influxdb.get_api_v2"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "通过类型和名字创建数据桥接",
        "tags": [
          "Bridges"
        ],
        "parameters": [],
        "summary": "Create bridge",
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "influxdb_api_v2": {
                    "value": {
                      "name": "demo",
                      "type": "influxdb_api_v2",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "precision": "ms",
                      "org": "examlpe_org",
                      "token": "example_token",
                      "bucket": "example_bucket",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}",
                      "influxdb_type": "influxdb_api_v2"
                    },
                    "summary": "InfluxDB HTTP API V2 Bridge"
                  },
                  "iotdb": {
                    "value": {
                      "name": "My IoTDB Bridge",
                      "type": "iotdb",
                      "ssl": {
                        "enable": false
                      },
                      "authentication": {
                        "password": "*****",
                        "username": "root"
                      },
                      "connect_timeout": "15s",
                      "pool_size": 8,
                      "enable": true,
                      "base_url": "http://iotdb.local:18080/",
                      "pool_type": "random",
                      "resource_opts": {
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "health_check_interval": "15s"
                      },
                      "enable_pipelining": 100,
                      "iotdb_version": "v1.1.x",
                      "device_id": "my_device",
                      "is_aligned": false
                    },
                    "summary": "Apache IoTDB Bridge"
                  },
                  "azure_event_hub_producer": {
                    "value": {
                      "name": "my_azure_event_hub_producer",
                      "status": "connected",
                      "type": "azure_event_hub_producer",
                      "authentication": {
                        "password": "******"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "parameters": {
                        "message": {
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "memory_overload_protection": true,
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB"
                        },
                        "topic": "topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_batch_bytes": "896KB",
                        "partition_count_refresh_interval": "60s",
                        "kafka_header_value_encode_mode": "none",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_headers": "${.pub_props}",
                        "partition_strategy": "random"
                      },
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic",
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Azure Event Hub Producer Bridge"
                  },
                  "kafka_producer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "local_topic": "mqtt/local/topic",
                      "kafka": {
                        "message": {
                          "timestamp": "${.timestamp}",
                          "value": "${.}",
                          "key": "${.clientid}"
                        },
                        "buffer": {
                          "mode": "hybrid",
                          "memory_overload_protection": true,
                          "segment_bytes": "100MB",
                          "per_partition_limit": "2GB"
                        },
                        "compression": "no_compression",
                        "topic": "kafka-topic",
                        "max_inflight": 10,
                        "required_acks": "all_isr",
                        "max_batch_bytes": "896KB",
                        "partitions_limit": "all_partitions",
                        "partition_count_refresh_interval": "60s",
                        "kafka_header_value_encode_mode": "none",
                        "kafka_ext_headers": [
                          {
                            "kafka_ext_header_value": "${clientid}",
                            "kafka_ext_header_key": "clientid"
                          },
                          {
                            "kafka_ext_header_value": "${topic}",
                            "kafka_ext_header_key": "topic"
                          }
                        ],
                        "kafka_headers": "${pub_props}",
                        "partition_strategy": "random"
                      },
                      "min_metadata_refresh_interval": "3s",
                      "bootstrap_hosts": "localhost:9092",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Kafka Producer Bridge"
                  },
                  "redis_sentinel": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_sentinel",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "database": 1,
                      "servers": [
                        "127.0.0.1:26379"
                      ],
                      "resource_opts": {
                        "batch_size": 1,
                        "batch_time": "20ms"
                      },
                      "sentinel": "mymaster",
                      "redis_type": "sentinel",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Sentinel Bridge"
                  },
                  "pulsar_producer": {
                    "value": {
                      "authentication": "none",
                      "batch_size": 1,
                      "buffer": {
                        "memory_overload_protection": true,
                        "mode": "memory",
                        "per_partition_limit": "10MB",
                        "segment_bytes": "5MB"
                      },
                      "compression": "no_compression",
                      "enable": true,
                      "local_topic": "mqtt/topic/-576460752303423482",
                      "max_batch_bytes": "900KB",
                      "message": {
                        "key": "${.clientid}",
                        "value": "${.}"
                      },
                      "name": "pulsar_example_name",
                      "pulsar_topic": "pulsar_example_topic",
                      "retention_period": "infinity",
                      "send_buffer": "1MB",
                      "servers": "pulsar://127.0.0.1:6650",
                      "ssl": {
                        "enable": false,
                        "server_name_indication": "auto",
                        "verify": "verify_none"
                      },
                      "strategy": "key_dispatch",
                      "sync_timeout": "5s",
                      "type": "pulsar_producer"
                    },
                    "summary": "Pulsar Producer Bridge"
                  },
                  "pgsql": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "pgsql",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "PostgreSQL Bridge"
                  },
                  "redis_cluster": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_cluster",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "servers": [
                        "127.0.0.1:6379"
                      ],
                      "resource_opts": {},
                      "redis_type": "cluster",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Cluster Bridge"
                  },
                  "mysql": {
                    "value": {
                      "name": "foo",
                      "type": "mysql",
                      "pool_size": 8,
                      "server": "127.0.0.1:3306",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "test",
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "MySQL Bridge"
                  },
                  "kinesis_producer": {
                    "value": {
                      "name": "foo",
                      "type": "kinesis_producer",
                      "enable": true,
                      "max_retries": 3,
                      "aws_secret_access_key": "******",
                      "resource_opts": {
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 104857600,
                        "inflight_window": 100,
                        "health_check_interval": 15000
                      },
                      "endpoint": "https://kinesis.us-east-1.amazonaws.com",
                      "partition_key": "key",
                      "aws_access_key_id": "aws_access_key_id",
                      "stream_name": "stream_name"
                    },
                    "summary": "Amazon Kinesis Producer Bridge"
                  },
                  "http_example": {
                    "value": {
                      "name": "http_example",
                      "type": "http",
                      "ssl": {
                        "enable": false
                      },
                      "connect_timeout": "15s",
                      "pool_size": 4,
                      "enable": true,
                      "body": "${payload}",
                      "url": "http://localhost:9901/messages/${topic}",
                      "method": "post",
                      "max_retries": 3,
                      "request_timeout": "15s",
                      "pool_type": "random",
                      "resource_opts": {
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 104857600,
                        "inflight_window": 100,
                        "health_check_interval": 15000
                      },
                      "enable_pipelining": 100,
                      "local_topic": "emqx_http/#"
                    },
                    "summary": "HTTP"
                  },
                  "rabbitmq": {
                    "value": {
                      "timeout": 5,
                      "name": "foo",
                      "port": 5672,
                      "type": "rabbitmq",
                      "exchange": "messages",
                      "pool_size": 8,
                      "server": "localhost",
                      "enable": true,
                      "password": "******",
                      "username": "guest",
                      "heartbeat": "30s",
                      "durable": false,
                      "auto_reconnect": "2s",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "payload_template": "",
                      "routing_key": "my_routing_key",
                      "virtual_host": "/",
                      "exchange_type": "topic"
                    },
                    "summary": "RabbitMQ Bridge"
                  },
                  "dynamo": {
                    "value": {
                      "name": "foo",
                      "table": "mqtt",
                      "type": "dynamo",
                      "pool_size": 8,
                      "enable": true,
                      "template": "",
                      "url": "http://127.0.0.1:8000",
                      "aws_secret_access_key": "******",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "aws_access_key_id": "root"
                    },
                    "summary": "DynamoDB Bridge"
                  },
                  "tdengine": {
                    "value": {
                      "name": "foo",
                      "type": "tdengine",
                      "pool_size": 8,
                      "server": "127.0.0.1:6041",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "TDengine Bridge"
                  },
                  "mongodb_single": {
                    "value": {
                      "name": "mongodb_single_demo",
                      "type": "mongodb_single",
                      "pool_size": 8,
                      "server": "localhost:27017",
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "collection": "mycol",
                      "w_mode": "safe",
                      "srv_record": false,
                      "mongo_type": "single"
                    },
                    "summary": "MongoDB (Standalone) Bridge"
                  },
                  "greptimedb": {
                    "value": {
                      "name": "demo",
                      "type": "greptimedb",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:4001",
                      "enable": true,
                      "precision": "ms",
                      "password": "******",
                      "username": "example_username",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "dbname": "example_db",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                    },
                    "summary": "Greptimedb HTTP API V2 Bridge"
                  },
                  "opents": {
                    "value": {
                      "name": "foo",
                      "type": "opents",
                      "pool_size": 8,
                      "server": "http://127.0.0.1:4242",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "enabledb": true
                    },
                    "summary": "OpenTSDB Bridge"
                  },
                  "mongodb_sharded": {
                    "value": {
                      "name": "mongodb_sharded_demo",
                      "type": "mongodb_sharded",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "servers": "localhost:27017, localhost:27018",
                      "collection": "mycol",
                      "w_mode": "safe",
                      "srv_record": false,
                      "mongo_type": "sharded"
                    },
                    "summary": "MongoDB (Sharded) Bridge"
                  },
                  "mongodb_rs": {
                    "value": {
                      "name": "mongodb_rs_demo",
                      "type": "mongodb_rs",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "myuser",
                      "database": "mqtt",
                      "servers": "localhost:27017, localhost:27018",
                      "collection": "mycol",
                      "r_mode": "safe",
                      "w_mode": "safe",
                      "replica_set_name": "rs",
                      "srv_record": false,
                      "mongo_type": "rs"
                    },
                    "summary": "MongoDB (Replica Set) Bridge"
                  },
                  "oracle": {
                    "value": {
                      "name": "foo",
                      "type": "oracle",
                      "pool_size": 8,
                      "server": "127.0.0.1:1521",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "service_name": "ORCL",
                      "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "sid": "ORCL"
                    },
                    "summary": "Oracle Database Bridge"
                  },
                  "hstreamdb": {
                    "value": {
                      "name": "demo",
                      "stream": "stream",
                      "type": "hstreamdb",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "direction": "egress",
                      "url": "http://127.0.0.1:6570",
                      "resource_opts": {
                        "batch_size": 100,
                        "query_mode": "sync",
                        "batch_time": "20ms"
                      },
                      "record_template": "{ \"temperature\": ${payload.temperature}, \"humidity\": ${payload.humidity} }"
                    },
                    "summary": "HStreamDB Bridge"
                  },
                  "influxdb_api_v1": {
                    "value": {
                      "name": "demo",
                      "type": "influxdb_api_v1",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:8086",
                      "enable": true,
                      "precision": "ms",
                      "password": "******",
                      "username": "example_username",
                      "database": "example_database",
                      "resource_opts": {
                        "batch_size": 100,
                        "batch_time": "20ms"
                      },
                      "local_topic": "local/topic/#",
                      "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}",
                      "influxdb_type": "influxdb_api_v1"
                    },
                    "summary": "InfluxDB HTTP API V1 Bridge"
                  },
                  "gcp_pubsub": {
                    "value": {
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      },
                      "pubsub_topic": "mytopic"
                    },
                    "summary": "GCP PubSub Producer Bridge"
                  },
                  "redis_single": {
                    "value": {
                      "name": "redis_bridge",
                      "type": "redis_single",
                      "ssl": {
                        "enable": false
                      },
                      "pool_size": 8,
                      "server": "127.0.0.1:6379",
                      "enable": true,
                      "password": "******",
                      "database": 1,
                      "resource_opts": {
                        "batch_size": 1,
                        "batch_time": "20ms"
                      },
                      "redis_type": "single",
                      "local_topic": "local/topic/#",
                      "command_template": [
                        "LPUSH",
                        "MSGS",
                        "${payload}"
                      ]
                    },
                    "summary": "Redis Single Node Bridge"
                  },
                  "mqtt_example": {
                    "value": {
                      "name": "mqtt_example",
                      "type": "mqtt",
                      "keepalive": "300s",
                      "ssl": {
                        "enable": false
                      },
                      "server": "127.0.0.1:1883",
                      "enable": true,
                      "password": "******",
                      "username": "foo",
                      "proto_ver": "v4",
                      "clean_start": true,
                      "retry_interval": "15s",
                      "max_inflight": 100,
                      "resource_opts": {
                        "query_mode": "sync",
                        "max_buffer_bytes": 104857600,
                        "health_check_interval": "15s"
                      },
                      "ingress": {
                        "local": {
                          "retain": "${retain}",
                          "payload": "${payload}",
                          "topic": "from_aws/${topic}",
                          "qos": "${qos}"
                        },
                        "remote": {
                          "topic": "aws/#",
                          "qos": 1
                        }
                      },
                      "egress": {
                        "local": {
                          "topic": "emqx/#"
                        },
                        "remote": {
                          "retain": false,
                          "payload": "${payload}",
                          "topic": "from_emqx/${topic}",
                          "qos": "${qos}"
                        }
                      }
                    },
                    "summary": "MQTT Bridge"
                  },
                  "cassandra": {
                    "value": {
                      "name": "foo",
                      "type": "cassandra",
                      "pool_size": 8,
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
                      "servers": "127.0.0.1:9042",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "keyspace": "mqtt"
                    },
                    "summary": "Cassandra Bridge"
                  },
                  "gcp_pubsub_consumer": {
                    "value": {
                      "connect_timeout": "15s",
                      "consumer": {
                        "topic_mapping": [
                          {
                            "qos": 1,
                            "mqtt_topic": "mqtt/topic/1",
                            "payload_template": "${.}",
                            "pubsub_topic": "pubsub-topic-1"
                          },
                          {
                            "qos": 2,
                            "mqtt_topic": "mqtt/topic/2",
                            "payload_template": "v = ${.value}, a = ${.attributes}, o = ${.ordering_key}",
                            "pubsub_topic": "pubsub-topic-2"
                          }
                        ],
                        "pull_max_messages": 100
                      },
                      "resource_opts": {
                        "request_ttl": "20s"
                      },
                      "service_account_json": {
                        "type": "service_account",
                        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                        "client_id": "123812831923812319190",
                        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "client_email": "test@myproject.iam.gserviceaccount.com",
                        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                        "private_key_id": "kid",
                        "project_id": "myproject",
                        "token_uri": "https://oauth2.googleapis.com/token"
                      }
                    },
                    "summary": "GCP PubSub Consumer Bridge"
                  },
                  "clickhouse": {
                    "value": {
                      "name": "foo",
                      "type": "clickhouse",
                      "pool_size": 8,
                      "server": "127.0.0.1:8123",
                      "enable": true,
                      "password": "******",
                      "username": "default",
                      "database": "mqtt",
                      "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#",
                      "batch_value_separator": ", "
                    },
                    "summary": "Clickhouse Bridge"
                  },
                  "sqlserver": {
                    "value": {
                      "driver": "ms-sql",
                      "name": "bar",
                      "type": "sqlserver",
                      "pool_size": 8,
                      "server": "127.0.0.1:1433",
                      "enable": true,
                      "password": "******",
                      "username": "sa",
                      "database": "test",
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Microsoft SQL Server Bridge"
                  },
                  "matrix": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "matrix",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Matrix Bridge"
                  },
                  "kafka_consumer": {
                    "value": {
                      "name": "my_kafka_producer_action",
                      "status": "connected",
                      "type": "kafka_producer",
                      "authentication": {
                        "mechanism": "plain",
                        "password": "******",
                        "username": "username"
                      },
                      "connect_timeout": "5s",
                      "enable": true,
                      "socket_opts": {
                        "nodelay": true,
                        "recbuf": "1024KB",
                        "sndbuf": "1024KB",
                        "tcp_keepalive": "none"
                      },
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "kafka": {
                        "max_batch_bytes": "896KB",
                        "offset_reset_policy": "latest",
                        "offset_commit_interval_seconds": 5
                      },
                      "min_metadata_refresh_interval": "3s",
                      "topic_mapping": [
                        {
                          "qos": 1,
                          "mqtt_topic": "mqtt/topic/${.offset}",
                          "payload_template": "${.}",
                          "kafka_topic": "kafka-topic-1"
                        },
                        {
                          "qos": 2,
                          "mqtt_topic": "mqtt/topic/2",
                          "payload_template": "v = ${.value}",
                          "kafka_topic": "kafka-topic-2"
                        }
                      ],
                      "bootstrap_hosts": "localhost:9092",
                      "value_encoding_mode": "none",
                      "key_encoding_mode": "none",
                      "metadata_request_timeout": "4s"
                    },
                    "summary": "Kafka Consumer Bridge"
                  },
                  "rocketmq": {
                    "value": {
                      "name": "foo",
                      "type": "rocketmq",
                      "server": "127.0.0.1:9876",
                      "enable": true,
                      "template": "",
                      "topic": "TopicTest",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 1,
                        "query_mode": "sync",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "RocketMQ Bridge"
                  },
                  "timescale": {
                    "value": {
                      "name": "foo",
                      "status": "connected",
                      "type": "timescale",
                      "pool_size": 8,
                      "server": "127.0.0.1:5432",
                      "enable": true,
                      "password": "******",
                      "username": "root",
                      "database": "mqtt",
                      "node_status": [
                        {
                          "node": "emqx@localhost",
                          "status": "connected"
                        }
                      ],
                      "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                      "resource_opts": {
                        "batch_size": 1,
                        "worker_pool_size": 8,
                        "query_mode": "async",
                        "max_buffer_bytes": 268435456,
                        "batch_time": 0,
                        "health_check_interval": "15s"
                      },
                      "local_topic": "local/topic/#"
                    },
                    "summary": "Timescale Bridge"
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_timescale.get"
                    },
                    {
                      "$ref": "#/components/schemas/rocketmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kafka.get_consumer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_matrix.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_sqlserver.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_clickhouse.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_gcp_pubsub.get_consumer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_cassa.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_single"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_gcp_pubsub.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_api_v1"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_hstreamdb.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_oracle.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_rs"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_sharded"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_opents.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_greptimedb.get_grpc_v1"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mongodb.get_single"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_tdengine.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_dynamo.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_rabbitmq.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mqtt.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_kinesis.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_mysql.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_cluster"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pgsql.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_pulsar.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_redis.get_sentinel"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_azure_event_hub.get_producer"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_http.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_iotdb.get"
                    },
                    {
                      "$ref": "#/components/schemas/bridge_influxdb.get_api_v2"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "ALREADY_EXISTS"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bridge already exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "influxdb_api_v2": {
                  "value": {
                    "name": "demo",
                    "type": "influxdb_api_v2",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "org": "examlpe_org",
                    "token": "example_token",
                    "bucket": "example_bucket",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v2"
                  },
                  "summary": "InfluxDB HTTP API V2 Bridge"
                },
                "iotdb": {
                  "value": {
                    "name": "My IoTDB Bridge",
                    "type": "iotdb",
                    "ssl": {
                      "enable": false
                    },
                    "authentication": {
                      "password": "*****",
                      "username": "root"
                    },
                    "connect_timeout": "15s",
                    "pool_size": 8,
                    "enable": true,
                    "base_url": "http://iotdb.local:18080/",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "health_check_interval": "15s"
                    },
                    "enable_pipelining": 100,
                    "iotdb_version": "v1.1.x",
                    "device_id": "my_device",
                    "is_aligned": false
                  },
                  "summary": "Apache IoTDB Bridge"
                },
                "azure_event_hub_producer": {
                  "value": {
                    "name": "my_azure_event_hub_producer",
                    "type": "azure_event_hub_producer",
                    "authentication": {
                      "password": "******"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "parameters": {
                      "message": {
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "topic": "topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${.pub_props}",
                      "partition_strategy": "random"
                    },
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "local_topic": "mqtt/local/topic",
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "namespace.servicebus.windows.net:9093",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Azure Event Hub Producer Bridge"
                },
                "kafka_producer": {
                  "value": {
                    "name": "my_kafka_producer_action",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "local_topic": "mqtt/local/topic",
                    "kafka": {
                      "message": {
                        "timestamp": "${.timestamp}",
                        "value": "${.}",
                        "key": "${.clientid}"
                      },
                      "buffer": {
                        "mode": "hybrid",
                        "memory_overload_protection": true,
                        "segment_bytes": "100MB",
                        "per_partition_limit": "2GB"
                      },
                      "compression": "no_compression",
                      "topic": "kafka-topic",
                      "max_inflight": 10,
                      "required_acks": "all_isr",
                      "max_batch_bytes": "896KB",
                      "partitions_limit": "all_partitions",
                      "partition_count_refresh_interval": "60s",
                      "kafka_header_value_encode_mode": "none",
                      "kafka_ext_headers": [
                        {
                          "kafka_ext_header_value": "${clientid}",
                          "kafka_ext_header_key": "clientid"
                        },
                        {
                          "kafka_ext_header_value": "${topic}",
                          "kafka_ext_header_key": "topic"
                        }
                      ],
                      "kafka_headers": "${pub_props}",
                      "partition_strategy": "random"
                    },
                    "min_metadata_refresh_interval": "3s",
                    "bootstrap_hosts": "localhost:9092",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Kafka Producer Bridge"
                },
                "redis_sentinel": {
                  "value": {
                    "name": "redis_bridge",
                    "type": "redis_sentinel",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "servers": [
                      "127.0.0.1:26379"
                    ],
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "sentinel": "mymaster",
                    "redis_type": "sentinel",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Sentinel Bridge"
                },
                "pulsar_producer": {
                  "value": {
                    "authentication": "none",
                    "batch_size": 1,
                    "buffer": {
                      "memory_overload_protection": true,
                      "mode": "memory",
                      "per_partition_limit": "10MB",
                      "segment_bytes": "5MB"
                    },
                    "compression": "no_compression",
                    "enable": true,
                    "local_topic": "mqtt/topic/-576460752303423482",
                    "max_batch_bytes": "900KB",
                    "message": {
                      "key": "${.clientid}",
                      "value": "${.}"
                    },
                    "name": "pulsar_example_name",
                    "pulsar_topic": "pulsar_example_topic",
                    "retention_period": "infinity",
                    "send_buffer": "1MB",
                    "servers": "pulsar://127.0.0.1:6650",
                    "ssl": {
                      "enable": false,
                      "server_name_indication": "auto",
                      "verify": "verify_none"
                    },
                    "strategy": "key_dispatch",
                    "sync_timeout": "5s",
                    "type": "pulsar_producer"
                  },
                  "summary": "Pulsar Producer Bridge"
                },
                "pgsql": {
                  "value": {
                    "name": "foo",
                    "type": "pgsql",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "PostgreSQL Bridge"
                },
                "redis_cluster": {
                  "value": {
                    "name": "redis_bridge",
                    "type": "redis_cluster",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "servers": [
                      "127.0.0.1:6379"
                    ],
                    "resource_opts": {},
                    "redis_type": "cluster",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Cluster Bridge"
                },
                "mysql": {
                  "value": {
                    "name": "foo",
                    "type": "mysql",
                    "pool_size": 8,
                    "server": "127.0.0.1:3306",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, FROM_UNIXTIME(${timestamp}/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "MySQL Bridge"
                },
                "kinesis_producer": {
                  "value": {
                    "name": "foo",
                    "type": "kinesis_producer",
                    "enable": true,
                    "max_retries": 3,
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "endpoint": "https://kinesis.us-east-1.amazonaws.com",
                    "partition_key": "key",
                    "aws_access_key_id": "aws_access_key_id",
                    "stream_name": "stream_name"
                  },
                  "summary": "Amazon Kinesis Producer Bridge"
                },
                "http_example": {
                  "value": {
                    "name": "http_example",
                    "type": "http",
                    "ssl": {
                      "enable": false
                    },
                    "connect_timeout": "15s",
                    "pool_size": 4,
                    "enable": true,
                    "body": "${payload}",
                    "url": "http://localhost:9901/messages/${topic}",
                    "method": "post",
                    "max_retries": 3,
                    "request_timeout": "15s",
                    "pool_type": "random",
                    "resource_opts": {
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 104857600,
                      "inflight_window": 100,
                      "health_check_interval": 15000
                    },
                    "enable_pipelining": 100,
                    "local_topic": "emqx_http/#"
                  },
                  "summary": "HTTP"
                },
                "rabbitmq": {
                  "value": {
                    "timeout": 5,
                    "name": "foo",
                    "port": 5672,
                    "type": "rabbitmq",
                    "exchange": "messages",
                    "pool_size": 8,
                    "server": "localhost",
                    "enable": true,
                    "password": "******",
                    "username": "guest",
                    "heartbeat": "30s",
                    "durable": false,
                    "auto_reconnect": "2s",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "payload_template": "",
                    "routing_key": "my_routing_key",
                    "virtual_host": "/",
                    "exchange_type": "topic"
                  },
                  "summary": "RabbitMQ Bridge"
                },
                "dynamo": {
                  "value": {
                    "name": "foo",
                    "table": "mqtt",
                    "type": "dynamo",
                    "pool_size": 8,
                    "enable": true,
                    "template": "",
                    "url": "http://127.0.0.1:8000",
                    "aws_secret_access_key": "******",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "aws_access_key_id": "root"
                  },
                  "summary": "DynamoDB Bridge"
                },
                "tdengine": {
                  "value": {
                    "name": "foo",
                    "type": "tdengine",
                    "pool_size": 8,
                    "server": "127.0.0.1:6041",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(ts, msgid, mqtt_topic, qos, payload, arrived) values (${ts}, '${id}', '${topic}', ${qos}, '${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "TDengine Bridge"
                },
                "mongodb_single": {
                  "value": {
                    "name": "mongodb_single_demo",
                    "type": "mongodb_single",
                    "pool_size": 8,
                    "server": "localhost:27017",
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "single"
                  },
                  "summary": "MongoDB (Standalone) Bridge"
                },
                "greptimedb": {
                  "value": {
                    "name": "demo",
                    "type": "greptimedb",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:4001",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "dbname": "example_db",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,uint_value=${payload.uint_key}u,bool=${payload.bool}"
                  },
                  "summary": "Greptimedb HTTP API V2 Bridge"
                },
                "opents": {
                  "value": {
                    "name": "foo",
                    "type": "opents",
                    "pool_size": 8,
                    "server": "http://127.0.0.1:4242",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "enabledb": true
                  },
                  "summary": "OpenTSDB Bridge"
                },
                "mongodb_sharded": {
                  "value": {
                    "name": "mongodb_sharded_demo",
                    "type": "mongodb_sharded",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "w_mode": "safe",
                    "srv_record": false,
                    "mongo_type": "sharded"
                  },
                  "summary": "MongoDB (Sharded) Bridge"
                },
                "mongodb_rs": {
                  "value": {
                    "name": "mongodb_rs_demo",
                    "type": "mongodb_rs",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "myuser",
                    "database": "mqtt",
                    "servers": "localhost:27017, localhost:27018",
                    "collection": "mycol",
                    "r_mode": "safe",
                    "w_mode": "safe",
                    "replica_set_name": "rs",
                    "srv_record": false,
                    "mongo_type": "rs"
                  },
                  "summary": "MongoDB (Replica Set) Bridge"
                },
                "oracle": {
                  "value": {
                    "name": "foo",
                    "type": "oracle",
                    "pool_size": 8,
                    "server": "127.0.0.1:1521",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "service_name": "ORCL",
                    "sql": "insert into t_mqtt_msgs(msgid, topic, qos, payload) values (${id}, ${topic}, ${qos}, ${payload})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "sid": "ORCL"
                  },
                  "summary": "Oracle Database Bridge"
                },
                "hstreamdb": {
                  "value": {
                    "name": "demo",
                    "stream": "stream",
                    "type": "hstreamdb",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "direction": "egress",
                    "url": "http://127.0.0.1:6570",
                    "resource_opts": {
                      "batch_size": 100,
                      "query_mode": "sync",
                      "batch_time": "20ms"
                    },
                    "record_template": "{ \"temperature\": ${payload.temperature}, \"humidity\": ${payload.humidity} }"
                  },
                  "summary": "HStreamDB Bridge"
                },
                "influxdb_api_v1": {
                  "value": {
                    "name": "demo",
                    "type": "influxdb_api_v1",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:8086",
                    "enable": true,
                    "precision": "ms",
                    "password": "******",
                    "username": "example_username",
                    "database": "example_database",
                    "resource_opts": {
                      "batch_size": 100,
                      "batch_time": "20ms"
                    },
                    "local_topic": "local/topic/#",
                    "write_syntax": "${topic},clientid=${clientid} payload=${payload},${clientid}_int_value=${payload.int_key}i,bool=${payload.bool}",
                    "influxdb_type": "influxdb_api_v1"
                  },
                  "summary": "InfluxDB HTTP API V1 Bridge"
                },
                "gcp_pubsub": {
                  "value": {
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    },
                    "pubsub_topic": "mytopic"
                  },
                  "summary": "GCP PubSub Producer Bridge"
                },
                "redis_single": {
                  "value": {
                    "name": "redis_bridge",
                    "type": "redis_single",
                    "ssl": {
                      "enable": false
                    },
                    "pool_size": 8,
                    "server": "127.0.0.1:6379",
                    "enable": true,
                    "password": "******",
                    "database": 1,
                    "resource_opts": {
                      "batch_size": 1,
                      "batch_time": "20ms"
                    },
                    "redis_type": "single",
                    "local_topic": "local/topic/#",
                    "command_template": [
                      "LPUSH",
                      "MSGS",
                      "${payload}"
                    ]
                  },
                  "summary": "Redis Single Node Bridge"
                },
                "mqtt_example": {
                  "value": {
                    "name": "mqtt_example",
                    "type": "mqtt",
                    "keepalive": "300s",
                    "ssl": {
                      "enable": false
                    },
                    "server": "127.0.0.1:1883",
                    "enable": true,
                    "password": "******",
                    "username": "foo",
                    "proto_ver": "v4",
                    "clean_start": true,
                    "retry_interval": "15s",
                    "max_inflight": 100,
                    "resource_opts": {
                      "query_mode": "sync",
                      "max_buffer_bytes": 104857600,
                      "health_check_interval": "15s"
                    },
                    "ingress": {
                      "local": {
                        "retain": "${retain}",
                        "payload": "${payload}",
                        "topic": "from_aws/${topic}",
                        "qos": "${qos}"
                      },
                      "remote": {
                        "topic": "aws/#",
                        "qos": 1
                      }
                    },
                    "egress": {
                      "local": {
                        "topic": "emqx/#"
                      },
                      "remote": {
                        "retain": false,
                        "payload": "${payload}",
                        "topic": "from_emqx/${topic}",
                        "qos": "${qos}"
                      }
                    }
                  },
                  "summary": "MQTT Bridge"
                },
                "cassandra": {
                  "value": {
                    "name": "foo",
                    "type": "cassandra",
                    "pool_size": 8,
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "cql": "insert into mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic},  ${qos}, ${payload}, ${timestamp})",
                    "servers": "127.0.0.1:9042",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "keyspace": "mqtt"
                  },
                  "summary": "Cassandra Bridge"
                },
                "gcp_pubsub_consumer": {
                  "value": {
                    "connect_timeout": "15s",
                    "consumer": {
                      "topic_mapping": [
                        {
                          "qos": 1,
                          "mqtt_topic": "mqtt/topic/1",
                          "payload_template": "${.}",
                          "pubsub_topic": "pubsub-topic-1"
                        },
                        {
                          "qos": 2,
                          "mqtt_topic": "mqtt/topic/2",
                          "payload_template": "v = ${.value}, a = ${.attributes}, o = ${.ordering_key}",
                          "pubsub_topic": "pubsub-topic-2"
                        }
                      ],
                      "pull_max_messages": 100
                    },
                    "resource_opts": {
                      "request_ttl": "20s"
                    },
                    "service_account_json": {
                      "type": "service_account",
                      "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQI...",
                      "client_id": "123812831923812319190",
                      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                      "client_email": "test@myproject.iam.gserviceaccount.com",
                      "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40myproject.iam.gserviceaccount.com",
                      "private_key_id": "kid",
                      "project_id": "myproject",
                      "token_uri": "https://oauth2.googleapis.com/token"
                    }
                  },
                  "summary": "GCP PubSub Consumer Bridge"
                },
                "clickhouse": {
                  "value": {
                    "name": "foo",
                    "type": "clickhouse",
                    "pool_size": 8,
                    "server": "127.0.0.1:8123",
                    "enable": true,
                    "password": "******",
                    "username": "default",
                    "database": "mqtt",
                    "sql": "INSERT INTO messages(data, arrived) VALUES ('${payload}', ${timestamp})",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#",
                    "batch_value_separator": ", "
                  },
                  "summary": "Clickhouse Bridge"
                },
                "sqlserver": {
                  "value": {
                    "driver": "ms-sql",
                    "name": "bar",
                    "type": "sqlserver",
                    "pool_size": 8,
                    "server": "127.0.0.1:1433",
                    "enable": true,
                    "password": "******",
                    "username": "sa",
                    "database": "test",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload) values ( ${id}, ${topic}, ${qos}, ${payload} )",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Microsoft SQL Server Bridge"
                },
                "matrix": {
                  "value": {
                    "name": "foo",
                    "type": "matrix",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Matrix Bridge"
                },
                "kafka_consumer": {
                  "value": {
                    "name": "my_kafka_producer_action",
                    "type": "kafka_producer",
                    "authentication": {
                      "mechanism": "plain",
                      "password": "******",
                      "username": "username"
                    },
                    "connect_timeout": "5s",
                    "enable": true,
                    "socket_opts": {
                      "nodelay": true,
                      "recbuf": "1024KB",
                      "sndbuf": "1024KB",
                      "tcp_keepalive": "none"
                    },
                    "kafka": {
                      "max_batch_bytes": "896KB",
                      "offset_reset_policy": "latest",
                      "offset_commit_interval_seconds": 5
                    },
                    "min_metadata_refresh_interval": "3s",
                    "topic_mapping": [
                      {
                        "qos": 1,
                        "mqtt_topic": "mqtt/topic/${.offset}",
                        "payload_template": "${.}",
                        "kafka_topic": "kafka-topic-1"
                      },
                      {
                        "qos": 2,
                        "mqtt_topic": "mqtt/topic/2",
                        "payload_template": "v = ${.value}",
                        "kafka_topic": "kafka-topic-2"
                      }
                    ],
                    "bootstrap_hosts": "localhost:9092",
                    "value_encoding_mode": "none",
                    "key_encoding_mode": "none",
                    "metadata_request_timeout": "4s"
                  },
                  "summary": "Kafka Consumer Bridge"
                },
                "rocketmq": {
                  "value": {
                    "name": "foo",
                    "type": "rocketmq",
                    "server": "127.0.0.1:9876",
                    "enable": true,
                    "template": "",
                    "topic": "TopicTest",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 1,
                      "query_mode": "sync",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "RocketMQ Bridge"
                },
                "timescale": {
                  "value": {
                    "name": "foo",
                    "type": "timescale",
                    "pool_size": 8,
                    "server": "127.0.0.1:5432",
                    "enable": true,
                    "password": "******",
                    "username": "root",
                    "database": "mqtt",
                    "sql": "insert into t_mqtt_msg(msgid, topic, qos, payload, arrived) values (${id}, ${topic}, ${qos}, ${payload}, TO_TIMESTAMP((${timestamp} :: bigint)/1000))",
                    "resource_opts": {
                      "batch_size": 1,
                      "worker_pool_size": 8,
                      "query_mode": "async",
                      "max_buffer_bytes": 268435456,
                      "batch_time": 0,
                      "health_check_interval": "15s"
                    },
                    "local_topic": "local/topic/#"
                  },
                  "summary": "Timescale Bridge"
                }
              },
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_timescale.post"
                  },
                  {
                    "$ref": "#/components/schemas/rocketmq.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kafka.post_consumer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_matrix.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_sqlserver.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_clickhouse.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_gcp_pubsub.post_consumer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_cassa.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.post_single"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_gcp_pubsub.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_api_v1"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_hstreamdb.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_oracle.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_rs"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_sharded"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_opents.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_greptimedb.post_grpc_v1"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mongodb.post_single"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_tdengine.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_dynamo.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_rabbitmq.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mqtt.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_kinesis.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_mysql.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.post_cluster"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pgsql.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_pulsar.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_redis.post_sentinel"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_azure_event_hub.post_producer"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_http.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_iotdb.post"
                  },
                  {
                    "$ref": "#/components/schemas/bridge_influxdb.post_api_v2"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/node_eviction/status": {
      "get": {
        "description": "获取节点驱逐状态",
        "tags": [
          "Node Eviction"
        ],
        "parameters": [],
        "summary": "Get node eviction status",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/node_eviction.status_disabled"
                    },
                    {
                      "$ref": "#/components/schemas/node_eviction.status_enabled"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/listeners_status": {
      "get": {
        "description": "列出所有节点上的监听器状态。按监听器类型分组",
        "tags": [
          "Listeners"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "example": [
                  {
                    "status": {
                      "running": true,
                      "max_connections": 2048000,
                      "current_connections": 21
                    },
                    "type": "tcp",
                    "enable": false,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 11
                        }
                      },
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": 1024000,
                          "current_connections": 10
                        }
                      }
                    ],
                    "ids": [
                      "tcp:demo"
                    ]
                  },
                  {
                    "status": {
                      "running": true,
                      "max_connections": "infinity",
                      "current_connections": 71
                    },
                    "type": "ssl",
                    "enable": false,
                    "node_status": [
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": "infinity",
                          "current_connections": 31
                        }
                      },
                      {
                        "node": "emqx@127.0.0.1",
                        "status": {
                          "running": true,
                          "max_connections": "infinity",
                          "current_connections": 40
                        }
                      }
                    ],
                    "ids": [
                      "ssl:default"
                    ]
                  }
                ],
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/listeners.listener_type_status"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/monitor": {
      "get": {
        "description": "包括历史的连接数/在线连接数、主题数/订阅数、消息流入数、流出数、丢弃数指标。",
        "tags": [
          "Metrics"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "latest",
            "description": "The latest N seconds data. Like 300 for 5 min.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "example": 300
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/emqx_dashboard_monitor_api.sampler"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_RPC"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad RPC"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/relup/package": {
      "get": {
        "description": "Get information of the installed hot upgrade package.<br/>",
        "tags": [
          "Relup"
        ],
        "parameters": [],
        "summary": "Get the installed hot upgrade package",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relup.package"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "No relup package is installed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "Delete the installed hot upgrade package.<br/>",
        "tags": [
          "Relup"
        ],
        "parameters": [],
        "summary": "Delete the installed hot upgrade package",
        "responses": {
          "204": {
            "description": "Packages are deleted successfully"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/logout": {
      "post": {
        "description": "Dashboard 用户退出登录",
        "tags": [
          "Dashboard"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "backend",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "local",
                "ldap",
                "saml",
                "oidc"
              ]
            },
            "example": "local"
          }
        ],
        "responses": {
          "204": {
            "description": "Dashboard logout successfully"
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_USERNAME_OR_PWD"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "登录失败。用户名或密码错误"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Dashboard 用户名",
                    "maxLength": 100,
                    "example": "admin"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/authorization/sources/built_in_database/rules/all": {
      "get": {
        "description": "列出适用于所有客户端规则 （即 'all' 规则）。",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "examples": {
                  "password_based:built_in_database": {
                    "value": {
                      "rules": [
                        {
                          "action": "publish",
                          "permission": "allow",
                          "topic": "test/topic/1"
                        },
                        {
                          "action": "subscribe",
                          "permission": "allow",
                          "topic": "test/topic/2"
                        },
                        {
                          "action": "all",
                          "permission": "deny",
                          "topic": "eq test/#"
                        },
                        {
                          "action": "publish",
                          "retain": "true",
                          "permission": "allow",
                          "topic": "test/topic/3",
                          "qos": [
                            "1"
                          ]
                        },
                        {
                          "action": "publish",
                          "retain": "all",
                          "permission": "allow",
                          "topic": "test/topic/4",
                          "qos": [
                            "0",
                            "1",
                            "2"
                          ]
                        }
                      ]
                    },
                    "summary": "All"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "description": "删除 'all' 规则",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "description": "创建或更新适用于所有客户端的规则（即 'all' 规则）。",
        "tags": [
          "Authorization"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "Updated"
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Bad rule schema"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "password_based:built_in_database": {
                  "value": {
                    "rules": [
                      {
                        "action": "publish",
                        "permission": "allow",
                        "topic": "test/topic/1"
                      },
                      {
                        "action": "subscribe",
                        "permission": "allow",
                        "topic": "test/topic/2"
                      },
                      {
                        "action": "all",
                        "permission": "deny",
                        "topic": "eq test/#"
                      },
                      {
                        "action": "publish",
                        "retain": "true",
                        "permission": "allow",
                        "topic": "test/topic/3",
                        "qos": [
                          "1"
                        ]
                      },
                      {
                        "action": "publish",
                        "retain": "all",
                        "permission": "allow",
                        "topic": "test/topic/4",
                        "qos": [
                          "0",
                          "1",
                          "2"
                        ]
                      }
                    ]
                  },
                  "summary": "All"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/emqx_authz_api_mnesia.rules"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ds/storages/{ds}": {
      "get": {
        "description": "Get durable storage",
        "tags": [
          "Durable storage"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ds",
            "description": "Durable storage ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "messages"
              ]
            },
            "example": "messages"
          }
        ],
        "responses": {
          "200": {
            "description": "Get information about a durable storage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/emqx_mgmt_api_ds.db"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Durable storage not found"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Durable storage is disabled"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/relup/status/{node}": {
      "get": {
        "description": "Get the hot upgrade status of a specified node",
        "tags": [
          "Relup"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/relup.node_name"
          }
        ],
        "summary": "Get the hot upgrade status of a specified node",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/relup.running_status"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/load_rebalance/availability_check": {
      "get": {
        "description": "检查节点是否正在被执行重平衡或疏散",
        "tags": [
          "Load Rebalance"
        ],
        "parameters": [],
        "summary": "Node rebalance availability check",
        "responses": {
          "200": {
            "description": "响应为空",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {}
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "NODE_EVACUATING"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Node Evacuating"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/rule_engine": {
      "get": {
        "description": "获取规则引擎配置。",
        "tags": [
          "Rules"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule_engine.rule_engine"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "description": "更新规则引擎配置。",
        "tags": [
          "Rules"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rule_engine.rule_engine"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string",
                      "enum": [
                        "BAD_REQUEST"
                      ]
                    },
                    "message": {
                      "type": "string",
                      "description": "Invalid request"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rule_engine.rule_engine"
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/load_rebalance/global_status": {
      "get": {
        "description": "获取集群中所有重平衡/疏散任务的状态",
        "tags": [
          "Load Rebalance"
        ],
        "parameters": [],
        "summary": "Get global rebalance status",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/load_rebalance.global_status"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "/api/v5"
    }
  ],
  "openapi": "3.0.0"
}
