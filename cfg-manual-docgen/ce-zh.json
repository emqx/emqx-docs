[
  {
    "tags" : [
      
    ],
    "paths" : [
      
    ],
    "full_name" : "Root Config Keys",
    "fields" : [
      {
        "type" : {
          "name" : "broker:listeners",
          "kind" : "struct"
        },
        "name" : "listeners",
        "importance" : "high",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:mqtt",
          "kind" : "struct"
        },
        "name" : "mqtt",
        "importance" : "medium",
        "desc" : "全局的 MQTT 配置项。\nmqtt 下所有的配置作为全局的默认值存在，它可以被 `zone` 中的配置覆盖。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "values" : {
            "name" : "broker:zone",
            "kind" : "struct"
          },
          "name" : "name",
          "kind" : "map"
        },
        "name" : "zones",
        "importance" : "low",
        "desc" : "`zone` 是按`name` 分组的一组配置。\n对于灵活的配置映射，可以将 `name` 设置为侦听器的 `zone` 配置。\n注：名为 `default` 的内置区域是自动创建的，无法删除。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "members" : [
              {
                "name" : "authn:builtin_db",
                "kind" : "struct"
              },
              {
                "name" : "authn:mysql",
                "kind" : "struct"
              },
              {
                "name" : "authn:postgresql",
                "kind" : "struct"
              },
              {
                "name" : "authn:mongo_single",
                "kind" : "struct"
              },
              {
                "name" : "authn:mongo_rs",
                "kind" : "struct"
              },
              {
                "name" : "authn:mongo_sharded",
                "kind" : "struct"
              },
              {
                "name" : "authn:redis_single",
                "kind" : "struct"
              },
              {
                "name" : "authn:redis_cluster",
                "kind" : "struct"
              },
              {
                "name" : "authn:redis_sentinel",
                "kind" : "struct"
              },
              {
                "name" : "authn:http_get",
                "kind" : "struct"
              },
              {
                "name" : "authn:http_post",
                "kind" : "struct"
              },
              {
                "name" : "authn:jwt_hmac",
                "kind" : "struct"
              },
              {
                "name" : "authn:jwt_public_key",
                "kind" : "struct"
              },
              {
                "name" : "authn:jwt_jwks",
                "kind" : "struct"
              },
              {
                "name" : "authn:scram",
                "kind" : "struct"
              }
            ],
            "kind" : "union"
          }
        },
        "name" : "authentication",
        "importance" : "low",
        "desc" : "全局 MQTT 监听器的默认认证配置。 为每个监听器配置认证参考监听器器配置中的`authentication` 配置。\n\n该配置可以被配置为：\n<ul>\n  <li>`[]`: 默认值，允许所有的登录请求\n  <li>配置为单认证器，例如 `{enable:true,backend:\"built_in_database\",mechanism=\"password_based\"}`</li>\n  <li>配置为认证器数组</li>\n</ul>\n\n当配置为认证链后，登录凭证会按照配置的顺序进行检查，直到做出`allow` 或 `deny`的结果。\n\n如果在所有的认证器都执行完后，还是没有结果，登录将被拒绝。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "authorization",
          "kind" : "struct"
        },
        "name" : "authorization",
        "importance" : "high",
        "desc" : "授权（ACL）。EMQX 支持完整的客户端访问控制（ACL）。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "node",
          "kind" : "struct"
        },
        "name" : "node",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "cluster",
          "kind" : "struct"
        },
        "name" : "cluster",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "log",
          "kind" : "struct"
        },
        "name" : "log",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "rpc",
          "kind" : "struct"
        },
        "name" : "rpc",
        "importance" : "low",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker",
          "kind" : "struct"
        },
        "name" : "broker",
        "desc" : "Broker 相关配置项。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:sys_topics",
          "kind" : "struct"
        },
        "name" : "sys_topics",
        "desc" : "系统主题配置。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:force_shutdown",
          "kind" : "struct"
        },
        "name" : "force_shutdown",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:force_gc",
          "kind" : "struct"
        },
        "name" : "force_gc",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:sysmon",
          "kind" : "struct"
        },
        "name" : "sysmon",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:alarm",
          "kind" : "struct"
        },
        "name" : "alarm",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "bridge:bridges",
          "kind" : "struct"
        },
        "name" : "bridges",
        "importance" : "low",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "retainer",
          "kind" : "struct"
        },
        "name" : "retainer",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "modules:delayed",
          "kind" : "struct"
        },
        "name" : "delayed",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "modules:telemetry",
          "kind" : "struct"
        },
        "name" : "telemetry",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "plugin:plugins",
          "kind" : "struct"
        },
        "name" : "plugins",
        "importance" : "low",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "dashboard",
          "kind" : "struct"
        },
        "name" : "dashboard",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "prometheus",
          "kind" : "struct"
        },
        "name" : "prometheus",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "rule_engine",
          "kind" : "struct"
        },
        "name" : "rule_engine",
        "importance" : "low",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "exhook",
          "kind" : "struct"
        },
        "name" : "exhook",
        "importance" : "low",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "authn-psk:psk_authentication",
          "kind" : "struct"
        },
        "name" : "psk_authentication",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "api_key",
          "kind" : "struct"
        },
        "name" : "api_key",
        "aliases" : [
          
        ]
      }
    ]
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "api_key"
    ],
    "full_name" : "api_key",
    "fields" : [
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "",
        "name" : "bootstrap_file",
        "desc" : "用于在启动 emqx 时，添加 API 密钥，其格式为：\n      ```\n      7e729ae70d23144b:2QILI9AcQ9BYlVqLDHQNWN2saIjBV4egr1CZneTNKr9CpK\n      ec3907f865805db0:Ee3taYltUKtoBVD9C3XjQl9C6NXheip8Z9B69BpUv5JxVHL\n      ```",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "API 密钥， 可用于请求除管理 API 密钥及 Dashboard 用户管理 API 的其它接口"
  },
  {
    "tags" : [
      "Authorization"
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:builtin_db",
    "fields" : [
      {
        "type" : {
          "name" : "built_in_database",
          "kind" : "singleton"
        },
        "name" : "type",
        "desc" : "数据后端类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此访问控制数据源",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用内部数据库授权（mnesia）。"
  },
  {
    "tags" : [
      "Authorization"
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:file",
    "fields" : [
      {
        "type" : {
          "name" : "file",
          "kind" : "singleton"
        },
        "name" : "type",
        "desc" : "数据后端类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此访问控制数据源",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "path",
        "desc" : "包含 ACL 规则的文件路径。\n如果在启动 EMQX 节点前预先配置该路径，\n那么可以将该文件置于任何 EMQX 可以访问到的位置。\n\n如果从 EMQX Dashboard 或 HTTP API 创建或修改了规则集，\n那么EMQX将会生成一个新的文件并将它存放在 `data_dir` 下的 `authz` 子目录中，\n并从此弃用旧的文件。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用静态文件授权"
  },
  {
    "tags" : [
      "Authorization"
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:http_get",
    "fields" : [
      {
        "type" : {
          "name" : "http",
          "kind" : "singleton"
        },
        "name" : "type",
        "desc" : "数据后端类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此访问控制数据源",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "url",
        "desc" : "授权 HTTP 服务器地址。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "30s",
        "name" : "request_timeout",
        "desc" : "HTTP 请求超时时长。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "name" : "body",
        "desc" : "HTTP request body。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "connect_timeout",
        "desc" : "连接HTTP服务器的超时时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 100,
        "name" : "enable_pipelining",
        "desc" : "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "non_neg_integer()",
          "kind" : "primitive"
        },
        "name" : "max_retries",
        "desc" : "Deprecated since 5.0.4.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "connector-http:request",
          "kind" : "struct"
        },
        "name" : "request",
        "desc" : "设置 HTTP 请求的参数。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "name" : "retry_interval",
        "desc" : "Deprecated since 5.0.4.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "get",
          "kind" : "singleton"
        },
        "name" : "method",
        "desc" : "HTTP 请求方法",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "[{binary(), binary()}]",
          "kind" : "primitive"
        },
        "raw_default" : {
          "keep-alive" : "timeout=30, max=1000",
          "connection" : "keep-alive",
          "cache-control" : "no-cache",
          "accept" : "application/json"
        },
        "name" : "headers",
        "desc" : "HTTP Headers 列表 (无 `content-type`) 。",
        "default" : {
          "oneliner" : false,
          "hocon" : "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用外部 HTTP 服务器授权(GET 请求)。"
  },
  {
    "tags" : [
      "Authorization"
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:http_post",
    "fields" : [
      {
        "type" : {
          "name" : "http",
          "kind" : "singleton"
        },
        "name" : "type",
        "desc" : "数据后端类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此访问控制数据源",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "url",
        "desc" : "授权 HTTP 服务器地址。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "30s",
        "name" : "request_timeout",
        "desc" : "HTTP 请求超时时长。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "name" : "body",
        "desc" : "HTTP request body。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "connect_timeout",
        "desc" : "连接HTTP服务器的超时时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 100,
        "name" : "enable_pipelining",
        "desc" : "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "non_neg_integer()",
          "kind" : "primitive"
        },
        "name" : "max_retries",
        "desc" : "Deprecated since 5.0.4.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "connector-http:request",
          "kind" : "struct"
        },
        "name" : "request",
        "desc" : "设置 HTTP 请求的参数。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "name" : "retry_interval",
        "desc" : "Deprecated since 5.0.4.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "post",
          "kind" : "singleton"
        },
        "name" : "method",
        "desc" : "HTTP 请求方法",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "[{binary(), binary()}]",
          "kind" : "primitive"
        },
        "raw_default" : {
          "keep-alive" : "timeout=30, max=1000",
          "content-type" : "application/json",
          "connection" : "keep-alive",
          "cache-control" : "no-cache",
          "accept" : "application/json"
        },
        "name" : "headers",
        "desc" : "HTTP Headers 列表",
        "default" : {
          "oneliner" : false,
          "hocon" : "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"content-type\" = \"application/json\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用外部 HTTP 服务器授权(POST 请求)。"
  },
  {
    "tags" : [
      "Authorization"
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:mongo_rs",
    "fields" : [
      {
        "type" : {
          "name" : "mongodb",
          "kind" : "singleton"
        },
        "name" : "type",
        "desc" : "数据后端类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此访问控制数据源",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "collection",
        "desc" : "`MongoDB` 授权数据集。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "raw_default" : {
          
        },
        "name" : "filter",
        "desc" : "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：<br/>\n- `${username}`：将在运行时被替换为客户端连接时使用的用户名<br/>\n- `${clientid}`：将在运行时被替换为客户端连接时使用的客户端标识符",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "rs",
          "kind" : "singleton"
        },
        "raw_default" : "rs",
        "name" : "mongo_type",
        "desc" : "Replica set模式。当 MongoDB 服务运行在 replica-set 模式下，该配置必须设置为 'rs'。",
        "default" : {
          "oneliner" : true,
          "hocon" : "rs"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "servers",
        "desc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "unsafe",
            "safe"
          ],
          "kind" : "enum"
        },
        "raw_default" : "unsafe",
        "name" : "w_mode",
        "desc" : "写模式。",
        "default" : {
          "oneliner" : true,
          "hocon" : "unsafe"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "master",
            "slave_ok"
          ],
          "kind" : "enum"
        },
        "raw_default" : "master",
        "name" : "r_mode",
        "desc" : "读模式。",
        "default" : {
          "oneliner" : true,
          "hocon" : "master"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "replica_set_name",
        "desc" : "副本集的名称。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "srv_record",
        "desc" : "使用 DNS SRV 记录。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "username",
        "desc" : "内部数据库的用户名。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "auth_source",
        "desc" : "与用户证书关联的数据库名称。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "database",
        "desc" : "数据库名字。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "topology",
          "kind" : "struct"
        },
        "name" : "topology",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 MongoDB 授权（副本集模式）"
  },
  {
    "tags" : [
      "Authorization"
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:mongo_sharded",
    "fields" : [
      {
        "type" : {
          "name" : "mongodb",
          "kind" : "singleton"
        },
        "name" : "type",
        "desc" : "数据后端类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此访问控制数据源",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "collection",
        "desc" : "`MongoDB` 授权数据集。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "raw_default" : {
          
        },
        "name" : "filter",
        "desc" : "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：<br/>\n- `${username}`：将在运行时被替换为客户端连接时使用的用户名<br/>\n- `${clientid}`：将在运行时被替换为客户端连接时使用的客户端标识符",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "sharded",
          "kind" : "singleton"
        },
        "raw_default" : "sharded",
        "name" : "mongo_type",
        "desc" : "Sharded cluster模式。当 MongoDB 服务运行在 sharded 模式下，该配置必须设置为 'sharded'。",
        "default" : {
          "oneliner" : true,
          "hocon" : "sharded"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "servers",
        "desc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "unsafe",
            "safe"
          ],
          "kind" : "enum"
        },
        "raw_default" : "unsafe",
        "name" : "w_mode",
        "desc" : "写模式。",
        "default" : {
          "oneliner" : true,
          "hocon" : "unsafe"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "srv_record",
        "desc" : "使用 DNS SRV 记录。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "username",
        "desc" : "内部数据库的用户名。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "auth_source",
        "desc" : "与用户证书关联的数据库名称。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "database",
        "desc" : "数据库名字。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "topology",
          "kind" : "struct"
        },
        "name" : "topology",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 MongoDB 授权（分片集群模式）。"
  },
  {
    "tags" : [
      "Authorization"
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:mongo_single",
    "fields" : [
      {
        "type" : {
          "name" : "mongodb",
          "kind" : "singleton"
        },
        "name" : "type",
        "desc" : "数据后端类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此访问控制数据源",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "collection",
        "desc" : "`MongoDB` 授权数据集。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "raw_default" : {
          
        },
        "name" : "filter",
        "desc" : "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：<br/>\n- `${username}`：将在运行时被替换为客户端连接时使用的用户名<br/>\n- `${clientid}`：将在运行时被替换为客户端连接时使用的客户端标识符",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "single",
          "kind" : "singleton"
        },
        "raw_default" : "single",
        "name" : "mongo_type",
        "desc" : "Standalone 模式。当 MongoDB 服务运行在 standalone 模式下，该配置必须设置为 'single'。",
        "default" : {
          "oneliner" : true,
          "hocon" : "single"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "server",
        "desc" : "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "unsafe",
            "safe"
          ],
          "kind" : "enum"
        },
        "raw_default" : "unsafe",
        "name" : "w_mode",
        "desc" : "写模式。",
        "default" : {
          "oneliner" : true,
          "hocon" : "unsafe"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "srv_record",
        "desc" : "使用 DNS SRV 记录。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "username",
        "desc" : "内部数据库的用户名。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "auth_source",
        "desc" : "与用户证书关联的数据库名称。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "database",
        "desc" : "数据库名字。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "topology",
          "kind" : "struct"
        },
        "name" : "topology",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 MongoDB 授权（单实例）。"
  },
  {
    "tags" : [
      "Authorization"
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:mysql",
    "fields" : [
      {
        "type" : {
          "name" : "mysql",
          "kind" : "singleton"
        },
        "name" : "type",
        "desc" : "数据后端类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此访问控制数据源",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "server",
        "desc" : "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MySQL 默认端口 3306。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "database",
        "desc" : "数据库名字。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "root",
        "name" : "username",
        "desc" : "内部数据库的用户名。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"root\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "auto_reconnect",
        "desc" : "Deprecated since v5.0.15.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "name" : "prepare_statement",
        "desc" : "SQL 预处理语句列表。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "query",
        "desc" : "访问控制数据查询语句/查询命令。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 MySOL 数据库授权"
  },
  {
    "tags" : [
      "Authorization"
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:postgresql",
    "fields" : [
      {
        "type" : {
          "name" : "postgresql",
          "kind" : "singleton"
        },
        "name" : "type",
        "desc" : "数据后端类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此访问控制数据源",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "server",
        "desc" : "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 PostgreSQL 默认端口 5432。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "database",
        "desc" : "数据库名字。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "username",
        "desc" : "内部数据库的用户名。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "auto_reconnect",
        "desc" : "Deprecated since v5.0.15.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "name" : "prepare_statement",
        "desc" : "SQL 预处理语句列表。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "query",
        "desc" : "访问控制数据查询语句/查询命令。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 PostgreSQL 数据库授权"
  },
  {
    "tags" : [
      "Authorization"
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:redis_cluster",
    "fields" : [
      {
        "type" : {
          "name" : "redis",
          "kind" : "singleton"
        },
        "name" : "type",
        "desc" : "数据后端类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此访问控制数据源",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "servers",
        "desc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "cluster",
          "kind" : "singleton"
        },
        "raw_default" : "cluster",
        "name" : "redis_type",
        "desc" : "集群模式。当 Redis 服务运行在集群模式下，该配置必须设置为 'cluster'。",
        "default" : {
          "oneliner" : true,
          "hocon" : "cluster"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "auto_reconnect",
        "desc" : "Deprecated since v5.0.15.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "cmd",
        "desc" : "访问控制数据查查询命令",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 Redis 授权（集群模式）。"
  },
  {
    "tags" : [
      "Authorization"
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:redis_sentinel",
    "fields" : [
      {
        "type" : {
          "name" : "redis",
          "kind" : "singleton"
        },
        "name" : "type",
        "desc" : "数据后端类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此访问控制数据源",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "servers",
        "desc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "sentinel",
          "kind" : "singleton"
        },
        "raw_default" : "sentinel",
        "name" : "redis_type",
        "desc" : "哨兵模式。当 Redis 服务运行在哨兵模式下，该配置必须设置为 'sentinel'。",
        "default" : {
          "oneliner" : true,
          "hocon" : "sentinel"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "sentinel",
        "desc" : "Redis 哨兵模式下的集群名称。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 0,
        "name" : "database",
        "desc" : "Redis 数据库 ID。",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "auto_reconnect",
        "desc" : "Deprecated since v5.0.15.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "cmd",
        "desc" : "访问控制数据查查询命令",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 Redis 授权（哨兵模式）。"
  },
  {
    "tags" : [
      "Authorization"
    ],
    "paths" : [
      "authorization.sources.$INDEX"
    ],
    "full_name" : "authz:redis_single",
    "fields" : [
      {
        "type" : {
          "name" : "redis",
          "kind" : "singleton"
        },
        "name" : "type",
        "desc" : "数据后端类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此访问控制数据源",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "server",
        "desc" : "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "single",
          "kind" : "singleton"
        },
        "raw_default" : "single",
        "name" : "redis_type",
        "desc" : "单机模式。当 Redis 服务运行在单机模式下，该配置必须设置为 'single'。",
        "default" : {
          "oneliner" : true,
          "hocon" : "single"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 0,
        "name" : "database",
        "desc" : "Redis 数据库 ID。",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "auto_reconnect",
        "desc" : "Deprecated since v5.0.15.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "cmd",
        "desc" : "访问控制数据查查询命令",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 Redis 授权（单实例）。"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "alarm"
    ],
    "full_name" : "broker:alarm",
    "fields" : [
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "atom()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          "log",
          "publish"
        ],
        "name" : "actions",
        "examples" : [
          [
            "log",
            "publish"
          ]
        ],
        "desc" : "警报激活时触发的动作。<br/>目前，支持以下操作：`log` 和 `publish`.\n`log` 将告警写入日志 (控制台或者文件).\n`publish` 将告警作为 MQTT 消息发布到系统主题:\n`$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate` and\n`$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate`",
        "default" : {
          "oneliner" : true,
          "hocon" : "[log, publish]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "1..3000",
          "kind" : "primitive"
        },
        "raw_default" : 1000,
        "name" : "size_limit",
        "examples" : [
          1000
        ],
        "desc" : "要保留为历史记录的已停用报警的最大总数。当超过此限制时，将删除最旧的停用报警，以限制总数。",
        "default" : {
          "oneliner" : true,
          "hocon" : "1000"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "24h",
        "name" : "validity_period",
        "examples" : [
          [
            50,
            52,
            104
          ]
        ],
        "desc" : "停用报警的保留时间。报警在停用时不会立即删除，而是在保留时间之后删除。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"24h\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for the alarms."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "authorization.cache"
    ],
    "full_name" : "broker:authz_cache",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "启用或禁用授权缓存。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "1..1048576",
          "kind" : "primitive"
        },
        "raw_default" : 32,
        "name" : "max_size",
        "desc" : "缓存项的最大数量。",
        "default" : {
          "oneliner" : true,
          "hocon" : "32"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "1m",
        "name" : "ttl",
        "desc" : "缓存数据的生存时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1m\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for the authorization cache."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "broker"
    ],
    "full_name" : "broker",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable_session_registry",
        "desc" : "是否启用 Session Registry",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "local",
            "leader",
            "quorum",
            "all"
          ],
          "kind" : "enum"
        },
        "raw_default" : "quorum",
        "name" : "session_locking_strategy",
        "desc" : "Session 在集群中的锁策略。\n  - `loca`：仅锁本节点的 Session；\n  - `one`：任选一个其它节点加锁；\n  - `quorum`：选择集群中半数以上的节点加锁；\n  - `all`：选择所有节点加锁。",
        "default" : {
          "oneliner" : true,
          "hocon" : "quorum"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "random",
            "round_robin",
            "round_robin_per_group",
            "sticky",
            "local",
            "hash_topic",
            "hash_clientid"
          ],
          "kind" : "enum"
        },
        "raw_default" : "round_robin",
        "name" : "shared_subscription_strategy",
        "desc" : "共享订阅消息派发策略。\n  - `random`：随机挑选一个共享订阅者派发；\n  - `round_robin`：使用 round-robin 策略派发；\n  - `round_robin_per_group`：在共享组内循环选择下一个成员；\n  - `local`：选择随机的本地成员，否则选择随机的集群范围内成员;\n  - `sticky`：总是使用上次选中的订阅者派发，直到它断开连接；\n  - `hash_clientid`：通过对发送者的客户端 ID 进行 Hash 处理来选择订阅者;\n  - `hash_topic`：通过对源主题进行 Hash 处理来选择订阅者。",
        "default" : {
          "oneliner" : true,
          "hocon" : "round_robin"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "route_batch_clean",
        "desc" : "是否开启批量清除路由。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Message broker options."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.ws.$name.websocket.deflate_opts",
      "listeners.wss.$name.websocket.deflate_opts"
    ],
    "full_name" : "broker:deflate_opts",
    "fields" : [
      {
        "type" : {
          "symbols" : [
            "none",
            "default",
            "best_compression",
            "best_speed"
          ],
          "kind" : "enum"
        },
        "name" : "level",
        "desc" : "压缩级别",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "1..9",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "mem_level",
        "desc" : "指定压缩状态的大小<br/>\n较低的值会减少每个连接的内存使用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "default",
            "filtered",
            "huffman_only",
            "rle"
          ],
          "kind" : "enum"
        },
        "raw_default" : "default",
        "name" : "strategy",
        "desc" : "指定压缩策略。",
        "default" : {
          "oneliner" : true,
          "hocon" : "default"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "takeover",
            "no_takeover"
          ],
          "kind" : "enum"
        },
        "raw_default" : "takeover",
        "name" : "server_context_takeover",
        "desc" : "接管意味着在服务器消息之间保留压缩状态。",
        "default" : {
          "oneliner" : true,
          "hocon" : "takeover"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "takeover",
            "no_takeover"
          ],
          "kind" : "enum"
        },
        "raw_default" : "takeover",
        "name" : "client_context_takeover",
        "desc" : "接管意味着在客户端消息之间保留压缩状态。",
        "default" : {
          "oneliner" : true,
          "hocon" : "takeover"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "8..15",
          "kind" : "primitive"
        },
        "raw_default" : 15,
        "name" : "server_max_window_bits",
        "desc" : "指定服务器压缩上下文的大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "15"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "8..15",
          "kind" : "primitive"
        },
        "raw_default" : 15,
        "name" : "client_max_window_bits",
        "desc" : "指定客户端压缩上下文的大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "15"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Compression options."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "sys_topics.sys_event_messages"
    ],
    "full_name" : "broker:event_names",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "client_connected",
        "desc" : "是否开启客户端已连接事件消息。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "client_disconnected",
        "desc" : "是否开启客户端已断开连接事件消息。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "client_subscribed",
        "desc" : "是否开启客户端已成功订阅主题事件消息。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "client_unsubscribed",
        "desc" : "是否开启客户端已成功取消订阅主题事件消息。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Enable or disable client lifecycle event publishing.\n\nThe following options affect MQTT clients as well as\ngateway clients. The types of the clients\nare distinguished by the topic prefix:\n\n- For the MQTT clients, the format is:\n`$SYS/broker/<node>/clients/<clientid>/<event>`\n- For the Gateway clients, it is\n`$SYS/broker/<node>/gateway/<gateway-name>/clients/<clientid>/<event>`\n"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "force_gc"
    ],
    "full_name" : "broker:force_gc",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "启用强制垃圾回收。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "0..inf",
          "kind" : "primitive"
        },
        "raw_default" : 16000,
        "name" : "count",
        "desc" : "在进程收到多少消息之后，对此进程执行垃圾回收。",
        "default" : {
          "oneliner" : true,
          "hocon" : "16000"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "raw_default" : "16MB",
        "name" : "bytes",
        "desc" : "在进程处理过多少个字节之后，对此进程执行垃圾回收。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"16MB\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Force garbage collection in MQTT connection process after\n they process certain number of messages or bytes of data."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "force_shutdown"
    ],
    "full_name" : "broker:force_shutdown",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "启用 `force_shutdown` 功能。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "0..inf",
          "kind" : "primitive"
        },
        "raw_default" : 1000,
        "name" : "max_message_queue_len",
        "desc" : "消息队列的最大长度。",
        "default" : {
          "oneliner" : true,
          "hocon" : "1000"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:wordsize()",
          "kind" : "primitive"
        },
        "raw_default" : "32MB",
        "name" : "max_heap_size",
        "desc" : "Heap 的总大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"32MB\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "When the process message queue length, or the memory bytes\nreaches a certain value, the process is forced to close.\n\nNote: \"message queue\" here refers to the \"message mailbox\"\nof the Erlang process, not the `mqueue` of QoS 1 and QoS 2."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.quic.$name.ssl_options"
    ],
    "full_name" : "broker:listener_quic_ssl_opts",
    "fields" : [
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "cacertfile",
        "desc" : "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "certfile",
        "desc" : "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "keyfile",
        "desc" : "PEM格式的私钥文件。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "verify_peer",
            "verify_none"
          ],
          "kind" : "enum"
        },
        "raw_default" : "verify_none",
        "name" : "verify",
        "desc" : "启用或禁用对等验证。",
        "default" : {
          "oneliner" : true,
          "hocon" : "verify_none"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "reuse_sessions",
        "desc" : "Deprecated since 5.0.20.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "name" : "depth",
        "desc" : "Deprecated since 5.0.20.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "password",
        "examples" : [
          ""
        ],
        "desc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "atom()",
            "kind" : "primitive"
          }
        },
        "name" : "versions",
        "importance" : "high",
        "desc" : "Deprecated since 5.0.20.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "string()",
            "kind" : "primitive"
          }
        },
        "name" : "ciphers",
        "desc" : "Deprecated since 5.0.20.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "secure_renegotiate",
        "desc" : "Deprecated since 5.0.20.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "name" : "hibernate_after",
        "desc" : "Deprecated since 5.0.20.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "dhfile",
        "desc" : "Deprecated since 5.0.20.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "fail_if_no_peer_cert",
        "desc" : "Deprecated since 5.0.20.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "honor_cipher_order",
        "desc" : "Deprecated since 5.0.20.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "client_renegotiation",
        "desc" : "Deprecated since 5.0.20.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "name" : "handshake_timeout",
        "desc" : "Deprecated since 5.0.20.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "gc_after_handshake",
        "desc" : "Deprecated since 5.0.20.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "enable_crl_check",
        "importance" : "medium",
        "desc" : "Deprecated since 5.0.20.",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "TLS options for QUIC transport."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.ssl.$name.ssl_options"
    ],
    "full_name" : "broker:listener_ssl_opts",
    "fields" : [
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "cacertfile",
        "desc" : "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "certfile",
        "desc" : "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "keyfile",
        "desc" : "PEM格式的私钥文件。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "verify_peer",
            "verify_none"
          ],
          "kind" : "enum"
        },
        "raw_default" : "verify_none",
        "name" : "verify",
        "desc" : "启用或禁用对等验证。",
        "default" : {
          "oneliner" : true,
          "hocon" : "verify_none"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "reuse_sessions",
        "desc" : "启用 TLS 会话重用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 10,
        "name" : "depth",
        "desc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "password",
        "examples" : [
          ""
        ],
        "desc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "atom()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          "tlsv1.3",
          "tlsv1.2",
          "tlsv1.1",
          "tlsv1"
        ],
        "name" : "versions",
        "importance" : "high",
        "desc" : "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 `tlsv1.3` 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 `[\"tlsv1.2\",\"tlsv1.1\"]`。",
        "default" : {
          "oneliner" : true,
          "hocon" : "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "string()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          
        ],
        "name" : "ciphers",
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n`\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"`或\n`[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]`。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS `版本`兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 `versions` 仅配置为 `tlsv1.3`。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 `tlsv1.3`。应在`ssl.versions`中禁用。\n\n<br/>\nPSK 密码套件：\n`\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"`",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "secure_renegotiate",
        "desc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "5s",
        "name" : "hibernate_after",
        "desc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "dhfile",
        "desc" : "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3不支持`dhfile`选项。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "fail_if_no_peer_cert",
        "desc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "honor_cipher_order",
        "desc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "client_renegotiation",
        "desc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "handshake_timeout",
        "desc" : "握手完成所允许的最长时间",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "gc_after_handshake",
        "desc" : "内存使用调优。如果启用，将在TLS/SSL握手完成后立即执行垃圾回收。TLS/SSL握手建立后立即进行GC。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ocsp",
          "kind" : "struct"
        },
        "name" : "ocsp",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "enable_crl_check",
        "importance" : "medium",
        "desc" : "是否为该监听器启用 CRL 检查。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Socket options for SSL connections."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.wss.$name.ssl_options"
    ],
    "full_name" : "broker:listener_wss_opts",
    "fields" : [
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "cacertfile",
        "desc" : "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "certfile",
        "desc" : "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "keyfile",
        "desc" : "PEM格式的私钥文件。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "verify_peer",
            "verify_none"
          ],
          "kind" : "enum"
        },
        "raw_default" : "verify_none",
        "name" : "verify",
        "desc" : "启用或禁用对等验证。",
        "default" : {
          "oneliner" : true,
          "hocon" : "verify_none"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "reuse_sessions",
        "desc" : "启用 TLS 会话重用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 10,
        "name" : "depth",
        "desc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "password",
        "examples" : [
          ""
        ],
        "desc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "atom()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          "tlsv1.3",
          "tlsv1.2",
          "tlsv1.1",
          "tlsv1"
        ],
        "name" : "versions",
        "importance" : "high",
        "desc" : "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 `tlsv1.3` 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 `[\"tlsv1.2\",\"tlsv1.1\"]`。",
        "default" : {
          "oneliner" : true,
          "hocon" : "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "string()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          
        ],
        "name" : "ciphers",
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n`\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"`或\n`[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]`。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS `版本`兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 `versions` 仅配置为 `tlsv1.3`。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 `tlsv1.3`。应在`ssl.versions`中禁用。\n\n<br/>\nPSK 密码套件：\n`\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"`",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "secure_renegotiate",
        "desc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "5s",
        "name" : "hibernate_after",
        "desc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "dhfile",
        "desc" : "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3不支持`dhfile`选项。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "fail_if_no_peer_cert",
        "desc" : "TLS/DTLS 服务器与 {verify，verify_peer} 一起使用。\n如果设置为true，则如果客户端没有要发送的证书，即发送空证书，服务器将失败。\n如果设置为false，则仅当客户端发送无效证书（空证书被视为有效证书）时才会失败。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "honor_cipher_order",
        "desc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "client_renegotiation",
        "desc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "handshake_timeout",
        "desc" : "握手完成所允许的最长时间",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Socket options for WebSocket/SSL connections."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners"
    ],
    "full_name" : "broker:listeners",
    "fields" : [
      {
        "type" : {
          "values" : {
            "name" : "broker:mqtt_tcp_listener",
            "kind" : "struct"
          },
          "name" : "name",
          "kind" : "map"
        },
        "name" : "tcp",
        "desc" : "TCP 监听器。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "values" : {
            "name" : "broker:mqtt_ssl_listener",
            "kind" : "struct"
          },
          "name" : "name",
          "kind" : "map"
        },
        "name" : "ssl",
        "desc" : "SSL 监听器。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "values" : {
            "name" : "broker:mqtt_ws_listener",
            "kind" : "struct"
          },
          "name" : "name",
          "kind" : "map"
        },
        "name" : "ws",
        "desc" : "HTTP websocket 监听器。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "values" : {
            "name" : "broker:mqtt_wss_listener",
            "kind" : "struct"
          },
          "name" : "name",
          "kind" : "map"
        },
        "name" : "wss",
        "desc" : "HTTPS websocket 监听器。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "values" : {
            "name" : "broker:mqtt_quic_listener",
            "kind" : "struct"
          },
          "name" : "name",
          "kind" : "map"
        },
        "name" : "quic",
        "desc" : "QUIC 监听器。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "MQTT listeners identified by their protocol type and assigned names"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "mqtt"
    ],
    "full_name" : "broker:mqtt",
    "fields" : [
      {
        "type" : {
          "members" : [
            {
              "name" : "infinity",
              "kind" : "singleton"
            },
            {
              "name" : "emqx_schema:duration()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "15s",
        "name" : "idle_timeout",
        "desc" : "设置连接被断开或进入休眠状态前的等待时间，空闲超时后，\n  - 如暂未收到客户端的 CONNECT 报文，连接将断开；\n  - 如已收到客户端的 CONNECT 报文，连接将进入休眠模式以节省系统资源。\n\n注意：请合理设置该参数值，如等待时间设置过长，可能造成系统资源的浪费。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "raw_default" : "1MB",
        "name" : "max_packet_size",
        "desc" : "允许的最大 MQTT 报文大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1MB\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "23..65535",
          "kind" : "primitive"
        },
        "raw_default" : 65535,
        "name" : "max_clientid_len",
        "desc" : "允许的最大 MQTT Client ID 长度。",
        "default" : {
          "oneliner" : true,
          "hocon" : "65535"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "1..65535",
          "kind" : "primitive"
        },
        "raw_default" : 128,
        "name" : "max_topic_levels",
        "desc" : "允许的最大主题层级。",
        "default" : {
          "oneliner" : true,
          "hocon" : "128"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "qos()",
          "kind" : "primitive"
        },
        "raw_default" : 2,
        "name" : "max_qos_allowed",
        "desc" : "允许的最大 QoS 等级。",
        "default" : {
          "oneliner" : true,
          "hocon" : "2"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "0..65535",
          "kind" : "primitive"
        },
        "raw_default" : 65535,
        "name" : "max_topic_alias",
        "desc" : "允许的最大主题别名数，0 表示不支持主题别名。",
        "default" : {
          "oneliner" : true,
          "hocon" : "65535"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "retain_available",
        "desc" : "是否启用对 MQTT 保留消息的支持。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "wildcard_subscription",
        "desc" : "是否启用对 MQTT 通配符订阅的支持。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "shared_subscription",
        "desc" : "是否启用对 MQTT 共享订阅的支持。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "exclusive_subscription",
        "desc" : "是否启用对 MQTT 排它订阅的支持。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "ignore_loop_deliver",
        "desc" : "设置由 MQTT v3.1.1/v3.1.0 客户端发布的消息是否将转发给其本身；类似 MQTT 5.0 协议中的 `No Local` 选项。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "strict_mode",
        "desc" : "是否以严格模式解析 MQTT 消息。\n严格模式下，如客户端 ID、主题名称等中包含无效 utf8 字符串，连接将被断开。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "",
        "name" : "response_information",
        "desc" : "UTF-8 字符串，用于指定返回给客户端的响应主题，如 `reqrsp/`，此时请求和应答客户端都需要使用 `reqrsp/` 前缀的主题来完成通讯。\n如希望禁用此功能，请在下方的文字框中输入`\"\"`；仅适用于 MQTT 5.0 客户端。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "integer()",
              "kind" : "primitive"
            },
            {
              "name" : "disabled",
              "kind" : "singleton"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "disabled",
        "name" : "server_keepalive",
        "desc" : "EMQX 要求的保活时间，如设为 disabled，则将使用客户端指定的保持连接时间；仅适用于 MQTT 5.0 客户端。",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "number()",
          "kind" : "primitive"
        },
        "raw_default" : 0.75,
        "name" : "keepalive_backoff",
        "desc" : "EMQX 判定客户端保活超时使用的阈值系数。计算公式为：Keep Alive * Backoff * 2",
        "default" : {
          "oneliner" : true,
          "hocon" : "0.75"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "1..inf",
              "kind" : "primitive"
            },
            {
              "name" : "infinity",
              "kind" : "singleton"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "infinity",
        "name" : "max_subscriptions",
        "desc" : "允许每个客户端建立的最大订阅数量。",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "upgrade_qos",
        "desc" : "投递消息时，是否根据订阅主题时的 QoS 等级来强制提升派发的消息的 QoS 等级。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "1..65535",
          "kind" : "primitive"
        },
        "raw_default" : 32,
        "name" : "max_inflight",
        "desc" : "允许在完成应答前同时投递的 QoS 1 和 QoS 2 消息的最大数量。",
        "default" : {
          "oneliner" : true,
          "hocon" : "32"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "30s",
        "name" : "retry_interval",
        "desc" : "QoS 1/2 消息的重新投递间隔。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "integer()",
              "kind" : "primitive"
            },
            {
              "name" : "infinity",
              "kind" : "singleton"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : 100,
        "name" : "max_awaiting_rel",
        "desc" : "每个发布者的会话中，都存在一个队列来处理客户端发送的 QoS 2 消息。该队列会存储 QoS 2 消息的报文 ID 直到收到客户端的 PUBREL 或超时，达到队列长度的限制后，新的 QoS 2 消息发布会被拒绝，并返回 `147(0x93)` 错误。",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "300s",
        "name" : "await_rel_timeout",
        "desc" : "客户端发布 QoS 2 消息时，服务器等待 `PUBREL` 的最长时延。超过该时长后服务器会放弃等待，该PACKET ID 会被释放，从而允许后续新的 PUBLISH 消息使用。如果超时后收到 PUBREL，服务器将会产生一条告警日志。注意，向订阅客户端转发消息的动作发生在进入等待之前。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"300s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "2h",
        "name" : "session_expiry_interval",
        "desc" : "指定会话将在连接断开后多久过期，仅适用于非 MQTT 5.0 的连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"2h\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "non_neg_integer()",
              "kind" : "primitive"
            },
            {
              "name" : "infinity",
              "kind" : "singleton"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : 1000,
        "name" : "max_mqueue_len",
        "desc" : "消息队列最大长度。持久客户端断开连接或飞行窗口已满时排队的消息长度。",
        "default" : {
          "oneliner" : true,
          "hocon" : "1000"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "map()",
              "kind" : "primitive"
            },
            {
              "name" : "disabled",
              "kind" : "singleton"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "disabled",
        "name" : "mqueue_priorities",
        "desc" : "主题优先级。取值范围 [1-255]\n默认优先级表为空，即所有的主题优先级相同。\n\n注：优先主题名称中不支持使用逗号和等号。\n注：不在此列表中的主题，被视为最高/最低优先级，这取决于`mqtt.mqueue_default_priority` 的配置\n\n示例：\n配置 `\"topic/1\" > \"topic/2\"`:\n`mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}`",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "highest",
            "lowest"
          ],
          "kind" : "enum"
        },
        "raw_default" : "lowest",
        "name" : "mqueue_default_priority",
        "desc" : "默认的主题优先级，不在 `主题优先级`（`mqueue_priorities`） 中的主题将会使用该优先级。",
        "default" : {
          "oneliner" : true,
          "hocon" : "lowest"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "mqueue_store_qos0",
        "desc" : "指定在连接断开但会话保持期间，是否需要在消息队列中存储 QoS 0 消息。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "use_username_as_clientid",
        "desc" : "是否使用用户名作为客户端 ID。\n此设置的作用时间晚于 `对端证书作为用户名` 和 `对端证书作为客户端 ID`。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "disabled",
            "cn",
            "dn",
            "crt",
            "pem",
            "md5"
          ],
          "kind" : "enum"
        },
        "raw_default" : "disabled",
        "name" : "peer_cert_as_username",
        "desc" : "使用对端证书中的 CN、DN 字段或整个证书内容来作为用户名；仅适用于 TLS 连接。\n目前支持：\n- `cn`: 取证书的 CN 字段\n- `dn`: 取证书的 DN 字段\n- `crt`: 取 `DER` 或 `PEM` 的证书内容\n- `pem`: 将 `DER` 证书转换为 `PEM` 格式作为用户名\n- `md5`: 取 `DER` 或 `PEM` 证书内容的 MD5 值",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "disabled",
            "cn",
            "dn",
            "crt",
            "pem",
            "md5"
          ],
          "kind" : "enum"
        },
        "raw_default" : "disabled",
        "name" : "peer_cert_as_clientid",
        "desc" : "使用对端证书中的 CN、DN 字段或整个证书内容来作为客户端 ID。仅适用于 TLS 连接；\n目前支持：\n- `cn`: 取证书的 CN 字段\n- `dn`: 取证书的 DN 字段\n- `crt`: 取 `DER` 或 `PEM` 证书的内容\n- `pem`: 将 `DER` 证书内容转换为 `PEM` 格式作为客户端 ID\n- `md5`: 取 `DER` 或 `PEM` 证书内容的 MD5 值",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Global MQTT configuration.<br/>The configs here work as default values which can be overridden\nin `zone` configs"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.quic.$name"
    ],
    "full_name" : "broker:mqtt_quic_listener",
    "fields" : [
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "certfile",
        "desc" : "证书文件。在 5.1 中会被废弃，使用 .ssl_options.certfile 代替。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "keyfile",
        "desc" : "私钥文件。在 5.1 中会被废弃，使用 .ssl_options.keyfile 代替。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "string()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          "TLS_AES_256_GCM_SHA384",
          "TLS_AES_128_GCM_SHA256",
          "TLS_CHACHA20_POLY1305_SHA256"
        ],
        "name" : "ciphers",
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n`\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"`或\n`[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]`。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS `版本`兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 `versions` 仅配置为 `tlsv1.3`。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件，`tlsv1.3`。应在`ssl.versions`中禁用。\n\n<br/>\nPSK 密码套件：\n`\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"`<br/>\n\n注：QUIC 监听器不支持 tlsv1.3 的 ciphers",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"TLS_AES_256_GCM_SHA384\", \"TLS_AES_128_GCM_SHA256\", \"TLS_CHACHA20_POLY1305_SHA256\"]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : 0,
        "name" : "idle_timeout",
        "desc" : "一个连接在被关闭之前可以空闲多长时间。0表示禁用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "10s",
        "name" : "handshake_idle_timeout",
        "desc" : "一个握手在被丢弃之前可以空闲多长时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"10s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : 0,
        "name" : "keep_alive_interval",
        "desc" : "发送 PING 帧的频率，以保活连接. 设为 0 表示禁用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:listener_quic_ssl_opts",
          "kind" : "struct"
        },
        "name" : "ssl_options",
        "desc" : "QUIC 传输层的 TLS 选项",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enabled",
        "desc" : "启停监听器。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "emqx_schema:ip_port()",
              "kind" : "primitive"
            },
            {
              "name" : "integer()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : 14567,
        "name" : "bind",
        "desc" : "监听套接字的 IP 地址和端口。",
        "default" : {
          "oneliner" : true,
          "hocon" : "14567"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 16,
        "name" : "acceptors",
        "desc" : "监听器接收池的大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "infinity",
              "kind" : "singleton"
            },
            {
              "name" : "pos_integer()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "infinity",
        "name" : "max_connections",
        "desc" : "监听器允许的最大并发连接数。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"infinity\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "",
        "name" : "mountpoint",
        "desc" : "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 `listeners.tcp.\\<name>.mountpoint` 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为`\"\"` 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- `${clientid}`: clientid\n- `${username}`: username",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "atom()",
          "kind" : "primitive"
        },
        "raw_default" : "default",
        "name" : "zone",
        "desc" : "监听器所属的配置组。",
        "default" : {
          "oneliner" : true,
          "hocon" : "default"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "limiter:listener_fields",
          "kind" : "struct"
        },
        "name" : "limiter",
        "desc" : "速率限制类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "true",
            "false",
            "quick_deny_anonymous"
          ],
          "kind" : "enum"
        },
        "raw_default" : true,
        "name" : "enable_authn",
        "desc" : "配置 `true` （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 `false` 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 `quick_deny_anonymous` 时，行为跟 `true` 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for the MQTT over QUIC listener."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.ssl.$name"
    ],
    "full_name" : "broker:mqtt_ssl_listener",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enabled",
        "desc" : "启停监听器。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "emqx_schema:ip_port()",
              "kind" : "primitive"
            },
            {
              "name" : "integer()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : 8883,
        "name" : "bind",
        "desc" : "监听套接字的 IP 地址和端口。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8883"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 16,
        "name" : "acceptors",
        "desc" : "监听器接收池的大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "infinity",
              "kind" : "singleton"
            },
            {
              "name" : "pos_integer()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "infinity",
        "name" : "max_connections",
        "desc" : "监听器允许的最大并发连接数。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"infinity\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "",
        "name" : "mountpoint",
        "desc" : "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 `listeners.tcp.\\<name>.mountpoint` 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为`\"\"` 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- `${clientid}`: clientid\n- `${username}`: username",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "atom()",
          "kind" : "primitive"
        },
        "raw_default" : "default",
        "name" : "zone",
        "desc" : "监听器所属的配置组。",
        "default" : {
          "oneliner" : true,
          "hocon" : "default"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "limiter:listener_fields",
          "kind" : "struct"
        },
        "name" : "limiter",
        "desc" : "速率限制类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "true",
            "false",
            "quick_deny_anonymous"
          ],
          "kind" : "enum"
        },
        "raw_default" : true,
        "name" : "enable_authn",
        "desc" : "配置 `true` （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 `false` 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 `quick_deny_anonymous` 时，行为跟 `true` 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "string()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          "allow all"
        ],
        "name" : "access_rules",
        "desc" : "此监听器的访问控制规则。",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"allow all\"]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "proxy_protocol",
        "desc" : "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "3s",
        "name" : "proxy_protocol_timeout",
        "desc" : "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"3s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:tcp_opts",
          "kind" : "struct"
        },
        "name" : "tcp_options",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:listener_ssl_opts",
          "kind" : "struct"
        },
        "name" : "ssl_options",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for the MQTT over SSL listener."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.tcp.$name"
    ],
    "full_name" : "broker:mqtt_tcp_listener",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enabled",
        "desc" : "启停监听器。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "emqx_schema:ip_port()",
              "kind" : "primitive"
            },
            {
              "name" : "integer()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : 1883,
        "name" : "bind",
        "desc" : "监听套接字的 IP 地址和端口。",
        "default" : {
          "oneliner" : true,
          "hocon" : "1883"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 16,
        "name" : "acceptors",
        "desc" : "监听器接收池的大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "infinity",
              "kind" : "singleton"
            },
            {
              "name" : "pos_integer()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "infinity",
        "name" : "max_connections",
        "desc" : "监听器允许的最大并发连接数。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"infinity\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "",
        "name" : "mountpoint",
        "desc" : "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 `listeners.tcp.\\<name>.mountpoint` 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为`\"\"` 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- `${clientid}`: clientid\n- `${username}`: username",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "atom()",
          "kind" : "primitive"
        },
        "raw_default" : "default",
        "name" : "zone",
        "desc" : "监听器所属的配置组。",
        "default" : {
          "oneliner" : true,
          "hocon" : "default"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "limiter:listener_fields",
          "kind" : "struct"
        },
        "name" : "limiter",
        "desc" : "速率限制类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "true",
            "false",
            "quick_deny_anonymous"
          ],
          "kind" : "enum"
        },
        "raw_default" : true,
        "name" : "enable_authn",
        "desc" : "配置 `true` （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 `false` 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 `quick_deny_anonymous` 时，行为跟 `true` 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "string()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          "allow all"
        ],
        "name" : "access_rules",
        "desc" : "此监听器的访问控制规则。",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"allow all\"]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "proxy_protocol",
        "desc" : "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "3s",
        "name" : "proxy_protocol_timeout",
        "desc" : "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"3s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:tcp_opts",
          "kind" : "struct"
        },
        "name" : "tcp_options",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for the MQTT over TCP listener."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.ws.$name"
    ],
    "full_name" : "broker:mqtt_ws_listener",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enabled",
        "desc" : "启停监听器。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "emqx_schema:ip_port()",
              "kind" : "primitive"
            },
            {
              "name" : "integer()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : 8083,
        "name" : "bind",
        "desc" : "监听套接字的 IP 地址和端口。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8083"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 16,
        "name" : "acceptors",
        "desc" : "监听器接收池的大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "infinity",
              "kind" : "singleton"
            },
            {
              "name" : "pos_integer()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "infinity",
        "name" : "max_connections",
        "desc" : "监听器允许的最大并发连接数。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"infinity\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "",
        "name" : "mountpoint",
        "desc" : "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 `listeners.tcp.\\<name>.mountpoint` 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为`\"\"` 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- `${clientid}`: clientid\n- `${username}`: username",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "atom()",
          "kind" : "primitive"
        },
        "raw_default" : "default",
        "name" : "zone",
        "desc" : "监听器所属的配置组。",
        "default" : {
          "oneliner" : true,
          "hocon" : "default"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "limiter:listener_fields",
          "kind" : "struct"
        },
        "name" : "limiter",
        "desc" : "速率限制类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "true",
            "false",
            "quick_deny_anonymous"
          ],
          "kind" : "enum"
        },
        "raw_default" : true,
        "name" : "enable_authn",
        "desc" : "配置 `true` （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 `false` 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 `quick_deny_anonymous` 时，行为跟 `true` 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "string()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          "allow all"
        ],
        "name" : "access_rules",
        "desc" : "此监听器的访问控制规则。",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"allow all\"]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "proxy_protocol",
        "desc" : "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "3s",
        "name" : "proxy_protocol_timeout",
        "desc" : "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"3s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:tcp_opts",
          "kind" : "struct"
        },
        "name" : "tcp_options",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ws_opts",
          "kind" : "struct"
        },
        "name" : "websocket",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for the MQTT over WebSocket listener."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.wss.$name"
    ],
    "full_name" : "broker:mqtt_wss_listener",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enabled",
        "desc" : "启停监听器。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "emqx_schema:ip_port()",
              "kind" : "primitive"
            },
            {
              "name" : "integer()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : 8084,
        "name" : "bind",
        "desc" : "监听套接字的 IP 地址和端口。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8084"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 16,
        "name" : "acceptors",
        "desc" : "监听器接收池的大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "infinity",
              "kind" : "singleton"
            },
            {
              "name" : "pos_integer()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "infinity",
        "name" : "max_connections",
        "desc" : "监听器允许的最大并发连接数。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"infinity\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "",
        "name" : "mountpoint",
        "desc" : "发布或订阅时，请在所有主题前面加上 mountpoint 字符串。\n\n将消息传递给订阅者时，将从主题名称中删除带前缀的字符串。挂载点是一种用户可以用来实现不同侦听器之间消息路由隔离的方法。\n\n例如，如果客户机 A 使用 `listeners.tcp.\\<name>.mountpoint` 设置为'some_tenant'，那么客户端实际上订阅了主题'some_tenant/t'。<br/>\n类似地，如果另一个客户端B（与客户端A连接到同一个侦听器）向主题 't' 发送消息，该消息将路由到所有订阅了'some_租户/t'的客户端，因此客户端 A 将接收主题名为't'的消息<br/>\n\n设置为`\"\"` 以禁用该功能<br/>\n\nmountpoint 字符串中的变量：\n- `${clientid}`: clientid\n- `${username}`: username",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "atom()",
          "kind" : "primitive"
        },
        "raw_default" : "default",
        "name" : "zone",
        "desc" : "监听器所属的配置组。",
        "default" : {
          "oneliner" : true,
          "hocon" : "default"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "limiter:listener_fields",
          "kind" : "struct"
        },
        "name" : "limiter",
        "desc" : "速率限制类型",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "true",
            "false",
            "quick_deny_anonymous"
          ],
          "kind" : "enum"
        },
        "raw_default" : true,
        "name" : "enable_authn",
        "desc" : "配置 `true` （默认值）启用客户端进行身份认证，通过检查认配置的认认证器链来决定是否允许接入。\n配置 `false` 时，将不对客户端做任何认证，任何客户端，不论是不是携带用户名等认证信息，都可以接入。\n配置 `quick_deny_anonymous` 时，行为跟 `true` 类似，但是会对匿名\n客户直接拒绝，不做使用任何认证器对客户端进行身份检查。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "string()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          "allow all"
        ],
        "name" : "access_rules",
        "desc" : "此监听器的访问控制规则。",
        "default" : {
          "oneliner" : true,
          "hocon" : "[\"allow all\"]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "proxy_protocol",
        "desc" : "如果EMQX集群部署在 HAProxy 或 Nginx 之后，请启用代理协议 V1/2 <br/>\n详情见: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "3s",
        "name" : "proxy_protocol_timeout",
        "desc" : "代理协议超时。如果在超时时间内未收到代理协议数据包，EMQX将关闭TCP连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"3s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:tcp_opts",
          "kind" : "struct"
        },
        "name" : "tcp_options",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:listener_wss_opts",
          "kind" : "struct"
        },
        "name" : "ssl_options",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ws_opts",
          "kind" : "struct"
        },
        "name" : "websocket",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for the MQTT over WebSocket/SSL listener."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.ssl.$name.ssl_options.ocsp"
    ],
    "full_name" : "broker:ocsp",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "enable_ocsp_stapling",
        "desc" : "是否为监听器启用 OCSP Stapling 功能。 如果设置为 true，需要定义 OCSP Responder 的 URL 和证书签发者的 PEM 文件路径。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:url()",
          "kind" : "primitive"
        },
        "name" : "responder_url",
        "desc" : "用于检查服务器证书的 OCSP Responder 的 URL。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "issuer_pem",
        "desc" : "服务器证书的 OCSP 签发者的 PEM 编码证书。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "5m",
        "name" : "refresh_interval",
        "desc" : "为服务器刷新OCSP响应的周期。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5m\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "refresh_http_timeout",
        "desc" : "检查 OCSP 响应时，HTTP 请求的超时。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Per listener OCSP Stapling configuration."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "authentication.$INDEX.ssl",
      "authorization.sources.$INDEX.ssl",
      "bridges.mqtt.$name.ssl",
      "bridges.webhook.$name.ssl",
      "cluster.etcd.ssl_options"
    ],
    "full_name" : "broker:ssl_client_opts",
    "fields" : [
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "cacertfile",
        "desc" : "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "certfile",
        "desc" : "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "keyfile",
        "desc" : "PEM格式的私钥文件。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "verify_peer",
            "verify_none"
          ],
          "kind" : "enum"
        },
        "raw_default" : "verify_none",
        "name" : "verify",
        "desc" : "启用或禁用对等验证。",
        "default" : {
          "oneliner" : true,
          "hocon" : "verify_none"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "reuse_sessions",
        "desc" : "启用 TLS 会话重用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 10,
        "name" : "depth",
        "desc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "password",
        "examples" : [
          ""
        ],
        "desc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "atom()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          "tlsv1.3",
          "tlsv1.2",
          "tlsv1.1",
          "tlsv1"
        ],
        "name" : "versions",
        "importance" : "high",
        "desc" : "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 `tlsv1.3` 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 `[\"tlsv1.2\",\"tlsv1.1\"]`。",
        "default" : {
          "oneliner" : true,
          "hocon" : "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "string()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          
        ],
        "name" : "ciphers",
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n`\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"`或\n`[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]`。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS `版本`兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 `versions` 仅配置为 `tlsv1.3`。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 `tlsv1.3`。应在`ssl.versions`中禁用。\n\n<br/>\nPSK 密码套件：\n`\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"`",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "secure_renegotiate",
        "desc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "5s",
        "name" : "hibernate_after",
        "desc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "enable",
        "desc" : "启用 TLS。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "disable",
              "kind" : "singleton"
            },
            {
              "name" : "string()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "name" : "server_name_indication",
        "examples" : [
          "disable"
        ],
        "desc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 `disable` 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Socket options for SSL clients."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "sys_topics"
    ],
    "full_name" : "broker:sys_topics",
    "fields" : [
      {
        "type" : {
          "members" : [
            {
              "name" : "disabled",
              "kind" : "singleton"
            },
            {
              "name" : "emqx_schema:duration()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "1m",
        "name" : "sys_msg_interval",
        "desc" : "发送 `$SYS` 主题的间隔时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1m\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "disabled",
              "kind" : "singleton"
            },
            {
              "name" : "emqx_schema:duration()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "30s",
        "name" : "sys_heartbeat_interval",
        "desc" : "发送心跳系统消息的间隔时间，它包括：\n  - `$SYS/brokers/<node>/uptime`\n  - `$SYS/brokers/<node>/datetime`",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:event_names",
          "kind" : "struct"
        },
        "name" : "sys_event_messages",
        "desc" : "客户端事件消息。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "The EMQX Broker periodically publishes its own status, message statistics,\nclient online and offline events to the system topic starting with `$SYS/`.\n\nThe following options control the behavior of `$SYS` topics."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "sysmon"
    ],
    "full_name" : "broker:sysmon",
    "fields" : [
      {
        "type" : {
          "name" : "broker:sysmon_vm",
          "kind" : "struct"
        },
        "name" : "vm",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:sysmon_os",
          "kind" : "struct"
        },
        "name" : "os",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Features related to system monitoring and introspection."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "sysmon.os"
    ],
    "full_name" : "broker:sysmon_os",
    "fields" : [
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "60s",
        "name" : "cpu_check_interval",
        "desc" : "定期 CPU 检查的时间间隔。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"60s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:percent()",
          "kind" : "primitive"
        },
        "raw_default" : "80%",
        "name" : "cpu_high_watermark",
        "desc" : "在发出相应警报之前可以使用多少系统 CPU 的阈值，以系统CPU负载的百分比表示。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"80%\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:percent()",
          "kind" : "primitive"
        },
        "raw_default" : "60%",
        "name" : "cpu_low_watermark",
        "desc" : "在解除相应警报之前可以使用多少系统 CPU 的阈值，以系统CPU负载的百分比表示。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"60%\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "disabled",
              "kind" : "singleton"
            },
            {
              "name" : "emqx_schema:duration()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "60s",
        "name" : "mem_check_interval",
        "desc" : "定期内存检查的时间间隔。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"60s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:percent()",
          "kind" : "primitive"
        },
        "raw_default" : "70%",
        "name" : "sysmem_high_watermark",
        "desc" : "在发出相应报警之前可以分配多少系统内存的阈值，以系统内存的百分比表示。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"70%\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:percent()",
          "kind" : "primitive"
        },
        "raw_default" : "5%",
        "name" : "procmem_high_watermark",
        "desc" : "在发出相应警报之前，一个Erlang进程可以分配多少系统内存的阈值，以系统内存的百分比表示。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5%\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "This part of the configuration is responsible for monitoring\n the host OS health, such as free memory, disk space, CPU load, etc."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "sysmon.vm"
    ],
    "full_name" : "broker:sysmon_vm",
    "fields" : [
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "30s",
        "name" : "process_check_interval",
        "desc" : "定期进程限制检查的时间间隔。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:percent()",
          "kind" : "primitive"
        },
        "raw_default" : "80%",
        "name" : "process_high_watermark",
        "desc" : "在发出相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"80%\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:percent()",
          "kind" : "primitive"
        },
        "raw_default" : "60%",
        "name" : "process_low_watermark",
        "desc" : "在清除相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"60%\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "disabled",
              "kind" : "singleton"
            },
            {
              "name" : "emqx_schema:duration()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "disabled",
        "name" : "long_gc",
        "desc" : "当系统检测到某个 Erlang 进程垃圾回收占用过长时间，会触发一条带有 `long_gc` 关键字的日志。\n同时还会发布一条主题为 `$SYS/sysmon/long_gc` 的 MQTT 系统消息。",
        "default" : {
          "oneliner" : true,
          "hocon" : "disabled"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "disabled",
              "kind" : "singleton"
            },
            {
              "name" : "emqx_schema:duration()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "240ms",
        "name" : "long_schedule",
        "desc" : "启用后，如果 Erlang VM 调度器出现某个任务占用时间过长时，会触发一条带有 'long_schedule' 关键字的日志。\n同时还会发布一条主题为 `$SYS/sysmon/long_schedule` 的 MQTT 系统消息。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"240ms\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "disabled",
              "kind" : "singleton"
            },
            {
              "name" : "emqx_schema:bytesize()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "32MB",
        "name" : "large_heap",
        "desc" : "启用后，当一个 Erlang 进程申请了大量内存，系统会触发一条带有 `large_heap` 关键字的\nwarning 级别日志。同时还会发布一条主题为 `$SYS/sysmon/busy_dist_port` 的 MQTT 系统消息。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"32MB\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "busy_dist_port",
        "desc" : "启用后，当用于集群接点之间 RPC 的连接过忙时，会触发一条带有 `busy_dist_port` 关键字的 warning 级别日志。\n同时还会发布一条主题为 `$SYS/sysmon/busy_dist_port` 的 MQTT 系统消息。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "busy_port",
        "desc" : "当一个系统接口（例如 TCP socket）过忙，会触发一条带有 `busy_port` 关键字的 warning 级别的日志。\n同时还会发布一条主题为 `$SYS/sysmon/busy_port` 的 MQTT 系统消息。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "This part of the configuration is responsible for collecting\n BEAM VM events, such as long garbage collection, traffic congestion in the inter-broker\n communication, etc."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.ssl.$name.tcp_options",
      "listeners.tcp.$name.tcp_options",
      "listeners.ws.$name.tcp_options",
      "listeners.wss.$name.tcp_options"
    ],
    "full_name" : "broker:tcp_opts",
    "fields" : [
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 100,
        "name" : "active_n",
        "desc" : "为此套接字指定{active，N}选项<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 1024,
        "name" : "backlog",
        "desc" : "TCP backlog 定义了挂起连接队列可以增长到的最大长度。",
        "default" : {
          "oneliner" : true,
          "hocon" : "1024"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "send_timeout",
        "desc" : "连接的 TCP 发送超时。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "send_timeout_close",
        "desc" : "如果发送超时，则关闭连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "name" : "recbuf",
        "examples" : [
          "2KB"
        ],
        "desc" : "连接的 TCP 接收缓冲区（OS 内核）。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "name" : "sndbuf",
        "examples" : [
          "4KB"
        ],
        "desc" : "连接的 TCP 发送缓冲区（OS 内核）。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "raw_default" : "4KB",
        "name" : "buffer",
        "examples" : [
          "4KB"
        ],
        "desc" : "驱动程序使用的用户空间缓冲区的大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"4KB\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "raw_default" : "1MB",
        "name" : "high_watermark",
        "desc" : "当 VM 套接字实现内部排队的数据量达到此限制时，套接字将设置为忙碌状态。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1MB\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "nodelay",
        "desc" : "连接的 TCP_NODELAY 标识",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "reuseaddr",
        "desc" : "连接的 SO_REUSEADDR 标识。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "TCP listener options."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "listeners.ws.$name.websocket",
      "listeners.wss.$name.websocket"
    ],
    "full_name" : "broker:ws_opts",
    "fields" : [
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "/mqtt",
        "name" : "mqtt_path",
        "desc" : "WebSocket 的 MQTT 协议路径。因此，EMQX Broker的WebSocket地址为：\n`ws://{ip}:{port}/mqtt`",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"/mqtt\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "single",
            "multiple"
          ],
          "kind" : "enum"
        },
        "raw_default" : "multiple",
        "name" : "mqtt_piggyback",
        "desc" : "WebSocket消息是否允许包含多个 MQTT 数据包。",
        "default" : {
          "oneliner" : true,
          "hocon" : "multiple"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "compress",
        "desc" : "如果 `true`，则使用`zlib` 压缩 WebSocket 消息<br/>\n`deflate_opts` 下的配置项属于压缩相关参数配置。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "7200s",
        "name" : "idle_timeout",
        "desc" : "关闭在此间隔内未发送 MQTT CONNECT 消息的客户端的传输层连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"7200s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "infinity",
              "kind" : "singleton"
            },
            {
              "name" : "integer()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "infinity",
        "name" : "max_frame_size",
        "desc" : "单个 MQTT 数据包的最大长度。",
        "default" : {
          "oneliner" : true,
          "hocon" : "infinity"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "fail_if_no_subprotocol",
        "desc" : "如果`true`，当客户端未携带`Sec WebSocket Protocol`字段时，服务器将返回一个错误。\n<br/>注意：微信小程序需要禁用此验证。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:comma_separated_list()",
          "kind" : "primitive"
        },
        "raw_default" : "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5",
        "name" : "supported_subprotocols",
        "desc" : "逗号分隔的 subprotocols 支持列表。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "check_origin_enable",
        "desc" : "如果`true`，`origin`HTTP 头将根据`check_origins`参数中配置的允许来源列表进行验证。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "allow_origin_absence",
        "desc" : "If `false` and `check_origin_enable` is `true`, the server will reject requests that don't have `origin` HTTP header.",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:comma_separated_binary()",
          "kind" : "primitive"
        },
        "raw_default" : "http://localhost:18083, http://127.0.0.1:18083",
        "name" : "check_origins",
        "desc" : "允许的 origins 列表",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"http://localhost:18083, http://127.0.0.1:18083\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "x-forwarded-for",
        "name" : "proxy_address_header",
        "desc" : "HTTP 头，用于传递有关客户端 IP 地址的信息。\n当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"x-forwarded-for\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "x-forwarded-port",
        "name" : "proxy_port_header",
        "desc" : "HTTP 头，用于传递有关客户端端口的信息。当 EMQX 集群部署在负载平衡器后面时，这一点非常重要。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"x-forwarded-port\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:deflate_opts",
          "kind" : "struct"
        },
        "name" : "deflate_opts",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "WebSocket listener options."
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "zones.$name"
    ],
    "full_name" : "broker:zone",
    "fields" : [
      {
        "type" : {
          "name" : "zone:mqtt",
          "kind" : "struct"
        },
        "name" : "mqtt",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "zone:force_shutdown",
          "kind" : "struct"
        },
        "name" : "force_shutdown",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "zone:force_gc",
          "kind" : "struct"
        },
        "name" : "force_gc",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "A `Zone` defines a set of configuration items (such as the maximum number of connections) that can be shared between multiple listeners.\n\n`Listener` can refer to a `Zone` through the configuration item `listener.\\<Protocol>.\\<Listener Name>.zone`.\n\nThe configs defined in the zones will override the global configs with the same key.\n\nFor example, given the following config:\n```\na {\n    b: 1, c: 1\n}\nzone.my_zone {\n  a {\n    b:2\n  }\n}\n```\n\nThe global config `a` is overridden by the configs `a` inside the zone `my_zone`.\n\nIf there is a listener using the zone `my_zone`, the value of config `a` will be: `{b:2, c: 1}`.\nNote that although the default value of `a.c` is `0`, the global value is used, i.e. configs in the zone have no default values. To override `a.c` one must configure it explicitly in the zone.\n\nAll the global configs that can be overridden in zones are:\n - `stats.*`\n - `mqtt.*`\n - `authorization.*`\n - `flapping_detect.*`\n - `force_shutdown.*`\n - `conn_congestion.*`\n - `force_gc.*`\n\n"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "dashboard"
    ],
    "full_name" : "dashboard",
    "fields" : [
      {
        "type" : {
          "name" : "dashboard:listeners",
          "kind" : "struct"
        },
        "name" : "listeners",
        "desc" : "Dashboard 监听器设置。监听器必须有唯一的端口号和IP地址的组合。\n例如，可以通过指定IP地址 0.0.0.0 来监听机器上给定端口上的所有配置的IP地址。\n或者，可以为每个监听器指定唯一的IP地址，但使用相同的端口。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "60m",
        "name" : "token_expired_time",
        "desc" : "JWT token 过期时间。默认设置为 60 分钟。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"60m\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "cors",
        "desc" : "支持跨域资源共享(CORS)，\n允许服务器指示任何来源(域名、协议或端口)，除了本服务器之外的任何浏览器应允许加载资源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "EMQX Dashboard 配置。"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "dashboard.listeners.http"
    ],
    "full_name" : "dashboard:http",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "忽略或启用该监听器。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "non_neg_integer()",
              "kind" : "primitive"
            },
            {
              "name" : "emqx_schema:ip_port()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : 18083,
        "name" : "bind",
        "examples" : [
          [
            48,
            46,
            48,
            46,
            48,
            46,
            48,
            58,
            49,
            56,
            48,
            56,
            51
          ]
        ],
        "desc" : "监听地址和端口，热更新此配置时，会重启 Dashboard 服务。",
        "default" : {
          "oneliner" : true,
          "hocon" : "18083"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 20,
        "name" : "num_acceptors",
        "desc" : "TCP协议的Socket acceptor池大小, 默认设置在线的调度器数量（通常为 CPU 核数）",
        "default" : {
          "oneliner" : true,
          "hocon" : "20"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 512,
        "name" : "max_connections",
        "desc" : "同时处理的最大连接数。",
        "default" : {
          "oneliner" : true,
          "hocon" : "512"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 1024,
        "name" : "backlog",
        "desc" : "排队等待连接的队列的最大长度。",
        "default" : {
          "oneliner" : true,
          "hocon" : "1024"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "10s",
        "name" : "send_timeout",
        "desc" : "Socket发送超时时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"10s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "inet6",
        "desc" : "启用IPv6， 如果机器不支持IPv6，请关闭此选项，否则会导致 Dashboard 无法使用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "ipv6_v6only",
        "desc" : "当开启 inet6 功能的同时禁用 IPv4-to-IPv6 映射。该配置仅在 inet6 功能开启时有效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "proxy_header",
        "desc" : "开启对  `HAProxy` 的支持，注意：一旦开启了这个功能，就无法再处理普通的 HTTP 请求了。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Dashboard 监听器(HTTP)配置。"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "dashboard.listeners.https"
    ],
    "full_name" : "dashboard:https",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "enable",
        "desc" : "忽略或启用该监听器。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "non_neg_integer()",
              "kind" : "primitive"
            },
            {
              "name" : "emqx_schema:ip_port()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : 18084,
        "name" : "bind",
        "examples" : [
          [
            48,
            46,
            48,
            46,
            48,
            46,
            48,
            58,
            49,
            56,
            48,
            56,
            52
          ]
        ],
        "desc" : "监听地址和端口，热更新此配置时，会重启 Dashboard 服务。",
        "default" : {
          "oneliner" : true,
          "hocon" : "18084"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 20,
        "name" : "num_acceptors",
        "desc" : "TCP协议的Socket acceptor池大小, 默认设置在线的调度器数量（通常为 CPU 核数）",
        "default" : {
          "oneliner" : true,
          "hocon" : "20"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 512,
        "name" : "max_connections",
        "desc" : "同时处理的最大连接数。",
        "default" : {
          "oneliner" : true,
          "hocon" : "512"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 1024,
        "name" : "backlog",
        "desc" : "排队等待连接的队列的最大长度。",
        "default" : {
          "oneliner" : true,
          "hocon" : "1024"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "10s",
        "name" : "send_timeout",
        "desc" : "Socket发送超时时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"10s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "inet6",
        "desc" : "启用IPv6， 如果机器不支持IPv6，请关闭此选项，否则会导致 Dashboard 无法使用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "ipv6_v6only",
        "desc" : "当开启 inet6 功能的同时禁用 IPv4-to-IPv6 映射。该配置仅在 inet6 功能开启时有效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "proxy_header",
        "desc" : "开启对  `HAProxy` 的支持，注意：一旦开启了这个功能，就无法再处理普通的 HTTP 请求了。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "cacertfile",
        "desc" : "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "certfile",
        "desc" : "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "keyfile",
        "desc" : "PEM格式的私钥文件。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "verify_peer",
            "verify_none"
          ],
          "kind" : "enum"
        },
        "raw_default" : "verify_none",
        "name" : "verify",
        "desc" : "启用或禁用对等验证。",
        "default" : {
          "oneliner" : true,
          "hocon" : "verify_none"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "reuse_sessions",
        "desc" : "启用 TLS 会话重用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 10,
        "name" : "depth",
        "desc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "atom()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          "tlsv1.3",
          "tlsv1.2",
          "tlsv1.1",
          "tlsv1"
        ],
        "name" : "versions",
        "importance" : "high",
        "desc" : "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 `tlsv1.3` 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 `[\"tlsv1.2\",\"tlsv1.1\"]`。",
        "default" : {
          "oneliner" : true,
          "hocon" : "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "string()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          
        ],
        "name" : "ciphers",
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n`\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"`或\n`[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]`。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS `版本`兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 `versions` 仅配置为 `tlsv1.3`。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 `tlsv1.3`。应在`ssl.versions`中禁用。\n\n<br/>\nPSK 密码套件：\n`\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"`",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "secure_renegotiate",
        "desc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "5s",
        "name" : "hibernate_after",
        "desc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "dhfile",
        "desc" : "如果协商使用Diffie-Hellman密钥交换的密码套件，则服务器将使用包含PEM编码的Diffie-Hellman参数的文件的路径。如果未指定，则使用默认参数。<br/>\n注意：TLS 1.3不支持`dhfile`选项。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "honor_cipher_order",
        "desc" : "一个重要的安全设置，它强制根据服务器指定的顺序而不是客户机指定的顺序设置密码，从而强制服务器管理员执行（通常配置得更正确）安全顺序。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "client_renegotiation",
        "desc" : "在支持客户机发起的重新协商的协议中，这种操作的资源成本对于服务器来说高于客户机。\n这可能会成为拒绝服务攻击的载体。\nSSL 应用程序已经采取措施来反击此类尝试，但通过将此选项设置为 false，可以严格禁用客户端发起的重新协商。\n默认值为 true。请注意，由于基础密码套件可以加密的消息数量有限，禁用重新协商可能会导致长期连接变得不可用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "handshake_timeout",
        "desc" : "握手完成所允许的最长时间",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Dashboard 监听器(HTTPS)配置。"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "dashboard.listeners"
    ],
    "full_name" : "dashboard:listeners",
    "fields" : [
      {
        "type" : {
          "name" : "dashboard:http",
          "kind" : "struct"
        },
        "name" : "http",
        "desc" : "TCP listeners",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "dashboard:https",
          "kind" : "struct"
        },
        "name" : "https",
        "desc" : "SSL listeners",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Dashboard 监听器配置。"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "exhook"
    ],
    "full_name" : "exhook",
    "fields" : [
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "exhook:server",
            "kind" : "struct"
          }
        },
        "raw_default" : [
          
        ],
        "name" : "servers",
        "desc" : "ExHook 服务器列表",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "External hook (exhook) configuration."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "exhook.servers.$INDEX"
    ],
    "full_name" : "exhook:server",
    "fields" : [
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "name",
        "examples" : [
          "default"
        ],
        "desc" : "ExHook 服务器名称",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "开启这个 Exhook 服务器",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "url",
        "examples" : [
          "http://127.0.0.1:9000"
        ],
        "desc" : "gRPC 服务器地址",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "5s",
        "name" : "request_timeout",
        "desc" : "gRPC 服务器请求超时时间",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "deny",
            "ignore"
          ],
          "kind" : "enum"
        },
        "raw_default" : "deny",
        "name" : "failed_action",
        "desc" : "当 gRPC 请求失败后的操作",
        "default" : {
          "oneliner" : true,
          "hocon" : "deny"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "exhook:ssl_conf",
          "kind" : "struct"
        },
        "name" : "ssl",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "exhook:socket_options",
          "kind" : "struct"
        },
        "raw_default" : {
          "nodelay" : true,
          "keepalive" : true
        },
        "name" : "socket_options",
        "default" : {
          "oneliner" : true,
          "hocon" : "{keepalive = true, nodelay = true}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "false",
              "kind" : "singleton"
            },
            {
              "name" : "emqx_schema:duration()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "60s",
        "name" : "auto_reconnect",
        "desc" : "自动重连到 gRPC 服务器的设置。\n当 gRPC 服务器不可用时，Exhook 将会按照这里设置的间隔时间进行重连，并重新初始化注册的钩子",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"60s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "gRPC 客户端进程池大小",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "gRPC server configuration."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "exhook.servers.$INDEX.socket_options"
    ],
    "full_name" : "exhook:socket_options",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "keepalive",
        "desc" : "当没有其他数据交换时，是否向连接的对端套接字定期的发送探测包。如果另一端没有响应，则认为连接断开，并向控制进程发送错误消息",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "nodelay",
        "desc" : "如果为 true，则为套接字设置 TCP_NODELAY 选项，这意味着会立即发送数据包",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "name" : "recbuf",
        "examples" : [
          "64KB"
        ],
        "desc" : "套接字的最小接收缓冲区大小",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "name" : "sndbuf",
        "examples" : [
          "16KB"
        ],
        "desc" : "套接字的最小发送缓冲区大小",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "连接套接字设置"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "exhook.servers.$INDEX.ssl"
    ],
    "full_name" : "exhook:ssl_conf",
    "fields" : [
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "cacertfile",
        "desc" : "受信任的PEM格式 CA  证书捆绑文件<br/>\n此文件中的证书用于验证TLS对等方的证书。\n如果要信任新 CA，请将新证书附加到文件中。\n无需重启EMQX即可加载更新的文件，因为系统会定期检查文件是否已更新（并重新加载）<br/>\n注意：从文件中失效（删除）证书不会影响已建立的连接。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "certfile",
        "desc" : "PEM格式证书链文件<br/>\n此文件中的证书应与证书颁发链的顺序相反。也就是说，主机的证书应该放在文件的开头，\n然后是直接颁发者 CA 证书，依此类推，一直到根 CA 证书。\n根 CA 证书是可选的，如果想要添加，应加到文件到最末端。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "keyfile",
        "desc" : "PEM格式的私钥文件。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "verify_peer",
            "verify_none"
          ],
          "kind" : "enum"
        },
        "raw_default" : "verify_none",
        "name" : "verify",
        "desc" : "启用或禁用对等验证。",
        "default" : {
          "oneliner" : true,
          "hocon" : "verify_none"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "reuse_sessions",
        "desc" : "启用 TLS 会话重用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 10,
        "name" : "depth",
        "desc" : "在有效的证书路径中，可以跟随对等证书的非自颁发中间证书的最大数量。\n因此，如果深度为0，则对等方必须由受信任的根 CA 直接签名；<br/>\n如果是1，路径可以是 PEER、中间 CA、ROOT-CA；<br/>\n如果是2，则路径可以是PEER、中间 CA1、中间 CA2、ROOT-CA。",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "password",
        "examples" : [
          ""
        ],
        "desc" : "包含用户密码的字符串。仅在私钥文件受密码保护时使用。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "atom()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          "tlsv1.3",
          "tlsv1.2",
          "tlsv1.1",
          "tlsv1"
        ],
        "name" : "versions",
        "importance" : "high",
        "desc" : "支持所有TLS/DTLS版本<br/>\n注：PSK 的 Ciphers 无法在 `tlsv1.3` 中使用，如果打算使用 PSK 密码套件，请确保这里配置为 `[\"tlsv1.2\",\"tlsv1.1\"]`。",
        "default" : {
          "oneliner" : true,
          "hocon" : "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "string()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          
        ],
        "name" : "ciphers",
        "desc" : "此配置保存由逗号分隔的 TLS 密码套件名称，或作为字符串数组。例如\n`\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"`或\n`[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]`。\n<br/>\n密码（及其顺序）定义了客户端和服务器通过网络连接加密信息的方式。\n选择一个好的密码套件对于应用程序的数据安全性、机密性和性能至关重要。\n\n名称应为 OpenSSL 字符串格式（而不是 RFC 格式）。\nEMQX 配置文档提供的所有默认值和示例都是 OpenSSL 格式<br/>\n注意：某些密码套件仅与特定的 TLS `版本`兼容（'tlsv1.1'、'tlsv1.2'或'tlsv1.3'）。\n不兼容的密码套件将被自动删除。\n\n例如，如果只有 `versions` 仅配置为 `tlsv1.3`。为其他版本配置密码套件将无效。\n\n<br/>\n注：PSK 的 Ciphers 不支持 tlsv1.3<br/>\n如果打算使用PSK密码套件 `tlsv1.3`。应在`ssl.versions`中禁用。\n\n<br/>\nPSK 密码套件：\n`\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"`",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "secure_renegotiate",
        "desc" : "SSL 参数重新协商是一种允许客户端和服务器动态重新协商 SSL 连接参数的功能。\nRFC 5746 定义了一种更安全的方法。通过启用安全的重新协商，您就失去了对不安全的重新协商的支持，从而容易受到 MitM 攻击。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "5s",
        "name" : "hibernate_after",
        "desc" : "在闲置一定时间后休眠 SSL 进程，减少其内存占用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "enable",
        "desc" : "启用 TLS。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "disable",
              "kind" : "singleton"
            },
            {
              "name" : "string()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "name" : "server_name_indication",
        "examples" : [
          "disable"
        ],
        "desc" : "指定要在 TLS 服务器名称指示扩展中使用的主机名。<br/>\n例如，当连接到 \"server.example.net\" 时，接受连接并执行 TLS 握手的真正服务器可能与 TLS 客户端最初连接到的主机不同，\n例如，当连接到 IP 地址时，或者当主机具有多个可解析的 DNS 记录时<br/>\n如果未指定，它将默认为使用的主机名字符串\n建立连接，除非使用 IP 地址<br/>\n然后，主机名也用于对等机的主机名验证证书<br/>\n特殊值 `disable` 阻止发送服务器名称指示扩展，并禁用主机名验证检查。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "SSL client configuration."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "listeners.quic.$name.limiter.bytes",
      "listeners.quic.$name.limiter.messages",
      "listeners.ssl.$name.limiter.bytes",
      "listeners.ssl.$name.limiter.messages",
      "listeners.tcp.$name.limiter.bytes",
      "listeners.tcp.$name.limiter.messages",
      "listeners.ws.$name.limiter.bytes",
      "listeners.ws.$name.limiter.messages",
      "listeners.wss.$name.limiter.bytes",
      "listeners.wss.$name.limiter.messages"
    ],
    "full_name" : "limiter:bucket_opts",
    "fields" : [
      {
        "type" : {
          "name" : "emqx_limiter_schema:rate()",
          "kind" : "primitive"
        },
        "raw_default" : "infinity",
        "name" : "rate",
        "desc" : "桶的令牌生成速率",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"infinity\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for the bucket."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "listeners.quic.$name.limiter.client.bytes",
      "listeners.quic.$name.limiter.client.messages",
      "listeners.ssl.$name.limiter.client.bytes",
      "listeners.ssl.$name.limiter.client.messages",
      "listeners.tcp.$name.limiter.client.bytes",
      "listeners.tcp.$name.limiter.client.messages",
      "listeners.ws.$name.limiter.client.bytes",
      "listeners.ws.$name.limiter.client.messages",
      "listeners.wss.$name.limiter.client.bytes",
      "listeners.wss.$name.limiter.client.messages"
    ],
    "full_name" : "limiter:client_opts",
    "fields" : [
      {
        "type" : {
          "name" : "emqx_limiter_schema:rate()",
          "kind" : "primitive"
        },
        "raw_default" : "infinity",
        "name" : "rate",
        "desc" : "桶的令牌生成速率",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"infinity\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for the client in bucket level."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "listeners.quic.$name.limiter.client",
      "listeners.ssl.$name.limiter.client",
      "listeners.tcp.$name.limiter.client",
      "listeners.ws.$name.limiter.client",
      "listeners.wss.$name.limiter.client"
    ],
    "full_name" : "limiter:listener_client_fields",
    "fields" : [
      {
        "type" : {
          "name" : "limiter:client_opts",
          "kind" : "struct"
        },
        "name" : "bytes",
        "importance" : "high",
        "desc" : "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
        "aliases" : [
          "bytes_in"
        ]
      },
      {
        "type" : {
          "name" : "limiter:client_opts",
          "kind" : "struct"
        },
        "name" : "messages",
        "importance" : "high",
        "desc" : "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
        "aliases" : [
          "message_in"
        ]
      }
    ],
    "desc" : "Fields of the client level of the listener."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "listeners.quic.$name.limiter",
      "listeners.ssl.$name.limiter",
      "listeners.tcp.$name.limiter",
      "listeners.ws.$name.limiter",
      "listeners.wss.$name.limiter"
    ],
    "full_name" : "limiter:listener_fields",
    "fields" : [
      {
        "type" : {
          "name" : "limiter:bucket_opts",
          "kind" : "struct"
        },
        "name" : "bytes",
        "importance" : "high",
        "desc" : "流入字节率控制器。\n这个是用来控制当前节点上的数据流入的字节率，每条消息将会消耗和其二进制大小等量的令牌，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
        "aliases" : [
          "bytes_in"
        ]
      },
      {
        "type" : {
          "name" : "limiter:bucket_opts",
          "kind" : "struct"
        },
        "name" : "messages",
        "importance" : "high",
        "desc" : "流入速率控制器。\n这个用来控制当前节点上的消息流入速率，当达到最大速率后，会话将会被限速甚至被强制挂起一小段时间",
        "aliases" : [
          "message_in"
        ]
      },
      {
        "type" : {
          "name" : "limiter:listener_client_fields",
          "kind" : "struct"
        },
        "name" : "client",
        "desc" : "对桶的每个使用者的速率控制设置",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Fields of the listener."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "delayed"
    ],
    "full_name" : "modules:delayed",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "是否开启该功能",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 0,
        "name" : "max_delayed_messages",
        "desc" : "延迟消息的数量上限(0 代表无限)",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for the delayed module."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "telemetry"
    ],
    "full_name" : "modules:telemetry",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "Enable telemetry.",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for the telemetry module."
  },
  {
    "tags" : [
      "Rule Engine"
    ],
    "paths" : [
      "rule_engine.rules.$id.actions.$INDEX"
    ],
    "full_name" : "rule_engine:builtin_action_console",
    "fields" : [
      {
        "type" : {
          "name" : "console",
          "kind" : "singleton"
        },
        "name" : "function",
        "desc" : "将输出打印到控制台",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "配置打印到控制台"
  },
  {
    "tags" : [
      "Rule Engine"
    ],
    "paths" : [
      "rule_engine.rules.$id.actions.$INDEX"
    ],
    "full_name" : "rule_engine:builtin_action_republish",
    "fields" : [
      {
        "type" : {
          "name" : "republish",
          "kind" : "singleton"
        },
        "name" : "function",
        "desc" : "将消息重新发布为新的 MQTT 消息",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "rule_engine:republish_args",
          "kind" : "struct"
        },
        "raw_default" : {
          
        },
        "name" : "args",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "配置重新发布。"
  },
  {
    "tags" : [
      "Rule Engine"
    ],
    "paths" : [
      "rule_engine.rules.$id.actions.$INDEX.args"
    ],
    "full_name" : "rule_engine:republish_args",
    "fields" : [
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "topic",
        "examples" : [
          "a/1"
        ],
        "desc" : "重新发布消息的目标主题。\n允许使用带有变量的模板，请参阅“republish_args”的描述。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "qos()",
              "kind" : "primitive"
            },
            {
              "name" : "binary()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "${qos}",
        "name" : "qos",
        "examples" : [
          "${qos}"
        ],
        "desc" : "要重新发布的消息的 qos。允许使用带有变量的模板，请参阅“republish_args”的描述。\n默认为 ${qos}。 如果从规则的选择结果中没有找到变量 ${qos}，则使用 0。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${qos}\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "boolean()",
              "kind" : "primitive"
            },
            {
              "name" : "binary()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "${retain}",
        "name" : "retain",
        "examples" : [
          "${retain}"
        ],
        "desc" : "要重新发布的消息的“保留”标志。允许使用带有变量的模板，请参阅“republish_args”的描述。\n默认为 ${retain}。 如果从所选结果中未找到变量 ${retain}，则使用 false。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${retain}\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "${payload}",
        "name" : "payload",
        "examples" : [
          "${payload}"
        ],
        "desc" : "要重新发布的消息的有效负载。允许使用带有变量的模板，请参阅“republish_args”的描述。\n默认为 ${payload}。 如果从所选结果中未找到变量 ${payload}，则使用字符串 \"undefined\"。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${payload}\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "${user_properties}",
        "name" : "user_properties",
        "examples" : [
          "${pub_props.'User-Property'}"
        ],
        "desc" : "指定使用哪个变量来填充 MQTT 消息的 User-Property 列表。这个变量的值必须是一个 map 类型。\n可以设置成 `${pub_props.'User-Property'}` 或者\n使用 `SELECT *,pub_props.'User-Property' as user_properties` 来把源 MQTT 消息\n的 User-Property 列表用于填充。\n也可以使用 `map_put` 函数来添加新的 User-Property，\n`map_put('my-prop-name', 'my-prop-value', user_properties) as user_properties`\n注意：MQTT 协议允许一个消息中出现多次同一个 property 名，但是 EMQX 的规则引擎不允许。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${user_properties}\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "内置 'republish' 动作的参数。\n可以在参数中使用变量。\n变量是规则中选择的字段。 例如规则 SQL 定义如下：\n`\n    SELECT clientid, qos, payload FROM \"t/1\"\n`\n然后有 3 个变量可用：`clientid`、`qos` 和 `payload`。 如果我们将参数设置为：\n`\n    {\n        topic = \"t/${clientid}\"\n        qos = \"${qos}\"\n        payload = \"msg: ${payload}\"\n    }\n`\n当收到一条消息 payload = `hello`, qos = 1, clientid = `Steve` 时，将重新发布一条新的 MQTT 消息到主题 `t/Steve`\n消息内容为 payload = `msg: hello`, and `qos = 1"
  },
  {
    "tags" : [
      "Rule Engine"
    ],
    "paths" : [
      "rule_engine"
    ],
    "full_name" : "rule_engine",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "ignore_sys_message",
        "desc" : "当设置为“true”（默认）时，规则引擎将忽略发布到 $SYS 主题的消息。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "10s",
        "name" : "jq_function_default_timeout",
        "desc" : "规则引擎内建函数 `jq` 默认时间限制",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"10s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "values" : {
            "name" : "rule_engine:rules",
            "kind" : "struct"
          },
          "name" : "id",
          "kind" : "map"
        },
        "raw_default" : {
          
        },
        "name" : "rules",
        "desc" : "规则",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "配置 EMQX 规则引擎。"
  },
  {
    "tags" : [
      "Rule Engine"
    ],
    "paths" : [
      "rule_engine.rules.$id"
    ],
    "full_name" : "rule_engine:rules",
    "fields" : [
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "",
        "name" : "name",
        "examples" : [
          [
            102,
            111,
            111
          ]
        ],
        "desc" : "规则名字",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "sql",
        "examples" : [
          [
            83,
            69,
            76,
            69,
            67,
            84,
            32,
            42,
            32,
            70,
            82,
            79,
            77,
            32,
            34,
            116,
            101,
            115,
            116,
            47,
            116,
            111,
            112,
            105,
            99,
            34,
            32,
            87,
            72,
            69,
            82,
            69,
            32,
            112,
            97,
            121,
            108,
            111,
            97,
            100,
            46,
            120,
            32,
            61,
            32,
            49
          ]
        ],
        "desc" : "用于处理消息的 SQL 。\n示例：`SELECT * FROM \"test/topic\" WHERE payload.x = 1`",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "members" : [
              {
                "name" : "binary()",
                "kind" : "primitive"
              },
              {
                "name" : "rule_engine:builtin_action_republish",
                "kind" : "struct"
              },
              {
                "name" : "rule_engine:builtin_action_console",
                "kind" : "struct"
              },
              {
                "name" : "rule_engine:user_provided_function",
                "kind" : "struct"
              }
            ],
            "kind" : "union"
          }
        },
        "raw_default" : [
          
        ],
        "name" : "actions",
        "examples" : [
          [
            "webhook:my_webhook",
            {
              "function" : "republish",
              "args" : {
                "topic" : "t/1",
                "payload" : "${payload}"
              }
            },
            {
              "function" : "console"
            }
          ]
        ],
        "desc" : "规则的动作列表。\n动作可以是指向 EMQX bridge 的引用，也可以是一个指向函数的对象。\n我们支持一些内置函数，如“republish”和“console”，我们还支持用户提供的函数，它的格式为：“{module}:{function}”。\n列表中的动作按顺序执行。这意味着如果其中一个动作执行缓慢，则以下所有动作都不会被执行直到它返回。\n如果其中一个动作崩溃，在它之后的所有动作仍然会被按照原始顺序执行。\n如果运行动作时出现任何错误，则会出现错误消息，并且相应的计数器会增加。",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "启用或禁用规则引擎",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "",
        "name" : "description",
        "examples" : [
          [
            83,
            111,
            109,
            101,
            32,
            100,
            101,
            115,
            99,
            114,
            105,
            112,
            116,
            105,
            111,
            110
          ]
        ],
        "desc" : "规则的描述",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "name" : "metadata",
        "desc" : "规则的元数据，不要手动修改",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "配置规则"
  },
  {
    "tags" : [
      "Rule Engine"
    ],
    "paths" : [
      "rule_engine.rules.$id.actions.$INDEX"
    ],
    "full_name" : "rule_engine:user_provided_function",
    "fields" : [
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "function",
        "examples" : [
          [
            109,
            111,
            100,
            117,
            108,
            101,
            58,
            102,
            117,
            110,
            99,
            116,
            105,
            111,
            110
          ]
        ],
        "desc" : "用户提供的函数。 格式应为：'{module}:{function}'。\n其中 {module} 是 Erlang 回调模块， {function} 是 Erlang 函数。\n要编写自己的函数，请检查源文件：`apps/emqx_rule_engine/src/emqx_rule_actions.erl` 中的示例函数 `console` 和`republish` 。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "raw_default" : {
          
        },
        "name" : "args",
        "desc" : "用户提供的参数将作为函数 module:function/3 的第三个参数，\n请检查源文件：`apps/emqx_rule_engine/src/emqx_rule_actions.erl` 中的示例函数 `console` 和`republish` 。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "配置用户函数"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "cluster.dns"
    ],
    "full_name" : "cluster_dns",
    "fields" : [
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "localhost",
        "name" : "name",
        "desc" : "指定 DNS A 记录的名字。emqx 会通过访问这个 DNS A 记录来获取 IP 地址列表。\n当`cluster.discovery_strategy` 为 `dns` 时有效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"localhost\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "a",
            "srv"
          ],
          "kind" : "enum"
        },
        "raw_default" : "a",
        "name" : "record_type",
        "desc" : "DNS 记录类型。",
        "default" : {
          "oneliner" : true,
          "hocon" : "a"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "DNS SRV 记录服务发现。"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "cluster.etcd"
    ],
    "full_name" : "cluster_etcd",
    "fields" : [
      {
        "type" : {
          "name" : "emqx_schema:comma_separated_list()",
          "kind" : "primitive"
        },
        "name" : "server",
        "desc" : "指定 etcd 服务的地址。如有多个服务使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "emqxcl",
        "name" : "prefix",
        "desc" : "指定 etcd 路径的前缀。每个节点在 etcd 中都会创建一个路径:\nv2/keys/<prefix>/<cluster.name>/<node.name> <br/>\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"emqxcl\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "1m",
        "name" : "node_ttl",
        "desc" : "指定 etcd 中节点信息的过期时间。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1m\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "name" : "ssl_options",
        "desc" : "当使用 TLS 连接 etcd 时的配置选项。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 'etcd' 服务的服务发现。"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "cluster.k8s"
    ],
    "full_name" : "cluster_k8s",
    "fields" : [
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "http://10.110.111.204:8080",
        "name" : "apiserver",
        "desc" : "指定 Kubernetes API Server。如有多个 Server 使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"http://10.110.111.204:8080\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "emqx",
        "name" : "service_name",
        "desc" : "指定 Kubernetes 中 EMQX 的服务名。\n当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"emqx\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "ip",
            "dns",
            "hostname"
          ],
          "kind" : "enum"
        },
        "raw_default" : "ip",
        "name" : "address_type",
        "desc" : "当使用 k8s 方式集群时，address_type 用来从 Kubernetes 接口的应答里获取什么形式的 Host 列表。\n指定 `cluster.k8s.address_type` 为 `ip`，则将从 Kubernetes 接口中获取集群中其他节点\n的IP地址。",
        "default" : {
          "oneliner" : true,
          "hocon" : "ip"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "default",
        "name" : "namespace",
        "desc" : "当使用 k8s 方式并且 cluster.k8s.address_type 指定为 dns 类型时，\n可设置 emqx 节点名的命名空间。与 cluster.k8s.suffix 一起使用用以拼接得到节点名列表。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"default\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "pod.local",
        "name" : "suffix",
        "desc" : "当使用 k8s 方式并且 cluster.k8s.address_type 指定为 dns 类型时，可设置 emqx 节点名的后缀。\n与 cluster.k8s.namespace 一起使用用以拼接得到节点名列表。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"pod.local\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Kubernetes 服务发现。"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "cluster.mcast"
    ],
    "full_name" : "cluster_mcast",
    "fields" : [
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "239.192.0.1",
        "name" : "addr",
        "desc" : "指定多播 IPv4 地址。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"239.192.0.1\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "integer()",
            "kind" : "primitive"
          }
        },
        "raw_default" : [
          4369,
          4370
        ],
        "name" : "ports",
        "desc" : "指定多播端口。如有多个端口使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"ᄑᄒ\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "0.0.0.0",
        "name" : "iface",
        "desc" : "指定节点发现服务需要绑定到本地 IP 地址。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"0.0.0.0\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "0..255",
          "kind" : "primitive"
        },
        "raw_default" : 255,
        "name" : "ttl",
        "desc" : "指定多播的 Time-To-Live 值。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "255"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "loop",
        "desc" : "设置多播的报文是否投递到本地回环地址。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "raw_default" : "16KB",
        "name" : "sndbuf",
        "desc" : "外发数据报的内核级缓冲区的大小。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"16KB\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "raw_default" : "16KB",
        "name" : "recbuf",
        "desc" : "接收数据报的内核级缓冲区的大小。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"16KB\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "raw_default" : "32KB",
        "name" : "buffer",
        "desc" : "用户级缓冲区的大小。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"32KB\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "UDP 组播服务发现。"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "cluster.static"
    ],
    "full_name" : "cluster_static",
    "fields" : [
      {
        "type" : {
          "members" : [
            {
              "name" : "emqx_schema:comma_separated_atoms()",
              "kind" : "primitive"
            },
            {
              "kind" : "array",
              "elements" : {
                "name" : "atom()",
                "kind" : "primitive"
              }
            }
          ],
          "kind" : "union"
        },
        "raw_default" : [
          
        ],
        "name" : "seeds",
        "desc" : "集群中的EMQX节点名称列表，\n指定固定的节点列表，多个节点间使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 static 时，此配置项才有效。\n适合于节点数量较少且固定的集群。",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "静态节点服务发现。新节点通过连接一个节点来加入集群。"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "authorization"
    ],
    "full_name" : "authorization",
    "fields" : [
      {
        "type" : {
          "symbols" : [
            "allow",
            "deny"
          ],
          "kind" : "enum"
        },
        "raw_default" : "allow",
        "name" : "no_match",
        "desc" : "如果用户或客户端不匹配ACL规则，或者从可配置授权源(比如内置数据库、HTTP API 或 PostgreSQL 等。)内未找\n到此类用户或客户端时，模式的认访问控制操作。\n在“授权”中查找更多详细信息。",
        "default" : {
          "oneliner" : true,
          "hocon" : "allow"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "ignore",
            "disconnect"
          ],
          "kind" : "enum"
        },
        "raw_default" : "ignore",
        "name" : "deny_action",
        "desc" : "授权检查拒绝操作时的操作。",
        "default" : {
          "oneliner" : true,
          "hocon" : "ignore"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:authz_cache",
          "kind" : "struct"
        },
        "name" : "cache",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "members" : [
              {
                "name" : "authz:file",
                "kind" : "struct"
              },
              {
                "name" : "authz:http_get",
                "kind" : "struct"
              },
              {
                "name" : "authz:http_post",
                "kind" : "struct"
              },
              {
                "name" : "authz:builtin_db",
                "kind" : "struct"
              },
              {
                "name" : "authz:mongo_single",
                "kind" : "struct"
              },
              {
                "name" : "authz:mongo_rs",
                "kind" : "struct"
              },
              {
                "name" : "authz:mongo_sharded",
                "kind" : "struct"
              },
              {
                "name" : "authz:mysql",
                "kind" : "struct"
              },
              {
                "name" : "authz:postgresql",
                "kind" : "struct"
              },
              {
                "name" : "authz:redis_single",
                "kind" : "struct"
              },
              {
                "name" : "authz:redis_sentinel",
                "kind" : "struct"
              },
              {
                "name" : "authz:redis_cluster",
                "kind" : "struct"
              }
            ],
            "kind" : "union"
          }
        },
        "raw_default" : [
          
        ],
        "name" : "sources",
        "importance" : "low",
        "extra" : {
          "doc_lift" : true
        },
        "desc" : "授权数据源。<br/>\n授权（ACL）数据源的列表。\n它被设计为一个数组，而不是一个散列映射，\n所以可以作为链式访问控制。<br/>\n\n当授权一个 'publish' 或 'subscribe' 行为时，\n该配置列表中的所有数据源将按顺序进行检查。\n如果在某个客户端未找到时(使用 ClientID 或 Username)。\n将会移动到下一个数据源。直至得到 'allow' 或 'deny' 的结果。<br/>\n\n如果在任何数据源中都未找到对应的客户端信息。\n配置的默认行为 ('authorization.no_match') 将生效。<br/>\n\n注意：\n数据源使用 'type' 进行标识。\n使用同一类型的数据源多于一次不被允许。",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "授权相关"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "cluster"
    ],
    "full_name" : "cluster",
    "fields" : [
      {
        "type" : {
          "name" : "atom()",
          "kind" : "primitive"
        },
        "raw_default" : "emqxcl",
        "name" : "name",
        "desc" : "EMQX集群名称。每个集群都有一个唯一的名称。服务发现时会用于做路径的一部分。",
        "default" : {
          "oneliner" : true,
          "hocon" : "emqxcl"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "manual",
            "static",
            "mcast",
            "dns",
            "etcd",
            "k8s"
          ],
          "kind" : "enum"
        },
        "raw_default" : "manual",
        "name" : "discovery_strategy",
        "desc" : "集群节点发现方式。可选值为:\n- manual: 使用 `emqx ctl cluster` 命令管理集群。<br/>\n- static: 配置静态节点。配置几个固定的节点，新节点通过连接固定节点中的某一个来加入集群。<br/>\n- dns: 使用 DNS A 记录的方式发现节点。<br/>\n- etcd: 使用 etcd 发现节点。<br/>\n- k8s: 使用 Kubernetes API 发现节点。",
        "default" : {
          "oneliner" : true,
          "hocon" : "manual"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "emqx_schema:comma_separated_atoms()",
              "kind" : "primitive"
            },
            {
              "kind" : "array",
              "elements" : {
                "name" : "atom()",
                "kind" : "primitive"
              }
            }
          ],
          "kind" : "union"
        },
        "raw_default" : [
          
        ],
        "name" : "core_nodes",
        "desc" : "当前节点连接的核心节点列表。<br/>\n注意：该参数仅在设置`backend`时生效到 `rlog`\n并且设置`role`为`replicant`时生效。<br/>\n该值需要在手动或静态集群发现机制下设置。<br/>\n如果使用了自动集群发现机制（如`etcd`），则不需要设置该值。",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "5m",
        "name" : "autoclean",
        "desc" : "指定多久之后从集群中删除离线节点。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5m\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "autoheal",
        "desc" : "集群脑裂自动恢复机制开关。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "inet_tcp",
            "inet6_tcp",
            "inet_tls"
          ],
          "kind" : "enum"
        },
        "raw_default" : "inet_tcp",
        "name" : "proto_dist",
        "desc" : "分布式 Erlang 集群协议类型。可选值为:<br/>\n- inet_tcp: 使用 IPv4 <br/>\n- inet_tls: 使用 TLS，需要配合 `etc/ssl_dist.conf` 一起使用。",
        "default" : {
          "oneliner" : true,
          "hocon" : "inet_tcp"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "cluster_static",
          "kind" : "struct"
        },
        "name" : "static",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "cluster_mcast",
          "kind" : "struct"
        },
        "name" : "mcast",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "cluster_dns",
          "kind" : "struct"
        },
        "name" : "dns",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "cluster_etcd",
          "kind" : "struct"
        },
        "name" : "etcd",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "cluster_k8s",
          "kind" : "struct"
        },
        "name" : "k8s",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "EMQX 节点可以组成一个集群，以提高总容量。<br/> 这里指定了节点之间如何连接。"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "log.console_handler"
    ],
    "full_name" : "console_handler",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "enable",
        "desc" : "启用此日志处理进程。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_conf_schema:log_level()",
          "kind" : "primitive"
        },
        "raw_default" : "warning",
        "name" : "level",
        "desc" : "当前日志处理进程的日志级别。\n默认为 warning 级别。",
        "default" : {
          "oneliner" : true,
          "hocon" : "warning"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "system",
        "name" : "time_offset",
        "desc" : "日志中的时间戳使用的时间偏移量。\n可选值为：\n  - `system`: 本地系统使用的时区偏移量\n  - `utc`: 0 时区的偏移量\n  - `+-[hh]:[mm]`: 自定义偏移量，比如 \"-02:00\" 或者 \"+00:00\"\n默认值为本地系统的时区偏移量：`system`。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"system\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "unlimited",
              "kind" : "singleton"
            },
            {
              "name" : "100..inf",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "unlimited",
        "name" : "chars_limit",
        "desc" : "设置单个日志消息的最大长度。 如果超过此长度，则日志消息将被截断。最小可设置的长度为100。\n注意：如果日志格式为 JSON，限制字符长度可能会导致截断不完整的 JSON 数据。",
        "default" : {
          "oneliner" : true,
          "hocon" : "unlimited"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "text",
            "json"
          ],
          "kind" : "enum"
        },
        "raw_default" : "text",
        "name" : "formatter",
        "desc" : "选择日志格式类型。 `text` 用于纯文本，`json` 用于结构化日志记录。",
        "default" : {
          "oneliner" : true,
          "hocon" : "text"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "single_line",
        "desc" : "如果设置为 true，则单行打印日志。 否则，日志消息可能跨越多行。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "non_neg_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 100,
        "name" : "sync_mode_qlen",
        "desc" : "只要缓冲的日志事件的数量低于这个值，所有的日志事件都会被异步处理。\n这意味着，日志落地速度不会影响正常的业务进程，因为它们不需要等待日志处理进程的响应。\n如果消息队列的增长超过了这个值，处理程序开始同步处理日志事件。也就是说，发送事件的客户进程必须等待响应。\n当处理程序将消息队列减少到低于sync_mode_qlen阈值的水平时，异步操作就会恢复。\n默认为100条信息，当等待的日志事件大于100条时，就开始同步处理日志。",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 3000,
        "name" : "drop_mode_qlen",
        "desc" : "当缓冲的日志事件数大于此值时，新的日志事件将被丢弃。起到过载保护的功能。\n为了使过载保护算法正常工作必须要：` sync_mode_qlen =< drop_mode_qlen =< flush_qlen ` 且 drop_mode_qlen > 1\n要禁用某些模式，请执行以下操作。\n- 如果sync_mode_qlen被设置为0，所有的日志事件都被同步处理。也就是说，异步日志被禁用。\n- 如果sync_mode_qlen被设置为与drop_mode_qlen相同的值，同步模式被禁用。也就是说，处理程序总是以异步模式运行，除非调用drop或flushing。\n- 如果drop_mode_qlen被设置为与flush_qlen相同的值，则drop模式被禁用，永远不会发生。",
        "default" : {
          "oneliner" : true,
          "hocon" : "3000"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8000,
        "name" : "flush_qlen",
        "desc" : "如果缓冲日志事件的数量增长大于此阈值，则会发生冲刷（删除）操作。 日志处理进程会丢弃缓冲的日志消息。\n来缓解自身不会由于内存瀑涨而影响其它业务进程。日志内容会提醒有多少事件被删除。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8000"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "log_overload_kill",
          "kind" : "struct"
        },
        "name" : "overload_kill",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "log_burst_limit",
          "kind" : "struct"
        },
        "name" : "burst_limit",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "error",
            "progress"
          ],
          "kind" : "enum"
        },
        "raw_default" : "error",
        "name" : "supervisor_reports",
        "desc" : "Supervisor 报告的类型。默认为 error 类型。<br/>\n  - `error`：仅记录 Erlang 进程中的错误。\n  - `progress`：除了 error 信息外，还需要记录进程启动的详细信息。",
        "default" : {
          "oneliner" : true,
          "hocon" : "error"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "unlimited",
              "kind" : "singleton"
            },
            {
              "name" : "non_neg_integer()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : 100,
        "name" : "max_depth",
        "desc" : "Erlang 内部格式日志格式化和 Erlang 进程消息队列检查的最大深度。",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "日志处理进程将日志事件打印到 EMQX 控制台。"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "log"
    ],
    "full_name" : "log",
    "fields" : [
      {
        "type" : {
          "name" : "console_handler",
          "kind" : "struct"
        },
        "name" : "console_handler",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "values" : {
            "name" : "log_file_handler",
            "kind" : "struct"
          },
          "name" : "name",
          "kind" : "map"
        },
        "name" : "file_handlers",
        "desc" : "输出到文件的日志处理进程列表",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "EMQX 日志记录支持日志事件的多个接收器。 每个接收器由一个_log handler_表示，可以独立配置。"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "log.console_handler.burst_limit",
      "log.file_handlers.$name.burst_limit"
    ],
    "full_name" : "log_burst_limit",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "启用日志限流保护机制。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 10000,
        "name" : "max_count",
        "desc" : "在 `window_time` 间隔内处理的最大日志事件数。 达到限制后，将丢弃连续事件，直到 `window_time` 结束。",
        "default" : {
          "oneliner" : true,
          "hocon" : "10000"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "1s",
        "name" : "window_time",
        "desc" : "参考 `max_count`。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1s\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "短时间内产生的大量日志事件可能会导致问题，例如：\n  - 日志文件变得非常大\n  - 日志文件轮换过快，有用信息被覆盖\n  - 对系统的整体性能影响\n\n日志突发限制功能可以暂时禁用日志记录以避免这些问题。"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "log.file_handlers.$name"
    ],
    "full_name" : "log_file_handler",
    "fields" : [
      {
        "type" : {
          "name" : "emqx_conf_schema:file()",
          "kind" : "primitive"
        },
        "name" : "file",
        "desc" : "日志文件路径及名字。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "log_rotation",
          "kind" : "struct"
        },
        "name" : "rotation",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "infinity",
              "kind" : "singleton"
            },
            {
              "name" : "emqx_schema:bytesize()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "50MB",
        "name" : "max_size",
        "desc" : "此参数控制日志文件轮换。 `infinity` 意味着日志文件将无限增长，否则日志文件将在达到 `max_size`（以字节为单位）时进行轮换。\n与 rotation count配合使用。如果 counter 为 10，则是10个文件轮换。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"50MB\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "启用此日志处理进程。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_conf_schema:log_level()",
          "kind" : "primitive"
        },
        "raw_default" : "warning",
        "name" : "level",
        "desc" : "当前日志处理进程的日志级别。\n默认为 warning 级别。",
        "default" : {
          "oneliner" : true,
          "hocon" : "warning"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "system",
        "name" : "time_offset",
        "desc" : "日志中的时间戳使用的时间偏移量。\n可选值为：\n  - `system`: 本地系统使用的时区偏移量\n  - `utc`: 0 时区的偏移量\n  - `+-[hh]:[mm]`: 自定义偏移量，比如 \"-02:00\" 或者 \"+00:00\"\n默认值为本地系统的时区偏移量：`system`。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"system\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "unlimited",
              "kind" : "singleton"
            },
            {
              "name" : "100..inf",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "unlimited",
        "name" : "chars_limit",
        "desc" : "设置单个日志消息的最大长度。 如果超过此长度，则日志消息将被截断。最小可设置的长度为100。\n注意：如果日志格式为 JSON，限制字符长度可能会导致截断不完整的 JSON 数据。",
        "default" : {
          "oneliner" : true,
          "hocon" : "unlimited"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "text",
            "json"
          ],
          "kind" : "enum"
        },
        "raw_default" : "text",
        "name" : "formatter",
        "desc" : "选择日志格式类型。 `text` 用于纯文本，`json` 用于结构化日志记录。",
        "default" : {
          "oneliner" : true,
          "hocon" : "text"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "single_line",
        "desc" : "如果设置为 true，则单行打印日志。 否则，日志消息可能跨越多行。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "non_neg_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 100,
        "name" : "sync_mode_qlen",
        "desc" : "只要缓冲的日志事件的数量低于这个值，所有的日志事件都会被异步处理。\n这意味着，日志落地速度不会影响正常的业务进程，因为它们不需要等待日志处理进程的响应。\n如果消息队列的增长超过了这个值，处理程序开始同步处理日志事件。也就是说，发送事件的客户进程必须等待响应。\n当处理程序将消息队列减少到低于sync_mode_qlen阈值的水平时，异步操作就会恢复。\n默认为100条信息，当等待的日志事件大于100条时，就开始同步处理日志。",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 3000,
        "name" : "drop_mode_qlen",
        "desc" : "当缓冲的日志事件数大于此值时，新的日志事件将被丢弃。起到过载保护的功能。\n为了使过载保护算法正常工作必须要：` sync_mode_qlen =< drop_mode_qlen =< flush_qlen ` 且 drop_mode_qlen > 1\n要禁用某些模式，请执行以下操作。\n- 如果sync_mode_qlen被设置为0，所有的日志事件都被同步处理。也就是说，异步日志被禁用。\n- 如果sync_mode_qlen被设置为与drop_mode_qlen相同的值，同步模式被禁用。也就是说，处理程序总是以异步模式运行，除非调用drop或flushing。\n- 如果drop_mode_qlen被设置为与flush_qlen相同的值，则drop模式被禁用，永远不会发生。",
        "default" : {
          "oneliner" : true,
          "hocon" : "3000"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8000,
        "name" : "flush_qlen",
        "desc" : "如果缓冲日志事件的数量增长大于此阈值，则会发生冲刷（删除）操作。 日志处理进程会丢弃缓冲的日志消息。\n来缓解自身不会由于内存瀑涨而影响其它业务进程。日志内容会提醒有多少事件被删除。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8000"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "log_overload_kill",
          "kind" : "struct"
        },
        "name" : "overload_kill",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "log_burst_limit",
          "kind" : "struct"
        },
        "name" : "burst_limit",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "error",
            "progress"
          ],
          "kind" : "enum"
        },
        "raw_default" : "error",
        "name" : "supervisor_reports",
        "desc" : "Supervisor 报告的类型。默认为 error 类型。<br/>\n  - `error`：仅记录 Erlang 进程中的错误。\n  - `progress`：除了 error 信息外，还需要记录进程启动的详细信息。",
        "default" : {
          "oneliner" : true,
          "hocon" : "error"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "unlimited",
              "kind" : "singleton"
            },
            {
              "name" : "non_neg_integer()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : 100,
        "name" : "max_depth",
        "desc" : "Erlang 内部格式日志格式化和 Erlang 进程消息队列检查的最大深度。",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "日志处理进程将日志事件打印到文件。"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "log.console_handler.overload_kill",
      "log.file_handlers.$name.overload_kill"
    ],
    "full_name" : "log_overload_kill",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "日志处理进程过载时为保护自己节点其它的业务能正常，强制杀死日志处理进程。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "raw_default" : "30MB",
        "name" : "mem_size",
        "desc" : "日志处理进程允许使用的最大内存。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"30MB\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 20000,
        "name" : "qlen",
        "desc" : "允许的最大队列长度。",
        "default" : {
          "oneliner" : true,
          "hocon" : "20000"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "emqx_schema:duration_ms()",
              "kind" : "primitive"
            },
            {
              "name" : "infinity",
              "kind" : "singleton"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "5s",
        "name" : "restart_after",
        "desc" : "处理进程停止后，会在该延迟时间后自动重新启动。除非该值设置为 `infinity`，这会阻止任何后续的重启。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "日志过载终止，具有过载保护功能。当日志处理进程使用过多内存，或者缓存的日志消息过多时该功能被激活。<br/>\n检测到过载时，日志处理进程将终止，并在冷却期后重新启动。"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "log.file_handlers.$name.rotation"
    ],
    "full_name" : "log_rotation",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "启用日志轮换功能。启动后生成日志文件后缀会加上对应的索引数字，比如：log/emqx.log.1。\n系统会默认生成`*.siz/*.idx`用于记录日志位置，请不要手动修改这两个文件。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "1..2048",
          "kind" : "primitive"
        },
        "raw_default" : 10,
        "name" : "count",
        "desc" : "轮换的最大日志文件数。",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "默认情况下，日志存储在 `./log` 目录（用于从 zip 文件安装）或 `/var/log/emqx`（用于二进制安装）。<br/>\n这部分配置，控制每个日志处理进程保留的文件数量。"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "node"
    ],
    "full_name" : "node",
    "fields" : [
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "emqx@127.0.0.1",
        "name" : "name",
        "importance" : "high",
        "desc" : "节点名。格式为 \\<name>@\\<host>。其中 <host> 可以是 IP 地址，也可以是 FQDN。\n详见 http://erlang.org/doc/reference_manual/distributed.html。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"emqx@127.0.0.1\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "cookie",
        "importance" : "high",
        "desc" : "分布式 Erlang 集群使用的 cookie 值。集群间保持一致",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "1024..134217727",
          "kind" : "primitive"
        },
        "raw_default" : 2097152,
        "name" : "process_limit",
        "importance" : "medium",
        "desc" : "Erlang系统同时存在的最大进程数。\n实际选择的最大值可能比设置的数字大得多。\n参考: https://www.erlang.org/doc/man/erl.html",
        "default" : {
          "oneliner" : true,
          "hocon" : "2097152"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "1024..134217727",
          "kind" : "primitive"
        },
        "raw_default" : 1048576,
        "name" : "max_ports",
        "importance" : "high",
        "desc" : "Erlang系统同时存在的最大端口数。\n实际选择的最大值可能比设置的数字大得多。\n参考: https://www.erlang.org/doc/man/erl.html",
        "default" : {
          "oneliner" : true,
          "hocon" : "1048576"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "1..2097151",
          "kind" : "primitive"
        },
        "raw_default" : 8192,
        "name" : "dist_buffer_size",
        "importance" : "low",
        "desc" : "Erlang分布式缓冲区的繁忙阈值，单位是KB。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8192"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "disabled",
              "kind" : "singleton"
            },
            {
              "name" : "emqx_schema:duration()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "15m",
        "name" : "global_gc_interval",
        "importance" : "low",
        "desc" : "系统调优参数，设置节点运行多久强制进行一次全局垃圾回收。禁用设置为 `disabled`。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15m\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "core",
            "replicant"
          ],
          "kind" : "enum"
        },
        "raw_default" : "core",
        "name" : "role",
        "importance" : "high",
        "desc" : "选择节点的角色。<br/>\n`core` 节点提供数据的持久性，并负责写入。建议将核心节点放置在不同的机架或不同的可用区。<br/>\n`repliant` 节点是临时工作节点。 从集群中删除它们，不影响数据库冗余<br/>\n建议复制节点多于核心节点。<br/>\n注意：该参数仅在设置`backend`时生效到 `rlog`。",
        "default" : {
          "oneliner" : true,
          "hocon" : "core"
        },
        "aliases" : [
          "db_role"
        ]
      }
    ],
    "desc" : "节点名称、Cookie、配置文件、数据目录和 Erlang 虚拟机（BEAM）启动参数。"
  },
  {
    "tags" : [
      "EMQX"
    ],
    "paths" : [
      "rpc"
    ],
    "full_name" : "rpc",
    "fields" : [
      {
        "type" : {
          "symbols" : [
            "sync",
            "async"
          ],
          "kind" : "enum"
        },
        "raw_default" : "async",
        "name" : "mode",
        "desc" : "在 `sync` 模式下，发送端等待接收端的 ack信号。",
        "default" : {
          "oneliner" : true,
          "hocon" : "async"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "tcp",
            "ssl"
          ],
          "kind" : "enum"
        },
        "raw_default" : "tcp",
        "name" : "driver",
        "desc" : "集群间通信使用的传输协议。",
        "default" : {
          "oneliner" : true,
          "hocon" : "tcp"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 256,
        "name" : "async_batch_size",
        "desc" : "异步模式下，发送的批量消息的最大数量。",
        "default" : {
          "oneliner" : true,
          "hocon" : "256"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "manual",
            "stateless"
          ],
          "kind" : "enum"
        },
        "raw_default" : "stateless",
        "name" : "port_discovery",
        "desc" : "`manual`: 通过 `tcp_server_port` 来发现端口。\n<br/>`stateless`: 使用无状态的方式来发现端口，使用如下算法。如果节点名称是 `\nemqxN@127.0.0.1`, N 是一个数字，那么监听端口就是 5370 + N。",
        "default" : {
          "oneliner" : true,
          "hocon" : "stateless"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 5369,
        "name" : "tcp_server_port",
        "desc" : "RPC 本地服务使用的 TCP 端口。<br/>\n只有当 rpc.port_discovery 设置为 manual 时，此配置才会生效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "5369"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 5369,
        "name" : "ssl_server_port",
        "desc" : "RPC 本地服务使用的监听SSL端口。<br/>\n只有当 rpc.port_discovery 设置为 manual 且 ` dirver ` 设置为 `ssl`，\n此配置才会生效。",
        "default" : {
          "oneliner" : true,
          "hocon" : "5369"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "1..256",
          "kind" : "primitive"
        },
        "raw_default" : 10,
        "name" : "tcp_client_num",
        "desc" : "设置本节点与远程节点之间的 RPC 通信通道的最大数量。",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "5s",
        "name" : "connect_timeout",
        "desc" : "建立 RPC 连接的超时时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_conf_schema:file()",
          "kind" : "primitive"
        },
        "name" : "certfile",
        "desc" : "TLS 证书文件的路径，用于验证集群节点的身份。\n只有当 `rpc.driver` 设置为 `ssl` 时，此配置才会生效。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_conf_schema:file()",
          "kind" : "primitive"
        },
        "name" : "keyfile",
        "desc" : "`rpc.certfile` 的私钥文件的路径。<br/>\n注意：此文件内容是私钥，所以需要设置权限为 600。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_conf_schema:file()",
          "kind" : "primitive"
        },
        "name" : "cacertfile",
        "desc" : "验证 `rpc.certfile` 的 CA 证书文件的路径。<br/>\n注意：集群中所有节点的证书必须使用同一个 CA 签发。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "5s",
        "name" : "send_timeout",
        "desc" : "发送 RPC 请求的超时时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "5s",
        "name" : "authentication_timeout",
        "desc" : "远程节点认证的超时时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "call_receive_timeout",
        "desc" : "同步 RPC 的回复超时时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_s()",
          "kind" : "primitive"
        },
        "raw_default" : "15m",
        "name" : "socket_keepalive_idle",
        "desc" : "broker 之间的连接在最后一条消息发送后保持打开的时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15m\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_s()",
          "kind" : "primitive"
        },
        "raw_default" : "75s",
        "name" : "socket_keepalive_interval",
        "desc" : "keepalive 消息的间隔。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"75s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 9,
        "name" : "socket_keepalive_count",
        "desc" : "keepalive 探测消息发送失败的次数，直到 RPC 连接被认为已经断开。",
        "default" : {
          "oneliner" : true,
          "hocon" : "9"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "raw_default" : "1MB",
        "name" : "socket_sndbuf",
        "desc" : "TCP 调节参数。TCP 发送缓冲区大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1MB\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "raw_default" : "1MB",
        "name" : "socket_recbuf",
        "desc" : "TCP 调节参数。TCP 接收缓冲区大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1MB\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "raw_default" : "1MB",
        "name" : "socket_buffer",
        "desc" : "TCP 调节参数。用户模式套接字缓冲区大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1MB\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "insecure_fallback",
        "desc" : "兼容旧的无鉴权模式",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "EMQX 使用 `gen_rpc` 库来实现跨节点通信。<br/>\n大多数情况下，默认的配置应该可以工作，但如果你需要做一些性能优化或者实验，可以尝试调整这些参数。"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX.topology",
      "authorization.sources.$INDEX.topology"
    ],
    "full_name" : "topology",
    "fields" : [
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "non_neg_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 0,
        "name" : "max_overflow",
        "desc" : "最大溢出。",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "name" : "overflow_ttl",
        "desc" : "当池内工人太多时，等待多久清除多余工人。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "name" : "overflow_check_period",
        "desc" : "检查是否有超过配置的工人的周期（\"溢出\"）。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "name" : "local_threshold_ms",
        "desc" : "在多个合适的MongoDB实例中进行选择的延迟窗口的大小。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "name" : "connect_timeout_ms",
        "desc" : "超时重连的等待时间。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "name" : "socket_timeout_ms",
        "desc" : "在尝试超时之前，在套接字上尝试发送或接收的持续时间。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "name" : "server_selection_timeout_ms",
        "desc" : "指定在抛出异常之前为服务器选择阻断多长时间。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "name" : "wait_queue_timeout_ms",
        "desc" : "工作者等待连接可用的最长时间。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "200s",
        "name" : "heartbeat_frequency_ms",
        "desc" : "控制驱动程序何时检查MongoDB部署的状态。指定检查的间隔时间，从上一次检查结束到下一次检查开始计算。如果连接数增加（例如，如果你增加池子的大小，就会发生这种情况），你可能也需要增加这个周期，以避免在MongoDB日志文件中创建太多的日志条目。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"200s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "name" : "min_heartbeat_frequency_ms",
        "desc" : "心跳间的最小间隙",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "配置 Topology"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "zones.$name.force_gc"
    ],
    "full_name" : "zone:force_gc",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "enable",
        "desc" : "启用强制垃圾回收。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "0..inf",
          "kind" : "primitive"
        },
        "name" : "count",
        "desc" : "在进程收到多少消息之后，对此进程执行垃圾回收。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "name" : "bytes",
        "desc" : "在进程处理过多少个字节之后，对此进程执行垃圾回收。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Force garbage collection in MQTT connection process after\n they process certain number of messages or bytes of data."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "zones.$name.force_shutdown"
    ],
    "full_name" : "zone:force_shutdown",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "enable",
        "desc" : "启用 `force_shutdown` 功能。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "0..inf",
          "kind" : "primitive"
        },
        "name" : "max_message_queue_len",
        "desc" : "消息队列的最大长度。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:wordsize()",
          "kind" : "primitive"
        },
        "name" : "max_heap_size",
        "desc" : "Heap 的总大小。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "When the process message queue length, or the memory bytes\nreaches a certain value, the process is forced to close.\n\nNote: \"message queue\" here refers to the \"message mailbox\"\nof the Erlang process, not the `mqueue` of QoS 1 and QoS 2."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "zones.$name.mqtt"
    ],
    "full_name" : "zone:mqtt",
    "fields" : [
      {
        "type" : {
          "members" : [
            {
              "name" : "infinity",
              "kind" : "singleton"
            },
            {
              "name" : "emqx_schema:duration()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "name" : "idle_timeout",
        "desc" : "设置连接被断开或进入休眠状态前的等待时间，空闲超时后，\n  - 如暂未收到客户端的 CONNECT 报文，连接将断开；\n  - 如已收到客户端的 CONNECT 报文，连接将进入休眠模式以节省系统资源。\n\n注意：请合理设置该参数值，如等待时间设置过长，可能造成系统资源的浪费。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "name" : "max_packet_size",
        "desc" : "允许的最大 MQTT 报文大小。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "23..65535",
          "kind" : "primitive"
        },
        "name" : "max_clientid_len",
        "desc" : "允许的最大 MQTT Client ID 长度。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "1..65535",
          "kind" : "primitive"
        },
        "name" : "max_topic_levels",
        "desc" : "允许的最大主题层级。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "qos()",
          "kind" : "primitive"
        },
        "name" : "max_qos_allowed",
        "desc" : "允许的最大 QoS 等级。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "0..65535",
          "kind" : "primitive"
        },
        "name" : "max_topic_alias",
        "desc" : "允许的最大主题别名数，0 表示不支持主题别名。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "retain_available",
        "desc" : "是否启用对 MQTT 保留消息的支持。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "wildcard_subscription",
        "desc" : "是否启用对 MQTT 通配符订阅的支持。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "shared_subscription",
        "desc" : "是否启用对 MQTT 共享订阅的支持。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "exclusive_subscription",
        "desc" : "是否启用对 MQTT 排它订阅的支持。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "ignore_loop_deliver",
        "desc" : "设置由 MQTT v3.1.1/v3.1.0 客户端发布的消息是否将转发给其本身；类似 MQTT 5.0 协议中的 `No Local` 选项。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "strict_mode",
        "desc" : "是否以严格模式解析 MQTT 消息。\n严格模式下，如客户端 ID、主题名称等中包含无效 utf8 字符串，连接将被断开。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "response_information",
        "desc" : "UTF-8 字符串，用于指定返回给客户端的响应主题，如 `reqrsp/`，此时请求和应答客户端都需要使用 `reqrsp/` 前缀的主题来完成通讯。\n如希望禁用此功能，请在下方的文字框中输入`\"\"`；仅适用于 MQTT 5.0 客户端。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "integer()",
              "kind" : "primitive"
            },
            {
              "name" : "disabled",
              "kind" : "singleton"
            }
          ],
          "kind" : "union"
        },
        "name" : "server_keepalive",
        "desc" : "EMQX 要求的保活时间，如设为 disabled，则将使用客户端指定的保持连接时间；仅适用于 MQTT 5.0 客户端。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "number()",
          "kind" : "primitive"
        },
        "name" : "keepalive_backoff",
        "desc" : "EMQX 判定客户端保活超时使用的阈值系数。计算公式为：Keep Alive * Backoff * 2",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "1..inf",
              "kind" : "primitive"
            },
            {
              "name" : "infinity",
              "kind" : "singleton"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_subscriptions",
        "desc" : "允许每个客户端建立的最大订阅数量。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "upgrade_qos",
        "desc" : "投递消息时，是否根据订阅主题时的 QoS 等级来强制提升派发的消息的 QoS 等级。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "1..65535",
          "kind" : "primitive"
        },
        "name" : "max_inflight",
        "desc" : "允许在完成应答前同时投递的 QoS 1 和 QoS 2 消息的最大数量。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "name" : "retry_interval",
        "desc" : "QoS 1/2 消息的重新投递间隔。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "integer()",
              "kind" : "primitive"
            },
            {
              "name" : "infinity",
              "kind" : "singleton"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_awaiting_rel",
        "desc" : "每个发布者的会话中，都存在一个队列来处理客户端发送的 QoS 2 消息。该队列会存储 QoS 2 消息的报文 ID 直到收到客户端的 PUBREL 或超时，达到队列长度的限制后，新的 QoS 2 消息发布会被拒绝，并返回 `147(0x93)` 错误。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "name" : "await_rel_timeout",
        "desc" : "客户端发布 QoS 2 消息时，服务器等待 `PUBREL` 的最长时延。超过该时长后服务器会放弃等待，该PACKET ID 会被释放，从而允许后续新的 PUBLISH 消息使用。如果超时后收到 PUBREL，服务器将会产生一条告警日志。注意，向订阅客户端转发消息的动作发生在进入等待之前。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "name" : "session_expiry_interval",
        "desc" : "指定会话将在连接断开后多久过期，仅适用于非 MQTT 5.0 的连接。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "non_neg_integer()",
              "kind" : "primitive"
            },
            {
              "name" : "infinity",
              "kind" : "singleton"
            }
          ],
          "kind" : "union"
        },
        "name" : "max_mqueue_len",
        "desc" : "消息队列最大长度。持久客户端断开连接或飞行窗口已满时排队的消息长度。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "map()",
              "kind" : "primitive"
            },
            {
              "name" : "disabled",
              "kind" : "singleton"
            }
          ],
          "kind" : "union"
        },
        "name" : "mqueue_priorities",
        "desc" : "主题优先级。取值范围 [1-255]\n默认优先级表为空，即所有的主题优先级相同。\n\n注：优先主题名称中不支持使用逗号和等号。\n注：不在此列表中的主题，被视为最高/最低优先级，这取决于`mqtt.mqueue_default_priority` 的配置\n\n示例：\n配置 `\"topic/1\" > \"topic/2\"`:\n`mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}`",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "highest",
            "lowest"
          ],
          "kind" : "enum"
        },
        "name" : "mqueue_default_priority",
        "desc" : "默认的主题优先级，不在 `主题优先级`（`mqueue_priorities`） 中的主题将会使用该优先级。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "mqueue_store_qos0",
        "desc" : "指定在连接断开但会话保持期间，是否需要在消息队列中存储 QoS 0 消息。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "use_username_as_clientid",
        "desc" : "是否使用用户名作为客户端 ID。\n此设置的作用时间晚于 `对端证书作为用户名` 和 `对端证书作为客户端 ID`。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "disabled",
            "cn",
            "dn",
            "crt",
            "pem",
            "md5"
          ],
          "kind" : "enum"
        },
        "name" : "peer_cert_as_username",
        "desc" : "使用对端证书中的 CN、DN 字段或整个证书内容来作为用户名；仅适用于 TLS 连接。\n目前支持：\n- `cn`: 取证书的 CN 字段\n- `dn`: 取证书的 DN 字段\n- `crt`: 取 `DER` 或 `PEM` 的证书内容\n- `pem`: 将 `DER` 证书转换为 `PEM` 格式作为用户名\n- `md5`: 取 `DER` 或 `PEM` 证书内容的 MD5 值",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "disabled",
            "cn",
            "dn",
            "crt",
            "pem",
            "md5"
          ],
          "kind" : "enum"
        },
        "name" : "peer_cert_as_clientid",
        "desc" : "使用对端证书中的 CN、DN 字段或整个证书内容来作为客户端 ID。仅适用于 TLS 连接；\n目前支持：\n- `cn`: 取证书的 CN 字段\n- `dn`: 取证书的 DN 字段\n- `crt`: 取 `DER` 或 `PEM` 证书的内容\n- `pem`: 将 `DER` 证书内容转换为 `PEM` 格式作为客户端 ID\n- `md5`: 取 `DER` 或 `PEM` 证书内容的 MD5 值",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Global MQTT configuration.<br/>The configs here work as default values which can be overridden\nin `zone` configs"
  },
  {
    "tags" : [
      "Authentication"
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:http_get",
    "fields" : [
      {
        "type" : {
          "name" : "get",
          "kind" : "singleton"
        },
        "name" : "method",
        "desc" : "HTTP 请求方法。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "raw_default" : {
          "keep-alive" : "timeout=30, max=1000",
          "connection" : "keep-alive",
          "cache-control" : "no-cache",
          "accept" : "application/json"
        },
        "name" : "headers",
        "desc" : "HTTP Headers 列表 (无 `content-type`) 。",
        "default" : {
          "oneliner" : false,
          "hocon" : "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "password_based",
          "kind" : "singleton"
        },
        "name" : "mechanism",
        "desc" : "认证机制。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "http",
          "kind" : "singleton"
        },
        "name" : "backend",
        "desc" : "后端类型。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "url",
        "desc" : "认证 HTTP 服务器地址。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "#{term() => binary()}",
          "kind" : "primitive"
        },
        "name" : "body",
        "desc" : "HTTP request body。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "5s",
        "name" : "request_timeout",
        "desc" : "HTTP 请求超时时长。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此认证数据源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "connect_timeout",
        "desc" : "连接HTTP服务器的超时时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 100,
        "name" : "enable_pipelining",
        "desc" : "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "non_neg_integer()",
          "kind" : "primitive"
        },
        "name" : "max_retries",
        "desc" : "Deprecated since 5.0.4.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "connector-http:request",
          "kind" : "struct"
        },
        "name" : "request",
        "desc" : "设置 HTTP 请求的参数。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "name" : "retry_interval",
        "desc" : "Deprecated since 5.0.4.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 HTTP Server 作为认证服务的认证器的配置项 (使用 GET 请求)。"
  },
  {
    "tags" : [
      "Authentication"
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:http_post",
    "fields" : [
      {
        "type" : {
          "name" : "post",
          "kind" : "singleton"
        },
        "name" : "method",
        "desc" : "HTTP 请求方法。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "raw_default" : {
          "keep-alive" : "timeout=30, max=1000",
          "content-type" : "application/json",
          "connection" : "keep-alive",
          "cache-control" : "no-cache",
          "accept" : "application/json"
        },
        "name" : "headers",
        "desc" : "HTTP Headers 列表",
        "default" : {
          "oneliner" : false,
          "hocon" : "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"content-type\" = \"application/json\"\n  \"keep-alive\" = \"timeout=30, max=1000\"\n}\n"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "password_based",
          "kind" : "singleton"
        },
        "name" : "mechanism",
        "desc" : "认证机制。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "http",
          "kind" : "singleton"
        },
        "name" : "backend",
        "desc" : "后端类型。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "url",
        "desc" : "认证 HTTP 服务器地址。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "#{term() => binary()}",
          "kind" : "primitive"
        },
        "name" : "body",
        "desc" : "HTTP request body。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "5s",
        "name" : "request_timeout",
        "desc" : "HTTP 请求超时时长。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此认证数据源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "connect_timeout",
        "desc" : "连接HTTP服务器的超时时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 100,
        "name" : "enable_pipelining",
        "desc" : "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "non_neg_integer()",
          "kind" : "primitive"
        },
        "name" : "max_retries",
        "desc" : "Deprecated since 5.0.4.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "connector-http:request",
          "kind" : "struct"
        },
        "name" : "request",
        "desc" : "设置 HTTP 请求的参数。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "name" : "retry_interval",
        "desc" : "Deprecated since 5.0.4.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 HTTP Server 作为认证服务的认证器的配置项 (使用 POST 请求)。"
  },
  {
    "tags" : [
      "Authentication"
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:jwt_hmac",
    "fields" : [
      {
        "type" : {
          "symbols" : [
            "hmac-based"
          ],
          "kind" : "enum"
        },
        "name" : "algorithm",
        "desc" : "JWT 签名算法，支持 HMAC (配置为 `hmac-based`）和 RSA、ECDSA (配置为 `public-key`)。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "secret",
        "desc" : "使用 HMAC 算法时用于验证 JWT 的密钥",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "secret_base64_encoded",
        "desc" : "密钥是否为 Base64 编码。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "jwt",
          "kind" : "singleton"
        },
        "name" : "mechanism",
        "desc" : "认证机制。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "acl",
        "name" : "acl_claim_name",
        "desc" : "JWT claim name to use for getting ACL rules.",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"acl\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "[term()]",
          "kind" : "primitive"
        },
        "raw_default" : {
          
        },
        "name" : "verify_claims",
        "desc" : "需要验证的自定义声明列表，它是一个名称/值对列表。\n值可以使用以下占位符：\n- `${username}`: 将在运行时被替换为客户端连接时使用的用户名\n- `${clientid}`: 将在运行时被替换为客户端连接时使用的客户端标识符\n认证时将验证 JWT（取自 Password 字段）中 claims 的值是否与 `verify_claims` 中要求的相匹配。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "username",
            "password"
          ],
          "kind" : "enum"
        },
        "raw_default" : "password",
        "name" : "from",
        "desc" : "要从中获取 JWT 的字段。",
        "default" : {
          "oneliner" : true,
          "hocon" : "password"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此认证数据源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "用于认证的 JWT 使用 HMAC 算法签发时的配置。"
  },
  {
    "tags" : [
      "Authentication"
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:jwt_jwks",
    "fields" : [
      {
        "type" : {
          "symbols" : [
            "true"
          ],
          "kind" : "enum"
        },
        "name" : "use_jwks",
        "desc" : "是否使用 JWKS。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "endpoint",
        "desc" : "JWKS 端点， 它是一个以 JWKS 格式返回服务端的公钥集的只读端点。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 300,
        "name" : "refresh_interval",
        "desc" : "JWKS 刷新间隔。",
        "default" : {
          "oneliner" : true,
          "hocon" : "300"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "SSL 选项。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "jwt",
          "kind" : "singleton"
        },
        "name" : "mechanism",
        "desc" : "认证机制。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "acl",
        "name" : "acl_claim_name",
        "desc" : "JWT claim name to use for getting ACL rules.",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"acl\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "[term()]",
          "kind" : "primitive"
        },
        "raw_default" : {
          
        },
        "name" : "verify_claims",
        "desc" : "需要验证的自定义声明列表，它是一个名称/值对列表。\n值可以使用以下占位符：\n- `${username}`: 将在运行时被替换为客户端连接时使用的用户名\n- `${clientid}`: 将在运行时被替换为客户端连接时使用的客户端标识符\n认证时将验证 JWT（取自 Password 字段）中 claims 的值是否与 `verify_claims` 中要求的相匹配。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "username",
            "password"
          ],
          "kind" : "enum"
        },
        "raw_default" : "password",
        "name" : "from",
        "desc" : "要从中获取 JWT 的字段。",
        "default" : {
          "oneliner" : true,
          "hocon" : "password"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此认证数据源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "用于认证的 JWTs 需要从 JWKS 端点获取时的配置。"
  },
  {
    "tags" : [
      "Authentication"
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:jwt_public_key",
    "fields" : [
      {
        "type" : {
          "symbols" : [
            "public-key"
          ],
          "kind" : "enum"
        },
        "name" : "algorithm",
        "desc" : "JWT 签名算法，支持 HMAC (配置为 `hmac-based`）和 RSA、ECDSA (配置为 `public-key`)。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "public_key",
        "desc" : "用于验证 JWT 的公钥。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "jwt",
          "kind" : "singleton"
        },
        "name" : "mechanism",
        "desc" : "认证机制。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "acl",
        "name" : "acl_claim_name",
        "desc" : "JWT claim name to use for getting ACL rules.",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"acl\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "[term()]",
          "kind" : "primitive"
        },
        "raw_default" : {
          
        },
        "name" : "verify_claims",
        "desc" : "需要验证的自定义声明列表，它是一个名称/值对列表。\n值可以使用以下占位符：\n- `${username}`: 将在运行时被替换为客户端连接时使用的用户名\n- `${clientid}`: 将在运行时被替换为客户端连接时使用的客户端标识符\n认证时将验证 JWT（取自 Password 字段）中 claims 的值是否与 `verify_claims` 中要求的相匹配。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "username",
            "password"
          ],
          "kind" : "enum"
        },
        "raw_default" : "password",
        "name" : "from",
        "desc" : "要从中获取 JWT 的字段。",
        "default" : {
          "oneliner" : true,
          "hocon" : "password"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此认证数据源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "用于认证的 JWT 使用 RSA 或 ECDSA 算法签发时的配置。"
  },
  {
    "tags" : [
      "Authentication"
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:builtin_db",
    "fields" : [
      {
        "type" : {
          "name" : "password_based",
          "kind" : "singleton"
        },
        "name" : "mechanism",
        "desc" : "认证机制。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "built_in_database",
          "kind" : "singleton"
        },
        "name" : "backend",
        "desc" : "后端类型。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "clientid",
            "username"
          ],
          "kind" : "enum"
        },
        "raw_default" : "username",
        "name" : "user_id_type",
        "desc" : "指定使用客户端ID `clientid` 还是用户名 `username` 进行认证。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"username\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "authn-hash:bcrypt_rw",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:pbkdf2",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:simple",
              "kind" : "struct"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "name" : "password_hash_algorithm",
        "desc" : "Options for password hash creation and verification.",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此认证数据源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用内置数据库作为认证数据源的认证器的配置项。"
  },
  {
    "tags" : [
      "Authentication"
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:mongo_rs",
    "fields" : [
      {
        "type" : {
          "name" : "password_based",
          "kind" : "singleton"
        },
        "name" : "mechanism",
        "desc" : "认证机制。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "mongodb",
          "kind" : "singleton"
        },
        "name" : "backend",
        "desc" : "后端类型。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "collection",
        "desc" : "存储认证数据的集合。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "raw_default" : {
          
        },
        "name" : "filter",
        "desc" : "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：\n- `${username}`: 将在运行时被替换为客户端连接时使用的用户名\n- `${clientid}`: 将在运行时被替换为客户端连接时使用的客户端标识符",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "password_hash",
        "name" : "password_hash_field",
        "desc" : "文档中用于存放密码散列的字段。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"password_hash\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "salt",
        "name" : "salt_field",
        "desc" : "文档中用于存放盐值的字段。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"salt\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "is_superuser",
        "name" : "is_superuser_field",
        "desc" : "文档中用于定义用户是否具有超级用户权限的字段。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"is_superuser\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "authn-hash:bcrypt",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:pbkdf2",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:simple",
              "kind" : "struct"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "name" : "password_hash_algorithm",
        "desc" : "Options for password hash verification.",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此认证数据源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "rs",
          "kind" : "singleton"
        },
        "raw_default" : "rs",
        "name" : "mongo_type",
        "desc" : "Replica set模式。当 MongoDB 服务运行在 replica-set 模式下，该配置必须设置为 'rs'。",
        "default" : {
          "oneliner" : true,
          "hocon" : "rs"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "servers",
        "desc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "unsafe",
            "safe"
          ],
          "kind" : "enum"
        },
        "raw_default" : "unsafe",
        "name" : "w_mode",
        "desc" : "写模式。",
        "default" : {
          "oneliner" : true,
          "hocon" : "unsafe"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "master",
            "slave_ok"
          ],
          "kind" : "enum"
        },
        "raw_default" : "master",
        "name" : "r_mode",
        "desc" : "读模式。",
        "default" : {
          "oneliner" : true,
          "hocon" : "master"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "replica_set_name",
        "desc" : "副本集的名称。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "srv_record",
        "desc" : "使用 DNS SRV 记录。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "username",
        "desc" : "内部数据库的用户名。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "auth_source",
        "desc" : "与用户证书关联的数据库名称。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "database",
        "desc" : "数据库名字。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "topology",
          "kind" : "struct"
        },
        "name" : "topology",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 MongoDB (Replica Set) 作为认证数据源的认证器的配置项。"
  },
  {
    "tags" : [
      "Authentication"
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:mongo_sharded",
    "fields" : [
      {
        "type" : {
          "name" : "password_based",
          "kind" : "singleton"
        },
        "name" : "mechanism",
        "desc" : "认证机制。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "mongodb",
          "kind" : "singleton"
        },
        "name" : "backend",
        "desc" : "后端类型。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "collection",
        "desc" : "存储认证数据的集合。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "raw_default" : {
          
        },
        "name" : "filter",
        "desc" : "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：\n- `${username}`: 将在运行时被替换为客户端连接时使用的用户名\n- `${clientid}`: 将在运行时被替换为客户端连接时使用的客户端标识符",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "password_hash",
        "name" : "password_hash_field",
        "desc" : "文档中用于存放密码散列的字段。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"password_hash\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "salt",
        "name" : "salt_field",
        "desc" : "文档中用于存放盐值的字段。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"salt\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "is_superuser",
        "name" : "is_superuser_field",
        "desc" : "文档中用于定义用户是否具有超级用户权限的字段。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"is_superuser\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "authn-hash:bcrypt",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:pbkdf2",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:simple",
              "kind" : "struct"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "name" : "password_hash_algorithm",
        "desc" : "Options for password hash verification.",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此认证数据源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "sharded",
          "kind" : "singleton"
        },
        "raw_default" : "sharded",
        "name" : "mongo_type",
        "desc" : "Sharded cluster模式。当 MongoDB 服务运行在 sharded 模式下，该配置必须设置为 'sharded'。",
        "default" : {
          "oneliner" : true,
          "hocon" : "sharded"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "servers",
        "desc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "unsafe",
            "safe"
          ],
          "kind" : "enum"
        },
        "raw_default" : "unsafe",
        "name" : "w_mode",
        "desc" : "写模式。",
        "default" : {
          "oneliner" : true,
          "hocon" : "unsafe"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "srv_record",
        "desc" : "使用 DNS SRV 记录。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "username",
        "desc" : "内部数据库的用户名。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "auth_source",
        "desc" : "与用户证书关联的数据库名称。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "database",
        "desc" : "数据库名字。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "topology",
          "kind" : "struct"
        },
        "name" : "topology",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 MongoDB (Sharded Cluster) 作为认证数据源的认证器的配置项。"
  },
  {
    "tags" : [
      "Authentication"
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:mongo_single",
    "fields" : [
      {
        "type" : {
          "name" : "password_based",
          "kind" : "singleton"
        },
        "name" : "mechanism",
        "desc" : "认证机制。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "mongodb",
          "kind" : "singleton"
        },
        "name" : "backend",
        "desc" : "后端类型。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "collection",
        "desc" : "存储认证数据的集合。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "raw_default" : {
          
        },
        "name" : "filter",
        "desc" : "在查询中定义过滤条件的条件表达式。\n过滤器支持如下占位符：\n- `${username}`: 将在运行时被替换为客户端连接时使用的用户名\n- `${clientid}`: 将在运行时被替换为客户端连接时使用的客户端标识符",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "password_hash",
        "name" : "password_hash_field",
        "desc" : "文档中用于存放密码散列的字段。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"password_hash\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "salt",
        "name" : "salt_field",
        "desc" : "文档中用于存放盐值的字段。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"salt\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "is_superuser",
        "name" : "is_superuser_field",
        "desc" : "文档中用于定义用户是否具有超级用户权限的字段。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"is_superuser\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "authn-hash:bcrypt",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:pbkdf2",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:simple",
              "kind" : "struct"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "name" : "password_hash_algorithm",
        "desc" : "Options for password hash verification.",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此认证数据源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "single",
          "kind" : "singleton"
        },
        "raw_default" : "single",
        "name" : "mongo_type",
        "desc" : "Standalone 模式。当 MongoDB 服务运行在 standalone 模式下，该配置必须设置为 'single'。",
        "default" : {
          "oneliner" : true,
          "hocon" : "single"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "server",
        "desc" : "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "unsafe",
            "safe"
          ],
          "kind" : "enum"
        },
        "raw_default" : "unsafe",
        "name" : "w_mode",
        "desc" : "写模式。",
        "default" : {
          "oneliner" : true,
          "hocon" : "unsafe"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "srv_record",
        "desc" : "使用 DNS SRV 记录。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "username",
        "desc" : "内部数据库的用户名。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "auth_source",
        "desc" : "与用户证书关联的数据库名称。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "database",
        "desc" : "数据库名字。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "topology",
          "kind" : "struct"
        },
        "name" : "topology",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 MongoDB (Standalone) 作为认证数据源的认证器的配置项。"
  },
  {
    "tags" : [
      "Authentication"
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:mysql",
    "fields" : [
      {
        "type" : {
          "name" : "password_based",
          "kind" : "singleton"
        },
        "name" : "mechanism",
        "desc" : "认证机制。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "mysql",
          "kind" : "singleton"
        },
        "name" : "backend",
        "desc" : "后端类型。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "authn-hash:bcrypt",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:pbkdf2",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:simple",
              "kind" : "struct"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "name" : "password_hash_algorithm",
        "desc" : "Options for password hash verification.",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "query",
        "desc" : "用于查询密码散列等用于认证的数据的 SQL 语句。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "5s",
        "name" : "query_timeout",
        "desc" : "SQL 查询的超时时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此认证数据源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "server",
        "desc" : "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MySQL 默认端口 3306。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "database",
        "desc" : "数据库名字。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "root",
        "name" : "username",
        "desc" : "内部数据库的用户名。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"root\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "auto_reconnect",
        "desc" : "Deprecated since v5.0.15.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 MySQL 作为认证数据源的认证器的配置项。"
  },
  {
    "tags" : [
      "Authentication"
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:postgresql",
    "fields" : [
      {
        "type" : {
          "name" : "password_based",
          "kind" : "singleton"
        },
        "name" : "mechanism",
        "desc" : "认证机制。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "postgresql",
          "kind" : "singleton"
        },
        "name" : "backend",
        "desc" : "后端类型。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "authn-hash:bcrypt",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:pbkdf2",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:simple",
              "kind" : "struct"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "name" : "password_hash_algorithm",
        "desc" : "Options for password hash verification.",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "query",
        "desc" : "用于查询密码散列等用于认证的数据的 SQL 语句。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此认证数据源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "server",
        "desc" : "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 PostgreSQL 默认端口 5432。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "database",
        "desc" : "数据库名字。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "username",
        "desc" : "内部数据库的用户名。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "auto_reconnect",
        "desc" : "Deprecated since v5.0.15.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 PostgreSQL 作为认证数据源的认证器的配置项。"
  },
  {
    "tags" : [
      "Authentication"
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:redis_cluster",
    "fields" : [
      {
        "type" : {
          "name" : "password_based",
          "kind" : "singleton"
        },
        "name" : "mechanism",
        "desc" : "认证机制。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "redis",
          "kind" : "singleton"
        },
        "name" : "backend",
        "desc" : "后端类型。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "cmd",
        "desc" : "用于查询密码散列等用于认证的数据的 Redis Command，目前仅支持 `HGET` 与 `HMGET`。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "authn-hash:bcrypt",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:pbkdf2",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:simple",
              "kind" : "struct"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "name" : "password_hash_algorithm",
        "desc" : "Options for password hash verification.",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此认证数据源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "servers",
        "desc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "cluster",
          "kind" : "singleton"
        },
        "raw_default" : "cluster",
        "name" : "redis_type",
        "desc" : "集群模式。当 Redis 服务运行在集群模式下，该配置必须设置为 'cluster'。",
        "default" : {
          "oneliner" : true,
          "hocon" : "cluster"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "auto_reconnect",
        "desc" : "Deprecated since v5.0.15.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 Redis (Cluster) 作为认证数据源的认证器的配置项。"
  },
  {
    "tags" : [
      "Authentication"
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:redis_sentinel",
    "fields" : [
      {
        "type" : {
          "name" : "password_based",
          "kind" : "singleton"
        },
        "name" : "mechanism",
        "desc" : "认证机制。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "redis",
          "kind" : "singleton"
        },
        "name" : "backend",
        "desc" : "后端类型。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "cmd",
        "desc" : "用于查询密码散列等用于认证的数据的 Redis Command，目前仅支持 `HGET` 与 `HMGET`。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "authn-hash:bcrypt",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:pbkdf2",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:simple",
              "kind" : "struct"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "name" : "password_hash_algorithm",
        "desc" : "Options for password hash verification.",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此认证数据源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "servers",
        "desc" : "集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。\n主机名具有以下形式：`Host[:Port]`。\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "sentinel",
          "kind" : "singleton"
        },
        "raw_default" : "sentinel",
        "name" : "redis_type",
        "desc" : "哨兵模式。当 Redis 服务运行在哨兵模式下，该配置必须设置为 'sentinel'。",
        "default" : {
          "oneliner" : true,
          "hocon" : "sentinel"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "sentinel",
        "desc" : "Redis 哨兵模式下的集群名称。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 0,
        "name" : "database",
        "desc" : "Redis 数据库 ID。",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "auto_reconnect",
        "desc" : "Deprecated since v5.0.15.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 Redis (Sentinel) 作为认证数据源的认证器的配置项。"
  },
  {
    "tags" : [
      "Authentication"
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:redis_single",
    "fields" : [
      {
        "type" : {
          "name" : "password_based",
          "kind" : "singleton"
        },
        "name" : "mechanism",
        "desc" : "认证机制。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "redis",
          "kind" : "singleton"
        },
        "name" : "backend",
        "desc" : "后端类型。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "cmd",
        "desc" : "用于查询密码散列等用于认证的数据的 Redis Command，目前仅支持 `HGET` 与 `HMGET`。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "authn-hash:bcrypt",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:pbkdf2",
              "kind" : "struct"
            },
            {
              "name" : "authn-hash:simple",
              "kind" : "struct"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : {
          "salt_position" : "prefix",
          "name" : "sha256"
        },
        "name" : "password_hash_algorithm",
        "desc" : "Options for password hash verification.",
        "default" : {
          "oneliner" : true,
          "hocon" : "{name = sha256, salt_position = prefix}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此认证数据源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "server",
        "desc" : "将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "single",
          "kind" : "singleton"
        },
        "raw_default" : "single",
        "name" : "redis_type",
        "desc" : "单机模式。当 Redis 服务运行在单机模式下，该配置必须设置为 'single'。",
        "default" : {
          "oneliner" : true,
          "hocon" : "single"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "桥接远端服务时使用的连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "内部数据库密码。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 0,
        "name" : "database",
        "desc" : "Redis 数据库 ID。",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "auto_reconnect",
        "desc" : "Deprecated since v5.0.15.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "使用 Redis (Standalone) 作为认证数据源的认证器的配置项。"
  },
  {
    "tags" : [
      "Authentication"
    ],
    "paths" : [
      "authentication.$INDEX"
    ],
    "full_name" : "authn:scram",
    "fields" : [
      {
        "type" : {
          "name" : "scram",
          "kind" : "singleton"
        },
        "name" : "mechanism",
        "desc" : "认证机制。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "built_in_database",
          "kind" : "singleton"
        },
        "name" : "backend",
        "desc" : "后端类型。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "sha256",
            "sha512"
          ],
          "kind" : "enum"
        },
        "raw_default" : "sha256",
        "name" : "algorithm",
        "desc" : "Hashing algorithm.",
        "default" : {
          "oneliner" : true,
          "hocon" : "sha256"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "non_neg_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 4096,
        "name" : "iteration_count",
        "desc" : "Iteration count.",
        "default" : {
          "oneliner" : true,
          "hocon" : "4096"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "设为 `true` 或 `false` 以启用或禁用此认证数据源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for Salted Challenge Response Authentication Mechanism\n(SCRAM) authentication."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX.password_hash_algorithm"
    ],
    "full_name" : "authn-hash:bcrypt",
    "fields" : [
      {
        "type" : {
          "name" : "bcrypt",
          "kind" : "singleton"
        },
        "name" : "name",
        "desc" : "BCRYPT password hashing.",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for bcrypt password hashing algorithm."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX.password_hash_algorithm"
    ],
    "full_name" : "authn-hash:bcrypt_rw",
    "fields" : [
      {
        "type" : {
          "name" : "bcrypt",
          "kind" : "singleton"
        },
        "name" : "name",
        "desc" : "BCRYPT password hashing.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 10,
        "name" : "salt_rounds",
        "examples" : [
          10
        ],
        "desc" : "Salt rounds for BCRYPT password generation.",
        "default" : {
          "oneliner" : true,
          "hocon" : "10"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for bcrypt password hashing algorithm (for DB backends with write capability)."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX.password_hash_algorithm"
    ],
    "full_name" : "authn-hash:pbkdf2",
    "fields" : [
      {
        "type" : {
          "name" : "pbkdf2",
          "kind" : "singleton"
        },
        "name" : "name",
        "desc" : "PBKDF2 password hashing.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "md4",
            "md5",
            "ripemd160",
            "sha",
            "sha224",
            "sha256",
            "sha384",
            "sha512"
          ],
          "kind" : "enum"
        },
        "name" : "mac_fun",
        "desc" : "Specifies mac_fun for PBKDF2 hashing algorithm.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "name" : "iterations",
        "desc" : "Iteration count for PBKDF2 hashing algorithm.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "name" : "dk_length",
        "desc" : "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for PBKDF2 password hashing algorithm."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX.password_hash_algorithm"
    ],
    "full_name" : "authn-hash:simple",
    "fields" : [
      {
        "type" : {
          "symbols" : [
            "plain",
            "md5",
            "sha",
            "sha256",
            "sha512"
          ],
          "kind" : "enum"
        },
        "name" : "name",
        "desc" : "Simple password hashing algorithm.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "disable",
            "prefix",
            "suffix"
          ],
          "kind" : "enum"
        },
        "raw_default" : "prefix",
        "name" : "salt_position",
        "desc" : "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
        "default" : {
          "oneliner" : true,
          "hocon" : "prefix"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Settings for simple algorithms."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "psk_authentication"
    ],
    "full_name" : "authn-psk:psk_authentication",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "enable",
        "desc" : "是否开启 TLS PSK 支持",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "init_file",
        "desc" : "如果设置了初始化文件，EMQX 将在启动时从初始化文件中导入 PSK 信息到内建数据库中。\n这个文件需要按行进行组织，每一行必须遵守如下格式: `PSKIdentity:SharedSecret`\n例如: `mydevice1:c2VjcmV0`",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : ":",
        "name" : "separator",
        "desc" : "PSK 文件中 `PSKIdentity` 和 `SharedSecret` 之间的分隔符",
        "default" : {
          "oneliner" : true,
          "hocon" : "\":\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "integer()",
          "kind" : "primitive"
        },
        "raw_default" : 50,
        "name" : "chunk_size",
        "desc" : "将 PSK 文件导入到内建数据时每个块的大小",
        "default" : {
          "oneliner" : true,
          "hocon" : "50"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "此配置用于启用 TLS-PSK 身份验证。\n\nPSK 是 “Pre-Shared-Keys” 的缩写。\n\n注意: 确保 SSL 监听器仅启用了 'tlsv1.2'，并且配置了PSK 密码套件，例如 'RSA-PSK-AES256-GCM-SHA384'。\n\n可以通过查看监听器中的 SSL 选项，了解更多详细信息。\n\n可以通过配置 'init_file' 来设置初始化的 ID 和 密钥"
  },
  {
    "tags" : [
      "Bridge"
    ],
    "paths" : [
      "bridges"
    ],
    "full_name" : "bridge:bridges",
    "fields" : [
      {
        "type" : {
          "values" : {
            "name" : "bridge_webhook:config",
            "kind" : "struct"
          },
          "name" : "name",
          "kind" : "map"
        },
        "name" : "webhook",
        "desc" : "转发消息到 HTTP 服务器的 WebHook",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "values" : {
            "name" : "bridge_mqtt:config",
            "kind" : "struct"
          },
          "name" : "name",
          "kind" : "map"
        },
        "name" : "mqtt",
        "desc" : "桥接到另一个 MQTT Broker 的 MQTT Bridge",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "MQTT Bridge 配置"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "bridges.mqtt.$name"
    ],
    "full_name" : "bridge_mqtt:config",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "启用/禁用 Bridge",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "bridge_mqtt:creation_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          
        },
        "name" : "resource_opts",
        "desc" : "资源相关的选项。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "cluster_shareload"
          ],
          "kind" : "enum"
        },
        "raw_default" : "cluster_shareload",
        "name" : "mode",
        "desc" : "MQTT 桥的模式。 <br/>\n- cluster_shareload：在 emqx 集群的每个节点上创建一个 MQTT 连接。<br/>\n在“cluster_shareload”模式下，来自远程代理的传入负载通过共享订阅的方式接收。<br/>\n请注意，`clientid` 以节点名称为后缀，这是为了避免不同节点之间的 ` clientid` 冲突。\n而且对于入口连接的 `remote.topic`，我们只能使用共享订阅主题过滤器。",
        "default" : {
          "oneliner" : true,
          "hocon" : "cluster_shareload"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "server",
        "desc" : "远程 MQTT Broker的主机和端口。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "clientid_prefix",
        "desc" : "可选的前缀，用于在出口网桥使用的clientid前加上前缀。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "reconnect_interval",
        "desc" : "Deprecated since v5.0.16.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "v3",
            "v4",
            "v5"
          ],
          "kind" : "enum"
        },
        "raw_default" : "v4",
        "name" : "proto_ver",
        "desc" : "MQTT 协议版本",
        "default" : {
          "oneliner" : true,
          "hocon" : "v4"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "bridge_mode",
        "desc" : "是否启用 Bridge Mode。\n注意：此设置只针对 MQTT 协议版本 < 5.0 有效，并且需要远程 MQTT Broker 支持 Bridge Mode。\n如果设置为 true ，桥接会告诉远端服务器当前连接是一个桥接而不是一个普通的客户端。\n这意味着消息回环检测会更加高效，并且远端服务器收到的保留消息的标志位会透传给本地。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "username",
        "desc" : "MQTT 协议的用户名",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "password",
        "desc" : "MQTT 协议的密码",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "clean_start",
        "desc" : "与 ingress MQTT 桥的远程服务器重连时是否清除老的 MQTT 会话。",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "300s",
        "name" : "keepalive",
        "desc" : "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,\n- `s` for seconds,\n- `m` for minutes,\n- `h` for hours;\n<br/>or combination of whereof: `1h5m0s`",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"300s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "retry_interval",
        "desc" : "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,\n- `s` for seconds,\n- `m` for minutes,\n- `h` for hours;\n<br/>or combination of whereof: `1h5m0s`",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "non_neg_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 32,
        "name" : "max_inflight",
        "desc" : "MQTT 协议的最大飞行（已发送但未确认）消息",
        "default" : {
          "oneliner" : true,
          "hocon" : "32"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "connector-mqtt:ingress",
          "kind" : "struct"
        },
        "name" : "ingress",
        "desc" : "入口配置定义了该桥接如何从远程 MQTT Broker 接收消息，然后将消息发送到本地 Broker。<br/>\n        以下字段中允许使用带有变量的模板：'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'。<br/>\n        注意：如果此桥接被用作规则的输入，并且配置了 'local.topic'，则从远程代理获取的消息将同时被发送到 'local.topic' 和规则。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "connector-mqtt:egress",
          "kind" : "struct"
        },
        "name" : "egress",
        "desc" : "出口配置定义了该桥接如何将消息从本地 Broker 转发到远程 Broker。\n以下字段中允许使用带有变量的模板：'remote.topic', 'local.qos', 'local.retain', 'local.payload'。<br/>\n注意：如果此桥接被用作规则的动作，并且配置了 'local.topic'，则从规则输出的数据以及匹配到 'local.topic' 的 MQTT 消息都会被转发。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "MQTT Bridge 的配置。"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "bridges.mqtt.$name.resource_opts"
    ],
    "full_name" : "bridge_mqtt:creation_opts",
    "fields" : [
      {
        "type" : {
          "name" : "non_neg_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 16,
        "name" : "worker_pool_size",
        "desc" : "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "health_check_interval",
        "desc" : "健康检查间隔。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : "true",
        "name" : "start_after_created",
        "desc" : "是否在创建资源后立即启动资源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"true\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "5s",
        "name" : "start_timeout",
        "desc" : "在回复资源创建请求前等待资源进入健康状态的时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "infinity",
              "kind" : "singleton"
            },
            {
              "name" : "emqx_schema:duration_ms()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "60s",
        "name" : "auto_restart_interval",
        "desc" : "资源断开以后，自动重连的时间间隔。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"60s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "sync",
            "async"
          ],
          "kind" : "enum"
        },
        "raw_default" : "async",
        "name" : "query_mode",
        "desc" : "请求模式。可选 '同步/异步'，默认为'异步'模式。",
        "default" : {
          "oneliner" : true,
          "hocon" : "async"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "infinity",
              "kind" : "singleton"
            },
            {
              "name" : "emqx_schema:duration_ms()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "15s",
        "name" : "request_timeout",
        "desc" : "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 100,
        "name" : "inflight_window",
        "desc" : "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        },
        "aliases" : [
          "async_inflight_window"
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "enable_queue",
        "desc" : "Deprecated since v5.0.14.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "raw_default" : "256MB",
        "name" : "max_buffer_bytes",
        "desc" : "每个缓存 worker 允许使用的最大字节数。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"256MB\""
        },
        "aliases" : [
          "max_queue_bytes"
        ]
      }
    ],
    "desc" : "资源启动相关的选项。"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "bridges.webhook.$name"
    ],
    "full_name" : "bridge_webhook:config",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "desc" : "启用/禁用 Bridge",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "bridge_webhook:creation_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          
        },
        "name" : "resource_opts",
        "desc" : "资源相关的选项。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "connect_timeout",
        "desc" : "连接HTTP服务器的超时时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "name" : "retry_interval",
        "desc" : "Deprecated since 5.0.4.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_connector_http:pool_type()",
          "kind" : "primitive"
        },
        "raw_default" : "random",
        "name" : "pool_type",
        "desc" : "连接池的类型，可用类型有`random`, `hash`。",
        "default" : {
          "oneliner" : true,
          "hocon" : "random"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 8,
        "name" : "pool_size",
        "desc" : "连接池大小。",
        "default" : {
          "oneliner" : true,
          "hocon" : "8"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 100,
        "name" : "enable_pipelining",
        "desc" : "正整数，设置最大可发送的异步 HTTP 请求数量。当设置为 1 时，表示每次发送完成 HTTP 请求后都需要等待服务器返回，再继续发送下一个请求。",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "connector-http:request",
          "kind" : "struct"
        },
        "name" : "request",
        "desc" : "设置 HTTP 请求的参数。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "broker:ssl_client_opts",
          "kind" : "struct"
        },
        "raw_default" : {
          "enable" : false
        },
        "name" : "ssl",
        "desc" : "启用 SSL 连接。",
        "default" : {
          "oneliner" : true,
          "hocon" : "{enable = false}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "url",
        "desc" : "HTTP Bridge 的 URL。<br/>\n路径中允许使用带变量的模板，但是 host， port 不允许使用变量模板。<br/>\n例如，` http://localhost:9901/${topic} ` 是允许的，\n但是` http://${host}:9901/message `\n或 ` http://localhost:${port}/message `\n不允许。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "egress",
          "kind" : "singleton"
        },
        "name" : "direction",
        "desc" : "Deprecated since 5.0.12.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "local_topic",
        "desc" : "发送到 'local_topic' 的消息都会转发到 HTTP 服务器。 <br/>\n注意：如果这个 Bridge 被用作规则（EMQX 规则引擎）的输出，同时也配置了 'local_topic' ，那么这两部分的消息都会被转发到 HTTP 服务器。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "post",
            "put",
            "get",
            "delete"
          ],
          "kind" : "enum"
        },
        "raw_default" : "post",
        "name" : "method",
        "desc" : "HTTP 请求的方法。 所有可用的方法包括：post、put、get、delete。<br/>\n允许使用带有变量的模板。",
        "default" : {
          "oneliner" : true,
          "hocon" : "post"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "raw_default" : {
          "keep-alive" : "timeout=5",
          "content-type" : "application/json",
          "connection" : "keep-alive",
          "cache-control" : "no-cache",
          "accept" : "application/json"
        },
        "name" : "headers",
        "desc" : "HTTP 请求的标头。<br/>\n允许使用带有变量的模板。",
        "default" : {
          "oneliner" : false,
          "hocon" : "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"content-type\" = \"application/json\"\n  \"keep-alive\" = \"timeout=5\"\n}\n"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "body",
        "desc" : "HTTP 请求的正文。<br/>\n如果没有设置该字段，请求正文将是包含所有可用字段的 JSON object。<br/>\n如果该 webhook 是由于收到 MQTT 消息触发的，'所有可用字段' 将是 MQTT 消息的\n上下文信息；如果该 webhook 是由于规则触发的，'所有可用字段' 则为触发事件的上下文信息。<br/>\n允许使用带有变量的模板。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "non_neg_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 2,
        "name" : "max_retries",
        "desc" : "HTTP 请求失败最大重试次数",
        "default" : {
          "oneliner" : true,
          "hocon" : "2"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "request_timeout",
        "desc" : "HTTP 请求超时",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "HTTP Bridge 配置"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "bridges.webhook.$name.resource_opts"
    ],
    "full_name" : "bridge_webhook:creation_opts",
    "fields" : [
      {
        "type" : {
          "name" : "non_neg_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 16,
        "name" : "worker_pool_size",
        "desc" : "缓存队列 worker 数量。仅对 egress 类型的桥接有意义。当桥接仅有 ingress 方向时，可设置为 0，否则必须大于 0。",
        "default" : {
          "oneliner" : true,
          "hocon" : "16"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "health_check_interval",
        "desc" : "健康检查间隔。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : "true",
        "name" : "start_after_created",
        "desc" : "是否在创建资源后立即启动资源。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"true\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "5s",
        "name" : "start_timeout",
        "desc" : "在回复资源创建请求前等待资源进入健康状态的时间。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"5s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "infinity",
              "kind" : "singleton"
            },
            {
              "name" : "emqx_schema:duration_ms()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "60s",
        "name" : "auto_restart_interval",
        "desc" : "资源断开以后，自动重连的时间间隔。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"60s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "sync",
            "async"
          ],
          "kind" : "enum"
        },
        "raw_default" : "async",
        "name" : "query_mode",
        "desc" : "请求模式。可选 '同步/异步'，默认为'异步'模式。",
        "default" : {
          "oneliner" : true,
          "hocon" : "async"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "infinity",
              "kind" : "singleton"
            },
            {
              "name" : "emqx_schema:duration_ms()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "15s",
        "name" : "request_timeout",
        "desc" : "从请求进入缓冲区开始计时，如果请求在规定的时间内仍停留在缓冲区内或者已发送但未能及时收到响应或确认，该请求将被视为过期。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "pos_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 100,
        "name" : "inflight_window",
        "desc" : "请求飞行队列窗口大小。当请求模式为异步时，如果需要严格保证来自同一 MQTT 客户端的消息有序，则必须将此值设为 1。",
        "default" : {
          "oneliner" : true,
          "hocon" : "100"
        },
        "aliases" : [
          "async_inflight_window"
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "enable_queue",
        "desc" : "Deprecated since v5.0.14.",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "raw_default" : "256MB",
        "name" : "max_buffer_bytes",
        "desc" : "每个缓存 worker 允许使用的最大字节数。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"256MB\""
        },
        "aliases" : [
          "max_queue_bytes"
        ]
      }
    ],
    "desc" : "资源启动相关的选项。"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "authentication.$INDEX.request",
      "authorization.sources.$INDEX.request",
      "bridges.webhook.$name.request"
    ],
    "full_name" : "connector-http:request",
    "fields" : [
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "method",
        "desc" : "HTTP 请求方法。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "path",
        "desc" : "HTTP请求路径。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "body",
        "desc" : "HTTP请求报文主体。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "map()",
          "kind" : "primitive"
        },
        "name" : "headers",
        "desc" : "HTTP 头字段列表。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "non_neg_integer()",
          "kind" : "primitive"
        },
        "name" : "max_retries",
        "desc" : "请求出错时的最大重试次数。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "name" : "request_timeout",
        "desc" : "HTTP 请求超时。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : ""
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "bridges.mqtt.$name.egress"
    ],
    "full_name" : "connector-mqtt:egress",
    "fields" : [
      {
        "type" : {
          "name" : "connector-mqtt:egress_local",
          "kind" : "struct"
        },
        "name" : "local",
        "desc" : "如何从本地 Broker 接收消息相关的配置。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "connector-mqtt:egress_remote",
          "kind" : "struct"
        },
        "name" : "remote",
        "desc" : "发送消息到远程 Broker 相关的配置。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "出口配置定义了该桥接如何将消息从本地 Broker 转发到远程 Broker。\n以下字段中允许使用带有变量的模板：'remote.topic', 'local.qos', 'local.retain', 'local.payload'。<br/>\n注意：如果此桥接被用作规则的动作，并且配置了 'local.topic'，则从规则输出的数据以及匹配到 'local.topic' 的 MQTT 消息都会被转发。"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "bridges.mqtt.$name.egress.local"
    ],
    "full_name" : "connector-mqtt:egress_local",
    "fields" : [
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "topic",
        "desc" : "要转发到远程broker的本地主题",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "如何从本地 Broker 接收消息相关的配置。"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "bridges.mqtt.$name.egress.remote"
    ],
    "full_name" : "connector-mqtt:egress_remote",
    "fields" : [
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "topic",
        "desc" : "转发到远程broker的哪个topic。<br/>\n允许使用带有变量的模板。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "qos()",
              "kind" : "primitive"
            },
            {
              "name" : "binary()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : 1,
        "name" : "qos",
        "desc" : "待发送 MQTT 消息的 QoS。<br/>\n允许使用带有变量的模板。",
        "default" : {
          "oneliner" : true,
          "hocon" : "1"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "boolean()",
              "kind" : "primitive"
            },
            {
              "name" : "binary()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : false,
        "name" : "retain",
        "desc" : "要发送的 MQTT 消息的“保留”标志。<br/>\n允许使用带有变量的模板。",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "payload",
        "desc" : "要发送的 MQTT 消息的负载。<br/>\n允许使用带有变量的模板。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "发送消息到远程 Broker 相关的配置。"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "bridges.mqtt.$name.ingress"
    ],
    "full_name" : "connector-mqtt:ingress",
    "fields" : [
      {
        "type" : {
          "name" : "connector-mqtt:ingress_remote",
          "kind" : "struct"
        },
        "name" : "remote",
        "desc" : "订阅远程 Broker 相关的配置。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "connector-mqtt:ingress_local",
          "kind" : "struct"
        },
        "name" : "local",
        "desc" : "发送消息到本地 Broker 相关的配置。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "入口配置定义了该桥接如何从远程 MQTT Broker 接收消息，然后将消息发送到本地 Broker。<br/>\n        以下字段中允许使用带有变量的模板：'remote.qos', 'local.topic', 'local.qos', 'local.retain', 'local.payload'。<br/>\n        注意：如果此桥接被用作规则的输入，并且配置了 'local.topic'，则从远程代理获取的消息将同时被发送到 'local.topic' 和规则。"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "bridges.mqtt.$name.ingress.local"
    ],
    "full_name" : "connector-mqtt:ingress_local",
    "fields" : [
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "topic",
        "desc" : "向本地broker的哪个topic发送消息。<br/>\n允许使用带有变量的模板。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "qos()",
              "kind" : "primitive"
            },
            {
              "name" : "binary()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "${qos}",
        "name" : "qos",
        "desc" : "待发送 MQTT 消息的 QoS。<br/>\n允许使用带有变量的模板。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${qos}\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "members" : [
            {
              "name" : "boolean()",
              "kind" : "primitive"
            },
            {
              "name" : "binary()",
              "kind" : "primitive"
            }
          ],
          "kind" : "union"
        },
        "raw_default" : "${retain}",
        "name" : "retain",
        "desc" : "要发送的 MQTT 消息的“保留”标志。<br/>\n允许使用带有变量的模板。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${retain}\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "payload",
        "desc" : "要发送的 MQTT 消息的负载。<br/>\n允许使用带有变量的模板。",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "发送消息到本地 Broker 相关的配置。"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "bridges.mqtt.$name.ingress.remote"
    ],
    "full_name" : "connector-mqtt:ingress_remote",
    "fields" : [
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "name" : "topic",
        "desc" : "从远程broker的哪个topic接收消息",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "qos()",
          "kind" : "primitive"
        },
        "raw_default" : 1,
        "name" : "qos",
        "desc" : "订阅远程borker时要使用的 QoS 级别",
        "default" : {
          "oneliner" : true,
          "hocon" : "1"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "订阅远程 Broker 相关的配置。"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "plugins"
    ],
    "full_name" : "plugin:plugins",
    "fields" : [
      {
        "type" : {
          "kind" : "array",
          "elements" : {
            "name" : "plugin:state",
            "kind" : "struct"
          }
        },
        "raw_default" : [
          
        ],
        "name" : "states",
        "importance" : "high",
        "desc" : "一组插件的状态。插件将按照定义的顺序启动",
        "default" : {
          "oneliner" : true,
          "hocon" : "[]"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "plugins",
        "name" : "install_dir",
        "importance" : "low",
        "desc" : "插件安装包的目录，出于安全考虑，该目录应该值允许 `emqx`，或用于运行 EMQX 服务的用户拥有写入权限。",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"plugins\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration()",
          "kind" : "primitive"
        },
        "name" : "check_interval",
        "desc" : "Deprecated since 5.0.24.",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "管理EMQX插件。<br/>\n插件可以是EMQX安装包中的一部分，也可以是一个独立的安装包。<br/>\n独立安装的插件称为“外部插件”。"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "plugins.states.$INDEX"
    ],
    "full_name" : "plugin:state",
    "fields" : [
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "name" : "name_vsn",
        "desc" : "插件的名称{name}-{version}。<br/>\n它应该与插件的发布包名称一致，如my_plugin-0.1.0。",
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "name" : "enable",
        "desc" : "设置为“true”以启用此插件",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "描述插件的状态"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "prometheus"
    ],
    "full_name" : "prometheus",
    "fields" : [
      {
        "type" : {
          "name" : "string()",
          "kind" : "primitive"
        },
        "raw_default" : "http://127.0.0.1:9091",
        "name" : "push_gateway_server",
        "desc" : "Prometheus 服务器地址",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"http://127.0.0.1:9091\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "15s",
        "name" : "interval",
        "desc" : "数据推送间隔",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"15s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "[{string(), string()}]",
          "kind" : "primitive"
        },
        "raw_default" : {
          
        },
        "name" : "headers",
        "desc" : "推送到 Push Gateway 的 HTTP Headers 列表。<br/>\n例如，` { Authorization = \"some-authz-tokens\"}`",
        "default" : {
          "oneliner" : true,
          "hocon" : "{}"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "binary()",
          "kind" : "primitive"
        },
        "raw_default" : "${name}/instance/${name}~${host}",
        "name" : "job_name",
        "desc" : "推送到 Push Gateway 的 Job 名称。可用变量为：<br/>\n- ${name}: EMQX 节点的名称。\n- ${host}: EMQX 节点主机名。\n例如，当 EMQX 节点名为 `emqx@127.0.0.1` 则 name 变量的值为 `emqx`，host 变量的值为 `127.0.0.1`。<br/>\n默认值为: `${name}/instance/${name}~${host}`",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"${name}/instance/${name}~${host}\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "enable",
        "desc" : "开启或关闭 Prometheus 数据推送",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Prometheus 监控数据推送"
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "retainer.backend"
    ],
    "full_name" : "retainer:mnesia_config",
    "fields" : [
      {
        "type" : {
          "name" : "built_in_database",
          "kind" : "singleton"
        },
        "raw_default" : "built_in_database",
        "name" : "type",
        "importance" : "high",
        "desc" : "后端类型",
        "default" : {
          "oneliner" : true,
          "hocon" : "built_in_database"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "symbols" : [
            "ram",
            "disc"
          ],
          "kind" : "enum"
        },
        "raw_default" : "ram",
        "name" : "storage_type",
        "importance" : "high",
        "desc" : "选择消息是存放在磁盘还是内存中",
        "default" : {
          "oneliner" : true,
          "hocon" : "ram"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "non_neg_integer()",
          "kind" : "primitive"
        },
        "raw_default" : 0,
        "name" : "max_retained_messages",
        "importance" : "high",
        "desc" : "消息保留的数量上限。0 表示无限",
        "default" : {
          "oneliner" : true,
          "hocon" : "0"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "[[integer()]]",
          "kind" : "primitive"
        },
        "raw_default" : [
          [
            1,
            2,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            3
          ],
          [
            3
          ]
        ],
        "name" : "index_specs",
        "examples" : [
          [
            [
              2,
              4
            ],
            [
              1,
              3
            ]
          ]
        ],
        "desc" : "Retainer index specifications: list of arrays of positive ascending integers. Each array specifies an index. Numbers in an index specification are 1-based word positions in topics. Words from specified positions will be used for indexing.<br/>For example, it is good to have `[2, 4]` index to optimize `+/X/+/Y/...` topic wildcard subscriptions.",
        "default" : {
          "oneliner" : false,
          "hocon" : "[\n  [1, 2, 3],\n  [1, 3],\n  [2, 3],\n  [3]\n]\n"
        },
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Configuration of the internal database storing retained messages."
  },
  {
    "tags" : [
      
    ],
    "paths" : [
      "retainer"
    ],
    "full_name" : "retainer",
    "fields" : [
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : true,
        "name" : "enable",
        "importance" : "high",
        "desc" : "是否开启消息保留功能",
        "default" : {
          "oneliner" : true,
          "hocon" : "true"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "0s",
        "name" : "msg_expiry_interval",
        "importance" : "high",
        "desc" : "消息保留时间。0 代表永久保留",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"0s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:duration_ms()",
          "kind" : "primitive"
        },
        "raw_default" : "0s",
        "name" : "msg_clear_interval",
        "importance" : "high",
        "desc" : "消息清理间隔。0 代表不进行清理",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"0s\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "emqx_schema:bytesize()",
          "kind" : "primitive"
        },
        "raw_default" : "1MB",
        "name" : "max_payload_size",
        "importance" : "high",
        "desc" : "消息大小最大值",
        "default" : {
          "oneliner" : true,
          "hocon" : "\"1MB\""
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "boolean()",
          "kind" : "primitive"
        },
        "raw_default" : false,
        "name" : "stop_publish_clear_msg",
        "importance" : "high",
        "desc" : "是否不发送保留消息的清理消息，在 MQTT 5.0 中如果一条保留消息的消息体为空，则会清除掉之前存储\n的对应的保留消息，通过这个值控制是否停止发送清理消息",
        "default" : {
          "oneliner" : true,
          "hocon" : "false"
        },
        "aliases" : [
          
        ]
      },
      {
        "type" : {
          "name" : "retainer:mnesia_config",
          "kind" : "struct"
        },
        "name" : "backend",
        "desc" : "保留消息的存储后端",
        "aliases" : [
          
        ]
      }
    ],
    "desc" : "Configuration related to handling `PUBLISH` packets with a `retain` flag set to 1."
  }
]